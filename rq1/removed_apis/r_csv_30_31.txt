classes:
Landroid/app/ActivityManager$StackInfo;
Landroid/app/ActivityManager$TaskSnapshot;
Landroid/app/ActivityManager$TaskSnapshot$Builder;
Landroid/app/ActivityOptions$HideWindowListener;
Landroid/app/ActivityView;
Landroid/app/ActivityView$StateCallback;
Landroid/app/ActivityView$StateCallbackAdapter;
Landroid/app/ActivityView$SurfaceCallback;
Landroid/app/AppexitEnums;
Landroid/app/ApplicationPackageManager$OnPermissionsChangeListenerDelegate;
Landroid/app/ExitTransitionCoordinator$HideSharedElementsCallback;
Landroid/app/HomeVisibilityObserver;
Landroid/app/KeyguardManager$LockTypes;
Landroid/app/WindowContext;
Landroid/app/WindowTokenClient;
Landroid/bluetooth/IBluetoothHeadsetPhone;
Landroid/bluetooth/IBluetoothHeadsetPhone$Default;
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;
Landroid/compat/Compatibility$Callbacks;
Landroid/ddm/DdmHandleThread;
Landroid/gamedriver/GameDriverProto;
Landroid/gamedriver/GameDriverProto$Blacklist;
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;
Landroid/gamedriver/GameDriverProto$BlacklistOrBuilder;
Landroid/gamedriver/GameDriverProto$Blacklists;
Landroid/gamedriver/GameDriverProto$Blacklists$Builder;
Landroid/gamedriver/GameDriverProto$BlacklistsOrBuilder;
Landroid/graphics/ColorSpace$Renderer;
Landroid/graphics/ColorSpace$Renderer$Point;
Landroid/graphics/LargeBitmap;
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Default;
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub$Proxy;
Landroid/hardware/camera2/legacy/BurstHolder;
Landroid/hardware/camera2/legacy/CameraDeviceState;
Landroid/hardware/camera2/legacy/CameraDeviceState$CameraDeviceStateListener;
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread$CallbackHandler;
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraLooper;
Landroid/hardware/camera2/legacy/CaptureCollector;
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;
Landroid/hardware/camera2/legacy/GLThreadManager;
Landroid/hardware/camera2/legacy/GLThreadManager$ConfigureHolder;
Landroid/hardware/camera2/legacy/LegacyCameraDevice;
Landroid/hardware/camera2/legacy/LegacyExceptionUtils;
Landroid/hardware/camera2/legacy/LegacyExceptionUtils$BufferQueueAbandonedException;
Landroid/hardware/camera2/legacy/LegacyFaceDetectMapper;
Landroid/hardware/camera2/legacy/LegacyFocusStateMapper;
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;
Landroid/hardware/camera2/legacy/LegacyRequest;
Landroid/hardware/camera2/legacy/LegacyRequestMapper;
Landroid/hardware/camera2/legacy/LegacyResultMapper;
Landroid/hardware/camera2/legacy/ParameterUtils;
Landroid/hardware/camera2/legacy/ParameterUtils$MeteringData;
Landroid/hardware/camera2/legacy/ParameterUtils$WeightedRectangle;
Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;
Landroid/hardware/camera2/legacy/PerfMeasurement;
Landroid/hardware/camera2/legacy/RequestHandlerThread;
Landroid/hardware/camera2/legacy/RequestHolder;
Landroid/hardware/camera2/legacy/RequestHolder$Builder;
Landroid/hardware/camera2/legacy/RequestQueue;
Landroid/hardware/camera2/legacy/RequestQueue$RequestQueueEntry;
Landroid/hardware/camera2/legacy/RequestThreadManager;
Landroid/hardware/camera2/legacy/RequestThreadManager$ConfigureHolder;
Landroid/hardware/camera2/legacy/RequestThreadManager$FpsCounter;
Landroid/hardware/camera2/legacy/SizeAreaComparator;
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer$EGLSurfaceHolder;
Landroid/hardware/fingerprint/FingerprintManager$EnumerateCallback;
Landroid/hardware/input/InputManager$InputDeviceVibrator;
Landroid/icu/impl/ICUCurrencyDisplayInfoProvider$ICUCurrencyDisplayInfo$NarrowSymbol;
Landroid/icu/impl/SimpleFormatterImpl$Int64Iterator;
Landroid/icu/number/Precision$PassThroughRounderImpl;
Landroid/icu/text/PluralRanges;
Landroid/icu/text/PluralRanges$Matrix;
Landroid/icu/text/RuleBasedBreakIterator$LookAheadResults;
Landroid/icu/util/ULocale$1ULocaleAcceptLanguageQ;
Landroid/location/AbstractListenerManager;
Landroid/location/AbstractListenerManager$Registration;
Landroid/location/IBatchedLocationCallback;
Landroid/location/IBatchedLocationCallback$Default;
Landroid/location/IBatchedLocationCallback$Stub;
Landroid/location/IBatchedLocationCallback$Stub$Proxy;
Landroid/location/LocationManager$BatchedLocationCallbackManager;
Landroid/location/LocationManager$BatchedLocationCallbackManager$BatchedLocationCallback;
Landroid/location/LocationManager$GnssAntennaInfoListenerManager;
Landroid/location/LocationManager$GnssAntennaInfoListenerManager$GnssAntennaInfoListener;
Landroid/location/LocationManager$GnssMeasurementsListenerManager;
Landroid/location/LocationManager$GnssMeasurementsListenerManager$GnssMeasurementsListener;
Landroid/location/LocationManager$GnssNavigationMessageListenerManager;
Landroid/location/LocationManager$GnssNavigationMessageListenerManager$GnssNavigationMessageListener;
Landroid/location/LocationManager$GnssStatusListenerManager;
Landroid/location/LocationManager$GnssStatusListenerManager$GnssStatusListener;
Landroid/location/LocationManager$NmeaAdapter;
Landroid/media/AudioManager$StrategyPreferredDeviceDispatcherStub;
Landroid/media/IRemoteVolumeController;
Landroid/media/IRemoteVolumeController$Default;
Landroid/media/IRemoteVolumeController$Stub;
Landroid/media/IRemoteVolumeController$Stub$Proxy;
Landroid/media/IStrategyPreferredDeviceDispatcher;
Landroid/media/IStrategyPreferredDeviceDispatcher$Default;
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub;
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub$Proxy;
Landroid/media/MediaTranscodeManager;
Landroid/media/MediaTranscodeManager$OnTranscodingFinishedListener;
Landroid/media/MediaTranscodeManager$TranscodingJob;
Landroid/media/MediaTranscodeManager$TranscodingJob$OnProgressChangedListener;
Landroid/media/MediaTranscodeManager$TranscodingRequest;
Landroid/media/MediaTranscodeManager$TranscodingRequest$Builder;
Landroid/media/PlayerBase$IAppOpsCallbackWrapper;
Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;
Landroid/net/DnsPacket;
Landroid/net/DnsPacket$DnsHeader;
Landroid/net/DnsPacket$DnsRecord;
Landroid/net/shared/Inet4AddressUtils;
Landroid/net/shared/InetAddressUtils;
Landroid/net/util/IpRange;
Landroid/net/util/IpUtils;
Landroid/net/util/LinkPropertiesUtils;
Landroid/net/util/LinkPropertiesUtils$CompareOrUpdateResult;
Landroid/net/util/LinkPropertiesUtils$CompareResult;
Landroid/net/util/MacAddressUtils;
Landroid/net/util/NetUtils;
Landroid/net/util/nsd/DnsSdTxtRecord;
Landroid/net/wifi/ITxPacketCountListener;
Landroid/net/wifi/ITxPacketCountListener$Default;
Landroid/net/wifi/ITxPacketCountListener$Stub;
Landroid/net/wifi/ITxPacketCountListener$Stub$Proxy;
Landroid/os/BasicShellCommandHandler;
Landroid/os/GraphicsEnvironment$OpenGlDriverChoice;
Landroid/os/INetworkActivityListener;
Landroid/os/INetworkActivityListener$Default;
Landroid/os/INetworkActivityListener$Stub;
Landroid/os/INetworkActivityListener$Stub$Proxy;
Landroid/os/IVibratorService;
Landroid/os/IVibratorService$Default;
Landroid/os/IVibratorService$Stub;
Landroid/os/IVibratorService$Stub$Proxy;
Landroid/os/SystemVibrator$OnVibratorStateChangedListenerDelegate;
Landroid/os/VibrationEffect$Composition$PrimitiveEffect;
Landroid/os/VibrationEffect$OneShot;
Landroid/os/VibrationEffect$Prebaked;
Landroid/os/VibrationEffect$Waveform;
Landroid/os/storage/StorageManagerInternal$ExternalStorageMountPolicy;
Landroid/permission/PermissionManagerInternal$CheckPermissionDelegate;
Landroid/permission/PermissionManagerInternal$OnRuntimePermissionStateChangedListener;
Landroid/providers/settings/GlobalSettingsProto$Auto;
Landroid/security/IConfirmationPromptCallback;
Landroid/security/IConfirmationPromptCallback$Default;
Landroid/security/IConfirmationPromptCallback$Stub;
Landroid/security/IConfirmationPromptCallback$Stub$Proxy;
Landroid/security/KeyStore$CertificateChainPromise;
Landroid/security/KeyStore$ExportKeyPromise;
Landroid/security/KeyStore$KeyAttestationCallbackResult;
Landroid/security/KeyStore$KeyCharacteristicsCallbackResult;
Landroid/security/KeyStore$KeyCharacteristicsPromise;
Landroid/security/KeyStore$KeystoreResultPromise;
Landroid/security/KeyStore$OperationPromise;
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$CBC;
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$CBC$NoPadding;
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$CBC$PKCS7Padding;
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$ECB;
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$ECB$NoPadding;
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$ECB$PKCS7Padding;
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi;
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$AdditionalAuthenticationDataStream;
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$BufferAllOutputUntilDoFinalStreamer;
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM$NoPadding;
Landroid/security/keystore/AndroidKeyStoreBCWorkaroundProvider;
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi;
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$NONE;
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$NONE$TruncateToFieldSizeMessageStreamer;
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$SHA1;
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$SHA224;
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$SHA256;
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$SHA384;
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$SHA512;
Landroid/security/keystore/AndroidKeyStoreECPrivateKey;
Landroid/security/keystore/AndroidKeyStoreECPublicKey;
Landroid/security/keystore/AndroidKeyStoreHmacSpi;
Landroid/security/keystore/AndroidKeyStoreHmacSpi$HmacSHA1;
Landroid/security/keystore/AndroidKeyStoreHmacSpi$HmacSHA224;
Landroid/security/keystore/AndroidKeyStoreHmacSpi$HmacSHA256;
Landroid/security/keystore/AndroidKeyStoreHmacSpi$HmacSHA384;
Landroid/security/keystore/AndroidKeyStoreHmacSpi$HmacSHA512;
Landroid/security/keystore/AndroidKeyStoreKey;
Landroid/security/keystore/AndroidKeyStoreKeyFactorySpi;
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$AES;
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$DESede;
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$HmacBase;
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$HmacSHA1;
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$HmacSHA224;
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$HmacSHA256;
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$HmacSHA384;
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$HmacSHA512;
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi$EC;
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi$RSA;
Landroid/security/keystore/AndroidKeyStoreLoadStoreParameter;
Landroid/security/keystore/AndroidKeyStorePrivateKey;
Landroid/security/keystore/AndroidKeyStorePublicKey;
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$NoPadding;
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithMGF1Padding;
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithSHA1AndMGF1Padding;
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithSHA224AndMGF1Padding;
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithSHA256AndMGF1Padding;
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithSHA384AndMGF1Padding;
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithSHA512AndMGF1Padding;
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$PKCS1Padding;
Landroid/security/keystore/AndroidKeyStoreRSAPrivateKey;
Landroid/security/keystore/AndroidKeyStoreRSAPublicKey;
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi;
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$MD5WithPKCS1Padding;
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$NONEWithPKCS1Padding;
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$PKCS1Padding;
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$PSSPadding;
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA1WithPKCS1Padding;
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA1WithPSSPadding;
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA224WithPKCS1Padding;
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA224WithPSSPadding;
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA256WithPKCS1Padding;
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA256WithPSSPadding;
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA384WithPKCS1Padding;
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA384WithPSSPadding;
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA512WithPKCS1Padding;
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA512WithPSSPadding;
Landroid/security/keystore/AndroidKeyStoreSecretKey;
Landroid/security/keystore/AndroidKeyStoreSecretKeyFactorySpi;
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;
Landroid/security/keystore/AndroidKeyStoreSpi;
Landroid/security/keystore/AndroidKeyStoreSpi$KeyStoreX509Certificate;
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$CBC;
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$CBC$NoPadding;
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$CBC$PKCS7Padding;
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$CTR;
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$CTR$NoPadding;
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$ECB;
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$ECB$NoPadding;
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$ECB$PKCS7Padding;
Landroid/security/keystore/ICredstoreTokenCallback;
Landroid/security/keystore/ICredstoreTokenCallback$Default;
Landroid/security/keystore/ICredstoreTokenCallback$Stub;
Landroid/security/keystore/ICredstoreTokenCallback$Stub$Proxy;
Landroid/security/keystore/IKeystoreCertificateChainCallback;
Landroid/security/keystore/IKeystoreCertificateChainCallback$Default;
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub;
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub$Proxy;
Landroid/security/keystore/IKeystoreExportKeyCallback;
Landroid/security/keystore/IKeystoreExportKeyCallback$Default;
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub;
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub$Proxy;
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback;
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Default;
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub;
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub$Proxy;
Landroid/security/keystore/IKeystoreOperationResultCallback;
Landroid/security/keystore/IKeystoreOperationResultCallback$Default;
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub;
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub$Proxy;
Landroid/security/keystore/IKeystoreResponseCallback;
Landroid/security/keystore/IKeystoreResponseCallback$Default;
Landroid/security/keystore/IKeystoreResponseCallback$Stub;
Landroid/security/keystore/IKeystoreResponseCallback$Stub$Proxy;
Landroid/security/keystore/IKeystoreService;
Landroid/security/keystore/IKeystoreService$Default;
Landroid/security/keystore/IKeystoreService$Stub;
Landroid/security/keystore/IKeystoreService$Stub$Proxy;
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer$MainDataStream;
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer$Stream;
Landroid/security/keystore/KeyStoreCryptoOperationStreamer;
Landroid/security/keystore/KeyStoreCryptoOperationUtils;
Landroid/security/keystore/KeymasterUtils;
Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper;
Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapperInternal;
Landroid/service/usb/UsbServiceProto;
Landroid/speech/SpeechRecognizer$Connection;
Landroid/stats/mediametrics/Mediametrics$AudioPolicyData;
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;
Landroid/stats/mediametrics/Mediametrics$AudioTrackData;
Landroid/stats/mediametrics/Mediametrics$CodecData;
Landroid/stats/mediametrics/Mediametrics$ExtractorData;
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;
Landroid/stats/mediametrics/Mediametrics$RecorderData;
Landroid/system/suspend/ISuspendCallback;
Landroid/system/suspend/ISuspendCallback$Default;
Landroid/system/suspend/ISuspendCallback$Stub;
Landroid/system/suspend/ISuspendCallback$Stub$Proxy;
Landroid/system/suspend/ISuspendControlService;
Landroid/system/suspend/ISuspendControlService$Default;
Landroid/system/suspend/ISuspendControlService$Stub;
Landroid/system/suspend/ISuspendControlService$Stub$Proxy;
Landroid/system/suspend/WakeLockInfo;
Landroid/telephony/CdmaEriInformation;
Landroid/telephony/ModemActivityInfo$TransmitPower;
Landroid/telephony/PackageChangeReceiver;
Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback;
Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback$CapabilityBinder;
Landroid/telephony/ims/RcsContactUceCapability$Builder;
Landroid/telephony/ims/aidl/IRcsFeatureListener;
Landroid/telephony/ims/aidl/IRcsFeatureListener$Default;
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub$Proxy;
Landroid/telephony/ims/stub/RcsCapabilityExchange;
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;
Landroid/telephony/ims/stub/RcsSipOptionsImplBase;
Landroid/text/FontConfig$Family;
Landroid/util/apk/ApkSignatureSchemeV3Verifier$VerifiedProofOfRotation;
Landroid/view/DisplayListCanvas;
Landroid/view/IPinnedStackController;
Landroid/view/IPinnedStackController$Default;
Landroid/view/IPinnedStackController$Stub;
Landroid/view/IPinnedStackController$Stub$Proxy;
Landroid/view/IPinnedStackListener;
Landroid/view/IPinnedStackListener$Default;
Landroid/view/IPinnedStackListener$Stub;
Landroid/view/IPinnedStackListener$Stub$Proxy;
Landroid/view/IScrollCaptureClient;
Landroid/view/IScrollCaptureClient$Default;
Landroid/view/IScrollCaptureClient$Stub;
Landroid/view/IScrollCaptureClient$Stub$Proxy;
Landroid/view/IScrollCaptureController;
Landroid/view/IScrollCaptureController$Default;
Landroid/view/IScrollCaptureController$Stub;
Landroid/view/IScrollCaptureController$Stub$Proxy;
Landroid/view/ScrollCaptureClient;
Landroid/view/ScrollCaptureClient$DelayedAction;
Landroid/view/ScrollCaptureTargetResolver;
Landroid/view/ScrollCaptureTargetResolver$SingletonConsumer;
Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;
Landroid/view/SurfaceControl$DisplayConfig;
Landroid/view/SurfaceControl$DisplayInfo;
Landroid/view/SurfaceControl$ScreenshotGraphicBuffer;
Landroid/view/SurfaceView$RemoteAccessibilityEmbeddedConnection;
Landroid/view/TextureLayer;
Landroid/view/inputmethod/EditorInfo$InitialSurroundingText;
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorProto;
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorProto$ClientSideProto;
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorTraceFileProto;
Landroid/view/inputmethod/InputMethodManager$ControlledInputConnectionWrapper;
Landroid/view/inputmethod/InputMethodManager$ImeThreadFactory;
Landroid/widget/RemoteViews$OnClickHandler;
Landroid/window/TaskEmbedder;
Landroid/window/TaskEmbedder$Host;
Landroid/window/TaskEmbedder$Listener;
Landroid/window/TaskOrganizerTaskEmbedder;
Landroid/window/TaskOrganizerTaskEmbedder$TaskOrganizerImpl;
Landroid/window/VirtualDisplayTaskEmbedder;
Landroid/window/VirtualDisplayTaskEmbedder$TaskStackListenerImpl;
Lcom/android/ims/FeatureConnection$IFeatureUpdate;
Lcom/android/ims/FeatureConnector$RetryTimeout;
Lcom/android/ims/IFeatureConnector;
Lcom/android/ims/ImsManager$ExecutorFactory;
Lcom/android/ims/ImsManager$ImsExecutorFactory;
Lcom/android/ims/RcsFeatureManager$RcsFeatureCallbacks;
Lcom/android/internal/BrightnessSynchronizer;
Lcom/android/internal/BrightnessSynchronizer$BrightnessSyncObserver;
Lcom/android/internal/accessibility/dialog/InvisibleToggleWhiteListingFeatureTarget;
Lcom/android/internal/accessibility/dialog/ToggleWhiteListingFeatureTarget;
Lcom/android/internal/app/PlatLogoActivity$BackslashDrawable;
Lcom/android/internal/app/PlatLogoActivity$OneDrawable;
Lcom/android/internal/app/PlatLogoActivity$ZeroDrawable;
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;
Lcom/android/internal/infra/ThrottledRunnable;
Lcom/android/internal/inputmethod/CancellationGroup$Completable;
Lcom/android/internal/inputmethod/CancellationGroup$Completable$CharSequence;
Lcom/android/internal/inputmethod/CancellationGroup$Completable$ExtractedText;
Lcom/android/internal/inputmethod/CancellationGroup$Completable$Int;
Lcom/android/internal/inputmethod/CancellationGroup$Completable$ValueBase;
Lcom/android/internal/inputmethod/CancellationGroup$Completable$Values;
Lcom/android/internal/location/ILocationProvider;
Lcom/android/internal/location/ILocationProvider$Default;
Lcom/android/internal/location/ILocationProvider$Stub;
Lcom/android/internal/location/ILocationProvider$Stub$Proxy;
Lcom/android/internal/location/ILocationProviderManager;
Lcom/android/internal/location/ILocationProviderManager$Default;
Lcom/android/internal/location/ILocationProviderManager$Stub;
Lcom/android/internal/location/ILocationProviderManager$Stub$Proxy;
Lcom/android/internal/location/ProviderProperties;
Lcom/android/internal/location/ProviderRequest;
Lcom/android/internal/location/ProviderRequest$Builder;
Lcom/android/internal/location/gnssmetrics/GnssMetrics;
Lcom/android/internal/location/gnssmetrics/GnssMetrics$GnssPowerMetrics;
Lcom/android/internal/location/gnssmetrics/GnssMetrics$Statistics;
Lcom/android/internal/location/gnssmetrics/GnssMetrics$StatsPullAtomCallbackImpl;
Lcom/android/internal/net/VpnInfo;
Lcom/android/internal/os/BatteryStatsImpl$RailEnergyDataCallback;
Lcom/android/internal/os/RuntimeInit$RuntimeThreadPrioritySetter;
Lcom/android/internal/os/WifiPowerEstimator;
Lcom/android/internal/telephony/BasicShellCommandHandler;
Lcom/android/internal/telephony/LinkCapacityEstimate;
Lcom/android/internal/telephony/NetworkFactory$NetworkRequestInfo;
Lcom/android/internal/telephony/OemHookIndication;
Lcom/android/internal/telephony/OemHookResponse;
Lcom/android/internal/telephony/WapPushOverSms$BindServiceThread;
Lcom/android/internal/telephony/dataconnection/DcController$DccDefaultState;
Lcom/android/internal/telephony/ims/ImsServiceController$ImsFeatureContainer;
Lcom/android/internal/telephony/imsphone/ImsPhoneCallTracker$PhoneNumberUtilsProxy;
Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;
Lcom/android/internal/telephony/vendor/VendorMultiSimSettingController;
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher$DdsSwitchState;
Lcom/android/internal/telephony/vendor/VendorServiceStateTracker;
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;
Lcom/android/internal/telephony/vendor/VendorSubscriptionInfoUpdater;
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker$ResetEventListener;
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;
Lcom/android/internal/util/LocationPermissionChecker;
Lcom/android/internal/util/ScreenRecordHelper;
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;
Lcom/android/org/bouncycastle/asn1/ASN1OutputStream$ImplicitOutputStream;
Lcom/android/org/bouncycastle/asn1/DERBoolean;
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;
Lcom/android/org/conscrypt/CertBlacklist;
Lcom/android/org/conscrypt/CertBlacklistImpl;
Lcom/android/org/conscrypt/CertBlacklistImpl$ByteString;
Lcom/android/org/conscrypt/OpenSSLBIOSink;
Lcom/android/org/conscrypt/OpenSSLBIOSource;
Lcom/android/org/conscrypt/OpenSSLBIOSource$ByteBufferInputStream;
Lcom/android/org/conscrypt/TrustManagerImpl$GlobalHostnameVerifierAdapter;
Lcom/android/server/AlarmClockMetadataProto;
Lcom/android/server/AlarmManagerServiceDumpProto;
Lcom/android/server/AlarmManagerServiceDumpProto$AlarmStat;
Lcom/android/server/AlarmManagerServiceDumpProto$LastAllowWhileIdleDispatch;
Lcom/android/server/AlarmManagerServiceDumpProto$TopAlarm;
Lcom/android/server/AlarmProto;
Lcom/android/server/BatchProto;
Lcom/android/server/BootReceiver;
Lcom/android/server/BroadcastStatsProto;
Lcom/android/server/ConstantsProto;
Lcom/android/server/FilterStatsProto;
Lcom/android/server/IdleDispatchEntryProto;
Lcom/android/server/InFlightProto;
Lcom/android/server/PrebakedProto;
Lcom/android/server/VibrationEffectProto;
Lcom/android/server/VibrationProto;
Lcom/android/server/VibratorServiceDumpProto;
Lcom/android/server/WakeupEventProto;
Lcom/android/server/WaveformProto;
Lcom/android/server/protolog/ProtoLogFileProto;
Lcom/android/server/protolog/ProtoLogMessage;
Lcom/android/server/role/RoleManagerServiceDumpProto;
Lcom/android/server/role/RoleProto;
Lcom/android/server/role/RoleUserStateProto;
Lcom/android/server/wm/DockedStackDividerControllerProto;
Lcom/android/server/wm/PinnedStackControllerProto;
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;
Lcom/android/wifi/x/android/content/pm/ParceledListSlice;
Lcom/android/wifi/x/android/net/shared/Inet4AddressUtils;
Lcom/android/wifi/x/android/net/util/MacAddressUtils;
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;
Ldalvik/system/DalvikLogHandler;
Ldalvik/system/DalvikLogging;
Ldalvik/system/ThreadPrioritySetter;
Ljava/math/BigInt;
Ljava/math/BitLevel;
Ljava/math/Conversion;
Ljava/math/Division;
Ljava/math/Logical;
Ljava/math/Multiplication;
Ljava/math/NativeBN;
Ljava/math/Primality;
Ljava/util/ImmutableCollections$List0;
Ljava/util/ImmutableCollections$List1;
Ljava/util/ImmutableCollections$List2;
Llibcore/icu/DateTimeFormat;
Llibcore/icu/DateTimeFormat$FormatterCache;
Llibcore/icu/RelativeDateTimeFormatter;
Llibcore/icu/RelativeDateTimeFormatter$FormatterCache;
Llibcore/timezone/CountryTimeZones;
Llibcore/timezone/CountryTimeZones$OffsetResult;
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;
Llibcore/timezone/CountryZonesFinder;
Llibcore/timezone/TelephonyLookup;
Llibcore/timezone/TelephonyLookup$TelephonyNetworkProcessor;
Llibcore/timezone/TelephonyLookup$TelephonyNetworkValidator;
Llibcore/timezone/TelephonyLookup$TelephonyNetworksExtractor;
Llibcore/timezone/TelephonyNetwork;
Llibcore/timezone/TelephonyNetwork$MccMnc;
Llibcore/timezone/TelephonyNetworkFinder;
Llibcore/timezone/TimeZoneDataFiles;
Llibcore/timezone/TimeZoneFinder;
Llibcore/timezone/TimeZoneFinder$CountryZonesLookupExtractor;
Llibcore/timezone/TimeZoneFinder$IanaVersionExtractor;
Llibcore/timezone/TimeZoneFinder$SelectiveCountryTimeZonesExtractor;
Llibcore/timezone/TimeZoneFinder$TimeZonesProcessor;
Llibcore/timezone/TimeZoneFinder$TimeZonesValidator;
Llibcore/timezone/TzDataSetVersion;
Llibcore/timezone/TzDataSetVersion$TzDataSetException;
Llibcore/timezone/XmlUtils;
Llibcore/timezone/XmlUtils$ReaderSupplier;
Llibcore/timezone/ZoneInfoDb;
Llibcore/util/CoreLibraryDebug;
Llibcore/util/DebugInfo;
Llibcore/util/DebugInfo$DebugEntry;
Llibcore/util/ZoneInfo$CheckedArithmeticException;
Llibcore/util/ZoneInfo$OffsetInterval;
Llibcore/util/ZoneInfo$WallTime;
Lorg/apache/harmony/dalvik/NativeTestTarget;
----------
fields:
Landroid/Manifest$permission;->ASSOCIATE_INPUT_DEVICE_TO_DISPLAY_BY_PORT
Landroid/Manifest$permission;->OPEN_APP_OPEN_BY_DEFAULT_SETTINGS
Landroid/Manifest$permission;->RESET_FACE_LOCKOUT
Landroid/animation/AnimatorSet;->mDummyListener
Landroid/apex/IApexService$Stub;->DESCRIPTOR
Landroid/app/ActivityManager;->INSTR_FLAG_MOUNT_EXTERNAL_STORAGE_FULL
Landroid/app/ActivityManager$StackInfo;->CREATOR
Landroid/app/ActivityManager$StackInfo;->bounds
Landroid/app/ActivityManager$StackInfo;->configuration
Landroid/app/ActivityManager$StackInfo;->displayId
Landroid/app/ActivityManager$StackInfo;->position
Landroid/app/ActivityManager$StackInfo;->stackId
Landroid/app/ActivityManager$StackInfo;->stackToken
Landroid/app/ActivityManager$StackInfo;->taskBounds
Landroid/app/ActivityManager$StackInfo;->taskIds
Landroid/app/ActivityManager$StackInfo;->taskNames
Landroid/app/ActivityManager$StackInfo;->taskUserIds
Landroid/app/ActivityManager$StackInfo;->topActivity
Landroid/app/ActivityManager$StackInfo;->userId
Landroid/app/ActivityManager$StackInfo;->visible
Landroid/app/ActivityManager$TaskSnapshot;->CREATOR
Landroid/app/ActivityManager$TaskSnapshot;->mColorSpace
Landroid/app/ActivityManager$TaskSnapshot;->mContentInsets
Landroid/app/ActivityManager$TaskSnapshot;->mId
Landroid/app/ActivityManager$TaskSnapshot;->mIsLowResolution
Landroid/app/ActivityManager$TaskSnapshot;->mIsRealSnapshot
Landroid/app/ActivityManager$TaskSnapshot;->mIsTranslucent
Landroid/app/ActivityManager$TaskSnapshot;->mOrientation
Landroid/app/ActivityManager$TaskSnapshot;->mRotation
Landroid/app/ActivityManager$TaskSnapshot;->mSnapshot
Landroid/app/ActivityManager$TaskSnapshot;->mSystemUiVisibility
Landroid/app/ActivityManager$TaskSnapshot;->mTaskSize
Landroid/app/ActivityManager$TaskSnapshot;->mTopActivityComponent
Landroid/app/ActivityManager$TaskSnapshot;->mWindowingMode
Landroid/app/ActivityManager$TaskSnapshot$Builder;->mColorSpace
Landroid/app/ActivityManager$TaskSnapshot$Builder;->mContentInsets
Landroid/app/ActivityManager$TaskSnapshot$Builder;->mId
Landroid/app/ActivityManager$TaskSnapshot$Builder;->mIsRealSnapshot
Landroid/app/ActivityManager$TaskSnapshot$Builder;->mIsTranslucent
Landroid/app/ActivityManager$TaskSnapshot$Builder;->mOrientation
Landroid/app/ActivityManager$TaskSnapshot$Builder;->mPixelFormat
Landroid/app/ActivityManager$TaskSnapshot$Builder;->mRotation
Landroid/app/ActivityManager$TaskSnapshot$Builder;->mSnapshot
Landroid/app/ActivityManager$TaskSnapshot$Builder;->mSystemUiVisibility
Landroid/app/ActivityManager$TaskSnapshot$Builder;->mTaskSize
Landroid/app/ActivityManager$TaskSnapshot$Builder;->mTopActivity
Landroid/app/ActivityManager$TaskSnapshot$Builder;->mWindowingMode
Landroid/app/ActivityOptions;->KEY_SPLIT_SCREEN_CREATE_MODE
Landroid/app/ActivityOptions;->mSplitScreenCreateMode
Landroid/app/ActivityOptions$HideWindowListener;->mExit
Landroid/app/ActivityOptions$HideWindowListener;->mSharedElementHidden
Landroid/app/ActivityOptions$HideWindowListener;->mSharedElements
Landroid/app/ActivityOptions$HideWindowListener;->mTransitionEnded
Landroid/app/ActivityOptions$HideWindowListener;->mWaitingForTransition
Landroid/app/ActivityOptions$HideWindowListener;->mWindow
Landroid/app/ActivityTaskManager;->SPLIT_SCREEN_CREATE_MODE_BOTTOM_OR_RIGHT
Landroid/app/ActivityTaskManager;->SPLIT_SCREEN_CREATE_MODE_TOP_OR_LEFT
Landroid/app/ActivityThread;->REPORT_TO_ACTIVITY
Landroid/app/ActivityThread;->mCompatConfiguration
Landroid/app/ActivityThread;->mGetProviderLocks
Landroid/app/ActivityThread;->mMainThreadConfig
Landroid/app/ActivityThread;->mNumLaunchingActivities
Landroid/app/ActivityThread$ActivityClientRecord;->newConfig
Landroid/app/ActivityView;->TAG
Landroid/app/ActivityView;->mGuard
Landroid/app/ActivityView;->mOpened
Landroid/app/ActivityView;->mScreenSurfaceMatrix
Landroid/app/ActivityView;->mSurfaceCallback
Landroid/app/ActivityView;->mSurfaceView
Landroid/app/ActivityView;->mTapExcludeRegion
Landroid/app/ActivityView;->mTaskEmbedder
Landroid/app/ActivityView;->mTmpArray
Landroid/app/ActivityView;->mTmpRect
Landroid/app/ActivityView;->mTmpTransaction
Landroid/app/ActivityView;->mWindowPosition
Landroid/app/ActivityView$StateCallbackAdapter;->mCallback
Landroid/app/AlarmManager$ListenerWrapper;->mHandler
Landroid/app/AppexitEnums;->IMPORTANCE_BACKGROUND
Landroid/app/AppexitEnums;->IMPORTANCE_CACHED
Landroid/app/AppexitEnums;->IMPORTANCE_CANT_SAVE_STATE
Landroid/app/AppexitEnums;->IMPORTANCE_CANT_SAVE_STATE_PRE_26
Landroid/app/AppexitEnums;->IMPORTANCE_EMPTY
Landroid/app/AppexitEnums;->IMPORTANCE_FOREGROUND
Landroid/app/AppexitEnums;->IMPORTANCE_FOREGROUND_SERVICE
Landroid/app/AppexitEnums;->IMPORTANCE_GONE
Landroid/app/AppexitEnums;->IMPORTANCE_PERCEPTIBLE
Landroid/app/AppexitEnums;->IMPORTANCE_PERCEPTIBLE_PRE_26
Landroid/app/AppexitEnums;->IMPORTANCE_SERVICE
Landroid/app/AppexitEnums;->IMPORTANCE_TOP_SLEEPING
Landroid/app/AppexitEnums;->IMPORTANCE_TOP_SLEEPING_PRE_28
Landroid/app/AppexitEnums;->IMPORTANCE_VISIBLE
Landroid/app/AppexitEnums;->REASON_ANR
Landroid/app/AppexitEnums;->REASON_CRASH
Landroid/app/AppexitEnums;->REASON_CRASH_NATIVE
Landroid/app/AppexitEnums;->REASON_DEPENDENCY_DIED
Landroid/app/AppexitEnums;->REASON_EXCESSIVE_RESOURCE_USAGE
Landroid/app/AppexitEnums;->REASON_EXIT_SELF
Landroid/app/AppexitEnums;->REASON_INITIALIZATION_FAILURE
Landroid/app/AppexitEnums;->REASON_LOW_MEMORY
Landroid/app/AppexitEnums;->REASON_OTHER
Landroid/app/AppexitEnums;->REASON_PERMISSION_CHANGE
Landroid/app/AppexitEnums;->REASON_SIGNALED
Landroid/app/AppexitEnums;->REASON_UNKNOWN
Landroid/app/AppexitEnums;->REASON_USER_REQUESTED
Landroid/app/AppexitEnums;->REASON_USER_STOPPED
Landroid/app/AppexitEnums;->SUBREASON_EXCESSIVE_CPU
Landroid/app/AppexitEnums;->SUBREASON_IMPERCEPTIBLE
Landroid/app/AppexitEnums;->SUBREASON_INVALID_START
Landroid/app/AppexitEnums;->SUBREASON_INVALID_STATE
Landroid/app/AppexitEnums;->SUBREASON_ISOLATED_NOT_NEEDED
Landroid/app/AppexitEnums;->SUBREASON_KILL_ALL_BG_EXCEPT
Landroid/app/AppexitEnums;->SUBREASON_KILL_ALL_FG
Landroid/app/AppexitEnums;->SUBREASON_KILL_PID
Landroid/app/AppexitEnums;->SUBREASON_KILL_UID
Landroid/app/AppexitEnums;->SUBREASON_LARGE_CACHED
Landroid/app/AppexitEnums;->SUBREASON_MEMORY_PRESSURE
Landroid/app/AppexitEnums;->SUBREASON_REMOVE_LRU
Landroid/app/AppexitEnums;->SUBREASON_SYSTEM_UPDATE_DONE
Landroid/app/AppexitEnums;->SUBREASON_TOO_MANY_CACHED
Landroid/app/AppexitEnums;->SUBREASON_TOO_MANY_EMPTY
Landroid/app/AppexitEnums;->SUBREASON_TRIM_EMPTY
Landroid/app/AppexitEnums;->SUBREASON_UNKNOWN
Landroid/app/AppexitEnums;->SUBREASON_WAIT_FOR_DEBUGGER
Landroid/app/Application;->mComponentCallbacks
Landroid/app/ApplicationPackageManager;->DEBUG_TRACE_GRANTS
Landroid/app/ApplicationPackageManager;->DEBUG_TRACE_PERMISSION_UPDATES
Landroid/app/ApplicationPackageManager;->mPermissionListeners
Landroid/app/ApplicationPackageManager$OnPermissionsChangeListenerDelegate;->MSG_PERMISSIONS_CHANGED
Landroid/app/ApplicationPackageManager$OnPermissionsChangeListenerDelegate;->mHandler
Landroid/app/ApplicationPackageManager$OnPermissionsChangeListenerDelegate;->mListener
Landroid/app/BroadcastOptions;->KEY_TEMPORARY_APP_WHITELIST_DURATION
Landroid/app/BroadcastOptions;->mTemporaryAppWhitelistDuration
Landroid/app/ContextImpl;->mAttributionTag
Landroid/app/ContextImpl;->mIsAssociatedWithDisplay
Landroid/app/ContextImpl;->mIsSystemOrSystemUiContext
Landroid/app/ContextImpl;->mIsUiContext
Landroid/app/EventLogTags;->WM_ADD_TO_STOPPING
Landroid/app/EventLogTags;->WM_STOP_ACTIVITY
Landroid/app/ExitTransitionCoordinator;->mActivity
Landroid/app/ExitTransitionCoordinator;->mHideSharedElementsCallback
Landroid/app/HomeVisibilityObserver;->mActivityManager
Landroid/app/HomeVisibilityObserver;->mContext
Landroid/app/HomeVisibilityObserver;->mIsHomeActivityVisible
Landroid/app/HomeVisibilityObserver;->mObserver
Landroid/app/IActivityManager$Stub;->TRANSACTION_backgroundWhitelistUid
Landroid/app/IActivityManager$Stub;->TRANSACTION_cancelRecentsAnimation
Landroid/app/IActivityManager$Stub;->TRANSACTION_checkPermissionWithToken
Landroid/app/IActivityManager$Stub;->TRANSACTION_getAllStackInfos
Landroid/app/IActivityManager$Stub;->TRANSACTION_getFocusedStackInfo
Landroid/app/IActivityManager$Stub;->TRANSACTION_getPackageForIntentSender
Landroid/app/IActivityManager$Stub;->TRANSACTION_getTaskSnapshot
Landroid/app/IActivityManager$Stub;->TRANSACTION_getUidForIntentSender
Landroid/app/IActivityManager$Stub;->TRANSACTION_isAppStartModeDisabled
Landroid/app/IActivityManager$Stub;->TRANSACTION_isIntentSenderABroadcast
Landroid/app/IActivityManager$Stub;->TRANSACTION_isIntentSenderAForegroundService
Landroid/app/IActivityManager$Stub;->TRANSACTION_moveTaskToStack
Landroid/app/IActivityManager$Stub;->TRANSACTION_moveTopActivityToPinnedStack
Landroid/app/IActivityManager$Stub;->TRANSACTION_positionTaskInStack
Landroid/app/IActivityManager$Stub;->TRANSACTION_removeStack
Landroid/app/IActivityManager$Stub;->TRANSACTION_setFocusedStack
Landroid/app/IActivityManager$Stub;->TRANSACTION_startRecentsActivity
Landroid/app/IActivityTaskManager$Stub;->DESCRIPTOR
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_activityDestroyed
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_activityIdle
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_activityPaused
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_activityRelaunched
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_activityResumed
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_activityStopped
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_activityTopResumedStateLost
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_convertFromTranslucent
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_convertToTranslucent
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_dismissKeyguard
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_enterPictureInPictureMode
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_finishActivity
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_finishActivityAffinity
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_finishSubActivity
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getActivityClassForToken
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getActivityOptions
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getAllStackInfos
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getAllStackInfosOnDisplay
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getCallingActivity
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getCallingPackage
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getDisplayId
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getFilteredTasks
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getFocusedStackInfo
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getLaunchedFromPackage
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getLaunchedFromUid
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getMaxNumPictureInPictureActions
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getPackageForToken
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getRequestedOrientation
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getStackInfo
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getStackInfoOnDisplay
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getTaskForActivity
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_getUriPermissionOwnerForActivity
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_invalidateHomeTaskSnapshot
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_isImmersive
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_isRootVoiceInteraction
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_isTopOfTask
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_launchAssistIntent
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_moveActivityTaskToBack
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_moveStackToDisplay
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_moveTaskToStack
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_moveTopActivityToPinnedStack
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_navigateUpTo
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_notifyActivityDrawn
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_notifyEnterAnimationComplete
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_notifyLaunchTaskBehindComplete
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_onBackPressedOnTaskRoot
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_overridePendingTransition
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_positionTaskInStack
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_registerRemoteAnimations
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_releaseActivityInstance
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_removeStack
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_removeStacksInWindowingModes
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_removeStacksWithActivityTypes
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_reportActivityFullyDrawn
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_reportSizeConfigurations
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_requestPictureInPictureMode
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_resizeDockedStack
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_restartActivityProcessIfVisible
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_setDisablePreviewScreenshots
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_setDisplayToSingleTaskInstance
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_setFocusedStack
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_setImmersive
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_setInheritShowWhenLocked
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_setPictureInPictureParams
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_setRequestedOrientation
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_setShowWhenLocked
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_setTaskDescription
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_setTaskWindowingMode
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_setTaskWindowingModeSplitScreenPrimary
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_setTurnScreenOn
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_setVrMode
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_shouldUpRecreateTask
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_showAssistFromActivity
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_showLockTaskEscapeMessage
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_startLocalVoiceInteraction
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_startLockTaskModeByToken
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_stopLocalVoiceInteraction
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_stopLockTaskModeByToken
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_toggleFreeformWindowingMode
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_unregisterRemoteAnimations
Landroid/app/IActivityTaskManager$Stub;->TRANSACTION_willActivityBeVisible
Landroid/app/IAppTraceRetriever$Stub;->DESCRIPTOR
Landroid/app/INotificationManager$Stub;->TRANSACTION_deleteConversationNotificationChannels
Landroid/app/IRequestFinishCallback$Stub;->DESCRIPTOR
Landroid/app/ITaskStackListener$Stub;->TRANSACTION_onActivityDismissingDockedStack
Landroid/app/ITaskStackListener$Stub;->TRANSACTION_onSingleTaskDisplayDrawn
Landroid/app/ITaskStackListener$Stub;->TRANSACTION_onSingleTaskDisplayEmpty
Landroid/app/ITaskStackListener$Stub;->TRANSACTION_onSizeCompatModeActivityChanged
Landroid/app/ITransientNotificationCallback$Stub;->DESCRIPTOR
Landroid/app/IUriGrantsManager$Stub;->DESCRIPTOR
Landroid/app/IWindowToken$Stub;->DESCRIPTOR
Landroid/app/KeyguardManager$LockTypes;->PASSWORD
Landroid/app/KeyguardManager$LockTypes;->PATTERN
Landroid/app/KeyguardManager$LockTypes;->PIN
Landroid/app/LoadedApk;->PROPERTY_NAME_APPEND_NATIVE
Landroid/app/LoadedApk;->mOverlayDirs
Landroid/app/Notification;->mWhitelistToken
Landroid/app/Notification;->processWhitelistToken
Landroid/app/Notification$BigPictureStyle;->mPicture
Landroid/app/Notification$Builder;->mBackgroundColor
Landroid/app/Notification$Builder;->mCachedContrastColor
Landroid/app/Notification$Builder;->mCachedContrastColorIsFor
Landroid/app/Notification$Builder;->mForegroundColor
Landroid/app/Notification$Builder;->mNeutralColor
Landroid/app/Notification$Builder;->mOriginalActions
Landroid/app/Notification$Builder;->mPrimaryTextColor
Landroid/app/Notification$Builder;->mRebuildStyledRemoteViews
Landroid/app/Notification$Builder;->mSecondaryTextColor
Landroid/app/Notification$Builder;->mTextColorsAreForBackground
Landroid/app/Notification$StandardTemplateParams;->forceDefaultColor
Landroid/app/Notification$StandardTemplateParams;->hasProgress
Landroid/app/Notification$StandardTemplateParams;->hideLargeIcon
Landroid/app/Notification$StandardTemplateParams;->hideReplyIcon
Landroid/app/Notification$TemplateBindResult;->mIconMarginEnd
Landroid/app/Notification$TemplateBindResult;->mRightIconContainerVisible
Landroid/app/Presentation;->MSG_CANCEL
Landroid/app/Presentation;->mToken
Landroid/app/ResourcesManager;->ENABLE_APK_ASSETS_CACHE
Landroid/app/ResourcesManager;->mAdjustedDisplays
Landroid/app/ResourcesManager;->mLoadedApkAssets
Landroid/app/TaskInfo;->stackId
Landroid/app/UiAutomation;->mIsConnecting
Landroid/app/VoiceInteractor;->KEY_KILL_SIGNAL
Landroid/app/WindowConfiguration;->WINDOWING_MODE_FULLSCREEN_OR_SPLIT_SCREEN_SECONDARY
Landroid/app/WindowContext;->mOwnsToken
Landroid/app/WindowContext;->mToken
Landroid/app/WindowContext;->mWindowManager
Landroid/app/WindowContext;->mWms
Landroid/app/WindowTokenClient;->mContextRef
Landroid/app/WindowTokenClient;->mResourcesManager
Landroid/app/admin/DeviceAdminInfo;->USES_POLICY_DEVICE_OWNER
Landroid/app/admin/DeviceAdminInfo;->USES_POLICY_ORGANIZATION_OWNED_PROFILE_OWNER
Landroid/app/admin/DeviceAdminInfo;->USES_POLICY_PROFILE_OWNER
Landroid/app/admin/DeviceAdminReceiver;->localLOGV
Landroid/app/admin/DevicePolicyManager;->ACTION_DATA_SHARING_RESTRICTION_CHANGED
Landroid/app/admin/DevicePolicyManager;->ACTION_PROVISION_MANAGED_SHAREABLE_DEVICE
Landroid/app/admin/DevicePolicyManager;->EXTRA_PROVISIONING_SKIP_USER_SETUP
Landroid/app/admin/FreezePeriod;->DUMMY_YEAR
Landroid/app/admin/IDevicePolicyManager$Stub;->TRANSACTION_getAlwaysOnVpnLockdownWhitelist
Landroid/app/admin/IDevicePolicyManager$Stub;->TRANSACTION_getProfileOwner
Landroid/app/admin/IDevicePolicyManager$Stub;->TRANSACTION_isProfileActivePasswordSufficientForParent
Landroid/app/admin/IDevicePolicyManager$Stub;->TRANSACTION_isSystemOnlyUser
Landroid/app/admin/IKeyguardCallback$Stub;->DESCRIPTOR
Landroid/app/admin/IKeyguardClient$Stub;->DESCRIPTOR
Landroid/app/admin/StartInstallingUpdateCallback$Stub;->DESCRIPTOR
Landroid/app/backup/IBackupCallback$Stub;->DESCRIPTOR
Landroid/app/blob/IBlobCommitCallback$Stub;->DESCRIPTOR
Landroid/app/blob/IBlobStoreManager$Stub;->DESCRIPTOR
Landroid/app/blob/IBlobStoreSession$Stub;->DESCRIPTOR
Landroid/app/blob/XmlTags;->TAG_WHITELISTED_PACKAGE
Landroid/app/contentsuggestions/IClassificationsCallback$Stub;->DESCRIPTOR
Landroid/app/contentsuggestions/IContentSuggestionsManager$Stub;->DESCRIPTOR
Landroid/app/contentsuggestions/ISelectionsCallback$Stub;->DESCRIPTOR
Landroid/app/job/JobParameters;->REASON_CANCELED
Landroid/app/job/JobParameters;->REASON_CONSTRAINTS_NOT_SATISFIED
Landroid/app/job/JobParameters;->REASON_DEVICE_IDLE
Landroid/app/job/JobParameters;->REASON_DEVICE_THERMAL
Landroid/app/job/JobParameters;->REASON_PREEMPT
Landroid/app/job/JobParameters;->REASON_RESTRICTED_BUCKET
Landroid/app/job/JobParameters;->REASON_TIMEOUT
Landroid/app/job/JobParameters;->stopReason
Landroid/app/job/JobProtoEnums;->STOP_REASON_CANCELLED
Landroid/app/job/JobProtoEnums;->STOP_REASON_CONSTRAINTS_NOT_SATISFIED
Landroid/app/job/JobProtoEnums;->STOP_REASON_DEVICE_IDLE
Landroid/app/job/JobProtoEnums;->STOP_REASON_DEVICE_THERMAL
Landroid/app/job/JobProtoEnums;->STOP_REASON_RESTRICTED_BUCKET
Landroid/app/job/JobProtoEnums;->STOP_REASON_UNKNOWN
Landroid/app/prediction/IPredictionCallback$Stub;->DESCRIPTOR
Landroid/app/prediction/IPredictionManager$Stub;->DESCRIPTOR
Landroid/app/role/IOnRoleHoldersChangedListener$Stub;->DESCRIPTOR
Landroid/app/role/IRoleController$Stub;->DESCRIPTOR
Landroid/app/role/IRoleManager$Stub;->DESCRIPTOR
Landroid/app/role/IRoleManager$Stub;->TRANSACTION_getDefaultSmsPackage
Landroid/app/role/RoleManager;->LOG_TAG
Landroid/app/settings/SettingsEnums;->SETTINGS_GAME_DRIVER_DASHBOARD
Landroid/app/slice/SliceProvider;->EXTRA_PROVIDER_PKG
Landroid/app/timedetector/ITimeDetectorService$Stub;->DESCRIPTOR
Landroid/app/timezone/ICallback$Stub;->DESCRIPTOR
Landroid/app/timezone/IRulesManager$Stub;->DESCRIPTOR
Landroid/app/timezonedetector/ITimeZoneDetectorService$Stub;->DESCRIPTOR
Landroid/appwidget/AppWidgetHost;->mOnClickHandler
Landroid/appwidget/AppWidgetHostView;->mOnClickHandler
Landroid/bluetooth/BluetoothAdapter;->mContext
Landroid/bluetooth/BluetoothAdapter;->mProxyServiceStateCallbacks
Landroid/bluetooth/BluetoothAdapter;->sBluetoothLeAdvertiser
Landroid/bluetooth/BluetoothAdapter;->sBluetoothLeScanner
Landroid/bluetooth/BluetoothAdapter;->sBluetoothMetadataListener
Landroid/bluetooth/BluetoothAdapter;->sMetadataListeners
Landroid/bluetooth/BluetoothAdapter;->sPeriodicAdvertisingManager
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->DESCRIPTOR
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->TRANSACTION_answerCall
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->TRANSACTION_cdmaSetSecondCallState
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->TRANSACTION_cdmaSwapSecondCallState
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->TRANSACTION_getNetworkOperator
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->TRANSACTION_getSubscriberNumber
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->TRANSACTION_hangupCall
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->TRANSACTION_listCurrentCalls
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->TRANSACTION_processChld
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->TRANSACTION_queryPhoneState
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->TRANSACTION_sendDtmf
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->TRANSACTION_updateBtHandsfreeAfterRadioTechnologyChange
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;->mRemote
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;->sDefaultImpl
Landroid/bluetooth/IBluetoothManager$Stub;->TRANSACTION_isEnabled
Landroid/bluetooth/IBluetoothMetadataListener$Stub;->DESCRIPTOR
Landroid/bluetooth/OobData;->mLeBluetoothDeviceAddress
Landroid/bluetooth/OobData;->mLeSecureConnectionsConfirmation
Landroid/bluetooth/OobData;->mLeSecureConnectionsRandom
Landroid/bluetooth/OobData;->mSecurityManagerTk
Landroid/bluetooth/le/BluetoothLeScanner;->mFeatureId
Landroid/bluetooth/le/BluetoothLeScanner;->mOpPackageName
Landroid/companion/Association;->companionAppPackage
Landroid/companion/Association;->deviceAddress
Landroid/companion/Association;->userId
Landroid/content/ClipDescription;->EXTRA_TARGET_COMPONENT_NAME
Landroid/content/ClipDescription;->EXTRA_USER_SERIAL_NUMBER
Landroid/content/ContentProvider;->mCallingPackage
Landroid/content/ContentProvider$CallingIdentity;->callingPackage
Landroid/content/ContentProviderClient;->mAttributionTag
Landroid/content/ContentResolver;->mAttributionTag
Landroid/content/Context;->ROLE_CONTROLLER_SERVICE
Landroid/content/Intent;->ACTION_CLEAR_DNS_CACHE
Landroid/content/integrity/IAppIntegrityManager$Stub;->DESCRIPTOR
Landroid/content/pm/ActivityInfo;->LOCK_TASK_LAUNCH_MODE_IF_WHITELISTED
Landroid/content/pm/ActivityInfo;->maxAspectRatio
Landroid/content/pm/ActivityInfo;->minAspectRatio
Landroid/content/pm/IDataLoader$Stub;->DESCRIPTOR
Landroid/content/pm/IDataLoaderManager$Stub;->DESCRIPTOR
Landroid/content/pm/IDataLoaderStatusListener$Stub;->DESCRIPTOR
Landroid/content/pm/ILauncherApps$Stub;->TRANSACTION_resolveActivity
Landroid/content/pm/IPackageChangeObserver$Stub;->DESCRIPTOR
Landroid/content/pm/IPackageInstallerSessionFileSystemConnector$Stub;->DESCRIPTOR
Landroid/content/pm/IPackageManager$Stub;->TRANSACTION_compileLayouts
Landroid/content/pm/IPackageManager$Stub;->TRANSACTION_getIntentFilterVerificationBackup
Landroid/content/pm/IPackageManager$Stub;->TRANSACTION_restoreIntentFilterVerification
Landroid/content/pm/IShortcutChangeCallback$Stub;->DESCRIPTOR
Landroid/content/pm/IntentFilterVerificationInfo;->mMainStatus
Landroid/content/pm/LauncherActivityInfo;->TAG
Landroid/content/pm/LauncherActivityInfo;->mActivityInfo
Landroid/content/pm/LauncherActivityInfo;->mComponentName
Landroid/content/pm/PackageManager;->INSTALL_DRY_RUN
Landroid/content/pm/PackageManager;->INSTALL_FAILED_INSTANT_APP_INVALID
Landroid/content/pm/PackageParser;->DEFAULT_PRE_Q_MIN_ASPECT_RATIO
Landroid/content/pm/PackageParser;->DEFAULT_PRE_Q_MIN_ASPECT_RATIO_WATCH
Landroid/content/pm/PackageUserState;->appLinkGeneration
Landroid/content/pm/PackageUserState;->domainVerificationStatus
Landroid/content/pm/parsing/ApkLiteParseUtils;->DEFAULT_MIN_SDK_VERSION
Landroid/content/pm/parsing/ApkLiteParseUtils;->DEFAULT_TARGET_SDK_VERSION
Landroid/content/pm/parsing/ParsingPackageImpl;->allowAudioPlaybackCapture
Landroid/content/pm/parsing/ParsingPackageImpl;->allowBackup
Landroid/content/pm/parsing/ParsingPackageImpl;->allowClearUserData
Landroid/content/pm/parsing/ParsingPackageImpl;->allowClearUserDataOnFailedRestore
Landroid/content/pm/parsing/ParsingPackageImpl;->allowNativeHeapPointerTagging
Landroid/content/pm/parsing/ParsingPackageImpl;->allowTaskReparenting
Landroid/content/pm/parsing/ParsingPackageImpl;->backupInForeground
Landroid/content/pm/parsing/ParsingPackageImpl;->baseCodePath
Landroid/content/pm/parsing/ParsingPackageImpl;->baseHardwareAccelerated
Landroid/content/pm/parsing/ParsingPackageImpl;->cantSaveState
Landroid/content/pm/parsing/ParsingPackageImpl;->codePath
Landroid/content/pm/parsing/ParsingPackageImpl;->crossProfile
Landroid/content/pm/parsing/ParsingPackageImpl;->debuggable
Landroid/content/pm/parsing/ParsingPackageImpl;->defaultToDeviceProtectedStorage
Landroid/content/pm/parsing/ParsingPackageImpl;->directBootAware
Landroid/content/pm/parsing/ParsingPackageImpl;->enabled
Landroid/content/pm/parsing/ParsingPackageImpl;->externalStorage
Landroid/content/pm/parsing/ParsingPackageImpl;->extractNativeLibs
Landroid/content/pm/parsing/ParsingPackageImpl;->forceQueryable
Landroid/content/pm/parsing/ParsingPackageImpl;->fullBackupOnly
Landroid/content/pm/parsing/ParsingPackageImpl;->game
Landroid/content/pm/parsing/ParsingPackageImpl;->hasCode
Landroid/content/pm/parsing/ParsingPackageImpl;->hasDomainUrls
Landroid/content/pm/parsing/ParsingPackageImpl;->hasFragileUserData
Landroid/content/pm/parsing/ParsingPackageImpl;->isolatedSplitLoading
Landroid/content/pm/parsing/ParsingPackageImpl;->killAfterRestore
Landroid/content/pm/parsing/ParsingPackageImpl;->largeHeap
Landroid/content/pm/parsing/ParsingPackageImpl;->multiArch
Landroid/content/pm/parsing/ParsingPackageImpl;->overlay
Landroid/content/pm/parsing/ParsingPackageImpl;->overlayIsStatic
Landroid/content/pm/parsing/ParsingPackageImpl;->partiallyDirectBootAware
Landroid/content/pm/parsing/ParsingPackageImpl;->persistent
Landroid/content/pm/parsing/ParsingPackageImpl;->preserveLegacyExternalStorage
Landroid/content/pm/parsing/ParsingPackageImpl;->profileableByShell
Landroid/content/pm/parsing/ParsingPackageImpl;->requestLegacyExternalStorage
Landroid/content/pm/parsing/ParsingPackageImpl;->requiredForAllUsers
Landroid/content/pm/parsing/ParsingPackageImpl;->resizeableActivityViaSdkVersion
Landroid/content/pm/parsing/ParsingPackageImpl;->restoreAnyVersion
Landroid/content/pm/parsing/ParsingPackageImpl;->staticSharedLibrary
Landroid/content/pm/parsing/ParsingPackageImpl;->supportsRtl
Landroid/content/pm/parsing/ParsingPackageImpl;->testOnly
Landroid/content/pm/parsing/ParsingPackageImpl;->use32BitAbi
Landroid/content/pm/parsing/ParsingPackageImpl;->useEmbeddedDex
Landroid/content/pm/parsing/ParsingPackageImpl;->usesCleartextTraffic
Landroid/content/pm/parsing/ParsingPackageImpl;->usesNonSdkApi
Landroid/content/pm/parsing/ParsingPackageImpl;->visibleToInstantApps
Landroid/content/pm/parsing/ParsingPackageImpl;->vmSafeMode
Landroid/content/pm/parsing/component/ComponentParseUtils;->TAG
Landroid/content/pm/parsing/component/ParsedComponentUtils;->TAG
Landroid/content/pm/parsing/component/ParsedIntentInfo;->CREATOR
Landroid/content/pm/parsing/component/ParsedProcessUtils;->TAG
Landroid/content/pm/parsing/component/ParsedServiceUtils;->TAG
Landroid/content/pm/split/DefaultSplitAssetLoader;->mBaseCodePath
Landroid/content/pm/split/DefaultSplitAssetLoader;->mSplitCodePaths
Landroid/content/res/ApkAssets;->mOpen
Landroid/content/res/ResourcesImpl;->TAG_PRELOAD
Landroid/content/res/ResourcesImpl;->TRACE_FOR_DETAILED_PRELOAD
Landroid/content/res/ResourcesImpl;->mPreloadTracingPreloadStartTime
Landroid/content/res/ResourcesImpl;->mPreloadTracingStartBitmapCount
Landroid/content/res/ResourcesImpl;->mPreloadTracingStartBitmapSize
Landroid/content/res/ResourcesImpl;->sPreloadTracingNumLoadedDrawables
Landroid/content/res/ResourcesKey;->mOverlayDirs
Landroid/content/rollback/IRollbackManager$Stub;->DESCRIPTOR
Landroid/content/rollback/IRollbackManager$Stub;->TRANSACTION_notifyStagedApkSession
Landroid/content/rollback/PackageRollbackInfo;->mCeSnapshotInodes
Landroid/database/sqlite/SQLiteCursor;->mStackTrace
Landroid/ddm/DdmHandleHeap;->CHUNK_HPDS
Landroid/ddm/DdmHandleHeap;->CHUNK_HPDU
Landroid/ddm/DdmHandleHeap;->CHUNK_HPIF
Landroid/ddm/DdmHandleHeap;->CHUNK_HPSG
Landroid/ddm/DdmHandleHeap;->CHUNK_NHSG
Landroid/ddm/DdmHandleHeap;->CHUNK_REAE
Landroid/ddm/DdmHandleHeap;->CHUNK_REAL
Landroid/ddm/DdmHandleHeap;->CHUNK_REAQ
Landroid/ddm/DdmHandleThread;->CHUNK_STKL
Landroid/ddm/DdmHandleThread;->CHUNK_THCR
Landroid/ddm/DdmHandleThread;->CHUNK_THDE
Landroid/ddm/DdmHandleThread;->CHUNK_THEN
Landroid/ddm/DdmHandleThread;->CHUNK_THST
Landroid/ddm/DdmHandleThread;->mInstance
Landroid/debug/IAdbManager$Stub;->DESCRIPTOR
Landroid/debug/IAdbTransport$Stub;->DESCRIPTOR
Landroid/gamedriver/GameDriverProto$Blacklist;->DEFAULT_INSTANCE
Landroid/gamedriver/GameDriverProto$Blacklist;->PACKAGE_NAMES_FIELD_NUMBER
Landroid/gamedriver/GameDriverProto$Blacklist;->PARSER
Landroid/gamedriver/GameDriverProto$Blacklist;->VERSION_CODE_FIELD_NUMBER
Landroid/gamedriver/GameDriverProto$Blacklist;->bitField0_
Landroid/gamedriver/GameDriverProto$Blacklist;->packageNames_
Landroid/gamedriver/GameDriverProto$Blacklist;->versionCode_
Landroid/gamedriver/GameDriverProto$Blacklists;->BLACKLISTS_FIELD_NUMBER
Landroid/gamedriver/GameDriverProto$Blacklists;->DEFAULT_INSTANCE
Landroid/gamedriver/GameDriverProto$Blacklists;->PARSER
Landroid/gamedriver/GameDriverProto$Blacklists;->blacklists_
Landroid/graphics/Bitmap;->sPreloadTracingNumInstantiatedBitmaps
Landroid/graphics/Bitmap;->sPreloadTracingTotalBitmapsSize
Landroid/graphics/Canvas$EdgeType;->nativeInt
Landroid/graphics/ColorSpace$Renderer;->CHROMATICITY_RESOLUTION
Landroid/graphics/ColorSpace$Renderer;->NATIVE_SIZE
Landroid/graphics/ColorSpace$Renderer;->ONE_THIRD
Landroid/graphics/ColorSpace$Renderer;->SPECTRUM_LOCUS_X
Landroid/graphics/ColorSpace$Renderer;->SPECTRUM_LOCUS_Y
Landroid/graphics/ColorSpace$Renderer;->UCS_SCALE
Landroid/graphics/ColorSpace$Renderer;->mClip
Landroid/graphics/ColorSpace$Renderer;->mColorSpaces
Landroid/graphics/ColorSpace$Renderer;->mPoints
Landroid/graphics/ColorSpace$Renderer;->mShowWhitePoint
Landroid/graphics/ColorSpace$Renderer;->mSize
Landroid/graphics/ColorSpace$Renderer;->mUcs
Landroid/graphics/ColorSpace$Renderer$Point;->mColor
Landroid/graphics/ColorSpace$Renderer$Point;->mColorSpace
Landroid/graphics/ColorSpace$Renderer$Point;->mRgb
Landroid/graphics/FrameInfo;->FLAG_WINDOW_LAYOUT_CHANGED
Landroid/graphics/FrameInfo;->NEWEST_INPUT_EVENT
Landroid/graphics/FrameInfo;->OLDEST_INPUT_EVENT
Landroid/graphics/HardwareRenderer;->mIsWideGamut
Landroid/graphics/ImageDecoder;->sApiLevel
Landroid/graphics/LargeBitmap;->mNativeLargeBitmap
Landroid/graphics/LargeBitmap;->mRecycled
Landroid/graphics/RuntimeShader;->mNativeInstanceRuntimeShaderFactory
Landroid/graphics/RuntimeShader;->mUniforms
Landroid/graphics/fonts/Font;->mTtcIndex
Landroid/graphics/fonts/Font$Builder;->sFontRegistry
Landroid/graphics/fonts/FontFamily;->mFonts
Landroid/graphics/fonts/FontFamily$Builder;->mStyleHashSet
Landroid/graphics/fonts/SystemFonts;->DEFAULT_FAMILY
Landroid/graphics/fonts/SystemFonts;->sAliases
Landroid/graphics/fonts/SystemFonts;->sSystemFallbackMap
Landroid/gsi/IGsiService$Stub;->DESCRIPTOR
Landroid/gsi/IGsiServiceCallback$Stub;->DESCRIPTOR
Landroid/gsi/IImageService$Stub;->DESCRIPTOR
Landroid/gsi/IProgressCallback$Stub;->DESCRIPTOR
Landroid/hardware/Camera;->CAMERA_HAL_API_VERSION_NORMAL_CONNECT
Landroid/hardware/Camera;->CAMERA_HAL_API_VERSION_UNSPECIFIED
Landroid/hardware/HardwareBuffer;->NATIVE_HARDWARE_BUFFER_SIZE
Landroid/hardware/ICameraService;->CAMERA_HAL_API_VERSION_UNSPECIFIED
Landroid/hardware/ICameraService$Stub;->TRANSACTION_connectLegacy
Landroid/hardware/ICameraServiceProxy;->CAMERA_API_LEVEL_1
Landroid/hardware/ICameraServiceProxy;->CAMERA_API_LEVEL_2
Landroid/hardware/ICameraServiceProxy;->CAMERA_FACING_BACK
Landroid/hardware/ICameraServiceProxy;->CAMERA_FACING_EXTERNAL
Landroid/hardware/ICameraServiceProxy;->CAMERA_FACING_FRONT
Landroid/hardware/ICameraServiceProxy;->CAMERA_STATE_ACTIVE
Landroid/hardware/ICameraServiceProxy;->CAMERA_STATE_CLOSED
Landroid/hardware/ICameraServiceProxy;->CAMERA_STATE_IDLE
Landroid/hardware/ICameraServiceProxy;->CAMERA_STATE_OPEN
Landroid/hardware/ISensorPrivacyListener$Stub;->DESCRIPTOR
Landroid/hardware/ISensorPrivacyManager$Stub;->DESCRIPTOR
Landroid/hardware/biometrics/BiometricPrompt;->EXTRA_DISALLOW_BIOMETRICS_IF_POLICY_EXISTS
Landroid/hardware/biometrics/BiometricPrompt;->KEY_ALLOW_DEVICE_CREDENTIAL
Landroid/hardware/biometrics/BiometricPrompt;->KEY_AUTHENTICATORS_ALLOWED
Landroid/hardware/biometrics/BiometricPrompt;->KEY_DESCRIPTION
Landroid/hardware/biometrics/BiometricPrompt;->KEY_DEVICE_CREDENTIAL_DESCRIPTION
Landroid/hardware/biometrics/BiometricPrompt;->KEY_DEVICE_CREDENTIAL_SUBTITLE
Landroid/hardware/biometrics/BiometricPrompt;->KEY_DEVICE_CREDENTIAL_TITLE
Landroid/hardware/biometrics/BiometricPrompt;->KEY_NEGATIVE_TEXT
Landroid/hardware/biometrics/BiometricPrompt;->KEY_RECEIVE_SYSTEM_EVENTS
Landroid/hardware/biometrics/BiometricPrompt;->KEY_REQUIRE_CONFIRMATION
Landroid/hardware/biometrics/BiometricPrompt;->KEY_SUBTITLE
Landroid/hardware/biometrics/BiometricPrompt;->KEY_TITLE
Landroid/hardware/biometrics/BiometricPrompt;->KEY_USE_DEFAULT_TITLE
Landroid/hardware/biometrics/BiometricPrompt;->mBundle
Landroid/hardware/biometrics/BiometricPrompt;->mPositiveButtonInfo
Landroid/hardware/biometrics/BiometricPrompt$Builder;->mBundle
Landroid/hardware/biometrics/BiometricPrompt$Builder;->mPositiveButtonInfo
Landroid/hardware/biometrics/IAuthService$Stub;->DESCRIPTOR
Landroid/hardware/biometrics/IAuthService$Stub;->TRANSACTION_resetLockout
Landroid/hardware/biometrics/IAuthService$Stub;->TRANSACTION_setActiveUser
Landroid/hardware/biometrics/IBiometricAuthenticator$Stub;->DESCRIPTOR
Landroid/hardware/biometrics/IBiometricAuthenticator$Stub;->TRANSACTION_setActiveUser
Landroid/hardware/biometrics/IBiometricEnabledOnKeyguardCallback$Stub;->DESCRIPTOR
Landroid/hardware/biometrics/IBiometricService$Stub;->DESCRIPTOR
Landroid/hardware/biometrics/IBiometricService$Stub;->TRANSACTION_resetLockout
Landroid/hardware/biometrics/IBiometricService$Stub;->TRANSACTION_setActiveUser
Landroid/hardware/biometrics/IBiometricServiceLockoutResetCallback$Stub;->DESCRIPTOR
Landroid/hardware/biometrics/IBiometricServiceReceiver$Stub;->DESCRIPTOR
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->DESCRIPTOR
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->TRANSACTION_onAcquired
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->TRANSACTION_onAuthenticationFailed
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->TRANSACTION_onAuthenticationSucceeded
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->TRANSACTION_onDeviceCredentialPressed
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->TRANSACTION_onDialogDismissed
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->TRANSACTION_onError
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->TRANSACTION_onSystemEvent
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->TRANSACTION_onTryAgainPressed
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub$Proxy;->mRemote
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub$Proxy;->sDefaultImpl
Landroid/hardware/camera2/ICameraOfflineSession$Stub;->DESCRIPTOR
Landroid/hardware/camera2/impl/FrameNumberTracker;->mSkippedFrameNumbers
Landroid/hardware/camera2/impl/FrameNumberTracker;->mSkippedOtherFrameNumbers
Landroid/hardware/camera2/legacy/BurstHolder;->TAG
Landroid/hardware/camera2/legacy/BurstHolder;->mRepeating
Landroid/hardware/camera2/legacy/BurstHolder;->mRequestBuilders
Landroid/hardware/camera2/legacy/BurstHolder;->mRequestId
Landroid/hardware/camera2/legacy/CameraDeviceState;->DEBUG
Landroid/hardware/camera2/legacy/CameraDeviceState;->NO_CAPTURE_ERROR
Landroid/hardware/camera2/legacy/CameraDeviceState;->STATE_CAPTURING
Landroid/hardware/camera2/legacy/CameraDeviceState;->STATE_CONFIGURING
Landroid/hardware/camera2/legacy/CameraDeviceState;->STATE_ERROR
Landroid/hardware/camera2/legacy/CameraDeviceState;->STATE_IDLE
Landroid/hardware/camera2/legacy/CameraDeviceState;->STATE_UNCONFIGURED
Landroid/hardware/camera2/legacy/CameraDeviceState;->TAG
Landroid/hardware/camera2/legacy/CameraDeviceState;->mCurrentError
Landroid/hardware/camera2/legacy/CameraDeviceState;->mCurrentHandler
Landroid/hardware/camera2/legacy/CameraDeviceState;->mCurrentListener
Landroid/hardware/camera2/legacy/CameraDeviceState;->mCurrentRequest
Landroid/hardware/camera2/legacy/CameraDeviceState;->mCurrentState
Landroid/hardware/camera2/legacy/CameraDeviceState;->sStateNames
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->DEBUG
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->OPEN_CAMERA_TIMEOUT_MS
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->TAG
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->mCameraCallbacks
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->mCameraCharacteristics
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->mCameraInit
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->mConfigureLock
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->mConfiguring
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->mLegacyDevice
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->mSurfaceIdCounter
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->mSurfaces
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->CAMERA_ERROR
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->CAMERA_IDLE
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->CAPTURE_STARTED
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->PREPARED
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->REPEATING_REQUEST_ERROR
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->REQUEST_QUEUE_EMPTY
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->RESULT_RECEIVED
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->mCallbacks
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->mHandler
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->mHandlerThread
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraLooper;->mCamera
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraLooper;->mCameraId
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraLooper;->mInitErrors
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraLooper;->mLooper
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraLooper;->mStartDone
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraLooper;->mThread
Landroid/hardware/camera2/legacy/CaptureCollector;->DEBUG
Landroid/hardware/camera2/legacy/CaptureCollector;->FLAG_RECEIVED_ALL_JPEG
Landroid/hardware/camera2/legacy/CaptureCollector;->FLAG_RECEIVED_ALL_PREVIEW
Landroid/hardware/camera2/legacy/CaptureCollector;->FLAG_RECEIVED_JPEG
Landroid/hardware/camera2/legacy/CaptureCollector;->FLAG_RECEIVED_JPEG_TS
Landroid/hardware/camera2/legacy/CaptureCollector;->FLAG_RECEIVED_PREVIEW
Landroid/hardware/camera2/legacy/CaptureCollector;->FLAG_RECEIVED_PREVIEW_TS
Landroid/hardware/camera2/legacy/CaptureCollector;->MAX_JPEGS_IN_FLIGHT
Landroid/hardware/camera2/legacy/CaptureCollector;->TAG
Landroid/hardware/camera2/legacy/CaptureCollector;->mActiveRequests
Landroid/hardware/camera2/legacy/CaptureCollector;->mCompletedRequests
Landroid/hardware/camera2/legacy/CaptureCollector;->mDeviceState
Landroid/hardware/camera2/legacy/CaptureCollector;->mInFlight
Landroid/hardware/camera2/legacy/CaptureCollector;->mInFlightPreviews
Landroid/hardware/camera2/legacy/CaptureCollector;->mIsEmpty
Landroid/hardware/camera2/legacy/CaptureCollector;->mJpegCaptureQueue
Landroid/hardware/camera2/legacy/CaptureCollector;->mJpegProduceQueue
Landroid/hardware/camera2/legacy/CaptureCollector;->mLock
Landroid/hardware/camera2/legacy/CaptureCollector;->mMaxInFlight
Landroid/hardware/camera2/legacy/CaptureCollector;->mNotFull
Landroid/hardware/camera2/legacy/CaptureCollector;->mPreviewCaptureQueue
Landroid/hardware/camera2/legacy/CaptureCollector;->mPreviewProduceQueue
Landroid/hardware/camera2/legacy/CaptureCollector;->mPreviewsEmpty
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->mCompleted
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->mFailedJpeg
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->mFailedPreview
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->mHasStarted
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->mLegacy
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->mPreviewCompleted
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->mReceivedFlags
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->mRequest
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->mTimestamp
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->needsJpeg
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->needsPreview
Landroid/hardware/camera2/legacy/GLThreadManager;->DEBUG
Landroid/hardware/camera2/legacy/GLThreadManager;->MSG_ALLOW_FRAMES
Landroid/hardware/camera2/legacy/GLThreadManager;->MSG_CLEANUP
Landroid/hardware/camera2/legacy/GLThreadManager;->MSG_DROP_FRAMES
Landroid/hardware/camera2/legacy/GLThreadManager;->MSG_NEW_CONFIGURATION
Landroid/hardware/camera2/legacy/GLThreadManager;->MSG_NEW_FRAME
Landroid/hardware/camera2/legacy/GLThreadManager;->TAG
Landroid/hardware/camera2/legacy/GLThreadManager;->mCaptureCollector
Landroid/hardware/camera2/legacy/GLThreadManager;->mDeviceState
Landroid/hardware/camera2/legacy/GLThreadManager;->mGLHandlerCb
Landroid/hardware/camera2/legacy/GLThreadManager;->mGLHandlerThread
Landroid/hardware/camera2/legacy/GLThreadManager;->mPrevCounter
Landroid/hardware/camera2/legacy/GLThreadManager;->mTextureRenderer
Landroid/hardware/camera2/legacy/GLThreadManager$ConfigureHolder;->collector
Landroid/hardware/camera2/legacy/GLThreadManager$ConfigureHolder;->condition
Landroid/hardware/camera2/legacy/GLThreadManager$ConfigureHolder;->surfaces
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->DEBUG
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->GRALLOC_USAGE_HW_COMPOSER
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->GRALLOC_USAGE_HW_RENDER
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->GRALLOC_USAGE_HW_TEXTURE
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->GRALLOC_USAGE_HW_VIDEO_ENCODER
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->GRALLOC_USAGE_RENDERSCRIPT
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->GRALLOC_USAGE_SW_READ_OFTEN
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->ILLEGAL_VALUE
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->MAX_DIMEN_FOR_ROUNDING
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->NATIVE_WINDOW_SCALING_MODE_SCALE_TO_WINDOW
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->TAG
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->mCallbackHandler
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->mCallbackHandlerThread
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->mCameraId
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->mClosed
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->mConfiguredSurfaces
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->mDeviceCallbacks
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->mDeviceState
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->mIdle
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->mRequestThreadManager
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->mResultHandler
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->mResultThread
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->mStateListener
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->mStaticCharacteristics
Landroid/hardware/camera2/legacy/LegacyExceptionUtils;->ALREADY_EXISTS
Landroid/hardware/camera2/legacy/LegacyExceptionUtils;->BAD_VALUE
Landroid/hardware/camera2/legacy/LegacyExceptionUtils;->DEAD_OBJECT
Landroid/hardware/camera2/legacy/LegacyExceptionUtils;->INVALID_OPERATION
Landroid/hardware/camera2/legacy/LegacyExceptionUtils;->NO_ERROR
Landroid/hardware/camera2/legacy/LegacyExceptionUtils;->PERMISSION_DENIED
Landroid/hardware/camera2/legacy/LegacyExceptionUtils;->TAG
Landroid/hardware/camera2/legacy/LegacyExceptionUtils;->TIMED_OUT
Landroid/hardware/camera2/legacy/LegacyFaceDetectMapper;->DEBUG
Landroid/hardware/camera2/legacy/LegacyFaceDetectMapper;->TAG
Landroid/hardware/camera2/legacy/LegacyFaceDetectMapper;->mCamera
Landroid/hardware/camera2/legacy/LegacyFaceDetectMapper;->mFaceDetectEnabled
Landroid/hardware/camera2/legacy/LegacyFaceDetectMapper;->mFaceDetectReporting
Landroid/hardware/camera2/legacy/LegacyFaceDetectMapper;->mFaceDetectScenePriority
Landroid/hardware/camera2/legacy/LegacyFaceDetectMapper;->mFaceDetectSupported
Landroid/hardware/camera2/legacy/LegacyFaceDetectMapper;->mFaces
Landroid/hardware/camera2/legacy/LegacyFaceDetectMapper;->mFacesPrev
Landroid/hardware/camera2/legacy/LegacyFaceDetectMapper;->mLock
Landroid/hardware/camera2/legacy/LegacyFocusStateMapper;->DEBUG
Landroid/hardware/camera2/legacy/LegacyFocusStateMapper;->TAG
Landroid/hardware/camera2/legacy/LegacyFocusStateMapper;->mAfModePrevious
Landroid/hardware/camera2/legacy/LegacyFocusStateMapper;->mAfRun
Landroid/hardware/camera2/legacy/LegacyFocusStateMapper;->mAfState
Landroid/hardware/camera2/legacy/LegacyFocusStateMapper;->mAfStatePrevious
Landroid/hardware/camera2/legacy/LegacyFocusStateMapper;->mCamera
Landroid/hardware/camera2/legacy/LegacyFocusStateMapper;->mLock
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->APPROXIMATE_CAPTURE_DELAY_MS
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->APPROXIMATE_JPEG_ENCODE_TIME_MS
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->APPROXIMATE_SENSOR_AREA_PX
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->DEBUG
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->HAL_PIXEL_FORMAT_BGRA_8888
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->HAL_PIXEL_FORMAT_BLOB
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->HAL_PIXEL_FORMAT_RGBA_8888
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->LENS_INFO_MINIMUM_FOCUS_DISTANCE_FIXED_FOCUS
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->LIE_ABOUT_AE_MAX_REGIONS
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->LIE_ABOUT_AE_STATE
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->LIE_ABOUT_AF
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->LIE_ABOUT_AF_MAX_REGIONS
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->LIE_ABOUT_AWB
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->LIE_ABOUT_AWB_STATE
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->NS_PER_MS
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->PREVIEW_ASPECT_RATIO_TOLERANCE
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->REQUEST_MAX_NUM_INPUT_STREAMS_COUNT
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_PROC
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_PROC_STALL
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->REQUEST_MAX_NUM_OUTPUT_STREAMS_COUNT_RAW
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->REQUEST_PIPELINE_MAX_DEPTH_HAL1
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->REQUEST_PIPELINE_MAX_DEPTH_OURS
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->TAG
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->UNKNOWN_MODE
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->sAllowedTemplates
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->sEffectModes
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->sLegacyEffectMode
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->sLegacySceneModes
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->sSceneModes
Landroid/hardware/camera2/legacy/LegacyRequest;->captureRequest
Landroid/hardware/camera2/legacy/LegacyRequest;->characteristics
Landroid/hardware/camera2/legacy/LegacyRequest;->parameters
Landroid/hardware/camera2/legacy/LegacyRequest;->previewSize
Landroid/hardware/camera2/legacy/LegacyRequestMapper;->DEBUG
Landroid/hardware/camera2/legacy/LegacyRequestMapper;->DEFAULT_JPEG_QUALITY
Landroid/hardware/camera2/legacy/LegacyRequestMapper;->TAG
Landroid/hardware/camera2/legacy/LegacyResultMapper;->DEBUG
Landroid/hardware/camera2/legacy/LegacyResultMapper;->TAG
Landroid/hardware/camera2/legacy/LegacyResultMapper;->mCachedRequest
Landroid/hardware/camera2/legacy/LegacyResultMapper;->mCachedResult
Landroid/hardware/camera2/legacy/ParameterUtils;->ASPECT_RATIO_TOLERANCE
Landroid/hardware/camera2/legacy/ParameterUtils;->CAMERA_AREA_DEFAULT
Landroid/hardware/camera2/legacy/ParameterUtils;->DEBUG
Landroid/hardware/camera2/legacy/ParameterUtils;->NORMALIZED_RECTANGLE_DEFAULT
Landroid/hardware/camera2/legacy/ParameterUtils;->NORMALIZED_RECTANGLE_MAX
Landroid/hardware/camera2/legacy/ParameterUtils;->NORMALIZED_RECTANGLE_MIN
Landroid/hardware/camera2/legacy/ParameterUtils;->RECTANGLE_EMPTY
Landroid/hardware/camera2/legacy/ParameterUtils;->TAG
Landroid/hardware/camera2/legacy/ParameterUtils;->ZOOM_RATIO_MULTIPLIER
Landroid/hardware/camera2/legacy/ParameterUtils$MeteringData;->meteringArea
Landroid/hardware/camera2/legacy/ParameterUtils$MeteringData;->previewMetering
Landroid/hardware/camera2/legacy/ParameterUtils$MeteringData;->reportedMetering
Landroid/hardware/camera2/legacy/ParameterUtils$WeightedRectangle;->rect
Landroid/hardware/camera2/legacy/ParameterUtils$WeightedRectangle;->weight
Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;->previewCrop
Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;->reportedCrop
Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;->reportedZoomRatio
Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;->zoomIndex
Landroid/hardware/camera2/legacy/PerfMeasurement;->DEFAULT_MAX_QUERIES
Landroid/hardware/camera2/legacy/PerfMeasurement;->FAILED_TIMING
Landroid/hardware/camera2/legacy/PerfMeasurement;->NO_DURATION_YET
Landroid/hardware/camera2/legacy/PerfMeasurement;->TAG
Landroid/hardware/camera2/legacy/PerfMeasurement;->mCollectedCpuDurations
Landroid/hardware/camera2/legacy/PerfMeasurement;->mCollectedGpuDurations
Landroid/hardware/camera2/legacy/PerfMeasurement;->mCollectedTimestamps
Landroid/hardware/camera2/legacy/PerfMeasurement;->mCompletedQueryCount
Landroid/hardware/camera2/legacy/PerfMeasurement;->mCpuDurationsQueue
Landroid/hardware/camera2/legacy/PerfMeasurement;->mNativeContext
Landroid/hardware/camera2/legacy/PerfMeasurement;->mStartTimeNs
Landroid/hardware/camera2/legacy/PerfMeasurement;->mTimestampQueue
Landroid/hardware/camera2/legacy/RequestHandlerThread;->MSG_POKE_IDLE_HANDLER
Landroid/hardware/camera2/legacy/RequestHandlerThread;->mCallback
Landroid/hardware/camera2/legacy/RequestHandlerThread;->mHandler
Landroid/hardware/camera2/legacy/RequestHandlerThread;->mIdle
Landroid/hardware/camera2/legacy/RequestHandlerThread;->mIdleHandler
Landroid/hardware/camera2/legacy/RequestHandlerThread;->mStarted
Landroid/hardware/camera2/legacy/RequestHolder;->TAG
Landroid/hardware/camera2/legacy/RequestHolder;->mFailed
Landroid/hardware/camera2/legacy/RequestHolder;->mFrameNumber
Landroid/hardware/camera2/legacy/RequestHolder;->mJpegSurfaceIds
Landroid/hardware/camera2/legacy/RequestHolder;->mNumJpegTargets
Landroid/hardware/camera2/legacy/RequestHolder;->mNumPreviewTargets
Landroid/hardware/camera2/legacy/RequestHolder;->mOutputAbandoned
Landroid/hardware/camera2/legacy/RequestHolder;->mRepeating
Landroid/hardware/camera2/legacy/RequestHolder;->mRequest
Landroid/hardware/camera2/legacy/RequestHolder;->mRequestId
Landroid/hardware/camera2/legacy/RequestHolder;->mSubsequeceId
Landroid/hardware/camera2/legacy/RequestHolder$Builder;->mJpegSurfaceIds
Landroid/hardware/camera2/legacy/RequestHolder$Builder;->mNumJpegTargets
Landroid/hardware/camera2/legacy/RequestHolder$Builder;->mNumPreviewTargets
Landroid/hardware/camera2/legacy/RequestHolder$Builder;->mRepeating
Landroid/hardware/camera2/legacy/RequestHolder$Builder;->mRequest
Landroid/hardware/camera2/legacy/RequestHolder$Builder;->mRequestId
Landroid/hardware/camera2/legacy/RequestHolder$Builder;->mSubsequenceId
Landroid/hardware/camera2/legacy/RequestQueue;->INVALID_FRAME
Landroid/hardware/camera2/legacy/RequestQueue;->TAG
Landroid/hardware/camera2/legacy/RequestQueue;->mCurrentFrameNumber
Landroid/hardware/camera2/legacy/RequestQueue;->mCurrentRepeatingFrameNumber
Landroid/hardware/camera2/legacy/RequestQueue;->mCurrentRequestId
Landroid/hardware/camera2/legacy/RequestQueue;->mJpegSurfaceIds
Landroid/hardware/camera2/legacy/RequestQueue;->mRepeatingRequest
Landroid/hardware/camera2/legacy/RequestQueue;->mRequestQueue
Landroid/hardware/camera2/legacy/RequestQueue$RequestQueueEntry;->mBurstHolder
Landroid/hardware/camera2/legacy/RequestQueue$RequestQueueEntry;->mFrameNumber
Landroid/hardware/camera2/legacy/RequestQueue$RequestQueueEntry;->mQueueEmpty
Landroid/hardware/camera2/legacy/RequestThreadManager;->ASPECT_RATIO_TOLERANCE
Landroid/hardware/camera2/legacy/RequestThreadManager;->DEBUG
Landroid/hardware/camera2/legacy/RequestThreadManager;->JPEG_FRAME_TIMEOUT
Landroid/hardware/camera2/legacy/RequestThreadManager;->MAX_IN_FLIGHT_REQUESTS
Landroid/hardware/camera2/legacy/RequestThreadManager;->MSG_CLEANUP
Landroid/hardware/camera2/legacy/RequestThreadManager;->MSG_CONFIGURE_OUTPUTS
Landroid/hardware/camera2/legacy/RequestThreadManager;->MSG_SUBMIT_CAPTURE_REQUEST
Landroid/hardware/camera2/legacy/RequestThreadManager;->PREVIEW_FRAME_TIMEOUT
Landroid/hardware/camera2/legacy/RequestThreadManager;->REQUEST_COMPLETE_TIMEOUT
Landroid/hardware/camera2/legacy/RequestThreadManager;->TAG
Landroid/hardware/camera2/legacy/RequestThreadManager;->USE_BLOB_FORMAT_OVERRIDE
Landroid/hardware/camera2/legacy/RequestThreadManager;->VERBOSE
Landroid/hardware/camera2/legacy/RequestThreadManager;->mCallbackOutputs
Landroid/hardware/camera2/legacy/RequestThreadManager;->mCamera
Landroid/hardware/camera2/legacy/RequestThreadManager;->mCameraId
Landroid/hardware/camera2/legacy/RequestThreadManager;->mCaptureCollector
Landroid/hardware/camera2/legacy/RequestThreadManager;->mCharacteristics
Landroid/hardware/camera2/legacy/RequestThreadManager;->mDeviceState
Landroid/hardware/camera2/legacy/RequestThreadManager;->mDummySurface
Landroid/hardware/camera2/legacy/RequestThreadManager;->mDummyTexture
Landroid/hardware/camera2/legacy/RequestThreadManager;->mErrorCallback
Landroid/hardware/camera2/legacy/RequestThreadManager;->mFaceDetectMapper
Landroid/hardware/camera2/legacy/RequestThreadManager;->mFocusStateMapper
Landroid/hardware/camera2/legacy/RequestThreadManager;->mGLThreadManager
Landroid/hardware/camera2/legacy/RequestThreadManager;->mIdleLock
Landroid/hardware/camera2/legacy/RequestThreadManager;->mIntermediateBufferSize
Landroid/hardware/camera2/legacy/RequestThreadManager;->mJpegCallback
Landroid/hardware/camera2/legacy/RequestThreadManager;->mJpegShutterCallback
Landroid/hardware/camera2/legacy/RequestThreadManager;->mJpegSurfaceIds
Landroid/hardware/camera2/legacy/RequestThreadManager;->mLastRequest
Landroid/hardware/camera2/legacy/RequestThreadManager;->mParams
Landroid/hardware/camera2/legacy/RequestThreadManager;->mPrevCounter
Landroid/hardware/camera2/legacy/RequestThreadManager;->mPreviewCallback
Landroid/hardware/camera2/legacy/RequestThreadManager;->mPreviewOutputs
Landroid/hardware/camera2/legacy/RequestThreadManager;->mPreviewRunning
Landroid/hardware/camera2/legacy/RequestThreadManager;->mPreviewTexture
Landroid/hardware/camera2/legacy/RequestThreadManager;->mQuit
Landroid/hardware/camera2/legacy/RequestThreadManager;->mReceivedJpeg
Landroid/hardware/camera2/legacy/RequestThreadManager;->mRequestCounter
Landroid/hardware/camera2/legacy/RequestThreadManager;->mRequestHandlerCb
Landroid/hardware/camera2/legacy/RequestThreadManager;->mRequestQueue
Landroid/hardware/camera2/legacy/RequestThreadManager;->mRequestThread
Landroid/hardware/camera2/legacy/RequestThreadManager$ConfigureHolder;->condition
Landroid/hardware/camera2/legacy/RequestThreadManager$ConfigureHolder;->surfaces
Landroid/hardware/camera2/legacy/RequestThreadManager$FpsCounter;->NANO_PER_SECOND
Landroid/hardware/camera2/legacy/RequestThreadManager$FpsCounter;->TAG
Landroid/hardware/camera2/legacy/RequestThreadManager$FpsCounter;->mFrameCount
Landroid/hardware/camera2/legacy/RequestThreadManager$FpsCounter;->mLastFps
Landroid/hardware/camera2/legacy/RequestThreadManager$FpsCounter;->mLastPrintTime
Landroid/hardware/camera2/legacy/RequestThreadManager$FpsCounter;->mLastTime
Landroid/hardware/camera2/legacy/RequestThreadManager$FpsCounter;->mStreamType
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->DEBUG
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->EGL_COLOR_BITLENGTH
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->EGL_RECORDABLE_ANDROID
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->FLIP_TYPE_BOTH
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->FLIP_TYPE_HORIZONTAL
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->FLIP_TYPE_NONE
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->FLIP_TYPE_VERTICAL
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->FLOAT_SIZE_BYTES
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->FRAGMENT_SHADER
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->GLES_VERSION
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->GL_MATRIX_SIZE
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->LEGACY_PERF_PROPERTY
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->LOG_NAME_TIME_FORMATTER
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->PBUFFER_PIXEL_BYTES
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->TAG
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->TRIANGLE_VERTICES_DATA_POS_OFFSET
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->TRIANGLE_VERTICES_DATA_STRIDE_BYTES
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->TRIANGLE_VERTICES_DATA_UV_OFFSET
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->VERTEX_POS_SIZE
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->VERTEX_SHADER
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->VERTEX_UV_SIZE
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mBothFlipTriangleVertices
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mConfigs
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mConversionSurfaces
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mEGLContext
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mEGLDisplay
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mFacing
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mHorizontalFlipTriangleVertices
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mMVPMatrix
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mPBufferPixels
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mPerfMeasurer
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mProgram
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mRegularTriangleVertices
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mSTMatrix
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mSurfaceTexture
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mSurfaces
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mTextureID
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->mVerticalFlipTriangleVertices
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->maPositionHandle
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->maTextureHandle
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->muMVPMatrixHandle
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->muSTMatrixHandle
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->sBothFlipTriangleVertices
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->sHorizontalFlipTriangleVertices
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->sRegularTriangleVertices
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->sVerticalFlipTriangleVertices
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer$EGLSurfaceHolder;->eglSurface
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer$EGLSurfaceHolder;->height
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer$EGLSurfaceHolder;->surface
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer$EGLSurfaceHolder;->width
Landroid/hardware/display/DeviceProductInfo;->mRelativeAddress
Landroid/hardware/display/DisplayManager$DeviceConfig;->KEY_PEAK_REFRESH_RATE_AMBIENT_BRIGHTNESS_THRESHOLDS
Landroid/hardware/display/DisplayManager$DeviceConfig;->KEY_PEAK_REFRESH_RATE_DISPLAY_BRIGHTNESS_THRESHOLDS
Landroid/hardware/display/DisplayManager$DeviceConfig;->KEY_REFRESH_RATE_IN_ZONE
Landroid/hardware/display/IColorDisplayManager$Stub;->DESCRIPTOR
Landroid/hardware/face/IFaceService$Stub;->DESCRIPTOR
Landroid/hardware/face/IFaceService$Stub;->TRANSACTION_enumerate
Landroid/hardware/face/IFaceService$Stub;->TRANSACTION_initConfiguredStrength
Landroid/hardware/face/IFaceService$Stub;->TRANSACTION_rename
Landroid/hardware/face/IFaceService$Stub;->TRANSACTION_setActiveUser
Landroid/hardware/face/IFaceService$Stub;->TRANSACTION_userActivity
Landroid/hardware/face/IFaceServiceReceiver$Stub;->DESCRIPTOR
Landroid/hardware/face/IFaceServiceReceiver$Stub;->TRANSACTION_onEnumerated
Landroid/hardware/fingerprint/FingerprintManager;->MSG_ENUMERATED
Landroid/hardware/fingerprint/FingerprintManager;->mEnumerateCallback
Landroid/hardware/fingerprint/FingerprintManager;->mRemovalFingerprint
Landroid/hardware/fingerprint/IFingerprintService$Stub;->TRANSACTION_enumerate
Landroid/hardware/fingerprint/IFingerprintService$Stub;->TRANSACTION_initConfiguredStrength
Landroid/hardware/fingerprint/IFingerprintService$Stub;->TRANSACTION_postEnroll
Landroid/hardware/fingerprint/IFingerprintService$Stub;->TRANSACTION_preEnroll
Landroid/hardware/fingerprint/IFingerprintService$Stub;->TRANSACTION_resetTimeout
Landroid/hardware/fingerprint/IFingerprintService$Stub;->TRANSACTION_setActiveUser
Landroid/hardware/fingerprint/IFingerprintServiceReceiver$Stub;->TRANSACTION_onEnumerated
Landroid/hardware/hdmi/IHdmiCecVolumeControlFeatureListener$Stub;->DESCRIPTOR
Landroid/hardware/hdmi/IHdmiControlService$Stub;->TRANSACTION_isHdmiCecVolumeControlEnabled
Landroid/hardware/hdmi/IHdmiControlService$Stub;->TRANSACTION_setHdmiCecVolumeControlEnabled
Landroid/hardware/hdmi/IHdmiControlStatusChangeListener$Stub;->DESCRIPTOR
Landroid/hardware/input/InputManager$InputDeviceVibrator;->mDeviceId
Landroid/hardware/input/InputManager$InputDeviceVibrator;->mToken
Landroid/hardware/iris/IIrisService$Stub;->DESCRIPTOR
Landroid/hardware/iris/IIrisService$Stub;->TRANSACTION_initConfiguredStrength
Landroid/hardware/lights/ILightsManager$Stub;->DESCRIPTOR
Landroid/hardware/lights/LightsManager;->mService
Landroid/hardware/lights/LightsManager$LightsSession;->mCloseGuard
Landroid/hardware/lights/LightsManager$LightsSession;->mClosed
Landroid/hardware/usb/IUsbSerialReader$Stub;->DESCRIPTOR
Landroid/icu/impl/ICUCurrencyDisplayInfoProvider$ICUCurrencyDisplayInfo;->narrowSymbolCache
Landroid/icu/impl/ICUCurrencyDisplayInfoProvider$ICUCurrencyDisplayInfo$CurrencySink;->narrowSymbol
Landroid/icu/impl/ICUCurrencyDisplayInfoProvider$ICUCurrencyDisplayInfo$CurrencySink$EntrypointTable;->CURRENCY_NARROW
Landroid/icu/impl/ICUCurrencyDisplayInfoProvider$ICUCurrencyDisplayInfo$NarrowSymbol;->isoCode
Landroid/icu/impl/ICUCurrencyDisplayInfoProvider$ICUCurrencyDisplayInfo$NarrowSymbol;->narrowSymbol
Landroid/icu/impl/PluralRulesLoader;->UNKNOWN_RANGE
Landroid/icu/impl/PluralRulesLoader;->localeIdToPluralRanges
Landroid/icu/impl/PluralRulesLoader;->rulesIdToRules
Landroid/icu/impl/Punycode;->basicToDigit
Landroid/icu/impl/RBBIDataWrapper;->RESERVED
Landroid/icu/impl/RBBIDataWrapper;->TAGIDX
Landroid/icu/impl/RBBIDataWrapper$RBBIStateTable;->fReserved
Landroid/icu/impl/SimpleFormatterImpl$Int64Iterator;->DONE
Landroid/icu/impl/locale/LanguageTag;->GRANDFATHERED
Landroid/icu/impl/number/AdoptingModifierStore;->zero
Landroid/icu/impl/number/CurrencySpacingEnabledModifier;->UNISET_NOTS
Landroid/icu/impl/number/SimpleModifier;->prefixLength
Landroid/icu/impl/number/SimpleModifier;->suffixLength
Landroid/icu/impl/number/SimpleModifier;->suffixOffset
Landroid/icu/number/Precision;->PASS_THROUGH
Landroid/icu/text/ListFormatter;->end
Landroid/icu/text/ListFormatter;->two
Landroid/icu/text/ListFormatter$FormattedListBuilder;->current
Landroid/icu/text/ListFormatter$FormattedListBuilder;->offset
Landroid/icu/text/NFRule;->MASTER_RULE
Landroid/icu/text/NFRuleSet;->MASTER_RULE_INDEX
Landroid/icu/text/PluralRanges;->explicit
Landroid/icu/text/PluralRanges;->isFrozen
Landroid/icu/text/PluralRanges;->matrix
Landroid/icu/text/PluralRanges$Matrix;->data
Landroid/icu/text/PluralRules;->KEYWORD_RULE_SEPARATOR
Landroid/icu/text/RBBISetBuilder;->DICT_BIT
Landroid/icu/text/RuleBasedBreakIterator;->kMaxLookaheads
Landroid/icu/text/RuleBasedBreakIterator$LookAheadResults;->fKeys
Landroid/icu/text/RuleBasedBreakIterator$LookAheadResults;->fPositions
Landroid/icu/text/RuleBasedBreakIterator$LookAheadResults;->fUsedSlotLimit
Landroid/icu/util/LocaleMatcher;->defaultLocaleIndex
Landroid/icu/util/MeasureUnit;->NOUNIT_FACTORY
Landroid/icu/util/MeasureUnit;->unitPerUnitToSingleUnit
Landroid/icu/util/NoUnit;->serialVersionUID
Landroid/icu/util/ULocale;->UND_PATTERN
Landroid/icu/util/ULocale$1ULocaleAcceptLanguageQ;->q
Landroid/icu/util/ULocale$1ULocaleAcceptLanguageQ;->serial
Landroid/icu/util/VersionInfo;->javaVersion
Landroid/inputmethodservice/IInputMethodSessionWrapper;->DO_TOGGLE_SOFT_INPUT
Landroid/inputmethodservice/InputMethodService;->mCanPreRender
Landroid/inputmethodservice/InputMethodService;->mIsPreRendered
Landroid/location/AbstractListenerManager;->mListeners
Landroid/location/AbstractListenerManager;->mLock
Landroid/location/AbstractListenerManager;->mMergedRequest
Landroid/location/AbstractListenerManager$Registration;->mExecutor
Landroid/location/AbstractListenerManager$Registration;->mListener
Landroid/location/AbstractListenerManager$Registration;->mRequest
Landroid/location/Geocoder;->TAG
Landroid/location/Geofence;->TYPE_HORIZONTAL_CIRCLE
Landroid/location/Geofence;->mType
Landroid/location/GnssAntennaInfo$SphericalCorrections;->mDeltaPhi
Landroid/location/GnssAntennaInfo$SphericalCorrections;->mDeltaTheta
Landroid/location/GnssCapabilities;->ANTENNA_INFO
Landroid/location/GnssCapabilities;->GEOFENCING
Landroid/location/GnssCapabilities;->INVALID_CAPABILITIES
Landroid/location/GnssCapabilities;->LOW_POWER_MODE
Landroid/location/GnssCapabilities;->MEASUREMENTS
Landroid/location/GnssCapabilities;->MEASUREMENT_CORRECTIONS
Landroid/location/GnssCapabilities;->MEASUREMENT_CORRECTIONS_EXCESS_PATH_LENGTH
Landroid/location/GnssCapabilities;->MEASUREMENT_CORRECTIONS_LOS_SATS
Landroid/location/GnssCapabilities;->MEASUREMENT_CORRECTIONS_REFLECTING_PLANE
Landroid/location/GnssCapabilities;->NAV_MESSAGES
Landroid/location/GnssCapabilities;->SATELLITE_BLACKLIST
Landroid/location/GnssCapabilities;->mGnssCapabilities
Landroid/location/IBatchedLocationCallback$Stub;->DESCRIPTOR
Landroid/location/IBatchedLocationCallback$Stub;->TRANSACTION_onLocationBatch
Landroid/location/IBatchedLocationCallback$Stub$Proxy;->mRemote
Landroid/location/IBatchedLocationCallback$Stub$Proxy;->sDefaultImpl
Landroid/location/IGnssAntennaInfoListener$Stub;->DESCRIPTOR
Landroid/location/IGnssAntennaInfoListener$Stub;->TRANSACTION_onGnssAntennaInfoReceived
Landroid/location/IGnssStatusListener$Stub;->TRANSACTION_onNmeaReceived
Landroid/location/ILocationListener$Stub;->TRANSACTION_onProviderDisabled
Landroid/location/ILocationListener$Stub;->TRANSACTION_onProviderEnabled
Landroid/location/ILocationListener$Stub;->TRANSACTION_onRemoved
Landroid/location/ILocationManager$Stub;->TRANSACTION_addGnssBatchingCallback
Landroid/location/ILocationManager$Stub;->TRANSACTION_getIgnoreSettingsWhitelist
Landroid/location/ILocationManager$Stub;->TRANSACTION_getTestProviderCurrentRequests
Landroid/location/ILocationManager$Stub;->TRANSACTION_locationCallbackFinished
Landroid/location/ILocationManager$Stub;->TRANSACTION_removeGnssBatchingCallback
Landroid/location/ILocationManager$Stub;->TRANSACTION_removeUpdates
Landroid/location/ILocationManager$Stub;->TRANSACTION_requestLocationUpdates
Landroid/location/LocationManager;->GET_CURRENT_LOCATION_MAX_TIMEOUT_MS
Landroid/location/LocationManager;->GPS_STATUS_USAGE
Landroid/location/LocationManager;->INCOMPLETE_LOCATION
Landroid/location/LocationManager;->TARGETED_PENDING_INTENT
Landroid/location/LocationManager;->mBatchedLocationCallbackManager
Landroid/location/LocationManager;->mGnssAntennaInfoListenerManager
Landroid/location/LocationManager;->mGnssMeasurementsListenerManager
Landroid/location/LocationManager;->mGnssNavigationMessageListenerTransport
Landroid/location/LocationManager;->mGnssStatusListenerManager
Landroid/location/LocationManager;->mListeners
Landroid/location/LocationManager;->mLocationEnabledCache
Landroid/location/LocationManager;->mLock
Landroid/location/LocationManager$BatchedLocationCallbackManager;->mListenerTransport
Landroid/location/LocationManager$GetCurrentLocationTransport;->mAlarmManager
Landroid/location/LocationManager$GetCurrentLocationTransport;->mRemoteCancellationSignal
Landroid/location/LocationManager$GnssAntennaInfoListenerManager;->mListenerTransport
Landroid/location/LocationManager$GnssMeasurementsListenerManager;->mListenerTransport
Landroid/location/LocationManager$GnssNavigationMessageListenerManager;->mListenerTransport
Landroid/location/LocationManager$GnssStatusListenerManager;->mGnssStatus
Landroid/location/LocationManager$GnssStatusListenerManager;->mListenerTransport
Landroid/location/LocationManager$GnssStatusListenerManager;->mTtff
Landroid/location/LocationManager$NmeaAdapter;->mListener
Landroid/location/LocationRequest;->DEFAULT_INTERVAL_MS
Landroid/location/LocationRequest;->FASTEST_INTERVAL_FACTOR
Landroid/location/LocationRequest;->mExpireAt
Landroid/location/LocationRequest;->mExpireIn
Landroid/location/LocationRequest;->mExplicitFastestInterval
Landroid/location/LocationRequest;->mFastestInterval
Landroid/location/LocationRequest;->mLowPowerMode
Landroid/location/LocationRequest;->mNumUpdates
Landroid/location/LocationRequest;->mSmallestDisplacement
Landroid/media/AudioManager;->mUseVolumeKeySounds
Landroid/media/IAudioService$Stub;->TRANSACTION_getPreferredDeviceForStrategy
Landroid/media/IAudioService$Stub;->TRANSACTION_registerStrategyPreferredDeviceDispatcher
Landroid/media/IAudioService$Stub;->TRANSACTION_removePreferredDeviceForStrategy
Landroid/media/IAudioService$Stub;->TRANSACTION_setPreferredDeviceForStrategy
Landroid/media/IAudioService$Stub;->TRANSACTION_unregisterStrategyPreferredDeviceDispatcher
Landroid/media/IMediaController2$Stub;->DESCRIPTOR
Landroid/media/IMediaRoute2ProviderService$Stub;->DESCRIPTOR
Landroid/media/IMediaRoute2ProviderServiceCallback$Stub;->DESCRIPTOR
Landroid/media/IMediaRoute2ProviderServiceCallback$Stub;->TRANSACTION_notifySessionUpdated
Landroid/media/IMediaRoute2ProviderServiceCallback$Stub;->TRANSACTION_updateState
Landroid/media/IMediaRouter2$Stub;->DESCRIPTOR
Landroid/media/IMediaRouter2$Stub;->TRANSACTION_getSessionHintsForCreatingSession
Landroid/media/IMediaRouter2Manager$Stub;->DESCRIPTOR
Landroid/media/IMediaRouterClient$Stub;->TRANSACTION_onSelectedRouteChanged
Landroid/media/IMediaRouterService$Stub;->TRANSACTION_notifySessionHintsForCreatingSession
Landroid/media/IMediaSession2$Stub;->DESCRIPTOR
Landroid/media/IMediaSession2Service$Stub;->DESCRIPTOR
Landroid/media/IRemoteVolumeController$Stub;->DESCRIPTOR
Landroid/media/IRemoteVolumeController$Stub;->TRANSACTION_remoteVolumeChanged
Landroid/media/IRemoteVolumeController$Stub;->TRANSACTION_updateRemoteController
Landroid/media/IRemoteVolumeController$Stub$Proxy;->mRemote
Landroid/media/IRemoteVolumeController$Stub$Proxy;->sDefaultImpl
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub;->DESCRIPTOR
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub;->TRANSACTION_dispatchPrefDeviceChanged
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub$Proxy;->mRemote
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub$Proxy;->sDefaultImpl
Landroid/media/MediaCodec$CryptoInfo;->pattern
Landroid/media/MediaCodec$CryptoInfo;->zeroPattern
Landroid/media/MediaCodecInfo$AudioCapabilities;->mMaxInputChannelCount
Landroid/media/MediaRouter2;->mControllerCreationRequestCnt
Landroid/media/MediaRouter2$RoutingController;->mIsReleased
Landroid/media/MediaSession2;->mSessionManager
Landroid/media/MediaTranscodeManager;->EVENT_JOB_FINISHED
Landroid/media/MediaTranscodeManager;->EVENT_JOB_PROGRESSED
Landroid/media/MediaTranscodeManager;->EVENT_JOB_STARTED
Landroid/media/MediaTranscodeManager;->ID_INVALID
Landroid/media/MediaTranscodeManager;->TAG
Landroid/media/MediaTranscodeManager;->mContext
Landroid/media/MediaTranscodeManager;->mPendingTranscodingJobs
Landroid/media/MediaTranscodeManager;->sMediaTranscodeManager
Landroid/media/MediaTranscodeManager$TranscodingJob;->RESULT_CANCELED
Landroid/media/MediaTranscodeManager$TranscodingJob;->RESULT_ERROR
Landroid/media/MediaTranscodeManager$TranscodingJob;->RESULT_NONE
Landroid/media/MediaTranscodeManager$TranscodingJob;->RESULT_SUCCESS
Landroid/media/MediaTranscodeManager$TranscodingJob;->STATUS_FINISHED
Landroid/media/MediaTranscodeManager$TranscodingJob;->STATUS_PENDING
Landroid/media/MediaTranscodeManager$TranscodingJob;->STATUS_RUNNING
Landroid/media/MediaTranscodeManager$TranscodingJob;->mExecutor
Landroid/media/MediaTranscodeManager$TranscodingJob;->mID
Landroid/media/MediaTranscodeManager$TranscodingJob;->mListener
Landroid/media/MediaTranscodeManager$TranscodingJob;->mProgress
Landroid/media/MediaTranscodeManager$TranscodingJob;->mProgressChangedExecutor
Landroid/media/MediaTranscodeManager$TranscodingJob;->mProgressChangedListener
Landroid/media/MediaTranscodeManager$TranscodingJob;->mResult
Landroid/media/MediaTranscodeManager$TranscodingJob;->mStatus
Landroid/media/MediaTranscodeManager$TranscodingJob;->mStatusChangeLock
Landroid/media/MediaTranscodeManager$TranscodingRequest;->mDstFormat
Landroid/media/MediaTranscodeManager$TranscodingRequest;->mDstUri
Landroid/media/MediaTranscodeManager$TranscodingRequest;->mSrcUri
Landroid/media/MediaTranscodeManager$TranscodingRequest$Builder;->mDstFormat
Landroid/media/MediaTranscodeManager$TranscodingRequest$Builder;->mDstUri
Landroid/media/MediaTranscodeManager$TranscodingRequest$Builder;->mSrcUri
Landroid/media/PlayerBase;->USE_AUDIOFLINGER_MUTING_FOR_OP
Landroid/media/PlayerBase$IAppOpsCallbackWrapper;->mWeakPB
Landroid/media/audiopolicy/AudioMixingRule$Builder;->mAllowPrivilegedPlaybackCapture
Landroid/media/session/IOnMediaKeyEventDispatchedListener$Stub;->DESCRIPTOR
Landroid/media/session/IOnMediaKeyEventSessionChangedListener$Stub;->DESCRIPTOR
Landroid/media/session/ISession$Stub;->TRANSACTION_setQueue
Landroid/media/session/ISession2TokensListener$Stub;->DESCRIPTOR
Landroid/media/session/ISessionManager$Stub;->TRANSACTION_getSession2Tokens
Landroid/media/session/ISessionManager$Stub;->TRANSACTION_notifySession2Created
Landroid/media/session/ISessionManager$Stub;->TRANSACTION_registerRemoteVolumeController
Landroid/media/session/ISessionManager$Stub;->TRANSACTION_setCustomMediaKeyDispatcherForTesting
Landroid/media/session/ISessionManager$Stub;->TRANSACTION_setCustomSessionPolicyProviderForTesting
Landroid/media/session/ISessionManager$Stub;->TRANSACTION_unregisterRemoteVolumeController
Landroid/media/session/MediaController$PlaybackInfo;->mVolumeType
Landroid/media/session/MediaSessionManager$Session2TokensChangedWrapper;->mHandler
Landroid/media/session/MediaSessionManager$SessionsChangedWrapper;->mHandler
Landroid/media/soundtrigger/SoundTriggerDetector;->mSoundTriggerService
Landroid/media/soundtrigger/SoundTriggerManager;->mSoundTriggerService
Landroid/media/soundtrigger_middleware/ISoundTriggerCallback$Stub;->DESCRIPTOR
Landroid/media/soundtrigger_middleware/ISoundTriggerMiddlewareService$Stub;->DESCRIPTOR
Landroid/media/soundtrigger_middleware/ISoundTriggerMiddlewareService$Stub;->TRANSACTION_attach
Landroid/media/soundtrigger_middleware/ISoundTriggerMiddlewareService$Stub;->TRANSACTION_listModules
Landroid/media/soundtrigger_middleware/ISoundTriggerModule$Stub;->DESCRIPTOR
Landroid/media/tv/tuner/Lnb;->mId
Landroid/media/tv/tuner/Tuner;->mOnTunerEventExecutor
Landroid/media/tv/tunerresourcemanager/CasSessionRequest;->TAG
Landroid/media/tv/tunerresourcemanager/CasSessionRequest;->mCasSystemId
Landroid/media/tv/tunerresourcemanager/CasSessionRequest;->mClientId
Landroid/media/tv/tunerresourcemanager/IResourcesReclaimListener$Stub;->DESCRIPTOR
Landroid/media/tv/tunerresourcemanager/ITunerResourceManager$Stub;->DESCRIPTOR
Landroid/media/tv/tunerresourcemanager/ResourceClientProfile;->TAG
Landroid/media/tv/tunerresourcemanager/ResourceClientProfile;->mTvInputSessionId
Landroid/media/tv/tunerresourcemanager/ResourceClientProfile;->mUseCase
Landroid/media/tv/tunerresourcemanager/TunerDemuxRequest;->TAG
Landroid/media/tv/tunerresourcemanager/TunerDemuxRequest;->mClientId
Landroid/media/tv/tunerresourcemanager/TunerDescramblerRequest;->TAG
Landroid/media/tv/tunerresourcemanager/TunerDescramblerRequest;->mClientId
Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;->CREATOR
Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;->TAG
Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;->mExclusiveGroupId
Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;->mFrontendType
Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;->mId
Landroid/media/tv/tunerresourcemanager/TunerFrontendRequest;->TAG
Landroid/media/tv/tunerresourcemanager/TunerFrontendRequest;->mClientId
Landroid/media/tv/tunerresourcemanager/TunerFrontendRequest;->mFrontendType
Landroid/media/tv/tunerresourcemanager/TunerLnbRequest;->TAG
Landroid/media/tv/tunerresourcemanager/TunerLnbRequest;->mClientId
Landroid/mtp/MtpDatabase;->ID_PROJECTION
Landroid/mtp/MtpDatabase;->PATH_PROJECTION
Landroid/net/ConnectivityManager;->BASE
Landroid/net/ConnectivityManager;->LISTEN
Landroid/net/ConnectivityManager;->PRIVATE_DNS_DEFAULT_MODE_FALLBACK
Landroid/net/ConnectivityManager;->PRIVATE_DNS_MODE_OFF
Landroid/net/ConnectivityManager;->PRIVATE_DNS_MODE_OPPORTUNISTIC
Landroid/net/ConnectivityManager;->PRIVATE_DNS_MODE_PROVIDER_HOSTNAME
Landroid/net/ConnectivityManager;->REQUEST
Landroid/net/ConnectivityManager;->mNMService
Landroid/net/ConnectivityManager;->mNPManager
Landroid/net/DnsPacket;->ANSECTION
Landroid/net/DnsPacket;->ARSECTION
Landroid/net/DnsPacket;->NSSECTION
Landroid/net/DnsPacket;->NUM_SECTIONS
Landroid/net/DnsPacket;->QDSECTION
Landroid/net/DnsPacket;->TAG
Landroid/net/DnsPacket;->mHeader
Landroid/net/DnsPacket;->mRecords
Landroid/net/DnsPacket$DnsHeader;->TAG
Landroid/net/DnsPacket$DnsHeader;->flags
Landroid/net/DnsPacket$DnsHeader;->id
Landroid/net/DnsPacket$DnsHeader;->mRecordCount
Landroid/net/DnsPacket$DnsHeader;->rcode
Landroid/net/DnsPacket$DnsRecord;->MAXLABELCOUNT
Landroid/net/DnsPacket$DnsRecord;->MAXLABELSIZE
Landroid/net/DnsPacket$DnsRecord;->MAXNAMESIZE
Landroid/net/DnsPacket$DnsRecord;->NAME_COMPRESSION
Landroid/net/DnsPacket$DnsRecord;->NAME_NORMAL
Landroid/net/DnsPacket$DnsRecord;->TAG
Landroid/net/DnsPacket$DnsRecord;->byteFormat
Landroid/net/DnsPacket$DnsRecord;->dName
Landroid/net/DnsPacket$DnsRecord;->mRdata
Landroid/net/DnsPacket$DnsRecord;->nsClass
Landroid/net/DnsPacket$DnsRecord;->nsType
Landroid/net/DnsPacket$DnsRecord;->pos
Landroid/net/DnsPacket$DnsRecord;->ttl
Landroid/net/EthernetManager;->MSG_AVAILABILITY_CHANGED
Landroid/net/EthernetManager;->mContext
Landroid/net/EthernetManager;->mHandler
Landroid/net/ICaptivePortal$Stub;->TRANSACTION_logEvent
Landroid/net/IConnectivityDiagnosticsCallback$Stub;->DESCRIPTOR
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_addVpnAddress
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_checkMobileProvisioning
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_deleteVpnProfile
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_establishVpn
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getActiveNetworkQuotaInfo
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getAlwaysOnVpnPackage
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getLegacyVpnInfo
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getMobileProvisioningUrl
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getVpnConfig
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getVpnLockdownWhitelist
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_isAlwaysOnVpnPackageSupported
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_isCallerCurrentAlwaysOnVpnApp
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_isCallerCurrentAlwaysOnVpnLockdownApp
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_isVpnLockdownEnabled
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_prepareVpn
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_provisionVpnProfile
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_registerNetworkFactory
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_removeVpnAddress
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setAlwaysOnVpnPackage
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setUnderlyingNetworksForVpn
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setVpnPackageAuthorization
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_startLegacyVpn
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_startVpnProfile
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_stopVpnProfile
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_unregisterNetworkFactory
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_updateLockdownVpn
Landroid/net/IIntResultListener$Stub;->DESCRIPTOR
Landroid/net/INetworkPolicyManager$Stub;->TRANSACTION_getNetworkQuotaInfo
Landroid/net/INetworkStatsService$Stub;->TRANSACTION_forceUpdateIfaces
Landroid/net/ISocketKeepaliveCallback$Stub;->DESCRIPTOR
Landroid/net/ITestNetworkManager$Stub;->DESCRIPTOR
Landroid/net/ITetheredInterfaceCallback$Stub;->DESCRIPTOR
Landroid/net/ITetheringConnector$Stub;->DESCRIPTOR
Landroid/net/ITetheringEventCallback$Stub;->DESCRIPTOR
Landroid/net/IpSecTransform;->mCallbackHandler
Landroid/net/IpSecTransform;->mKeepalive
Landroid/net/IpSecTransform;->mKeepaliveCallback
Landroid/net/IpSecTransform;->mUserKeepaliveCallback
Landroid/net/NetworkAgent;->mAsyncChannel
Landroid/net/NetworkAgent;->mIsLegacy
Landroid/net/NetworkCapabilities;->FORCE_RESTRICTED_CAPABILITIES
Landroid/net/NetworkCapabilities;->RESTRICTED_CAPABILITIES
Landroid/net/NetworkCapabilities;->TEST_NETWORKS_ALLOWED_TRANSPORTS
Landroid/net/NetworkCapabilities;->UNRESTRICTED_CAPABILITIES
Landroid/net/NetworkCapabilities;->mUnwantedNetworkCapabilities
Landroid/net/NetworkCapabilitiesProto;->TRANSPORT_BLUETOOTH
Landroid/net/NetworkCapabilitiesProto;->TRANSPORT_CELLULAR
Landroid/net/NetworkCapabilitiesProto;->TRANSPORT_ETHERNET
Landroid/net/NetworkCapabilitiesProto;->TRANSPORT_LOWPAN
Landroid/net/NetworkCapabilitiesProto;->TRANSPORT_VPN
Landroid/net/NetworkCapabilitiesProto;->TRANSPORT_WIFI
Landroid/net/NetworkCapabilitiesProto;->TRANSPORT_WIFI_AWARE
Landroid/net/NetworkPolicyManager;->mCallbackMap
Landroid/net/NetworkProvider;->ID_VPN
Landroid/net/NetworkProvider;->mCm
Landroid/net/NetworkState;->SANITY_CHECK_ROAMING
Landroid/net/NetworkState;->networkId
Landroid/net/NetworkUtils;->ADDRESS_FAMILIES
Landroid/net/Proxy;->EXCLLIST_PATTERN
Landroid/net/Proxy;->EXCLLIST_REGEXP
Landroid/net/Proxy;->EXCL_REGEX
Landroid/net/Proxy;->HOSTNAME_PATTERN
Landroid/net/Proxy;->HOSTNAME_REGEXP
Landroid/net/Proxy;->NAME_IP_REGEX
Landroid/net/Proxy;->PROXY_EXCLLIST_INVALID
Landroid/net/Proxy;->PROXY_HOSTNAME_EMPTY
Landroid/net/Proxy;->PROXY_HOSTNAME_INVALID
Landroid/net/Proxy;->PROXY_PORT_EMPTY
Landroid/net/Proxy;->PROXY_PORT_INVALID
Landroid/net/Proxy;->PROXY_VALID
Landroid/net/SocketKeepalive;->ERROR_HARDWARE_UNSUPPORTED
Landroid/net/Uri;->NOT_CACHED
Landroid/net/lowpan/ILowpanEnergyScanCallback$Stub;->DESCRIPTOR
Landroid/net/lowpan/ILowpanInterface$Stub;->DESCRIPTOR
Landroid/net/lowpan/ILowpanInterfaceListener$Stub;->DESCRIPTOR
Landroid/net/lowpan/ILowpanManager$Stub;->DESCRIPTOR
Landroid/net/lowpan/ILowpanManagerListener$Stub;->DESCRIPTOR
Landroid/net/lowpan/ILowpanNetScanCallback$Stub;->DESCRIPTOR
Landroid/net/netstats/provider/INetworkStatsProvider$Stub;->DESCRIPTOR
Landroid/net/netstats/provider/INetworkStatsProvider$Stub;->TRANSACTION_onSetLimit
Landroid/net/netstats/provider/INetworkStatsProviderCallback$Stub;->DESCRIPTOR
Landroid/net/netstats/provider/INetworkStatsProviderCallback$Stub;->TRANSACTION_notifyLimitReached
Landroid/net/util/IpRange;->SIGNUM_POSITIVE
Landroid/net/util/IpRange;->mEndAddr
Landroid/net/util/IpRange;->mStartAddr
Landroid/net/util/LinkPropertiesUtils$CompareOrUpdateResult;->added
Landroid/net/util/LinkPropertiesUtils$CompareOrUpdateResult;->removed
Landroid/net/util/LinkPropertiesUtils$CompareOrUpdateResult;->updated
Landroid/net/util/LinkPropertiesUtils$CompareResult;->added
Landroid/net/util/LinkPropertiesUtils$CompareResult;->removed
Landroid/net/util/MacAddressUtils;->DEFAULT_MAC_ADDRESS
Landroid/net/util/MacAddressUtils;->ETHER_ADDR_LEN
Landroid/net/util/MacAddressUtils;->LOCALLY_ASSIGNED_MASK
Landroid/net/util/MacAddressUtils;->MULTICAST_MASK
Landroid/net/util/MacAddressUtils;->NIC_MASK
Landroid/net/util/MacAddressUtils;->OUI_MASK
Landroid/net/util/MacAddressUtils;->VALID_LONG_MASK
Landroid/net/util/nsd/DnsSdTxtRecord;->CREATOR
Landroid/net/util/nsd/DnsSdTxtRecord;->mData
Landroid/net/util/nsd/DnsSdTxtRecord;->mSeparator
Landroid/net/wifi/IActionListener$Stub;->DESCRIPTOR
Landroid/net/wifi/IDppCallback$Stub;->DESCRIPTOR
Landroid/net/wifi/ILocalOnlyHotspotCallback$Stub;->DESCRIPTOR
Landroid/net/wifi/INetworkRequestMatchCallback$Stub;->DESCRIPTOR
Landroid/net/wifi/INetworkRequestUserSelectionCallback$Stub;->DESCRIPTOR
Landroid/net/wifi/IOnWifiActivityEnergyInfoListener$Stub;->DESCRIPTOR
Landroid/net/wifi/IOnWifiUsabilityStatsListener$Stub;->DESCRIPTOR
Landroid/net/wifi/IScanResultsCallback$Stub;->DESCRIPTOR
Landroid/net/wifi/IScanResultsListener$Stub;->DESCRIPTOR
Landroid/net/wifi/IScoreUpdateObserver$Stub;->DESCRIPTOR
Landroid/net/wifi/ISoftApCallback$Stub;->TRANSACTION_onConnectedClientsChanged
Landroid/net/wifi/ISoftApCallback$Stub;->TRANSACTION_onInfoChanged
Landroid/net/wifi/ISuggestionConnectionStatusListener$Stub;->DESCRIPTOR
Landroid/net/wifi/ITrafficStateCallback$Stub;->DESCRIPTOR
Landroid/net/wifi/ITxPacketCountListener$Stub;->DESCRIPTOR
Landroid/net/wifi/ITxPacketCountListener$Stub;->TRANSACTION_onFailure
Landroid/net/wifi/ITxPacketCountListener$Stub;->TRANSACTION_onSuccess
Landroid/net/wifi/ITxPacketCountListener$Stub$Proxy;->mRemote
Landroid/net/wifi/ITxPacketCountListener$Stub$Proxy;->sDefaultImpl
Landroid/net/wifi/IWifiConnectedNetworkScorer$Stub;->DESCRIPTOR
Landroid/net/wifi/IWifiManager$Stub;->TRANSACTION_deauthenticateNetwork
Landroid/net/wifi/SoftApConfiguration;->mBand
Landroid/net/wifi/SoftApConfiguration;->mChannel
Landroid/net/wifi/SoftApConfiguration$Builder;->mBand
Landroid/net/wifi/SoftApConfiguration$Builder;->mChannel
Landroid/net/wifi/WifiConfiguration$NetworkSelectionStatus;->PERMANENTLY_DISABLED_STARTING_INDEX
Landroid/net/wifi/WifiConfiguration$NetworkSelectionStatus;->TEMPORARILY_DISABLED_STARTING_INDEX
Landroid/net/wifi/WifiScanner$ScanData;->mBandScanned
Landroid/net/wifi/nl80211/IApInterface$Stub;->DESCRIPTOR
Landroid/net/wifi/nl80211/IApInterfaceEventCallback$Stub;->DESCRIPTOR
Landroid/net/wifi/nl80211/IClientInterface$Stub;->DESCRIPTOR
Landroid/net/wifi/nl80211/IInterfaceEventCallback$Stub;->DESCRIPTOR
Landroid/net/wifi/nl80211/IPnoScanEvent$Stub;->DESCRIPTOR
Landroid/net/wifi/nl80211/IScanEvent$Stub;->DESCRIPTOR
Landroid/net/wifi/nl80211/ISendMgmtFrameEvent$Stub;->DESCRIPTOR
Landroid/net/wifi/nl80211/IWifiScannerImpl$Stub;->DESCRIPTOR
Landroid/net/wifi/nl80211/IWificond$Stub;->DESCRIPTOR
Landroid/net/wifi/p2p/WifiP2pWfdInfo;->CONTENT_PROTECTION_SUPPORT
Landroid/net/wifi/p2p/WifiP2pWfdInfo;->COUPLED_SINK_SUPPORT_AT_SINK
Landroid/net/wifi/p2p/WifiP2pWfdInfo;->COUPLED_SINK_SUPPORT_AT_SOURCE
Landroid/net/wifi/p2p/WifiP2pWfdInfo;->DEVICE_TYPE
Landroid/net/wifi/p2p/WifiP2pWfdInfo;->SESSION_AVAILABLE
Landroid/os/BasicShellCommandHandler;->DEBUG
Landroid/os/BasicShellCommandHandler;->TAG
Landroid/os/BasicShellCommandHandler;->mArgPos
Landroid/os/BasicShellCommandHandler;->mArgs
Landroid/os/BasicShellCommandHandler;->mCmd
Landroid/os/BasicShellCommandHandler;->mCurArgData
Landroid/os/BasicShellCommandHandler;->mErr
Landroid/os/BasicShellCommandHandler;->mErrPrintWriter
Landroid/os/BasicShellCommandHandler;->mFileErr
Landroid/os/BasicShellCommandHandler;->mFileIn
Landroid/os/BasicShellCommandHandler;->mFileOut
Landroid/os/BasicShellCommandHandler;->mIn
Landroid/os/BasicShellCommandHandler;->mInputStream
Landroid/os/BasicShellCommandHandler;->mOut
Landroid/os/BasicShellCommandHandler;->mOutPrintWriter
Landroid/os/BasicShellCommandHandler;->mTarget
Landroid/os/BatterySaverPolicyConfig;->mDisableSoundTrigger
Landroid/os/BatterySaverPolicyConfig$Builder;->mDisableSoundTrigger
Landroid/os/BatteryStats$HistoryItem;->batteryChargeUAh
Landroid/os/BatteryStats$HistoryStepDetails;->statPlatformIdleState
Landroid/os/BugreportManager;->INTENT_UI_INTENSIVE_BUGREPORT_DUMPS_FINISHED
Landroid/os/Build$VERSION;->FIRST_SDK_INT
Landroid/os/GraphicsEnvironment;->GAME_DRIVER_GLOBAL_OPT_IN_DEFAULT
Landroid/os/GraphicsEnvironment;->GAME_DRIVER_GLOBAL_OPT_IN_GAME_DRIVER
Landroid/os/GraphicsEnvironment;->GAME_DRIVER_GLOBAL_OPT_IN_OFF
Landroid/os/GraphicsEnvironment;->GAME_DRIVER_GLOBAL_OPT_IN_PRERELEASE_DRIVER
Landroid/os/GraphicsEnvironment;->GAME_DRIVER_SPHAL_LIBRARIES_FILENAME
Landroid/os/GraphicsEnvironment;->GAME_DRIVER_WHITELIST_ALL
Landroid/os/GraphicsEnvironment;->PROPERTY_GFX_DRIVER
Landroid/os/GraphicsEnvironment;->sDriverMap
Landroid/os/GraphicsEnvironment$OpenGlDriverChoice;->ANGLE
Landroid/os/GraphicsEnvironment$OpenGlDriverChoice;->DEFAULT
Landroid/os/GraphicsEnvironment$OpenGlDriverChoice;->NATIVE
Landroid/os/IClientCallback$Stub;->DESCRIPTOR
Landroid/os/IDumpstate$Stub;->DESCRIPTOR
Landroid/os/IDumpstateListener$Stub;->DESCRIPTOR
Landroid/os/IExternalVibrationController$Stub;->DESCRIPTOR
Landroid/os/IExternalVibratorService$Stub;->DESCRIPTOR
Landroid/os/IIncidentAuthListener$Stub;->DESCRIPTOR
Landroid/os/IIncidentCompanion$Stub;->DESCRIPTOR
Landroid/os/IIncidentDumpCallback$Stub;->DESCRIPTOR
Landroid/os/INetworkActivityListener$Stub;->DESCRIPTOR
Landroid/os/INetworkActivityListener$Stub;->TRANSACTION_onNetworkActive
Landroid/os/INetworkActivityListener$Stub$Proxy;->mRemote
Landroid/os/INetworkActivityListener$Stub$Proxy;->sDefaultImpl
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_addIdleTimer
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_addInterfaceToNetwork
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_addLegacyRouteForNetId
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_addVpnUidRanges
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_clearDefaultNetId
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_isNetworkActive
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_registerNetworkActivityListener
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_removeIdleTimer
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_removeInterfaceFromNetwork
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_removeVpnUidRanges
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_setAllowOnlyVpnForUids
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_setDefaultNetId
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_setDnsForwarders
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_setMtu
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_setNetworkPermission
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_setUidMeteredNetworkBlacklist
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_setUidMeteredNetworkWhitelist
Landroid/os/INetworkManagementService$Stub;->TRANSACTION_unregisterNetworkActivityListener
Landroid/os/IPendingIntentRef$Stub;->DESCRIPTOR
Landroid/os/IPowerManager$Stub;->TRANSACTION_powerHint
Landroid/os/IPullAtomCallback$Stub;->DESCRIPTOR
Landroid/os/IPullAtomResultReceiver$Stub;->DESCRIPTOR
Landroid/os/IServiceCallback$Stub;->DESCRIPTOR
Landroid/os/IServiceManager$Stub;->DESCRIPTOR
Landroid/os/IStatsManagerService$Stub;->DESCRIPTOR
Landroid/os/IStatsd$Stub;->DESCRIPTOR
Landroid/os/ISystemConfig$Stub;->DESCRIPTOR
Landroid/os/IThermalStatusListener$Stub;->DESCRIPTOR
Landroid/os/IUserRestrictionsListener$Stub;->DESCRIPTOR
Landroid/os/IVibratorService$Stub;->DESCRIPTOR
Landroid/os/IVibratorService$Stub;->TRANSACTION_areEffectsSupported
Landroid/os/IVibratorService$Stub;->TRANSACTION_arePrimitivesSupported
Landroid/os/IVibratorService$Stub;->TRANSACTION_cancelVibrate
Landroid/os/IVibratorService$Stub;->TRANSACTION_hasAmplitudeControl
Landroid/os/IVibratorService$Stub;->TRANSACTION_hasVibrator
Landroid/os/IVibratorService$Stub;->TRANSACTION_isVibrating
Landroid/os/IVibratorService$Stub;->TRANSACTION_registerVibratorStateListener
Landroid/os/IVibratorService$Stub;->TRANSACTION_setAlwaysOnEffect
Landroid/os/IVibratorService$Stub;->TRANSACTION_unregisterVibratorStateListener
Landroid/os/IVibratorService$Stub;->TRANSACTION_vibrate
Landroid/os/IVibratorService$Stub$Proxy;->mRemote
Landroid/os/IVibratorService$Stub$Proxy;->sDefaultImpl
Landroid/os/IVibratorStateListener$Stub;->DESCRIPTOR
Landroid/os/IVold;->REMOUNT_MODE_FULL
Landroid/os/IVold;->REMOUNT_MODE_LEGACY
Landroid/os/IVold;->REMOUNT_MODE_READ
Landroid/os/IVold;->REMOUNT_MODE_WRITE
Landroid/os/IVold$Stub;->TRANSACTION_checkEncryption
Landroid/os/IVoldMountCallback$Stub;->DESCRIPTOR
Landroid/os/PowerManager;->ACTION_POWER_SAVE_MODE_CHANGING
Landroid/os/PowerManager;->EXTRA_POWER_SAVE_MODE
Landroid/os/SystemVibrator;->mDelegates
Landroid/os/SystemVibrator;->mService
Landroid/os/SystemVibrator;->mToken
Landroid/os/SystemVibrator$OnVibratorStateChangedListenerDelegate;->mExecutor
Landroid/os/SystemVibrator$OnVibratorStateChangedListenerDelegate;->mListener
Landroid/os/VibrationAttributes;->mAudioAttributes
Landroid/os/VibrationAttributes$Builder;->mAudioAttributes
Landroid/os/VibrationEffect;->PARCEL_TOKEN_COMPOSITION
Landroid/os/VibrationEffect;->PARCEL_TOKEN_EFFECT
Landroid/os/VibrationEffect;->PARCEL_TOKEN_ONE_SHOT
Landroid/os/VibrationEffect;->PARCEL_TOKEN_WAVEFORM
Landroid/os/VibrationEffect$Composed;->mPrimitiveEffects
Landroid/os/VibrationEffect$Composition;->mEffects
Landroid/os/VibrationEffect$Composition$PrimitiveEffect;->CREATOR
Landroid/os/VibrationEffect$Composition$PrimitiveEffect;->delay
Landroid/os/VibrationEffect$Composition$PrimitiveEffect;->id
Landroid/os/VibrationEffect$Composition$PrimitiveEffect;->scale
Landroid/os/VibrationEffect$OneShot;->CREATOR
Landroid/os/VibrationEffect$OneShot;->mAmplitude
Landroid/os/VibrationEffect$OneShot;->mDuration
Landroid/os/VibrationEffect$Prebaked;->CREATOR
Landroid/os/VibrationEffect$Prebaked;->mEffectId
Landroid/os/VibrationEffect$Prebaked;->mEffectStrength
Landroid/os/VibrationEffect$Prebaked;->mFallback
Landroid/os/VibrationEffect$Waveform;->CREATOR
Landroid/os/VibrationEffect$Waveform;->mAmplitudes
Landroid/os/VibrationEffect$Waveform;->mRepeat
Landroid/os/VibrationEffect$Waveform;->mTimings
Landroid/os/ZygoteProcess;->mApiBlacklistExemptions
Landroid/os/image/IDynamicSystemService$Stub;->DESCRIPTOR
Landroid/os/incremental/IIncrementalService$Stub;->DESCRIPTOR
Landroid/os/incremental/IIncrementalService$Stub;->TRANSACTION_isFileRangeLoaded
Landroid/os/incremental/IIncrementalServiceConnector$Stub;->DESCRIPTOR
Landroid/os/incremental/IStorageHealthListener$Stub;->DESCRIPTOR
Landroid/os/incremental/IncrementalManager;->mStorages
Landroid/os/storage/StorageManager;->DEBUG_ISOLATED_STORAGE_FORCE_OFF
Landroid/os/storage/StorageManager;->DEBUG_ISOLATED_STORAGE_FORCE_ON
Landroid/os/storage/StorageManager;->PROP_FUSE
Landroid/os/storage/StorageManager;->PROP_ISOLATED_STORAGE
Landroid/os/storage/StorageManager;->PROP_ISOLATED_STORAGE_SNAPSHOT
Landroid/os/storage/StorageManager;->PROP_SETTINGS_FUSE
Landroid/permission/IOnPermissionsChangeListener$Stub;->DESCRIPTOR
Landroid/permission/IPermissionController$Stub;->DESCRIPTOR
Landroid/permission/IPermissionController$Stub;->TRANSACTION_setRuntimePermissionGrantStateByDeviceAdmin
Landroid/permission/IPermissionManager$Stub;->DESCRIPTOR
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_addWhitelistedRestrictedPermission
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_checkDeviceIdentifierAccess
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_checkPermission
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_checkUidPermission
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_getAppOpPermissionPackages
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_getDefaultBrowser
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_getWhitelistedRestrictedPermissions
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_grantDefaultPermissionsToActiveLuiApp
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_grantDefaultPermissionsToEnabledCarrierApps
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_grantDefaultPermissionsToEnabledImsServices
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_grantDefaultPermissionsToEnabledTelephonyDataServices
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_isAutoRevokeWhitelisted
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_isPermissionEnforced
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_removeWhitelistedRestrictedPermission
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_resetRuntimePermissions
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_revokeDefaultPermissionsFromDisabledTelephonyDataServices
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_revokeDefaultPermissionsFromLuiApps
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_setAutoRevokeWhitelisted
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_setDefaultBrowser
Landroid/permission/IPermissionManager$Stub;->TRANSACTION_setPermissionEnforced
Landroid/permission/PermissionManager;->TAG
Landroid/permission/PermissionManager$PackageNamePermissionQuery;->uid
Landroid/provider/Settings;->JID_RESOURCE_PREFIX
Landroid/provider/Settings;->KEY_CONFIG_SET_RETURN
Landroid/provider/Settings$Global;->ALARM_MANAGER_CONSTANTS
Landroid/provider/Settings$Global;->APP_IDLE_CONSTANTS
Landroid/provider/Settings$Global;->BATTERY_SAVER_ADAPTIVE_CONSTANTS
Landroid/provider/Settings$Global;->BATTERY_SAVER_ADAPTIVE_DEVICE_SPECIFIC_CONSTANTS
Landroid/provider/Settings$Global;->DEVELOPMENT_ENABLE_SIZECOMPAT_FREEFORM
Landroid/provider/Settings$Global;->DEVICE_IDLE_CONSTANTS
Landroid/provider/Settings$Global;->ENHANCED_CONNECTIVITY_ENABLED
Landroid/provider/Settings$Global;->GAME_DRIVER_ALL_APPS
Landroid/provider/Settings$Global;->GAME_DRIVER_BLACKLIST
Landroid/provider/Settings$Global;->GAME_DRIVER_BLACKLISTS
Landroid/provider/Settings$Global;->GAME_DRIVER_OPT_IN_APPS
Landroid/provider/Settings$Global;->GAME_DRIVER_OPT_OUT_APPS
Landroid/provider/Settings$Global;->GAME_DRIVER_PRERELEASE_OPT_IN_APPS
Landroid/provider/Settings$Global;->GAME_DRIVER_SPHAL_LIBRARIES
Landroid/provider/Settings$Global;->GAME_DRIVER_WHITELIST
Landroid/provider/Settings$Global;->GLOBAL_SETTINGS_ANGLE_DEBUG_PACKAGE
Landroid/provider/Settings$Global;->GLOBAL_SETTINGS_ANGLE_GL_DRIVER_ALL_ANGLE
Landroid/provider/Settings$Global;->GLOBAL_SETTINGS_ANGLE_GL_DRIVER_SELECTION_PKGS
Landroid/provider/Settings$Global;->GLOBAL_SETTINGS_ANGLE_GL_DRIVER_SELECTION_VALUES
Landroid/provider/Settings$Global;->GLOBAL_SETTINGS_ANGLE_WHITELIST
Landroid/provider/Settings$Global;->GLOBAL_SETTINGS_SHOW_ANGLE_IN_USE_DIALOG_BOX
Landroid/provider/Settings$Global;->GNSS_SATELLITE_BLACKLIST
Landroid/provider/Settings$Global;->ISOLATED_STORAGE_LOCAL
Landroid/provider/Settings$Global;->ISOLATED_STORAGE_REMOTE
Landroid/provider/Settings$Global;->JOB_SCHEDULER_CONSTANTS
Landroid/provider/Settings$Global;->JOB_SCHEDULER_QUOTA_CONTROLLER_CONSTANTS
Landroid/provider/Settings$Global;->JOB_SCHEDULER_TIME_CONTROLLER_CONSTANTS
Landroid/provider/Settings$Global;->LOCATION_GLOBAL_KILL_SWITCH
Landroid/provider/Settings$Global;->SYS_VDSO
Landroid/provider/Settings$Global;->TRANSIENT_SETTINGS
Landroid/provider/Settings$Global;->WEBVIEW_FALLBACK_LOGIC_ENABLED
Landroid/provider/Settings$Secure;->LOCKDOWN_IN_POWER_MENU
Landroid/provider/Settings$Secure;->NOTIFICATION_NEW_INTERRUPTION_MODEL
Landroid/provider/Settings$Secure;->WINDOW_MAGNIFICATION
Landroid/providers/settings/ConfigSettingsProto;->DEX_BOOT_SETTINGS
Landroid/providers/settings/GlobalSettingsProto;->ALARM_MANAGER_CONSTANTS
Landroid/providers/settings/GlobalSettingsProto;->AUTO
Landroid/providers/settings/GlobalSettingsProto;->JOB_SCHEDULER_CONSTANTS
Landroid/providers/settings/GlobalSettingsProto;->JOB_SCHEDULER_QUOTA_CONTROLLER_CONSTANTS
Landroid/providers/settings/GlobalSettingsProto;->JOB_SCHEDULER_TIME_CONTROLLER_CONSTANTS
Landroid/providers/settings/GlobalSettingsProto$App;->IDLE_CONSTANTS
Landroid/providers/settings/GlobalSettingsProto$Auto;->TIME
Landroid/providers/settings/GlobalSettingsProto$Auto;->TIME_ZONE
Landroid/providers/settings/GlobalSettingsProto$Device;->IDLE_CONSTANTS
Landroid/providers/settings/GlobalSettingsProto$Gpu;->ANGLE_WHITELIST
Landroid/providers/settings/GlobalSettingsProto$Gpu;->GAME_DRIVER_ALL_APPS
Landroid/providers/settings/GlobalSettingsProto$Gpu;->GAME_DRIVER_BLACKLIST
Landroid/providers/settings/GlobalSettingsProto$Gpu;->GAME_DRIVER_BLACKLISTS
Landroid/providers/settings/GlobalSettingsProto$Gpu;->GAME_DRIVER_OPT_IN_APPS
Landroid/providers/settings/GlobalSettingsProto$Gpu;->GAME_DRIVER_OPT_OUT_APPS
Landroid/providers/settings/GlobalSettingsProto$Gpu;->GAME_DRIVER_PRERELEASE_OPT_IN_APPS
Landroid/providers/settings/GlobalSettingsProto$Gpu;->GAME_DRIVER_SPHAL_LIBRARIES
Landroid/providers/settings/GlobalSettingsProto$Gpu;->GAME_DRIVER_WHITELIST
Landroid/providers/settings/GlobalSettingsProto$Location;->GNSS_SATELLITE_BLACKLIST
Landroid/providers/settings/GlobalSettingsProto$Sys;->VDSO
Landroid/providers/settings/SystemSettingsProto;->DATE_FORMAT
Landroid/security/ConfirmationPrompt;->UI_OPTION_ACCESSIBILITY_INVERTED_FLAG
Landroid/security/ConfirmationPrompt;->UI_OPTION_ACCESSIBILITY_MAGNIFIED_FLAG
Landroid/security/ConfirmationPrompt;->mCallbackBinder
Landroid/security/IConfirmationPromptCallback$Stub;->DESCRIPTOR
Landroid/security/IConfirmationPromptCallback$Stub;->TRANSACTION_onConfirmationPromptCompleted
Landroid/security/IConfirmationPromptCallback$Stub$Proxy;->mRemote
Landroid/security/IConfirmationPromptCallback$Stub$Proxy;->sDefaultImpl
Landroid/security/IFileIntegrityService$Stub;->DESCRIPTOR
Landroid/security/IKeyChainService$Stub;->TRANSACTION_attestKey
Landroid/security/KeyPairGeneratorSpec;->mFlags
Landroid/security/KeyPairGeneratorSpec$Builder;->mFlags
Landroid/security/KeyStore;->CANNOT_ATTEST_IDS
Landroid/security/KeyStore;->CONFIRMATIONUI_ABORTED
Landroid/security/KeyStore;->CONFIRMATIONUI_CANCELED
Landroid/security/KeyStore;->CONFIRMATIONUI_IGNORED
Landroid/security/KeyStore;->CONFIRMATIONUI_OK
Landroid/security/KeyStore;->CONFIRMATIONUI_OPERATION_PENDING
Landroid/security/KeyStore;->CONFIRMATIONUI_SYSTEM_ERROR
Landroid/security/KeyStore;->CONFIRMATIONUI_UIERROR
Landroid/security/KeyStore;->CONFIRMATIONUI_UIERROR_MALFORMED_UTF8_ENCODING
Landroid/security/KeyStore;->CONFIRMATIONUI_UIERROR_MESSAGE_TOO_LONG
Landroid/security/KeyStore;->CONFIRMATIONUI_UIERROR_MISSING_GLYPH
Landroid/security/KeyStore;->CONFIRMATIONUI_UNEXPECTED
Landroid/security/KeyStore;->CONFIRMATIONUI_UNIMPLEMENTED
Landroid/security/KeyStore;->FLAG_CRITICAL_TO_DEVICE_ENCRYPTION
Landroid/security/KeyStore;->FLAG_ENCRYPTED
Landroid/security/KeyStore;->FLAG_NONE
Landroid/security/KeyStore;->FLAG_SOFTWARE
Landroid/security/KeyStore;->FLAG_STRONGBOX
Landroid/security/KeyStore;->HARDWARE_TYPE_UNAVAILABLE
Landroid/security/KeyStore;->KEY_ALREADY_EXISTS
Landroid/security/KeyStore;->KEY_NOT_FOUND
Landroid/security/KeyStore;->KEY_PERMANENTLY_INVALIDATED
Landroid/security/KeyStore;->LOCKED
Landroid/security/KeyStore;->OP_AUTH_NEEDED
Landroid/security/KeyStore;->PERMISSION_DENIED
Landroid/security/KeyStore;->PROTOCOL_ERROR
Landroid/security/KeyStore;->SYSTEM_ERROR
Landroid/security/KeyStore;->UNDEFINED_ACTION
Landroid/security/KeyStore;->UNINITIALIZED
Landroid/security/KeyStore;->VALUE_CORRUPTED
Landroid/security/KeyStore;->WRONG_PASSWORD
Landroid/security/KeyStore;->mBinder
Landroid/security/KeyStore;->mContext
Landroid/security/KeyStore;->mError
Landroid/security/KeyStore;->mToken
Landroid/security/KeyStore$CertificateChainPromise;->future
Landroid/security/KeyStore$ExportKeyPromise;->future
Landroid/security/KeyStore$KeyAttestationCallbackResult;->certificateChain
Landroid/security/KeyStore$KeyAttestationCallbackResult;->keystoreResponse
Landroid/security/KeyStore$KeyCharacteristicsCallbackResult;->keyCharacteristics
Landroid/security/KeyStore$KeyCharacteristicsCallbackResult;->keystoreResponse
Landroid/security/KeyStore$KeyCharacteristicsPromise;->future
Landroid/security/KeyStore$KeystoreResultPromise;->future
Landroid/security/KeyStore$OperationPromise;->future
Landroid/security/KeyStoreParameter;->mFlags
Landroid/security/KeyStoreParameter$Builder;->mFlags
Landroid/security/identity/ICredential$Stub;->DESCRIPTOR
Landroid/security/identity/ICredentialStore$Stub;->DESCRIPTOR
Landroid/security/identity/ICredentialStoreFactory$Stub;->DESCRIPTOR
Landroid/security/identity/IWritableCredential$Stub;->DESCRIPTOR
Landroid/security/keymaster/KeymasterDefs;->KM_ERROR_INVALID_RESCOPING
Landroid/security/keymaster/KeymasterDefs;->KM_TAG_ALL_APPLICATIONS
Landroid/security/keymaster/KeymasterDefs;->KM_TAG_ALL_USERS
Landroid/security/keymaster/KeymasterDefs;->KM_TAG_ASSOCIATED_DATA
Landroid/security/keymaster/KeymasterDefs;->KM_TAG_AUTH_TOKEN
Landroid/security/keymaster/KeymasterDefs;->KM_TAG_BLOB_USAGE_REQUIREMENTS
Landroid/security/keymaster/KeymasterDefs;->KM_TAG_RESCOPING_ADD
Landroid/security/keymaster/KeymasterDefs;->KM_TAG_RESCOPING_DEL
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->BLOCK_SIZE_BYTES
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->mIv
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->mIvHasBeenUsed
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->mIvRequired
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->mKeymasterBlockMode
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->mKeymasterPadding
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi;->BLOCK_SIZE_BYTES
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi;->mIv
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi;->mIvHasBeenUsed
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi;->mKeymasterBlockMode
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi;->mKeymasterPadding
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$AdditionalAuthenticationDataStream;->mKeyStore
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$AdditionalAuthenticationDataStream;->mOperationToken
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$BufferAllOutputUntilDoFinalStreamer;->mBufferedOutput
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$BufferAllOutputUntilDoFinalStreamer;->mDelegate
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$BufferAllOutputUntilDoFinalStreamer;->mProducedOutputSizeBytes
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->DEFAULT_TAG_LENGTH_BITS
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->IV_LENGTH_BYTES
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->MAX_SUPPORTED_TAG_LENGTH_BITS
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->MIN_SUPPORTED_TAG_LENGTH_BITS
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->mTagLengthBits
Landroid/security/keystore/AndroidKeyStoreBCWorkaroundProvider;->DESEDE_SYSTEM_PROPERTY
Landroid/security/keystore/AndroidKeyStoreBCWorkaroundProvider;->KEYSTORE_PRIVATE_KEY_CLASS_NAME
Landroid/security/keystore/AndroidKeyStoreBCWorkaroundProvider;->KEYSTORE_PUBLIC_KEY_CLASS_NAME
Landroid/security/keystore/AndroidKeyStoreBCWorkaroundProvider;->KEYSTORE_SECRET_KEY_CLASS_NAME
Landroid/security/keystore/AndroidKeyStoreBCWorkaroundProvider;->PACKAGE_NAME
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->mAdditionalAuthenticationDataStreamer
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->mAdditionalAuthenticationDataStreamerClosed
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->mCachedException
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->mEncrypting
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->mKey
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->mKeyStore
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->mKeymasterPurposeOverride
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->mMainDataStreamer
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->mOperationHandle
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->mOperationToken
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->mRng
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi;->mGroupSizeBits
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi;->mKeymasterDigest
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$NONE$TruncateToFieldSizeMessageStreamer;->mConsumedInputSizeBytes
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$NONE$TruncateToFieldSizeMessageStreamer;->mDelegate
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$NONE$TruncateToFieldSizeMessageStreamer;->mGroupSizeBits
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$NONE$TruncateToFieldSizeMessageStreamer;->mInputBuffer
Landroid/security/keystore/AndroidKeyStoreECPrivateKey;->mParams
Landroid/security/keystore/AndroidKeyStoreECPublicKey;->mParams
Landroid/security/keystore/AndroidKeyStoreECPublicKey;->mW
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->mChunkedStreamer
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->mKey
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->mKeyStore
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->mKeymasterDigest
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->mMacSizeBits
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->mOperationHandle
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->mOperationToken
Landroid/security/keystore/AndroidKeyStoreKey;->mAlgorithm
Landroid/security/keystore/AndroidKeyStoreKey;->mAlias
Landroid/security/keystore/AndroidKeyStoreKey;->mUid
Landroid/security/keystore/AndroidKeyStoreKeyFactorySpi;->mKeyStore
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->mDefaultKeySizeBits
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->mKeySizeBits
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->mKeyStore
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->mKeymasterAlgorithm
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->mKeymasterBlockModes
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->mKeymasterDigest
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->mKeymasterDigests
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->mKeymasterPaddings
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->mKeymasterPurposes
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->mRng
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->mSpec
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->EC_DEFAULT_KEY_SIZE
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->RSA_DEFAULT_KEY_SIZE
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->RSA_MAX_KEY_SIZE
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->RSA_MIN_KEY_SIZE
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->SUPPORTED_EC_NIST_CURVE_NAMES
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->SUPPORTED_EC_NIST_CURVE_SIZES
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mEncryptionAtRestRequired
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mEntryAlias
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mEntryUid
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mJcaKeyAlgorithm
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mKeySizeBits
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mKeyStore
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mKeymasterAlgorithm
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mKeymasterBlockModes
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mKeymasterDigests
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mKeymasterEncryptionPaddings
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mKeymasterPurposes
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mKeymasterSignaturePaddings
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mOriginalKeymasterAlgorithm
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mRSAPublicExponent
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mRng
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->mSpec
Landroid/security/keystore/AndroidKeyStoreLoadStoreParameter;->mUid
Landroid/security/keystore/AndroidKeyStoreProvider;->DESEDE_SYSTEM_PROPERTY
Landroid/security/keystore/AndroidKeyStoreProvider;->PACKAGE_NAME
Landroid/security/keystore/AndroidKeyStorePublicKey;->mEncoded
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;->mKeymasterPadding
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;->mKeymasterPaddingOverride
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;->mModulusSizeBytes
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithMGF1Padding;->MGF_ALGORITGM_MGF1
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithMGF1Padding;->mDigestOutputSizeBytes
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithMGF1Padding;->mKeymasterDigest
Landroid/security/keystore/AndroidKeyStoreRSAPrivateKey;->mModulus
Landroid/security/keystore/AndroidKeyStoreRSAPublicKey;->mModulus
Landroid/security/keystore/AndroidKeyStoreRSAPublicKey;->mPublicExponent
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi;->mKeymasterDigest
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi;->mKeymasterPadding
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$PSSPadding;->SALT_LENGTH_BYTES
Landroid/security/keystore/AndroidKeyStoreSecretKeyFactorySpi;->mKeyStore
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->mCachedException
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->mKey
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->mKeyStore
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->mMessageStreamer
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->mOperationHandle
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->mOperationToken
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->mSigning
Landroid/security/keystore/AndroidKeyStoreSpi;->NAME
Landroid/security/keystore/AndroidKeyStoreSpi;->mKeyStore
Landroid/security/keystore/AndroidKeyStoreSpi;->mUid
Landroid/security/keystore/AndroidKeyStoreSpi$KeyStoreX509Certificate;->mPrivateKeyAlias
Landroid/security/keystore/AndroidKeyStoreSpi$KeyStoreX509Certificate;->mPrivateKeyUid
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->BLOCK_SIZE_BYTES
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->mIv
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->mIvHasBeenUsed
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->mIvRequired
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->mKeymasterBlockMode
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->mKeymasterPadding
Landroid/security/keystore/ICredstoreTokenCallback$Stub;->DESCRIPTOR
Landroid/security/keystore/ICredstoreTokenCallback$Stub;->TRANSACTION_onFinished
Landroid/security/keystore/ICredstoreTokenCallback$Stub$Proxy;->mRemote
Landroid/security/keystore/ICredstoreTokenCallback$Stub$Proxy;->sDefaultImpl
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub;->DESCRIPTOR
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub;->TRANSACTION_onFinished
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub$Proxy;->mRemote
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub$Proxy;->sDefaultImpl
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub;->DESCRIPTOR
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub;->TRANSACTION_onFinished
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub$Proxy;->mRemote
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub$Proxy;->sDefaultImpl
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub;->DESCRIPTOR
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub;->TRANSACTION_onFinished
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub$Proxy;->mRemote
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub$Proxy;->sDefaultImpl
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub;->DESCRIPTOR
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub;->TRANSACTION_onFinished
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub$Proxy;->mRemote
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub$Proxy;->sDefaultImpl
Landroid/security/keystore/IKeystoreResponseCallback$Stub;->DESCRIPTOR
Landroid/security/keystore/IKeystoreResponseCallback$Stub;->TRANSACTION_onFinished
Landroid/security/keystore/IKeystoreResponseCallback$Stub$Proxy;->mRemote
Landroid/security/keystore/IKeystoreResponseCallback$Stub$Proxy;->sDefaultImpl
Landroid/security/keystore/IKeystoreService$Stub;->DESCRIPTOR
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_abort
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_addAuthToken
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_addRngEntropy
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_attestDeviceIds
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_attestKey
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_begin
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_cancelConfirmationPrompt
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_clear_uid
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_del
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_exist
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_exportKey
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_finish
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_generateKey
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_get
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_getKeyCharacteristics
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_getState
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_getTokensForCredstore
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_getmtime
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_grant
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_importKey
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_importWrappedKey
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_insert
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_isConfirmationPromptSupported
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_isEmpty
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_is_hardware_backed
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_list
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_listUidsOfAuthBoundKeys
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_lock
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_onDeviceOffBody
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_onKeyguardVisibilityChanged
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_onUserAdded
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_onUserPasswordChanged
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_onUserRemoved
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_presentConfirmationPrompt
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_ungrant
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_unlock
Landroid/security/keystore/IKeystoreService$Stub;->TRANSACTION_update
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->mRemote
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->sDefaultImpl
Landroid/security/keystore/KeyGenParameterSpec;->DEFAULT_CERT_SUBJECT
Landroid/security/keystore/KeyGenParameterSpec;->mUid
Landroid/security/keystore/KeyGenParameterSpec$Builder;->mUid
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;->DEFAULT_CHUNK_SIZE_MAX
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;->DEFAULT_CHUNK_SIZE_THRESHOLD
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;->mChunk
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;->mChunkLength
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;->mChunkSizeMax
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;->mChunkSizeThreshold
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;->mConsumedInputSizeBytes
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;->mKeyStoreStream
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;->mProducedOutputSizeBytes
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer$MainDataStream;->mKeyStore
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer$MainDataStream;->mOperationToken
Landroid/security/keystore/KeyStoreCryptoOperationUtils;->sRng
Landroid/service/appprediction/IPredictionService$Stub;->DESCRIPTOR
Landroid/service/attention/IAttentionCallback$Stub;->DESCRIPTOR
Landroid/service/attention/IAttentionService$Stub;->DESCRIPTOR
Landroid/service/autofill/IInlineSuggestionRenderService$Stub;->DESCRIPTOR
Landroid/service/autofill/IInlineSuggestionUi$Stub;->DESCRIPTOR
Landroid/service/autofill/IInlineSuggestionUiCallback$Stub;->DESCRIPTOR
Landroid/service/autofill/ISurfacePackageResultCallback$Stub;->DESCRIPTOR
Landroid/service/autofill/InlineSuggestionRenderService;->mHandler
Landroid/service/autofill/augmented/IAugmentedAutofillService$Stub;->DESCRIPTOR
Landroid/service/autofill/augmented/IFillCallback$Stub;->DESCRIPTOR
Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapperInternal;->mCarrierMessagingCallbackWrapper
Landroid/service/carrier/IApnSourceService$Stub;->DESCRIPTOR
Landroid/service/carrier/ICarrierMessagingClientService$Stub;->DESCRIPTOR
Landroid/service/contentcapture/IContentCaptureService$Stub;->DESCRIPTOR
Landroid/service/contentcapture/IContentCaptureServiceCallback$Stub;->DESCRIPTOR
Landroid/service/contentcapture/IDataShareCallback$Stub;->DESCRIPTOR
Landroid/service/contentcapture/IDataShareReadAdapter$Stub;->DESCRIPTOR
Landroid/service/contentsuggestions/IContentSuggestionsService$Stub;->DESCRIPTOR
Landroid/service/controls/IControlsActionCallback$Stub;->DESCRIPTOR
Landroid/service/controls/IControlsProvider$Stub;->DESCRIPTOR
Landroid/service/controls/IControlsSubscriber$Stub;->DESCRIPTOR
Landroid/service/controls/IControlsSubscription$Stub;->DESCRIPTOR
Landroid/service/euicc/IEuiccServiceDumpResultCallback$Stub;->DESCRIPTOR
Landroid/service/gatekeeper/IGateKeeperService$Stub;->DESCRIPTOR
Landroid/service/media/IMediaBrowserServiceCallbacks$Stub;->TRANSACTION_onLoadChildrenWithOptions
Landroid/service/quickaccesswallet/IQuickAccessWalletService$Stub;->DESCRIPTOR
Landroid/service/quickaccesswallet/IQuickAccessWalletServiceCallbacks$Stub;->DESCRIPTOR
Landroid/service/storage/IExternalStorageService$Stub;->DESCRIPTOR
Landroid/service/textclassifier/ITextClassifierCallback$Stub;->DESCRIPTOR
Landroid/service/usb/UsbServiceProto;->CONTAMINANT_STATUS_DETECTED
Landroid/service/usb/UsbServiceProto;->CONTAMINANT_STATUS_DISABLED
Landroid/service/usb/UsbServiceProto;->CONTAMINANT_STATUS_NOT_DETECTED
Landroid/service/usb/UsbServiceProto;->CONTAMINANT_STATUS_NOT_SUPPORTED
Landroid/service/usb/UsbServiceProto;->CONTAMINANT_STATUS_UNKNOWN
Landroid/service/voice/AlwaysOnHotwordDetector;->mLock
Landroid/service/wallpaper/WallpaperService;->MSG_SCALE
Landroid/service/wallpaper/WallpaperService$Engine;->mBackdropFrame
Landroid/service/wallpaper/WallpaperService$Engine;->mContentInsets
Landroid/service/wallpaper/WallpaperService$Engine;->mDisplayCutout
Landroid/service/wallpaper/WallpaperService$Engine;->mStableInsets
Landroid/service/wallpaper/WallpaperService$Engine;->mTmpSurfaceControl
Landroid/service/wallpaper/WallpaperService$Engine;->mVisibleInsets
Landroid/service/wallpaper/WallpaperService$Engine;->mWinFrame
Landroid/service/watchdog/IExplicitHealthCheckService$Stub;->DESCRIPTOR
Landroid/speech/RecognitionService$Callback;->mCallingUid
Landroid/speech/RecognitionService$StartListeningArgs;->mCallingUid
Landroid/speech/SpeechRecognizer;->mConnection
Landroid/speech/tts/TextToSpeech$Connection$SetupConnectionAsyncTask;->mName
Landroid/stats/mediametrics/Mediametrics$AudioPolicyData;->ACTIVE_DEVICE
Landroid/stats/mediametrics/Mediametrics$AudioPolicyData;->ACTIVE_PACKAGE
Landroid/stats/mediametrics/Mediametrics$AudioPolicyData;->ACTIVE_SESSION
Landroid/stats/mediametrics/Mediametrics$AudioPolicyData;->ACTIVE_SOURCE
Landroid/stats/mediametrics/Mediametrics$AudioPolicyData;->REQUEST_DEVICE
Landroid/stats/mediametrics/Mediametrics$AudioPolicyData;->REQUEST_PACKAGE
Landroid/stats/mediametrics/Mediametrics$AudioPolicyData;->REQUEST_SESSION
Landroid/stats/mediametrics/Mediametrics$AudioPolicyData;->REQUEST_SOURCE
Landroid/stats/mediametrics/Mediametrics$AudioPolicyData;->STATUS
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;->ATTRIBUTES
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;->CHANNELS
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;->CHANNEL_MASK
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;->COUNT
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;->CREATED_MILLIS
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;->DURATION_MILLIS
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;->ENCODING
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;->ERROR_CODE
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;->ERROR_FUNCTION
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;->FRAME_COUNT
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;->LATENCY
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;->PORT_ID
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;->SAMPLERATE
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;->SOURCE
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;->START_COUNT
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->ACTIVE_MILLIS
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->CHANNEL_MASK
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->DURATION_MILLIS
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->ENCODING
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->FRAMECOUNT
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->FRAME_COUNT
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->ID
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->INPUT_DEVICE
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->IO_JITTER_MEAN_MILLIS
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->IO_JITTER_STDDEV_MILLIS
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->LATENCY_MEAN_MILLIS
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->LATENCY_MILLIS_HIST
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->LATENCY_STDDEV_MILLIS
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->OUTPUT_DEVICE
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->OVERRUNS
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->PORT_ID
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->PROCESS_TIME_MEAN_MILLIS
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->PROCESS_TIME_STDDEV_MILLIS
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->SAMPLERATE
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->SAMPLE_RATE
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->TIMESTAMP_JITTER_MEAN_MILLIS
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->TIMESTAMP_JITTER_STDDEV_MILLIS
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->TYPE
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->UNDERRUNS
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->WARMUP_MILLIS_HIST
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;->WORK_MILLIS_HIST
Landroid/stats/mediametrics/Mediametrics$AudioTrackData;->ATTRIBUTES
Landroid/stats/mediametrics/Mediametrics$AudioTrackData;->CHANNEL_MASK
Landroid/stats/mediametrics/Mediametrics$AudioTrackData;->CONTENT_TYPE
Landroid/stats/mediametrics/Mediametrics$AudioTrackData;->ENCODING
Landroid/stats/mediametrics/Mediametrics$AudioTrackData;->FRAME_COUNT
Landroid/stats/mediametrics/Mediametrics$AudioTrackData;->PORT_ID
Landroid/stats/mediametrics/Mediametrics$AudioTrackData;->SAMPLE_RATE
Landroid/stats/mediametrics/Mediametrics$AudioTrackData;->STARTUP_GLITCH
Landroid/stats/mediametrics/Mediametrics$AudioTrackData;->STREAM_TYPE
Landroid/stats/mediametrics/Mediametrics$AudioTrackData;->TRACK_USAGE
Landroid/stats/mediametrics/Mediametrics$AudioTrackData;->UNDERRUN_FRAMES
Landroid/stats/mediametrics/Mediametrics$CodecData;->BITRATE
Landroid/stats/mediametrics/Mediametrics$CodecData;->BITRATE_MODE
Landroid/stats/mediametrics/Mediametrics$CodecData;->CODEC
Landroid/stats/mediametrics/Mediametrics$CodecData;->CRYPTO
Landroid/stats/mediametrics/Mediametrics$CodecData;->ENCODER
Landroid/stats/mediametrics/Mediametrics$CodecData;->ERROR_CODE
Landroid/stats/mediametrics/Mediametrics$CodecData;->ERROR_STATE
Landroid/stats/mediametrics/Mediametrics$CodecData;->HEIGHT
Landroid/stats/mediametrics/Mediametrics$CodecData;->LATENCY_AVG
Landroid/stats/mediametrics/Mediametrics$CodecData;->LATENCY_COUNT
Landroid/stats/mediametrics/Mediametrics$CodecData;->LATENCY_MAX
Landroid/stats/mediametrics/Mediametrics$CodecData;->LATENCY_MIN
Landroid/stats/mediametrics/Mediametrics$CodecData;->LATENCY_UNKNOWN
Landroid/stats/mediametrics/Mediametrics$CodecData;->LEVEL
Landroid/stats/mediametrics/Mediametrics$CodecData;->LIFETIME_MILLIS
Landroid/stats/mediametrics/Mediametrics$CodecData;->MAX_HEIGHT
Landroid/stats/mediametrics/Mediametrics$CodecData;->MAX_WIDTH
Landroid/stats/mediametrics/Mediametrics$CodecData;->MIME
Landroid/stats/mediametrics/Mediametrics$CodecData;->MODE
Landroid/stats/mediametrics/Mediametrics$CodecData;->PROFILE
Landroid/stats/mediametrics/Mediametrics$CodecData;->QUEUE_INPUT_BUFFER_ERROR
Landroid/stats/mediametrics/Mediametrics$CodecData;->QUEUE_SECURE_INPUT_BUFFER_ERROR
Landroid/stats/mediametrics/Mediametrics$CodecData;->ROTATION
Landroid/stats/mediametrics/Mediametrics$CodecData;->SECURE
Landroid/stats/mediametrics/Mediametrics$CodecData;->WIDTH
Landroid/stats/mediametrics/Mediametrics$ExtractorData;->FORMAT
Landroid/stats/mediametrics/Mediametrics$ExtractorData;->MIME
Landroid/stats/mediametrics/Mediametrics$ExtractorData;->TRACKS
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->AUDIO_CODEC
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->AUDIO_MIME
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->DATA_SOURCE_TYPE
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->DURATION_MILLIS
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->ERROR
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->ERROR_CODE
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->ERROR_STATE
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->FRAMERATE
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->FRAMES
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->FRAMES_DROPPED
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->FRAMES_DROPPED_STARTUP
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->HEIGHT
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->PLAYING_MILLIS
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->REBUFFERING_MILLIS
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->REBUFFERS
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->REBUFFER_AT_EXIT
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->VIDEO_CODEC
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->VIDEO_MIME
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->WHICH_PLAYER
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;->WIDTH
Landroid/stats/mediametrics/Mediametrics$RecorderData;->AUDIO_BITRATE
Landroid/stats/mediametrics/Mediametrics$RecorderData;->AUDIO_CHANNELS
Landroid/stats/mediametrics/Mediametrics$RecorderData;->AUDIO_MIME
Landroid/stats/mediametrics/Mediametrics$RecorderData;->AUDIO_SAMPLERATE
Landroid/stats/mediametrics/Mediametrics$RecorderData;->AUDIO_TIMESCALE
Landroid/stats/mediametrics/Mediametrics$RecorderData;->CAPTURE_FPS
Landroid/stats/mediametrics/Mediametrics$RecorderData;->CAPTURE_FPS_ENABLE
Landroid/stats/mediametrics/Mediametrics$RecorderData;->DURATION_MILLIS
Landroid/stats/mediametrics/Mediametrics$RecorderData;->FRAMERATE
Landroid/stats/mediametrics/Mediametrics$RecorderData;->HEIGHT
Landroid/stats/mediametrics/Mediametrics$RecorderData;->IFRAME_INTERVAL
Landroid/stats/mediametrics/Mediametrics$RecorderData;->MOVIE_TIMESCALE
Landroid/stats/mediametrics/Mediametrics$RecorderData;->PAUSED_COUNT
Landroid/stats/mediametrics/Mediametrics$RecorderData;->PAUSED_MILLIS
Landroid/stats/mediametrics/Mediametrics$RecorderData;->ROTATION
Landroid/stats/mediametrics/Mediametrics$RecorderData;->VIDEO_BITRATE
Landroid/stats/mediametrics/Mediametrics$RecorderData;->VIDEO_LEVEL
Landroid/stats/mediametrics/Mediametrics$RecorderData;->VIDEO_MIME
Landroid/stats/mediametrics/Mediametrics$RecorderData;->VIDEO_PROFILE
Landroid/stats/mediametrics/Mediametrics$RecorderData;->VIDEO_TIMESCALE
Landroid/stats/mediametrics/Mediametrics$RecorderData;->WIDTH
Landroid/system/suspend/ISuspendCallback$Stub;->DESCRIPTOR
Landroid/system/suspend/ISuspendCallback$Stub;->TRANSACTION_notifyWakeup
Landroid/system/suspend/ISuspendCallback$Stub$Proxy;->mRemote
Landroid/system/suspend/ISuspendCallback$Stub$Proxy;->sDefaultImpl
Landroid/system/suspend/ISuspendControlService$Stub;->DESCRIPTOR
Landroid/system/suspend/ISuspendControlService$Stub;->TRANSACTION_enableAutosuspend
Landroid/system/suspend/ISuspendControlService$Stub;->TRANSACTION_forceSuspend
Landroid/system/suspend/ISuspendControlService$Stub;->TRANSACTION_getWakeLockStats
Landroid/system/suspend/ISuspendControlService$Stub;->TRANSACTION_registerCallback
Landroid/system/suspend/ISuspendControlService$Stub$Proxy;->mRemote
Landroid/system/suspend/ISuspendControlService$Stub$Proxy;->sDefaultImpl
Landroid/system/suspend/WakeLockInfo;->CREATOR
Landroid/system/suspend/WakeLockInfo;->activeCount
Landroid/system/suspend/WakeLockInfo;->activeTime
Landroid/system/suspend/WakeLockInfo;->eventCount
Landroid/system/suspend/WakeLockInfo;->expireCount
Landroid/system/suspend/WakeLockInfo;->isActive
Landroid/system/suspend/WakeLockInfo;->isKernelWakelock
Landroid/system/suspend/WakeLockInfo;->lastChange
Landroid/system/suspend/WakeLockInfo;->maxTime
Landroid/system/suspend/WakeLockInfo;->name
Landroid/system/suspend/WakeLockInfo;->pid
Landroid/system/suspend/WakeLockInfo;->preventSuspendTime
Landroid/system/suspend/WakeLockInfo;->totalTime
Landroid/system/suspend/WakeLockInfo;->wakeupCount
Landroid/telephony/CallForwardingInfo;->STATUS_ACTIVE
Landroid/telephony/CallForwardingInfo;->STATUS_FDN_CHECK_FAILURE
Landroid/telephony/CallForwardingInfo;->STATUS_INACTIVE
Landroid/telephony/CallForwardingInfo;->STATUS_NOT_SUPPORTED
Landroid/telephony/CallForwardingInfo;->STATUS_UNKNOWN_ERROR
Landroid/telephony/CallForwardingInfo;->mStatus
Landroid/telephony/CarrierConfigManager;->KEY_NR_ENABLED_BOOL
Landroid/telephony/CdmaEriInformation;->CREATOR
Landroid/telephony/CdmaEriInformation;->ERI_FLASH
Landroid/telephony/CdmaEriInformation;->ERI_ICON_MODE_FLASH
Landroid/telephony/CdmaEriInformation;->ERI_ICON_MODE_NORMAL
Landroid/telephony/CdmaEriInformation;->ERI_OFF
Landroid/telephony/CdmaEriInformation;->ERI_ON
Landroid/telephony/CdmaEriInformation;->mIconIndex
Landroid/telephony/CdmaEriInformation;->mIconMode
Landroid/telephony/DataSpecificRegistrationInfo;->mIsUsingCarrierAggregation
Landroid/telephony/DataSpecificRegistrationInfo;->mLteVopsSupportInfo
Landroid/telephony/ICellBroadcastService$Stub;->DESCRIPTOR
Landroid/telephony/ICellInfoCallback$Stub;->DESCRIPTOR
Landroid/telephony/ModemActivityInfo;->mTransmitPowerInfo
Landroid/telephony/ModemActivityInfo$TransmitPower;->mPowerRangeInDbm
Landroid/telephony/ModemActivityInfo$TransmitPower;->mTimeInMillis
Landroid/telephony/PackageChangeReceiver;->mRegisteredContext
Landroid/telephony/PackageChangeReceiver;->sHandlerThread
Landroid/telephony/PackageChangeReceiver;->sPackageIntentFilter
Landroid/telephony/PhoneCapability;->logicalModemList
Landroid/telephony/PhoneCapability;->max5G
Landroid/telephony/PhoneCapability;->maxActiveData
Landroid/telephony/PhoneCapability;->maxActiveVoiceCalls
Landroid/telephony/PhoneCapability;->validationBeforeSwitchSupported
Landroid/telephony/PhoneStateListener;->DEFAULT_PER_PID_REGISTRATION_LIMIT
Landroid/telephony/PhoneStateListener;->FLAG_PER_PID_REGISTRATION_LIMIT
Landroid/telephony/PhoneStateListener;->PHONE_STATE_LISTENER_LIMIT_CHANGE_ID
Landroid/telephony/PhysicalChannelConfig;->mChannelNumber
Landroid/telephony/PhysicalChannelConfig;->mRat
Landroid/telephony/PhysicalChannelConfig$Builder;->mChannelNumber
Landroid/telephony/PhysicalChannelConfig$Builder;->mRat
Landroid/telephony/PinResult;->mType
Landroid/telephony/PreciseDataConnectionState;->mApn
Landroid/telephony/PreciseDataConnectionState;->mApnTypes
Landroid/telephony/ServiceState;->mLteEarfcnRsrpBoost
Landroid/telephony/SignalThresholdInfo;->SIGNAL_RSCP
Landroid/telephony/SignalThresholdInfo;->SIGNAL_RSRP
Landroid/telephony/SignalThresholdInfo;->SIGNAL_RSRQ
Landroid/telephony/SignalThresholdInfo;->SIGNAL_RSSI
Landroid/telephony/SignalThresholdInfo;->SIGNAL_RSSNR
Landroid/telephony/SignalThresholdInfo;->SIGNAL_SSRSRP
Landroid/telephony/SignalThresholdInfo;->SIGNAL_SSRSRQ
Landroid/telephony/SignalThresholdInfo;->SIGNAL_SSSINR
Landroid/telephony/SignalThresholdInfo;->mSignalMeasurement
Landroid/telephony/SmsManager;->sInstance
Landroid/telephony/SubscriptionManager;->DUMMY_SUBSCRIPTION_ID_BASE
Landroid/telephony/TelephonyManager;->CALL_WAITING_STATUS_ACTIVE
Landroid/telephony/TelephonyManager;->CALL_WAITING_STATUS_INACTIVE
Landroid/telephony/TelephonyManager;->EXTRA_APN_PROTOCOL_INT
Landroid/telephony/TelephonyManager;->EXTRA_APN_TYPE_INT
Landroid/telephony/TelephonyManager;->EXTRA_ERROR_CODE
Landroid/telephony/TelephonyManager;->INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF
Landroid/telephony/TelephonyManager;->INDICATION_UPDATE_MODE_NORMAL
Landroid/telephony/TelephonyManager;->PREFERRED_CDMA_SUBSCRIPTION
Landroid/telephony/TelephonyManager;->sKernelCmdLine
Landroid/telephony/TelephonyManager;->sLteOnCdmaProductType
Landroid/telephony/TelephonyManager;->sProductTypePattern
Landroid/telephony/data/IQualifiedNetworksService$Stub;->DESCRIPTOR
Landroid/telephony/data/IQualifiedNetworksServiceCallback$Stub;->DESCRIPTOR
Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback;->mBinder
Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback$CapabilityBinder;->mExecutor
Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback$CapabilityBinder;->mLocalCallback
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_CALL_COMPOSER
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_CHAT_BOT
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_CHAT_BOT_ROLE
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_CHAT_SESSION
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_CHAT_SESSION_STORE_FORWARD
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_CHAT_STANDALONE
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_DISCOVERY_VIA_PRESENCE
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_FILE_TRANSFER
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_FILE_TRANSFER_HTTP
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_FILE_TRANSFER_SMS
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_FILE_TRANSFER_STORE_FORWARD
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_FILE_TRANSFER_THUMBNAIL
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_GEOLOCATION_PULL
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_GEOLOCATION_PULL_FILE_TRANSFER
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_GEOLOCATION_PUSH
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_GEOLOCATION_PUSH_SMS
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_IMAGE_SHARE
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_IP_VIDEO_CALL
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_IP_VOICE_CALL
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_MMTEL_CALL_COMPOSER
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_PLUG_IN
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_POST_CALL
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_RCS_VIDEO_CALL
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_RCS_VIDEO_ONLY_CALL
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_RCS_VOICE_CALL
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_SHARED_MAP
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_SHARED_SKETCH
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_SOCIAL_PRESENCE
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_STANDALONE_CHAT_BOT
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_VIDEO_SHARE
Landroid/telephony/ims/RcsContactUceCapability;->CAPABILITY_VIDEO_SHARE_DURING_CS_CALL
Landroid/telephony/ims/RcsContactUceCapability;->mCapabilities
Landroid/telephony/ims/RcsContactUceCapability;->mExtensionTags
Landroid/telephony/ims/RcsContactUceCapability;->mServiceMap
Landroid/telephony/ims/RcsContactUceCapability$Builder;->mCapabilities
Landroid/telephony/ims/RcsUceAdapter;->ERROR_ALREADY_IN_QUEUE
Landroid/telephony/ims/RcsUceAdapter;->PUBLISH_STATE_VOLTE_PROVISION_ERROR
Landroid/telephony/ims/aidl/IImsCallSessionListener$Stub;->DESCRIPTOR
Landroid/telephony/ims/aidl/IImsCapabilityCallback$Stub;->DESCRIPTOR
Landroid/telephony/ims/aidl/IImsConfig$Stub;->DESCRIPTOR
Landroid/telephony/ims/aidl/IImsConfigCallback$Stub;->DESCRIPTOR
Landroid/telephony/ims/aidl/IImsMmTelFeature$Stub;->DESCRIPTOR
Landroid/telephony/ims/aidl/IImsMmTelListener$Stub;->DESCRIPTOR
Landroid/telephony/ims/aidl/IImsRcsController$Stub;->DESCRIPTOR
Landroid/telephony/ims/aidl/IImsRcsFeature$Stub;->DESCRIPTOR
Landroid/telephony/ims/aidl/IImsRcsFeature$Stub;->TRANSACTION_requestCapabilities
Landroid/telephony/ims/aidl/IImsRcsFeature$Stub;->TRANSACTION_respondToCapabilityRequest
Landroid/telephony/ims/aidl/IImsRcsFeature$Stub;->TRANSACTION_respondToCapabilityRequestWithError
Landroid/telephony/ims/aidl/IImsRcsFeature$Stub;->TRANSACTION_sendCapabilityRequest
Landroid/telephony/ims/aidl/IImsRcsFeature$Stub;->TRANSACTION_setListener
Landroid/telephony/ims/aidl/IImsRcsFeature$Stub;->TRANSACTION_updateCapabilities
Landroid/telephony/ims/aidl/IImsRegistration$Stub;->DESCRIPTOR
Landroid/telephony/ims/aidl/IImsRegistrationCallback$Stub;->DESCRIPTOR
Landroid/telephony/ims/aidl/IImsServiceController$Stub;->DESCRIPTOR
Landroid/telephony/ims/aidl/IImsServiceControllerListener$Stub;->DESCRIPTOR
Landroid/telephony/ims/aidl/IImsSmsListener$Stub;->DESCRIPTOR
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;->DESCRIPTOR
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;->TRANSACTION_onCapabilityRequestResponseOptions
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;->TRANSACTION_onCapabilityRequestResponsePresence
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;->TRANSACTION_onCommandUpdate
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;->TRANSACTION_onNetworkResponse
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;->TRANSACTION_onNotifyUpdateCapabilities
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;->TRANSACTION_onRemoteCapabilityRequest
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;->TRANSACTION_onUnpublish
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub$Proxy;->mRemote
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub$Proxy;->sDefaultImpl
Landroid/telephony/ims/aidl/IRcsUceControllerCallback$Stub;->DESCRIPTOR
Landroid/telephony/ims/feature/RcsFeature;->mListenerBinder
Landroid/telephony/ims/feature/RcsFeature;->mPresExchange
Landroid/telephony/ims/feature/RcsFeature;->mSipOptions
Landroid/telephony/ims/stub/ImsRegistrationImplBase;->mConnectionType
Landroid/telephony/ims/stub/RcsCapabilityExchange;->COMMAND_CODE_FETCH_ERROR
Landroid/telephony/ims/stub/RcsCapabilityExchange;->COMMAND_CODE_GENERIC_FAILURE
Landroid/telephony/ims/stub/RcsCapabilityExchange;->COMMAND_CODE_INSUFFICIENT_MEMORY
Landroid/telephony/ims/stub/RcsCapabilityExchange;->COMMAND_CODE_INVALID_PARAM
Landroid/telephony/ims/stub/RcsCapabilityExchange;->COMMAND_CODE_LOST_NETWORK_CONNECTION
Landroid/telephony/ims/stub/RcsCapabilityExchange;->COMMAND_CODE_NOT_FOUND
Landroid/telephony/ims/stub/RcsCapabilityExchange;->COMMAND_CODE_NOT_SUPPORTED
Landroid/telephony/ims/stub/RcsCapabilityExchange;->COMMAND_CODE_NO_CHANGE_IN_CAP
Landroid/telephony/ims/stub/RcsCapabilityExchange;->COMMAND_CODE_REQUEST_TIMEOUT
Landroid/telephony/ims/stub/RcsCapabilityExchange;->COMMAND_CODE_SERVICE_UNAVAILABLE
Landroid/telephony/ims/stub/RcsCapabilityExchange;->COMMAND_CODE_SERVICE_UNKNOWN
Landroid/telephony/ims/stub/RcsCapabilityExchange;->COMMAND_CODE_SUCCESS
Landroid/telephony/ims/stub/RcsCapabilityExchange;->mFeature
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->CAPABILITY_UPDATE_TRIGGER_ETAG_EXPIRED
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->CAPABILITY_UPDATE_TRIGGER_MOVE_TO_2G
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->CAPABILITY_UPDATE_TRIGGER_MOVE_TO_3G
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->CAPABILITY_UPDATE_TRIGGER_MOVE_TO_EHRPD
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->CAPABILITY_UPDATE_TRIGGER_MOVE_TO_HSPAPLUS
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->CAPABILITY_UPDATE_TRIGGER_MOVE_TO_IWLAN
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->CAPABILITY_UPDATE_TRIGGER_MOVE_TO_LTE_VOPS_DISABLED
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->CAPABILITY_UPDATE_TRIGGER_MOVE_TO_LTE_VOPS_ENABLED
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->CAPABILITY_UPDATE_TRIGGER_MOVE_TO_NR5G_VOPS_DISABLED
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->CAPABILITY_UPDATE_TRIGGER_MOVE_TO_NR5G_VOPS_ENABLED
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->CAPABILITY_UPDATE_TRIGGER_MOVE_TO_WLAN
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->CAPABILITY_UPDATE_TRIGGER_UNKNOWN
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->LOG_TAG
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->RESPONSE_FORBIDDEN
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->RESPONSE_NOT_AUTHORIZED_FOR_PRESENCE
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->RESPONSE_NOT_FOUND
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->RESPONSE_NOT_REGISTERED
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->RESPONSE_SIP_INTERVAL_TOO_SHORT
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->RESPONSE_SIP_REQUEST_TIMEOUT
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->RESPONSE_SIP_SERVICE_UNAVAILABLE
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->RESPONSE_SUBSCRIBE_GENERIC_FAILURE
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->RESPONSE_SUBSCRIBE_TOO_LARGE
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->RESPONSE_SUCCESS
Landroid/telephony/ims/stub/RcsSipOptionsImplBase;->LOG_TAG
Landroid/telephony/ims/stub/RcsSipOptionsImplBase;->RESPONSE_BAD_REQUEST
Landroid/telephony/ims/stub/RcsSipOptionsImplBase;->RESPONSE_DOES_NOT_EXIST_ANYWHERE
Landroid/telephony/ims/stub/RcsSipOptionsImplBase;->RESPONSE_GENERIC_FAILURE
Landroid/telephony/ims/stub/RcsSipOptionsImplBase;->RESPONSE_NOT_FOUND
Landroid/telephony/ims/stub/RcsSipOptionsImplBase;->RESPONSE_REQUEST_TIMEOUT
Landroid/telephony/ims/stub/RcsSipOptionsImplBase;->RESPONSE_SUCCESS
Landroid/telephony/ims/stub/RcsSipOptionsImplBase;->RESPONSE_TEMPORARILY_UNAVAILABLE
Landroid/telephony/mbms/IGroupCallCallback$Stub;->DESCRIPTOR
Landroid/telephony/mbms/IMbmsGroupCallSessionCallback$Stub;->DESCRIPTOR
Landroid/telephony/mbms/vendor/IMbmsGroupCallService$Stub;->DESCRIPTOR
Landroid/text/FontConfig$Alias;->mToName
Landroid/text/FontConfig$Family;->VARIANT_COMPACT
Landroid/text/FontConfig$Family;->VARIANT_DEFAULT
Landroid/text/FontConfig$Family;->VARIANT_ELEGANT
Landroid/text/FontConfig$Family;->mFonts
Landroid/text/FontConfig$Family;->mLanguages
Landroid/text/FontConfig$Family;->mName
Landroid/text/FontConfig$Family;->mVariant
Landroid/text/FontConfig$Font;->mAxes
Landroid/text/FontConfig$Font;->mFallbackFor
Landroid/text/FontConfig$Font;->mFontName
Landroid/text/FontConfig$Font;->mIsItalic
Landroid/text/FontConfig$Font;->mTtcIndex
Landroid/text/FontConfig$Font;->mUri
Landroid/text/FontConfig$Font;->mWeight
Landroid/text/format/Time$TimeCalculator;->zoneInfo
Landroid/text/format/TimeFormatter;->localeData
Landroid/text/format/TimeFormatter;->sLocaleData
Landroid/util/AtomicFile;->mCommitTag
Landroid/util/AtomicFile;->mStartTime
Landroid/util/FeatureFlagUtils;->DYNAMIC_SYSTEM
Landroid/util/FeatureFlagUtils;->SCREENRECORD_LONG_PRESS
Landroid/util/FeatureFlagUtils;->SEAMLESS_TRANSFER
Landroid/util/FeatureFlagUtils;->SETTINGS_FUSE_FLAG
Landroid/util/apk/ApkSignatureSchemeV2Verifier$VerifiedSigner;->digest
Landroid/util/apk/ApkSignatureSchemeV3Verifier$VerifiedProofOfRotation;->certs
Landroid/util/apk/ApkSignatureSchemeV3Verifier$VerifiedProofOfRotation;->flagsList
Landroid/util/apk/ApkSignatureSchemeV3Verifier$VerifiedSigner;->digest
Landroid/util/apk/ApkSigningBlockUtils;->V4_CONTENT_DIGEST_ALGORITHMS
Landroid/view/Display;->mAddress
Landroid/view/Display;->mLayerStack
Landroid/view/DisplayEventReceiver;->CONFIG_CHANGED_EVENT_DISPATCH
Landroid/view/DisplayEventReceiver;->CONFIG_CHANGED_EVENT_SUPPRESS
Landroid/view/DisplayEventReceiver;->mCloseGuard
Landroid/view/DragAndDropPermissions;->mTransientToken
Landroid/view/FrameMetrics;->FRAME_INFO_FLAG_FIRST_DRAW
Landroid/view/FrameMetrics$Index;->NEWEST_INPUT_EVENT
Landroid/view/FrameMetrics$Index;->OLDEST_INPUT_EVENT
Landroid/view/IDisplayFoldListener$Stub;->DESCRIPTOR
Landroid/view/IDisplayWindowInsetsController$Stub;->DESCRIPTOR
Landroid/view/IDisplayWindowListener$Stub;->DESCRIPTOR
Landroid/view/IDisplayWindowRotationCallback$Stub;->DESCRIPTOR
Landroid/view/IDisplayWindowRotationController$Stub;->DESCRIPTOR
Landroid/view/IInputMonitorHost$Stub;->DESCRIPTOR
Landroid/view/IPinnedStackController$Stub;->DESCRIPTOR
Landroid/view/IPinnedStackController$Stub;->TRANSACTION_getDisplayRotation
Landroid/view/IPinnedStackController$Stub$Proxy;->mRemote
Landroid/view/IPinnedStackController$Stub$Proxy;->sDefaultImpl
Landroid/view/IPinnedStackListener$Stub;->DESCRIPTOR
Landroid/view/IPinnedStackListener$Stub;->TRANSACTION_onActionsChanged
Landroid/view/IPinnedStackListener$Stub;->TRANSACTION_onActivityHidden
Landroid/view/IPinnedStackListener$Stub;->TRANSACTION_onAspectRatioChanged
Landroid/view/IPinnedStackListener$Stub;->TRANSACTION_onConfigurationChanged
Landroid/view/IPinnedStackListener$Stub;->TRANSACTION_onDisplayInfoChanged
Landroid/view/IPinnedStackListener$Stub;->TRANSACTION_onImeVisibilityChanged
Landroid/view/IPinnedStackListener$Stub;->TRANSACTION_onListenerRegistered
Landroid/view/IPinnedStackListener$Stub;->TRANSACTION_onMovementBoundsChanged
Landroid/view/IPinnedStackListener$Stub$Proxy;->mRemote
Landroid/view/IPinnedStackListener$Stub$Proxy;->sDefaultImpl
Landroid/view/IScrollCaptureClient$Stub;->DESCRIPTOR
Landroid/view/IScrollCaptureClient$Stub;->TRANSACTION_endCapture
Landroid/view/IScrollCaptureClient$Stub;->TRANSACTION_requestImage
Landroid/view/IScrollCaptureClient$Stub;->TRANSACTION_startCapture
Landroid/view/IScrollCaptureClient$Stub$Proxy;->mRemote
Landroid/view/IScrollCaptureClient$Stub$Proxy;->sDefaultImpl
Landroid/view/IScrollCaptureController$Stub;->DESCRIPTOR
Landroid/view/IScrollCaptureController$Stub;->TRANSACTION_onCaptureBufferSent
Landroid/view/IScrollCaptureController$Stub;->TRANSACTION_onCaptureStarted
Landroid/view/IScrollCaptureController$Stub;->TRANSACTION_onClientConnected
Landroid/view/IScrollCaptureController$Stub;->TRANSACTION_onClientUnavailable
Landroid/view/IScrollCaptureController$Stub;->TRANSACTION_onConnectionClosed
Landroid/view/IScrollCaptureController$Stub$Proxy;->mRemote
Landroid/view/IScrollCaptureController$Stub$Proxy;->sDefaultImpl
Landroid/view/ISystemGestureExclusionListener$Stub;->DESCRIPTOR
Landroid/view/IWindow$Stub;->TRANSACTION_dispatchPointerCaptureChanged
Landroid/view/IWindow$Stub;->TRANSACTION_dispatchSystemUiVisibilityChanged
Landroid/view/IWindowManager$Stub;->TRANSACTION_addWindowTokenWithOptions
Landroid/view/IWindowManager$Stub;->TRANSACTION_executeAppTransition
Landroid/view/IWindowManager$Stub;->TRANSACTION_prepareAppTransition
Landroid/view/IWindowManager$Stub;->TRANSACTION_registerPinnedStackListener
Landroid/view/IWindowManager$Stub;->TRANSACTION_setDockedStackDividerTouchRegion
Landroid/view/IWindowManager$Stub;->TRANSACTION_setForceShowSystemBars
Landroid/view/IWindowManager$Stub;->TRANSACTION_setPipVisibility
Landroid/view/IWindowManager$Stub;->TRANSACTION_setShouldShowIme
Landroid/view/IWindowManager$Stub;->TRANSACTION_shouldShowIme
Landroid/view/IWindowManager$Stub;->TRANSACTION_statusBarVisibilityChanged
Landroid/view/IWindowSession$Stub;->TRANSACTION_getDisplayFrame
Landroid/view/IWindowSession$Stub;->TRANSACTION_reparentDisplayContent
Landroid/view/IWindowSession$Stub;->TRANSACTION_setTransparentRegion
Landroid/view/ImeInsetsSourceConsumer;->mFocusedEditor
Landroid/view/ImeInsetsSourceConsumer;->mPreRenderedEditor
Landroid/view/ImeInsetsSourceConsumer;->mShowOnNextImeRender
Landroid/view/ImeInsetsSourceConsumerProto;->FOCUSED_EDITOR
Landroid/view/InputApplicationHandle;->dispatchingTimeoutNanos
Landroid/view/InputWindowHandle;->canReceiveKeys
Landroid/view/InputWindowHandle;->dispatchingTimeoutNanos
Landroid/view/InputWindowHandle;->hasFocus
Landroid/view/InsetsAnimationControlImpl;->mSideSourceMap
Landroid/view/InsetsAnimationControlImpl;->mTypeSideMap
Landroid/view/InsetsAnimationThreadControlRunner;->mState
Landroid/view/InsetsController;->ANIMATION_DURATION_HIDE_MS
Landroid/view/InsetsController;->ANIMATION_DURATION_SHOW_MS
Landroid/view/InsetsController;->SYSTEM_BARS_INTERPOLATOR
Landroid/view/InsetsController;->mLastDisplayCutout
Landroid/view/InsetsController;->mTmpRunningAnims
Landroid/view/InsetsController;->mUnmodifiableTmpRunningAnims
Landroid/view/MagnificationSpec;->MAX_POOL_SIZE
Landroid/view/MagnificationSpec;->sPool
Landroid/view/NotificationHeaderView;->NO_COLOR
Landroid/view/NotificationHeaderView;->mAppName
Landroid/view/NotificationHeaderView;->mAppOps
Landroid/view/NotificationHeaderView;->mAppOpsListener
Landroid/view/NotificationHeaderView;->mChildMinWidth
Landroid/view/NotificationHeaderView;->mContentEndMargin
Landroid/view/NotificationHeaderView;->mExpanded
Landroid/view/NotificationHeaderView;->mGravity
Landroid/view/NotificationHeaderView;->mHeaderText
Landroid/view/NotificationHeaderView;->mHeaderTextMarginEnd
Landroid/view/NotificationHeaderView;->mProfileBadge
Landroid/view/NotificationHeaderView;->mSecondaryHeaderText
Landroid/view/NotificationHeaderView;->mShowExpandButtonAtEnd
Landroid/view/NotificationHeaderView;->mShowWorkBadgeAtEnd
Landroid/view/NotificationHeaderView;->mTotalWidth
Landroid/view/NotificationHeaderView;->mTransferChip
Landroid/view/NotificationHeaderView$HeaderTouchListener;->mAppOpsRect
Landroid/view/ScrollCaptureClient;->DEFAULT_TIMEOUT
Landroid/view/ScrollCaptureClient;->TAG
Landroid/view/ScrollCaptureClient;->mCloseGuard
Landroid/view/ScrollCaptureClient;->mController
Landroid/view/ScrollCaptureClient;->mHandler
Landroid/view/ScrollCaptureClient;->mPositionInWindow
Landroid/view/ScrollCaptureClient;->mScrollBounds
Landroid/view/ScrollCaptureClient;->mSelectedTarget
Landroid/view/ScrollCaptureClient;->mSession
Landroid/view/ScrollCaptureClient;->mSurface
Landroid/view/ScrollCaptureClient;->mTimeoutAction
Landroid/view/ScrollCaptureClient;->mTimeoutMillis
Landroid/view/ScrollCaptureClient$DelayedAction;->mAction
Landroid/view/ScrollCaptureClient$DelayedAction;->mCompleted
Landroid/view/ScrollCaptureClient$DelayedAction;->mHandler
Landroid/view/ScrollCaptureClient$DelayedAction;->mToken
Landroid/view/ScrollCaptureSession;->mClient
Landroid/view/ScrollCaptureTarget;->mMatrixViewLocalToWindow
Landroid/view/ScrollCaptureTarget;->mTmpFloatArr
Landroid/view/ScrollCaptureTarget;->mTmpRect
Landroid/view/ScrollCaptureTargetResolver;->DEBUG
Landroid/view/ScrollCaptureTargetResolver;->TAG
Landroid/view/ScrollCaptureTargetResolver;->mDeadlineMillis
Landroid/view/ScrollCaptureTargetResolver;->mFinished
Landroid/view/ScrollCaptureTargetResolver;->mHandler
Landroid/view/ScrollCaptureTargetResolver;->mLock
Landroid/view/ScrollCaptureTargetResolver;->mPendingBoundsRequests
Landroid/view/ScrollCaptureTargetResolver;->mResult
Landroid/view/ScrollCaptureTargetResolver;->mStarted
Landroid/view/ScrollCaptureTargetResolver;->mTargets
Landroid/view/ScrollCaptureTargetResolver;->mTimeLimitMillis
Landroid/view/ScrollCaptureTargetResolver;->mTimeoutRunnable
Landroid/view/ScrollCaptureTargetResolver;->mWhenComplete
Landroid/view/ScrollCaptureTargetResolver$SingletonConsumer;->mAtomicRef
Landroid/view/SurfaceControl;->WINDOW_TYPE_DONT_SCREENSHOT
Landroid/view/SurfaceControl;->mReleaseStack
Landroid/view/SurfaceControl;->mSizeLock
Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;->appRequestRefreshRateMax
Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;->appRequestRefreshRateMin
Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;->defaultConfig
Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;->primaryRefreshRateMax
Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;->primaryRefreshRateMin
Landroid/view/SurfaceControl$DisplayConfig;->INVALID_DISPLAY_CONFIG_ID
Landroid/view/SurfaceControl$DisplayConfig;->appVsyncOffsetNanos
Landroid/view/SurfaceControl$DisplayConfig;->configGroup
Landroid/view/SurfaceControl$DisplayConfig;->height
Landroid/view/SurfaceControl$DisplayConfig;->presentationDeadlineNanos
Landroid/view/SurfaceControl$DisplayConfig;->refreshRate
Landroid/view/SurfaceControl$DisplayConfig;->width
Landroid/view/SurfaceControl$DisplayConfig;->xDpi
Landroid/view/SurfaceControl$DisplayConfig;->yDpi
Landroid/view/SurfaceControl$DisplayInfo;->density
Landroid/view/SurfaceControl$DisplayInfo;->deviceProductInfo
Landroid/view/SurfaceControl$DisplayInfo;->isInternal
Landroid/view/SurfaceControl$DisplayInfo;->secure
Landroid/view/SurfaceControl$ScreenshotGraphicBuffer;->mColorSpace
Landroid/view/SurfaceControl$ScreenshotGraphicBuffer;->mContainsSecureLayers
Landroid/view/SurfaceControl$ScreenshotGraphicBuffer;->mGraphicBuffer
Landroid/view/SurfaceView;->mMatrixValues
Landroid/view/SurfaceView;->mParentSurfaceGenerationId
Landroid/view/SurfaceView;->mRemoteAccessibilityEmbeddedConnection
Landroid/view/SurfaceView;->mScreenMatrixForEmbeddedHierarchy
Landroid/view/SurfaceView$RemoteAccessibilityEmbeddedConnection;->mConnection
Landroid/view/SurfaceView$RemoteAccessibilityEmbeddedConnection;->mLeashToken
Landroid/view/TextureLayer;->mFinalizer
Landroid/view/TextureLayer;->mRenderer
Landroid/view/ThreadedRenderer;->sRendererDisabled
Landroid/view/ThreadedRenderer;->sSystemRendererDisabled
Landroid/view/View;->NAVIGATION_BAR_TRANSIENT
Landroid/view/View;->NAVIGATION_BAR_TRANSLUCENT
Landroid/view/View;->NAVIGATION_BAR_TRANSPARENT
Landroid/view/View;->NAVIGATION_BAR_UNHIDE
Landroid/view/View;->STATUS_BAR_TRANSIENT
Landroid/view/View;->STATUS_BAR_TRANSLUCENT
Landroid/view/View;->STATUS_BAR_TRANSPARENT
Landroid/view/View;->STATUS_BAR_UNHIDE
Landroid/view/View;->SYSTEM_UI_TRANSPARENT
Landroid/view/View$AttachInfo;->mDisplayCutout
Landroid/view/ViewDebug$StreamingPictureCallbackHandler;->mByteStream
Landroid/view/ViewRootImpl;->NEW_INSETS_MODE_FULL
Landroid/view/ViewRootImpl;->NEW_INSETS_MODE_IME
Landroid/view/ViewRootImpl;->NEW_INSETS_MODE_NONE
Landroid/view/ViewRootImpl;->USE_NEW_INSETS_PROPERTY
Landroid/view/ViewRootImpl;->mBlastSurfaceControl
Landroid/view/ViewRootImpl;->mEnableTripleBuffering
Landroid/view/ViewRootImpl;->mNextDrawUseBLASTSyncTransaction
Landroid/view/ViewRootImpl;->mNextReportConsumeBLAST
Landroid/view/ViewRootImpl;->mPendingDisplayCutout
Landroid/view/ViewRootImpl;->mScrollCaptureClient
Landroid/view/ViewRootImpl;->mSendNextFrameToWm
Landroid/view/ViewRootImpl;->mSeq
Landroid/view/ViewRootImpl;->mTmpFrame
Landroid/view/ViewRootImpl;->mTmpRect
Landroid/view/ViewRootImpl;->sNewInsetsMode
Landroid/view/ViewRootImpl$SystemUiVisibilityInfo;->seq
Landroid/view/WindowInsets;->mCompatInsetTypes
Landroid/view/WindowManager;->TRANSIT_ACTIVITY_CLOSE
Landroid/view/WindowManager;->TRANSIT_ACTIVITY_OPEN
Landroid/view/WindowManager;->TRANSIT_ACTIVITY_RELAUNCH
Landroid/view/WindowManager;->TRANSIT_CRASHING_ACTIVITY_CLOSE
Landroid/view/WindowManager;->TRANSIT_DOCK_TASK_FROM_RECENTS
Landroid/view/WindowManager;->TRANSIT_KEYGUARD_GOING_AWAY_ON_WALLPAPER
Landroid/view/WindowManager;->TRANSIT_SHOW_SINGLE_TASK_DISPLAY
Landroid/view/WindowManager;->TRANSIT_TASK_CHANGE_WINDOWING_MODE
Landroid/view/WindowManager;->TRANSIT_TASK_CLOSE
Landroid/view/WindowManager;->TRANSIT_TASK_OPEN
Landroid/view/WindowManager;->TRANSIT_TASK_OPEN_BEHIND
Landroid/view/WindowManager;->TRANSIT_TASK_TO_BACK
Landroid/view/WindowManager;->TRANSIT_TASK_TO_FRONT
Landroid/view/WindowManager;->TRANSIT_TRANSLUCENT_ACTIVITY_CLOSE
Landroid/view/WindowManager;->TRANSIT_TRANSLUCENT_ACTIVITY_OPEN
Landroid/view/WindowManager;->TRANSIT_UNSET
Landroid/view/WindowManager;->TRANSIT_WALLPAPER_CLOSE
Landroid/view/WindowManager;->TRANSIT_WALLPAPER_INTRA_CLOSE
Landroid/view/WindowManager;->TRANSIT_WALLPAPER_INTRA_OPEN
Landroid/view/WindowManager;->TRANSIT_WALLPAPER_OPEN
Landroid/view/WindowManager$LayoutParams;->PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED
Landroid/view/WindowManager$LayoutParams;->PRIVATE_FLAG_IS_SCREEN_DECOR
Landroid/view/WindowManager$LayoutParams;->PRIVATE_FLAG_PRESERVE_GEOMETRY
Landroid/view/WindowManager$LayoutParams;->TYPE_TRUSTED_APPLICATION_OVERLAY
Landroid/view/WindowManagerGlobal;->ADD_FLAG_USE_TRIPLE_BUFFERING
Landroid/view/WindowManagerGlobal;->ADD_TOO_MANY_TOKENS
Landroid/view/WindowManagerGlobal;->RELAYOUT_DEFER_SURFACE_DESTROY
Landroid/view/accessibility/IAccessibilityEmbeddedConnection$Stub;->DESCRIPTOR
Landroid/view/accessibility/IWindowMagnificationConnection$Stub;->DESCRIPTOR
Landroid/view/accessibility/IWindowMagnificationConnectionCallback$Stub;->DESCRIPTOR
Landroid/view/autofill/IAugmentedAutofillManagerClient$Stub;->DESCRIPTOR
Landroid/view/contentcapture/ContentCaptureContext;->mTaskId
Landroid/view/contentcapture/ContentCaptureSession;->sIdGenerator
Landroid/view/contentcapture/IContentCaptureDirectManager$Stub;->DESCRIPTOR
Landroid/view/contentcapture/IContentCaptureManager$Stub;->DESCRIPTOR
Landroid/view/contentcapture/IDataShareWriteAdapter$Stub;->DESCRIPTOR
Landroid/view/inputmethod/BaseInputConnection;->mDummyMode
Landroid/view/inputmethod/EditorInfo$InitialSurroundingText;->CREATOR
Landroid/view/inputmethod/EditorInfo$InitialSurroundingText;->mSelectionEnd
Landroid/view/inputmethod/EditorInfo$InitialSurroundingText;->mSelectionHead
Landroid/view/inputmethod/EditorInfo$InitialSurroundingText;->mSurroundingText
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorProto;->CLIENT_SIDE_DUMP
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorProto;->ELAPSED_REALTIME_NANOS
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorProto$ClientSideProto;->EDITOR_INFO
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorProto$ClientSideProto;->IME_FOCUS_CONTROLLER
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorProto$ClientSideProto;->IME_INSETS_SOURCE_CONSUMER
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorProto$ClientSideProto;->INPUT_METHOD_MANAGER
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorProto$ClientSideProto;->INSETS_CONTROLLER
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorProto$ClientSideProto;->INSETS_SOURCE_CONSUMER
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorProto$ClientSideProto;->VIEW_ROOT_IMPL
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorTraceFileProto;->ENTRY
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorTraceFileProto;->INVALID
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorTraceFileProto;->MAGIC_NUMBER
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorTraceFileProto;->MAGIC_NUMBER_H
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorTraceFileProto;->MAGIC_NUMBER_L
Landroid/view/inputmethod/InputMethodManager;->MSG_APPLY_IME_VISIBILITY
Landroid/view/inputmethod/InputMethodManager;->MSG_REPORT_PRE_RENDERED
Landroid/view/inputmethod/InputMethodManager;->MSG_UPDATE_ACTIVITY_VIEW_TO_SCREEN_MATRIX
Landroid/view/inputmethod/InputMethodManager;->mActivityViewToScreenMatrix
Landroid/view/inputmethod/InputMethodManager$ControlledInputConnectionWrapper;->mParentInputMethodManager
Landroid/view/inputmethod/InputMethodManager$ImeThreadFactory;->mThreadName
Landroid/view/textservice/SpellCheckerSession;->mHandler
Landroid/view/textservice/SpellCheckerSession$SpellCheckerSessionListenerImpl;->mHandler
Landroid/widget/AnalogClock;->mAttached
Landroid/widget/Editor;->LINE_SLOP_MULTIPLIER_FOR_HANDLEVIEWS
Landroid/widget/EditorTouchState;->mIsDragCloseToVertical
Landroid/widget/Magnifier;->mDestroyLock
Landroid/widget/Magnifier;->mLeftBound
Landroid/widget/Magnifier;->mRightBound
Landroid/widget/RemoteViews;->DEFAULT_ON_CLICK_HANDLER
Landroid/widget/RemoteViews$LayoutParamAction;->LAYOUT_MARGIN_BOTTOM_DIMEN
Landroid/widget/RemoteViews$LayoutParamAction;->LAYOUT_MARGIN_END_DIMEN
Landroid/widget/RemoteViews$ReflectionAction;->BITMAP
Landroid/widget/RemoteViews$ReflectionAction;->BOOLEAN
Landroid/widget/RemoteViews$ReflectionAction;->BUNDLE
Landroid/widget/RemoteViews$ReflectionAction;->BYTE
Landroid/widget/RemoteViews$ReflectionAction;->CHAR
Landroid/widget/RemoteViews$ReflectionAction;->CHAR_SEQUENCE
Landroid/widget/RemoteViews$ReflectionAction;->COLOR_STATE_LIST
Landroid/widget/RemoteViews$ReflectionAction;->DOUBLE
Landroid/widget/RemoteViews$ReflectionAction;->FLOAT
Landroid/widget/RemoteViews$ReflectionAction;->ICON
Landroid/widget/RemoteViews$ReflectionAction;->INT
Landroid/widget/RemoteViews$ReflectionAction;->INTENT
Landroid/widget/RemoteViews$ReflectionAction;->LONG
Landroid/widget/RemoteViews$ReflectionAction;->SHORT
Landroid/widget/RemoteViews$ReflectionAction;->STRING
Landroid/widget/RemoteViews$ReflectionAction;->URI
Landroid/widget/RemoteViews$ReflectionAction;->methodName
Landroid/widget/RemoteViews$ReflectionAction;->type
Landroid/widget/RemoteViewsAdapter;->mRemoteViewsOnClickHandler
Landroid/widget/SelectionActionModeHelper$TextClassificationHelper;->TRIM_DELTA
Landroid/widget/SelectionActionModeHelper$TextClassificationHelper;->mHot
Landroid/widget/SmartSelectSprite;->CORNER_DURATION
Landroid/widget/SmartSelectSprite;->mCornerInterpolator
Landroid/widget/SpellChecker;->MIN_SENTENCE_LENGTH
Landroid/widget/SpellChecker;->SUGGESTION_SPAN_CACHE_SIZE
Landroid/widget/SpellChecker;->mIsSentenceSpellCheckSupported
Landroid/widget/SpellChecker;->mSuggestionSpanCache
Landroid/widget/SpellChecker;->mWordIterator
Landroid/window/DisplayAreaOrganizer;->IDisplayAreaOrganizerControllerSingleton
Landroid/window/IDisplayAreaOrganizer$Stub;->DESCRIPTOR
Landroid/window/IDisplayAreaOrganizerController$Stub;->DESCRIPTOR
Landroid/window/ITaskOrganizer$Stub;->DESCRIPTOR
Landroid/window/ITaskOrganizerController$Stub;->DESCRIPTOR
Landroid/window/ITaskOrganizerController$Stub;->TRANSACTION_setLaunchRoot
Landroid/window/IWindowContainerToken$Stub;->DESCRIPTOR
Landroid/window/IWindowContainerTransactionCallback$Stub;->DESCRIPTOR
Landroid/window/IWindowOrganizerController$Stub;->DESCRIPTOR
Landroid/window/IWindowOrganizerController$Stub;->TRANSACTION_takeScreenshot
Landroid/window/TaskEmbedder;->TAG
Landroid/window/TaskEmbedder;->mActivityTaskManager
Landroid/window/TaskEmbedder;->mContext
Landroid/window/TaskEmbedder;->mGuard
Landroid/window/TaskEmbedder;->mHost
Landroid/window/TaskEmbedder;->mListener
Landroid/window/TaskEmbedder;->mOpened
Landroid/window/TaskEmbedder;->mSurfaceControl
Landroid/window/TaskEmbedder;->mTransaction
Landroid/window/TaskOrganizer;->ITaskOrganizerControllerSingleton
Landroid/window/TaskOrganizerTaskEmbedder;->DEBUG
Landroid/window/TaskOrganizerTaskEmbedder;->TAG
Landroid/window/TaskOrganizerTaskEmbedder;->mPendingNotifyBoundsChanged
Landroid/window/TaskOrganizerTaskEmbedder;->mTaskInfo
Landroid/window/TaskOrganizerTaskEmbedder;->mTaskLeash
Landroid/window/TaskOrganizerTaskEmbedder;->mTaskOrganizer
Landroid/window/TaskOrganizerTaskEmbedder;->mTaskToken
Landroid/window/VirtualDisplayTaskEmbedder;->DISPLAY_NAME
Landroid/window/VirtualDisplayTaskEmbedder;->TAG
Landroid/window/VirtualDisplayTaskEmbedder;->mDisplayDensityDpi
Landroid/window/VirtualDisplayTaskEmbedder;->mForwardedInsets
Landroid/window/VirtualDisplayTaskEmbedder;->mSingleTaskInstance
Landroid/window/VirtualDisplayTaskEmbedder;->mTaskStackListener
Landroid/window/VirtualDisplayTaskEmbedder;->mTmpDisplayMetrics
Landroid/window/VirtualDisplayTaskEmbedder;->mUsePublicVirtualDisplay
Landroid/window/VirtualDisplayTaskEmbedder;->mVirtualDisplay
Lcom/android/ims/FeatureConnection;->mExecutor
Lcom/android/ims/FeatureConnection;->mListenerBinder
Lcom/android/ims/FeatureConnection;->mStatusCallback
Lcom/android/ims/FeatureConnector;->CEILING_SERVICE_RETRY_COUNT
Lcom/android/ims/FeatureConnector;->IMS_RETRY_STARTING_TIMEOUT_MS
Lcom/android/ims/FeatureConnector;->mGetServiceRunnable
Lcom/android/ims/FeatureConnector;->mNotifyStatusChangedCallback
Lcom/android/ims/FeatureConnector;->mRetryCount
Lcom/android/ims/FeatureConnector;->mRetryTimeout
Lcom/android/ims/ImsManager;->MAX_RECENT_DISCONNECT_REASONS
Lcom/android/ims/ImsManager;->mEcbm
Lcom/android/ims/ImsManager;->mExecutorFactory
Lcom/android/ims/ImsManager;->mMmTelFeatureConnection
Lcom/android/ims/ImsManager;->mMultiEndpoint
Lcom/android/ims/ImsManager;->mRecentDisconnectReasons
Lcom/android/ims/ImsManager;->mStatusCallbacks
Lcom/android/ims/ImsManager;->mUt
Lcom/android/ims/ImsManager;->sImsManagerInstances
Lcom/android/ims/ImsManager$ImsExecutorFactory;->mHandler
Lcom/android/ims/ImsManager$ImsExecutorFactory;->mThreadHandler
Lcom/android/ims/MmTelFeatureConnection;->mConfigBinder
Lcom/android/ims/RcsFeatureManager;->mRcsFeatureCallbackAdapter
Lcom/android/ims/RcsFeatureManager;->mRcsFeatureCallbacks
Lcom/android/ims/RcsFeatureManager;->mStatusCallbacks
Lcom/android/internal/BrightnessSynchronizer;->BRIGHTNESS_FLOAT_URI
Lcom/android/internal/BrightnessSynchronizer;->BRIGHTNESS_URI
Lcom/android/internal/BrightnessSynchronizer;->EPSILON
Lcom/android/internal/BrightnessSynchronizer;->MSG_UPDATE_FLOAT
Lcom/android/internal/BrightnessSynchronizer;->MSG_UPDATE_INT
Lcom/android/internal/BrightnessSynchronizer;->TAG
Lcom/android/internal/BrightnessSynchronizer;->mContext
Lcom/android/internal/BrightnessSynchronizer;->mHandler
Lcom/android/internal/BrightnessSynchronizer;->mPreferredSettingValue
Lcom/android/internal/BrightnessSynchronizer;->mWriteHistory
Lcom/android/internal/R$array;->config_jitzygoteBootImagePinnerServiceFiles
Lcom/android/internal/R$array;->config_tether_wifi_p2p_regexs
Lcom/android/internal/R$array;->config_usbHostBlacklist
Lcom/android/internal/R$array;->config_wakeonlan_supported_interfaces
Lcom/android/internal/R$bool;->config_forceShowSystemBars
Lcom/android/internal/R$bool;->config_inflateSignalStrength
Lcom/android/internal/R$bool;->config_lidControlsDisplayFold
Lcom/android/internal/R$bool;->config_requireRadioPowerOffOnSimRefreshReset
Lcom/android/internal/R$bool;->config_tether_upstream_automatic
Lcom/android/internal/R$bool;->config_useWebViewPacProcessor
Lcom/android/internal/R$color;->notification_material_background_color
Lcom/android/internal/R$dimen;->bubble_gone_padding_end
Lcom/android/internal/R$dimen;->bubble_visible_padding_end
Lcom/android/internal/R$dimen;->conversation_badge_side_margin
Lcom/android/internal/R$dimen;->conversation_badge_side_margin_group_expanded
Lcom/android/internal/R$dimen;->conversation_badge_side_margin_group_expanded_face_pile
Lcom/android/internal/R$dimen;->conversation_expand_button_top_margin_expanded
Lcom/android/internal/R$dimen;->messaging_layout_margin_end
Lcom/android/internal/R$dimen;->notification_content_image_margin_end
Lcom/android/internal/R$dimen;->notification_expand_button_padding_top
Lcom/android/internal/R$dimen;->notification_header_height
Lcom/android/internal/R$dimen;->notification_header_icon_margin_end
Lcom/android/internal/R$dimen;->notification_large_icon_circle_padding
Lcom/android/internal/R$dimen;->notification_media_image_margin_end
Lcom/android/internal/R$dimen;->notification_media_image_max_height
Lcom/android/internal/R$dimen;->notification_media_image_max_height_low_ram
Lcom/android/internal/R$dimen;->notification_media_image_max_width
Lcom/android/internal/R$dimen;->notification_media_image_max_width_low_ram
Lcom/android/internal/R$dimen;->notification_min_content_height
Lcom/android/internal/R$dimen;->notification_reply_inset
Lcom/android/internal/R$dimen;->quick_qs_total_height
Lcom/android/internal/R$dimen;->quick_qs_total_height_with_media
Lcom/android/internal/R$id;->conversation_unread_count
Lcom/android/internal/R$id;->expand_button_inner_container
Lcom/android/internal/R$id;->header_icon_container
Lcom/android/internal/R$id;->media_seamless
Lcom/android/internal/R$id;->media_seamless_image
Lcom/android/internal/R$id;->media_seamless_text
Lcom/android/internal/R$id;->notification_content_container
Lcom/android/internal/R$id;->notification_media_elapsed_time
Lcom/android/internal/R$id;->notification_media_progress
Lcom/android/internal/R$id;->notification_media_progress_bar
Lcom/android/internal/R$id;->notification_media_seekbar_container
Lcom/android/internal/R$id;->notification_media_total_time
Lcom/android/internal/R$id;->reply_icon_action
Lcom/android/internal/R$id;->right_icon_container
Lcom/android/internal/R$id;->text_line_1
Lcom/android/internal/R$id;->work_widget_mask_frame
Lcom/android/internal/R$integer;->config_networkTransitionTimeout
Lcom/android/internal/R$layout;->notification_material_media_seekbar
Lcom/android/internal/R$string;->allow_while_in_use_permission_in_fgs
Lcom/android/internal/R$string;->config_customSessionPolicyProvider
Lcom/android/internal/R$string;->config_networkCaptivePortalServerUrl
Lcom/android/internal/R$string;->config_signalXPath
Lcom/android/internal/R$string;->gnss_nfw_notification_message_carrier
Lcom/android/internal/R$string;->gnss_nfw_notification_message_oem
Lcom/android/internal/R$string;->gnss_nfw_notification_title
Lcom/android/internal/R$string;->resolver_cant_access_personal_apps
Lcom/android/internal/R$string;->resolver_cant_access_work_apps
Lcom/android/internal/R$string;->resolver_cant_share_with_personal_apps
Lcom/android/internal/R$string;->resolver_cant_share_with_work_apps
Lcom/android/internal/R$string;->resolver_no_personal_apps_available_resolve
Lcom/android/internal/R$string;->resolver_no_personal_apps_available_share
Lcom/android/internal/R$string;->resolver_no_work_apps_available_resolve
Lcom/android/internal/R$string;->resolver_no_work_apps_available_share
Lcom/android/internal/R$style;->TextAppearance_DeviceDefault_Notification_Conversation_AppName
Lcom/android/internal/R$style;->Theme_DeviceDefault_QuickSettings
Lcom/android/internal/R$styleable;->AndroidManifestAttribution_featureId
Lcom/android/internal/app/AppPredictionServiceResolverComparator;->mAppendDirectShareEnabled
Lcom/android/internal/app/ChooserActivity;->MAX_RANKED_TARGETS
Lcom/android/internal/app/ChooserActivity;->mAppendDirectShareEnabled
Lcom/android/internal/app/ChooserActivity;->mChooserTargetRankingEnabled
Lcom/android/internal/app/ChooserActivity$ChooserGridAdapter;->MAX_TARGETS_PER_ROW_LANDSCAPE
Lcom/android/internal/app/ChooserActivity$ChooserGridAdapter;->MAX_TARGETS_PER_ROW_PORTRAIT
Lcom/android/internal/app/ChooserActivity$ChooserHandler;->CHOOSER_TARGET_RANKING_SCORE
Lcom/android/internal/app/ChooserActivity$ChooserHandler;->DEFAULT_DIRECT_SHARE_TIMEOUT_MILLIS
Lcom/android/internal/app/ChooserActivity$ChooserHandler;->mDirectShareTimeout
Lcom/android/internal/app/ChooserFlags;->USE_SHORTCUT_MANAGER_FOR_DIRECT_TARGETS
Lcom/android/internal/app/ChooserListAdapter;->DEFAULT_DIRECT_SHARE_RANKING_SCORE
Lcom/android/internal/app/ChooserListAdapter;->MAX_SERVICE_TARGETS
Lcom/android/internal/app/ChooserListAdapter;->MAX_SERVICE_TARGET_APP
Lcom/android/internal/app/ChooserListAdapter;->mAppendDirectShareEnabled
Lcom/android/internal/app/ChooserListAdapter;->mAvailableServiceTargetsNum
Lcom/android/internal/app/ChooserListAdapter;->mChooserTargetScores
Lcom/android/internal/app/ChooserListAdapter;->mParkingDirectShareTargets
Lcom/android/internal/app/ChooserListAdapter;->mPendingChooserTargetService
Lcom/android/internal/app/ChooserListAdapter;->mShortcutComponents
Lcom/android/internal/app/ChooserListAdapter;->mValidServiceTargetsNum
Lcom/android/internal/app/IAppOpsAsyncNotedCallback$Stub;->DESCRIPTOR
Lcom/android/internal/app/IAppOpsNotedCallback$Stub;->DESCRIPTOR
Lcom/android/internal/app/IAppOpsStartedCallback$Stub;->DESCRIPTOR
Lcom/android/internal/app/IBatteryStats$Stub;->TRANSACTION_noteNetworkInterfaceType
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_deleteSoundModel
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_getModelState
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_getModuleProperties
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_getParameter
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_getSoundModel
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_isRecognitionActive
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_loadGenericSoundModel
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_loadKeyphraseSoundModel
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_queryParameter
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_setParameter
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_startRecognition
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_startRecognitionForService
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_stopRecognition
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_stopRecognitionForService
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_unloadSoundModel
Lcom/android/internal/app/ISoundTriggerService$Stub;->TRANSACTION_updateSoundModel
Lcom/android/internal/app/IVoiceActionCheckCallback$Stub;->DESCRIPTOR
Lcom/android/internal/app/IVoiceInteractionManagerService$Stub;->TRANSACTION_getDspModuleProperties
Lcom/android/internal/app/IVoiceInteractionManagerService$Stub;->TRANSACTION_getParameter
Lcom/android/internal/app/IVoiceInteractionManagerService$Stub;->TRANSACTION_queryParameter
Lcom/android/internal/app/IVoiceInteractionManagerService$Stub;->TRANSACTION_setParameter
Lcom/android/internal/app/IVoiceInteractionManagerService$Stub;->TRANSACTION_startRecognition
Lcom/android/internal/app/IVoiceInteractionManagerService$Stub;->TRANSACTION_stopRecognition
Lcom/android/internal/app/NetInitiatedActivity;->VERBOSE
Lcom/android/internal/app/NetInitiatedActivity;->mNetInitiatedReceiver
Lcom/android/internal/app/PlatLogoActivity;->mBackslash
Lcom/android/internal/app/PlatLogoActivity;->mClicks
Lcom/android/internal/app/PlatLogoActivity;->mOneView
Lcom/android/internal/app/PlatLogoActivity;->mZeroView
Lcom/android/internal/app/PlatLogoActivity;->sPaint
Lcom/android/internal/app/PlatLogoActivity$BackslashDrawable;->mAnimator
Lcom/android/internal/app/PlatLogoActivity$BackslashDrawable;->mMatrix
Lcom/android/internal/app/PlatLogoActivity$BackslashDrawable;->mPaint
Lcom/android/internal/app/PlatLogoActivity$BackslashDrawable;->mShader
Lcom/android/internal/app/PlatLogoActivity$BackslashDrawable;->mTile
Lcom/android/internal/app/PlatLogoActivity$OneDrawable;->mTintColor
Lcom/android/internal/app/PlatLogoActivity$ZeroDrawable;->mTintColor
Lcom/android/internal/app/ResolverListAdapter;->mSuspendedMatrixColorFilter
Lcom/android/internal/app/ResolverListAdapter$LoadIconTask;->mTargetView
Lcom/android/internal/app/procstats/IProcessStats$Stub;->DESCRIPTOR
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->COLOR_ANIMATION_DURATION
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->TAG
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->mAlpha
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->mColorAnimation
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->mMainColor
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->mMainColorTo
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->mPaint
Lcom/android/internal/compat/CompatibilityChangeInfo;->mEnableAfterTargetSdk
Lcom/android/internal/compat/IOverrideValidator$Stub;->DESCRIPTOR
Lcom/android/internal/compat/IPlatformCompat$Stub;->DESCRIPTOR
Lcom/android/internal/compat/IPlatformCompatNative$Stub;->DESCRIPTOR
Lcom/android/internal/compat/OverrideAllowedState;->PACKAGE_DOES_NOT_EXIST
Lcom/android/internal/config/sysui/SystemUiDeviceConfigFlags;->COMPACT_MEDIA_SEEKBAR_ENABLED
Lcom/android/internal/config/sysui/SystemUiDeviceConfigFlags;->PIP_USER_RESIZE
Lcom/android/internal/config/sysui/SystemUiDeviceConfigFlags;->SCREENSHOT_SCROLLING_ENABLED
Lcom/android/internal/content/PackageHelper;->RECOMMEND_FAILED_VERSION_DOWNGRADE
Lcom/android/internal/content/PackageHelper;->RECOMMEND_FAILED_WRONG_INSTALLED_VERSION
Lcom/android/internal/graphics/palette/ColorCutQuantizer;->mFilters
Lcom/android/internal/graphics/palette/Palette;->LOG_TIMINGS
Lcom/android/internal/graphics/palette/Palette;->MIN_CONTRAST_BODY_TEXT
Lcom/android/internal/graphics/palette/Palette;->MIN_CONTRAST_TITLE_TEXT
Lcom/android/internal/graphics/palette/Palette;->mSelectedSwatches
Lcom/android/internal/graphics/palette/Palette;->mTargets
Lcom/android/internal/graphics/palette/Palette;->mUsedColors
Lcom/android/internal/graphics/palette/Palette$Builder;->mFilters
Lcom/android/internal/graphics/palette/Palette$Builder;->mTargets
Lcom/android/internal/graphics/palette/Palette$Swatch;->mBlue
Lcom/android/internal/graphics/palette/Palette$Swatch;->mBodyTextColor
Lcom/android/internal/graphics/palette/Palette$Swatch;->mGeneratedTextColors
Lcom/android/internal/graphics/palette/Palette$Swatch;->mGreen
Lcom/android/internal/graphics/palette/Palette$Swatch;->mHsl
Lcom/android/internal/graphics/palette/Palette$Swatch;->mRed
Lcom/android/internal/graphics/palette/Palette$Swatch;->mRgb
Lcom/android/internal/graphics/palette/Palette$Swatch;->mTitleTextColor
Lcom/android/internal/graphics/palette/Target;->DARK_MUTED
Lcom/android/internal/graphics/palette/Target;->DARK_VIBRANT
Lcom/android/internal/graphics/palette/Target;->INDEX_MAX
Lcom/android/internal/graphics/palette/Target;->INDEX_MIN
Lcom/android/internal/graphics/palette/Target;->INDEX_TARGET
Lcom/android/internal/graphics/palette/Target;->INDEX_WEIGHT_LUMA
Lcom/android/internal/graphics/palette/Target;->INDEX_WEIGHT_POP
Lcom/android/internal/graphics/palette/Target;->INDEX_WEIGHT_SAT
Lcom/android/internal/graphics/palette/Target;->LIGHT_MUTED
Lcom/android/internal/graphics/palette/Target;->LIGHT_VIBRANT
Lcom/android/internal/graphics/palette/Target;->MAX_DARK_LUMA
Lcom/android/internal/graphics/palette/Target;->MAX_MUTED_SATURATION
Lcom/android/internal/graphics/palette/Target;->MAX_NORMAL_LUMA
Lcom/android/internal/graphics/palette/Target;->MIN_LIGHT_LUMA
Lcom/android/internal/graphics/palette/Target;->MIN_NORMAL_LUMA
Lcom/android/internal/graphics/palette/Target;->MIN_VIBRANT_SATURATION
Lcom/android/internal/graphics/palette/Target;->MUTED
Lcom/android/internal/graphics/palette/Target;->TARGET_DARK_LUMA
Lcom/android/internal/graphics/palette/Target;->TARGET_LIGHT_LUMA
Lcom/android/internal/graphics/palette/Target;->TARGET_MUTED_SATURATION
Lcom/android/internal/graphics/palette/Target;->TARGET_NORMAL_LUMA
Lcom/android/internal/graphics/palette/Target;->TARGET_VIBRANT_SATURATION
Lcom/android/internal/graphics/palette/Target;->VIBRANT
Lcom/android/internal/graphics/palette/Target;->WEIGHT_LUMA
Lcom/android/internal/graphics/palette/Target;->WEIGHT_SATURATION
Lcom/android/internal/graphics/palette/Target;->mIsExclusive
Lcom/android/internal/graphics/palette/Target;->mLightnessTargets
Lcom/android/internal/graphics/palette/Target;->mSaturationTargets
Lcom/android/internal/graphics/palette/Target;->mWeights
Lcom/android/internal/infra/AbstractRemoteService;->mBinding
Lcom/android/internal/infra/IAndroidFuture$Stub;->DESCRIPTOR
Lcom/android/internal/infra/ServiceConnector$Impl;->mUserId
Lcom/android/internal/infra/ThrottledRunnable;->mHandler
Lcom/android/internal/infra/ThrottledRunnable;->mIntervalMillis
Lcom/android/internal/infra/ThrottledRunnable;->mLock
Lcom/android/internal/infra/ThrottledRunnable;->mRunnable
Lcom/android/internal/infra/ThrottledRunnable;->mScheduledUptimeMillis
Lcom/android/internal/inputmethod/CancellationGroup$Completable$Int;->mValue
Lcom/android/internal/inputmethod/CancellationGroup$Completable$ValueBase;->mHasValue
Lcom/android/internal/inputmethod/CancellationGroup$Completable$ValueBase;->mLatch
Lcom/android/internal/inputmethod/CancellationGroup$Completable$ValueBase;->mParentGroup
Lcom/android/internal/inputmethod/CancellationGroup$Completable$ValueBase;->mValueLock
Lcom/android/internal/inputmethod/CancellationGroup$Completable$Values;->mValue
Lcom/android/internal/inputmethod/ICharSequenceResultCallback$Stub;->DESCRIPTOR
Lcom/android/internal/inputmethod/IExtractedTextResultCallback$Stub;->DESCRIPTOR
Lcom/android/internal/inputmethod/IInputContentUriToken$Stub;->DESCRIPTOR
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub;->DESCRIPTOR
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub;->TRANSACTION_applyImeVisibility
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub;->TRANSACTION_notifyUserAction
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub;->TRANSACTION_reportFullscreenMode
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub;->TRANSACTION_reportPreRendered
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub;->TRANSACTION_reportStartInput
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub;->TRANSACTION_setImeWindowStatus
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub;->TRANSACTION_updateStatusIcon
Lcom/android/internal/inputmethod/IIntResultCallback$Stub;->DESCRIPTOR
Lcom/android/internal/inputmethod/IMultiClientInputMethod$Stub;->DESCRIPTOR
Lcom/android/internal/inputmethod/IMultiClientInputMethodPrivilegedOperations$Stub;->DESCRIPTOR
Lcom/android/internal/inputmethod/IMultiClientInputMethodSession$Stub;->DESCRIPTOR
Lcom/android/internal/inputmethod/StartInputReason;->WINDOW_FOCUS_GAIN_REPORT_ONLY
Lcom/android/internal/location/GpsNetInitiatedHandler;->ACTION_NI_VERIFY
Lcom/android/internal/location/ILocationProvider$Stub;->DESCRIPTOR
Lcom/android/internal/location/ILocationProvider$Stub;->TRANSACTION_sendExtraCommand
Lcom/android/internal/location/ILocationProvider$Stub;->TRANSACTION_setLocationProviderManager
Lcom/android/internal/location/ILocationProvider$Stub;->TRANSACTION_setRequest
Lcom/android/internal/location/ILocationProvider$Stub$Proxy;->mRemote
Lcom/android/internal/location/ILocationProvider$Stub$Proxy;->sDefaultImpl
Lcom/android/internal/location/ILocationProviderManager$Stub;->DESCRIPTOR
Lcom/android/internal/location/ILocationProviderManager$Stub;->TRANSACTION_onReportLocation
Lcom/android/internal/location/ILocationProviderManager$Stub;->TRANSACTION_onSetAdditionalProviderPackages
Lcom/android/internal/location/ILocationProviderManager$Stub;->TRANSACTION_onSetAllowed
Lcom/android/internal/location/ILocationProviderManager$Stub;->TRANSACTION_onSetProperties
Lcom/android/internal/location/ILocationProviderManager$Stub$Proxy;->mRemote
Lcom/android/internal/location/ILocationProviderManager$Stub$Proxy;->sDefaultImpl
Lcom/android/internal/location/ProviderProperties;->CREATOR
Lcom/android/internal/location/ProviderProperties;->mAccuracy
Lcom/android/internal/location/ProviderProperties;->mHasMonetaryCost
Lcom/android/internal/location/ProviderProperties;->mPowerRequirement
Lcom/android/internal/location/ProviderProperties;->mRequiresCell
Lcom/android/internal/location/ProviderProperties;->mRequiresNetwork
Lcom/android/internal/location/ProviderProperties;->mRequiresSatellite
Lcom/android/internal/location/ProviderProperties;->mSupportsAltitude
Lcom/android/internal/location/ProviderProperties;->mSupportsBearing
Lcom/android/internal/location/ProviderProperties;->mSupportsSpeed
Lcom/android/internal/location/ProviderRequest;->CREATOR
Lcom/android/internal/location/ProviderRequest;->EMPTY_REQUEST
Lcom/android/internal/location/ProviderRequest;->interval
Lcom/android/internal/location/ProviderRequest;->locationRequests
Lcom/android/internal/location/ProviderRequest;->locationSettingsIgnored
Lcom/android/internal/location/ProviderRequest;->lowPowerMode
Lcom/android/internal/location/ProviderRequest;->reportLocation
Lcom/android/internal/location/ProviderRequest;->workSource
Lcom/android/internal/location/ProviderRequest$Builder;->mInterval
Lcom/android/internal/location/ProviderRequest$Builder;->mLocationRequests
Lcom/android/internal/location/ProviderRequest$Builder;->mLocationSettingsIgnored
Lcom/android/internal/location/ProviderRequest$Builder;->mLowPowerMode
Lcom/android/internal/location/ProviderRequest$Builder;->mWorkSource
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->DEFAULT_TIME_BETWEEN_FIXES_MILLISECS
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->GPS_SIGNAL_QUALITY_GOOD
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->GPS_SIGNAL_QUALITY_POOR
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->GPS_SIGNAL_QUALITY_UNKNOWN
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->HZ_PER_MHZ
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->L5_CARRIER_FREQ_RANGE_HIGH_HZ
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->L5_CARRIER_FREQ_RANGE_LOW_HZ
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->NUM_GPS_SIGNAL_QUALITY_LEVELS
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->TAG
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mConstellationTypes
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mGnssPowerMetrics
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mL5SvStatusReports
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mL5SvStatusReportsUsedInFix
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mL5TopFourAverageCn0DbmHzReportsStatistics
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mLocationFailureReportsStatistics
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mLocationFailureStatistics
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mLogStartInElapsedRealTime
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mNumL5SvStatus
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mNumL5SvStatusUsedInFix
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mNumSvStatus
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mNumSvStatusUsedInFix
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mPositionAccuracyMeterStatistics
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mPositionAccuracyMetersReportsStatistics
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mStatsManager
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mSvStatusReports
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mSvStatusReportsUsedInFix
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mTimeToFirstFixMilliSReportsStatistics
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mTimeToFirstFixSecStatistics
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mTopFourAverageCn0DbmHzReportsStatistics
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mTopFourAverageCn0Statistics
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->mTopFourAverageCn0StatisticsL5
Lcom/android/internal/location/gnssmetrics/GnssMetrics$GnssPowerMetrics;->POOR_TOP_FOUR_AVG_CN0_THRESHOLD_DB_HZ
Lcom/android/internal/location/gnssmetrics/GnssMetrics$GnssPowerMetrics;->REPORTING_THRESHOLD_DB_HZ
Lcom/android/internal/location/gnssmetrics/GnssMetrics$GnssPowerMetrics;->mBatteryStats
Lcom/android/internal/location/gnssmetrics/GnssMetrics$GnssPowerMetrics;->mLastAverageCn0
Lcom/android/internal/location/gnssmetrics/GnssMetrics$GnssPowerMetrics;->mLastSignalLevel
Lcom/android/internal/location/gnssmetrics/GnssMetrics$Statistics;->mCount
Lcom/android/internal/location/gnssmetrics/GnssMetrics$Statistics;->mLongSum
Lcom/android/internal/location/gnssmetrics/GnssMetrics$Statistics;->mSum
Lcom/android/internal/location/gnssmetrics/GnssMetrics$Statistics;->mSumSquare
Lcom/android/internal/messages/nano/SystemMessageProto$SystemMessage;->NOTE_GNSS_NFW_LOCATION_ACCESS
Lcom/android/internal/net/VpnInfo;->CREATOR
Lcom/android/internal/net/VpnInfo;->ownerUid
Lcom/android/internal/net/VpnInfo;->underlyingIfaces
Lcom/android/internal/net/VpnInfo;->vpnIface
Lcom/android/internal/os/BatteryStatsHelper;->mBluetoothPowerCalculator
Lcom/android/internal/os/BatteryStatsHelper;->mBluetoothSippers
Lcom/android/internal/os/BatteryStatsHelper;->mCameraPowerCalculator
Lcom/android/internal/os/BatteryStatsHelper;->mCpuPowerCalculator
Lcom/android/internal/os/BatteryStatsHelper;->mFlashlightPowerCalculator
Lcom/android/internal/os/BatteryStatsHelper;->mHasBluetoothPowerReporting
Lcom/android/internal/os/BatteryStatsHelper;->mHasWifiPowerReporting
Lcom/android/internal/os/BatteryStatsHelper;->mMediaPowerCalculator
Lcom/android/internal/os/BatteryStatsHelper;->mMemoryPowerCalculator
Lcom/android/internal/os/BatteryStatsHelper;->mMobileRadioPowerCalculator
Lcom/android/internal/os/BatteryStatsHelper;->mSensorPowerCalculator
Lcom/android/internal/os/BatteryStatsHelper;->mTypeBatteryRealtimeUs
Lcom/android/internal/os/BatteryStatsHelper;->mTypeBatteryUptimeUs
Lcom/android/internal/os/BatteryStatsHelper;->mUserSippers
Lcom/android/internal/os/BatteryStatsHelper;->mWakelockPowerCalculator
Lcom/android/internal/os/BatteryStatsHelper;->mWifiPowerCalculator
Lcom/android/internal/os/BatteryStatsHelper;->mWifiSippers
Lcom/android/internal/os/BatteryStatsImpl;->USE_OLD_HISTORY
Lcom/android/internal/os/BatteryStatsImpl;->mCpuTimeReadsTrackingStartTime
Lcom/android/internal/os/BatteryStatsImpl;->mCurStepCpuSystemTime
Lcom/android/internal/os/BatteryStatsImpl;->mCurStepCpuUserTime
Lcom/android/internal/os/BatteryStatsImpl;->mCurStepStatIOWaitTime
Lcom/android/internal/os/BatteryStatsImpl;->mCurStepStatIdleTime
Lcom/android/internal/os/BatteryStatsImpl;->mCurStepStatIrqTime
Lcom/android/internal/os/BatteryStatsImpl;->mCurStepStatSoftIrqTime
Lcom/android/internal/os/BatteryStatsImpl;->mCurStepStatSystemTime
Lcom/android/internal/os/BatteryStatsImpl;->mCurStepStatUserTime
Lcom/android/internal/os/BatteryStatsImpl;->mDailyStartTime
Lcom/android/internal/os/BatteryStatsImpl;->mEstimatedBatteryCapacity
Lcom/android/internal/os/BatteryStatsImpl;->mHistoryBaseTime
Lcom/android/internal/os/BatteryStatsImpl;->mHistoryReadTmp
Lcom/android/internal/os/BatteryStatsImpl;->mIteratingHistory
Lcom/android/internal/os/BatteryStatsImpl;->mLastHistoryElapsedRealtime
Lcom/android/internal/os/BatteryStatsImpl;->mLastIdleTimeStart
Lcom/android/internal/os/BatteryStatsImpl;->mLastStepCpuSystemTime
Lcom/android/internal/os/BatteryStatsImpl;->mLastStepCpuUserTime
Lcom/android/internal/os/BatteryStatsImpl;->mLastStepStatIOWaitTime
Lcom/android/internal/os/BatteryStatsImpl;->mLastStepStatIdleTime
Lcom/android/internal/os/BatteryStatsImpl;->mLastStepStatIrqTime
Lcom/android/internal/os/BatteryStatsImpl;->mLastStepStatSoftIrqTime
Lcom/android/internal/os/BatteryStatsImpl;->mLastStepStatSystemTime
Lcom/android/internal/os/BatteryStatsImpl;->mLastStepStatUserTime
Lcom/android/internal/os/BatteryStatsImpl;->mLastWriteTime
Lcom/android/internal/os/BatteryStatsImpl;->mLongestFullIdleTime
Lcom/android/internal/os/BatteryStatsImpl;->mLongestLightIdleTime
Lcom/android/internal/os/BatteryStatsImpl;->mMaxLearnedBatteryCapacity
Lcom/android/internal/os/BatteryStatsImpl;->mMinLearnedBatteryCapacity
Lcom/android/internal/os/BatteryStatsImpl;->mMobileRadioActiveStartTime
Lcom/android/internal/os/BatteryStatsImpl;->mNextMaxDailyDeadline
Lcom/android/internal/os/BatteryStatsImpl;->mNextMinDailyDeadline
Lcom/android/internal/os/BatteryStatsImpl;->mRailEnergyDataCallback
Lcom/android/internal/os/BatteryStatsImpl;->mReadHistoryChars
Lcom/android/internal/os/BatteryStatsImpl;->mReadHistoryStrings
Lcom/android/internal/os/BatteryStatsImpl;->mReadHistoryUids
Lcom/android/internal/os/BatteryStatsImpl;->mRealtime
Lcom/android/internal/os/BatteryStatsImpl;->mRealtimeStart
Lcom/android/internal/os/BatteryStatsImpl;->mStartClockTime
Lcom/android/internal/os/BatteryStatsImpl;->mTrackRunningHistoryElapsedRealtime
Lcom/android/internal/os/BatteryStatsImpl;->mTrackRunningHistoryUptime
Lcom/android/internal/os/BatteryStatsImpl;->mUptime
Lcom/android/internal/os/BatteryStatsImpl;->mUptimeStart
Lcom/android/internal/os/BatteryStatsImpl$BatchTimer;->mLastAddedDuration
Lcom/android/internal/os/BatteryStatsImpl$BatchTimer;->mLastAddedTime
Lcom/android/internal/os/BatteryStatsImpl$OverflowArrayMap;->mLastCleanupTime
Lcom/android/internal/os/BatteryStatsImpl$OverflowArrayMap;->mLastClearTime
Lcom/android/internal/os/BatteryStatsImpl$OverflowArrayMap;->mLastOverflowFinishTime
Lcom/android/internal/os/BatteryStatsImpl$OverflowArrayMap;->mLastOverflowTime
Lcom/android/internal/os/BatteryStatsImpl$SamplingTimer;->mCurrentReportedTotalTime
Lcom/android/internal/os/BatteryStatsImpl$SamplingTimer;->mUnpluggedReportedTotalTime
Lcom/android/internal/os/BatteryStatsImpl$StopwatchTimer;->mAcquireTime
Lcom/android/internal/os/BatteryStatsImpl$StopwatchTimer;->mTimeout
Lcom/android/internal/os/BatteryStatsImpl$StopwatchTimer;->mUpdateTime
Lcom/android/internal/os/BatteryStatsImpl$TimeBase;->mPastRealtime
Lcom/android/internal/os/BatteryStatsImpl$TimeBase;->mPastUptime
Lcom/android/internal/os/BatteryStatsImpl$TimeBase;->mRealtime
Lcom/android/internal/os/BatteryStatsImpl$TimeBase;->mRealtimeStart
Lcom/android/internal/os/BatteryStatsImpl$TimeBase;->mUnpluggedRealtime
Lcom/android/internal/os/BatteryStatsImpl$TimeBase;->mUnpluggedUptime
Lcom/android/internal/os/BatteryStatsImpl$TimeBase;->mUptime
Lcom/android/internal/os/BatteryStatsImpl$TimeBase;->mUptimeStart
Lcom/android/internal/os/BatteryStatsImpl$Timer;->mTimeBeforeMark
Lcom/android/internal/os/BatteryStatsImpl$Timer;->mTotalTime
Lcom/android/internal/os/BatteryStatsImpl$Uid;->mCurStepSystemTime
Lcom/android/internal/os/BatteryStatsImpl$Uid;->mCurStepUserTime
Lcom/android/internal/os/BatteryStatsImpl$Uid;->mLastStepSystemTime
Lcom/android/internal/os/BatteryStatsImpl$Uid;->mLastStepUserTime
Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv;->mLaunchedSince
Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv;->mLaunchedTime
Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv;->mRunningSince
Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv;->mStartTime
Lcom/android/internal/os/BatteryStatsImpl$Uid$Proc;->mForegroundTime
Lcom/android/internal/os/BatteryStatsImpl$Uid$Proc;->mSystemTime
Lcom/android/internal/os/BatteryStatsImpl$Uid$Proc;->mUserTime
Lcom/android/internal/os/BatteryStatsImpl$UidToRemove;->timeAddedInQueue
Lcom/android/internal/os/BluetoothPowerCalculator;->mAppTotalPowerMah
Lcom/android/internal/os/BluetoothPowerCalculator;->mAppTotalTimeMs
Lcom/android/internal/os/CameraPowerCalculator;->mCameraPowerOnAvg
Lcom/android/internal/os/CpuPowerCalculator;->MICROSEC_IN_HR
Lcom/android/internal/os/CpuPowerCalculator;->mProfile
Lcom/android/internal/os/FlashlightPowerCalculator;->mFlashlightPowerOnAvg
Lcom/android/internal/os/IDropBoxManagerService$Stub;->TRANSACTION_add
Lcom/android/internal/os/KernelCpuUidBpfMapReader;->mTracking
Lcom/android/internal/os/MemoryPowerCalculator;->DEBUG
Lcom/android/internal/os/MemoryPowerCalculator;->powerAverages
Lcom/android/internal/os/MobileRadioPowerCalculator;->mPowerBins
Lcom/android/internal/os/MobileRadioPowerCalculator;->mPowerRadioOn
Lcom/android/internal/os/MobileRadioPowerCalculator;->mPowerScan
Lcom/android/internal/os/MobileRadioPowerCalculator;->mStats
Lcom/android/internal/os/MobileRadioPowerCalculator;->mTotalAppMobileActiveMs
Lcom/android/internal/os/RoSystemProperties;->PROPERTY_HDMI_IS_DEVICE_HDMI_CEC_SWITCH
Lcom/android/internal/os/RuntimeInit$RuntimeThreadPrioritySetter;->NICE_VALUES
Lcom/android/internal/os/SensorPowerCalculator;->mGpsPower
Lcom/android/internal/os/WakelockPowerCalculator;->mPowerWakelock
Lcom/android/internal/os/WakelockPowerCalculator;->mTotalAppWakelockTimeMs
Lcom/android/internal/os/WifiPowerCalculator;->mIdleCurrentMa
Lcom/android/internal/os/WifiPowerCalculator;->mRxCurrentMa
Lcom/android/internal/os/WifiPowerCalculator;->mTotalAppPowerDrain
Lcom/android/internal/os/WifiPowerCalculator;->mTotalAppRunningTime
Lcom/android/internal/os/WifiPowerCalculator;->mTxCurrentMa
Lcom/android/internal/os/WifiPowerEstimator;->DEBUG
Lcom/android/internal/os/WifiPowerEstimator;->TAG
Lcom/android/internal/os/WifiPowerEstimator;->mTotalAppWifiRunningTimeMs
Lcom/android/internal/os/WifiPowerEstimator;->mWifiPowerBatchScan
Lcom/android/internal/os/WifiPowerEstimator;->mWifiPowerOn
Lcom/android/internal/os/WifiPowerEstimator;->mWifiPowerPerPacket
Lcom/android/internal/os/WifiPowerEstimator;->mWifiPowerScan
Lcom/android/internal/os/Zygote;->MOUNT_EXTERNAL_FULL
Lcom/android/internal/os/Zygote;->MOUNT_EXTERNAL_LEGACY
Lcom/android/internal/os/Zygote;->MOUNT_EXTERNAL_READ
Lcom/android/internal/os/Zygote;->MOUNT_EXTERNAL_WRITE
Lcom/android/internal/os/Zygote;->WHITELISTED_DATA_INFO_MAP
Lcom/android/internal/os/ZygoteArguments;->mApiBlacklistExemptions
Lcom/android/internal/os/ZygoteArguments;->mWhitelistedDataInfoList
Lcom/android/internal/os/ZygoteConnection;->mSocketReader
Lcom/android/internal/os/ZygoteConnectionConstants;->MAX_ZYGOTE_ARGC
Lcom/android/internal/os/logging/MetricsLoggerWrapper;->METRIC_VALUE_DISMISSED_BY_DRAG
Lcom/android/internal/os/logging/MetricsLoggerWrapper;->METRIC_VALUE_DISMISSED_BY_TAP
Lcom/android/internal/policy/BackdropFrameRenderer;->mOldStableInsets
Lcom/android/internal/policy/BackdropFrameRenderer;->mOldSystemInsets
Lcom/android/internal/policy/BackdropFrameRenderer;->mStableInsets
Lcom/android/internal/policy/BackdropFrameRenderer;->mSystemInsets
Lcom/android/internal/policy/DecorView$ColorViewAttributes;->hideWindowFlag
Lcom/android/internal/policy/DecorView$ColorViewAttributes;->systemUiHideFlag
Lcom/android/internal/statusbar/IStatusBar$Stub;->TRANSACTION_onSystemBarAppearanceChanged
Lcom/android/internal/statusbar/IStatusBar$Stub;->TRANSACTION_topAppWindowChanged
Lcom/android/internal/statusbar/RegisterStatusBarResult;->mAppImmersive
Lcom/android/internal/telecom/ICallRedirectionAdapter$Stub;->DESCRIPTOR
Lcom/android/internal/telecom/ICallRedirectionService$Stub;->DESCRIPTOR
Lcom/android/internal/telecom/ICallScreeningAdapter$Stub;->TRANSACTION_allowCall
Lcom/android/internal/telecom/ICallScreeningAdapter$Stub;->TRANSACTION_disallowCall
Lcom/android/internal/telecom/ICallScreeningAdapter$Stub;->TRANSACTION_screenCallFurther
Lcom/android/internal/telecom/ICallScreeningAdapter$Stub;->TRANSACTION_silenceCall
Lcom/android/internal/telecom/IPhoneAccountSuggestionCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telecom/IPhoneAccountSuggestionService$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/BaseCommands;->mPreferredNetworkType
Lcom/android/internal/telephony/BasicShellCommandHandler;->DEBUG
Lcom/android/internal/telephony/BasicShellCommandHandler;->TAG
Lcom/android/internal/telephony/BasicShellCommandHandler;->mArgPos
Lcom/android/internal/telephony/BasicShellCommandHandler;->mArgs
Lcom/android/internal/telephony/BasicShellCommandHandler;->mCmd
Lcom/android/internal/telephony/BasicShellCommandHandler;->mCurArgData
Lcom/android/internal/telephony/BasicShellCommandHandler;->mErr
Lcom/android/internal/telephony/BasicShellCommandHandler;->mErrPrintWriter
Lcom/android/internal/telephony/BasicShellCommandHandler;->mFileErr
Lcom/android/internal/telephony/BasicShellCommandHandler;->mFileIn
Lcom/android/internal/telephony/BasicShellCommandHandler;->mFileOut
Lcom/android/internal/telephony/BasicShellCommandHandler;->mIn
Lcom/android/internal/telephony/BasicShellCommandHandler;->mInputStream
Lcom/android/internal/telephony/BasicShellCommandHandler;->mOut
Lcom/android/internal/telephony/BasicShellCommandHandler;->mOutPrintWriter
Lcom/android/internal/telephony/BasicShellCommandHandler;->mTarget
Lcom/android/internal/telephony/CarrierKeyDownloadManager;->MCC
Lcom/android/internal/telephony/CarrierKeyDownloadManager;->MCC_MNC_PREF_TAG
Lcom/android/internal/telephony/CarrierKeyDownloadManager;->MNC
Lcom/android/internal/telephony/CarrierKeyDownloadManager;->SEPARATOR
Lcom/android/internal/telephony/CarrierPrivilegesTracker;->mCarrierConfigCerts
Lcom/android/internal/telephony/CarrierPrivilegesTracker;->mUiccCerts
Lcom/android/internal/telephony/CarrierServiceStateTracker;->mPrefNetworkModeObserver
Lcom/android/internal/telephony/CarrierSignalAgent;->mCarrierSignalList
Lcom/android/internal/telephony/CarrierSmsUtils;->CARRIER_IMS_PACKAGE_KEY
Lcom/android/internal/telephony/DeviceStateMonitor;->EVENT_CAR_MODE_CHANGED
Lcom/android/internal/telephony/DeviceStateMonitor;->mIsCarModeOn
Lcom/android/internal/telephony/IBooleanConsumer$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/IIccPhoneBook$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/IIccPhoneBook$Stub;->TRANSACTION_updateAdnRecordsInEfByIndex
Lcom/android/internal/telephony/IIntegerConsumer$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/INumberVerificationCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/IOns$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/ISetOpportunisticDataCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_carrierActionSetMeteredApnsEnabled
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_disableLocationUpdatesForSubscriber
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_enableLocationUpdatesForSubscriber
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_getAllowedNetworkTypes
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_getCalculatedPreferredNetworkType
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_getCallStateForSlot
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_getMmTelFeatureAndListen
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_getPreferredNetworkType
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_getRcsFeatureAndListen
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_isDataAllowedInVoiceCall
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_setAllowedNetworkTypes
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_setAlwaysAllowMmsData
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_setDataAllowedDuringVoiceCall
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_setPolicyDataEnabled
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_setPreferredNetworkType
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_setRadioCapability
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_setUserDataEnabled
Lcom/android/internal/telephony/ITelephony$Stub;->TRANSACTION_updateServiceLocationForSubscriber
Lcom/android/internal/telephony/ITelephonyRegistry$Stub;->TRANSACTION_listen
Lcom/android/internal/telephony/ITelephonyRegistry$Stub;->TRANSACTION_listenForSubscriber
Lcom/android/internal/telephony/ITelephonyRegistry$Stub;->TRANSACTION_listenWithFeature
Lcom/android/internal/telephony/ITelephonyRegistry$Stub;->TRANSACTION_notifyCellLocation
Lcom/android/internal/telephony/ITelephonyRegistry$Stub;->TRANSACTION_notifyDataConnectionFailed
Lcom/android/internal/telephony/ITelephonyRegistry$Stub;->TRANSACTION_notifyPreciseDataConnectionFailed
Lcom/android/internal/telephony/IUpdateAvailableNetworksCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/IccSmsInterfaceManager;->mLock
Lcom/android/internal/telephony/IccSmsInterfaceManager;->mSms
Lcom/android/internal/telephony/IccSmsInterfaceManager;->mSmsc
Lcom/android/internal/telephony/IccSmsInterfaceManager;->mSuccess
Lcom/android/internal/telephony/InboundSmsHandler;->mLastSmsWasInjected
Lcom/android/internal/telephony/InboundSmsHandler$SmsBroadcastReceiver;->mBroadcastTimeNano
Lcom/android/internal/telephony/IndentingPrintWriter;->mCurrentIndent
Lcom/android/internal/telephony/IndentingPrintWriter;->mCurrentLength
Lcom/android/internal/telephony/IndentingPrintWriter;->mEmptyLine
Lcom/android/internal/telephony/IndentingPrintWriter;->mIndentBuilder
Lcom/android/internal/telephony/IndentingPrintWriter;->mSingleChar
Lcom/android/internal/telephony/IndentingPrintWriter;->mSingleIndent
Lcom/android/internal/telephony/IndentingPrintWriter;->mWrapLength
Lcom/android/internal/telephony/LinkCapacityEstimate;->INVALID
Lcom/android/internal/telephony/LinkCapacityEstimate;->STATUS_ACTIVE
Lcom/android/internal/telephony/LinkCapacityEstimate;->STATUS_SUSPENDED
Lcom/android/internal/telephony/LinkCapacityEstimate;->confidence
Lcom/android/internal/telephony/LinkCapacityEstimate;->downlinkCapacityKbps
Lcom/android/internal/telephony/LinkCapacityEstimate;->status
Lcom/android/internal/telephony/LinkCapacityEstimate;->uplinkCapacityKbps
Lcom/android/internal/telephony/NetworkFactory;->CMD_SET_FILTER
Lcom/android/internal/telephony/NetworkFactory;->CMD_SET_SCORE
Lcom/android/internal/telephony/NetworkFactory;->mCapabilityFilter
Lcom/android/internal/telephony/NetworkFactory;->mContext
Lcom/android/internal/telephony/NetworkFactory;->mNetworkRequests
Lcom/android/internal/telephony/NetworkFactory;->mProvider
Lcom/android/internal/telephony/NetworkFactory;->mScore
Lcom/android/internal/telephony/NetworkFactory$NetworkRequestInfo;->providerId
Lcom/android/internal/telephony/NetworkFactory$NetworkRequestInfo;->request
Lcom/android/internal/telephony/NetworkFactory$NetworkRequestInfo;->requested
Lcom/android/internal/telephony/NetworkFactory$NetworkRequestInfo;->score
Lcom/android/internal/telephony/NetworkTypeController;->ALL_EVENTS
Lcom/android/internal/telephony/NetworkTypeController;->EVENT_DATA_ACTIVITY_CHANGED
Lcom/android/internal/telephony/NetworkTypeController;->EVENT_DATA_CONNECTION_STATE_CHANGED
Lcom/android/internal/telephony/NetworkTypeController;->STATE_CONNECTED_MMWAVE
Lcom/android/internal/telephony/NetworkTypeController;->mPhoneStateListener
Lcom/android/internal/telephony/NetworkTypeController;->mTelephonyManager
Lcom/android/internal/telephony/OemHookIndication;->mRil
Lcom/android/internal/telephony/OemHookResponse;->mRil
Lcom/android/internal/telephony/PhoneConstants;->APN_TYPES
Lcom/android/internal/telephony/PhoneSubInfoController;->mAppOps
Lcom/android/internal/telephony/PhoneSwitcher;->EVENT_RADIO_AVAILABLE
Lcom/android/internal/telephony/RIL;->mDisabledOemHookServices
Lcom/android/internal/telephony/RIL;->mOemHookIndication
Lcom/android/internal/telephony/RIL;->mOemHookProxy
Lcom/android/internal/telephony/RIL;->mOemHookResponse
Lcom/android/internal/telephony/RatRatcheter;->mDataRatchetEnabled
Lcom/android/internal/telephony/RatRatcheter;->mVoiceRatchetEnabled
Lcom/android/internal/telephony/RetryManager;->MAX_SAME_APN_RETRY
Lcom/android/internal/telephony/RetryManager;->mModemSuggestedDelay
Lcom/android/internal/telephony/SMSDispatcher;->deliveryPendingList
Lcom/android/internal/telephony/SMSDispatcher$MultipartSmsSender;->mSenderCallback
Lcom/android/internal/telephony/SMSDispatcher$SmsSender;->mTracker
Lcom/android/internal/telephony/ServiceStateTracker;->ACTION_RADIO_OFF
Lcom/android/internal/telephony/ServiceStateTracker;->EVENT_GET_PREFERRED_NETWORK_TYPE
Lcom/android/internal/telephony/ServiceStateTracker;->EVENT_RESET_PREFERRED_NETWORK_TYPE
Lcom/android/internal/telephony/ServiceStateTracker;->EVENT_SET_PREFERRED_NETWORK_TYPE
Lcom/android/internal/telephony/ServiceStateTracker;->INVALID_LTE_EARFCN
Lcom/android/internal/telephony/ServiceStateTracker;->mAlarmSwitch
Lcom/android/internal/telephony/ServiceStateTracker;->mLteRsrpBoostLock
Lcom/android/internal/telephony/ServiceStateTracker;->mPowerOffDelayNeed
Lcom/android/internal/telephony/ServiceStateTracker;->mPreferredNetworkType
Lcom/android/internal/telephony/ServiceStateTracker;->mRadioOffIntent
Lcom/android/internal/telephony/ServiceStateTracker$SstSubscriptionsChangedListener;->mPreviousSubId
Lcom/android/internal/telephony/SmsBroadcastUndelivered;->mCdmaInboundSmsHandler
Lcom/android/internal/telephony/SmsBroadcastUndelivered;->mGsmInboundSmsHandler
Lcom/android/internal/telephony/WapPushOverSms;->LOCATION_SELECTION
Lcom/android/internal/telephony/WapPushOverSms;->THREAD_ID_SELECTION
Lcom/android/internal/telephony/WapPushOverSms;->mBroadcastReceiver
Lcom/android/internal/telephony/WapPushOverSms$BindServiceThread;->context
Lcom/android/internal/telephony/dataconnection/AccessNetworksManager;->EVENT_BIND_QUALIFIED_NETWORKS_SERVICE
Lcom/android/internal/telephony/dataconnection/AccessNetworksManager;->TAG
Lcom/android/internal/telephony/dataconnection/DataConnection;->EVENT_DATA_CONNECTION_OVERRIDE_CHANGED
Lcom/android/internal/telephony/dataconnection/DataConnection;->EVENT_RIL_CONNECTED
Lcom/android/internal/telephony/dataconnection/DataConnection;->mNetworkInfo
Lcom/android/internal/telephony/dataconnection/DataConnection;->mSubscriptionOverride
Lcom/android/internal/telephony/dataconnection/DcController;->mDccDefaultState
Lcom/android/internal/telephony/dataconnection/DcController;->mExecutingCarrierChange
Lcom/android/internal/telephony/dataconnection/DcController;->mPhoneStateListener
Lcom/android/internal/telephony/dataconnection/DcController;->mTelephonyManager
Lcom/android/internal/telephony/dataconnection/DcNetworkAgent;->mNetworkInfo
Lcom/android/internal/telephony/dataconnection/DcTracker;->DATA_COMPLETE_MSG_EXTRA_REQUEST_TYPE
Lcom/android/internal/telephony/dataconnection/DcTracker;->mDisconnectPendingCount
Lcom/android/internal/telephony/dataconnection/DcTracker;->mLogTagSuffix
Lcom/android/internal/telephony/dataconnection/DcTracker;->mProvisionActionName
Lcom/android/internal/telephony/dataconnection/DcTracker;->mRequestNetworkCompletionMsgs
Lcom/android/internal/telephony/dataconnection/DcTracker;->mRoamingUnmetered
Lcom/android/internal/telephony/dataconnection/TransportManager;->TAG
Lcom/android/internal/telephony/dataconnection/TransportManager;->mAvailableNetworksList
Lcom/android/internal/telephony/emergency/EmergencyNumberTracker;->mEmergencyNumberDbOtaFileInputStream
Lcom/android/internal/telephony/euicc/IAuthenticateServerCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/ICancelSessionCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IDeleteProfileCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IDisableProfileCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IEuiccCardController$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IEuiccController$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IGetAllProfilesCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IGetDefaultSmdpAddressCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IGetEuiccChallengeCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IGetEuiccInfo1Callback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IGetEuiccInfo2Callback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IGetProfileCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IGetRulesAuthTableCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IGetSmdsAddressCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IListNotificationsCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/ILoadBoundProfilePackageCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IPrepareDownloadCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IRemoveNotificationFromListCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IResetMemoryCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IRetrieveNotificationCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/IRetrieveNotificationListCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/ISetDefaultSmdpAddressCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/ISetNicknameCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/euicc/ISwitchToProfileCallback$Stub;->DESCRIPTOR
Lcom/android/internal/telephony/gsm/UsimPhoneBookManager$PbrRecord;->mMasterFileRecordNum
Lcom/android/internal/telephony/ims/ImsServiceController;->mImsFeatureBinders
Lcom/android/internal/telephony/ims/ImsServiceController;->mImsStatusCallbacks
Lcom/android/internal/telephony/ims/ImsServiceController$ImsFeatureContainer;->featureType
Lcom/android/internal/telephony/ims/ImsServiceController$ImsFeatureContainer;->mBinder
Lcom/android/internal/telephony/ims/ImsServiceController$ImsFeatureContainer;->slotId
Lcom/android/internal/telephony/imsphone/ImsPhone;->mRoaming
Lcom/android/internal/telephony/imsphone/ImsPhone$ImsDialArgs;->clirMode
Lcom/android/internal/telephony/imsphone/ImsPhone$ImsDialArgs$Builder;->mClirMode
Lcom/android/internal/telephony/imsphone/ImsPhoneCallTracker;->mImsConfigListener
Lcom/android/internal/telephony/imsphone/ImsPhoneCallTracker;->mPhoneNumberUtilsProxy
Lcom/android/internal/telephony/imsphone/ImsPhoneConnection;->mVendorCause
Lcom/android/internal/telephony/metrics/VoiceCallSessionStats;->AUDIO_CODEC_UNKNOWN
Lcom/android/internal/telephony/metrics/VoiceCallSessionStats;->CARRIER_ID_UNKNOWN
Lcom/android/internal/telephony/metrics/VoiceCallSessionStats;->mCarrierId
Lcom/android/internal/telephony/nano/PersistAtomsProto$PersistAtoms;->rawVoiceCallRatUsage
Lcom/android/internal/telephony/nano/PersistAtomsProto$PersistAtoms;->rawVoiceCallRatUsagePullTimestampMillis
Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;->_emptyArray
Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;->callCount
Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;->carrierId
Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;->rat
Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;->totalDurationMillis
Lcom/android/internal/telephony/nano/TelephonyProto$RadioAccessTechnology;->RAT_NR_NSA
Lcom/android/internal/telephony/nano/TelephonyProto$RadioAccessTechnology;->RAT_NR_SA
Lcom/android/internal/telephony/nano/TelephonyProto$RilDataCall;->iframe
Lcom/android/internal/telephony/uicc/IccRecords$OperatorPlmnInfo;->plmnNetworkNameIndex
Lcom/android/internal/telephony/uicc/IsimUiccRecords;->EVENT_APP_READY
Lcom/android/internal/telephony/uicc/IsimUiccRecords;->EVENT_ISIM_AUTHENTICATE_DONE
Lcom/android/internal/telephony/uicc/IsimUiccRecords;->mLock
Lcom/android/internal/telephony/uicc/RuimRecords;->EVENT_GET_IMSI_DONE
Lcom/android/internal/telephony/uicc/UiccPkcs15;->ID_ACRF
Lcom/android/internal/telephony/uicc/euicc/Tags;->TAG_CTX_11
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->DEFAULT_PHONE_INDEX
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->LOG_TAG
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->PROP_EVENT_START
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->READY
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->mIsPhoneReadyPending
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->mIsPhoneReadySent
Lcom/android/internal/telephony/vendor/VendorMultiSimSettingController;->LOG_TAG
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->EVENT_ALLOW_DATA_FALSE_RESPONSE
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->EVENT_ALLOW_DATA_TRUE_RESPONSE
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->EVENT_DDS_SWITCH_RESPONSE
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->EVENT_PREFERRED_SUB_VALID
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->MAX_CONNECT_FAILURE_COUNT
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->NONUSER_INITIATED_SWITCH
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->PROPERTY_TEMP_DDSSWITCH
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->USER_INITIATED_SWITCH
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mAllowDataFailure
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mBgCsCalls
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mBgImsCalls
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mDdsRequestSent
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mDdsSwitchState
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mDefaultDataPhoneId
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mFgCsCalls
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mFgImsCalls
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mImsPhones
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mManualDdsSwitch
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mNewActivePhones
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mRetryArray
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mRiCsCalls
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mRiImsCalls
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mSimStateIntentReceiver
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mSimStates
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->mWaitForDetachResponse
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher$DdsSwitchState;->DONE
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher$DdsSwitchState;->NONE
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher$DdsSwitchState;->REQUIRED
Lcom/android/internal/telephony/vendor/VendorServiceStateTracker;->ACTION_MANAGED_ROAMING_IND
Lcom/android/internal/telephony/vendor/VendorServiceStateTracker;->DBG
Lcom/android/internal/telephony/vendor/VendorServiceStateTracker;->LOG_TAG
Lcom/android/internal/telephony/vendor/VendorServiceStateTracker;->VDBG
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->ACTION_SUBSCRIPTION_RECORD_ADDED
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->DBG
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->EVENT_UICC_APPS_ENABLEMENT_DONE
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->LOG_TAG
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->NOT_PROVISIONED
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->PROVISIONED
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->SETTING_USER_PREF_DATA_SUB
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->VDBG
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->mAddSubscriptionRecordRegistrants
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->mSubscriptionHandler
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->mTelecomManager
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->mTelephonyManager
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->sNumPhones
Lcom/android/internal/telephony/vendor/VendorSubscriptionInfoUpdater;->ICCID_STRING_FOR_NO_SIM
Lcom/android/internal/telephony/vendor/VendorSubscriptionInfoUpdater;->LOG_TAG
Lcom/android/internal/telephony/vendor/VendorSubscriptionInfoUpdater;->SUPPORTED_MODEM_COUNT
Lcom/android/internal/telephony/vendor/VendorSubscriptionInfoUpdater;->mIsRecordUpdateRequired
Lcom/android/internal/telephony/vendor/VendorSubscriptionInfoUpdater;->sContext
Lcom/android/internal/telephony/vendor/VendorSubscriptionInfoUpdater;->sInstance
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->DBG
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->mContext
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->mHandler
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->mListener
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->mPhone
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->mPhoneStateListener
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->mPreviousLocation
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->mPreviousRAT
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->mSimStateReceiver
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->mTelephonyManager
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->mTransportType
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->LOG_TAG
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->MAX_PDP_REJECT_COUNT
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->mDataRejectCount
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->mDataRejectDialog
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->mDataRejectReason
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->mIccidSet
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->mPdpRejectCauseCode
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->mResetEventListener
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->mTransportType
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->mVendorDataResetEventTracker
Lcom/android/internal/util/FrameworkStatsLog;->CPU_TIME_PER_FREQ
Lcom/android/internal/util/FrameworkStatsLog;->SCHEDULED_JOB_STATE_CHANGED__STOP_REASON__STOP_REASON_CANCELLED
Lcom/android/internal/util/FrameworkStatsLog;->SCHEDULED_JOB_STATE_CHANGED__STOP_REASON__STOP_REASON_CONSTRAINTS_NOT_SATISFIED
Lcom/android/internal/util/FrameworkStatsLog;->SCHEDULED_JOB_STATE_CHANGED__STOP_REASON__STOP_REASON_DEVICE_IDLE
Lcom/android/internal/util/FrameworkStatsLog;->SCHEDULED_JOB_STATE_CHANGED__STOP_REASON__STOP_REASON_DEVICE_THERMAL
Lcom/android/internal/util/FrameworkStatsLog;->SCHEDULED_JOB_STATE_CHANGED__STOP_REASON__STOP_REASON_PREEMPT
Lcom/android/internal/util/FrameworkStatsLog;->SCHEDULED_JOB_STATE_CHANGED__STOP_REASON__STOP_REASON_RESTRICTED_BUCKET
Lcom/android/internal/util/FrameworkStatsLog;->SCHEDULED_JOB_STATE_CHANGED__STOP_REASON__STOP_REASON_TIMEOUT
Lcom/android/internal/util/FrameworkStatsLog;->SCHEDULED_JOB_STATE_CHANGED__STOP_REASON__STOP_REASON_UNKNOWN
Lcom/android/internal/util/IndentingPrintWriter;->mCurrentIndent
Lcom/android/internal/util/IndentingPrintWriter;->mCurrentLength
Lcom/android/internal/util/IndentingPrintWriter;->mEmptyLine
Lcom/android/internal/util/IndentingPrintWriter;->mIndentBuilder
Lcom/android/internal/util/IndentingPrintWriter;->mSingleChar
Lcom/android/internal/util/IndentingPrintWriter;->mSingleIndent
Lcom/android/internal/util/IndentingPrintWriter;->mWrapLength
Lcom/android/internal/util/LatencyTracker;->ACTION_RELOAD_PROPERTY
Lcom/android/internal/util/LatencyTracker;->NAMES
Lcom/android/internal/util/LocationPermissionChecker;->ERROR_LOCATION_MODE_OFF
Lcom/android/internal/util/LocationPermissionChecker;->ERROR_LOCATION_PERMISSION_MISSING
Lcom/android/internal/util/LocationPermissionChecker;->SUCCEEDED
Lcom/android/internal/util/LocationPermissionChecker;->TAG
Lcom/android/internal/util/LocationPermissionChecker;->mAppOpsManager
Lcom/android/internal/util/LocationPermissionChecker;->mContext
Lcom/android/internal/util/Protocol;->BASE_CONNECTIVITY_MANAGER
Lcom/android/internal/util/Protocol;->BASE_NETWORK_AGENT
Lcom/android/internal/util/ScreenRecordHelper;->mContext
Lcom/android/internal/util/TrafficStatsConstants;->TAG_SYSTEM_DHCP
Lcom/android/internal/util/TrafficStatsConstants;->TAG_SYSTEM_DHCP_SERVER
Lcom/android/internal/util/TrafficStatsConstants;->TAG_SYSTEM_DNS
Lcom/android/internal/util/TrafficStatsConstants;->TAG_SYSTEM_NEIGHBOR
Lcom/android/internal/util/TrafficStatsConstants;->TAG_SYSTEM_PROBE
Lcom/android/internal/view/BaseIWindow;->mSeq
Lcom/android/internal/view/IInlineSuggestionsRequestCallback$Stub;->DESCRIPTOR
Lcom/android/internal/view/IInlineSuggestionsResponseCallback$Stub;->DESCRIPTOR
Lcom/android/internal/view/IInputMethodClient$Stub;->TRANSACTION_applyImeVisibility
Lcom/android/internal/view/IInputMethodClient$Stub;->TRANSACTION_reportPreRendered
Lcom/android/internal/view/IInputMethodClient$Stub;->TRANSACTION_updateActivityViewToScreenMatrix
Lcom/android/internal/view/IInputMethodManager$Stub;->TRANSACTION_reportActivityView
Lcom/android/internal/view/IInputMethodSession$Stub;->TRANSACTION_toggleSoftInput
Lcom/android/internal/view/InputBindResult;->mActivityViewToScreenMatrixValues
Lcom/android/internal/view/ScrollCaptureViewSupport;->mUiHandler
Lcom/android/internal/view/ScrollCaptureViewSupport$ViewRenderer;->mRootRenderNode
Lcom/android/internal/view/ScrollCaptureViewSupport$ViewRenderer;->mSourceRect
Lcom/android/internal/view/ScrollCaptureViewSupport$ViewRenderer;->mTempMatrix
Lcom/android/internal/view/ScrollCaptureViewSupport$ViewRenderer;->mTempRectF
Lcom/android/internal/view/inline/IInlineContentCallback$Stub;->DESCRIPTOR
Lcom/android/internal/view/inline/IInlineContentProvider$Stub;->DESCRIPTOR
Lcom/android/internal/widget/ConversationLayout;->COLOR_SHIFT_AMOUNT
Lcom/android/internal/widget/ConversationLayout;->IGNORABLE_CHAR_PATTERN
Lcom/android/internal/widget/ConversationLayout;->SPECIAL_CHAR_PATTERN
Lcom/android/internal/widget/ConversationLayout;->mAppOps
Lcom/android/internal/widget/ConversationLayout;->mAppOpsTouchRect
Lcom/android/internal/widget/ConversationLayout;->mAvatarSize
Lcom/android/internal/widget/ConversationLayout;->mBadgedSideMargins
Lcom/android/internal/widget/ConversationLayout;->mConversationContentStart
Lcom/android/internal/widget/ConversationLayout;->mExpandButtonExpandedTopMargin
Lcom/android/internal/widget/ConversationLayout;->mExpandButtonInnerContainer
Lcom/android/internal/widget/ConversationLayout;->mExpandedGroupSideMargin
Lcom/android/internal/widget/ConversationLayout;->mExpandedGroupSideMarginFacePile
Lcom/android/internal/widget/ConversationLayout;->mInternalButtonPadding
Lcom/android/internal/widget/ConversationLayout;->mPaint
Lcom/android/internal/widget/ConversationLayout;->mTextPaint
Lcom/android/internal/widget/ConversationLayout;->mUnreadBadge
Lcom/android/internal/widget/DecorCaptionView;->TAG
Lcom/android/internal/widget/EmphasizedNotificationButton;->mStrokeColor
Lcom/android/internal/widget/EmphasizedNotificationButton;->mStrokeWidth
Lcom/android/internal/widget/FloatingToolbar;->mShowingMenuItems
Lcom/android/internal/widget/LockPatternUtils;->HISTORY_DELIMITER
Lcom/android/internal/widget/MediaNotificationView;->mActions
Lcom/android/internal/widget/MediaNotificationView;->mHeader
Lcom/android/internal/widget/MediaNotificationView;->mImagePushIn
Lcom/android/internal/widget/MediaNotificationView;->mMainColumn
Lcom/android/internal/widget/MediaNotificationView;->mMediaContent
Lcom/android/internal/widget/MediaNotificationView;->mNotificationContentImageMarginEnd
Lcom/android/internal/widget/MediaNotificationView;->mNotificationContentMarginEnd
Lcom/android/internal/widget/MediaNotificationView;->mRightIcon
Lcom/android/internal/widget/MessagingGroup;->mNonConversationMarginEnd
Lcom/android/internal/widget/MessagingLayout;->IGNORABLE_CHAR_PATTERN
Lcom/android/internal/widget/MessagingLayout;->SPECIAL_CHAR_PATTERN
Lcom/android/internal/widget/MessagingLayout;->mAvatarSize
Lcom/android/internal/widget/MessagingLayout;->mDisplayImagesAtEnd
Lcom/android/internal/widget/MessagingLayout;->mPaint
Lcom/android/internal/widget/MessagingLayout;->mTextPaint
Lcom/android/internal/widget/MessagingLayout;->mTitleView
Lcom/android/internal/widget/MessagingLinearLayout;->mMessagingLayout
Lcom/android/internal/widget/NotificationExpandButton;->mOriginalNotificationColor
Lcom/android/internal/widget/VerifyCredentialResponse;->mPayload
Lcom/android/net/IProxyCallback$Stub;->DESCRIPTOR
Lcom/android/net/IProxyPortListener$Stub;->DESCRIPTOR
Lcom/android/net/IProxyService$Stub;->DESCRIPTOR
Lcom/android/net/IProxyService$Stub;->TRANSACTION_startPacSystem
Lcom/android/net/IProxyService$Stub;->TRANSACTION_stopPacSystem
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->CREATOR
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->mData
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->mSeparator
Lcom/android/org/bouncycastle/asn1/ASN1EncodableVector;->v
Lcom/android/org/bouncycastle/asn1/ASN1OutputStream$ImplicitOutputStream;->first
Lcom/android/org/bouncycastle/asn1/ASN1Sequence;->seq
Lcom/android/org/bouncycastle/asn1/ASN1Set;->set
Lcom/android/org/bouncycastle/asn1/ASN1TaggedObject;->empty
Lcom/android/org/bouncycastle/asn1/BEROctetString;->DEFAULT_LENGTH
Lcom/android/org/bouncycastle/asn1/DERTaggedObject;->ZERO_BYTES
Lcom/android/org/bouncycastle/asn1/DLTaggedObject;->ZERO_BYTES
Lcom/android/org/bouncycastle/asn1/bc/BCObjectIdentifiers;->qTESLA_I
Lcom/android/org/bouncycastle/asn1/bc/BCObjectIdentifiers;->qTESLA_III_size
Lcom/android/org/bouncycastle/asn1/bc/BCObjectIdentifiers;->qTESLA_III_speed
Lcom/android/org/bouncycastle/crypto/params/ECKeyParameters;->params
Lcom/android/org/bouncycastle/crypto/params/ECPublicKeyParameters;->Q
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/PEMUtil;->_footer1
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/PEMUtil;->_footer2
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/PEMUtil;->_footer3
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/PEMUtil;->_header1
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/PEMUtil;->_header2
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/PEMUtil;->_header3
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLEntryObject;->isHashValueSet
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->bcHelper
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->c
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->hashCodeValue
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->isHashCodeSet
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->isIndirect
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->sigAlgName
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->sigAlgParams
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->basicConstraints
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->bcHelper
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->c
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->keyUsage
Lcom/android/org/bouncycastle/jcajce/provider/symmetric/util/BCPBEKey;->pbeKeySpec
Lcom/android/org/bouncycastle/jcajce/provider/symmetric/util/PBE;->SHA3_224
Lcom/android/org/bouncycastle/jcajce/provider/symmetric/util/PBE;->SHA3_256
Lcom/android/org/bouncycastle/jcajce/provider/symmetric/util/PBE;->SHA3_384
Lcom/android/org/bouncycastle/jcajce/provider/symmetric/util/PBE;->SHA3_512
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;->logger
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;->pubkeyBlacklist
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;->serialBlacklist
Lcom/android/org/bouncycastle/jce/provider/CertPathValidatorUtilities;->CRL_UTIL
Lcom/android/org/bouncycastle/jce/provider/PKIXCertPathValidatorSpi$NoPreloadHolder;->blacklist
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->excludedSubtreesDN
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->excludedSubtreesDNS
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->excludedSubtreesEmail
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->excludedSubtreesIP
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->excludedSubtreesURI
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->permittedSubtreesDN
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->permittedSubtreesDNS
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->permittedSubtreesEmail
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->permittedSubtreesIP
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->permittedSubtreesURI
Lcom/android/org/bouncycastle/jce/provider/RFC3280CertPathUtilities;->CRL_UTIL
Lcom/android/org/bouncycastle/math/ec/ECPoint;->withCompression
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP192K1Curve;->SecP192K1_DEFAULT_COORDS
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP192R1Curve;->SecP192R1_DEFAULT_COORDS
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP224R1Curve;->SecP224R1_DEFAULT_COORDS
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP256R1Curve;->SecP256R1_DEFAULT_COORDS
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP384R1Curve;->SecP384R1_DEFAULT_COORDS
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP521R1Curve;->SecP521R1_DEFAULT_COORDS
Lcom/android/org/bouncycastle/math/ec/endo/GLVTypeBEndomorphism;->curve
Lcom/android/org/bouncycastle/math/ec/endo/GLVTypeBParameters;->bits
Lcom/android/org/bouncycastle/math/ec/endo/GLVTypeBParameters;->g1
Lcom/android/org/bouncycastle/math/ec/endo/GLVTypeBParameters;->g2
Lcom/android/org/bouncycastle/math/ec/endo/GLVTypeBParameters;->v1A
Lcom/android/org/bouncycastle/math/ec/endo/GLVTypeBParameters;->v1B
Lcom/android/org/bouncycastle/math/ec/endo/GLVTypeBParameters;->v2A
Lcom/android/org/bouncycastle/math/ec/endo/GLVTypeBParameters;->v2B
Lcom/android/org/bouncycastle/util/BigIntegers;->SQR_MAX_SMALL
Lcom/android/org/conscrypt/CertBlacklistImpl;->HEX_TABLE
Lcom/android/org/conscrypt/CertBlacklistImpl;->logger
Lcom/android/org/conscrypt/CertBlacklistImpl;->pubkeyBlacklist
Lcom/android/org/conscrypt/CertBlacklistImpl;->serialBlacklist
Lcom/android/org/conscrypt/CertBlacklistImpl$ByteString;->bytes
Lcom/android/org/conscrypt/OpenSSLBIOSink;->buffer
Lcom/android/org/conscrypt/OpenSSLBIOSink;->ctx
Lcom/android/org/conscrypt/OpenSSLBIOSink;->position
Lcom/android/org/conscrypt/OpenSSLBIOSource;->source
Lcom/android/org/conscrypt/OpenSSLBIOSource$ByteBufferInputStream;->source
Lcom/android/org/conscrypt/OpenSSLECDHKeyAgreement;->mExpectedResultLength
Lcom/android/org/conscrypt/OpenSSLECDHKeyAgreement;->mOpenSslPrivateKey
Lcom/android/org/conscrypt/OpenSSLECDHKeyAgreement;->mResult
Lcom/android/org/conscrypt/OpenSSLMac;->ctx
Lcom/android/org/conscrypt/OpenSSLMac;->evp_md
Lcom/android/org/conscrypt/TrustManagerImpl;->blacklist
Lcom/android/org/conscrypt/TrustManagerImpl$GlobalHostnameVerifierAdapter;->INSTANCE
Lcom/android/server/AlarmClockMetadataProto;->IS_PENDING_SEND
Lcom/android/server/AlarmClockMetadataProto;->TRIGGER_TIME_MS
Lcom/android/server/AlarmClockMetadataProto;->USER
Lcom/android/server/AlarmManagerServiceDumpProto;->ALARM_STATS
Lcom/android/server/AlarmManagerServiceDumpProto;->ALLOW_WHILE_IDLE_DISPATCHES
Lcom/android/server/AlarmManagerServiceDumpProto;->APP_STATE_TRACKER
Lcom/android/server/AlarmManagerServiceDumpProto;->BROADCAST_REF_COUNT
Lcom/android/server/AlarmManagerServiceDumpProto;->CURRENT_TIME
Lcom/android/server/AlarmManagerServiceDumpProto;->DELAYED_ALARM_COUNT
Lcom/android/server/AlarmManagerServiceDumpProto;->DEVICE_IDLE_USER_WHITELIST_APP_IDS
Lcom/android/server/AlarmManagerServiceDumpProto;->ELAPSED_REALTIME
Lcom/android/server/AlarmManagerServiceDumpProto;->IS_INTERACTIVE
Lcom/android/server/AlarmManagerServiceDumpProto;->LAST_ALLOW_WHILE_IDLE_DISPATCH_TIMES
Lcom/android/server/AlarmManagerServiceDumpProto;->LAST_TIME_CHANGE_CLOCK_TIME
Lcom/android/server/AlarmManagerServiceDumpProto;->LAST_TIME_CHANGE_REALTIME
Lcom/android/server/AlarmManagerServiceDumpProto;->LISTENER_FINISH_COUNT
Lcom/android/server/AlarmManagerServiceDumpProto;->LISTENER_SEND_COUNT
Lcom/android/server/AlarmManagerServiceDumpProto;->MAX_DELAY_DURATION_MS
Lcom/android/server/AlarmManagerServiceDumpProto;->MAX_NON_INTERACTIVE_DURATION_MS
Lcom/android/server/AlarmManagerServiceDumpProto;->MAX_WAKEUP_DELAY_MS
Lcom/android/server/AlarmManagerServiceDumpProto;->NEXT_ALARM_CLOCK_METADATA
Lcom/android/server/AlarmManagerServiceDumpProto;->NEXT_WAKE_FROM_IDLE
Lcom/android/server/AlarmManagerServiceDumpProto;->OUTSTANDING_DELIVERIES
Lcom/android/server/AlarmManagerServiceDumpProto;->PAST_DUE_NON_WAKEUP_ALARMS
Lcom/android/server/AlarmManagerServiceDumpProto;->PENDING_ALARM_BATCHES
Lcom/android/server/AlarmManagerServiceDumpProto;->PENDING_IDLE_UNTIL
Lcom/android/server/AlarmManagerServiceDumpProto;->PENDING_INTENT_FINISH_COUNT
Lcom/android/server/AlarmManagerServiceDumpProto;->PENDING_INTENT_SEND_COUNT
Lcom/android/server/AlarmManagerServiceDumpProto;->PENDING_USER_BLOCKED_BACKGROUND_ALARMS
Lcom/android/server/AlarmManagerServiceDumpProto;->PENDING_WHILE_IDLE_ALARMS
Lcom/android/server/AlarmManagerServiceDumpProto;->RECENT_PROBLEMS
Lcom/android/server/AlarmManagerServiceDumpProto;->RECENT_WAKEUP_HISTORY
Lcom/android/server/AlarmManagerServiceDumpProto;->SETTINGS
Lcom/android/server/AlarmManagerServiceDumpProto;->TIME_CHANGE_EVENT_COUNT
Lcom/android/server/AlarmManagerServiceDumpProto;->TIME_SINCE_LAST_DISPATCH_MS
Lcom/android/server/AlarmManagerServiceDumpProto;->TIME_SINCE_LAST_WAKEUP_MS
Lcom/android/server/AlarmManagerServiceDumpProto;->TIME_SINCE_LAST_WAKEUP_SET_MS
Lcom/android/server/AlarmManagerServiceDumpProto;->TIME_SINCE_NON_INTERACTIVE_MS
Lcom/android/server/AlarmManagerServiceDumpProto;->TIME_UNTIL_NEXT_NON_WAKEUP_ALARM_MS
Lcom/android/server/AlarmManagerServiceDumpProto;->TIME_UNTIL_NEXT_NON_WAKEUP_DELIVERY_MS
Lcom/android/server/AlarmManagerServiceDumpProto;->TIME_UNTIL_NEXT_WAKEUP_MS
Lcom/android/server/AlarmManagerServiceDumpProto;->TOP_ALARMS
Lcom/android/server/AlarmManagerServiceDumpProto;->TOTAL_DELAY_TIME_MS
Lcom/android/server/AlarmManagerServiceDumpProto;->USE_ALLOW_WHILE_IDLE_SHORT_TIME
Lcom/android/server/AlarmManagerServiceDumpProto$AlarmStat;->BROADCAST
Lcom/android/server/AlarmManagerServiceDumpProto$AlarmStat;->FILTERS
Lcom/android/server/AlarmManagerServiceDumpProto$LastAllowWhileIdleDispatch;->NEXT_ALLOWED_MS
Lcom/android/server/AlarmManagerServiceDumpProto$LastAllowWhileIdleDispatch;->TIME_MS
Lcom/android/server/AlarmManagerServiceDumpProto$LastAllowWhileIdleDispatch;->UID
Lcom/android/server/AlarmManagerServiceDumpProto$TopAlarm;->FILTER
Lcom/android/server/AlarmManagerServiceDumpProto$TopAlarm;->PACKAGE_NAME
Lcom/android/server/AlarmManagerServiceDumpProto$TopAlarm;->UID
Lcom/android/server/AlarmProto;->ALARM_CLOCK
Lcom/android/server/AlarmProto;->COUNT
Lcom/android/server/AlarmProto;->FLAGS
Lcom/android/server/AlarmProto;->LISTENER
Lcom/android/server/AlarmProto;->OPERATION
Lcom/android/server/AlarmProto;->REPEAT_INTERVAL_MS
Lcom/android/server/AlarmProto;->TAG
Lcom/android/server/AlarmProto;->TIME_UNTIL_WHEN_ELAPSED_MS
Lcom/android/server/AlarmProto;->TYPE
Lcom/android/server/AlarmProto;->WINDOW_LENGTH_MS
Lcom/android/server/AppStateTrackerProto;->EXEMPTED_PACKAGES
Lcom/android/server/AppStateTrackerProto;->POWER_SAVE_USER_WHITELIST_APP_IDS
Lcom/android/server/AppStateTrackerProto;->POWER_SAVE_WHITELIST_APP_IDS
Lcom/android/server/AppStateTrackerProto;->TEMP_POWER_SAVE_WHITELIST_APP_IDS
Lcom/android/server/BatchProto;->ALARMS
Lcom/android/server/BatchProto;->END_REALTIME
Lcom/android/server/BatchProto;->FLAGS
Lcom/android/server/BatchProto;->START_REALTIME
Lcom/android/server/BootReceiver;->FSCK_FS_MODIFIED
Lcom/android/server/BootReceiver;->FSCK_PASS_PATTERN
Lcom/android/server/BootReceiver;->FSCK_TREE_OPTIMIZATION_PATTERN
Lcom/android/server/BootReceiver;->FS_STAT_FS_FIXED
Lcom/android/server/BootReceiver;->FS_STAT_PATTERN
Lcom/android/server/BootReceiver;->GMSCORE_LASTK_LOG_SIZE
Lcom/android/server/BootReceiver;->LASTK_LOG_SIZE
Lcom/android/server/BootReceiver;->LAST_HEADER_FILE
Lcom/android/server/BootReceiver;->LAST_KMSG_FILES
Lcom/android/server/BootReceiver;->LAST_SHUTDOWN_TIME_PATTERN
Lcom/android/server/BootReceiver;->LOG_FILES_FILE
Lcom/android/server/BootReceiver;->LOG_SIZE
Lcom/android/server/BootReceiver;->METRIC_SHUTDOWN_TIME_START
Lcom/android/server/BootReceiver;->METRIC_SYSTEM_SERVER
Lcom/android/server/BootReceiver;->MOUNT_DURATION_PROPS_POSTFIX
Lcom/android/server/BootReceiver;->OLD_UPDATER_CLASS
Lcom/android/server/BootReceiver;->OLD_UPDATER_PACKAGE
Lcom/android/server/BootReceiver;->SHUTDOWN_METRICS_FILE
Lcom/android/server/BootReceiver;->SHUTDOWN_TRON_METRICS_PREFIX
Lcom/android/server/BootReceiver;->TAG
Lcom/android/server/BootReceiver;->TAG_TOMBSTONE
Lcom/android/server/BootReceiver;->TAG_TRUNCATED
Lcom/android/server/BootReceiver;->TOMBSTONE_DIR
Lcom/android/server/BootReceiver;->UMOUNT_STATUS_NOT_AVAILABLE
Lcom/android/server/BootReceiver;->lastHeaderFile
Lcom/android/server/BootReceiver;->sFile
Lcom/android/server/BootReceiver;->sTombstoneObserver
Lcom/android/server/BroadcastStatsProto;->COUNT
Lcom/android/server/BroadcastStatsProto;->NESTING
Lcom/android/server/BroadcastStatsProto;->PACKAGE_NAME
Lcom/android/server/BroadcastStatsProto;->START_TIME_REALTIME
Lcom/android/server/BroadcastStatsProto;->TOTAL_FLIGHT_DURATION_MS
Lcom/android/server/BroadcastStatsProto;->UID
Lcom/android/server/BroadcastStatsProto;->WAKEUP_COUNT
Lcom/android/server/ConstantsProto;->ALLOW_WHILE_IDLE_LONG_DURATION_MS
Lcom/android/server/ConstantsProto;->ALLOW_WHILE_IDLE_SHORT_DURATION_MS
Lcom/android/server/ConstantsProto;->ALLOW_WHILE_IDLE_WHITELIST_DURATION_MS
Lcom/android/server/ConstantsProto;->LISTENER_TIMEOUT_DURATION_MS
Lcom/android/server/ConstantsProto;->MAX_INTERVAL_DURATION_MS
Lcom/android/server/ConstantsProto;->MIN_FUTURITY_DURATION_MS
Lcom/android/server/ConstantsProto;->MIN_INTERVAL_DURATION_MS
Lcom/android/server/FilterStatsProto;->COUNT
Lcom/android/server/FilterStatsProto;->LAST_FLIGHT_TIME_REALTIME
Lcom/android/server/FilterStatsProto;->NESTING
Lcom/android/server/FilterStatsProto;->START_TIME_REALTIME
Lcom/android/server/FilterStatsProto;->TAG
Lcom/android/server/FilterStatsProto;->TOTAL_FLIGHT_DURATION_MS
Lcom/android/server/FilterStatsProto;->WAKEUP_COUNT
Lcom/android/server/IdleDispatchEntryProto;->ARG_REALTIME
Lcom/android/server/IdleDispatchEntryProto;->ENTRY_CREATION_REALTIME
Lcom/android/server/IdleDispatchEntryProto;->OP
Lcom/android/server/IdleDispatchEntryProto;->PKG
Lcom/android/server/IdleDispatchEntryProto;->TAG
Lcom/android/server/IdleDispatchEntryProto;->UID
Lcom/android/server/InFlightProto;->ALARM_TYPE
Lcom/android/server/InFlightProto;->BROADCAST_STATS
Lcom/android/server/InFlightProto;->FILTER_STATS
Lcom/android/server/InFlightProto;->PENDING_INTENT
Lcom/android/server/InFlightProto;->TAG
Lcom/android/server/InFlightProto;->UID
Lcom/android/server/InFlightProto;->WHEN_ELAPSED_MS
Lcom/android/server/InFlightProto;->WORK_SOURCE
Lcom/android/server/PrebakedProto;->EFFECT_ID
Lcom/android/server/PrebakedProto;->EFFECT_STRENGTH
Lcom/android/server/PrebakedProto;->FALLBACK
Lcom/android/server/SystemConfig;->mSystemUserBlacklistedApps
Lcom/android/server/SystemConfig;->mSystemUserWhitelistedApps
Lcom/android/server/VibrationEffectProto;->PREBAKED
Lcom/android/server/VibrationEffectProto;->WAVEFORM
Lcom/android/server/VibrationProto;->EFFECT
Lcom/android/server/VibrationProto;->ORIGIN_EFFECT
Lcom/android/server/VibrationProto;->START_TIME
Lcom/android/server/VibratorServiceDumpProto;->CURRENT_EXTERNAL_VIBRATION
Lcom/android/server/VibratorServiceDumpProto;->CURRENT_VIBRATION
Lcom/android/server/VibratorServiceDumpProto;->HAPTIC_FEEDBACK_INTENSITY
Lcom/android/server/VibratorServiceDumpProto;->IS_VIBRATING
Lcom/android/server/VibratorServiceDumpProto;->LOW_POWER_MODE
Lcom/android/server/VibratorServiceDumpProto;->NOTIFICATION_INTENSITY
Lcom/android/server/VibratorServiceDumpProto;->PREVIOUS_ALARM_VIBRATIONS
Lcom/android/server/VibratorServiceDumpProto;->PREVIOUS_NOTIFICATION_VIBRATIONS
Lcom/android/server/VibratorServiceDumpProto;->PREVIOUS_RING_VIBRATIONS
Lcom/android/server/VibratorServiceDumpProto;->PREVIOUS_VIBRATIONS
Lcom/android/server/VibratorServiceDumpProto;->RING_INTENSITY
Lcom/android/server/VibratorServiceDumpProto;->VIBRATOR_UNDER_EXTERNAL_CONTROL
Lcom/android/server/WakeupEventProto;->ACTION
Lcom/android/server/WakeupEventProto;->UID
Lcom/android/server/WakeupEventProto;->WHEN
Lcom/android/server/WaveformProto;->AMPLITUDES
Lcom/android/server/WaveformProto;->REPEAT
Lcom/android/server/WaveformProto;->TIMINGS
Lcom/android/server/backup/PermissionBackupHelper;->mUser
Lcom/android/server/job/ConstantsProto$TimeController;->USE_NON_WAKEUP_ALARM_FOR_DELAY
Lcom/android/server/job/StateControllerProto$IdleController$IdlenessTracker$DeviceIdlenessTracker;->IN_CAR_MODE
Lcom/android/server/protolog/ProtoLogFileProto;->INVALID
Lcom/android/server/protolog/ProtoLogFileProto;->LOG
Lcom/android/server/protolog/ProtoLogFileProto;->MAGIC_NUMBER
Lcom/android/server/protolog/ProtoLogFileProto;->MAGIC_NUMBER_H
Lcom/android/server/protolog/ProtoLogFileProto;->MAGIC_NUMBER_L
Lcom/android/server/protolog/ProtoLogFileProto;->REAL_TIME_TO_ELAPSED_TIME_OFFSET_MILLIS
Lcom/android/server/protolog/ProtoLogFileProto;->VERSION
Lcom/android/server/protolog/ProtoLogMessage;->BOOLEAN_PARAMS
Lcom/android/server/protolog/ProtoLogMessage;->DOUBLE_PARAMS
Lcom/android/server/protolog/ProtoLogMessage;->ELAPSED_REALTIME_NANOS
Lcom/android/server/protolog/ProtoLogMessage;->MESSAGE_HASH
Lcom/android/server/protolog/ProtoLogMessage;->SINT64_PARAMS
Lcom/android/server/protolog/ProtoLogMessage;->STR_PARAMS
Lcom/android/server/role/RoleManagerServiceDumpProto;->USER_STATES
Lcom/android/server/role/RoleProto;->HOLDERS
Lcom/android/server/role/RoleProto;->NAME
Lcom/android/server/role/RoleUserStateProto;->PACKAGES_HASH
Lcom/android/server/role/RoleUserStateProto;->ROLES
Lcom/android/server/role/RoleUserStateProto;->USER_ID
Lcom/android/server/role/RoleUserStateProto;->VERSION
Lcom/android/server/wm/DisplayContentProto;->DOCKED_STACK_DIVIDER_CONTROLLER
Lcom/android/server/wm/DisplayContentProto;->PINNED_STACK_CONTROLLER
Lcom/android/server/wm/DockedStackDividerControllerProto;->MINIMIZED_DOCK
Lcom/android/server/wm/PinnedStackControllerProto;->DEFAULT_BOUNDS
Lcom/android/server/wm/PinnedStackControllerProto;->MOVEMENT_BOUNDS
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;->DEBUG
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;->MAX_IPC_SIZE
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;->TAG
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;->mInlineCountLimit
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;->mList
Lcom/android/wifi/x/android/content/pm/ParceledListSlice;->CREATOR
Lcom/android/wifi/x/android/net/util/MacAddressUtils;->DEFAULT_MAC_ADDRESS
Lcom/android/wifi/x/android/net/util/MacAddressUtils;->ETHER_ADDR_LEN
Lcom/android/wifi/x/android/net/util/MacAddressUtils;->LOCALLY_ASSIGNED_MASK
Lcom/android/wifi/x/android/net/util/MacAddressUtils;->MULTICAST_MASK
Lcom/android/wifi/x/android/net/util/MacAddressUtils;->NIC_MASK
Lcom/android/wifi/x/android/net/util/MacAddressUtils;->OUI_MASK
Lcom/android/wifi/x/android/net/util/MacAddressUtils;->VALID_LONG_MASK
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->CREATOR
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->mData
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->mSeparator
Lcom/android/wifi/x/com/android/internal/util/Protocol;->BASE_CONNECTIVITY_MANAGER
Lcom/android/wifi/x/com/android/internal/util/Protocol;->BASE_NETWORK_AGENT
Lcom/google/android/mms/pdu/PduPersister;->DUMMY_THREAD_ID
Ldalvik/system/RuntimeHooks;->threadPrioritySetter
Ldalvik/system/VMDebug;->KIND_GLOBAL_EXT_ALLOCATED_BYTES
Ldalvik/system/VMDebug;->KIND_GLOBAL_EXT_ALLOCATED_OBJECTS
Ldalvik/system/VMDebug;->KIND_GLOBAL_EXT_FREED_BYTES
Ldalvik/system/VMDebug;->KIND_GLOBAL_EXT_FREED_OBJECTS
Ldalvik/system/VMDebug;->KIND_THREAD_CLASS_INIT_COUNT
Ldalvik/system/VMDebug;->KIND_THREAD_CLASS_INIT_TIME
Ldalvik/system/VMDebug;->KIND_THREAD_EXT_ALLOCATED_BYTES
Ldalvik/system/VMDebug;->KIND_THREAD_EXT_ALLOCATED_OBJECTS
Ldalvik/system/VMDebug;->KIND_THREAD_EXT_FREED_BYTES
Ldalvik/system/VMDebug;->KIND_THREAD_EXT_FREED_OBJECTS
Ldalvik/system/VMDebug;->KIND_THREAD_FREED_BYTES
Ldalvik/system/VMDebug;->KIND_THREAD_FREED_OBJECTS
Ldalvik/system/VMRuntime;->PREVENT_META_REFLECTION_BLACKLIST_ACCESS
Ljava/lang/Runtime;->tracingMethods
Ljava/lang/StringFactory;->TABLE_UTF8_NEEDED
Ljava/math/BigDecimal;->BI_SCALED_BY_ZERO
Ljava/math/BigDecimal;->BI_SCALED_BY_ZERO_LENGTH
Ljava/math/BigDecimal;->CH_ZEROS
Ljava/math/BigDecimal;->FIVE_POW
Ljava/math/BigDecimal;->LOG10_2
Ljava/math/BigDecimal;->LONG_FIVE_POW
Ljava/math/BigDecimal;->LONG_FIVE_POW_BIT_LENGTH
Ljava/math/BigDecimal;->LONG_POWERS_OF_TEN_BIT_LENGTH
Ljava/math/BigDecimal;->TEN_POW
Ljava/math/BigDecimal;->bitLength
Ljava/math/BigDecimal;->hashCode
Ljava/math/BigDecimal;->smallValue
Ljava/math/BigDecimal;->toStringImage
Ljava/math/BigInt;->bignum
Ljava/math/BigInt;->registry
Ljava/math/BigInteger;->MINUS_ONE
Ljava/math/BigInteger;->SMALL_VALUES
Ljava/math/BigInteger;->bigInt
Ljava/math/BigInteger;->digits
Ljava/math/BigInteger;->firstNonzeroDigit
Ljava/math/BigInteger;->hashCode
Ljava/math/BigInteger;->javaIsValid
Ljava/math/BigInteger;->magnitude
Ljava/math/BigInteger;->nativeIsValid
Ljava/math/BigInteger;->numberLength
Ljava/math/BigInteger;->sign
Ljava/math/Conversion;->bigRadices
Ljava/math/Conversion;->digitFitInInt
Ljava/math/Multiplication;->bigFivePows
Ljava/math/Multiplication;->bigTenPows
Ljava/math/Multiplication;->fivePows
Ljava/math/Multiplication;->tenPows
Ljava/math/Primality;->BIprimes
Ljava/math/Primality;->primes
Ljava/math/RoundingMode;->bigDecimalRM
Ljava/text/Normalizer$Form;->icuMode
Ljava/text/SimpleDateFormat;->DST_NAME_TYPES
Ljava/text/SimpleDateFormat;->NAME_TYPES
Ljava/time/zone/IcuZoneRulesProvider;->MAX_TRANSITIONS
Ljava/time/zone/IcuZoneRulesProvider;->SECONDS_IN_DAY
Ljava/util/ImmutableCollections$List0;->INSTANCE
Ljava/util/ImmutableCollections$List1;->e0
Ljava/util/ImmutableCollections$List2;->e0
Ljava/util/ImmutableCollections$List2;->e1
Llibcore/icu/DateIntervalFormat;->CACHED_FORMATTERS
Llibcore/icu/DateTimeFormat;->CACHED_FORMATTERS
Llibcore/icu/LocaleData;->currencySymbol
Llibcore/icu/LocaleData;->internationalCurrencySymbol
Llibcore/icu/LocaleData;->narrowAm
Llibcore/icu/LocaleData;->narrowPm
Llibcore/icu/LocaleData;->timeFormat_Hms
Llibcore/icu/LocaleData;->timeFormat_hms
Llibcore/icu/LocaleData;->yesterday
Llibcore/icu/RelativeDateTimeFormatter;->CACHED_FORMATTERS
Llibcore/icu/RelativeDateTimeFormatter;->DAY_IN_MILLIS
Llibcore/icu/RelativeDateTimeFormatter;->DAY_IN_MS
Llibcore/icu/RelativeDateTimeFormatter;->EPOCH_JULIAN_DAY
Llibcore/icu/RelativeDateTimeFormatter;->HOUR_IN_MILLIS
Llibcore/icu/RelativeDateTimeFormatter;->MINUTE_IN_MILLIS
Llibcore/icu/RelativeDateTimeFormatter;->SECOND_IN_MILLIS
Llibcore/icu/RelativeDateTimeFormatter;->WEEK_IN_MILLIS
Llibcore/icu/RelativeDateTimeFormatter;->YEAR_IN_MILLIS
Llibcore/timezone/CountryTimeZones;->countryIso
Llibcore/timezone/CountryTimeZones;->defaultTimeZone
Llibcore/timezone/CountryTimeZones;->defaultTimeZoneBoosted
Llibcore/timezone/CountryTimeZones;->defaultTimeZoneId
Llibcore/timezone/CountryTimeZones;->everUsesUtc
Llibcore/timezone/CountryTimeZones;->timeZoneMappings
Llibcore/timezone/CountryTimeZones$OffsetResult;->isOnlyMatch
Llibcore/timezone/CountryTimeZones$OffsetResult;->timeZone
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;->notUsedAfter
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;->shownInPicker
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;->timeZone
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;->timeZoneId
Llibcore/timezone/CountryZonesFinder;->countryTimeZonesList
Llibcore/timezone/TelephonyLookup;->COUNTRY_ISO_CODE_ATTRIBUTE
Llibcore/timezone/TelephonyLookup;->MOBILE_COUNTRY_CODE_ATTRIBUTE
Llibcore/timezone/TelephonyLookup;->MOBILE_NETWORK_CODE_ATTRIBUTE
Llibcore/timezone/TelephonyLookup;->NETWORKS_ELEMENT
Llibcore/timezone/TelephonyLookup;->NETWORK_ELEMENT
Llibcore/timezone/TelephonyLookup;->TELEPHONYLOOKUP_FILE_NAME
Llibcore/timezone/TelephonyLookup;->TELEPHONY_LOOKUP_ELEMENT
Llibcore/timezone/TelephonyLookup;->instance
Llibcore/timezone/TelephonyLookup;->xmlSource
Llibcore/timezone/TelephonyLookup$TelephonyNetworkProcessor;->CONTINUE
Llibcore/timezone/TelephonyLookup$TelephonyNetworkProcessor;->HALT
Llibcore/timezone/TelephonyLookup$TelephonyNetworkValidator;->knownMccMncs
Llibcore/timezone/TelephonyLookup$TelephonyNetworksExtractor;->networksList
Llibcore/timezone/TelephonyNetwork;->countryIsoCode
Llibcore/timezone/TelephonyNetwork;->mccMnc
Llibcore/timezone/TelephonyNetwork$MccMnc;->mcc
Llibcore/timezone/TelephonyNetwork$MccMnc;->mnc
Llibcore/timezone/TelephonyNetworkFinder;->networksList
Llibcore/timezone/TelephonyNetworkFinder;->networksMap
Llibcore/timezone/TimeZoneDataFiles;->ANDROID_DATA_ENV
Llibcore/timezone/TimeZoneDataFiles;->ANDROID_I18N_ROOT_ENV
Llibcore/timezone/TimeZoneDataFiles;->ANDROID_ROOT_ENV
Llibcore/timezone/TimeZoneDataFiles;->ANDROID_TZDATA_ROOT_ENV
Llibcore/timezone/TimeZoneFinder;->COUNTRY_CODE_ATTRIBUTE
Llibcore/timezone/TimeZoneFinder;->COUNTRY_ELEMENT
Llibcore/timezone/TimeZoneFinder;->COUNTRY_ZONES_ELEMENT
Llibcore/timezone/TimeZoneFinder;->DEFAULT_TIME_ZONE_BOOST_ATTRIBUTE
Llibcore/timezone/TimeZoneFinder;->DEFAULT_TIME_ZONE_ID_ATTRIBUTE
Llibcore/timezone/TimeZoneFinder;->EVER_USES_UTC_ATTRIBUTE
Llibcore/timezone/TimeZoneFinder;->IANA_VERSION_ATTRIBUTE
Llibcore/timezone/TimeZoneFinder;->TIMEZONES_ELEMENT
Llibcore/timezone/TimeZoneFinder;->TZLOOKUP_FILE_NAME
Llibcore/timezone/TimeZoneFinder;->ZONE_ID_ELEMENT
Llibcore/timezone/TimeZoneFinder;->ZONE_NOT_USED_AFTER_ATTRIBUTE
Llibcore/timezone/TimeZoneFinder;->ZONE_SHOW_IN_PICKER_ATTRIBUTE
Llibcore/timezone/TimeZoneFinder;->instance
Llibcore/timezone/TimeZoneFinder;->lastCountryTimeZones
Llibcore/timezone/TimeZoneFinder;->xmlSource
Llibcore/timezone/TimeZoneFinder$CountryZonesLookupExtractor;->countryTimeZonesList
Llibcore/timezone/TimeZoneFinder$IanaVersionExtractor;->ianaVersion
Llibcore/timezone/TimeZoneFinder$SelectiveCountryTimeZonesExtractor;->countryCodeToMatch
Llibcore/timezone/TimeZoneFinder$SelectiveCountryTimeZonesExtractor;->validatedCountryTimeZones
Llibcore/timezone/TimeZoneFinder$TimeZonesProcessor;->CONTINUE
Llibcore/timezone/TimeZoneFinder$TimeZonesProcessor;->HALT
Llibcore/timezone/TimeZoneFinder$TimeZonesValidator;->knownCountryCodes
Llibcore/timezone/TzDataSetVersion;->CURRENT_FORMAT_MAJOR_VERSION
Llibcore/timezone/TzDataSetVersion;->CURRENT_FORMAT_MINOR_VERSION
Llibcore/timezone/TzDataSetVersion;->DEFAULT_FILE_NAME
Llibcore/timezone/TzDataSetVersion;->FORMAT_VERSION_PATTERN
Llibcore/timezone/TzDataSetVersion;->FORMAT_VERSION_STRING_LENGTH
Llibcore/timezone/TzDataSetVersion;->FULL_CURRENT_FORMAT_VERSION_STRING
Llibcore/timezone/TzDataSetVersion;->REVISION_LENGTH
Llibcore/timezone/TzDataSetVersion;->REVISION_PATTERN
Llibcore/timezone/TzDataSetVersion;->RULES_VERSION_LENGTH
Llibcore/timezone/TzDataSetVersion;->RULES_VERSION_PATTERN
Llibcore/timezone/TzDataSetVersion;->TZ_DATA_VERSION_FILE_LENGTH
Llibcore/timezone/TzDataSetVersion;->TZ_DATA_VERSION_FILE_PATTERN
Llibcore/timezone/TzDataSetVersion;->formatMajorVersion
Llibcore/timezone/TzDataSetVersion;->formatMinorVersion
Llibcore/timezone/TzDataSetVersion;->revision
Llibcore/timezone/TzDataSetVersion;->rulesVersion
Llibcore/timezone/XmlUtils;->FALSE_ATTRIBUTE_VALUE
Llibcore/timezone/XmlUtils;->TRUE_ATTRIBUTE_VALUE
Llibcore/timezone/ZoneInfoDb;->CACHE_SIZE
Llibcore/timezone/ZoneInfoDb;->DATA
Llibcore/timezone/ZoneInfoDb;->SIZEOF_INDEX_ENTRY
Llibcore/timezone/ZoneInfoDb;->SIZEOF_TZINT
Llibcore/timezone/ZoneInfoDb;->SIZEOF_TZNAME
Llibcore/timezone/ZoneInfoDb;->TZDATA_FILE_NAME
Llibcore/timezone/ZoneInfoDb;->byteOffsets
Llibcore/timezone/ZoneInfoDb;->cache
Llibcore/timezone/ZoneInfoDb;->closed
Llibcore/timezone/ZoneInfoDb;->ids
Llibcore/timezone/ZoneInfoDb;->mappedFile
Llibcore/timezone/ZoneInfoDb;->rawUtcOffsetsCache
Llibcore/timezone/ZoneInfoDb;->version
Llibcore/timezone/ZoneInfoDb;->zoneTab
Llibcore/util/CoreLibraryDebug;->CORE_LIBRARY_TIMEZONE_DEBUG_PREFIX
Llibcore/util/DebugInfo;->entries
Llibcore/util/DebugInfo$DebugEntry;->key
Llibcore/util/DebugInfo$DebugEntry;->stringValue
Llibcore/util/ZoneInfo;->mEarliestRawOffset
Llibcore/util/ZoneInfo;->mIsDsts
Llibcore/util/ZoneInfo;->mOffsets
Llibcore/util/ZoneInfo;->mRawOffset
Llibcore/util/ZoneInfo;->mTypes
Llibcore/util/ZoneInfo$OffsetInterval;->endWallTimeSeconds
Llibcore/util/ZoneInfo$OffsetInterval;->isDst
Llibcore/util/ZoneInfo$OffsetInterval;->startWallTimeSeconds
Llibcore/util/ZoneInfo$OffsetInterval;->totalOffsetSeconds
Llibcore/util/ZoneInfo$WallTime;->calendar
Llibcore/util/ZoneInfo$WallTime;->gmtOffsetSeconds
Llibcore/util/ZoneInfo$WallTime;->hour
Llibcore/util/ZoneInfo$WallTime;->isDst
Llibcore/util/ZoneInfo$WallTime;->minute
Llibcore/util/ZoneInfo$WallTime;->month
Llibcore/util/ZoneInfo$WallTime;->monthDay
Llibcore/util/ZoneInfo$WallTime;->second
Llibcore/util/ZoneInfo$WallTime;->weekDay
Llibcore/util/ZoneInfo$WallTime;->year
Llibcore/util/ZoneInfo$WallTime;->yearDay
----------
methods:
Landroid/accessibilityservice/AccessibilityGestureEvent;->eventTypeToString(I)
Landroid/accounts/IAccountManager;->addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)
Landroid/accounts/IAccountManager;->addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;)
Landroid/accounts/IAccountManager$Default;->addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)
Landroid/accounts/IAccountManager$Default;->addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;)
Landroid/accounts/IAccountManager$Stub$Proxy;->addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)
Landroid/accounts/IAccountManager$Stub$Proxy;->addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;)
Landroid/animation/AnimatorSet;->addDummyListener()
Landroid/animation/AnimatorSet;->removeDummyListener()
Landroid/app/Activity;->attach(Landroid/content/Context;Landroid/app/ActivityThread;Landroid/app/Instrumentation;Landroid/os/IBinder;ILandroid/app/Application;Landroid/content/Intent;Landroid/content/pm/ActivityInfo;Ljava/lang/CharSequence;Landroid/app/Activity;Ljava/lang/String;Landroid/app/Activity$NonConfigurationInstances;Landroid/content/res/Configuration;Ljava/lang/String;Lcom/android/internal/app/IVoiceInteractor;Landroid/view/Window;Landroid/view/ViewRootImpl$ActivityConfigCallback;Landroid/os/IBinder;)
Landroid/app/ActivityManager;->getMaxNumPictureInPictureActions()
Landroid/app/ActivityManager;->registerHomeVisibilityObserver(Landroid/app/HomeVisibilityObserver;)
Landroid/app/ActivityManager;->unregisterHomeVisibilityObserver(Landroid/app/HomeVisibilityObserver;)
Landroid/app/ActivityManager$StackInfo;-><init>()
Landroid/app/ActivityManager$StackInfo;-><init>(Landroid/os/Parcel;)
Landroid/app/ActivityManager$StackInfo;-><init>(Landroid/os/Parcel;Landroid/app/ActivityManager$1;)
Landroid/app/ActivityManager$StackInfo;->describeContents()
Landroid/app/ActivityManager$StackInfo;->readFromParcel(Landroid/os/Parcel;)
Landroid/app/ActivityManager$StackInfo;->toString()
Landroid/app/ActivityManager$StackInfo;->toString(Ljava/lang/String;)
Landroid/app/ActivityManager$StackInfo;->writeToParcel(Landroid/os/Parcel;I)
Landroid/app/ActivityManager$TaskDescription;-><init>(Ljava/lang/String;Landroid/graphics/drawable/Icon;IIIIZZIII)
Landroid/app/ActivityManager$TaskDescription;->restoreFromXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/app/ActivityManager$TaskDescription;->saveToXml(Lorg/xmlpull/v1/XmlSerializer;)
Landroid/app/ActivityManager$TaskSnapshot;-><init>(Landroid/os/Parcel;)
Landroid/app/ActivityManager$TaskSnapshot;-><init>(Landroid/os/Parcel;Landroid/app/ActivityManager$1;)
Landroid/app/ActivityManager$TaskSnapshot;-><init>(JLandroid/content/ComponentName;Landroid/graphics/GraphicBuffer;Landroid/graphics/ColorSpace;IILandroid/graphics/Point;Landroid/graphics/Rect;ZZIIZ)
Landroid/app/ActivityManager$TaskSnapshot;->describeContents()
Landroid/app/ActivityManager$TaskSnapshot;->getColorSpace()
Landroid/app/ActivityManager$TaskSnapshot;->getContentInsets()
Landroid/app/ActivityManager$TaskSnapshot;->getId()
Landroid/app/ActivityManager$TaskSnapshot;->getOrientation()
Landroid/app/ActivityManager$TaskSnapshot;->getRotation()
Landroid/app/ActivityManager$TaskSnapshot;->getSnapshot()
Landroid/app/ActivityManager$TaskSnapshot;->getSystemUiVisibility()
Landroid/app/ActivityManager$TaskSnapshot;->getTaskSize()
Landroid/app/ActivityManager$TaskSnapshot;->getTopActivityComponent()
Landroid/app/ActivityManager$TaskSnapshot;->getWindowingMode()
Landroid/app/ActivityManager$TaskSnapshot;->isLowResolution()
Landroid/app/ActivityManager$TaskSnapshot;->isRealSnapshot()
Landroid/app/ActivityManager$TaskSnapshot;->isTranslucent()
Landroid/app/ActivityManager$TaskSnapshot;->toString()
Landroid/app/ActivityManager$TaskSnapshot;->writeToParcel(Landroid/os/Parcel;I)
Landroid/app/ActivityManager$TaskSnapshot$Builder;-><init>()
Landroid/app/ActivityManager$TaskSnapshot$Builder;->build()
Landroid/app/ActivityManager$TaskSnapshot$Builder;->getPixelFormat()
Landroid/app/ActivityManager$TaskSnapshot$Builder;->setColorSpace(Landroid/graphics/ColorSpace;)
Landroid/app/ActivityManager$TaskSnapshot$Builder;->setContentInsets(Landroid/graphics/Rect;)
Landroid/app/ActivityManager$TaskSnapshot$Builder;->setId(J)
Landroid/app/ActivityManager$TaskSnapshot$Builder;->setIsRealSnapshot(Z)
Landroid/app/ActivityManager$TaskSnapshot$Builder;->setIsTranslucent(Z)
Landroid/app/ActivityManager$TaskSnapshot$Builder;->setOrientation(I)
Landroid/app/ActivityManager$TaskSnapshot$Builder;->setPixelFormat(I)
Landroid/app/ActivityManager$TaskSnapshot$Builder;->setRotation(I)
Landroid/app/ActivityManager$TaskSnapshot$Builder;->setSnapshot(Landroid/graphics/GraphicBuffer;)
Landroid/app/ActivityManager$TaskSnapshot$Builder;->setSystemUiVisibility(I)
Landroid/app/ActivityManager$TaskSnapshot$Builder;->setTaskSize(Landroid/graphics/Point;)
Landroid/app/ActivityManager$TaskSnapshot$Builder;->setTopActivityComponent(Landroid/content/ComponentName;)
Landroid/app/ActivityManager$TaskSnapshot$Builder;->setWindowingMode(I)
Landroid/app/ActivityManagerInternal;->broadcastIntent(Landroid/content/Intent;Landroid/content/IIntentReceiver;[Ljava/lang/String;ZI[I)
Landroid/app/ActivityManagerInternal;->broadcastIntentInPackage(Ljava/lang/String;Ljava/lang/String;IIILandroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;Ljava/lang/String;Landroid/os/Bundle;ZZIZ)
Landroid/app/ActivityManagerInternal;->isAppBad(Landroid/content/pm/ApplicationInfo;)
Landroid/app/ActivityManagerInternal;->setDeviceIdleWhitelist([I[I)
Landroid/app/ActivityManagerInternal;->setPendingIntentWhitelistDuration(Landroid/content/IIntentSender;Landroid/os/IBinder;J)
Landroid/app/ActivityManagerInternal;->startServiceInPackage(ILandroid/content/Intent;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;IZ)
Landroid/app/ActivityManagerInternal;->tempWhitelistForPendingIntent(IIIJLjava/lang/String;)
Landroid/app/ActivityManagerInternal;->updateDeviceIdleTempWhitelist([IIZ)
Landroid/app/ActivityOptions;->getSplitScreenCreateMode()
Landroid/app/ActivityOptions;->makeSceneTransitionAnimation(Landroid/app/Activity;Landroid/view/Window;Landroid/app/ActivityOptions;Landroid/app/SharedElementCallback;[Landroid/util/Pair;)
Landroid/app/ActivityOptions;->startSharedElementAnimation(Landroid/view/Window;[Landroid/util/Pair;)
Landroid/app/ActivityOptions$HideWindowListener;-><init>(Landroid/view/Window;Landroid/app/ExitTransitionCoordinator;)
Landroid/app/ActivityOptions$HideWindowListener;->hideSharedElements()
Landroid/app/ActivityOptions$HideWindowListener;->hideWhenDone()
Landroid/app/ActivityOptions$HideWindowListener;->onTransitionEnd(Landroid/transition/Transition;)
Landroid/app/ActivityTaskManager;-><init>(Landroid/content/Context;Landroid/os/Handler;)
Landroid/app/ActivityTaskManager;->listAllStacks()
Landroid/app/ActivityTaskManager;->moveTaskToStack(IIZ)
Landroid/app/ActivityTaskManager;->moveTopActivityToPinnedStack(ILandroid/graphics/Rect;)
Landroid/app/ActivityTaskManager;->removeStacksInWindowingModes([I)
Landroid/app/ActivityTaskManager;->removeStacksWithActivityTypes([I)
Landroid/app/ActivityTaskManager;->requestPictureInPictureMode(Landroid/os/IBinder;)
Landroid/app/ActivityTaskManager;->resizeDockedStack(Landroid/graphics/Rect;Landroid/graphics/Rect;)
Landroid/app/ActivityTaskManager;->setDisplayToSingleTaskInstance(I)
Landroid/app/ActivityTaskManager;->setTaskWindowingMode(IIZ)
Landroid/app/ActivityTaskManager;->setTaskWindowingModeSplitScreenPrimary(IIZZLandroid/graphics/Rect;Z)
Landroid/app/ActivityThread;->applyCompatConfiguration(I)
Landroid/app/ActivityThread;->applyConfigCompatMainThread(ILandroid/content/res/Configuration;Landroid/content/res/CompatibilityInfo;)
Landroid/app/ActivityThread;->collectComponentCallbacks(ZLandroid/content/res/Configuration;)
Landroid/app/ActivityThread;->countLaunchingActivities(I)
Landroid/app/ActivityThread;->createNewConfigAndUpdateIfNotNull(Landroid/content/res/Configuration;Landroid/content/res/Configuration;)
Landroid/app/ActivityThread;->freeTextLayoutCachesIfNeeded(I)
Landroid/app/ActivityThread;->getGetProviderLock(Ljava/lang/String;I)
Landroid/app/ActivityThread;->getTopLevelResources(Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;ILandroid/app/LoadedApk;)
Landroid/app/ActivityThread;->handleActivityConfigurationChanged(Landroid/os/IBinder;Landroid/content/res/Configuration;I)
Landroid/app/ActivityThread;->handleConfigurationChanged(Landroid/content/res/Configuration;Landroid/content/res/CompatibilityInfo;)
Landroid/app/ActivityThread;->handleDestroyActivity(Landroid/os/IBinder;ZIZLjava/lang/String;)
Landroid/app/ActivityThread;->handleFixedRotationAdjustments(Landroid/os/IBinder;Landroid/view/DisplayAdjustments$FixedRotationAdjustments;Landroid/content/res/Configuration;)
Landroid/app/ActivityThread;->handleNewIntent(Landroid/os/IBinder;Ljava/util/List;)
Landroid/app/ActivityThread;->handlePauseActivity(Landroid/os/IBinder;ZZILandroid/app/servertransaction/PendingTransactionActions;Ljava/lang/String;)
Landroid/app/ActivityThread;->handlePictureInPictureRequested(Landroid/os/IBinder;)
Landroid/app/ActivityThread;->handleResumeActivity(Landroid/os/IBinder;ZZLjava/lang/String;)
Landroid/app/ActivityThread;->handleSendResult(Landroid/os/IBinder;Ljava/util/List;Ljava/lang/String;)
Landroid/app/ActivityThread;->handleStartActivity(Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/ActivityThread;->handleStopActivity(Landroid/os/IBinder;ILandroid/app/servertransaction/PendingTransactionActions;ZLjava/lang/String;)
Landroid/app/ActivityThread;->handleTopResumedActivityChanged(Landroid/os/IBinder;ZLjava/lang/String;)
Landroid/app/ActivityThread;->performActivityConfigurationChanged(Landroid/app/Activity;Landroid/content/res/Configuration;Landroid/content/res/Configuration;IZ)
Landroid/app/ActivityThread;->performConfigurationChanged(Landroid/content/ComponentCallbacks2;Landroid/content/res/Configuration;)
Landroid/app/ActivityThread;->performConfigurationChangedForActivity(Landroid/app/ActivityThread$ActivityClientRecord;Landroid/content/res/Configuration;)
Landroid/app/ActivityThread;->performConfigurationChangedForActivity(Landroid/app/ActivityThread$ActivityClientRecord;Landroid/content/res/Configuration;IZ)
Landroid/app/ActivityThread;->performDestroyActivity(Landroid/os/IBinder;ZIZLjava/lang/String;)
Landroid/app/ActivityThread;->performRestartActivity(Landroid/os/IBinder;Z)
Landroid/app/ActivityThread;->performResumeActivity(Landroid/os/IBinder;ZLjava/lang/String;)
Landroid/app/ActivityThread;->relaunchAllActivities(Z)
Landroid/app/ActivityThread;->reportRelaunch(Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/ActivityThread;->startActivityNow(Landroid/app/Activity;Ljava/lang/String;Landroid/content/Intent;Landroid/content/pm/ActivityInfo;Landroid/os/IBinder;Landroid/os/Bundle;Landroid/app/Activity$NonConfigurationInstances;Landroid/os/IBinder;)
Landroid/app/ActivityThread;->updateDefaultDensity()
Landroid/app/ActivityThread;->updateLocaleListFromAppContext(Landroid/content/Context;Landroid/os/LocaleList;)
Landroid/app/ActivityThread;->updatePendingActivityConfiguration(Landroid/os/IBinder;Landroid/content/res/Configuration;)
Landroid/app/ActivityThread$ActivityClientRecord;-><init>(Landroid/os/IBinder;Landroid/content/Intent;ILandroid/content/pm/ActivityInfo;Landroid/content/res/Configuration;Landroid/content/res/CompatibilityInfo;Ljava/lang/String;Lcom/android/internal/app/IVoiceInteractor;Landroid/os/Bundle;Landroid/os/PersistableBundle;Ljava/util/List;Ljava/util/List;ZLandroid/app/ProfilerInfo;Landroid/app/ClientTransactionHandler;Landroid/os/IBinder;Landroid/view/DisplayAdjustments$FixedRotationAdjustments;)
Landroid/app/ActivityThread$ApplicationThread;->bindApplication(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;Landroid/content/pm/ProviderInfoList;Landroid/content/ComponentName;Landroid/app/ProfilerInfo;Landroid/os/Bundle;Landroid/app/IInstrumentationWatcher;Landroid/app/IUiAutomationConnection;IZZZZLandroid/content/res/Configuration;Landroid/content/res/CompatibilityInfo;Ljava/util/Map;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/AutofillOptions;Landroid/content/ContentCaptureOptions;[J)
Landroid/app/ActivityThread$ApplicationThread;->scheduleCrash(Ljava/lang/String;)
Landroid/app/ActivityThread$ApplicationThread;->scheduleCreateBackupAgent(Landroid/content/pm/ApplicationInfo;Landroid/content/res/CompatibilityInfo;II)
Landroid/app/ActivityTransitionState;->onStop()
Landroid/app/ActivityView;-><init>(Landroid/content/Context;)
Landroid/app/ActivityView;-><init>(Landroid/content/Context;Landroid/util/AttributeSet;)
Landroid/app/ActivityView;-><init>(Landroid/content/Context;Landroid/util/AttributeSet;I)
Landroid/app/ActivityView;-><init>(Landroid/content/Context;Landroid/util/AttributeSet;IZ)
Landroid/app/ActivityView;-><init>(Landroid/content/Context;Landroid/util/AttributeSet;IZZ)
Landroid/app/ActivityView;-><init>(Landroid/content/Context;Landroid/util/AttributeSet;IZZZ)
Landroid/app/ActivityView;->canReceivePointerEvents()
Landroid/app/ActivityView;->finalize()
Landroid/app/ActivityView;->gatherTransparentRegion(Landroid/graphics/Region;)
Landroid/app/ActivityView;->getAlpha()
Landroid/app/ActivityView;->getCornerRadius()
Landroid/app/ActivityView;->getPositionInWindow()
Landroid/app/ActivityView;->getScreenBounds()
Landroid/app/ActivityView;->getScreenToTaskMatrix()
Landroid/app/ActivityView;->getSurfaceClipBounds(Landroid/graphics/Rect;)
Landroid/app/ActivityView;->getTapExcludeRegion()
Landroid/app/ActivityView;->getVirtualDisplay()
Landroid/app/ActivityView;->getVirtualDisplayId()
Landroid/app/ActivityView;->getWindow()
Landroid/app/ActivityView;->initTaskEmbedder(Landroid/view/SurfaceControl;)
Landroid/app/ActivityView;->onLayout(ZIIII)
Landroid/app/ActivityView;->onLocationChanged()
Landroid/app/ActivityView;->onTaskBackgroundColorChanged(Landroid/window/TaskEmbedder;I)
Landroid/app/ActivityView;->onVisibilityChanged(Landroid/view/View;I)
Landroid/app/ActivityView;->performBackPress()
Landroid/app/ActivityView;->performRelease()
Landroid/app/ActivityView;->release()
Landroid/app/ActivityView;->setAlpha(F)
Landroid/app/ActivityView;->setCallback(Landroid/app/ActivityView$StateCallback;)
Landroid/app/ActivityView;->setCornerRadius(F)
Landroid/app/ActivityView;->setForwardedInsets(Landroid/graphics/Insets;)
Landroid/app/ActivityView;->setSurfaceClipBounds(Landroid/graphics/Rect;)
Landroid/app/ActivityView;->setSurfaceClippingEnabled(Z)
Landroid/app/ActivityView;->startActivity(Landroid/app/PendingIntent;)
Landroid/app/ActivityView;->startActivity(Landroid/app/PendingIntent;Landroid/content/Intent;Landroid/app/ActivityOptions;)
Landroid/app/ActivityView;->startActivity(Landroid/content/Intent;)
Landroid/app/ActivityView;->startActivity(Landroid/content/Intent;Landroid/os/UserHandle;)
Landroid/app/ActivityView;->startShortcutActivity(Landroid/content/pm/ShortcutInfo;Landroid/app/ActivityOptions;Landroid/graphics/Rect;)
Landroid/app/ActivityView;->useTaskOrganizer()
Landroid/app/ActivityView$StateCallback;-><init>()
Landroid/app/ActivityView$StateCallback;->onActivityViewDestroyed(Landroid/app/ActivityView;)
Landroid/app/ActivityView$StateCallback;->onActivityViewReady(Landroid/app/ActivityView;)
Landroid/app/ActivityView$StateCallback;->onBackPressedOnTaskRoot(I)
Landroid/app/ActivityView$StateCallback;->onTaskCreated(ILandroid/content/ComponentName;)
Landroid/app/ActivityView$StateCallback;->onTaskMovedToFront(I)
Landroid/app/ActivityView$StateCallback;->onTaskRemovalStarted(I)
Landroid/app/ActivityView$StateCallback;->onTaskVisibilityChanged(IZ)
Landroid/app/ActivityView$StateCallbackAdapter;-><init>(Landroid/app/ActivityView;Landroid/app/ActivityView$StateCallback;)
Landroid/app/ActivityView$StateCallbackAdapter;-><init>(Landroid/app/ActivityView;Landroid/app/ActivityView$StateCallback;Landroid/app/ActivityView$1;)
Landroid/app/ActivityView$StateCallbackAdapter;->onBackPressedOnTaskRoot(I)
Landroid/app/ActivityView$StateCallbackAdapter;->onInitialized()
Landroid/app/ActivityView$StateCallbackAdapter;->onReleased()
Landroid/app/ActivityView$StateCallbackAdapter;->onTaskCreated(ILandroid/content/ComponentName;)
Landroid/app/ActivityView$StateCallbackAdapter;->onTaskMovedToFront(I)
Landroid/app/ActivityView$StateCallbackAdapter;->onTaskRemovalStarted(I)
Landroid/app/ActivityView$StateCallbackAdapter;->onTaskVisibilityChanged(IZ)
Landroid/app/ActivityView$SurfaceCallback;-><init>(Landroid/app/ActivityView;)
Landroid/app/ActivityView$SurfaceCallback;-><init>(Landroid/app/ActivityView;Landroid/app/ActivityView$1;)
Landroid/app/ActivityView$SurfaceCallback;->surfaceChanged(Landroid/view/SurfaceHolder;III)
Landroid/app/ActivityView$SurfaceCallback;->surfaceCreated(Landroid/view/SurfaceHolder;)
Landroid/app/ActivityView$SurfaceCallback;->surfaceDestroyed(Landroid/view/SurfaceHolder;)
Landroid/app/AlarmManager$ListenerWrapper;->setHandler(Landroid/os/Handler;)
Landroid/app/AppCompatCallbacks;->reportChange(J)
Landroid/app/AppOpsManager;->collectNotedOpForSelf(ILjava/lang/String;)
Landroid/app/AppOpsManager;->collectNotedOpSync(ILjava/lang/String;)
Landroid/app/AppOpsManager;->noteProxyOpNoThrow(ILjava/lang/String;ILjava/lang/String;Ljava/lang/String;)
Landroid/app/AppOpsManager;->setUserRestriction(IZLandroid/os/IBinder;[Ljava/lang/String;)
Landroid/app/AppOpsManager;->setUserRestrictionForUser(IZLandroid/os/IBinder;[Ljava/lang/String;I)
Landroid/app/AppOpsManager$AttributedHistoricalOps;->filter([Ljava/lang/String;ID)
Landroid/app/AppOpsManager$HistoricalOp;->filter(D)
Landroid/app/AppOpsManager$HistoricalOps;->filter(ILjava/lang/String;Ljava/lang/String;[Ljava/lang/String;IJJ)
Landroid/app/AppOpsManager$HistoricalOpsRequest;-><init>(ILjava/lang/String;Ljava/lang/String;Ljava/util/List;IJJI)
Landroid/app/AppOpsManager$HistoricalOpsRequest;-><init>(ILjava/lang/String;Ljava/lang/String;Ljava/util/List;IJJILandroid/app/AppOpsManager$1;)
Landroid/app/AppOpsManager$HistoricalPackageOps;->filter(Ljava/lang/String;[Ljava/lang/String;ID)
Landroid/app/AppOpsManager$HistoricalUidOps;->filter(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ID)
Landroid/app/AppOpsManager$OnOpNotedListener;->onOpNoted(IILjava/lang/String;I)
Landroid/app/AppOpsManager$OnOpStartedListener;->onOpStarted(IILjava/lang/String;I)
Landroid/app/AppOpsManagerInternal$CheckOpsDelegate;->checkOperation(IILjava/lang/String;ZLcom/android/internal/util/function/QuadFunction;)
Landroid/app/AppOpsManagerInternal$CheckOpsDelegate;->noteOperation(IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;Lcom/android/internal/util/function/HexFunction;)
Landroid/app/AppexitEnums;-><init>()
Landroid/app/Application;->collectComponentCallbacks()
Landroid/app/ApplicationLoaders;->getClassLoader(Ljava/lang/String;IZLjava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)
Landroid/app/ApplicationLoaders;->getClassLoaderWithSharedLibraries(Ljava/lang/String;IZLjava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/util/List;)
Landroid/app/ApplicationPackageManager;-><init>(Landroid/app/ContextImpl;Landroid/content/pm/IPackageManager;Landroid/permission/IPermissionManager;)
Landroid/app/ApplicationPackageManager;->shouldTraceGrant(Ljava/lang/String;Ljava/lang/String;I)
Landroid/app/ApplicationPackageManager$OnPermissionsChangeListenerDelegate;-><init>(Landroid/app/ApplicationPackageManager;Landroid/content/pm/PackageManager$OnPermissionsChangedListener;Landroid/os/Looper;)
Landroid/app/ApplicationPackageManager$OnPermissionsChangeListenerDelegate;->handleMessage(Landroid/os/Message;)
Landroid/app/ApplicationPackageManager$OnPermissionsChangeListenerDelegate;->onPermissionsChanged(I)
Landroid/app/BroadcastOptions;->getTemporaryAppWhitelistDuration()
Landroid/app/ClientTransactionHandler;->countLaunchingActivities(I)
Landroid/app/ClientTransactionHandler;->handleActivityConfigurationChanged(Landroid/os/IBinder;Landroid/content/res/Configuration;I)
Landroid/app/ClientTransactionHandler;->handleDestroyActivity(Landroid/os/IBinder;ZIZLjava/lang/String;)
Landroid/app/ClientTransactionHandler;->handleNewIntent(Landroid/os/IBinder;Ljava/util/List;)
Landroid/app/ClientTransactionHandler;->handlePauseActivity(Landroid/os/IBinder;ZZILandroid/app/servertransaction/PendingTransactionActions;Ljava/lang/String;)
Landroid/app/ClientTransactionHandler;->handlePictureInPictureRequested(Landroid/os/IBinder;)
Landroid/app/ClientTransactionHandler;->handleResumeActivity(Landroid/os/IBinder;ZZLjava/lang/String;)
Landroid/app/ClientTransactionHandler;->handleSendResult(Landroid/os/IBinder;Ljava/util/List;Ljava/lang/String;)
Landroid/app/ClientTransactionHandler;->handleStartActivity(Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/ClientTransactionHandler;->handleStopActivity(Landroid/os/IBinder;ILandroid/app/servertransaction/PendingTransactionActions;ZLjava/lang/String;)
Landroid/app/ClientTransactionHandler;->handleTopResumedActivityChanged(Landroid/os/IBinder;ZLjava/lang/String;)
Landroid/app/ClientTransactionHandler;->performRestartActivity(Landroid/os/IBinder;Z)
Landroid/app/ClientTransactionHandler;->reportRelaunch(Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/ClientTransactionHandler;->updatePendingActivityConfiguration(Landroid/os/IBinder;Landroid/content/res/Configuration;)
Landroid/app/ContextImpl;-><init>(Landroid/app/ContextImpl;Landroid/app/ActivityThread;Landroid/app/LoadedApk;Ljava/lang/String;Ljava/lang/String;Landroid/os/IBinder;Landroid/os/UserHandle;ILjava/lang/ClassLoader;Ljava/lang/String;)
Landroid/app/ContextImpl;->createBaseWindowContext(Landroid/os/IBinder;)
Landroid/app/ContextImpl;->createResources(Landroid/os/IBinder;Landroid/app/LoadedApk;Ljava/lang/String;ILandroid/content/res/Configuration;Landroid/content/res/CompatibilityInfo;Ljava/util/List;)
Landroid/app/ContextImpl;->createWindowContextResources()
Landroid/app/ContextImpl;->isUiComponent(Ljava/lang/String;)
Landroid/app/EventLogTags;->writeWmAddToStopping(IILjava/lang/String;Ljava/lang/String;)
Landroid/app/EventLogTags;->writeWmStopActivity(IILjava/lang/String;)
Landroid/app/ExitTransitionCoordinator;-><init>(Landroid/app/Activity;Landroid/view/Window;Landroid/app/SharedElementCallback;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;Z)
Landroid/app/ExitTransitionCoordinator;->setHideSharedElementsCallback(Landroid/app/ExitTransitionCoordinator$HideSharedElementsCallback;)
Landroid/app/ExitTransitionCoordinator;->startExit(ILandroid/content/Intent;)
Landroid/app/ExitTransitionCoordinator;->stop()
Landroid/app/ExitTransitionCoordinator$HideSharedElementsCallback;->hideSharedElements()
Landroid/app/HomeVisibilityObserver;-><init>()
Landroid/app/HomeVisibilityObserver;->init(Landroid/content/Context;Landroid/app/ActivityManager;)
Landroid/app/HomeVisibilityObserver;->isHomeActivityVisible()
Landroid/app/HomeVisibilityObserver;->onHomeVisibilityChanged(Z)
Landroid/app/IActivityManager;->backgroundWhitelistUid(I)
Landroid/app/IActivityManager;->bindBackupAgent(Ljava/lang/String;II)
Landroid/app/IActivityManager;->broadcastIntentWithFeature(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;ILandroid/os/Bundle;ZZI)
Landroid/app/IActivityManager;->cancelRecentsAnimation(Z)
Landroid/app/IActivityManager;->checkPermissionWithToken(Ljava/lang/String;IILandroid/os/IBinder;)
Landroid/app/IActivityManager;->getAllStackInfos()
Landroid/app/IActivityManager;->getFocusedStackInfo()
Landroid/app/IActivityManager;->getPackageForIntentSender(Landroid/content/IIntentSender;)
Landroid/app/IActivityManager;->getTaskSnapshot(IZ)
Landroid/app/IActivityManager;->getUidForIntentSender(Landroid/content/IIntentSender;)
Landroid/app/IActivityManager;->isAppStartModeDisabled(ILjava/lang/String;)
Landroid/app/IActivityManager;->isIntentSenderABroadcast(Landroid/content/IIntentSender;)
Landroid/app/IActivityManager;->isIntentSenderAForegroundService(Landroid/content/IIntentSender;)
Landroid/app/IActivityManager;->moveTaskToStack(IIZ)
Landroid/app/IActivityManager;->moveTopActivityToPinnedStack(ILandroid/graphics/Rect;)
Landroid/app/IActivityManager;->positionTaskInStack(III)
Landroid/app/IActivityManager;->registerReceiverWithFeature(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/IIntentReceiver;Landroid/content/IntentFilter;Ljava/lang/String;II)
Landroid/app/IActivityManager;->removeStack(I)
Landroid/app/IActivityManager;->setFocusedStack(I)
Landroid/app/IActivityManager;->startRecentsActivity(Landroid/content/Intent;Landroid/app/IAssistDataReceiver;Landroid/view/IRecentsAnimationRunner;)
Landroid/app/IActivityManager$Default;->backgroundWhitelistUid(I)
Landroid/app/IActivityManager$Default;->bindBackupAgent(Ljava/lang/String;II)
Landroid/app/IActivityManager$Default;->broadcastIntentWithFeature(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;ILandroid/os/Bundle;ZZI)
Landroid/app/IActivityManager$Default;->cancelRecentsAnimation(Z)
Landroid/app/IActivityManager$Default;->checkPermissionWithToken(Ljava/lang/String;IILandroid/os/IBinder;)
Landroid/app/IActivityManager$Default;->getAllStackInfos()
Landroid/app/IActivityManager$Default;->getFocusedStackInfo()
Landroid/app/IActivityManager$Default;->getPackageForIntentSender(Landroid/content/IIntentSender;)
Landroid/app/IActivityManager$Default;->getTaskSnapshot(IZ)
Landroid/app/IActivityManager$Default;->getUidForIntentSender(Landroid/content/IIntentSender;)
Landroid/app/IActivityManager$Default;->isAppStartModeDisabled(ILjava/lang/String;)
Landroid/app/IActivityManager$Default;->isIntentSenderABroadcast(Landroid/content/IIntentSender;)
Landroid/app/IActivityManager$Default;->isIntentSenderAForegroundService(Landroid/content/IIntentSender;)
Landroid/app/IActivityManager$Default;->moveTaskToStack(IIZ)
Landroid/app/IActivityManager$Default;->moveTopActivityToPinnedStack(ILandroid/graphics/Rect;)
Landroid/app/IActivityManager$Default;->positionTaskInStack(III)
Landroid/app/IActivityManager$Default;->registerReceiverWithFeature(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/IIntentReceiver;Landroid/content/IntentFilter;Ljava/lang/String;II)
Landroid/app/IActivityManager$Default;->removeStack(I)
Landroid/app/IActivityManager$Default;->setFocusedStack(I)
Landroid/app/IActivityManager$Default;->startRecentsActivity(Landroid/content/Intent;Landroid/app/IAssistDataReceiver;Landroid/view/IRecentsAnimationRunner;)
Landroid/app/IActivityManager$Stub$Proxy;->backgroundWhitelistUid(I)
Landroid/app/IActivityManager$Stub$Proxy;->bindBackupAgent(Ljava/lang/String;II)
Landroid/app/IActivityManager$Stub$Proxy;->broadcastIntentWithFeature(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;ILandroid/os/Bundle;ZZI)
Landroid/app/IActivityManager$Stub$Proxy;->cancelRecentsAnimation(Z)
Landroid/app/IActivityManager$Stub$Proxy;->checkPermissionWithToken(Ljava/lang/String;IILandroid/os/IBinder;)
Landroid/app/IActivityManager$Stub$Proxy;->getAllStackInfos()
Landroid/app/IActivityManager$Stub$Proxy;->getFocusedStackInfo()
Landroid/app/IActivityManager$Stub$Proxy;->getPackageForIntentSender(Landroid/content/IIntentSender;)
Landroid/app/IActivityManager$Stub$Proxy;->getTaskSnapshot(IZ)
Landroid/app/IActivityManager$Stub$Proxy;->getUidForIntentSender(Landroid/content/IIntentSender;)
Landroid/app/IActivityManager$Stub$Proxy;->isAppStartModeDisabled(ILjava/lang/String;)
Landroid/app/IActivityManager$Stub$Proxy;->isIntentSenderABroadcast(Landroid/content/IIntentSender;)
Landroid/app/IActivityManager$Stub$Proxy;->isIntentSenderAForegroundService(Landroid/content/IIntentSender;)
Landroid/app/IActivityManager$Stub$Proxy;->moveTaskToStack(IIZ)
Landroid/app/IActivityManager$Stub$Proxy;->moveTopActivityToPinnedStack(ILandroid/graphics/Rect;)
Landroid/app/IActivityManager$Stub$Proxy;->positionTaskInStack(III)
Landroid/app/IActivityManager$Stub$Proxy;->registerReceiverWithFeature(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/IIntentReceiver;Landroid/content/IntentFilter;Ljava/lang/String;II)
Landroid/app/IActivityManager$Stub$Proxy;->removeStack(I)
Landroid/app/IActivityManager$Stub$Proxy;->setFocusedStack(I)
Landroid/app/IActivityManager$Stub$Proxy;->startRecentsActivity(Landroid/content/Intent;Landroid/app/IAssistDataReceiver;Landroid/view/IRecentsAnimationRunner;)
Landroid/app/IActivityTaskManager;->activityDestroyed(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->activityIdle(Landroid/os/IBinder;Landroid/content/res/Configuration;Z)
Landroid/app/IActivityTaskManager;->activityPaused(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->activityRelaunched(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->activityResumed(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->activityStopped(Landroid/os/IBinder;Landroid/os/Bundle;Landroid/os/PersistableBundle;Ljava/lang/CharSequence;)
Landroid/app/IActivityTaskManager;->activityTopResumedStateLost()
Landroid/app/IActivityTaskManager;->convertFromTranslucent(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->convertToTranslucent(Landroid/os/IBinder;Landroid/os/Bundle;)
Landroid/app/IActivityTaskManager;->dismissKeyguard(Landroid/os/IBinder;Lcom/android/internal/policy/IKeyguardDismissCallback;Ljava/lang/CharSequence;)
Landroid/app/IActivityTaskManager;->enterPictureInPictureMode(Landroid/os/IBinder;Landroid/app/PictureInPictureParams;)
Landroid/app/IActivityTaskManager;->finishActivity(Landroid/os/IBinder;ILandroid/content/Intent;I)
Landroid/app/IActivityTaskManager;->finishActivityAffinity(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->finishSubActivity(Landroid/os/IBinder;Ljava/lang/String;I)
Landroid/app/IActivityTaskManager;->getActivityClassForToken(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->getActivityOptions(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->getAllStackInfos()
Landroid/app/IActivityTaskManager;->getAllStackInfosOnDisplay(I)
Landroid/app/IActivityTaskManager;->getCallingActivity(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->getCallingPackage(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->getDisplayId(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->getFilteredTasks(IZ)
Landroid/app/IActivityTaskManager;->getFocusedStackInfo()
Landroid/app/IActivityTaskManager;->getLaunchedFromPackage(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->getLaunchedFromUid(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->getMaxNumPictureInPictureActions(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->getPackageForToken(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->getRequestedOrientation(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->getStackInfo(II)
Landroid/app/IActivityTaskManager;->getStackInfoOnDisplay(III)
Landroid/app/IActivityTaskManager;->getTaskForActivity(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager;->getTasks(I)
Landroid/app/IActivityTaskManager;->getUriPermissionOwnerForActivity(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->invalidateHomeTaskSnapshot(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->isImmersive(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->isRootVoiceInteraction(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->isTopOfTask(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->launchAssistIntent(Landroid/content/Intent;ILjava/lang/String;ILandroid/os/Bundle;)
Landroid/app/IActivityTaskManager;->moveActivityTaskToBack(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager;->moveStackToDisplay(II)
Landroid/app/IActivityTaskManager;->moveTaskToStack(IIZ)
Landroid/app/IActivityTaskManager;->moveTopActivityToPinnedStack(ILandroid/graphics/Rect;)
Landroid/app/IActivityTaskManager;->navigateUpTo(Landroid/os/IBinder;Landroid/content/Intent;ILandroid/content/Intent;)
Landroid/app/IActivityTaskManager;->notifyActivityDrawn(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->notifyEnterAnimationComplete(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->notifyLaunchTaskBehindComplete(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->onBackPressedOnTaskRoot(Landroid/os/IBinder;Landroid/app/IRequestFinishCallback;)
Landroid/app/IActivityTaskManager;->overridePendingTransition(Landroid/os/IBinder;Ljava/lang/String;II)
Landroid/app/IActivityTaskManager;->positionTaskInStack(III)
Landroid/app/IActivityTaskManager;->registerRemoteAnimations(Landroid/os/IBinder;Landroid/view/RemoteAnimationDefinition;)
Landroid/app/IActivityTaskManager;->releaseActivityInstance(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->removeStack(I)
Landroid/app/IActivityTaskManager;->removeStacksInWindowingModes([I)
Landroid/app/IActivityTaskManager;->removeStacksWithActivityTypes([I)
Landroid/app/IActivityTaskManager;->reportActivityFullyDrawn(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager;->reportSizeConfigurations(Landroid/os/IBinder;[I[I[I)
Landroid/app/IActivityTaskManager;->requestPictureInPictureMode(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->resizeDockedStack(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)
Landroid/app/IActivityTaskManager;->restartActivityProcessIfVisible(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->setDisablePreviewScreenshots(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager;->setDisplayToSingleTaskInstance(I)
Landroid/app/IActivityTaskManager;->setFocusedStack(I)
Landroid/app/IActivityTaskManager;->setImmersive(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager;->setInheritShowWhenLocked(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager;->setPictureInPictureParams(Landroid/os/IBinder;Landroid/app/PictureInPictureParams;)
Landroid/app/IActivityTaskManager;->setRequestedOrientation(Landroid/os/IBinder;I)
Landroid/app/IActivityTaskManager;->setShowWhenLocked(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager;->setTaskDescription(Landroid/os/IBinder;Landroid/app/ActivityManager$TaskDescription;)
Landroid/app/IActivityTaskManager;->setTaskWindowingMode(IIZ)
Landroid/app/IActivityTaskManager;->setTaskWindowingModeSplitScreenPrimary(IZ)
Landroid/app/IActivityTaskManager;->setTurnScreenOn(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager;->setVrMode(Landroid/os/IBinder;ZLandroid/content/ComponentName;)
Landroid/app/IActivityTaskManager;->shouldUpRecreateTask(Landroid/os/IBinder;Ljava/lang/String;)
Landroid/app/IActivityTaskManager;->showAssistFromActivity(Landroid/os/IBinder;Landroid/os/Bundle;)
Landroid/app/IActivityTaskManager;->showLockTaskEscapeMessage(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->startLocalVoiceInteraction(Landroid/os/IBinder;Landroid/os/Bundle;)
Landroid/app/IActivityTaskManager;->startLockTaskModeByToken(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->startRecentsActivity(Landroid/content/Intent;Landroid/app/IAssistDataReceiver;Landroid/view/IRecentsAnimationRunner;)
Landroid/app/IActivityTaskManager;->stopLocalVoiceInteraction(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->stopLockTaskModeByToken(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->toggleFreeformWindowingMode(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->unregisterRemoteAnimations(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager;->willActivityBeVisible(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->activityDestroyed(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->activityIdle(Landroid/os/IBinder;Landroid/content/res/Configuration;Z)
Landroid/app/IActivityTaskManager$Default;->activityPaused(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->activityRelaunched(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->activityResumed(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->activityStopped(Landroid/os/IBinder;Landroid/os/Bundle;Landroid/os/PersistableBundle;Ljava/lang/CharSequence;)
Landroid/app/IActivityTaskManager$Default;->activityTopResumedStateLost()
Landroid/app/IActivityTaskManager$Default;->convertFromTranslucent(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->convertToTranslucent(Landroid/os/IBinder;Landroid/os/Bundle;)
Landroid/app/IActivityTaskManager$Default;->dismissKeyguard(Landroid/os/IBinder;Lcom/android/internal/policy/IKeyguardDismissCallback;Ljava/lang/CharSequence;)
Landroid/app/IActivityTaskManager$Default;->enterPictureInPictureMode(Landroid/os/IBinder;Landroid/app/PictureInPictureParams;)
Landroid/app/IActivityTaskManager$Default;->finishActivity(Landroid/os/IBinder;ILandroid/content/Intent;I)
Landroid/app/IActivityTaskManager$Default;->finishActivityAffinity(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->finishSubActivity(Landroid/os/IBinder;Ljava/lang/String;I)
Landroid/app/IActivityTaskManager$Default;->getActivityClassForToken(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->getActivityOptions(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->getAllStackInfos()
Landroid/app/IActivityTaskManager$Default;->getAllStackInfosOnDisplay(I)
Landroid/app/IActivityTaskManager$Default;->getCallingActivity(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->getCallingPackage(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->getDisplayId(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->getFilteredTasks(IZ)
Landroid/app/IActivityTaskManager$Default;->getFocusedStackInfo()
Landroid/app/IActivityTaskManager$Default;->getLaunchedFromPackage(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->getLaunchedFromUid(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->getMaxNumPictureInPictureActions(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->getPackageForToken(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->getRequestedOrientation(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->getStackInfo(II)
Landroid/app/IActivityTaskManager$Default;->getStackInfoOnDisplay(III)
Landroid/app/IActivityTaskManager$Default;->getTaskForActivity(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Default;->getTasks(I)
Landroid/app/IActivityTaskManager$Default;->getUriPermissionOwnerForActivity(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->invalidateHomeTaskSnapshot(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->isImmersive(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->isRootVoiceInteraction(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->isTopOfTask(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->launchAssistIntent(Landroid/content/Intent;ILjava/lang/String;ILandroid/os/Bundle;)
Landroid/app/IActivityTaskManager$Default;->moveActivityTaskToBack(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Default;->moveStackToDisplay(II)
Landroid/app/IActivityTaskManager$Default;->moveTaskToStack(IIZ)
Landroid/app/IActivityTaskManager$Default;->moveTopActivityToPinnedStack(ILandroid/graphics/Rect;)
Landroid/app/IActivityTaskManager$Default;->navigateUpTo(Landroid/os/IBinder;Landroid/content/Intent;ILandroid/content/Intent;)
Landroid/app/IActivityTaskManager$Default;->notifyActivityDrawn(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->notifyEnterAnimationComplete(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->notifyLaunchTaskBehindComplete(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->onBackPressedOnTaskRoot(Landroid/os/IBinder;Landroid/app/IRequestFinishCallback;)
Landroid/app/IActivityTaskManager$Default;->overridePendingTransition(Landroid/os/IBinder;Ljava/lang/String;II)
Landroid/app/IActivityTaskManager$Default;->positionTaskInStack(III)
Landroid/app/IActivityTaskManager$Default;->registerRemoteAnimations(Landroid/os/IBinder;Landroid/view/RemoteAnimationDefinition;)
Landroid/app/IActivityTaskManager$Default;->releaseActivityInstance(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->removeStack(I)
Landroid/app/IActivityTaskManager$Default;->removeStacksInWindowingModes([I)
Landroid/app/IActivityTaskManager$Default;->removeStacksWithActivityTypes([I)
Landroid/app/IActivityTaskManager$Default;->reportActivityFullyDrawn(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Default;->reportSizeConfigurations(Landroid/os/IBinder;[I[I[I)
Landroid/app/IActivityTaskManager$Default;->requestPictureInPictureMode(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->resizeDockedStack(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)
Landroid/app/IActivityTaskManager$Default;->restartActivityProcessIfVisible(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->setDisablePreviewScreenshots(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Default;->setDisplayToSingleTaskInstance(I)
Landroid/app/IActivityTaskManager$Default;->setFocusedStack(I)
Landroid/app/IActivityTaskManager$Default;->setImmersive(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Default;->setInheritShowWhenLocked(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Default;->setPictureInPictureParams(Landroid/os/IBinder;Landroid/app/PictureInPictureParams;)
Landroid/app/IActivityTaskManager$Default;->setRequestedOrientation(Landroid/os/IBinder;I)
Landroid/app/IActivityTaskManager$Default;->setShowWhenLocked(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Default;->setTaskDescription(Landroid/os/IBinder;Landroid/app/ActivityManager$TaskDescription;)
Landroid/app/IActivityTaskManager$Default;->setTaskWindowingMode(IIZ)
Landroid/app/IActivityTaskManager$Default;->setTaskWindowingModeSplitScreenPrimary(IZ)
Landroid/app/IActivityTaskManager$Default;->setTurnScreenOn(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Default;->setVrMode(Landroid/os/IBinder;ZLandroid/content/ComponentName;)
Landroid/app/IActivityTaskManager$Default;->shouldUpRecreateTask(Landroid/os/IBinder;Ljava/lang/String;)
Landroid/app/IActivityTaskManager$Default;->showAssistFromActivity(Landroid/os/IBinder;Landroid/os/Bundle;)
Landroid/app/IActivityTaskManager$Default;->showLockTaskEscapeMessage(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->startLocalVoiceInteraction(Landroid/os/IBinder;Landroid/os/Bundle;)
Landroid/app/IActivityTaskManager$Default;->startLockTaskModeByToken(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->startRecentsActivity(Landroid/content/Intent;Landroid/app/IAssistDataReceiver;Landroid/view/IRecentsAnimationRunner;)
Landroid/app/IActivityTaskManager$Default;->stopLocalVoiceInteraction(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->stopLockTaskModeByToken(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->toggleFreeformWindowingMode(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->unregisterRemoteAnimations(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Default;->willActivityBeVisible(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->activityDestroyed(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->activityIdle(Landroid/os/IBinder;Landroid/content/res/Configuration;Z)
Landroid/app/IActivityTaskManager$Stub$Proxy;->activityPaused(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->activityRelaunched(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->activityResumed(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->activityStopped(Landroid/os/IBinder;Landroid/os/Bundle;Landroid/os/PersistableBundle;Ljava/lang/CharSequence;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->activityTopResumedStateLost()
Landroid/app/IActivityTaskManager$Stub$Proxy;->convertFromTranslucent(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->convertToTranslucent(Landroid/os/IBinder;Landroid/os/Bundle;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->dismissKeyguard(Landroid/os/IBinder;Lcom/android/internal/policy/IKeyguardDismissCallback;Ljava/lang/CharSequence;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->enterPictureInPictureMode(Landroid/os/IBinder;Landroid/app/PictureInPictureParams;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->finishActivity(Landroid/os/IBinder;ILandroid/content/Intent;I)
Landroid/app/IActivityTaskManager$Stub$Proxy;->finishActivityAffinity(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->finishSubActivity(Landroid/os/IBinder;Ljava/lang/String;I)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getActivityClassForToken(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getActivityOptions(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getAllStackInfos()
Landroid/app/IActivityTaskManager$Stub$Proxy;->getAllStackInfosOnDisplay(I)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getCallingActivity(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getCallingPackage(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getDisplayId(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getFilteredTasks(IZ)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getFocusedStackInfo()
Landroid/app/IActivityTaskManager$Stub$Proxy;->getLaunchedFromPackage(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getLaunchedFromUid(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getMaxNumPictureInPictureActions(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getPackageForToken(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getRequestedOrientation(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getStackInfo(II)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getStackInfoOnDisplay(III)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getTaskForActivity(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getTasks(I)
Landroid/app/IActivityTaskManager$Stub$Proxy;->getUriPermissionOwnerForActivity(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->invalidateHomeTaskSnapshot(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->isImmersive(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->isRootVoiceInteraction(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->isTopOfTask(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->launchAssistIntent(Landroid/content/Intent;ILjava/lang/String;ILandroid/os/Bundle;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->moveActivityTaskToBack(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Stub$Proxy;->moveStackToDisplay(II)
Landroid/app/IActivityTaskManager$Stub$Proxy;->moveTaskToStack(IIZ)
Landroid/app/IActivityTaskManager$Stub$Proxy;->moveTopActivityToPinnedStack(ILandroid/graphics/Rect;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->navigateUpTo(Landroid/os/IBinder;Landroid/content/Intent;ILandroid/content/Intent;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->notifyActivityDrawn(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->notifyEnterAnimationComplete(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->notifyLaunchTaskBehindComplete(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->onBackPressedOnTaskRoot(Landroid/os/IBinder;Landroid/app/IRequestFinishCallback;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->overridePendingTransition(Landroid/os/IBinder;Ljava/lang/String;II)
Landroid/app/IActivityTaskManager$Stub$Proxy;->positionTaskInStack(III)
Landroid/app/IActivityTaskManager$Stub$Proxy;->registerRemoteAnimations(Landroid/os/IBinder;Landroid/view/RemoteAnimationDefinition;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->releaseActivityInstance(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->removeStack(I)
Landroid/app/IActivityTaskManager$Stub$Proxy;->removeStacksInWindowingModes([I)
Landroid/app/IActivityTaskManager$Stub$Proxy;->removeStacksWithActivityTypes([I)
Landroid/app/IActivityTaskManager$Stub$Proxy;->reportActivityFullyDrawn(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Stub$Proxy;->reportSizeConfigurations(Landroid/os/IBinder;[I[I[I)
Landroid/app/IActivityTaskManager$Stub$Proxy;->requestPictureInPictureMode(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->resizeDockedStack(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->restartActivityProcessIfVisible(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->setDisablePreviewScreenshots(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Stub$Proxy;->setDisplayToSingleTaskInstance(I)
Landroid/app/IActivityTaskManager$Stub$Proxy;->setFocusedStack(I)
Landroid/app/IActivityTaskManager$Stub$Proxy;->setImmersive(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Stub$Proxy;->setInheritShowWhenLocked(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Stub$Proxy;->setPictureInPictureParams(Landroid/os/IBinder;Landroid/app/PictureInPictureParams;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->setRequestedOrientation(Landroid/os/IBinder;I)
Landroid/app/IActivityTaskManager$Stub$Proxy;->setShowWhenLocked(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Stub$Proxy;->setTaskDescription(Landroid/os/IBinder;Landroid/app/ActivityManager$TaskDescription;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->setTaskWindowingMode(IIZ)
Landroid/app/IActivityTaskManager$Stub$Proxy;->setTaskWindowingModeSplitScreenPrimary(IZ)
Landroid/app/IActivityTaskManager$Stub$Proxy;->setTurnScreenOn(Landroid/os/IBinder;Z)
Landroid/app/IActivityTaskManager$Stub$Proxy;->setVrMode(Landroid/os/IBinder;ZLandroid/content/ComponentName;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->shouldUpRecreateTask(Landroid/os/IBinder;Ljava/lang/String;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->showAssistFromActivity(Landroid/os/IBinder;Landroid/os/Bundle;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->showLockTaskEscapeMessage(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->startLocalVoiceInteraction(Landroid/os/IBinder;Landroid/os/Bundle;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->startLockTaskModeByToken(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->startRecentsActivity(Landroid/content/Intent;Landroid/app/IAssistDataReceiver;Landroid/view/IRecentsAnimationRunner;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->stopLocalVoiceInteraction(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->stopLockTaskModeByToken(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->toggleFreeformWindowingMode(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->unregisterRemoteAnimations(Landroid/os/IBinder;)
Landroid/app/IActivityTaskManager$Stub$Proxy;->willActivityBeVisible(Landroid/os/IBinder;)
Landroid/app/IApplicationThread;->bindApplication(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;Landroid/content/pm/ProviderInfoList;Landroid/content/ComponentName;Landroid/app/ProfilerInfo;Landroid/os/Bundle;Landroid/app/IInstrumentationWatcher;Landroid/app/IUiAutomationConnection;IZZZZLandroid/content/res/Configuration;Landroid/content/res/CompatibilityInfo;Ljava/util/Map;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/AutofillOptions;Landroid/content/ContentCaptureOptions;[J)
Landroid/app/IApplicationThread;->scheduleCrash(Ljava/lang/String;)
Landroid/app/IApplicationThread;->scheduleCreateBackupAgent(Landroid/content/pm/ApplicationInfo;Landroid/content/res/CompatibilityInfo;II)
Landroid/app/IApplicationThread$Default;->bindApplication(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;Landroid/content/pm/ProviderInfoList;Landroid/content/ComponentName;Landroid/app/ProfilerInfo;Landroid/os/Bundle;Landroid/app/IInstrumentationWatcher;Landroid/app/IUiAutomationConnection;IZZZZLandroid/content/res/Configuration;Landroid/content/res/CompatibilityInfo;Ljava/util/Map;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/AutofillOptions;Landroid/content/ContentCaptureOptions;[J)
Landroid/app/IApplicationThread$Default;->scheduleCrash(Ljava/lang/String;)
Landroid/app/IApplicationThread$Default;->scheduleCreateBackupAgent(Landroid/content/pm/ApplicationInfo;Landroid/content/res/CompatibilityInfo;II)
Landroid/app/IApplicationThread$Stub$Proxy;->bindApplication(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;Landroid/content/pm/ProviderInfoList;Landroid/content/ComponentName;Landroid/app/ProfilerInfo;Landroid/os/Bundle;Landroid/app/IInstrumentationWatcher;Landroid/app/IUiAutomationConnection;IZZZZLandroid/content/res/Configuration;Landroid/content/res/CompatibilityInfo;Ljava/util/Map;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/AutofillOptions;Landroid/content/ContentCaptureOptions;[J)
Landroid/app/IApplicationThread$Stub$Proxy;->scheduleCrash(Ljava/lang/String;)
Landroid/app/IApplicationThread$Stub$Proxy;->scheduleCreateBackupAgent(Landroid/content/pm/ApplicationInfo;Landroid/content/res/CompatibilityInfo;II)
Landroid/app/INotificationManager;->addAutomaticZenRule(Landroid/app/AutomaticZenRule;)
Landroid/app/INotificationManager;->createConversationNotificationChannelForPackage(Ljava/lang/String;ILjava/lang/String;Landroid/app/NotificationChannel;Ljava/lang/String;)
Landroid/app/INotificationManager;->deleteConversationNotificationChannels(Ljava/lang/String;ILjava/lang/String;)
Landroid/app/INotificationManager;->setNotificationListenerAccessGranted(Landroid/content/ComponentName;Z)
Landroid/app/INotificationManager;->setNotificationListenerAccessGrantedForUser(Landroid/content/ComponentName;IZ)
Landroid/app/INotificationManager$Default;->addAutomaticZenRule(Landroid/app/AutomaticZenRule;)
Landroid/app/INotificationManager$Default;->createConversationNotificationChannelForPackage(Ljava/lang/String;ILjava/lang/String;Landroid/app/NotificationChannel;Ljava/lang/String;)
Landroid/app/INotificationManager$Default;->deleteConversationNotificationChannels(Ljava/lang/String;ILjava/lang/String;)
Landroid/app/INotificationManager$Default;->setNotificationListenerAccessGranted(Landroid/content/ComponentName;Z)
Landroid/app/INotificationManager$Default;->setNotificationListenerAccessGrantedForUser(Landroid/content/ComponentName;IZ)
Landroid/app/INotificationManager$Stub$Proxy;->addAutomaticZenRule(Landroid/app/AutomaticZenRule;)
Landroid/app/INotificationManager$Stub$Proxy;->createConversationNotificationChannelForPackage(Ljava/lang/String;ILjava/lang/String;Landroid/app/NotificationChannel;Ljava/lang/String;)
Landroid/app/INotificationManager$Stub$Proxy;->deleteConversationNotificationChannels(Ljava/lang/String;ILjava/lang/String;)
Landroid/app/INotificationManager$Stub$Proxy;->setNotificationListenerAccessGranted(Landroid/content/ComponentName;Z)
Landroid/app/INotificationManager$Stub$Proxy;->setNotificationListenerAccessGrantedForUser(Landroid/content/ComponentName;IZ)
Landroid/app/ITaskStackListener;->onActivityDismissingDockedStack()
Landroid/app/ITaskStackListener;->onSingleTaskDisplayDrawn(I)
Landroid/app/ITaskStackListener;->onSingleTaskDisplayEmpty(I)
Landroid/app/ITaskStackListener;->onSizeCompatModeActivityChanged(ILandroid/os/IBinder;)
Landroid/app/ITaskStackListener;->onTaskSnapshotChanged(ILandroid/app/ActivityManager$TaskSnapshot;)
Landroid/app/ITaskStackListener$Default;->onActivityDismissingDockedStack()
Landroid/app/ITaskStackListener$Default;->onSingleTaskDisplayDrawn(I)
Landroid/app/ITaskStackListener$Default;->onSingleTaskDisplayEmpty(I)
Landroid/app/ITaskStackListener$Default;->onSizeCompatModeActivityChanged(ILandroid/os/IBinder;)
Landroid/app/ITaskStackListener$Default;->onTaskSnapshotChanged(ILandroid/app/ActivityManager$TaskSnapshot;)
Landroid/app/ITaskStackListener$Stub$Proxy;->onActivityDismissingDockedStack()
Landroid/app/ITaskStackListener$Stub$Proxy;->onSingleTaskDisplayDrawn(I)
Landroid/app/ITaskStackListener$Stub$Proxy;->onSingleTaskDisplayEmpty(I)
Landroid/app/ITaskStackListener$Stub$Proxy;->onSizeCompatModeActivityChanged(ILandroid/os/IBinder;)
Landroid/app/ITaskStackListener$Stub$Proxy;->onTaskSnapshotChanged(ILandroid/app/ActivityManager$TaskSnapshot;)
Landroid/app/IUiAutomationConnection;->injectInputEvent(Landroid/view/InputEvent;Z)
Landroid/app/IUiAutomationConnection;->syncInputTransactions()
Landroid/app/IUiAutomationConnection;->takeScreenshot(Landroid/graphics/Rect;I)
Landroid/app/IUiAutomationConnection$Default;->injectInputEvent(Landroid/view/InputEvent;Z)
Landroid/app/IUiAutomationConnection$Default;->syncInputTransactions()
Landroid/app/IUiAutomationConnection$Default;->takeScreenshot(Landroid/graphics/Rect;I)
Landroid/app/IUiAutomationConnection$Stub$Proxy;->injectInputEvent(Landroid/view/InputEvent;Z)
Landroid/app/IUiAutomationConnection$Stub$Proxy;->syncInputTransactions()
Landroid/app/IUiAutomationConnection$Stub$Proxy;->takeScreenshot(Landroid/graphics/Rect;I)
Landroid/app/LoadedApk;->setupJitProfileSupport()
Landroid/app/Notification;->getNotificationArrayFromBundle(Landroid/os/Bundle;Ljava/lang/String;)
Landroid/app/Notification;->isColorizedMedia()
Landroid/app/Notification$Action;-><init>(Landroid/graphics/drawable/Icon;Ljava/lang/CharSequence;Landroid/app/PendingIntent;Landroid/os/Bundle;[Landroid/app/RemoteInput;ZIZ)
Landroid/app/Notification$Action;-><init>(Landroid/graphics/drawable/Icon;Ljava/lang/CharSequence;Landroid/app/PendingIntent;Landroid/os/Bundle;[Landroid/app/RemoteInput;ZIZLandroid/app/Notification$1;)
Landroid/app/Notification$Action$Builder;-><init>(Landroid/graphics/drawable/Icon;Ljava/lang/CharSequence;Landroid/app/PendingIntent;Landroid/os/Bundle;[Landroid/app/RemoteInput;ZI)
Landroid/app/Notification$BigPictureStyle;->areBitmapsObviouslyDifferent(Landroid/graphics/Bitmap;Landroid/graphics/Bitmap;)
Landroid/app/Notification$Builder;->applyStandardTemplate(ILandroid/app/Notification$TemplateBindResult;)
Landroid/app/Notification$Builder;->applyStandardTemplateWithActions(ILandroid/app/Notification$TemplateBindResult;)
Landroid/app/Notification$Builder;->bindActivePermissions(Landroid/widget/RemoteViews;Landroid/app/Notification$StandardTemplateParams;)
Landroid/app/Notification$Builder;->bindHeaderAppName(Landroid/widget/RemoteViews;Landroid/app/Notification$StandardTemplateParams;)
Landroid/app/Notification$Builder;->bindHeaderChronometerAndTime(Landroid/widget/RemoteViews;Landroid/app/Notification$StandardTemplateParams;)
Landroid/app/Notification$Builder;->bindHeaderText(Landroid/widget/RemoteViews;Landroid/app/Notification$StandardTemplateParams;)
Landroid/app/Notification$Builder;->bindHeaderTextSecondary(Landroid/widget/RemoteViews;Landroid/app/Notification$StandardTemplateParams;)
Landroid/app/Notification$Builder;->bindLargeIcon(Landroid/widget/RemoteViews;Landroid/app/Notification$StandardTemplateParams;)
Landroid/app/Notification$Builder;->bindLargeIconAndReply(Landroid/widget/RemoteViews;Landroid/app/Notification$StandardTemplateParams;Landroid/app/Notification$TemplateBindResult;)
Landroid/app/Notification$Builder;->bindReplyIcon(Landroid/widget/RemoteViews;Landroid/app/Notification$StandardTemplateParams;)
Landroid/app/Notification$Builder;->calculateMarginEnd(ZZ)
Landroid/app/Notification$Builder;->ensureColors(Landroid/app/Notification$StandardTemplateParams;)
Landroid/app/Notification$Builder;->filterOutContextualActions(Ljava/util/List;)
Landroid/app/Notification$Builder;->findReplyAction()
Landroid/app/Notification$Builder;->getNeutralColor(Landroid/app/Notification$StandardTemplateParams;)
Landroid/app/Notification$Builder;->getPrimaryTextColor()
Landroid/app/Notification$Builder;->getRawColor(Landroid/app/Notification$StandardTemplateParams;)
Landroid/app/Notification$Builder;->getSecondaryTextColor()
Landroid/app/Notification$Builder;->hasForegroundColor()
Landroid/app/Notification$Builder;->hideLine1Text(Landroid/widget/RemoteViews;)
Landroid/app/Notification$Builder;->isColorized(Landroid/app/Notification$StandardTemplateParams;)
Landroid/app/Notification$Builder;->makeNotificationHeader()
Landroid/app/Notification$Builder;->resolveBackgroundColor(Landroid/app/Notification$StandardTemplateParams;)
Landroid/app/Notification$Builder;->resolveContrastColor(Landroid/app/Notification$StandardTemplateParams;)
Landroid/app/Notification$Builder;->resolveNeutralColor()
Landroid/app/Notification$Builder;->setColorPalette(II)
Landroid/app/Notification$Builder;->setContentMinHeight(Landroid/widget/RemoteViews;Z)
Landroid/app/Notification$Builder;->setRebuildStyledRemoteViews(Z)
Landroid/app/Notification$Builder;->shouldTintActionButtons()
Landroid/app/Notification$Builder;->useExistingRemoteView()
Landroid/app/Notification$DecoratedCustomViewStyle;->buildIntoRemoteViewContent(Landroid/widget/RemoteViews;Landroid/widget/RemoteViews;Landroid/app/Notification$TemplateBindResult;)
Landroid/app/Notification$DecoratedMediaCustomViewStyle;->buildIntoRemoteView(Landroid/widget/RemoteViews;ILandroid/widget/RemoteViews;)
Landroid/app/Notification$DecoratedMediaCustomViewStyle;->makeBigContentViewWithCustomContent(Landroid/widget/RemoteViews;)
Landroid/app/Notification$InboxStyle;->handleInboxImageMargin(Landroid/widget/RemoteViews;IZI)
Landroid/app/Notification$MediaStyle;->getActionColor(Landroid/app/Notification$StandardTemplateParams;)
Landroid/app/Notification$MediaStyle;->handleImage(Landroid/widget/RemoteViews;)
Landroid/app/Notification$MediaStyle;->hasProgress()
Landroid/app/Notification$MediaStyle;->makeMediaBigContentView()
Landroid/app/Notification$MediaStyle;->makeMediaContentView()
Landroid/app/Notification$MessagingStyle;->createConversationTitleFromMessages()
Landroid/app/Notification$MessagingStyle;->makeFontColorSpan(I)
Landroid/app/Notification$MessagingStyle;->makeMessagingView(ZZ)
Landroid/app/Notification$StandardTemplateParams;->forceDefaultColor()
Landroid/app/Notification$StandardTemplateParams;->hasProgress(Z)
Landroid/app/Notification$StandardTemplateParams;->hideLargeIcon(Z)
Landroid/app/Notification$StandardTemplateParams;->hideReplyIcon(Z)
Landroid/app/Notification$Style;->hasProgress()
Landroid/app/Notification$TemplateBindResult;->getIconMarginEnd()
Landroid/app/Notification$TemplateBindResult;->isRightIconContainerVisible()
Landroid/app/Notification$TemplateBindResult;->setIconMarginEnd(I)
Landroid/app/Notification$TemplateBindResult;->setRightIconContainerVisible(Z)
Landroid/app/NotificationChannel;->populateFromXml(Lorg/xmlpull/v1/XmlPullParser;ZLandroid/content/Context;)
Landroid/app/NotificationChannel;->safeAudioAttributes(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/app/NotificationChannel;->safeBool(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;Z)
Landroid/app/NotificationChannel;->safeInt(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;I)
Landroid/app/NotificationChannel;->safeLongArray(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;[J)
Landroid/app/NotificationChannel;->safeUri(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Landroid/app/NotificationChannel;->tryParseInt(Ljava/lang/String;I)
Landroid/app/NotificationChannel;->writeXml(Lorg/xmlpull/v1/XmlSerializer;ZLandroid/content/Context;)
Landroid/app/NotificationChannelGroup;->populateFromXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/app/NotificationChannelGroup;->safeBool(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;Z)
Landroid/app/NotificationChannelGroup;->writeXml(Lorg/xmlpull/v1/XmlSerializer;)
Landroid/app/NotificationHistory;->removeConversationFromWrite(Ljava/lang/String;Ljava/lang/String;)
Landroid/app/PictureInPictureParams;-><init>(Landroid/util/Rational;Ljava/util/List;Landroid/graphics/Rect;)
Landroid/app/Presentation;->isConfigurationStillValid()
Landroid/app/ResourcesManager;->applyCompatConfigurationLocked(ILandroid/content/res/Configuration;)
Landroid/app/ResourcesManager;->applyConfigurationToResourcesLocked(Landroid/content/res/Configuration;Landroid/content/res/CompatibilityInfo;)
Landroid/app/ResourcesManager;->applyNewResourceDirsLocked(Landroid/content/pm/ApplicationInfo;[Ljava/lang/String;)
Landroid/app/ResourcesManager;->applyNonDefaultDisplayMetricsToConfiguration(Landroid/util/DisplayMetrics;Landroid/content/res/Configuration;)
Landroid/app/ResourcesManager;->createBaseTokenResources(Landroid/os/IBinder;Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;ILandroid/content/res/Configuration;Landroid/content/res/CompatibilityInfo;Ljava/lang/ClassLoader;Ljava/util/List;)
Landroid/app/ResourcesManager;->createResources(Landroid/os/IBinder;Landroid/content/res/ResourcesKey;Ljava/lang/ClassLoader;)
Landroid/app/ResourcesManager;->createResourcesForActivityLocked(Landroid/os/IBinder;Ljava/lang/ClassLoader;Landroid/content/res/ResourcesImpl;Landroid/content/res/CompatibilityInfo;)
Landroid/app/ResourcesManager;->createResourcesImpl(Landroid/content/res/ResourcesKey;)
Landroid/app/ResourcesManager;->generateConfig(Landroid/content/res/ResourcesKey;Landroid/util/DisplayMetrics;)
Landroid/app/ResourcesManager;->getAdjustedDisplay(ILandroid/view/DisplayAdjustments;)
Landroid/app/ResourcesManager;->getResources(Landroid/os/IBinder;Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;ILandroid/content/res/Configuration;Landroid/content/res/CompatibilityInfo;Ljava/lang/ClassLoader;Ljava/util/List;)
Landroid/app/ResourcesManager;->loadApkAssets(Ljava/lang/String;ZZ)
Landroid/app/ResourcesManager;->rebaseActivityOverrideConfig(Landroid/content/res/Resources;Landroid/content/res/Configuration;Landroid/content/res/Configuration;I)
Landroid/app/ResourcesManager;->rebaseKeyForActivity(Landroid/os/IBinder;Landroid/content/res/ResourcesKey;)
Landroid/app/ResourcesManager;->updateActivityResources(Landroid/content/res/Resources;Landroid/content/res/ResourcesKey;Z)
Landroid/app/ResourcesManager;->updateResourcesForActivity(Landroid/os/IBinder;Landroid/content/res/Configuration;IZ)
Landroid/app/StatusBarManager;->setDisabledForSimNetworkLock(Z)
Landroid/app/TaskInfo;->isResizable()
Landroid/app/TaskStackListener;->onActivityDismissingDockedStack()
Landroid/app/TaskStackListener;->onSingleTaskDisplayDrawn(I)
Landroid/app/TaskStackListener;->onSingleTaskDisplayEmpty(I)
Landroid/app/TaskStackListener;->onSizeCompatModeActivityChanged(ILandroid/os/IBinder;)
Landroid/app/TaskStackListener;->onTaskSnapshotChanged(ILandroid/app/ActivityManager$TaskSnapshot;)
Landroid/app/UiAutomation;->isConnectedLocked()
Landroid/app/UiAutomation$IAccessibilityServiceClientImpl;-><init>(Landroid/app/UiAutomation;Landroid/os/Looper;)
Landroid/app/UiAutomationConnection;->injectInputEvent(Landroid/view/InputEvent;Z)
Landroid/app/UiAutomationConnection;->syncInputTransactions()
Landroid/app/UiAutomationConnection;->takeScreenshot(Landroid/graphics/Rect;I)
Landroid/app/WallpaperColors;->setColorHints(I)
Landroid/app/WindowConfiguration;->windowsAreScaleable()
Landroid/app/WindowContext;-><init>(Landroid/content/Context;ILandroid/os/Bundle;)
Landroid/app/WindowContext;->createBaseWindowContext(Landroid/content/Context;Landroid/os/IBinder;)
Landroid/app/WindowContext;->destroy()
Landroid/app/WindowContext;->finalize()
Landroid/app/WindowContext;->getSystemService(Ljava/lang/String;)
Landroid/app/WindowContext;->release()
Landroid/app/WindowTokenClient;-><init>()
Landroid/app/WindowTokenClient;->attachContext(Landroid/app/WindowContext;)
Landroid/app/WindowTokenClient;->onConfigurationChanged(Landroid/content/res/Configuration;I)
Landroid/app/WindowTokenClient;->onWindowTokenRemoved()
Landroid/app/admin/DeviceAdminInfo;->readPoliciesFromXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/app/admin/DeviceAdminInfo;->writePoliciesToXml(Lorg/xmlpull/v1/XmlSerializer;)
Landroid/app/admin/DevicePolicyCache;->getScreenCaptureDisabled(I)
Landroid/app/admin/DevicePolicyCache$EmptyDevicePolicyCache;->getScreenCaptureDisabled(I)
Landroid/app/admin/DevicePolicyManager;->forceUpdateUserSetupComplete()
Landroid/app/admin/DevicePolicyManager;->getGuestUserDisabled(Landroid/content/ComponentName;)
Landroid/app/admin/DevicePolicyManager;->isProfileActivePasswordSufficientForParent(I)
Landroid/app/admin/DevicePolicyManager;->isSystemOnlyUser(Landroid/content/ComponentName;)
Landroid/app/admin/DevicePolicyManagerInternal;->isActiveAdminWithPolicy(II)
Landroid/app/admin/FactoryResetProtectionPolicy;->readFromXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/app/admin/FactoryResetProtectionPolicy;->writeToXml(Lorg/xmlpull/v1/XmlSerializer;)
Landroid/app/admin/IDevicePolicyManager;->forceUpdateUserSetupComplete()
Landroid/app/admin/IDevicePolicyManager;->getAlwaysOnVpnLockdownWhitelist(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager;->getPasswordMinimumMetrics(I)
Landroid/app/admin/IDevicePolicyManager;->getPermittedInputMethods(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager;->getProfileOwner(I)
Landroid/app/admin/IDevicePolicyManager;->isAffiliatedUser()
Landroid/app/admin/IDevicePolicyManager;->isInputMethodPermittedByAdmin(Landroid/content/ComponentName;Ljava/lang/String;I)
Landroid/app/admin/IDevicePolicyManager;->isProfileActivePasswordSufficientForParent(I)
Landroid/app/admin/IDevicePolicyManager;->isSecurityLoggingEnabled(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager;->isSystemOnlyUser(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager;->retrievePreRebootSecurityLogs(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager;->retrieveSecurityLogs(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager;->setPermittedInputMethods(Landroid/content/ComponentName;Ljava/util/List;)
Landroid/app/admin/IDevicePolicyManager;->setSecurityLoggingEnabled(Landroid/content/ComponentName;Z)
Landroid/app/admin/IDevicePolicyManager$Default;->forceUpdateUserSetupComplete()
Landroid/app/admin/IDevicePolicyManager$Default;->getAlwaysOnVpnLockdownWhitelist(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager$Default;->getPasswordMinimumMetrics(I)
Landroid/app/admin/IDevicePolicyManager$Default;->getPermittedInputMethods(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager$Default;->getProfileOwner(I)
Landroid/app/admin/IDevicePolicyManager$Default;->isAffiliatedUser()
Landroid/app/admin/IDevicePolicyManager$Default;->isInputMethodPermittedByAdmin(Landroid/content/ComponentName;Ljava/lang/String;I)
Landroid/app/admin/IDevicePolicyManager$Default;->isProfileActivePasswordSufficientForParent(I)
Landroid/app/admin/IDevicePolicyManager$Default;->isSecurityLoggingEnabled(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager$Default;->isSystemOnlyUser(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager$Default;->retrievePreRebootSecurityLogs(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager$Default;->retrieveSecurityLogs(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager$Default;->setPermittedInputMethods(Landroid/content/ComponentName;Ljava/util/List;)
Landroid/app/admin/IDevicePolicyManager$Default;->setSecurityLoggingEnabled(Landroid/content/ComponentName;Z)
Landroid/app/admin/IDevicePolicyManager$Stub$Proxy;->forceUpdateUserSetupComplete()
Landroid/app/admin/IDevicePolicyManager$Stub$Proxy;->getAlwaysOnVpnLockdownWhitelist(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager$Stub$Proxy;->getPasswordMinimumMetrics(I)
Landroid/app/admin/IDevicePolicyManager$Stub$Proxy;->getPermittedInputMethods(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager$Stub$Proxy;->getProfileOwner(I)
Landroid/app/admin/IDevicePolicyManager$Stub$Proxy;->isAffiliatedUser()
Landroid/app/admin/IDevicePolicyManager$Stub$Proxy;->isInputMethodPermittedByAdmin(Landroid/content/ComponentName;Ljava/lang/String;I)
Landroid/app/admin/IDevicePolicyManager$Stub$Proxy;->isProfileActivePasswordSufficientForParent(I)
Landroid/app/admin/IDevicePolicyManager$Stub$Proxy;->isSecurityLoggingEnabled(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager$Stub$Proxy;->isSystemOnlyUser(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager$Stub$Proxy;->retrievePreRebootSecurityLogs(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager$Stub$Proxy;->retrieveSecurityLogs(Landroid/content/ComponentName;)
Landroid/app/admin/IDevicePolicyManager$Stub$Proxy;->setPermittedInputMethods(Landroid/content/ComponentName;Ljava/util/List;)
Landroid/app/admin/IDevicePolicyManager$Stub$Proxy;->setSecurityLoggingEnabled(Landroid/content/ComponentName;Z)
Landroid/app/admin/PasswordMetrics;->computeForPassword([B)
Landroid/app/admin/PasswordMetrics;->validatePasswordMetrics(Landroid/app/admin/PasswordMetrics;IZLandroid/app/admin/PasswordMetrics;)
Landroid/app/admin/PasswordMetrics$ComplexityBucket;->allowsNumericPassword()
Landroid/app/admin/SystemUpdateInfo;->readFromXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/app/admin/SystemUpdateInfo;->writeToXml(Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;)
Landroid/app/admin/SystemUpdatePolicy;->restoreFromXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/app/admin/SystemUpdatePolicy;->saveToXml(Lorg/xmlpull/v1/XmlSerializer;)
Landroid/app/assist/AssistStructure$ViewNode;->writeSelfToParcel(Landroid/os/Parcel;Landroid/os/PooledStringWriter;Z[F)
Landroid/app/backup/BackupAgent;->applyXmlFiltersAndDoFullBackupForDomain(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;Landroid/util/ArraySet;Landroid/util/ArraySet;Landroid/app/backup/FullBackupDataOutput;)
Landroid/app/backup/BackupAgent;->fullBackupFileTree(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/util/ArraySet;Landroid/util/ArraySet;Landroid/app/backup/FullBackupDataOutput;)
Landroid/app/backup/BackupAgent;->manifestExcludesContainFilePath(Landroid/util/ArraySet;Ljava/lang/String;)
Landroid/app/backup/FullBackup;->getBackupScheme(Landroid/content/Context;)
Landroid/app/backup/FullBackup$BackupScheme;-><init>(Landroid/content/Context;)
Landroid/app/blob/BlobHandle;->dump(Lcom/android/internal/util/IndentingPrintWriter;Z)
Landroid/app/job/JobParameters;-><init>(Landroid/os/IBinder;ILandroid/os/PersistableBundle;Landroid/os/Bundle;Landroid/content/ClipData;IZ[Landroid/net/Uri;[Ljava/lang/String;Landroid/net/Network;)
Landroid/app/job/JobParameters;->getReasonCodeDescription(I)
Landroid/app/job/JobParameters;->setStopReason(ILjava/lang/String;)
Landroid/app/prediction/IPredictionManager;->createPredictionSession(Landroid/app/prediction/AppPredictionContext;Landroid/app/prediction/AppPredictionSessionId;)
Landroid/app/prediction/IPredictionManager$Default;->createPredictionSession(Landroid/app/prediction/AppPredictionContext;Landroid/app/prediction/AppPredictionSessionId;)
Landroid/app/prediction/IPredictionManager$Stub$Proxy;->createPredictionSession(Landroid/app/prediction/AppPredictionContext;Landroid/app/prediction/AppPredictionSessionId;)
Landroid/app/role/IOnRoleHoldersChangedListener$Stub;->getDefaultTransactionName(I)
Landroid/app/role/IOnRoleHoldersChangedListener$Stub;->getTransactionName(I)
Landroid/app/role/IRoleController$Stub;->getDefaultTransactionName(I)
Landroid/app/role/IRoleController$Stub;->getTransactionName(I)
Landroid/app/role/IRoleManager;->getDefaultSmsPackage(I)
Landroid/app/role/IRoleManager$Default;->getDefaultSmsPackage(I)
Landroid/app/role/IRoleManager$Stub;->getDefaultTransactionName(I)
Landroid/app/role/IRoleManager$Stub;->getTransactionName(I)
Landroid/app/role/IRoleManager$Stub$Proxy;->getDefaultSmsPackage(I)
Landroid/app/role/RoleControllerManager;->isApplicationQualifiedForRole(Ljava/lang/String;Ljava/lang/String;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)
Landroid/app/role/RoleControllerManager;->propagateCallback(Lcom/android/internal/infra/AndroidFuture;Ljava/lang/String;Landroid/os/RemoteCallback;)
Landroid/app/role/RoleControllerManager;->propagateCallback(Lcom/android/internal/infra/AndroidFuture;Ljava/lang/String;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)
Landroid/app/role/RoleManager;-><init>(Landroid/content/Context;)
Landroid/app/role/RoleManager;->getDefaultSmsPackage(I)
Landroid/app/servertransaction/ActivityConfigurationChangeItem;->execute(Landroid/app/ClientTransactionHandler;Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/servertransaction/ActivityRelaunchItem;->execute(Landroid/app/ClientTransactionHandler;Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/servertransaction/ActivityResultItem;->execute(Landroid/app/ClientTransactionHandler;Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/servertransaction/DestroyActivityItem;->execute(Landroid/app/ClientTransactionHandler;Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/servertransaction/EnterPipRequestedItem;->execute(Landroid/app/ClientTransactionHandler;Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/servertransaction/LaunchActivityItem;->obtain(Landroid/content/Intent;ILandroid/content/pm/ActivityInfo;Landroid/content/res/Configuration;Landroid/content/res/Configuration;Landroid/content/res/CompatibilityInfo;Ljava/lang/String;Lcom/android/internal/app/IVoiceInteractor;ILandroid/os/Bundle;Landroid/os/PersistableBundle;Ljava/util/List;Ljava/util/List;ZLandroid/app/ProfilerInfo;Landroid/os/IBinder;Landroid/view/DisplayAdjustments$FixedRotationAdjustments;)
Landroid/app/servertransaction/LaunchActivityItem;->setValues(Landroid/app/servertransaction/LaunchActivityItem;Landroid/content/Intent;ILandroid/content/pm/ActivityInfo;Landroid/content/res/Configuration;Landroid/content/res/Configuration;Landroid/content/res/CompatibilityInfo;Ljava/lang/String;Lcom/android/internal/app/IVoiceInteractor;ILandroid/os/Bundle;Landroid/os/PersistableBundle;Ljava/util/List;Ljava/util/List;ZLandroid/app/ProfilerInfo;Landroid/os/IBinder;Landroid/view/DisplayAdjustments$FixedRotationAdjustments;)
Landroid/app/servertransaction/MoveToDisplayItem;->execute(Landroid/app/ClientTransactionHandler;Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/servertransaction/NewIntentItem;->execute(Landroid/app/ClientTransactionHandler;Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/servertransaction/PauseActivityItem;->execute(Landroid/app/ClientTransactionHandler;Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/servertransaction/ResumeActivityItem;->execute(Landroid/app/ClientTransactionHandler;Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/servertransaction/StartActivityItem;->execute(Landroid/app/ClientTransactionHandler;Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/servertransaction/StartActivityItem;->obtain()
Landroid/app/servertransaction/StopActivityItem;->execute(Landroid/app/ClientTransactionHandler;Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/servertransaction/TopResumedActivityChangeItem;->execute(Landroid/app/ClientTransactionHandler;Landroid/os/IBinder;Landroid/app/servertransaction/PendingTransactionActions;)
Landroid/app/usage/IUsageStatsManager;->queryUsageStats(IJJLjava/lang/String;)
Landroid/app/usage/IUsageStatsManager$Default;->queryUsageStats(IJJLjava/lang/String;)
Landroid/app/usage/IUsageStatsManager$Stub$Proxy;->queryUsageStats(IJJLjava/lang/String;)
Landroid/app/usage/StorageStats;->getCodeBytes()
Landroid/appwidget/AppWidgetHost;-><init>(Landroid/content/Context;ILandroid/widget/RemoteViews$OnClickHandler;Landroid/os/Looper;)
Landroid/appwidget/AppWidgetHostView;-><init>(Landroid/content/Context;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/appwidget/AppWidgetHostView;->getHandler(Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/appwidget/AppWidgetHostView;->setOnClickHandler(Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/bluetooth/BluetoothA2dp;-><init>(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;)
Landroid/bluetooth/BluetoothA2dpSink;-><init>(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;)
Landroid/bluetooth/BluetoothAdapter;-><init>(Landroid/bluetooth/IBluetoothManager;)
Landroid/bluetooth/BluetoothAdapter;->getAttributionTag()
Landroid/bluetooth/BluetoothAdapter;->getOpPackageName()
Landroid/bluetooth/BluetoothAdapter;->listenUsingEncryptedRfcommOn(I)
Landroid/bluetooth/BluetoothAdapter;->listenUsingScoOn()
Landroid/bluetooth/BluetoothAdapter;->setContext(Landroid/content/Context;)
Landroid/bluetooth/BluetoothAdapter;->toDeviceSet([Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/BluetoothAvrcpController;-><init>(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;)
Landroid/bluetooth/BluetoothDevice;->createBondOutOfBand(ILandroid/bluetooth/OobData;)
Landroid/bluetooth/BluetoothDevice;->setDeviceOutOfBandData([B[B)
Landroid/bluetooth/BluetoothGatt;-><init>(Landroid/bluetooth/IBluetoothGatt;Landroid/bluetooth/BluetoothDevice;IZI)
Landroid/bluetooth/BluetoothGattServer;-><init>(Landroid/bluetooth/IBluetoothGatt;I)
Landroid/bluetooth/BluetoothHeadset;-><init>(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;)
Landroid/bluetooth/BluetoothHeadsetClient;-><init>(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;)
Landroid/bluetooth/BluetoothHearingAid;-><init>(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;)
Landroid/bluetooth/BluetoothHidDevice;-><init>(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;)
Landroid/bluetooth/BluetoothHidDevice$CallbackWrapper;-><init>(Ljava/util/concurrent/Executor;Landroid/bluetooth/BluetoothHidDevice$Callback;)
Landroid/bluetooth/BluetoothHidHost;-><init>(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;)
Landroid/bluetooth/BluetoothMap;-><init>(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;)
Landroid/bluetooth/BluetoothMapClient;-><init>(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;)
Landroid/bluetooth/BluetoothMapClient;->finalize()
Landroid/bluetooth/BluetoothPan;-><init>(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;)
Landroid/bluetooth/BluetoothPbap;-><init>(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;)
Landroid/bluetooth/BluetoothPbapClient;-><init>(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;)
Landroid/bluetooth/BluetoothSap;-><init>(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;)
Landroid/bluetooth/IBluetooth;->cancelBondProcess(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->cancelDiscovery()
Landroid/bluetooth/IBluetooth;->connectAllEnabledProfiles(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->createBond(Landroid/bluetooth/BluetoothDevice;ILandroid/bluetooth/OobData;)
Landroid/bluetooth/IBluetooth;->disable()
Landroid/bluetooth/IBluetooth;->disconnectAllEnabledProfiles(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->enable(Z)
Landroid/bluetooth/IBluetooth;->factoryReset()
Landroid/bluetooth/IBluetooth;->getBatteryLevel(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->getBluetoothClass()
Landroid/bluetooth/IBluetooth;->getBondState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->getBondedDevices()
Landroid/bluetooth/IBluetooth;->getDiscoverableTimeout()
Landroid/bluetooth/IBluetooth;->getDiscoveryEndMillis()
Landroid/bluetooth/IBluetooth;->getIoCapability()
Landroid/bluetooth/IBluetooth;->getLeIoCapability()
Landroid/bluetooth/IBluetooth;->getMaxConnectedAudioDevices()
Landroid/bluetooth/IBluetooth;->getMessageAccessPermission(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->getMetadata(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetooth;->getMostRecentlyConnectedDevices()
Landroid/bluetooth/IBluetooth;->getName()
Landroid/bluetooth/IBluetooth;->getPhonebookAccessPermission(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->getRemoteClass(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->getRemoteName(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->getRemoteType(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->getRemoteUuids(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->getScanMode()
Landroid/bluetooth/IBluetooth;->getSilenceMode(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->getSimAccessPermission(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->getUuids()
Landroid/bluetooth/IBluetooth;->isBondingInitiatedLocally(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->isDiscovering()
Landroid/bluetooth/IBluetooth;->onBrEdrDown()
Landroid/bluetooth/IBluetooth;->onLeServiceUp()
Landroid/bluetooth/IBluetooth;->registerCallback(Landroid/bluetooth/IBluetoothCallback;)
Landroid/bluetooth/IBluetooth;->registerMetadataListener(Landroid/bluetooth/IBluetoothMetadataListener;Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->removeActiveDevice(I)
Landroid/bluetooth/IBluetooth;->removeBond(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth;->reportActivityInfo()
Landroid/bluetooth/IBluetooth;->requestActivityInfo(Landroid/os/ResultReceiver;)
Landroid/bluetooth/IBluetooth;->sdpSearch(Landroid/bluetooth/BluetoothDevice;Landroid/os/ParcelUuid;)
Landroid/bluetooth/IBluetooth;->setActiveDevice(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetooth;->setBluetoothClass(Landroid/bluetooth/BluetoothClass;)
Landroid/bluetooth/IBluetooth;->setDiscoverableTimeout(I)
Landroid/bluetooth/IBluetooth;->setIoCapability(I)
Landroid/bluetooth/IBluetooth;->setLeIoCapability(I)
Landroid/bluetooth/IBluetooth;->setMessageAccessPermission(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetooth;->setMetadata(Landroid/bluetooth/BluetoothDevice;I[B)
Landroid/bluetooth/IBluetooth;->setName(Ljava/lang/String;)
Landroid/bluetooth/IBluetooth;->setPairingConfirmation(Landroid/bluetooth/BluetoothDevice;Z)
Landroid/bluetooth/IBluetooth;->setPasskey(Landroid/bluetooth/BluetoothDevice;ZI[B)
Landroid/bluetooth/IBluetooth;->setPhonebookAccessPermission(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetooth;->setPin(Landroid/bluetooth/BluetoothDevice;ZI[B)
Landroid/bluetooth/IBluetooth;->setRemoteAlias(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)
Landroid/bluetooth/IBluetooth;->setScanMode(II)
Landroid/bluetooth/IBluetooth;->setSilenceMode(Landroid/bluetooth/BluetoothDevice;Z)
Landroid/bluetooth/IBluetooth;->setSimAccessPermission(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetooth;->startDiscovery(Ljava/lang/String;Ljava/lang/String;)
Landroid/bluetooth/IBluetooth;->unregisterCallback(Landroid/bluetooth/IBluetoothCallback;)
Landroid/bluetooth/IBluetooth;->unregisterMetadataListener(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->cancelBondProcess(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->cancelDiscovery()
Landroid/bluetooth/IBluetooth$Default;->connectAllEnabledProfiles(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->createBond(Landroid/bluetooth/BluetoothDevice;ILandroid/bluetooth/OobData;)
Landroid/bluetooth/IBluetooth$Default;->disable()
Landroid/bluetooth/IBluetooth$Default;->disconnectAllEnabledProfiles(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->enable(Z)
Landroid/bluetooth/IBluetooth$Default;->factoryReset()
Landroid/bluetooth/IBluetooth$Default;->getBatteryLevel(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->getBluetoothClass()
Landroid/bluetooth/IBluetooth$Default;->getBondState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->getBondedDevices()
Landroid/bluetooth/IBluetooth$Default;->getDiscoverableTimeout()
Landroid/bluetooth/IBluetooth$Default;->getDiscoveryEndMillis()
Landroid/bluetooth/IBluetooth$Default;->getIoCapability()
Landroid/bluetooth/IBluetooth$Default;->getLeIoCapability()
Landroid/bluetooth/IBluetooth$Default;->getMaxConnectedAudioDevices()
Landroid/bluetooth/IBluetooth$Default;->getMessageAccessPermission(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->getMetadata(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetooth$Default;->getMostRecentlyConnectedDevices()
Landroid/bluetooth/IBluetooth$Default;->getName()
Landroid/bluetooth/IBluetooth$Default;->getPhonebookAccessPermission(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->getRemoteClass(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->getRemoteName(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->getRemoteType(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->getRemoteUuids(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->getScanMode()
Landroid/bluetooth/IBluetooth$Default;->getSilenceMode(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->getSimAccessPermission(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->getUuids()
Landroid/bluetooth/IBluetooth$Default;->isBondingInitiatedLocally(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->isDiscovering()
Landroid/bluetooth/IBluetooth$Default;->onBrEdrDown()
Landroid/bluetooth/IBluetooth$Default;->onLeServiceUp()
Landroid/bluetooth/IBluetooth$Default;->registerCallback(Landroid/bluetooth/IBluetoothCallback;)
Landroid/bluetooth/IBluetooth$Default;->registerMetadataListener(Landroid/bluetooth/IBluetoothMetadataListener;Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->removeActiveDevice(I)
Landroid/bluetooth/IBluetooth$Default;->removeBond(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Default;->reportActivityInfo()
Landroid/bluetooth/IBluetooth$Default;->requestActivityInfo(Landroid/os/ResultReceiver;)
Landroid/bluetooth/IBluetooth$Default;->sdpSearch(Landroid/bluetooth/BluetoothDevice;Landroid/os/ParcelUuid;)
Landroid/bluetooth/IBluetooth$Default;->setActiveDevice(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetooth$Default;->setBluetoothClass(Landroid/bluetooth/BluetoothClass;)
Landroid/bluetooth/IBluetooth$Default;->setDiscoverableTimeout(I)
Landroid/bluetooth/IBluetooth$Default;->setIoCapability(I)
Landroid/bluetooth/IBluetooth$Default;->setLeIoCapability(I)
Landroid/bluetooth/IBluetooth$Default;->setMessageAccessPermission(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetooth$Default;->setMetadata(Landroid/bluetooth/BluetoothDevice;I[B)
Landroid/bluetooth/IBluetooth$Default;->setName(Ljava/lang/String;)
Landroid/bluetooth/IBluetooth$Default;->setPairingConfirmation(Landroid/bluetooth/BluetoothDevice;Z)
Landroid/bluetooth/IBluetooth$Default;->setPasskey(Landroid/bluetooth/BluetoothDevice;ZI[B)
Landroid/bluetooth/IBluetooth$Default;->setPhonebookAccessPermission(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetooth$Default;->setPin(Landroid/bluetooth/BluetoothDevice;ZI[B)
Landroid/bluetooth/IBluetooth$Default;->setRemoteAlias(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)
Landroid/bluetooth/IBluetooth$Default;->setScanMode(II)
Landroid/bluetooth/IBluetooth$Default;->setSilenceMode(Landroid/bluetooth/BluetoothDevice;Z)
Landroid/bluetooth/IBluetooth$Default;->setSimAccessPermission(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetooth$Default;->startDiscovery(Ljava/lang/String;Ljava/lang/String;)
Landroid/bluetooth/IBluetooth$Default;->unregisterCallback(Landroid/bluetooth/IBluetoothCallback;)
Landroid/bluetooth/IBluetooth$Default;->unregisterMetadataListener(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->cancelBondProcess(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->cancelDiscovery()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->connectAllEnabledProfiles(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->createBond(Landroid/bluetooth/BluetoothDevice;ILandroid/bluetooth/OobData;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->disable()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->disconnectAllEnabledProfiles(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->enable(Z)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->factoryReset()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getBatteryLevel(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getBluetoothClass()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getBondState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getBondedDevices()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getDiscoverableTimeout()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getDiscoveryEndMillis()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getIoCapability()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getLeIoCapability()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getMaxConnectedAudioDevices()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getMessageAccessPermission(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getMetadata(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getMostRecentlyConnectedDevices()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getName()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getPhonebookAccessPermission(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getRemoteClass(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getRemoteName(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getRemoteType(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getRemoteUuids(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getScanMode()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getSilenceMode(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getSimAccessPermission(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->getUuids()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->isBondingInitiatedLocally(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->isDiscovering()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->onBrEdrDown()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->onLeServiceUp()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->registerCallback(Landroid/bluetooth/IBluetoothCallback;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->registerMetadataListener(Landroid/bluetooth/IBluetoothMetadataListener;Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->removeActiveDevice(I)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->removeBond(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->reportActivityInfo()
Landroid/bluetooth/IBluetooth$Stub$Proxy;->requestActivityInfo(Landroid/os/ResultReceiver;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->sdpSearch(Landroid/bluetooth/BluetoothDevice;Landroid/os/ParcelUuid;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setActiveDevice(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setBluetoothClass(Landroid/bluetooth/BluetoothClass;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setDiscoverableTimeout(I)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setIoCapability(I)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setLeIoCapability(I)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setMessageAccessPermission(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setMetadata(Landroid/bluetooth/BluetoothDevice;I[B)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setName(Ljava/lang/String;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setPairingConfirmation(Landroid/bluetooth/BluetoothDevice;Z)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setPasskey(Landroid/bluetooth/BluetoothDevice;ZI[B)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setPhonebookAccessPermission(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setPin(Landroid/bluetooth/BluetoothDevice;ZI[B)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setRemoteAlias(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setScanMode(II)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setSilenceMode(Landroid/bluetooth/BluetoothDevice;Z)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->setSimAccessPermission(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->startDiscovery(Ljava/lang/String;Ljava/lang/String;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->unregisterCallback(Landroid/bluetooth/IBluetoothCallback;)
Landroid/bluetooth/IBluetooth$Stub$Proxy;->unregisterMetadataListener(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp;->disableOptionalCodecs(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp;->enableOptionalCodecs(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp;->getActiveDevice()
Landroid/bluetooth/IBluetoothA2dp;->getCodecStatus(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp;->getOptionalCodecsEnabled(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp;->getPriority(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp;->isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp;->setActiveDevice(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp;->setAvrcpAbsoluteVolume(I)
Landroid/bluetooth/IBluetoothA2dp;->setCodecConfigPreference(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothCodecConfig;)
Landroid/bluetooth/IBluetoothA2dp;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothA2dp;->setOptionalCodecsEnabled(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothA2dp;->supportsOptionalCodecs(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Default;->disableOptionalCodecs(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Default;->enableOptionalCodecs(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Default;->getActiveDevice()
Landroid/bluetooth/IBluetoothA2dp$Default;->getCodecStatus(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Default;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Default;->getOptionalCodecsEnabled(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Default;->getPriority(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Default;->isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Default;->setActiveDevice(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Default;->setAvrcpAbsoluteVolume(I)
Landroid/bluetooth/IBluetoothA2dp$Default;->setCodecConfigPreference(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothCodecConfig;)
Landroid/bluetooth/IBluetoothA2dp$Default;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothA2dp$Default;->setOptionalCodecsEnabled(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothA2dp$Default;->supportsOptionalCodecs(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->disableOptionalCodecs(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->enableOptionalCodecs(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->getActiveDevice()
Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->getCodecStatus(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->getOptionalCodecsEnabled(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->getPriority(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->setActiveDevice(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->setAvrcpAbsoluteVolume(I)
Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->setCodecConfigPreference(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothCodecConfig;)
Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->setOptionalCodecsEnabled(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothA2dp$Stub$Proxy;->supportsOptionalCodecs(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink;->getAudioConfig(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink;->getConnectedDevices()
Landroid/bluetooth/IBluetoothA2dpSink;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothA2dpSink;->isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothA2dpSink$Default;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink$Default;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink$Default;->getAudioConfig(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink$Default;->getConnectedDevices()
Landroid/bluetooth/IBluetoothA2dpSink$Default;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink$Default;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink$Default;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothA2dpSink$Default;->isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink$Default;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothA2dpSink$Stub$Proxy;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink$Stub$Proxy;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink$Stub$Proxy;->getAudioConfig(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink$Stub$Proxy;->getConnectedDevices()
Landroid/bluetooth/IBluetoothA2dpSink$Stub$Proxy;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink$Stub$Proxy;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink$Stub$Proxy;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothA2dpSink$Stub$Proxy;->isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothA2dpSink$Stub$Proxy;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothAvrcpController;->getConnectedDevices()
Landroid/bluetooth/IBluetoothAvrcpController;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothAvrcpController;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothAvrcpController;->getPlayerSettings(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothAvrcpController;->sendGroupNavigationCmd(Landroid/bluetooth/BluetoothDevice;II)
Landroid/bluetooth/IBluetoothAvrcpController;->setPlayerApplicationSetting(Landroid/bluetooth/BluetoothAvrcpPlayerSettings;)
Landroid/bluetooth/IBluetoothAvrcpController$Default;->getConnectedDevices()
Landroid/bluetooth/IBluetoothAvrcpController$Default;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothAvrcpController$Default;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothAvrcpController$Default;->getPlayerSettings(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothAvrcpController$Default;->sendGroupNavigationCmd(Landroid/bluetooth/BluetoothDevice;II)
Landroid/bluetooth/IBluetoothAvrcpController$Default;->setPlayerApplicationSetting(Landroid/bluetooth/BluetoothAvrcpPlayerSettings;)
Landroid/bluetooth/IBluetoothAvrcpController$Stub$Proxy;->getConnectedDevices()
Landroid/bluetooth/IBluetoothAvrcpController$Stub$Proxy;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothAvrcpController$Stub$Proxy;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothAvrcpController$Stub$Proxy;->getPlayerSettings(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothAvrcpController$Stub$Proxy;->sendGroupNavigationCmd(Landroid/bluetooth/BluetoothDevice;II)
Landroid/bluetooth/IBluetoothAvrcpController$Stub$Proxy;->setPlayerApplicationSetting(Landroid/bluetooth/BluetoothAvrcpPlayerSettings;)
Landroid/bluetooth/IBluetoothGatt;->addService(ILandroid/bluetooth/BluetoothGattService;)
Landroid/bluetooth/IBluetoothGatt;->beginReliableWrite(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt;->clearServices(I)
Landroid/bluetooth/IBluetoothGatt;->clientConnect(ILjava/lang/String;ZIZI)
Landroid/bluetooth/IBluetoothGatt;->clientDisconnect(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt;->clientReadPhy(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt;->clientSetPreferredPhy(ILjava/lang/String;III)
Landroid/bluetooth/IBluetoothGatt;->configureMTU(ILjava/lang/String;I)
Landroid/bluetooth/IBluetoothGatt;->connectionParameterUpdate(ILjava/lang/String;I)
Landroid/bluetooth/IBluetoothGatt;->disconnectAll()
Landroid/bluetooth/IBluetoothGatt;->discoverServiceByUuid(ILjava/lang/String;Landroid/os/ParcelUuid;)
Landroid/bluetooth/IBluetoothGatt;->discoverServices(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt;->enableAdvertisingSet(IZII)
Landroid/bluetooth/IBluetoothGatt;->endReliableWrite(ILjava/lang/String;Z)
Landroid/bluetooth/IBluetoothGatt;->flushPendingBatchResults(I)
Landroid/bluetooth/IBluetoothGatt;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothGatt;->getOwnAddress(I)
Landroid/bluetooth/IBluetoothGatt;->leConnectionUpdate(ILjava/lang/String;IIIIII)
Landroid/bluetooth/IBluetoothGatt;->numHwTrackFiltersAvailable()
Landroid/bluetooth/IBluetoothGatt;->readCharacteristic(ILjava/lang/String;II)
Landroid/bluetooth/IBluetoothGatt;->readDescriptor(ILjava/lang/String;II)
Landroid/bluetooth/IBluetoothGatt;->readRemoteRssi(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt;->readUsingCharacteristicUuid(ILjava/lang/String;Landroid/os/ParcelUuid;III)
Landroid/bluetooth/IBluetoothGatt;->refreshDevice(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt;->registerClient(Landroid/os/ParcelUuid;Landroid/bluetooth/IBluetoothGattCallback;)
Landroid/bluetooth/IBluetoothGatt;->registerForNotification(ILjava/lang/String;IZ)
Landroid/bluetooth/IBluetoothGatt;->registerScanner(Landroid/bluetooth/le/IScannerCallback;Landroid/os/WorkSource;)
Landroid/bluetooth/IBluetoothGatt;->registerServer(Landroid/os/ParcelUuid;Landroid/bluetooth/IBluetoothGattServerCallback;)
Landroid/bluetooth/IBluetoothGatt;->registerSync(Landroid/bluetooth/le/ScanResult;IILandroid/bluetooth/le/IPeriodicAdvertisingCallback;)
Landroid/bluetooth/IBluetoothGatt;->removeService(II)
Landroid/bluetooth/IBluetoothGatt;->sendNotification(ILjava/lang/String;IZ[B)
Landroid/bluetooth/IBluetoothGatt;->sendResponse(ILjava/lang/String;III[B)
Landroid/bluetooth/IBluetoothGatt;->serverConnect(ILjava/lang/String;ZI)
Landroid/bluetooth/IBluetoothGatt;->serverDisconnect(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt;->serverReadPhy(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt;->serverSetPreferredPhy(ILjava/lang/String;III)
Landroid/bluetooth/IBluetoothGatt;->setAdvertisingData(ILandroid/bluetooth/le/AdvertiseData;)
Landroid/bluetooth/IBluetoothGatt;->setAdvertisingParameters(ILandroid/bluetooth/le/AdvertisingSetParameters;)
Landroid/bluetooth/IBluetoothGatt;->setPeriodicAdvertisingData(ILandroid/bluetooth/le/AdvertiseData;)
Landroid/bluetooth/IBluetoothGatt;->setPeriodicAdvertisingEnable(IZ)
Landroid/bluetooth/IBluetoothGatt;->setPeriodicAdvertisingParameters(ILandroid/bluetooth/le/PeriodicAdvertisingParameters;)
Landroid/bluetooth/IBluetoothGatt;->setScanResponseData(ILandroid/bluetooth/le/AdvertiseData;)
Landroid/bluetooth/IBluetoothGatt;->startAdvertisingSet(Landroid/bluetooth/le/AdvertisingSetParameters;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/PeriodicAdvertisingParameters;Landroid/bluetooth/le/AdvertiseData;IILandroid/bluetooth/le/IAdvertisingSetCallback;)
Landroid/bluetooth/IBluetoothGatt;->startScan(ILandroid/bluetooth/le/ScanSettings;Ljava/util/List;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothGatt;->startScanForIntent(Landroid/app/PendingIntent;Landroid/bluetooth/le/ScanSettings;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothGatt;->stopAdvertisingSet(Landroid/bluetooth/le/IAdvertisingSetCallback;)
Landroid/bluetooth/IBluetoothGatt;->stopScan(I)
Landroid/bluetooth/IBluetoothGatt;->stopScanForIntent(Landroid/app/PendingIntent;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothGatt;->unregAll()
Landroid/bluetooth/IBluetoothGatt;->unregisterClient(I)
Landroid/bluetooth/IBluetoothGatt;->unregisterScanner(I)
Landroid/bluetooth/IBluetoothGatt;->unregisterServer(I)
Landroid/bluetooth/IBluetoothGatt;->unregisterSync(Landroid/bluetooth/le/IPeriodicAdvertisingCallback;)
Landroid/bluetooth/IBluetoothGatt;->writeCharacteristic(ILjava/lang/String;III[B)
Landroid/bluetooth/IBluetoothGatt;->writeDescriptor(ILjava/lang/String;II[B)
Landroid/bluetooth/IBluetoothGatt$Default;->addService(ILandroid/bluetooth/BluetoothGattService;)
Landroid/bluetooth/IBluetoothGatt$Default;->beginReliableWrite(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Default;->clearServices(I)
Landroid/bluetooth/IBluetoothGatt$Default;->clientConnect(ILjava/lang/String;ZIZI)
Landroid/bluetooth/IBluetoothGatt$Default;->clientDisconnect(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Default;->clientReadPhy(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Default;->clientSetPreferredPhy(ILjava/lang/String;III)
Landroid/bluetooth/IBluetoothGatt$Default;->configureMTU(ILjava/lang/String;I)
Landroid/bluetooth/IBluetoothGatt$Default;->connectionParameterUpdate(ILjava/lang/String;I)
Landroid/bluetooth/IBluetoothGatt$Default;->disconnectAll()
Landroid/bluetooth/IBluetoothGatt$Default;->discoverServiceByUuid(ILjava/lang/String;Landroid/os/ParcelUuid;)
Landroid/bluetooth/IBluetoothGatt$Default;->discoverServices(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Default;->enableAdvertisingSet(IZII)
Landroid/bluetooth/IBluetoothGatt$Default;->endReliableWrite(ILjava/lang/String;Z)
Landroid/bluetooth/IBluetoothGatt$Default;->flushPendingBatchResults(I)
Landroid/bluetooth/IBluetoothGatt$Default;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothGatt$Default;->getOwnAddress(I)
Landroid/bluetooth/IBluetoothGatt$Default;->leConnectionUpdate(ILjava/lang/String;IIIIII)
Landroid/bluetooth/IBluetoothGatt$Default;->numHwTrackFiltersAvailable()
Landroid/bluetooth/IBluetoothGatt$Default;->readCharacteristic(ILjava/lang/String;II)
Landroid/bluetooth/IBluetoothGatt$Default;->readDescriptor(ILjava/lang/String;II)
Landroid/bluetooth/IBluetoothGatt$Default;->readRemoteRssi(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Default;->readUsingCharacteristicUuid(ILjava/lang/String;Landroid/os/ParcelUuid;III)
Landroid/bluetooth/IBluetoothGatt$Default;->refreshDevice(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Default;->registerClient(Landroid/os/ParcelUuid;Landroid/bluetooth/IBluetoothGattCallback;)
Landroid/bluetooth/IBluetoothGatt$Default;->registerForNotification(ILjava/lang/String;IZ)
Landroid/bluetooth/IBluetoothGatt$Default;->registerScanner(Landroid/bluetooth/le/IScannerCallback;Landroid/os/WorkSource;)
Landroid/bluetooth/IBluetoothGatt$Default;->registerServer(Landroid/os/ParcelUuid;Landroid/bluetooth/IBluetoothGattServerCallback;)
Landroid/bluetooth/IBluetoothGatt$Default;->registerSync(Landroid/bluetooth/le/ScanResult;IILandroid/bluetooth/le/IPeriodicAdvertisingCallback;)
Landroid/bluetooth/IBluetoothGatt$Default;->removeService(II)
Landroid/bluetooth/IBluetoothGatt$Default;->sendNotification(ILjava/lang/String;IZ[B)
Landroid/bluetooth/IBluetoothGatt$Default;->sendResponse(ILjava/lang/String;III[B)
Landroid/bluetooth/IBluetoothGatt$Default;->serverConnect(ILjava/lang/String;ZI)
Landroid/bluetooth/IBluetoothGatt$Default;->serverDisconnect(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Default;->serverReadPhy(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Default;->serverSetPreferredPhy(ILjava/lang/String;III)
Landroid/bluetooth/IBluetoothGatt$Default;->setAdvertisingData(ILandroid/bluetooth/le/AdvertiseData;)
Landroid/bluetooth/IBluetoothGatt$Default;->setAdvertisingParameters(ILandroid/bluetooth/le/AdvertisingSetParameters;)
Landroid/bluetooth/IBluetoothGatt$Default;->setPeriodicAdvertisingData(ILandroid/bluetooth/le/AdvertiseData;)
Landroid/bluetooth/IBluetoothGatt$Default;->setPeriodicAdvertisingEnable(IZ)
Landroid/bluetooth/IBluetoothGatt$Default;->setPeriodicAdvertisingParameters(ILandroid/bluetooth/le/PeriodicAdvertisingParameters;)
Landroid/bluetooth/IBluetoothGatt$Default;->setScanResponseData(ILandroid/bluetooth/le/AdvertiseData;)
Landroid/bluetooth/IBluetoothGatt$Default;->startAdvertisingSet(Landroid/bluetooth/le/AdvertisingSetParameters;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/PeriodicAdvertisingParameters;Landroid/bluetooth/le/AdvertiseData;IILandroid/bluetooth/le/IAdvertisingSetCallback;)
Landroid/bluetooth/IBluetoothGatt$Default;->startScan(ILandroid/bluetooth/le/ScanSettings;Ljava/util/List;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Default;->startScanForIntent(Landroid/app/PendingIntent;Landroid/bluetooth/le/ScanSettings;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Default;->stopAdvertisingSet(Landroid/bluetooth/le/IAdvertisingSetCallback;)
Landroid/bluetooth/IBluetoothGatt$Default;->stopScan(I)
Landroid/bluetooth/IBluetoothGatt$Default;->stopScanForIntent(Landroid/app/PendingIntent;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Default;->unregAll()
Landroid/bluetooth/IBluetoothGatt$Default;->unregisterClient(I)
Landroid/bluetooth/IBluetoothGatt$Default;->unregisterScanner(I)
Landroid/bluetooth/IBluetoothGatt$Default;->unregisterServer(I)
Landroid/bluetooth/IBluetoothGatt$Default;->unregisterSync(Landroid/bluetooth/le/IPeriodicAdvertisingCallback;)
Landroid/bluetooth/IBluetoothGatt$Default;->writeCharacteristic(ILjava/lang/String;III[B)
Landroid/bluetooth/IBluetoothGatt$Default;->writeDescriptor(ILjava/lang/String;II[B)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->addService(ILandroid/bluetooth/BluetoothGattService;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->beginReliableWrite(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->clearServices(I)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->clientConnect(ILjava/lang/String;ZIZI)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->clientDisconnect(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->clientReadPhy(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->clientSetPreferredPhy(ILjava/lang/String;III)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->configureMTU(ILjava/lang/String;I)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->connectionParameterUpdate(ILjava/lang/String;I)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->disconnectAll()
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->discoverServiceByUuid(ILjava/lang/String;Landroid/os/ParcelUuid;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->discoverServices(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->enableAdvertisingSet(IZII)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->endReliableWrite(ILjava/lang/String;Z)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->flushPendingBatchResults(I)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->getOwnAddress(I)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->leConnectionUpdate(ILjava/lang/String;IIIIII)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->numHwTrackFiltersAvailable()
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->readCharacteristic(ILjava/lang/String;II)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->readDescriptor(ILjava/lang/String;II)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->readRemoteRssi(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->readUsingCharacteristicUuid(ILjava/lang/String;Landroid/os/ParcelUuid;III)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->refreshDevice(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->registerClient(Landroid/os/ParcelUuid;Landroid/bluetooth/IBluetoothGattCallback;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->registerForNotification(ILjava/lang/String;IZ)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->registerScanner(Landroid/bluetooth/le/IScannerCallback;Landroid/os/WorkSource;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->registerServer(Landroid/os/ParcelUuid;Landroid/bluetooth/IBluetoothGattServerCallback;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->registerSync(Landroid/bluetooth/le/ScanResult;IILandroid/bluetooth/le/IPeriodicAdvertisingCallback;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->removeService(II)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->sendNotification(ILjava/lang/String;IZ[B)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->sendResponse(ILjava/lang/String;III[B)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->serverConnect(ILjava/lang/String;ZI)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->serverDisconnect(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->serverReadPhy(ILjava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->serverSetPreferredPhy(ILjava/lang/String;III)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->setAdvertisingData(ILandroid/bluetooth/le/AdvertiseData;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->setAdvertisingParameters(ILandroid/bluetooth/le/AdvertisingSetParameters;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->setPeriodicAdvertisingData(ILandroid/bluetooth/le/AdvertiseData;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->setPeriodicAdvertisingEnable(IZ)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->setPeriodicAdvertisingParameters(ILandroid/bluetooth/le/PeriodicAdvertisingParameters;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->setScanResponseData(ILandroid/bluetooth/le/AdvertiseData;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->startAdvertisingSet(Landroid/bluetooth/le/AdvertisingSetParameters;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/AdvertiseData;Landroid/bluetooth/le/PeriodicAdvertisingParameters;Landroid/bluetooth/le/AdvertiseData;IILandroid/bluetooth/le/IAdvertisingSetCallback;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->startScan(ILandroid/bluetooth/le/ScanSettings;Ljava/util/List;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->startScanForIntent(Landroid/app/PendingIntent;Landroid/bluetooth/le/ScanSettings;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->stopAdvertisingSet(Landroid/bluetooth/le/IAdvertisingSetCallback;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->stopScan(I)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->stopScanForIntent(Landroid/app/PendingIntent;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->unregAll()
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->unregisterClient(I)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->unregisterScanner(I)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->unregisterServer(I)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->unregisterSync(Landroid/bluetooth/le/IPeriodicAdvertisingCallback;)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->writeCharacteristic(ILjava/lang/String;III[B)
Landroid/bluetooth/IBluetoothGatt$Stub$Proxy;->writeDescriptor(ILjava/lang/String;II[B)
Landroid/bluetooth/IBluetoothHeadset;->clccResponse(IIIIZLjava/lang/String;I)
Landroid/bluetooth/IBluetoothHeadset;->connectAudio()
Landroid/bluetooth/IBluetoothHeadset;->disconnectAudio()
Landroid/bluetooth/IBluetoothHeadset;->getActiveDevice()
Landroid/bluetooth/IBluetoothHeadset;->getAudioRouteAllowed()
Landroid/bluetooth/IBluetoothHeadset;->getAudioState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothHeadset;->getPriority(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset;->isAudioConnected(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset;->isAudioOn()
Landroid/bluetooth/IBluetoothHeadset;->isInbandRingingEnabled()
Landroid/bluetooth/IBluetoothHeadset;->phoneStateChanged(IIILjava/lang/String;ILjava/lang/String;)
Landroid/bluetooth/IBluetoothHeadset;->sendVendorSpecificResultCode(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothHeadset;->setActiveDevice(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset;->setAudioRouteAllowed(Z)
Landroid/bluetooth/IBluetoothHeadset;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHeadset;->setForceScoAudio(Z)
Landroid/bluetooth/IBluetoothHeadset;->setPriority(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHeadset;->startScoUsingVirtualVoiceCall()
Landroid/bluetooth/IBluetoothHeadset;->startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset;->stopScoUsingVirtualVoiceCall()
Landroid/bluetooth/IBluetoothHeadset;->stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset$Default;->clccResponse(IIIIZLjava/lang/String;I)
Landroid/bluetooth/IBluetoothHeadset$Default;->connectAudio()
Landroid/bluetooth/IBluetoothHeadset$Default;->disconnectAudio()
Landroid/bluetooth/IBluetoothHeadset$Default;->getActiveDevice()
Landroid/bluetooth/IBluetoothHeadset$Default;->getAudioRouteAllowed()
Landroid/bluetooth/IBluetoothHeadset$Default;->getAudioState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset$Default;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset$Default;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothHeadset$Default;->getPriority(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset$Default;->isAudioConnected(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset$Default;->isAudioOn()
Landroid/bluetooth/IBluetoothHeadset$Default;->isInbandRingingEnabled()
Landroid/bluetooth/IBluetoothHeadset$Default;->phoneStateChanged(IIILjava/lang/String;ILjava/lang/String;)
Landroid/bluetooth/IBluetoothHeadset$Default;->sendVendorSpecificResultCode(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothHeadset$Default;->setActiveDevice(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset$Default;->setAudioRouteAllowed(Z)
Landroid/bluetooth/IBluetoothHeadset$Default;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHeadset$Default;->setForceScoAudio(Z)
Landroid/bluetooth/IBluetoothHeadset$Default;->setPriority(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHeadset$Default;->startScoUsingVirtualVoiceCall()
Landroid/bluetooth/IBluetoothHeadset$Default;->startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset$Default;->stopScoUsingVirtualVoiceCall()
Landroid/bluetooth/IBluetoothHeadset$Default;->stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->clccResponse(IIIIZLjava/lang/String;I)
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->connectAudio()
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->disconnectAudio()
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->getActiveDevice()
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->getAudioRouteAllowed()
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->getAudioState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->getPriority(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->isAudioConnected(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->isAudioOn()
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->isInbandRingingEnabled()
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->phoneStateChanged(IIILjava/lang/String;ILjava/lang/String;)
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->sendVendorSpecificResultCode(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->setActiveDevice(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->setAudioRouteAllowed(Z)
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->setForceScoAudio(Z)
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->setPriority(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->startScoUsingVirtualVoiceCall()
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->stopScoUsingVirtualVoiceCall()
Landroid/bluetooth/IBluetoothHeadset$Stub$Proxy;->stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->acceptCall(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHeadsetClient;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->connectAudio(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->dial(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothHeadsetClient;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->disconnectAudio(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->enterPrivateMode(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHeadsetClient;->explicitCallTransfer(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->getAudioRouteAllowed(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->getAudioState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->getConnectedDevices()
Landroid/bluetooth/IBluetoothHeadsetClient;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->getCurrentAgEvents(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->getCurrentAgFeatures(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->getCurrentCalls(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothHeadsetClient;->getLastVoiceTagNumber(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->holdCall(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->rejectCall(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->sendDTMF(Landroid/bluetooth/BluetoothDevice;B)
Landroid/bluetooth/IBluetoothHeadsetClient;->sendVendorAtCommand(Landroid/bluetooth/BluetoothDevice;ILjava/lang/String;)
Landroid/bluetooth/IBluetoothHeadsetClient;->setAudioRouteAllowed(Landroid/bluetooth/BluetoothDevice;Z)
Landroid/bluetooth/IBluetoothHeadsetClient;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHeadsetClient;->startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient;->terminateCall(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHeadsetClientCall;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->acceptCall(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->connectAudio(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->dial(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->disconnectAudio(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->enterPrivateMode(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->explicitCallTransfer(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->getAudioRouteAllowed(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->getAudioState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->getConnectedDevices()
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->getCurrentAgEvents(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->getCurrentAgFeatures(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->getCurrentCalls(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->getLastVoiceTagNumber(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->holdCall(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->rejectCall(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->sendDTMF(Landroid/bluetooth/BluetoothDevice;B)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->sendVendorAtCommand(Landroid/bluetooth/BluetoothDevice;ILjava/lang/String;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->setAudioRouteAllowed(Landroid/bluetooth/BluetoothDevice;Z)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Default;->terminateCall(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHeadsetClientCall;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->acceptCall(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->connectAudio(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->dial(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->disconnectAudio(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->enterPrivateMode(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->explicitCallTransfer(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->getAudioRouteAllowed(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->getAudioState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->getConnectedDevices()
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->getCurrentAgEvents(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->getCurrentAgFeatures(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->getCurrentCalls(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->getLastVoiceTagNumber(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->holdCall(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->rejectCall(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->sendDTMF(Landroid/bluetooth/BluetoothDevice;B)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->sendVendorAtCommand(Landroid/bluetooth/BluetoothDevice;ILjava/lang/String;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->setAudioRouteAllowed(Landroid/bluetooth/BluetoothDevice;Z)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHeadsetClient$Stub$Proxy;->terminateCall(Landroid/bluetooth/BluetoothDevice;Landroid/bluetooth/BluetoothHeadsetClientCall;)
Landroid/bluetooth/IBluetoothHeadsetPhone;->answerCall()
Landroid/bluetooth/IBluetoothHeadsetPhone;->cdmaSetSecondCallState(Z)
Landroid/bluetooth/IBluetoothHeadsetPhone;->cdmaSwapSecondCallState()
Landroid/bluetooth/IBluetoothHeadsetPhone;->getNetworkOperator()
Landroid/bluetooth/IBluetoothHeadsetPhone;->getSubscriberNumber()
Landroid/bluetooth/IBluetoothHeadsetPhone;->hangupCall()
Landroid/bluetooth/IBluetoothHeadsetPhone;->listCurrentCalls()
Landroid/bluetooth/IBluetoothHeadsetPhone;->processChld(I)
Landroid/bluetooth/IBluetoothHeadsetPhone;->queryPhoneState()
Landroid/bluetooth/IBluetoothHeadsetPhone;->sendDtmf(I)
Landroid/bluetooth/IBluetoothHeadsetPhone;->updateBtHandsfreeAfterRadioTechnologyChange()
Landroid/bluetooth/IBluetoothHeadsetPhone$Default;-><init>()
Landroid/bluetooth/IBluetoothHeadsetPhone$Default;->answerCall()
Landroid/bluetooth/IBluetoothHeadsetPhone$Default;->asBinder()
Landroid/bluetooth/IBluetoothHeadsetPhone$Default;->cdmaSetSecondCallState(Z)
Landroid/bluetooth/IBluetoothHeadsetPhone$Default;->cdmaSwapSecondCallState()
Landroid/bluetooth/IBluetoothHeadsetPhone$Default;->getNetworkOperator()
Landroid/bluetooth/IBluetoothHeadsetPhone$Default;->getSubscriberNumber()
Landroid/bluetooth/IBluetoothHeadsetPhone$Default;->hangupCall()
Landroid/bluetooth/IBluetoothHeadsetPhone$Default;->listCurrentCalls()
Landroid/bluetooth/IBluetoothHeadsetPhone$Default;->processChld(I)
Landroid/bluetooth/IBluetoothHeadsetPhone$Default;->queryPhoneState()
Landroid/bluetooth/IBluetoothHeadsetPhone$Default;->sendDtmf(I)
Landroid/bluetooth/IBluetoothHeadsetPhone$Default;->updateBtHandsfreeAfterRadioTechnologyChange()
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;-><init>()
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->asBinder()
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->getDefaultImpl()
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->getDefaultTransactionName(I)
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->getTransactionName(I)
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub;->setDefaultImpl(Landroid/bluetooth/IBluetoothHeadsetPhone;)
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;->answerCall()
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;->asBinder()
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;->cdmaSetSecondCallState(Z)
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;->cdmaSwapSecondCallState()
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;->getInterfaceDescriptor()
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;->getNetworkOperator()
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;->getSubscriberNumber()
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;->hangupCall()
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;->listCurrentCalls()
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;->processChld(I)
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;->queryPhoneState()
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;->sendDtmf(I)
Landroid/bluetooth/IBluetoothHeadsetPhone$Stub$Proxy;->updateBtHandsfreeAfterRadioTechnologyChange()
Landroid/bluetooth/IBluetoothHearingAid;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid;->getActiveDevices()
Landroid/bluetooth/IBluetoothHearingAid;->getConnectedDevices()
Landroid/bluetooth/IBluetoothHearingAid;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid;->getDeviceMode(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid;->getDeviceSide(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothHearingAid;->getHiSyncId(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid;->setActiveDevice(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHearingAid;->setVolume(I)
Landroid/bluetooth/IBluetoothHearingAid$Default;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Default;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Default;->getActiveDevices()
Landroid/bluetooth/IBluetoothHearingAid$Default;->getConnectedDevices()
Landroid/bluetooth/IBluetoothHearingAid$Default;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Default;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Default;->getDeviceMode(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Default;->getDeviceSide(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Default;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothHearingAid$Default;->getHiSyncId(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Default;->setActiveDevice(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Default;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHearingAid$Default;->setVolume(I)
Landroid/bluetooth/IBluetoothHearingAid$Stub$Proxy;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Stub$Proxy;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Stub$Proxy;->getActiveDevices()
Landroid/bluetooth/IBluetoothHearingAid$Stub$Proxy;->getConnectedDevices()
Landroid/bluetooth/IBluetoothHearingAid$Stub$Proxy;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Stub$Proxy;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Stub$Proxy;->getDeviceMode(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Stub$Proxy;->getDeviceSide(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Stub$Proxy;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothHearingAid$Stub$Proxy;->getHiSyncId(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Stub$Proxy;->setActiveDevice(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHearingAid$Stub$Proxy;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHearingAid$Stub$Proxy;->setVolume(I)
Landroid/bluetooth/IBluetoothHidDevice;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidDevice;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidDevice;->getConnectedDevices()
Landroid/bluetooth/IBluetoothHidDevice;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidDevice;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothHidDevice;->getUserAppName()
Landroid/bluetooth/IBluetoothHidDevice;->registerApp(Landroid/bluetooth/BluetoothHidDeviceAppSdpSettings;Landroid/bluetooth/BluetoothHidDeviceAppQosSettings;Landroid/bluetooth/BluetoothHidDeviceAppQosSettings;Landroid/bluetooth/IBluetoothHidDeviceCallback;)
Landroid/bluetooth/IBluetoothHidDevice;->replyReport(Landroid/bluetooth/BluetoothDevice;BB[B)
Landroid/bluetooth/IBluetoothHidDevice;->reportError(Landroid/bluetooth/BluetoothDevice;B)
Landroid/bluetooth/IBluetoothHidDevice;->sendReport(Landroid/bluetooth/BluetoothDevice;I[B)
Landroid/bluetooth/IBluetoothHidDevice;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHidDevice;->unplug(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidDevice;->unregisterApp()
Landroid/bluetooth/IBluetoothHidDevice$Default;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidDevice$Default;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidDevice$Default;->getConnectedDevices()
Landroid/bluetooth/IBluetoothHidDevice$Default;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidDevice$Default;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothHidDevice$Default;->getUserAppName()
Landroid/bluetooth/IBluetoothHidDevice$Default;->registerApp(Landroid/bluetooth/BluetoothHidDeviceAppSdpSettings;Landroid/bluetooth/BluetoothHidDeviceAppQosSettings;Landroid/bluetooth/BluetoothHidDeviceAppQosSettings;Landroid/bluetooth/IBluetoothHidDeviceCallback;)
Landroid/bluetooth/IBluetoothHidDevice$Default;->replyReport(Landroid/bluetooth/BluetoothDevice;BB[B)
Landroid/bluetooth/IBluetoothHidDevice$Default;->reportError(Landroid/bluetooth/BluetoothDevice;B)
Landroid/bluetooth/IBluetoothHidDevice$Default;->sendReport(Landroid/bluetooth/BluetoothDevice;I[B)
Landroid/bluetooth/IBluetoothHidDevice$Default;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHidDevice$Default;->unplug(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidDevice$Default;->unregisterApp()
Landroid/bluetooth/IBluetoothHidDevice$Stub$Proxy;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidDevice$Stub$Proxy;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidDevice$Stub$Proxy;->getConnectedDevices()
Landroid/bluetooth/IBluetoothHidDevice$Stub$Proxy;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidDevice$Stub$Proxy;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothHidDevice$Stub$Proxy;->getUserAppName()
Landroid/bluetooth/IBluetoothHidDevice$Stub$Proxy;->registerApp(Landroid/bluetooth/BluetoothHidDeviceAppSdpSettings;Landroid/bluetooth/BluetoothHidDeviceAppQosSettings;Landroid/bluetooth/BluetoothHidDeviceAppQosSettings;Landroid/bluetooth/IBluetoothHidDeviceCallback;)
Landroid/bluetooth/IBluetoothHidDevice$Stub$Proxy;->replyReport(Landroid/bluetooth/BluetoothDevice;BB[B)
Landroid/bluetooth/IBluetoothHidDevice$Stub$Proxy;->reportError(Landroid/bluetooth/BluetoothDevice;B)
Landroid/bluetooth/IBluetoothHidDevice$Stub$Proxy;->sendReport(Landroid/bluetooth/BluetoothDevice;I[B)
Landroid/bluetooth/IBluetoothHidDevice$Stub$Proxy;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHidDevice$Stub$Proxy;->unplug(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidDevice$Stub$Proxy;->unregisterApp()
Landroid/bluetooth/IBluetoothHidHost;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost;->getConnectedDevices()
Landroid/bluetooth/IBluetoothHidHost;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothHidHost;->getIdleTime(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost;->getProtocolMode(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost;->getReport(Landroid/bluetooth/BluetoothDevice;BBI)
Landroid/bluetooth/IBluetoothHidHost;->sendData(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothHidHost;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHidHost;->setIdleTime(Landroid/bluetooth/BluetoothDevice;B)
Landroid/bluetooth/IBluetoothHidHost;->setProtocolMode(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHidHost;->setReport(Landroid/bluetooth/BluetoothDevice;BLjava/lang/String;)
Landroid/bluetooth/IBluetoothHidHost;->virtualUnplug(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost$Default;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost$Default;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost$Default;->getConnectedDevices()
Landroid/bluetooth/IBluetoothHidHost$Default;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost$Default;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost$Default;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothHidHost$Default;->getIdleTime(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost$Default;->getProtocolMode(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost$Default;->getReport(Landroid/bluetooth/BluetoothDevice;BBI)
Landroid/bluetooth/IBluetoothHidHost$Default;->sendData(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothHidHost$Default;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHidHost$Default;->setIdleTime(Landroid/bluetooth/BluetoothDevice;B)
Landroid/bluetooth/IBluetoothHidHost$Default;->setProtocolMode(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHidHost$Default;->setReport(Landroid/bluetooth/BluetoothDevice;BLjava/lang/String;)
Landroid/bluetooth/IBluetoothHidHost$Default;->virtualUnplug(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost$Stub$Proxy;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost$Stub$Proxy;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost$Stub$Proxy;->getConnectedDevices()
Landroid/bluetooth/IBluetoothHidHost$Stub$Proxy;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost$Stub$Proxy;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost$Stub$Proxy;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothHidHost$Stub$Proxy;->getIdleTime(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost$Stub$Proxy;->getProtocolMode(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothHidHost$Stub$Proxy;->getReport(Landroid/bluetooth/BluetoothDevice;BBI)
Landroid/bluetooth/IBluetoothHidHost$Stub$Proxy;->sendData(Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)
Landroid/bluetooth/IBluetoothHidHost$Stub$Proxy;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHidHost$Stub$Proxy;->setIdleTime(Landroid/bluetooth/BluetoothDevice;B)
Landroid/bluetooth/IBluetoothHidHost$Stub$Proxy;->setProtocolMode(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothHidHost$Stub$Proxy;->setReport(Landroid/bluetooth/BluetoothDevice;BLjava/lang/String;)
Landroid/bluetooth/IBluetoothHidHost$Stub$Proxy;->virtualUnplug(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothManager;->disable(Ljava/lang/String;Z)
Landroid/bluetooth/IBluetoothManager;->disableBle(Ljava/lang/String;Landroid/os/IBinder;)
Landroid/bluetooth/IBluetoothManager;->enable(Ljava/lang/String;)
Landroid/bluetooth/IBluetoothManager;->enableBle(Ljava/lang/String;Landroid/os/IBinder;)
Landroid/bluetooth/IBluetoothManager;->enableNoAutoConnect(Ljava/lang/String;)
Landroid/bluetooth/IBluetoothManager;->getAddress()
Landroid/bluetooth/IBluetoothManager;->getName()
Landroid/bluetooth/IBluetoothManager;->isEnabled()
Landroid/bluetooth/IBluetoothManager;->onFactoryReset()
Landroid/bluetooth/IBluetoothManager$Default;->disable(Ljava/lang/String;Z)
Landroid/bluetooth/IBluetoothManager$Default;->disableBle(Ljava/lang/String;Landroid/os/IBinder;)
Landroid/bluetooth/IBluetoothManager$Default;->enable(Ljava/lang/String;)
Landroid/bluetooth/IBluetoothManager$Default;->enableBle(Ljava/lang/String;Landroid/os/IBinder;)
Landroid/bluetooth/IBluetoothManager$Default;->enableNoAutoConnect(Ljava/lang/String;)
Landroid/bluetooth/IBluetoothManager$Default;->getAddress()
Landroid/bluetooth/IBluetoothManager$Default;->getName()
Landroid/bluetooth/IBluetoothManager$Default;->isEnabled()
Landroid/bluetooth/IBluetoothManager$Default;->onFactoryReset()
Landroid/bluetooth/IBluetoothManager$Stub$Proxy;->disable(Ljava/lang/String;Z)
Landroid/bluetooth/IBluetoothManager$Stub$Proxy;->disableBle(Ljava/lang/String;Landroid/os/IBinder;)
Landroid/bluetooth/IBluetoothManager$Stub$Proxy;->enable(Ljava/lang/String;)
Landroid/bluetooth/IBluetoothManager$Stub$Proxy;->enableBle(Ljava/lang/String;Landroid/os/IBinder;)
Landroid/bluetooth/IBluetoothManager$Stub$Proxy;->enableNoAutoConnect(Ljava/lang/String;)
Landroid/bluetooth/IBluetoothManager$Stub$Proxy;->getAddress()
Landroid/bluetooth/IBluetoothManager$Stub$Proxy;->getName()
Landroid/bluetooth/IBluetoothManager$Stub$Proxy;->isEnabled()
Landroid/bluetooth/IBluetoothManager$Stub$Proxy;->onFactoryReset()
Landroid/bluetooth/IBluetoothMap;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMap;->getClient()
Landroid/bluetooth/IBluetoothMap;->getConnectedDevices()
Landroid/bluetooth/IBluetoothMap;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMap;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMap;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothMap;->getState()
Landroid/bluetooth/IBluetoothMap;->isConnected(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMap;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothMap$Default;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMap$Default;->getClient()
Landroid/bluetooth/IBluetoothMap$Default;->getConnectedDevices()
Landroid/bluetooth/IBluetoothMap$Default;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMap$Default;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMap$Default;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothMap$Default;->getState()
Landroid/bluetooth/IBluetoothMap$Default;->isConnected(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMap$Default;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothMap$Stub$Proxy;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMap$Stub$Proxy;->getClient()
Landroid/bluetooth/IBluetoothMap$Stub$Proxy;->getConnectedDevices()
Landroid/bluetooth/IBluetoothMap$Stub$Proxy;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMap$Stub$Proxy;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMap$Stub$Proxy;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothMap$Stub$Proxy;->getState()
Landroid/bluetooth/IBluetoothMap$Stub$Proxy;->isConnected(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMap$Stub$Proxy;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothMapClient;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient;->getConnectedDevices()
Landroid/bluetooth/IBluetoothMapClient;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothMapClient;->getSupportedFeatures(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient;->getUnreadMessages(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient;->isConnected(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient;->sendMessage(Landroid/bluetooth/BluetoothDevice;[Landroid/net/Uri;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)
Landroid/bluetooth/IBluetoothMapClient;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothMapClient$Default;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient$Default;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient$Default;->getConnectedDevices()
Landroid/bluetooth/IBluetoothMapClient$Default;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient$Default;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient$Default;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothMapClient$Default;->getSupportedFeatures(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient$Default;->getUnreadMessages(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient$Default;->isConnected(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient$Default;->sendMessage(Landroid/bluetooth/BluetoothDevice;[Landroid/net/Uri;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)
Landroid/bluetooth/IBluetoothMapClient$Default;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothMapClient$Stub$Proxy;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient$Stub$Proxy;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient$Stub$Proxy;->getConnectedDevices()
Landroid/bluetooth/IBluetoothMapClient$Stub$Proxy;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient$Stub$Proxy;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient$Stub$Proxy;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothMapClient$Stub$Proxy;->getSupportedFeatures(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient$Stub$Proxy;->getUnreadMessages(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient$Stub$Proxy;->isConnected(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothMapClient$Stub$Proxy;->sendMessage(Landroid/bluetooth/BluetoothDevice;[Landroid/net/Uri;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)
Landroid/bluetooth/IBluetoothMapClient$Stub$Proxy;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothPan;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPan;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPan;->getConnectedDevices()
Landroid/bluetooth/IBluetoothPan;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPan;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothPan;->isTetheringOn()
Landroid/bluetooth/IBluetoothPan;->setBluetoothTethering(ZLjava/lang/String;)
Landroid/bluetooth/IBluetoothPan;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothPan$Default;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPan$Default;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPan$Default;->getConnectedDevices()
Landroid/bluetooth/IBluetoothPan$Default;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPan$Default;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothPan$Default;->isTetheringOn()
Landroid/bluetooth/IBluetoothPan$Default;->setBluetoothTethering(ZLjava/lang/String;)
Landroid/bluetooth/IBluetoothPan$Default;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothPan$Stub$Proxy;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPan$Stub$Proxy;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPan$Stub$Proxy;->getConnectedDevices()
Landroid/bluetooth/IBluetoothPan$Stub$Proxy;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPan$Stub$Proxy;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothPan$Stub$Proxy;->isTetheringOn()
Landroid/bluetooth/IBluetoothPan$Stub$Proxy;->setBluetoothTethering(ZLjava/lang/String;)
Landroid/bluetooth/IBluetoothPan$Stub$Proxy;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothPbap;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbap;->getConnectedDevices()
Landroid/bluetooth/IBluetoothPbap;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbap;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothPbap;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothPbap$Default;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbap$Default;->getConnectedDevices()
Landroid/bluetooth/IBluetoothPbap$Default;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbap$Default;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothPbap$Default;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothPbap$Stub$Proxy;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbap$Stub$Proxy;->getConnectedDevices()
Landroid/bluetooth/IBluetoothPbap$Stub$Proxy;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbap$Stub$Proxy;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothPbap$Stub$Proxy;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothPbapClient;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbapClient;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbapClient;->getConnectedDevices()
Landroid/bluetooth/IBluetoothPbapClient;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbapClient;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbapClient;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothPbapClient;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothPbapClient$Default;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbapClient$Default;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbapClient$Default;->getConnectedDevices()
Landroid/bluetooth/IBluetoothPbapClient$Default;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbapClient$Default;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbapClient$Default;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothPbapClient$Default;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothPbapClient$Stub$Proxy;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbapClient$Stub$Proxy;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbapClient$Stub$Proxy;->getConnectedDevices()
Landroid/bluetooth/IBluetoothPbapClient$Stub$Proxy;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbapClient$Stub$Proxy;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothPbapClient$Stub$Proxy;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothPbapClient$Stub$Proxy;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothSap;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothSap;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothSap;->getClient()
Landroid/bluetooth/IBluetoothSap;->getConnectedDevices()
Landroid/bluetooth/IBluetoothSap;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothSap;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothSap;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothSap;->getState()
Landroid/bluetooth/IBluetoothSap;->isConnected(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothSap;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothSap$Default;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothSap$Default;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothSap$Default;->getClient()
Landroid/bluetooth/IBluetoothSap$Default;->getConnectedDevices()
Landroid/bluetooth/IBluetoothSap$Default;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothSap$Default;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothSap$Default;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothSap$Default;->getState()
Landroid/bluetooth/IBluetoothSap$Default;->isConnected(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothSap$Default;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/IBluetoothSap$Stub$Proxy;->connect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothSap$Stub$Proxy;->disconnect(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothSap$Stub$Proxy;->getClient()
Landroid/bluetooth/IBluetoothSap$Stub$Proxy;->getConnectedDevices()
Landroid/bluetooth/IBluetoothSap$Stub$Proxy;->getConnectionPolicy(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothSap$Stub$Proxy;->getConnectionState(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothSap$Stub$Proxy;->getDevicesMatchingConnectionStates([I)
Landroid/bluetooth/IBluetoothSap$Stub$Proxy;->getState()
Landroid/bluetooth/IBluetoothSap$Stub$Proxy;->isConnected(Landroid/bluetooth/BluetoothDevice;)
Landroid/bluetooth/IBluetoothSap$Stub$Proxy;->setConnectionPolicy(Landroid/bluetooth/BluetoothDevice;I)
Landroid/bluetooth/OobData;-><init>()
Landroid/bluetooth/OobData;->getLeBluetoothDeviceAddress()
Landroid/bluetooth/OobData;->getLeSecureConnectionsConfirmation()
Landroid/bluetooth/OobData;->getLeSecureConnectionsRandom()
Landroid/bluetooth/OobData;->getSecurityManagerTk()
Landroid/bluetooth/OobData;->setLeBluetoothDeviceAddress([B)
Landroid/bluetooth/OobData;->setLeSecureConnectionsConfirmation([B)
Landroid/bluetooth/OobData;->setLeSecureConnectionsRandom([B)
Landroid/bluetooth/OobData;->setSecurityManagerTk([B)
Landroid/bluetooth/le/AdvertiseData;-><init>(Ljava/util/List;Landroid/util/SparseArray;Ljava/util/Map;ZZ)
Landroid/bluetooth/le/AdvertiseData;-><init>(Ljava/util/List;Landroid/util/SparseArray;Ljava/util/Map;ZZLandroid/bluetooth/le/AdvertiseData$1;)
Landroid/bluetooth/le/AdvertisingSet;-><init>(ILandroid/bluetooth/IBluetoothManager;)
Landroid/bluetooth/le/BluetoothLeAdvertiser;-><init>(Landroid/bluetooth/IBluetoothManager;)
Landroid/bluetooth/le/BluetoothLeScanner;-><init>(Landroid/bluetooth/IBluetoothManager;Ljava/lang/String;Ljava/lang/String;)
Landroid/bluetooth/le/PeriodicAdvertisingManager;-><init>(Landroid/bluetooth/IBluetoothManager;)
Landroid/bluetooth/le/ScanFilter;-><init>(Ljava/lang/String;Ljava/lang/String;Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;[B[BI[B[B)
Landroid/bluetooth/le/ScanFilter;-><init>(Ljava/lang/String;Ljava/lang/String;Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;[B[BI[B[BLandroid/bluetooth/le/ScanFilter$1;)
Landroid/companion/Association;-><init>(ILjava/lang/String;Ljava/lang/String;)
Landroid/companion/AssociationRequest;-><init>(Landroid/os/Parcel;Landroid/companion/AssociationRequest$1;)
Landroid/companion/AssociationRequest;-><init>(ZLjava/util/List;)
Landroid/companion/AssociationRequest;-><init>(ZLjava/util/List;Landroid/companion/AssociationRequest$1;)
Landroid/companion/BluetoothDeviceFilterUtils;->matches(Landroid/bluetooth/le/ScanFilter;Landroid/bluetooth/BluetoothDevice;)
Landroid/companion/BluetoothLeDeviceFilter;->matches(Landroid/bluetooth/BluetoothDevice;)
Landroid/compat/Compatibility;->reportChange(J)
Landroid/compat/Compatibility;->setCallbacks(Landroid/compat/Compatibility$Callbacks;)
Landroid/compat/Compatibility$Callbacks;-><init>()
Landroid/compat/Compatibility$Callbacks;->isChangeEnabled(J)
Landroid/compat/Compatibility$Callbacks;->reportChange(J)
Landroid/compat/Compatibility$ChangeConfig;->forceDisabledChangesArray()
Landroid/compat/Compatibility$ChangeConfig;->forceDisabledSet()
Landroid/compat/Compatibility$ChangeConfig;->forceEnabledChangesArray()
Landroid/compat/Compatibility$ChangeConfig;->forceEnabledSet()
Landroid/compat/Compatibility$OverrideCallbacks;-><init>(Landroid/compat/Compatibility$Callbacks;Landroid/compat/Compatibility$ChangeConfig;)
Landroid/compat/Compatibility$OverrideCallbacks;-><init>(Landroid/compat/Compatibility$Callbacks;Landroid/compat/Compatibility$ChangeConfig;Landroid/compat/Compatibility$1;)
Landroid/content/ClipData;->prepareToEnterProcess()
Landroid/content/ClipData;->toShortString(Ljava/lang/StringBuilder;)
Landroid/content/ClipData;->toShortStringShortItems(Ljava/lang/StringBuilder;Z)
Landroid/content/ClipData$Item;->toShortString(Ljava/lang/StringBuilder;)
Landroid/content/ClipData$Item;->toShortSummaryString(Ljava/lang/StringBuilder;)
Landroid/content/ClipDescription;->toShortString(Ljava/lang/StringBuilder;)
Landroid/content/ContentProvider;->checkPermissionAndAppOp(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/IBinder;)
Landroid/content/ContentProvider;->enforceReadPermissionInner(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Landroid/os/IBinder;)
Landroid/content/ContentProvider;->enforceWritePermissionInner(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Landroid/os/IBinder;)
Landroid/content/ContentProvider;->setCallingPackage(Landroid/util/Pair;)
Landroid/content/ContentProvider$CallingIdentity;-><init>(Landroid/content/ContentProvider;JLandroid/util/Pair;)
Landroid/content/ContentProvider$Transport;->applyBatch(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;)
Landroid/content/ContentProvider$Transport;->bulkInsert(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;[Landroid/content/ContentValues;)
Landroid/content/ContentProvider$Transport;->call(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)
Landroid/content/ContentProvider$Transport;->canonicalize(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)
Landroid/content/ContentProvider$Transport;->canonicalizeAsync(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/RemoteCallback;)
Landroid/content/ContentProvider$Transport;->checkUriPermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;II)
Landroid/content/ContentProvider$Transport;->delete(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;)
Landroid/content/ContentProvider$Transport;->enforceFilePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/IBinder;)
Landroid/content/ContentProvider$Transport;->enforceReadPermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/IBinder;)
Landroid/content/ContentProvider$Transport;->enforceWritePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/IBinder;)
Landroid/content/ContentProvider$Transport;->insert(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/content/ContentValues;Landroid/os/Bundle;)
Landroid/content/ContentProvider$Transport;->noteProxyOp(Ljava/lang/String;Ljava/lang/String;I)
Landroid/content/ContentProvider$Transport;->openAssetFile(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/ICancellationSignal;)
Landroid/content/ContentProvider$Transport;->openFile(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/ICancellationSignal;Landroid/os/IBinder;)
Landroid/content/ContentProvider$Transport;->openTypedAssetFile(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/ICancellationSignal;)
Landroid/content/ContentProvider$Transport;->query(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;[Ljava/lang/String;Landroid/os/Bundle;Landroid/os/ICancellationSignal;)
Landroid/content/ContentProvider$Transport;->refresh(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;Landroid/os/ICancellationSignal;)
Landroid/content/ContentProvider$Transport;->uncanonicalize(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)
Landroid/content/ContentProvider$Transport;->update(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/content/ContentValues;Landroid/os/Bundle;)
Landroid/content/ContentProviderProxy;->applyBatch(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;)
Landroid/content/ContentProviderProxy;->bulkInsert(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;[Landroid/content/ContentValues;)
Landroid/content/ContentProviderProxy;->call(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)
Landroid/content/ContentProviderProxy;->canonicalize(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)
Landroid/content/ContentProviderProxy;->canonicalizeAsync(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/RemoteCallback;)
Landroid/content/ContentProviderProxy;->checkUriPermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;II)
Landroid/content/ContentProviderProxy;->delete(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;)
Landroid/content/ContentProviderProxy;->insert(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/content/ContentValues;Landroid/os/Bundle;)
Landroid/content/ContentProviderProxy;->openAssetFile(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/ICancellationSignal;)
Landroid/content/ContentProviderProxy;->openFile(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/ICancellationSignal;Landroid/os/IBinder;)
Landroid/content/ContentProviderProxy;->openTypedAssetFile(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/ICancellationSignal;)
Landroid/content/ContentProviderProxy;->query(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;[Ljava/lang/String;Landroid/os/Bundle;Landroid/os/ICancellationSignal;)
Landroid/content/ContentProviderProxy;->refresh(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;Landroid/os/ICancellationSignal;)
Landroid/content/ContentProviderProxy;->uncanonicalize(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)
Landroid/content/ContentProviderProxy;->update(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/content/ContentValues;Landroid/os/Bundle;)
Landroid/content/IContentProvider;->applyBatch(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;)
Landroid/content/IContentProvider;->bulkInsert(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;[Landroid/content/ContentValues;)
Landroid/content/IContentProvider;->call(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)
Landroid/content/IContentProvider;->canonicalize(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)
Landroid/content/IContentProvider;->canonicalizeAsync(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/RemoteCallback;)
Landroid/content/IContentProvider;->checkUriPermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;II)
Landroid/content/IContentProvider;->delete(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;)
Landroid/content/IContentProvider;->insert(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/content/ContentValues;Landroid/os/Bundle;)
Landroid/content/IContentProvider;->openAssetFile(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/ICancellationSignal;)
Landroid/content/IContentProvider;->openFile(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/ICancellationSignal;Landroid/os/IBinder;)
Landroid/content/IContentProvider;->openTypedAssetFile(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/ICancellationSignal;)
Landroid/content/IContentProvider;->query(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;[Ljava/lang/String;Landroid/os/Bundle;Landroid/os/ICancellationSignal;)
Landroid/content/IContentProvider;->refresh(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;Landroid/os/ICancellationSignal;)
Landroid/content/IContentProvider;->uncanonicalize(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)
Landroid/content/IContentProvider;->update(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/content/ContentValues;Landroid/os/Bundle;)
Landroid/content/Intent;->prepareToEnterProcess()
Landroid/content/Intent;->toInsecureStringWithClip()
Landroid/content/PermissionChecker;->checkAppOpPermission(Landroid/content/Context;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)
Landroid/content/PermissionChecker;->checkCallingOrSelfPermissionForDataDelivery(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Landroid/content/PermissionChecker;->checkPermissionCommon(Landroid/content/Context;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)
Landroid/content/PermissionChecker;->checkRuntimePermission(Landroid/content/Context;Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)
Landroid/content/SyncAdaptersCache$MySerializer;->createFromXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/content/SyncAdaptersCache$MySerializer;->writeAsXml(Landroid/content/SyncAdapterType;Lorg/xmlpull/v1/XmlSerializer;)
Landroid/content/SyncAdaptersCache$MySerializer;->writeAsXml(Ljava/lang/Object;Lorg/xmlpull/v1/XmlSerializer;)
Landroid/content/pm/DataLoaderManager;->bindToDataLoader(ILandroid/content/pm/DataLoaderParamsParcel;Landroid/content/pm/IDataLoaderStatusListener;)
Landroid/content/pm/IDataLoaderManager;->bindToDataLoader(ILandroid/content/pm/DataLoaderParamsParcel;Landroid/content/pm/IDataLoaderStatusListener;)
Landroid/content/pm/IDataLoaderManager$Default;->bindToDataLoader(ILandroid/content/pm/DataLoaderParamsParcel;Landroid/content/pm/IDataLoaderStatusListener;)
Landroid/content/pm/IDataLoaderManager$Stub$Proxy;->bindToDataLoader(ILandroid/content/pm/DataLoaderParamsParcel;Landroid/content/pm/IDataLoaderStatusListener;)
Landroid/content/pm/ILauncherApps;->resolveActivity(Ljava/lang/String;Landroid/content/ComponentName;Landroid/os/UserHandle;)
Landroid/content/pm/ILauncherApps$Default;->resolveActivity(Ljava/lang/String;Landroid/content/ComponentName;Landroid/os/UserHandle;)
Landroid/content/pm/ILauncherApps$Stub$Proxy;->resolveActivity(Ljava/lang/String;Landroid/content/ComponentName;Landroid/os/UserHandle;)
Landroid/content/pm/IPackageInstaller;->createSession(Landroid/content/pm/PackageInstaller$SessionParams;Ljava/lang/String;I)
Landroid/content/pm/IPackageInstaller$Default;->createSession(Landroid/content/pm/PackageInstaller$SessionParams;Ljava/lang/String;I)
Landroid/content/pm/IPackageInstaller$Stub$Proxy;->createSession(Landroid/content/pm/PackageInstaller$SessionParams;Ljava/lang/String;I)
Landroid/content/pm/IPackageManager;->addPreferredActivity(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;I)
Landroid/content/pm/IPackageManager;->compileLayouts(Ljava/lang/String;)
Landroid/content/pm/IPackageManager;->getIntentFilterVerificationBackup(I)
Landroid/content/pm/IPackageManager;->logAppProcessStartIfNeeded(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;I)
Landroid/content/pm/IPackageManager;->restoreIntentFilterVerification([BI)
Landroid/content/pm/IPackageManager$Default;->addPreferredActivity(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;I)
Landroid/content/pm/IPackageManager$Default;->compileLayouts(Ljava/lang/String;)
Landroid/content/pm/IPackageManager$Default;->getIntentFilterVerificationBackup(I)
Landroid/content/pm/IPackageManager$Default;->logAppProcessStartIfNeeded(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;I)
Landroid/content/pm/IPackageManager$Default;->restoreIntentFilterVerification([BI)
Landroid/content/pm/IPackageManager$Stub$Proxy;->addPreferredActivity(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;I)
Landroid/content/pm/IPackageManager$Stub$Proxy;->compileLayouts(Ljava/lang/String;)
Landroid/content/pm/IPackageManager$Stub$Proxy;->getIntentFilterVerificationBackup(I)
Landroid/content/pm/IPackageManager$Stub$Proxy;->logAppProcessStartIfNeeded(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;I)
Landroid/content/pm/IPackageManager$Stub$Proxy;->restoreIntentFilterVerification([BI)
Landroid/content/pm/IntentFilterVerificationInfo;-><init>(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/content/pm/IntentFilterVerificationInfo;->getIntFromXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;I)
Landroid/content/pm/IntentFilterVerificationInfo;->getStringFromXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;Ljava/lang/String;)
Landroid/content/pm/IntentFilterVerificationInfo;->readFromXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/content/pm/IntentFilterVerificationInfo;->writeToXml(Lorg/xmlpull/v1/XmlSerializer;)
Landroid/content/pm/LauncherActivityInfo;-><init>(Landroid/content/Context;)
Landroid/content/pm/LauncherActivityInfo;-><init>(Landroid/content/Context;Landroid/content/pm/ActivityInfo;Landroid/os/UserHandle;)
Landroid/content/pm/PackageInstaller;-><init>(Landroid/content/pm/IPackageInstaller;Ljava/lang/String;I)
Landroid/content/pm/PackageParser$ApkLite;-><init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;ZIIIILjava/util/List;Landroid/content/pm/PackageParser$SigningDetails;ZZZZZZZLjava/lang/String;ZIII)
Landroid/content/pm/PackageParser$PackageLite;-><init>(Ljava/lang/String;Landroid/content/pm/PackageParser$ApkLite;[Ljava/lang/String;[Z[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[I)
Landroid/content/pm/PackageUserState;->setOverlayPaths([Ljava/lang/String;)
Landroid/content/pm/PackageUserState;->setSharedLibraryOverlayPaths(Ljava/lang/String;[Ljava/lang/String;)
Landroid/content/pm/PackageUserState$SuspendParams;->restoreFromXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/content/pm/PackageUserState$SuspendParams;->saveToXml(Lorg/xmlpull/v1/XmlSerializer;)
Landroid/content/pm/ProcessInfo;-><init>(Ljava/lang/String;Landroid/util/ArraySet;I)
Landroid/content/pm/SharedLibraryInfo;-><init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;JILandroid/content/pm/VersionedPackage;Ljava/util/List;Ljava/util/List;)
Landroid/content/pm/ShortcutInfo;-><init>(ILjava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;Landroid/graphics/drawable/Icon;Ljava/lang/CharSequence;ILjava/lang/String;Ljava/lang/CharSequence;ILjava/lang/String;Ljava/lang/CharSequence;ILjava/lang/String;Ljava/util/Set;[Landroid/content/Intent;ILandroid/os/PersistableBundle;JIILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I[Landroid/app/Person;Landroid/content/LocusId;)
Landroid/content/pm/SuspendDialogInfo;->restoreFromXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/content/pm/SuspendDialogInfo;->saveToXml(Lorg/xmlpull/v1/XmlSerializer;)
Landroid/content/pm/dex/DexMetadataHelper;->getPackageDexMetadata(Landroid/content/pm/PackageParser$PackageLite;)
Landroid/content/pm/dex/DexMetadataHelper;->getPackageDexMetadataSize(Landroid/content/pm/PackageParser$PackageLite;)
Landroid/content/pm/dex/DexMetadataHelper;->validateDexMetadataFile(Ljava/lang/String;)
Landroid/content/pm/parsing/ApkLiteParseUtils;->parseApkLite(Landroid/content/pm/parsing/result/ParseInput;Ljava/lang/String;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;Landroid/content/pm/PackageParser$SigningDetails;)
Landroid/content/pm/parsing/ApkLiteParseUtils;->parsePackageSplitNames(Landroid/content/pm/parsing/result/ParseInput;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)
Landroid/content/pm/parsing/PackageInfoWithoutStateUtils;->generateActivityInfoUnchecked(Landroid/content/pm/parsing/component/ParsedActivity;Landroid/content/pm/ApplicationInfo;)
Landroid/content/pm/parsing/PackageInfoWithoutStateUtils;->generateApplicationInfoUnchecked(Landroid/content/pm/parsing/ParsingPackageRead;ILandroid/content/pm/PackageUserState;I)
Landroid/content/pm/parsing/PackageInfoWithoutStateUtils;->generateInstrumentationInfo(Landroid/content/pm/parsing/component/ParsedInstrumentation;Landroid/content/pm/parsing/ParsingPackageRead;II)
Landroid/content/pm/parsing/PackageInfoWithoutStateUtils;->generateServiceInfoUnchecked(Landroid/content/pm/parsing/component/ParsedService;Landroid/content/pm/ApplicationInfo;)
Landroid/content/pm/parsing/ParsingPackage;->addRequestedPermission(Ljava/lang/String;)
Landroid/content/pm/parsing/ParsingPackageImpl;->addRequestedPermission(Ljava/lang/String;)
Landroid/content/pm/parsing/ParsingPackageImpl;->getBaseCodePath()
Landroid/content/pm/parsing/ParsingPackageImpl;->getCodePath()
Landroid/content/pm/parsing/ParsingPackageRead;->getBaseCodePath()
Landroid/content/pm/parsing/ParsingPackageRead;->getCodePath()
Landroid/content/pm/parsing/ParsingPackageUtils;-><init>(Z[Ljava/lang/String;Landroid/util/DisplayMetrics;Landroid/content/pm/parsing/ParsingPackageUtils$Callback;)
Landroid/content/pm/parsing/ParsingPackageUtils;->parseBaseApk(Landroid/content/pm/parsing/result/ParseInput;Ljava/io/File;Ljava/lang/String;Landroid/content/res/AssetManager;I)
Landroid/content/pm/parsing/ParsingPackageUtils;->parseDefault(Landroid/content/pm/parsing/result/ParseInput;Ljava/io/File;IZ)
Landroid/content/pm/parsing/ParsingPackageUtils;->parseDefaultOneTime(Ljava/io/File;IZ)
Landroid/content/pm/parsing/ParsingPackageUtils;->parseMetaData(Landroid/content/pm/parsing/ParsingPackage;Landroid/content/res/Resources;Landroid/content/res/XmlResourceParser;Landroid/os/Bundle;Landroid/content/pm/parsing/result/ParseInput;)
Landroid/content/pm/parsing/component/ParsedActivityUtils;->parseLayout(Landroid/content/res/Resources;Landroid/util/AttributeSet;Landroid/content/pm/parsing/result/ParseInput;)
Landroid/content/pm/parsing/component/ParsedActivityUtils;->resolveWindowLayout(Landroid/content/pm/parsing/component/ParsedActivity;Landroid/content/pm/parsing/result/ParseInput;)
Landroid/content/pm/parsing/component/ParsedMainComponentUtils;->parseMainComponent(Landroid/content/pm/parsing/component/ParsedMainComponent;Ljava/lang/String;[Ljava/lang/String;Landroid/content/pm/parsing/ParsingPackage;Landroid/content/res/TypedArray;IZLandroid/content/pm/parsing/result/ParseInput;IILjava/lang/Integer;Ljava/lang/Integer;IIIILjava/lang/Integer;ILjava/lang/Integer;)
Landroid/content/pm/parsing/component/ParsedPermission;-><init>(Landroid/content/pm/parsing/component/ParsedPermission;Landroid/content/pm/PermissionInfo;Ljava/lang/String;Ljava/lang/String;)
Landroid/content/pm/parsing/component/ParsedProcess;-><init>(Ljava/lang/String;Ljava/util/Set;I)
Landroid/content/pm/split/DefaultSplitAssetLoader;-><init>(Landroid/content/pm/PackageParser$PackageLite;I)
Landroid/content/pm/split/SplitAssetDependencyLoader;-><init>(Landroid/content/pm/PackageParser$PackageLite;Landroid/util/SparseArray;I)
Landroid/content/pm/split/SplitDependencyLoader;->createDependenciesFromPackage(Landroid/content/pm/PackageParser$PackageLite;)
Landroid/content/res/AssetManager;->nativeCreateIdmapsForStaticOverlaysTargetingAndroid()
Landroid/content/res/AssetManager;->nativeThemeClear(J)
Landroid/content/res/AssetManager;->nativeThemeDestroy(J)
Landroid/content/res/ColorStateList;->modulateColorAlpha(IF)
Landroid/content/res/CompatibilityInfo$Translator;->translateRectInScreenToAppWinFrame(Landroid/graphics/Rect;)
Landroid/content/res/FontResourcesParser$ProviderResourceEntry;-><init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)
Landroid/content/res/ResourcesImpl;->newThemeImpl(Landroid/content/res/Resources$ThemeKey;)
Landroid/content/rollback/IRollbackManager;->notifyStagedApkSession(II)
Landroid/content/rollback/IRollbackManager$Default;->notifyStagedApkSession(II)
Landroid/content/rollback/IRollbackManager$Stub$Proxy;->notifyStagedApkSession(II)
Landroid/content/rollback/PackageRollbackInfo;-><init>(Landroid/content/pm/VersionedPackage;Landroid/content/pm/VersionedPackage;Landroid/util/IntArray;Ljava/util/ArrayList;ZZLandroid/util/IntArray;Landroid/util/SparseLongArray;)
Landroid/content/rollback/PackageRollbackInfo;-><init>(Landroid/content/pm/VersionedPackage;Landroid/content/pm/VersionedPackage;Landroid/util/IntArray;Ljava/util/ArrayList;ZZLandroid/util/IntArray;Landroid/util/SparseLongArray;I)
Landroid/content/rollback/PackageRollbackInfo;->getCeSnapshotInodes()
Landroid/content/rollback/PackageRollbackInfo;->putCeSnapshotInode(IJ)
Landroid/ddm/DdmHandleAppName;->connected()
Landroid/ddm/DdmHandleAppName;->disconnected()
Landroid/ddm/DdmHandleExit;->connected()
Landroid/ddm/DdmHandleExit;->disconnected()
Landroid/ddm/DdmHandleHeap;->connected()
Landroid/ddm/DdmHandleHeap;->disconnected()
Landroid/ddm/DdmHandleHeap;->handleHPDS(Lorg/apache/harmony/dalvik/ddmc/Chunk;)
Landroid/ddm/DdmHandleHeap;->handleHPDU(Lorg/apache/harmony/dalvik/ddmc/Chunk;)
Landroid/ddm/DdmHandleHeap;->handleHPIF(Lorg/apache/harmony/dalvik/ddmc/Chunk;)
Landroid/ddm/DdmHandleHeap;->handleHPSGNHSG(Lorg/apache/harmony/dalvik/ddmc/Chunk;Z)
Landroid/ddm/DdmHandleHeap;->handleREAE(Lorg/apache/harmony/dalvik/ddmc/Chunk;)
Landroid/ddm/DdmHandleHeap;->handleREAL(Lorg/apache/harmony/dalvik/ddmc/Chunk;)
Landroid/ddm/DdmHandleHeap;->handleREAQ(Lorg/apache/harmony/dalvik/ddmc/Chunk;)
Landroid/ddm/DdmHandleHello;->connected()
Landroid/ddm/DdmHandleHello;->disconnected()
Landroid/ddm/DdmHandleNativeHeap;->connected()
Landroid/ddm/DdmHandleNativeHeap;->disconnected()
Landroid/ddm/DdmHandleProfiling;->connected()
Landroid/ddm/DdmHandleProfiling;->disconnected()
Landroid/ddm/DdmHandleThread;-><init>()
Landroid/ddm/DdmHandleThread;->connected()
Landroid/ddm/DdmHandleThread;->createStackChunk([Ljava/lang/StackTraceElement;I)
Landroid/ddm/DdmHandleThread;->disconnected()
Landroid/ddm/DdmHandleThread;->handleChunk(Lorg/apache/harmony/dalvik/ddmc/Chunk;)
Landroid/ddm/DdmHandleThread;->handleSTKL(Lorg/apache/harmony/dalvik/ddmc/Chunk;)
Landroid/ddm/DdmHandleThread;->handleTHEN(Lorg/apache/harmony/dalvik/ddmc/Chunk;)
Landroid/ddm/DdmHandleThread;->handleTHST(Lorg/apache/harmony/dalvik/ddmc/Chunk;)
Landroid/ddm/DdmHandleThread;->register()
Landroid/ddm/DdmHandleViewDebug;->connected()
Landroid/ddm/DdmHandleViewDebug;->disconnected()
Landroid/gamedriver/GameDriverProto;-><init>()
Landroid/gamedriver/GameDriverProto;->registerAllExtensions(Lcom/android/framework/protobuf/ExtensionRegistryLite;)
Landroid/gamedriver/GameDriverProto$Blacklist;-><init>()
Landroid/gamedriver/GameDriverProto$Blacklist;->addAllPackageNames(Ljava/lang/Iterable;)
Landroid/gamedriver/GameDriverProto$Blacklist;->addPackageNames(Ljava/lang/String;)
Landroid/gamedriver/GameDriverProto$Blacklist;->addPackageNamesBytes(Lcom/android/framework/protobuf/ByteString;)
Landroid/gamedriver/GameDriverProto$Blacklist;->clearPackageNames()
Landroid/gamedriver/GameDriverProto$Blacklist;->clearVersionCode()
Landroid/gamedriver/GameDriverProto$Blacklist;->dynamicMethod(Lcom/android/framework/protobuf/GeneratedMessageLite$MethodToInvoke;Ljava/lang/Object;Ljava/lang/Object;)
Landroid/gamedriver/GameDriverProto$Blacklist;->ensurePackageNamesIsMutable()
Landroid/gamedriver/GameDriverProto$Blacklist;->getDefaultInstance()
Landroid/gamedriver/GameDriverProto$Blacklist;->getPackageNames(I)
Landroid/gamedriver/GameDriverProto$Blacklist;->getPackageNamesBytes(I)
Landroid/gamedriver/GameDriverProto$Blacklist;->getPackageNamesCount()
Landroid/gamedriver/GameDriverProto$Blacklist;->getPackageNamesList()
Landroid/gamedriver/GameDriverProto$Blacklist;->getVersionCode()
Landroid/gamedriver/GameDriverProto$Blacklist;->hasVersionCode()
Landroid/gamedriver/GameDriverProto$Blacklist;->newBuilder()
Landroid/gamedriver/GameDriverProto$Blacklist;->newBuilder(Landroid/gamedriver/GameDriverProto$Blacklist;)
Landroid/gamedriver/GameDriverProto$Blacklist;->parseDelimitedFrom(Ljava/io/InputStream;)
Landroid/gamedriver/GameDriverProto$Blacklist;->parseDelimitedFrom(Ljava/io/InputStream;Lcom/android/framework/protobuf/ExtensionRegistryLite;)
Landroid/gamedriver/GameDriverProto$Blacklist;->parseFrom([B)
Landroid/gamedriver/GameDriverProto$Blacklist;->parseFrom([BLcom/android/framework/protobuf/ExtensionRegistryLite;)
Landroid/gamedriver/GameDriverProto$Blacklist;->parseFrom(Lcom/android/framework/protobuf/ByteString;)
Landroid/gamedriver/GameDriverProto$Blacklist;->parseFrom(Lcom/android/framework/protobuf/ByteString;Lcom/android/framework/protobuf/ExtensionRegistryLite;)
Landroid/gamedriver/GameDriverProto$Blacklist;->parseFrom(Lcom/android/framework/protobuf/CodedInputStream;)
Landroid/gamedriver/GameDriverProto$Blacklist;->parseFrom(Lcom/android/framework/protobuf/CodedInputStream;Lcom/android/framework/protobuf/ExtensionRegistryLite;)
Landroid/gamedriver/GameDriverProto$Blacklist;->parseFrom(Ljava/io/InputStream;)
Landroid/gamedriver/GameDriverProto$Blacklist;->parseFrom(Ljava/io/InputStream;Lcom/android/framework/protobuf/ExtensionRegistryLite;)
Landroid/gamedriver/GameDriverProto$Blacklist;->parseFrom(Ljava/nio/ByteBuffer;)
Landroid/gamedriver/GameDriverProto$Blacklist;->parseFrom(Ljava/nio/ByteBuffer;Lcom/android/framework/protobuf/ExtensionRegistryLite;)
Landroid/gamedriver/GameDriverProto$Blacklist;->parser()
Landroid/gamedriver/GameDriverProto$Blacklist;->setPackageNames(ILjava/lang/String;)
Landroid/gamedriver/GameDriverProto$Blacklist;->setVersionCode(J)
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;-><init>()
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;-><init>(Landroid/gamedriver/GameDriverProto$1;)
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;->addAllPackageNames(Ljava/lang/Iterable;)
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;->addPackageNames(Ljava/lang/String;)
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;->addPackageNamesBytes(Lcom/android/framework/protobuf/ByteString;)
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;->clearPackageNames()
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;->clearVersionCode()
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;->getPackageNames(I)
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;->getPackageNamesBytes(I)
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;->getPackageNamesCount()
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;->getPackageNamesList()
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;->getVersionCode()
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;->hasVersionCode()
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;->setPackageNames(ILjava/lang/String;)
Landroid/gamedriver/GameDriverProto$Blacklist$Builder;->setVersionCode(J)
Landroid/gamedriver/GameDriverProto$BlacklistOrBuilder;->getPackageNames(I)
Landroid/gamedriver/GameDriverProto$BlacklistOrBuilder;->getPackageNamesBytes(I)
Landroid/gamedriver/GameDriverProto$BlacklistOrBuilder;->getPackageNamesCount()
Landroid/gamedriver/GameDriverProto$BlacklistOrBuilder;->getPackageNamesList()
Landroid/gamedriver/GameDriverProto$BlacklistOrBuilder;->getVersionCode()
Landroid/gamedriver/GameDriverProto$BlacklistOrBuilder;->hasVersionCode()
Landroid/gamedriver/GameDriverProto$Blacklists;-><init>()
Landroid/gamedriver/GameDriverProto$Blacklists;->addAllBlacklists(Ljava/lang/Iterable;)
Landroid/gamedriver/GameDriverProto$Blacklists;->addBlacklists(Landroid/gamedriver/GameDriverProto$Blacklist;)
Landroid/gamedriver/GameDriverProto$Blacklists;->addBlacklists(Landroid/gamedriver/GameDriverProto$Blacklist$Builder;)
Landroid/gamedriver/GameDriverProto$Blacklists;->addBlacklists(ILandroid/gamedriver/GameDriverProto$Blacklist;)
Landroid/gamedriver/GameDriverProto$Blacklists;->addBlacklists(ILandroid/gamedriver/GameDriverProto$Blacklist$Builder;)
Landroid/gamedriver/GameDriverProto$Blacklists;->clearBlacklists()
Landroid/gamedriver/GameDriverProto$Blacklists;->dynamicMethod(Lcom/android/framework/protobuf/GeneratedMessageLite$MethodToInvoke;Ljava/lang/Object;Ljava/lang/Object;)
Landroid/gamedriver/GameDriverProto$Blacklists;->ensureBlacklistsIsMutable()
Landroid/gamedriver/GameDriverProto$Blacklists;->getBlacklists(I)
Landroid/gamedriver/GameDriverProto$Blacklists;->getBlacklistsCount()
Landroid/gamedriver/GameDriverProto$Blacklists;->getBlacklistsList()
Landroid/gamedriver/GameDriverProto$Blacklists;->getBlacklistsOrBuilder(I)
Landroid/gamedriver/GameDriverProto$Blacklists;->getBlacklistsOrBuilderList()
Landroid/gamedriver/GameDriverProto$Blacklists;->getDefaultInstance()
Landroid/gamedriver/GameDriverProto$Blacklists;->newBuilder()
Landroid/gamedriver/GameDriverProto$Blacklists;->newBuilder(Landroid/gamedriver/GameDriverProto$Blacklists;)
Landroid/gamedriver/GameDriverProto$Blacklists;->parseDelimitedFrom(Ljava/io/InputStream;)
Landroid/gamedriver/GameDriverProto$Blacklists;->parseDelimitedFrom(Ljava/io/InputStream;Lcom/android/framework/protobuf/ExtensionRegistryLite;)
Landroid/gamedriver/GameDriverProto$Blacklists;->parseFrom([B)
Landroid/gamedriver/GameDriverProto$Blacklists;->parseFrom([BLcom/android/framework/protobuf/ExtensionRegistryLite;)
Landroid/gamedriver/GameDriverProto$Blacklists;->parseFrom(Lcom/android/framework/protobuf/ByteString;)
Landroid/gamedriver/GameDriverProto$Blacklists;->parseFrom(Lcom/android/framework/protobuf/ByteString;Lcom/android/framework/protobuf/ExtensionRegistryLite;)
Landroid/gamedriver/GameDriverProto$Blacklists;->parseFrom(Lcom/android/framework/protobuf/CodedInputStream;)
Landroid/gamedriver/GameDriverProto$Blacklists;->parseFrom(Lcom/android/framework/protobuf/CodedInputStream;Lcom/android/framework/protobuf/ExtensionRegistryLite;)
Landroid/gamedriver/GameDriverProto$Blacklists;->parseFrom(Ljava/io/InputStream;)
Landroid/gamedriver/GameDriverProto$Blacklists;->parseFrom(Ljava/io/InputStream;Lcom/android/framework/protobuf/ExtensionRegistryLite;)
Landroid/gamedriver/GameDriverProto$Blacklists;->parseFrom(Ljava/nio/ByteBuffer;)
Landroid/gamedriver/GameDriverProto$Blacklists;->parseFrom(Ljava/nio/ByteBuffer;Lcom/android/framework/protobuf/ExtensionRegistryLite;)
Landroid/gamedriver/GameDriverProto$Blacklists;->parser()
Landroid/gamedriver/GameDriverProto$Blacklists;->removeBlacklists(I)
Landroid/gamedriver/GameDriverProto$Blacklists;->setBlacklists(ILandroid/gamedriver/GameDriverProto$Blacklist;)
Landroid/gamedriver/GameDriverProto$Blacklists;->setBlacklists(ILandroid/gamedriver/GameDriverProto$Blacklist$Builder;)
Landroid/gamedriver/GameDriverProto$Blacklists$Builder;-><init>()
Landroid/gamedriver/GameDriverProto$Blacklists$Builder;-><init>(Landroid/gamedriver/GameDriverProto$1;)
Landroid/gamedriver/GameDriverProto$Blacklists$Builder;->addAllBlacklists(Ljava/lang/Iterable;)
Landroid/gamedriver/GameDriverProto$Blacklists$Builder;->addBlacklists(Landroid/gamedriver/GameDriverProto$Blacklist;)
Landroid/gamedriver/GameDriverProto$Blacklists$Builder;->addBlacklists(Landroid/gamedriver/GameDriverProto$Blacklist$Builder;)
Landroid/gamedriver/GameDriverProto$Blacklists$Builder;->addBlacklists(ILandroid/gamedriver/GameDriverProto$Blacklist;)
Landroid/gamedriver/GameDriverProto$Blacklists$Builder;->addBlacklists(ILandroid/gamedriver/GameDriverProto$Blacklist$Builder;)
Landroid/gamedriver/GameDriverProto$Blacklists$Builder;->clearBlacklists()
Landroid/gamedriver/GameDriverProto$Blacklists$Builder;->getBlacklists(I)
Landroid/gamedriver/GameDriverProto$Blacklists$Builder;->getBlacklistsCount()
Landroid/gamedriver/GameDriverProto$Blacklists$Builder;->getBlacklistsList()
Landroid/gamedriver/GameDriverProto$Blacklists$Builder;->removeBlacklists(I)
Landroid/gamedriver/GameDriverProto$Blacklists$Builder;->setBlacklists(ILandroid/gamedriver/GameDriverProto$Blacklist;)
Landroid/gamedriver/GameDriverProto$Blacklists$Builder;->setBlacklists(ILandroid/gamedriver/GameDriverProto$Blacklist$Builder;)
Landroid/gamedriver/GameDriverProto$BlacklistsOrBuilder;->getBlacklists(I)
Landroid/gamedriver/GameDriverProto$BlacklistsOrBuilder;->getBlacklistsCount()
Landroid/gamedriver/GameDriverProto$BlacklistsOrBuilder;->getBlacklistsList()
Landroid/graphics/BLASTBufferQueue;-><init>(Landroid/view/SurfaceControl;IIZ)
Landroid/graphics/BLASTBufferQueue;->getSurface()
Landroid/graphics/BLASTBufferQueue;->nativeCreate(JJJZ)
Landroid/graphics/BLASTBufferQueue;->nativeGetSurface(J)
Landroid/graphics/BLASTBufferQueue;->nativeUpdate(JJJJ)
Landroid/graphics/BLASTBufferQueue;->update(Landroid/view/SurfaceControl;II)
Landroid/graphics/Bitmap;->createAshmemBitmap(Landroid/graphics/Bitmap$Config;)
Landroid/graphics/Bitmap;->createGraphicBufferHandle()
Landroid/graphics/Bitmap;->wrapHardwareBuffer(Landroid/graphics/GraphicBuffer;Landroid/graphics/ColorSpace;)
Landroid/graphics/BitmapRegionDecoder;->nativeNewInstance([BIIZ)
Landroid/graphics/BitmapRegionDecoder;->nativeNewInstance(Ljava/io/FileDescriptor;Z)
Landroid/graphics/BitmapRegionDecoder;->nativeNewInstance(Ljava/io/InputStream;[BZ)
Landroid/graphics/BitmapRegionDecoder;->nativeNewInstance(JZ)
Landroid/graphics/BitmapShader;->createNativeInstance(J)
Landroid/graphics/BitmapShader;->nativeCreate(JJII)
Landroid/graphics/Canvas;->getGL()
Landroid/graphics/Canvas;->insertInorderBarrier()
Landroid/graphics/Canvas;->insertReorderBarrier()
Landroid/graphics/Canvas;->isRecordingFor(Ljava/lang/Object;)
Landroid/graphics/Canvas;->nSaveLayer(JFFFFJI)
Landroid/graphics/Canvas;->nSaveLayerAlpha(JFFFFII)
Landroid/graphics/Canvas$EdgeType;-><init>(Ljava/lang/String;II)
Landroid/graphics/Color;->getHtmlColor(Ljava/lang/String;)
Landroid/graphics/ColorSpace;->cctToIlluminantdXyz(I)
Landroid/graphics/ColorSpace;->createRenderer()
Landroid/graphics/ColorSpace;->xyYToUv([F)
Landroid/graphics/ColorSpace$Renderer;-><init>()
Landroid/graphics/ColorSpace$Renderer;-><init>(Landroid/graphics/ColorSpace$1;)
Landroid/graphics/ColorSpace$Renderer;->add(Landroid/graphics/ColorSpace;FFFI)
Landroid/graphics/ColorSpace$Renderer;->add(Landroid/graphics/ColorSpace;I)
Landroid/graphics/ColorSpace$Renderer;->clip(Z)
Landroid/graphics/ColorSpace$Renderer;->computeChromaticityMesh([F[I)
Landroid/graphics/ColorSpace$Renderer;->computeColor([FFFFLandroid/graphics/ColorSpace;)
Landroid/graphics/ColorSpace$Renderer;->drawBox(Landroid/graphics/Canvas;IILandroid/graphics/Paint;Landroid/graphics/Path;)
Landroid/graphics/ColorSpace$Renderer;->drawGamuts(Landroid/graphics/Canvas;IILandroid/graphics/Paint;Landroid/graphics/Path;[F[F)
Landroid/graphics/ColorSpace$Renderer;->drawLocus(Landroid/graphics/Canvas;IILandroid/graphics/Paint;Landroid/graphics/Path;[F)
Landroid/graphics/ColorSpace$Renderer;->drawPoints(Landroid/graphics/Canvas;IILandroid/graphics/Paint;)
Landroid/graphics/ColorSpace$Renderer;->getPrimaries(Landroid/graphics/ColorSpace$Rgb;[FZ)
Landroid/graphics/ColorSpace$Renderer;->render()
Landroid/graphics/ColorSpace$Renderer;->setTransform(Landroid/graphics/Canvas;II[F)
Landroid/graphics/ColorSpace$Renderer;->setUcsTransform(Landroid/graphics/Canvas;I)
Landroid/graphics/ColorSpace$Renderer;->showWhitePoint(Z)
Landroid/graphics/ColorSpace$Renderer;->size(I)
Landroid/graphics/ColorSpace$Renderer;->sqr(D)
Landroid/graphics/ColorSpace$Renderer;->uniformChromaticityScale(Z)
Landroid/graphics/ColorSpace$Renderer$Point;-><init>(Landroid/graphics/ColorSpace;[FI)
Landroid/graphics/ComposeShader;->createNativeInstance(J)
Landroid/graphics/ComposeShader;->verifyNativeInstance()
Landroid/graphics/FontListParser;->parse(Ljava/io/InputStream;Ljava/lang/String;)
Landroid/graphics/FontListParser;->readFamilies(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Landroid/graphics/FontListParser;->readFamily(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Landroid/graphics/FontListParser;->readFont(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Landroid/graphics/FrameInfo;->markDrawStart()
Landroid/graphics/FrameInfo;->setVsync(JJ)
Landroid/graphics/FrameInfo;->updateInputEventTime(JJ)
Landroid/graphics/GraphicBuffer;->createFromExisting(IIIIJ)
Landroid/graphics/GraphicBuffer;->nWrapGraphicBuffer(J)
Landroid/graphics/HardwareRenderer;->copyLayerInto(Landroid/view/TextureLayer;Landroid/graphics/Bitmap;)
Landroid/graphics/HardwareRenderer;->invokeFunctor(JZ)
Landroid/graphics/HardwareRenderer;->isWideGamut()
Landroid/graphics/HardwareRenderer;->nCreateProxy(ZZJ)
Landroid/graphics/HardwareRenderer;->nInvokeFunctor(JZ)
Landroid/graphics/HardwareRenderer;->nSetWideGamut(JZ)
Landroid/graphics/HardwareRenderer;->onLayerDestroyed(Landroid/view/TextureLayer;)
Landroid/graphics/HardwareRenderer;->pushLayerUpdate(Landroid/view/TextureLayer;)
Landroid/graphics/HardwareRenderer;->setWideGamut(Z)
Landroid/graphics/HardwareRendererObserver;-><init>(Landroid/graphics/HardwareRendererObserver$OnFrameMetricsAvailableListener;[JLandroid/os/Handler;)
Landroid/graphics/HardwareRendererObserver;->nCreateObserver()
Landroid/graphics/ImageDecoder;->nCreate(Ljava/io/FileDescriptor;ZLandroid/graphics/ImageDecoder$Source;)
Landroid/graphics/LargeBitmap;-><init>(J)
Landroid/graphics/LargeBitmap;->checkRecycled(Ljava/lang/String;)
Landroid/graphics/LargeBitmap;->decodeRegion(Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)
Landroid/graphics/LargeBitmap;->finalize()
Landroid/graphics/LargeBitmap;->getHeight()
Landroid/graphics/LargeBitmap;->getWidth()
Landroid/graphics/LargeBitmap;->isRecycled()
Landroid/graphics/LargeBitmap;->nativeClean(J)
Landroid/graphics/LargeBitmap;->nativeDecodeRegion(JIIIILandroid/graphics/BitmapFactory$Options;)
Landroid/graphics/LargeBitmap;->nativeGetHeight(J)
Landroid/graphics/LargeBitmap;->nativeGetWidth(J)
Landroid/graphics/LargeBitmap;->recycle()
Landroid/graphics/LinearGradient;->createNativeInstance(J)
Landroid/graphics/Matrix;->printShortString(Ljava/io/PrintWriter;)
Landroid/graphics/NinePatch;-><init>(Landroid/graphics/NinePatch;)
Landroid/graphics/ParcelableColorSpace;->fromXyz([F)
Landroid/graphics/ParcelableColorSpace;->getMaxValue(I)
Landroid/graphics/ParcelableColorSpace;->getMinValue(I)
Landroid/graphics/ParcelableColorSpace;->getNativeInstance()
Landroid/graphics/ParcelableColorSpace;->isWideGamut()
Landroid/graphics/ParcelableColorSpace;->toXyz([F)
Landroid/graphics/Point;->convert(Landroid/graphics/Point;)
Landroid/graphics/Point;->convert(Landroid/util/Size;)
Landroid/graphics/Point;->dumpDebug(Landroid/util/proto/ProtoOutputStream;J)
Landroid/graphics/Point;->printShortString(Ljava/io/PrintWriter;)
Landroid/graphics/RadialGradient;-><init>(FFF[J[FLandroid/graphics/Shader$TileMode;Landroid/graphics/ColorSpace;)
Landroid/graphics/RadialGradient;->createNativeInstance(J)
Landroid/graphics/RadialGradient;->nativeCreate(JFFF[J[FIJ)
Landroid/graphics/RecordingCanvas;->callDrawGLFunction2(J)
Landroid/graphics/RecordingCanvas;->drawGLFunctor2(JLjava/lang/Runnable;)
Landroid/graphics/RecordingCanvas;->drawTextureLayer(Landroid/view/TextureLayer;)
Landroid/graphics/RecordingCanvas;->finishRecording()
Landroid/graphics/RecordingCanvas;->isRecordingFor(Ljava/lang/Object;)
Landroid/graphics/RecordingCanvas;->nCallDrawGLFunction(JJLjava/lang/Runnable;)
Landroid/graphics/RecordingCanvas;->nFinishRecording(J)
Landroid/graphics/RecordingCanvas;->nInsertReorderBarrier(JZ)
Landroid/graphics/RenderNode;->nSetDisplayList(JJ)
Landroid/graphics/RuntimeShader;-><init>(Ljava/lang/String;[BZ)
Landroid/graphics/RuntimeShader;-><init>(Ljava/lang/String;[BZLandroid/graphics/ColorSpace;)
Landroid/graphics/RuntimeShader;->createNativeInstance(J)
Landroid/graphics/RuntimeShader;->nativeCreate(JJ[BJZ)
Landroid/graphics/RuntimeShader;->nativeCreateShaderFactory(Ljava/lang/String;)
Landroid/graphics/RuntimeShader;->updateUniforms([B)
Landroid/graphics/Shader;->createNativeInstance(J)
Landroid/graphics/Shader;->verifyNativeInstance()
Landroid/graphics/SweepGradient;->createNativeInstance(J)
Landroid/graphics/Typeface;->initSystemDefaultTypefaces(Ljava/util/Map;Ljava/util/Map;[Landroid/text/FontConfig$Alias;)
Landroid/graphics/Typeface;->nativeCreateFromArray([JII)
Landroid/graphics/fonts/Font;-><init>(JLjava/nio/ByteBuffer;Ljava/io/File;Landroid/graphics/fonts/FontStyle;I[Landroid/graphics/fonts/FontVariationAxis;Ljava/lang/String;)
Landroid/graphics/fonts/Font;-><init>(JLjava/nio/ByteBuffer;Ljava/io/File;Landroid/graphics/fonts/FontStyle;I[Landroid/graphics/fonts/FontVariationAxis;Ljava/lang/String;Landroid/graphics/fonts/Font$1;)
Landroid/graphics/fonts/Font$Builder;->nBuild(JLjava/nio/ByteBuffer;Ljava/lang/String;IZI)
Landroid/graphics/fonts/FontCustomizationParser;->parse(Ljava/io/InputStream;Ljava/lang/String;)
Landroid/graphics/fonts/FontCustomizationParser;->readFamilies(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Landroid/graphics/fonts/FontCustomizationParser;->readFamily(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;Landroid/graphics/fonts/FontCustomizationParser$Result;)
Landroid/graphics/fonts/FontCustomizationParser;->validate(Landroid/graphics/fonts/FontCustomizationParser$Result;)
Landroid/graphics/fonts/FontFamily;-><init>(Ljava/util/ArrayList;J)
Landroid/graphics/fonts/FontFamily;-><init>(Ljava/util/ArrayList;JLandroid/graphics/fonts/FontFamily$1;)
Landroid/graphics/fonts/SystemFonts;->appendNamedFamily(Landroid/text/FontConfig$Family;Ljava/util/HashMap;Landroid/util/ArrayMap;Ljava/util/ArrayList;)
Landroid/graphics/fonts/SystemFonts;->buildSystemFallback(Ljava/lang/String;Ljava/lang/String;Landroid/graphics/fonts/FontCustomizationParser$Result;Landroid/util/ArrayMap;Ljava/util/ArrayList;)
Landroid/graphics/fonts/SystemFonts;->createFontFamily(Ljava/lang/String;Ljava/util/List;Ljava/lang/String;ILjava/util/Map;Ljava/util/ArrayList;)
Landroid/graphics/fonts/SystemFonts;->getAliases()
Landroid/graphics/fonts/SystemFonts;->getRawSystemFallbackMap()
Landroid/graphics/fonts/SystemFonts;->getSystemFallback(Ljava/lang/String;)
Landroid/graphics/fonts/SystemFonts;->pushFamilyToFallback(Landroid/text/FontConfig$Family;Landroid/util/ArrayMap;Ljava/util/Map;Ljava/util/ArrayList;)
Landroid/graphics/fonts/SystemFonts;->readFontCustomization(Ljava/lang/String;Ljava/lang/String;)
Landroid/hardware/Camera;-><init>(II)
Landroid/hardware/Camera;->cameraInitNormal(I)
Landroid/hardware/Camera;->cameraInitUnspecified(I)
Landroid/hardware/Camera;->cameraInitVersion(II)
Landroid/hardware/Camera;->native_setup(Ljava/lang/Object;IILjava/lang/String;)
Landroid/hardware/ICameraService;->connect(Landroid/hardware/ICameraClient;ILjava/lang/String;II)
Landroid/hardware/ICameraService;->connectDevice(Landroid/hardware/camera2/ICameraDeviceCallbacks;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)
Landroid/hardware/ICameraService;->connectLegacy(Landroid/hardware/ICameraClient;IILjava/lang/String;I)
Landroid/hardware/ICameraService;->getCameraCharacteristics(Ljava/lang/String;)
Landroid/hardware/ICameraService;->isConcurrentSessionConfigurationSupported([Landroid/hardware/camera2/utils/CameraIdAndSessionConfiguration;)
Landroid/hardware/ICameraService$Default;->connect(Landroid/hardware/ICameraClient;ILjava/lang/String;II)
Landroid/hardware/ICameraService$Default;->connectDevice(Landroid/hardware/camera2/ICameraDeviceCallbacks;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)
Landroid/hardware/ICameraService$Default;->connectLegacy(Landroid/hardware/ICameraClient;IILjava/lang/String;I)
Landroid/hardware/ICameraService$Default;->getCameraCharacteristics(Ljava/lang/String;)
Landroid/hardware/ICameraService$Default;->isConcurrentSessionConfigurationSupported([Landroid/hardware/camera2/utils/CameraIdAndSessionConfiguration;)
Landroid/hardware/ICameraService$Stub$Proxy;->connect(Landroid/hardware/ICameraClient;ILjava/lang/String;II)
Landroid/hardware/ICameraService$Stub$Proxy;->connectDevice(Landroid/hardware/camera2/ICameraDeviceCallbacks;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)
Landroid/hardware/ICameraService$Stub$Proxy;->connectLegacy(Landroid/hardware/ICameraClient;IILjava/lang/String;I)
Landroid/hardware/ICameraService$Stub$Proxy;->getCameraCharacteristics(Ljava/lang/String;)
Landroid/hardware/ICameraService$Stub$Proxy;->isConcurrentSessionConfigurationSupported([Landroid/hardware/camera2/utils/CameraIdAndSessionConfiguration;)
Landroid/hardware/ICameraServiceProxy;->notifyCameraState(Ljava/lang/String;IILjava/lang/String;I)
Landroid/hardware/ICameraServiceProxy$Default;->notifyCameraState(Ljava/lang/String;IILjava/lang/String;I)
Landroid/hardware/ICameraServiceProxy$Stub$Proxy;->notifyCameraState(Ljava/lang/String;IILjava/lang/String;I)
Landroid/hardware/SensorPrivacyManager;->addSensorPrivacyListener(Landroid/hardware/SensorPrivacyManager$OnSensorPrivacyChangedListener;)
Landroid/hardware/SensorPrivacyManager;->isSensorPrivacyEnabled()
Landroid/hardware/SensorPrivacyManager;->removeSensorPrivacyListener(Landroid/hardware/SensorPrivacyManager$OnSensorPrivacyChangedListener;)
Landroid/hardware/SensorPrivacyManager;->setSensorPrivacy(Z)
Landroid/hardware/SensorPrivacyManager$OnSensorPrivacyChangedListener;->onSensorPrivacyChanged(Z)
Landroid/hardware/SystemSensorManager$BaseEventQueue;->nativeInitBaseEventQueue(JLjava/lang/ref/WeakReference;Landroid/os/MessageQueue;Ljava/lang/String;ILjava/lang/String;)
Landroid/hardware/biometrics/BiometricAuthenticator;->authenticate(Landroid/hardware/biometrics/CryptoObject;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroid/hardware/biometrics/BiometricAuthenticator$AuthenticationCallback;)
Landroid/hardware/biometrics/BiometricAuthenticator;->authenticate(Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroid/hardware/biometrics/BiometricAuthenticator$AuthenticationCallback;)
Landroid/hardware/biometrics/BiometricAuthenticator;->hasEnrolledTemplates()
Landroid/hardware/biometrics/BiometricAuthenticator;->hasEnrolledTemplates(I)
Landroid/hardware/biometrics/BiometricAuthenticator;->isHardwareDetected()
Landroid/hardware/biometrics/BiometricAuthenticator;->setActiveUser(I)
Landroid/hardware/biometrics/BiometricManager;->resetLockout([B)
Landroid/hardware/biometrics/BiometricManager;->setActiveUser(I)
Landroid/hardware/biometrics/BiometricPrompt;-><init>(Landroid/content/Context;Landroid/os/Bundle;Landroid/hardware/biometrics/BiometricPrompt$ButtonInfo;Landroid/hardware/biometrics/BiometricPrompt$ButtonInfo;)
Landroid/hardware/biometrics/BiometricPrompt;-><init>(Landroid/content/Context;Landroid/os/Bundle;Landroid/hardware/biometrics/BiometricPrompt$ButtonInfo;Landroid/hardware/biometrics/BiometricPrompt$ButtonInfo;Landroid/hardware/biometrics/BiometricPrompt$1;)
Landroid/hardware/biometrics/IAuthService;->authenticate(Landroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiver;Ljava/lang/String;Landroid/os/Bundle;)
Landroid/hardware/biometrics/IAuthService;->getAuthenticatorIds()
Landroid/hardware/biometrics/IAuthService;->resetLockout([B)
Landroid/hardware/biometrics/IAuthService;->setActiveUser(I)
Landroid/hardware/biometrics/IAuthService$Default;->authenticate(Landroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiver;Ljava/lang/String;Landroid/os/Bundle;)
Landroid/hardware/biometrics/IAuthService$Default;->getAuthenticatorIds()
Landroid/hardware/biometrics/IAuthService$Default;->resetLockout([B)
Landroid/hardware/biometrics/IAuthService$Default;->setActiveUser(I)
Landroid/hardware/biometrics/IAuthService$Stub$Proxy;->authenticate(Landroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiver;Ljava/lang/String;Landroid/os/Bundle;)
Landroid/hardware/biometrics/IAuthService$Stub$Proxy;->getAuthenticatorIds()
Landroid/hardware/biometrics/IAuthService$Stub$Proxy;->resetLockout([B)
Landroid/hardware/biometrics/IAuthService$Stub$Proxy;->setActiveUser(I)
Landroid/hardware/biometrics/IBiometricAuthenticator;->cancelAuthenticationFromService(Landroid/os/IBinder;Ljava/lang/String;IIIZ)
Landroid/hardware/biometrics/IBiometricAuthenticator;->prepareForAuthentication(ZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiverInternal;Ljava/lang/String;IIII)
Landroid/hardware/biometrics/IBiometricAuthenticator;->resetLockout([B)
Landroid/hardware/biometrics/IBiometricAuthenticator;->setActiveUser(I)
Landroid/hardware/biometrics/IBiometricAuthenticator$Default;->cancelAuthenticationFromService(Landroid/os/IBinder;Ljava/lang/String;IIIZ)
Landroid/hardware/biometrics/IBiometricAuthenticator$Default;->prepareForAuthentication(ZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiverInternal;Ljava/lang/String;IIII)
Landroid/hardware/biometrics/IBiometricAuthenticator$Default;->resetLockout([B)
Landroid/hardware/biometrics/IBiometricAuthenticator$Default;->setActiveUser(I)
Landroid/hardware/biometrics/IBiometricAuthenticator$Stub$Proxy;->cancelAuthenticationFromService(Landroid/os/IBinder;Ljava/lang/String;IIIZ)
Landroid/hardware/biometrics/IBiometricAuthenticator$Stub$Proxy;->prepareForAuthentication(ZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiverInternal;Ljava/lang/String;IIII)
Landroid/hardware/biometrics/IBiometricAuthenticator$Stub$Proxy;->resetLockout([B)
Landroid/hardware/biometrics/IBiometricAuthenticator$Stub$Proxy;->setActiveUser(I)
Landroid/hardware/biometrics/IBiometricEnabledOnKeyguardCallback;->onChanged(Landroid/hardware/biometrics/BiometricSourceType;ZI)
Landroid/hardware/biometrics/IBiometricEnabledOnKeyguardCallback$Default;->onChanged(Landroid/hardware/biometrics/BiometricSourceType;ZI)
Landroid/hardware/biometrics/IBiometricEnabledOnKeyguardCallback$Stub$Proxy;->onChanged(Landroid/hardware/biometrics/BiometricSourceType;ZI)
Landroid/hardware/biometrics/IBiometricService;->authenticate(Landroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiver;Ljava/lang/String;Landroid/os/Bundle;III)
Landroid/hardware/biometrics/IBiometricService;->cancelAuthentication(Landroid/os/IBinder;Ljava/lang/String;III)
Landroid/hardware/biometrics/IBiometricService;->onReadyForAuthentication(IZI)
Landroid/hardware/biometrics/IBiometricService;->resetLockout([B)
Landroid/hardware/biometrics/IBiometricService;->setActiveUser(I)
Landroid/hardware/biometrics/IBiometricService$Default;->authenticate(Landroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiver;Ljava/lang/String;Landroid/os/Bundle;III)
Landroid/hardware/biometrics/IBiometricService$Default;->cancelAuthentication(Landroid/os/IBinder;Ljava/lang/String;III)
Landroid/hardware/biometrics/IBiometricService$Default;->onReadyForAuthentication(IZI)
Landroid/hardware/biometrics/IBiometricService$Default;->resetLockout([B)
Landroid/hardware/biometrics/IBiometricService$Default;->setActiveUser(I)
Landroid/hardware/biometrics/IBiometricService$Stub$Proxy;->authenticate(Landroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiver;Ljava/lang/String;Landroid/os/Bundle;III)
Landroid/hardware/biometrics/IBiometricService$Stub$Proxy;->cancelAuthentication(Landroid/os/IBinder;Ljava/lang/String;III)
Landroid/hardware/biometrics/IBiometricService$Stub$Proxy;->onReadyForAuthentication(IZI)
Landroid/hardware/biometrics/IBiometricService$Stub$Proxy;->resetLockout([B)
Landroid/hardware/biometrics/IBiometricService$Stub$Proxy;->setActiveUser(I)
Landroid/hardware/biometrics/IBiometricServiceLockoutResetCallback;->onLockoutReset(JLandroid/os/IRemoteCallback;)
Landroid/hardware/biometrics/IBiometricServiceLockoutResetCallback$Default;->onLockoutReset(JLandroid/os/IRemoteCallback;)
Landroid/hardware/biometrics/IBiometricServiceLockoutResetCallback$Stub$Proxy;->onLockoutReset(JLandroid/os/IRemoteCallback;)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;->onAcquired(ILjava/lang/String;)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;->onAuthenticationFailed()
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;->onAuthenticationSucceeded(Z[BZ)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;->onDeviceCredentialPressed()
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;->onDialogDismissed(I[B)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;->onError(IIII)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;->onSystemEvent(I)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;->onTryAgainPressed()
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Default;-><init>()
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Default;->asBinder()
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Default;->onAcquired(ILjava/lang/String;)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Default;->onAuthenticationFailed()
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Default;->onAuthenticationSucceeded(Z[BZ)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Default;->onDeviceCredentialPressed()
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Default;->onDialogDismissed(I[B)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Default;->onError(IIII)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Default;->onSystemEvent(I)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Default;->onTryAgainPressed()
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;-><init>()
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->asBinder()
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->getDefaultImpl()
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->getDefaultTransactionName(I)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->getTransactionName(I)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub;->setDefaultImpl(Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub$Proxy;->asBinder()
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub$Proxy;->getInterfaceDescriptor()
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub$Proxy;->onAcquired(ILjava/lang/String;)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub$Proxy;->onAuthenticationFailed()
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub$Proxy;->onAuthenticationSucceeded(Z[BZ)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub$Proxy;->onDeviceCredentialPressed()
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub$Proxy;->onDialogDismissed(I[B)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub$Proxy;->onError(IIII)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub$Proxy;->onSystemEvent(I)
Landroid/hardware/biometrics/IBiometricServiceReceiverInternal$Stub$Proxy;->onTryAgainPressed()
Landroid/hardware/camera2/CameraManager;->openCameraDeviceUserAsync(Ljava/lang/String;Landroid/hardware/camera2/CameraDevice$StateCallback;Ljava/util/concurrent/Executor;I)
Landroid/hardware/camera2/CameraManager;->supportsCamera2ApiLocked(Ljava/lang/String;)
Landroid/hardware/camera2/CameraManager;->supportsCameraApiLocked(Ljava/lang/String;I)
Landroid/hardware/camera2/CameraManager$CameraManagerGlobal;->isConcurrentSessionConfigurationSupported(Ljava/util/Map;)
Landroid/hardware/camera2/CaptureResult;-><init>(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/camera2/CaptureRequest;Landroid/hardware/camera2/impl/CaptureResultExtras;)
Landroid/hardware/camera2/ICameraDeviceUser;->createInputStream(III)
Landroid/hardware/camera2/ICameraDeviceUser;->endConfigure(ILandroid/hardware/camera2/impl/CameraMetadataNative;)
Landroid/hardware/camera2/ICameraDeviceUser$Default;->createInputStream(III)
Landroid/hardware/camera2/ICameraDeviceUser$Default;->endConfigure(ILandroid/hardware/camera2/impl/CameraMetadataNative;)
Landroid/hardware/camera2/ICameraDeviceUser$Stub$Proxy;->createInputStream(III)
Landroid/hardware/camera2/ICameraDeviceUser$Stub$Proxy;->endConfigure(ILandroid/hardware/camera2/impl/CameraMetadataNative;)
Landroid/hardware/camera2/TotalCaptureResult;-><init>(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/camera2/CaptureRequest;Landroid/hardware/camera2/impl/CaptureResultExtras;Ljava/util/List;I[Landroid/hardware/camera2/impl/PhysicalCaptureResultInfo;)
Landroid/hardware/camera2/impl/CameraDeviceImpl;-><init>(Ljava/lang/String;Landroid/hardware/camera2/CameraDevice$StateCallback;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraCharacteristics;I)
Landroid/hardware/camera2/impl/CameraDeviceImpl;->checkEarlyTriggerSequenceComplete(IJ[I)
Landroid/hardware/camera2/impl/CameraDeviceImpl;->configureStreamsChecked(Landroid/hardware/camera2/params/InputConfiguration;Ljava/util/List;ILandroid/hardware/camera2/CaptureRequest;)
Landroid/hardware/camera2/impl/CameraMetadataNative;->getMandatoryStreamCombinationsHelper(Z)
Landroid/hardware/camera2/impl/CaptureResultExtras;-><init>(IIIIJIILjava/lang/String;)
Landroid/hardware/camera2/impl/ICameraDeviceUserWrapper;->createInputStream(III)
Landroid/hardware/camera2/impl/ICameraDeviceUserWrapper;->endConfigure(ILandroid/hardware/camera2/impl/CameraMetadataNative;)
Landroid/hardware/camera2/legacy/BurstHolder;-><init>(IZ[Landroid/hardware/camera2/CaptureRequest;Ljava/util/Collection;)
Landroid/hardware/camera2/legacy/BurstHolder;->getNumberOfRequests()
Landroid/hardware/camera2/legacy/BurstHolder;->getRequestId()
Landroid/hardware/camera2/legacy/BurstHolder;->isRepeating()
Landroid/hardware/camera2/legacy/BurstHolder;->produceRequestHolders(J)
Landroid/hardware/camera2/legacy/CameraDeviceState;-><init>()
Landroid/hardware/camera2/legacy/CameraDeviceState;->doStateTransition(I)
Landroid/hardware/camera2/legacy/CameraDeviceState;->doStateTransition(IJI)
Landroid/hardware/camera2/legacy/CameraDeviceState;->setCameraDeviceCallbacks(Landroid/os/Handler;Landroid/hardware/camera2/legacy/CameraDeviceState$CameraDeviceStateListener;)
Landroid/hardware/camera2/legacy/CameraDeviceState;->setCaptureResult(Landroid/hardware/camera2/legacy/RequestHolder;Landroid/hardware/camera2/impl/CameraMetadataNative;)
Landroid/hardware/camera2/legacy/CameraDeviceState;->setCaptureResult(Landroid/hardware/camera2/legacy/RequestHolder;Landroid/hardware/camera2/impl/CameraMetadataNative;ILjava/lang/Object;)
Landroid/hardware/camera2/legacy/CameraDeviceState;->setCaptureStart(Landroid/hardware/camera2/legacy/RequestHolder;JI)
Landroid/hardware/camera2/legacy/CameraDeviceState;->setConfiguring()
Landroid/hardware/camera2/legacy/CameraDeviceState;->setError(I)
Landroid/hardware/camera2/legacy/CameraDeviceState;->setIdle()
Landroid/hardware/camera2/legacy/CameraDeviceState;->setRepeatingRequestError(JI)
Landroid/hardware/camera2/legacy/CameraDeviceState;->setRequestQueueEmpty()
Landroid/hardware/camera2/legacy/CameraDeviceState$CameraDeviceStateListener;->onBusy()
Landroid/hardware/camera2/legacy/CameraDeviceState$CameraDeviceStateListener;->onCaptureResult(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/camera2/legacy/RequestHolder;)
Landroid/hardware/camera2/legacy/CameraDeviceState$CameraDeviceStateListener;->onCaptureStarted(Landroid/hardware/camera2/legacy/RequestHolder;J)
Landroid/hardware/camera2/legacy/CameraDeviceState$CameraDeviceStateListener;->onConfiguring()
Landroid/hardware/camera2/legacy/CameraDeviceState$CameraDeviceStateListener;->onError(ILjava/lang/Object;Landroid/hardware/camera2/legacy/RequestHolder;)
Landroid/hardware/camera2/legacy/CameraDeviceState$CameraDeviceStateListener;->onIdle()
Landroid/hardware/camera2/legacy/CameraDeviceState$CameraDeviceStateListener;->onRepeatingRequestError(JI)
Landroid/hardware/camera2/legacy/CameraDeviceState$CameraDeviceStateListener;->onRequestQueueEmpty()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;-><init>(ILandroid/hardware/camera2/legacy/LegacyCameraDevice;Landroid/hardware/camera2/CameraCharacteristics;Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraLooper;Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->asBinder()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->beginConfigure()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->cancelRequest(I)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->connectBinderShim(Landroid/hardware/camera2/ICameraDeviceCallbacks;ILandroid/util/Size;)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->createDefaultRequest(I)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->createInputStream(III)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->createStream(Landroid/hardware/camera2/params/OutputConfiguration;)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->deleteStream(I)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->disconnect()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->endConfigure(ILandroid/hardware/camera2/impl/CameraMetadataNative;)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->finalizeOutputConfigurations(ILandroid/hardware/camera2/params/OutputConfiguration;)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->flush()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->getCameraInfo()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->getGlobalAudioRestriction()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->getInputSurface()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->isSessionConfigurationSupported(Landroid/hardware/camera2/params/SessionConfiguration;)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->prepare(I)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->prepare2(II)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->setCameraAudioRestriction(I)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->submitRequest(Landroid/hardware/camera2/CaptureRequest;Z)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->submitRequestList([Landroid/hardware/camera2/CaptureRequest;Z)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->switchToOffline(Landroid/hardware/camera2/ICameraDeviceCallbacks;[I)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->tearDown(I)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->translateErrorsFromCamera1(I)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->updateOutputConfiguration(ILandroid/hardware/camera2/params/OutputConfiguration;)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim;->waitUntilIdle()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;-><init>(Landroid/hardware/camera2/ICameraDeviceCallbacks;)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->asBinder()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->close()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->getHandler()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->onCaptureStarted(Landroid/hardware/camera2/impl/CaptureResultExtras;J)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->onDeviceError(ILandroid/hardware/camera2/impl/CaptureResultExtras;)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->onDeviceIdle()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->onPrepared(I)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->onRepeatingRequestError(JI)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->onRequestQueueEmpty()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;->onResultReceived(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/camera2/impl/CaptureResultExtras;[Landroid/hardware/camera2/impl/PhysicalCaptureResultInfo;)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread$CallbackHandler;-><init>(Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread;Landroid/os/Looper;)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraCallbackThread$CallbackHandler;->handleMessage(Landroid/os/Message;)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraLooper;-><init>(I)
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraLooper;->close()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraLooper;->getCamera()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraLooper;->run()
Landroid/hardware/camera2/legacy/CameraDeviceUserShim$CameraLooper;->waitForOpen(I)
Landroid/hardware/camera2/legacy/CaptureCollector;-><init>(ILandroid/hardware/camera2/legacy/CameraDeviceState;)
Landroid/hardware/camera2/legacy/CaptureCollector;->failAll()
Landroid/hardware/camera2/legacy/CaptureCollector;->failNextJpeg()
Landroid/hardware/camera2/legacy/CaptureCollector;->failNextPreview()
Landroid/hardware/camera2/legacy/CaptureCollector;->hasPendingPreviewCaptures()
Landroid/hardware/camera2/legacy/CaptureCollector;->jpegCaptured(J)
Landroid/hardware/camera2/legacy/CaptureCollector;->jpegProduced()
Landroid/hardware/camera2/legacy/CaptureCollector;->onPreviewCompleted()
Landroid/hardware/camera2/legacy/CaptureCollector;->onRequestCompleted(Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;)
Landroid/hardware/camera2/legacy/CaptureCollector;->previewCaptured(J)
Landroid/hardware/camera2/legacy/CaptureCollector;->previewProduced()
Landroid/hardware/camera2/legacy/CaptureCollector;->queueRequest(Landroid/hardware/camera2/legacy/RequestHolder;Landroid/hardware/camera2/legacy/LegacyRequest;JLjava/util/concurrent/TimeUnit;)
Landroid/hardware/camera2/legacy/CaptureCollector;->removeRequestIfCompleted(Landroid/hardware/camera2/legacy/RequestHolder;Landroid/util/MutableLong;)
Landroid/hardware/camera2/legacy/CaptureCollector;->waitForEmpty(JLjava/util/concurrent/TimeUnit;)
Landroid/hardware/camera2/legacy/CaptureCollector;->waitForPreviewsEmpty(JLjava/util/concurrent/TimeUnit;)
Landroid/hardware/camera2/legacy/CaptureCollector;->waitForRequestCompleted(Landroid/hardware/camera2/legacy/RequestHolder;JLjava/util/concurrent/TimeUnit;Landroid/util/MutableLong;)
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;-><init>(Landroid/hardware/camera2/legacy/CaptureCollector;Landroid/hardware/camera2/legacy/RequestHolder;Landroid/hardware/camera2/legacy/LegacyRequest;)
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->compareTo(Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;)
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->compareTo(Ljava/lang/Object;)
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->equals(Ljava/lang/Object;)
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->isCompleted()
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->isJpegCompleted()
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->isPreviewCompleted()
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->setJpegFailed()
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->setJpegProduced()
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->setJpegTimestamp(J)
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->setPreviewFailed()
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->setPreviewProduced()
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->setPreviewTimestamp(J)
Landroid/hardware/camera2/legacy/CaptureCollector$CaptureHolder;->tryComplete()
Landroid/hardware/camera2/legacy/GLThreadManager;-><init>(IILandroid/hardware/camera2/legacy/CameraDeviceState;)
Landroid/hardware/camera2/legacy/GLThreadManager;->allowNewFrames()
Landroid/hardware/camera2/legacy/GLThreadManager;->getCurrentSurfaceTexture()
Landroid/hardware/camera2/legacy/GLThreadManager;->ignoreNewFrames()
Landroid/hardware/camera2/legacy/GLThreadManager;->queueNewFrame()
Landroid/hardware/camera2/legacy/GLThreadManager;->quit()
Landroid/hardware/camera2/legacy/GLThreadManager;->setConfigurationAndWait(Ljava/util/Collection;Landroid/hardware/camera2/legacy/CaptureCollector;)
Landroid/hardware/camera2/legacy/GLThreadManager;->start()
Landroid/hardware/camera2/legacy/GLThreadManager;->waitUntilIdle()
Landroid/hardware/camera2/legacy/GLThreadManager;->waitUntilStarted()
Landroid/hardware/camera2/legacy/GLThreadManager$ConfigureHolder;-><init>(Landroid/os/ConditionVariable;Ljava/util/Collection;Landroid/hardware/camera2/legacy/CaptureCollector;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;-><init>(ILandroid/hardware/Camera;Landroid/hardware/camera2/CameraCharacteristics;Landroid/hardware/camera2/ICameraDeviceCallbacks;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->cancelRequest(I)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->close()
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->configureOutputs(Landroid/util/SparseArray;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->configureOutputs(Landroid/util/SparseArray;Z)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->connectSurface(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->containsSurfaceId(Landroid/view/Surface;Ljava/util/Collection;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->detectSurfaceDataspace(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->detectSurfaceType(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->detectSurfaceUsageFlags(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->disconnectSurface(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->finalize()
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->findClosestSize(Landroid/util/Size;[Landroid/util/Size;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->findEuclidDistSquare(Landroid/util/Size;Landroid/util/Size;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->flush()
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->getAudioRestriction()
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->getExtrasFromRequest(Landroid/hardware/camera2/legacy/RequestHolder;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->getExtrasFromRequest(Landroid/hardware/camera2/legacy/RequestHolder;ILjava/lang/Object;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->getSurfaceId(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->getSurfaceIds(Landroid/util/SparseArray;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->getSurfaceIds(Ljava/util/Collection;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->getSurfaceSize(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->getTextureSize(Landroid/graphics/SurfaceTexture;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->isClosed()
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->isFlexibleConsumer(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->isPreviewConsumer(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->isVideoEncoderConsumer(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->nativeConnectSurface(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->nativeDetectSurfaceDataspace(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->nativeDetectSurfaceDimens(Landroid/view/Surface;[I)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->nativeDetectSurfaceType(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->nativeDetectSurfaceUsageFlags(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->nativeDetectTextureDimens(Landroid/graphics/SurfaceTexture;[I)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->nativeDisconnectSurface(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->nativeGetJpegFooterSize()
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->nativeGetSurfaceId(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->nativeProduceFrame(Landroid/view/Surface;[BIII)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->nativeSetNextTimestamp(Landroid/view/Surface;J)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->nativeSetScalingMode(Landroid/view/Surface;I)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->nativeSetSurfaceDimens(Landroid/view/Surface;II)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->nativeSetSurfaceFormat(Landroid/view/Surface;I)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->nativeSetSurfaceOrientation(Landroid/view/Surface;II)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->needsConversion(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->produceFrame(Landroid/view/Surface;[BIII)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->setAudioRestriction(I)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->setNextTimestamp(Landroid/view/Surface;J)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->setScalingMode(Landroid/view/Surface;I)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->setSurfaceDimens(Landroid/view/Surface;II)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->setSurfaceFormat(Landroid/view/Surface;I)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->setSurfaceOrientation(Landroid/view/Surface;II)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->submitRequest(Landroid/hardware/camera2/CaptureRequest;Z)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->submitRequestList([Landroid/hardware/camera2/CaptureRequest;Z)
Landroid/hardware/camera2/legacy/LegacyCameraDevice;->waitUntilIdle()
Landroid/hardware/camera2/legacy/LegacyExceptionUtils;-><init>()
Landroid/hardware/camera2/legacy/LegacyExceptionUtils;->throwOnError(I)
Landroid/hardware/camera2/legacy/LegacyExceptionUtils;->throwOnServiceError(I)
Landroid/hardware/camera2/legacy/LegacyExceptionUtils$BufferQueueAbandonedException;-><init>()
Landroid/hardware/camera2/legacy/LegacyExceptionUtils$BufferQueueAbandonedException;-><init>(Ljava/lang/Exception;)
Landroid/hardware/camera2/legacy/LegacyExceptionUtils$BufferQueueAbandonedException;-><init>(Ljava/lang/String;)
Landroid/hardware/camera2/legacy/LegacyExceptionUtils$BufferQueueAbandonedException;-><init>(Ljava/lang/String;Ljava/lang/Throwable;)
Landroid/hardware/camera2/legacy/LegacyFaceDetectMapper;-><init>(Landroid/hardware/Camera;Landroid/hardware/camera2/CameraCharacteristics;)
Landroid/hardware/camera2/legacy/LegacyFaceDetectMapper;->mapResultFaces(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/camera2/legacy/LegacyRequest;)
Landroid/hardware/camera2/legacy/LegacyFaceDetectMapper;->processFaceDetectMode(Landroid/hardware/camera2/CaptureRequest;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyFocusStateMapper;-><init>(Landroid/hardware/Camera;)
Landroid/hardware/camera2/legacy/LegacyFocusStateMapper;->afStateToString(I)
Landroid/hardware/camera2/legacy/LegacyFocusStateMapper;->mapResultTriggers(Landroid/hardware/camera2/impl/CameraMetadataNative;)
Landroid/hardware/camera2/legacy/LegacyFocusStateMapper;->processRequestTriggers(Landroid/hardware/camera2/CaptureRequest;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;-><init>()
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->appendStreamConfig(Ljava/util/ArrayList;ILjava/util/List;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->calculateJpegStallDuration(Landroid/hardware/Camera$Size;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->convertAeFpsRangeToLegacy(Landroid/util/Range;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->convertAfModeToLegacy(ILjava/util/List;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->convertAntiBandingMode(Ljava/lang/String;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->convertAntiBandingModeOrDefault(Ljava/lang/String;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->convertEffectModeFromLegacy(Ljava/lang/String;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->convertEffectModeToLegacy(I)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->convertRequestMetadata(Landroid/hardware/camera2/legacy/LegacyRequest;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->convertSceneModeFromLegacy(Ljava/lang/String;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->convertSceneModeToLegacy(I)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->createCharacteristics(Landroid/hardware/Camera$Parameters;Landroid/hardware/Camera$CameraInfo;ILandroid/util/Size;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->createCharacteristics(Ljava/lang/String;Landroid/hardware/CameraInfo;ILandroid/util/Size;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->createRequestTemplate(Landroid/hardware/camera2/CameraCharacteristics;I)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->getTagsForKeys([Landroid/hardware/camera2/CameraCharacteristics$Key;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->getTagsForKeys([Landroid/hardware/camera2/CaptureRequest$Key;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->getTagsForKeys([Landroid/hardware/camera2/CaptureResult$Key;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->mapCharacteristicsFromInfo(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$CameraInfo;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->mapCharacteristicsFromParameters(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->mapControlAe(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->mapControlAf(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->mapControlAwb(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->mapControlOther(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->mapFlash(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->mapJpeg(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->mapLens(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->mapRequest(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->mapScaler(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->mapScalerStreamConfigs(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->mapSensor(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->mapStatistics(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyMetadataMapper;->mapSync(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyRequest;-><init>(Landroid/hardware/camera2/CameraCharacteristics;Landroid/hardware/camera2/CaptureRequest;Landroid/util/Size;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyRequest;->setParameters(Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyRequestMapper;-><init>()
Landroid/hardware/camera2/legacy/LegacyRequestMapper;->checkForCompleteGpsData(Landroid/location/Location;)
Landroid/hardware/camera2/legacy/LegacyRequestMapper;->convertAeAntiBandingModeToLegacy(I)
Landroid/hardware/camera2/legacy/LegacyRequestMapper;->convertAeFpsRangeToLegacy(Landroid/util/Range;)
Landroid/hardware/camera2/legacy/LegacyRequestMapper;->convertAwbModeToLegacy(I)
Landroid/hardware/camera2/legacy/LegacyRequestMapper;->convertMeteringRegionsToLegacy(Landroid/graphics/Rect;Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;[Landroid/hardware/camera2/params/MeteringRectangle;ILjava/lang/String;)
Landroid/hardware/camera2/legacy/LegacyRequestMapper;->convertRequestMetadata(Landroid/hardware/camera2/legacy/LegacyRequest;)
Landroid/hardware/camera2/legacy/LegacyRequestMapper;->filterSupportedCaptureIntent(I)
Landroid/hardware/camera2/legacy/LegacyRequestMapper;->getIfSupported(Landroid/hardware/camera2/CaptureRequest;Landroid/hardware/camera2/CaptureRequest$Key;Ljava/lang/Object;ZLjava/lang/Object;)
Landroid/hardware/camera2/legacy/LegacyRequestMapper;->mapAeAndFlashMode(Landroid/hardware/camera2/CaptureRequest;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyResultMapper;-><init>()
Landroid/hardware/camera2/legacy/LegacyResultMapper;->cachedConvertResultMetadata(Landroid/hardware/camera2/legacy/LegacyRequest;J)
Landroid/hardware/camera2/legacy/LegacyResultMapper;->convertLegacyAfMode(Ljava/lang/String;)
Landroid/hardware/camera2/legacy/LegacyResultMapper;->convertLegacyAwbMode(Ljava/lang/String;)
Landroid/hardware/camera2/legacy/LegacyResultMapper;->convertResultMetadata(Landroid/hardware/camera2/legacy/LegacyRequest;)
Landroid/hardware/camera2/legacy/LegacyResultMapper;->getMeteringRectangles(Landroid/graphics/Rect;Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;Ljava/util/List;Ljava/lang/String;)
Landroid/hardware/camera2/legacy/LegacyResultMapper;->mapAe(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/camera2/CameraCharacteristics;Landroid/hardware/camera2/CaptureRequest;Landroid/graphics/Rect;Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyResultMapper;->mapAeAndFlashMode(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/camera2/CameraCharacteristics;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyResultMapper;->mapAf(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/graphics/Rect;Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyResultMapper;->mapAwb(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/LegacyResultMapper;->mapScaler(Landroid/hardware/camera2/impl/CameraMetadataNative;Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/ParameterUtils;-><init>()
Landroid/hardware/camera2/legacy/ParameterUtils;->containsSize(Ljava/util/List;II)
Landroid/hardware/camera2/legacy/ParameterUtils;->convertCameraAreaToActiveArrayRectangle(Landroid/graphics/Rect;Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;Landroid/hardware/Camera$Area;)
Landroid/hardware/camera2/legacy/ParameterUtils;->convertCameraAreaToActiveArrayRectangle(Landroid/graphics/Rect;Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;Landroid/hardware/Camera$Area;Z)
Landroid/hardware/camera2/legacy/ParameterUtils;->convertCameraPointToActiveArrayPoint(Landroid/graphics/Rect;Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;Landroid/graphics/Point;Z)
Landroid/hardware/camera2/legacy/ParameterUtils;->convertFaceFromLegacy(Landroid/hardware/Camera$Face;Landroid/graphics/Rect;Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;)
Landroid/hardware/camera2/legacy/ParameterUtils;->convertMeteringRectangleToLegacy(Landroid/graphics/Rect;Landroid/hardware/camera2/params/MeteringRectangle;Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;)
Landroid/hardware/camera2/legacy/ParameterUtils;->convertScalerCropRegion(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/util/Size;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/ParameterUtils;->convertSize(Landroid/hardware/Camera$Size;)
Landroid/hardware/camera2/legacy/ParameterUtils;->convertSizeList(Ljava/util/List;)
Landroid/hardware/camera2/legacy/ParameterUtils;->convertSizeListToArray(Ljava/util/List;)
Landroid/hardware/camera2/legacy/ParameterUtils;->convertToLegacyZoom(Landroid/graphics/Rect;Landroid/graphics/Rect;Ljava/lang/Float;Landroid/util/Size;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/ParameterUtils;->convertZoomRatio(Landroid/graphics/Rect;FLandroid/util/Size;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/ParameterUtils;->getAvailableCropRectangles(Landroid/hardware/Camera$Parameters;Landroid/graphics/Rect;Landroid/util/Size;)
Landroid/hardware/camera2/legacy/ParameterUtils;->getAvailablePreviewZoomCropRectangles(Landroid/hardware/Camera$Parameters;Landroid/graphics/Rect;Landroid/util/Size;)
Landroid/hardware/camera2/legacy/ParameterUtils;->getAvailableZoomCropRectangles(Landroid/hardware/Camera$Parameters;Landroid/graphics/Rect;)
Landroid/hardware/camera2/legacy/ParameterUtils;->getClosestAvailableZoomCrop(Landroid/hardware/Camera$Parameters;Landroid/graphics/Rect;Landroid/util/Size;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)
Landroid/hardware/camera2/legacy/ParameterUtils;->getLargestSupportedJpegSizeByArea(Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/ParameterUtils;->getMaxZoomRatio(Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/ParameterUtils;->getPreviewCropRectangleUnzoomed(Landroid/graphics/Rect;Landroid/util/Size;)
Landroid/hardware/camera2/legacy/ParameterUtils;->getZoomRatio(Landroid/util/Size;Landroid/util/Size;)
Landroid/hardware/camera2/legacy/ParameterUtils;->shrinkToSameAspectRatioCentered(Landroid/graphics/Rect;Landroid/graphics/Rect;)
Landroid/hardware/camera2/legacy/ParameterUtils;->stringFromArea(Landroid/hardware/Camera$Area;)
Landroid/hardware/camera2/legacy/ParameterUtils;->stringFromAreaList(Ljava/util/List;)
Landroid/hardware/camera2/legacy/ParameterUtils$MeteringData;-><init>(Landroid/hardware/Camera$Area;Landroid/graphics/Rect;Landroid/graphics/Rect;)
Landroid/hardware/camera2/legacy/ParameterUtils$WeightedRectangle;-><init>(Landroid/graphics/Rect;I)
Landroid/hardware/camera2/legacy/ParameterUtils$WeightedRectangle;->clip(IIILandroid/graphics/Rect;Ljava/lang/String;)
Landroid/hardware/camera2/legacy/ParameterUtils$WeightedRectangle;->clipLower(IILandroid/graphics/Rect;Ljava/lang/String;)
Landroid/hardware/camera2/legacy/ParameterUtils$WeightedRectangle;->toFace()
Landroid/hardware/camera2/legacy/ParameterUtils$WeightedRectangle;->toFace(ILandroid/graphics/Point;Landroid/graphics/Point;Landroid/graphics/Point;)
Landroid/hardware/camera2/legacy/ParameterUtils$WeightedRectangle;->toMetering()
Landroid/hardware/camera2/legacy/ParameterUtils$ZoomData;-><init>(ILandroid/graphics/Rect;Landroid/graphics/Rect;F)
Landroid/hardware/camera2/legacy/PerfMeasurement;-><init>()
Landroid/hardware/camera2/legacy/PerfMeasurement;-><init>(I)
Landroid/hardware/camera2/legacy/PerfMeasurement;->addTimestamp(J)
Landroid/hardware/camera2/legacy/PerfMeasurement;->dumpPerformanceData(Ljava/lang/String;)
Landroid/hardware/camera2/legacy/PerfMeasurement;->finalize()
Landroid/hardware/camera2/legacy/PerfMeasurement;->getCompletedQueryCount()
Landroid/hardware/camera2/legacy/PerfMeasurement;->getNextGlDuration()
Landroid/hardware/camera2/legacy/PerfMeasurement;->isGlTimingSupported()
Landroid/hardware/camera2/legacy/PerfMeasurement;->nativeCreateContext(I)
Landroid/hardware/camera2/legacy/PerfMeasurement;->nativeDeleteContext(J)
Landroid/hardware/camera2/legacy/PerfMeasurement;->nativeGetNextGlDuration(J)
Landroid/hardware/camera2/legacy/PerfMeasurement;->nativeQuerySupport()
Landroid/hardware/camera2/legacy/PerfMeasurement;->nativeStartGlTimer(J)
Landroid/hardware/camera2/legacy/PerfMeasurement;->nativeStopGlTimer(J)
Landroid/hardware/camera2/legacy/PerfMeasurement;->startTimer()
Landroid/hardware/camera2/legacy/PerfMeasurement;->stopTimer()
Landroid/hardware/camera2/legacy/RequestHandlerThread;-><init>(Ljava/lang/String;Landroid/os/Handler$Callback;)
Landroid/hardware/camera2/legacy/RequestHandlerThread;->getHandler()
Landroid/hardware/camera2/legacy/RequestHandlerThread;->hasAnyMessages([I)
Landroid/hardware/camera2/legacy/RequestHandlerThread;->onLooperPrepared()
Landroid/hardware/camera2/legacy/RequestHandlerThread;->removeMessages([I)
Landroid/hardware/camera2/legacy/RequestHandlerThread;->waitAndGetHandler()
Landroid/hardware/camera2/legacy/RequestHandlerThread;->waitUntilIdle()
Landroid/hardware/camera2/legacy/RequestHandlerThread;->waitUntilStarted()
Landroid/hardware/camera2/legacy/RequestHolder;-><init>(IILandroid/hardware/camera2/CaptureRequest;ZJIILjava/util/Collection;)
Landroid/hardware/camera2/legacy/RequestHolder;-><init>(IILandroid/hardware/camera2/CaptureRequest;ZJIILjava/util/Collection;Landroid/hardware/camera2/legacy/RequestHolder$1;)
Landroid/hardware/camera2/legacy/RequestHolder;->failRequest()
Landroid/hardware/camera2/legacy/RequestHolder;->getFrameNumber()
Landroid/hardware/camera2/legacy/RequestHolder;->getHolderTargets()
Landroid/hardware/camera2/legacy/RequestHolder;->getRequest()
Landroid/hardware/camera2/legacy/RequestHolder;->getRequestId()
Landroid/hardware/camera2/legacy/RequestHolder;->getSubsequeceId()
Landroid/hardware/camera2/legacy/RequestHolder;->hasJpegTargets()
Landroid/hardware/camera2/legacy/RequestHolder;->hasPreviewTargets()
Landroid/hardware/camera2/legacy/RequestHolder;->isOutputAbandoned()
Landroid/hardware/camera2/legacy/RequestHolder;->isRepeating()
Landroid/hardware/camera2/legacy/RequestHolder;->jpegType(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/RequestHolder;->numJpegTargets()
Landroid/hardware/camera2/legacy/RequestHolder;->numPreviewTargets()
Landroid/hardware/camera2/legacy/RequestHolder;->requestFailed()
Landroid/hardware/camera2/legacy/RequestHolder;->setOutputAbandoned()
Landroid/hardware/camera2/legacy/RequestHolder$Builder;-><init>(IILandroid/hardware/camera2/CaptureRequest;ZLjava/util/Collection;)
Landroid/hardware/camera2/legacy/RequestHolder$Builder;->build(J)
Landroid/hardware/camera2/legacy/RequestHolder$Builder;->jpegType(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/RequestHolder$Builder;->numJpegTargets(Landroid/hardware/camera2/CaptureRequest;)
Landroid/hardware/camera2/legacy/RequestHolder$Builder;->numPreviewTargets(Landroid/hardware/camera2/CaptureRequest;)
Landroid/hardware/camera2/legacy/RequestHolder$Builder;->previewType(Landroid/view/Surface;)
Landroid/hardware/camera2/legacy/RequestQueue;-><init>(Ljava/util/List;)
Landroid/hardware/camera2/legacy/RequestQueue;->calculateLastFrame(I)
Landroid/hardware/camera2/legacy/RequestQueue;->getNext()
Landroid/hardware/camera2/legacy/RequestQueue;->stopRepeating()
Landroid/hardware/camera2/legacy/RequestQueue;->stopRepeating(I)
Landroid/hardware/camera2/legacy/RequestQueue;->submit([Landroid/hardware/camera2/CaptureRequest;Z)
Landroid/hardware/camera2/legacy/RequestQueue$RequestQueueEntry;-><init>(Landroid/hardware/camera2/legacy/RequestQueue;Landroid/hardware/camera2/legacy/BurstHolder;Ljava/lang/Long;Z)
Landroid/hardware/camera2/legacy/RequestQueue$RequestQueueEntry;->getBurstHolder()
Landroid/hardware/camera2/legacy/RequestQueue$RequestQueueEntry;->getFrameNumber()
Landroid/hardware/camera2/legacy/RequestQueue$RequestQueueEntry;->isQueueEmpty()
Landroid/hardware/camera2/legacy/RequestThreadManager;-><init>(ILandroid/hardware/Camera;Landroid/hardware/camera2/CameraCharacteristics;Landroid/hardware/camera2/legacy/CameraDeviceState;)
Landroid/hardware/camera2/legacy/RequestThreadManager;->calculatePictureSize(Ljava/util/List;Ljava/util/List;Landroid/hardware/Camera$Parameters;)
Landroid/hardware/camera2/legacy/RequestThreadManager;->cancelRepeating(I)
Landroid/hardware/camera2/legacy/RequestThreadManager;->checkAspectRatiosMatch(Landroid/util/Size;Landroid/util/Size;)
Landroid/hardware/camera2/legacy/RequestThreadManager;->configure(Ljava/util/Collection;)
Landroid/hardware/camera2/legacy/RequestThreadManager;->configureOutputs(Ljava/util/Collection;)
Landroid/hardware/camera2/legacy/RequestThreadManager;->createDummySurface()
Landroid/hardware/camera2/legacy/RequestThreadManager;->disconnectCallbackSurfaces()
Landroid/hardware/camera2/legacy/RequestThreadManager;->doJpegCapture(Landroid/hardware/camera2/legacy/RequestHolder;)
Landroid/hardware/camera2/legacy/RequestThreadManager;->doJpegCapturePrepare(Landroid/hardware/camera2/legacy/RequestHolder;)
Landroid/hardware/camera2/legacy/RequestThreadManager;->doPreviewCapture(Landroid/hardware/camera2/legacy/RequestHolder;)
Landroid/hardware/camera2/legacy/RequestThreadManager;->flush()
Landroid/hardware/camera2/legacy/RequestThreadManager;->getAudioRestriction()
Landroid/hardware/camera2/legacy/RequestThreadManager;->getPhotoPreviewFpsRange(Ljava/util/List;)
Landroid/hardware/camera2/legacy/RequestThreadManager;->quit()
Landroid/hardware/camera2/legacy/RequestThreadManager;->resetJpegSurfaceFormats(Ljava/util/Collection;)
Landroid/hardware/camera2/legacy/RequestThreadManager;->setAudioRestriction(I)
Landroid/hardware/camera2/legacy/RequestThreadManager;->start()
Landroid/hardware/camera2/legacy/RequestThreadManager;->startPreview()
Landroid/hardware/camera2/legacy/RequestThreadManager;->stopPreview()
Landroid/hardware/camera2/legacy/RequestThreadManager;->submitCaptureRequests([Landroid/hardware/camera2/CaptureRequest;Z)
Landroid/hardware/camera2/legacy/RequestThreadManager$ConfigureHolder;-><init>(Landroid/os/ConditionVariable;Ljava/util/Collection;)
Landroid/hardware/camera2/legacy/RequestThreadManager$FpsCounter;-><init>(Ljava/lang/String;)
Landroid/hardware/camera2/legacy/RequestThreadManager$FpsCounter;->checkFps()
Landroid/hardware/camera2/legacy/RequestThreadManager$FpsCounter;->countAndLog()
Landroid/hardware/camera2/legacy/RequestThreadManager$FpsCounter;->countFrame()
Landroid/hardware/camera2/legacy/RequestThreadManager$FpsCounter;->staggeredLog()
Landroid/hardware/camera2/legacy/SizeAreaComparator;-><init>()
Landroid/hardware/camera2/legacy/SizeAreaComparator;->compare(Landroid/hardware/Camera$Size;Landroid/hardware/Camera$Size;)
Landroid/hardware/camera2/legacy/SizeAreaComparator;->compare(Ljava/lang/Object;Ljava/lang/Object;)
Landroid/hardware/camera2/legacy/SizeAreaComparator;->findLargestByArea(Ljava/util/List;)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;-><init>(I)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->addGlTimestamp(J)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->beginGlTiming()
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->checkEglDrawError(Ljava/lang/String;)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->checkEglError(Ljava/lang/String;)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->checkGlDrawError(Ljava/lang/String;)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->checkGlError(Ljava/lang/String;)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->cleanupEGLContext()
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->clearState()
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->configureEGLContext()
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->configureEGLOutputSurfaces(Ljava/util/Collection;)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->configureEGLPbufferSurfaces(Ljava/util/Collection;)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->configureSurfaces(Ljava/util/Collection;)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->createProgram(Ljava/lang/String;Ljava/lang/String;)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->drawFrame(Landroid/graphics/SurfaceTexture;III)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->drawIntoSurfaces(Landroid/hardware/camera2/legacy/CaptureCollector;)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->dumpGlTiming()
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->endGlTiming()
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->flush()
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->formatTimestamp(J)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->getSurfaceTexture()
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->getTextureId()
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->initializeGLState()
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->loadShader(ILjava/lang/String;)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->makeCurrent(Landroid/opengl/EGLSurface;)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->releaseEGLContext()
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->setupGlTiming()
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;->swapBuffers(Landroid/opengl/EGLSurface;)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer$EGLSurfaceHolder;-><init>(Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;)
Landroid/hardware/camera2/legacy/SurfaceTextureRenderer$EGLSurfaceHolder;-><init>(Landroid/hardware/camera2/legacy/SurfaceTextureRenderer;Landroid/hardware/camera2/legacy/SurfaceTextureRenderer$1;)
Landroid/hardware/camera2/params/MandatoryStreamCombination$Builder;-><init>(IILandroid/util/Size;Ljava/util/List;Landroid/hardware/camera2/params/StreamConfigurationMap;)
Landroid/hardware/camera2/params/MandatoryStreamCombination$Builder;->compareSizes(IIII)
Landroid/hardware/camera2/params/MandatoryStreamCombination$MandatoryStreamInformation;-><init>(Ljava/util/List;I)
Landroid/hardware/display/BrightnessChangeEvent;-><init>(FJLjava/lang/String;I[F[JFFZIFZZ[JJ)
Landroid/hardware/display/BrightnessChangeEvent;-><init>(FJLjava/lang/String;I[F[JFFZIFZZ[JJLandroid/hardware/display/BrightnessChangeEvent$1;)
Landroid/hardware/display/BrightnessConfiguration;->loadFloatFromXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Landroid/hardware/display/BrightnessConfiguration;->loadFromXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/hardware/display/BrightnessConfiguration;->loadLongFromXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Landroid/hardware/display/BrightnessConfiguration;->saveToXml(Lorg/xmlpull/v1/XmlSerializer;)
Landroid/hardware/display/BrightnessCorrection;->loadFloatFromXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Landroid/hardware/display/BrightnessCorrection;->loadFromXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/hardware/display/BrightnessCorrection;->saveToXml(Lorg/xmlpull/v1/XmlSerializer;)
Landroid/hardware/display/BrightnessCorrection$BrightnessCorrectionImplementation;->saveToXml(Lorg/xmlpull/v1/XmlSerializer;)
Landroid/hardware/display/BrightnessCorrection$ScaleAndTranslateLog;->loadFromXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/hardware/display/BrightnessCorrection$ScaleAndTranslateLog;->saveToXml(Lorg/xmlpull/v1/XmlSerializer;)
Landroid/hardware/display/DeviceProductInfo;-><init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;Landroid/hardware/display/DeviceProductInfo$ManufactureDate;[I)
Landroid/hardware/display/DeviceProductInfo;->getRelativeAddress()
Landroid/hardware/display/DisplayManager;->setTemporaryBrightness(F)
Landroid/hardware/display/DisplayManagerGlobal;->registerDisplayListener(Landroid/hardware/display/DisplayManager$DisplayListener;Landroid/os/Handler;)
Landroid/hardware/display/DisplayManagerGlobal;->setTemporaryBrightness(F)
Landroid/hardware/display/DisplayManagerGlobal$DisplayListenerDelegate;-><init>(Landroid/hardware/display/DisplayManager$DisplayListener;Landroid/os/Looper;)
Landroid/hardware/display/DisplayManagerGlobal$DisplayListenerDelegate;->sendDisplayEvent(II)
Landroid/hardware/display/DisplayManagerInternal;->requestPowerState(Landroid/hardware/display/DisplayManagerInternal$DisplayPowerRequest;Z)
Landroid/hardware/display/DisplayManagerInternal;->setDisplayProperties(IZFIZZ)
Landroid/hardware/display/DisplayManagerInternal$DisplayPowerCallbacks;->onDisplayStateChange(I)
Landroid/hardware/display/IDisplayManager;->setTemporaryBrightness(F)
Landroid/hardware/display/IDisplayManager$Default;->setTemporaryBrightness(F)
Landroid/hardware/display/IDisplayManager$Stub$Proxy;->setTemporaryBrightness(F)
Landroid/hardware/face/FaceManager;->authenticate(Landroid/hardware/biometrics/CryptoObject;Landroid/os/CancellationSignal;ILandroid/hardware/face/FaceManager$AuthenticationCallback;Landroid/os/Handler;)
Landroid/hardware/face/FaceManager;->authenticate(Landroid/hardware/biometrics/CryptoObject;Landroid/os/CancellationSignal;ILandroid/hardware/face/FaceManager$AuthenticationCallback;Landroid/os/Handler;I)
Landroid/hardware/face/FaceManager;->generateChallenge()
Landroid/hardware/face/FaceManager;->getAcquiredString(Landroid/content/Context;II)
Landroid/hardware/face/FaceManager;->getCurrentUserId()
Landroid/hardware/face/FaceManager;->revokeChallenge()
Landroid/hardware/face/FaceManager;->sendAcquiredResult(JII)
Landroid/hardware/face/FaceManager;->sendErrorResult(JII)
Landroid/hardware/face/FaceManager;->sendGetFeatureCompleted(ZIZ)
Landroid/hardware/face/FaceManager;->setActiveUser(I)
Landroid/hardware/face/FaceManager;->userActivity()
Landroid/hardware/face/FaceManager$GetFeatureCallback;->onCompleted(ZIZ)
Landroid/hardware/face/FaceManager$LockoutResetCallback;->onLockoutReset()
Landroid/hardware/face/IFaceService;->addLockoutResetCallback(Landroid/hardware/biometrics/IBiometricServiceLockoutResetCallback;)
Landroid/hardware/face/IFaceService;->authenticate(Landroid/os/IBinder;JILandroid/hardware/face/IFaceServiceReceiver;ILjava/lang/String;)
Landroid/hardware/face/IFaceService;->cancelAuthenticationFromService(Landroid/os/IBinder;Ljava/lang/String;IIIZ)
Landroid/hardware/face/IFaceService;->enroll(ILandroid/os/IBinder;[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;[I)
Landroid/hardware/face/IFaceService;->enumerate(Landroid/os/IBinder;ILandroid/hardware/face/IFaceServiceReceiver;)
Landroid/hardware/face/IFaceService;->generateChallenge(Landroid/os/IBinder;)
Landroid/hardware/face/IFaceService;->getAuthenticatorId(I)
Landroid/hardware/face/IFaceService;->getEnrolledFaces(ILjava/lang/String;)
Landroid/hardware/face/IFaceService;->getFeature(IILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)
Landroid/hardware/face/IFaceService;->hasEnrolledFaces(ILjava/lang/String;)
Landroid/hardware/face/IFaceService;->initConfiguredStrength(I)
Landroid/hardware/face/IFaceService;->isHardwareDetected(Ljava/lang/String;)
Landroid/hardware/face/IFaceService;->prepareForAuthentication(ZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiverInternal;Ljava/lang/String;IIII)
Landroid/hardware/face/IFaceService;->rename(ILjava/lang/String;)
Landroid/hardware/face/IFaceService;->resetLockout([B)
Landroid/hardware/face/IFaceService;->revokeChallenge(Landroid/os/IBinder;)
Landroid/hardware/face/IFaceService;->setActiveUser(I)
Landroid/hardware/face/IFaceService;->setFeature(IIZ[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)
Landroid/hardware/face/IFaceService;->startPreparedClient(I)
Landroid/hardware/face/IFaceService;->userActivity()
Landroid/hardware/face/IFaceService$Default;->addLockoutResetCallback(Landroid/hardware/biometrics/IBiometricServiceLockoutResetCallback;)
Landroid/hardware/face/IFaceService$Default;->authenticate(Landroid/os/IBinder;JILandroid/hardware/face/IFaceServiceReceiver;ILjava/lang/String;)
Landroid/hardware/face/IFaceService$Default;->cancelAuthenticationFromService(Landroid/os/IBinder;Ljava/lang/String;IIIZ)
Landroid/hardware/face/IFaceService$Default;->enroll(ILandroid/os/IBinder;[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;[I)
Landroid/hardware/face/IFaceService$Default;->enumerate(Landroid/os/IBinder;ILandroid/hardware/face/IFaceServiceReceiver;)
Landroid/hardware/face/IFaceService$Default;->generateChallenge(Landroid/os/IBinder;)
Landroid/hardware/face/IFaceService$Default;->getAuthenticatorId(I)
Landroid/hardware/face/IFaceService$Default;->getEnrolledFaces(ILjava/lang/String;)
Landroid/hardware/face/IFaceService$Default;->getFeature(IILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)
Landroid/hardware/face/IFaceService$Default;->hasEnrolledFaces(ILjava/lang/String;)
Landroid/hardware/face/IFaceService$Default;->initConfiguredStrength(I)
Landroid/hardware/face/IFaceService$Default;->isHardwareDetected(Ljava/lang/String;)
Landroid/hardware/face/IFaceService$Default;->prepareForAuthentication(ZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiverInternal;Ljava/lang/String;IIII)
Landroid/hardware/face/IFaceService$Default;->rename(ILjava/lang/String;)
Landroid/hardware/face/IFaceService$Default;->resetLockout([B)
Landroid/hardware/face/IFaceService$Default;->revokeChallenge(Landroid/os/IBinder;)
Landroid/hardware/face/IFaceService$Default;->setActiveUser(I)
Landroid/hardware/face/IFaceService$Default;->setFeature(IIZ[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)
Landroid/hardware/face/IFaceService$Default;->startPreparedClient(I)
Landroid/hardware/face/IFaceService$Default;->userActivity()
Landroid/hardware/face/IFaceService$Stub$Proxy;->addLockoutResetCallback(Landroid/hardware/biometrics/IBiometricServiceLockoutResetCallback;)
Landroid/hardware/face/IFaceService$Stub$Proxy;->authenticate(Landroid/os/IBinder;JILandroid/hardware/face/IFaceServiceReceiver;ILjava/lang/String;)
Landroid/hardware/face/IFaceService$Stub$Proxy;->cancelAuthenticationFromService(Landroid/os/IBinder;Ljava/lang/String;IIIZ)
Landroid/hardware/face/IFaceService$Stub$Proxy;->enroll(ILandroid/os/IBinder;[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;[I)
Landroid/hardware/face/IFaceService$Stub$Proxy;->enumerate(Landroid/os/IBinder;ILandroid/hardware/face/IFaceServiceReceiver;)
Landroid/hardware/face/IFaceService$Stub$Proxy;->generateChallenge(Landroid/os/IBinder;)
Landroid/hardware/face/IFaceService$Stub$Proxy;->getAuthenticatorId(I)
Landroid/hardware/face/IFaceService$Stub$Proxy;->getEnrolledFaces(ILjava/lang/String;)
Landroid/hardware/face/IFaceService$Stub$Proxy;->getFeature(IILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)
Landroid/hardware/face/IFaceService$Stub$Proxy;->hasEnrolledFaces(ILjava/lang/String;)
Landroid/hardware/face/IFaceService$Stub$Proxy;->initConfiguredStrength(I)
Landroid/hardware/face/IFaceService$Stub$Proxy;->isHardwareDetected(Ljava/lang/String;)
Landroid/hardware/face/IFaceService$Stub$Proxy;->prepareForAuthentication(ZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiverInternal;Ljava/lang/String;IIII)
Landroid/hardware/face/IFaceService$Stub$Proxy;->rename(ILjava/lang/String;)
Landroid/hardware/face/IFaceService$Stub$Proxy;->resetLockout([B)
Landroid/hardware/face/IFaceService$Stub$Proxy;->revokeChallenge(Landroid/os/IBinder;)
Landroid/hardware/face/IFaceService$Stub$Proxy;->setActiveUser(I)
Landroid/hardware/face/IFaceService$Stub$Proxy;->setFeature(IIZ[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)
Landroid/hardware/face/IFaceService$Stub$Proxy;->startPreparedClient(I)
Landroid/hardware/face/IFaceService$Stub$Proxy;->userActivity()
Landroid/hardware/face/IFaceServiceReceiver;->onAcquired(JII)
Landroid/hardware/face/IFaceServiceReceiver;->onAuthenticationFailed(J)
Landroid/hardware/face/IFaceServiceReceiver;->onAuthenticationSucceeded(JLandroid/hardware/face/Face;IZ)
Landroid/hardware/face/IFaceServiceReceiver;->onEnrollResult(JII)
Landroid/hardware/face/IFaceServiceReceiver;->onEnumerated(JII)
Landroid/hardware/face/IFaceServiceReceiver;->onError(JII)
Landroid/hardware/face/IFaceServiceReceiver;->onFeatureGet(ZIZ)
Landroid/hardware/face/IFaceServiceReceiver;->onRemoved(JII)
Landroid/hardware/face/IFaceServiceReceiver$Default;->onAcquired(JII)
Landroid/hardware/face/IFaceServiceReceiver$Default;->onAuthenticationFailed(J)
Landroid/hardware/face/IFaceServiceReceiver$Default;->onAuthenticationSucceeded(JLandroid/hardware/face/Face;IZ)
Landroid/hardware/face/IFaceServiceReceiver$Default;->onEnrollResult(JII)
Landroid/hardware/face/IFaceServiceReceiver$Default;->onEnumerated(JII)
Landroid/hardware/face/IFaceServiceReceiver$Default;->onError(JII)
Landroid/hardware/face/IFaceServiceReceiver$Default;->onFeatureGet(ZIZ)
Landroid/hardware/face/IFaceServiceReceiver$Default;->onRemoved(JII)
Landroid/hardware/face/IFaceServiceReceiver$Stub$Proxy;->onAcquired(JII)
Landroid/hardware/face/IFaceServiceReceiver$Stub$Proxy;->onAuthenticationFailed(J)
Landroid/hardware/face/IFaceServiceReceiver$Stub$Proxy;->onAuthenticationSucceeded(JLandroid/hardware/face/Face;IZ)
Landroid/hardware/face/IFaceServiceReceiver$Stub$Proxy;->onEnrollResult(JII)
Landroid/hardware/face/IFaceServiceReceiver$Stub$Proxy;->onEnumerated(JII)
Landroid/hardware/face/IFaceServiceReceiver$Stub$Proxy;->onError(JII)
Landroid/hardware/face/IFaceServiceReceiver$Stub$Proxy;->onFeatureGet(ZIZ)
Landroid/hardware/face/IFaceServiceReceiver$Stub$Proxy;->onRemoved(JII)
Landroid/hardware/fingerprint/FingerprintManager;->authenticate(Landroid/hardware/fingerprint/FingerprintManager$CryptoObject;Landroid/os/CancellationSignal;ILandroid/hardware/fingerprint/FingerprintManager$AuthenticationCallback;Landroid/os/Handler;I)
Landroid/hardware/fingerprint/FingerprintManager;->enroll([BLandroid/os/CancellationSignal;IILandroid/hardware/fingerprint/FingerprintManager$EnrollmentCallback;)
Landroid/hardware/fingerprint/FingerprintManager;->enumerate(ILandroid/hardware/fingerprint/FingerprintManager$EnumerateCallback;)
Landroid/hardware/fingerprint/FingerprintManager;->postEnroll()
Landroid/hardware/fingerprint/FingerprintManager;->preEnroll()
Landroid/hardware/fingerprint/FingerprintManager;->sendAcquiredResult(JII)
Landroid/hardware/fingerprint/FingerprintManager;->sendEnumeratedResult(JII)
Landroid/hardware/fingerprint/FingerprintManager;->sendErrorResult(JII)
Landroid/hardware/fingerprint/FingerprintManager;->setActiveUser(I)
Landroid/hardware/fingerprint/FingerprintManager$EnumerateCallback;-><init>()
Landroid/hardware/fingerprint/FingerprintManager$EnumerateCallback;->onEnumerate(Landroid/hardware/fingerprint/Fingerprint;)
Landroid/hardware/fingerprint/FingerprintManager$EnumerateCallback;->onEnumerateError(ILjava/lang/CharSequence;)
Landroid/hardware/fingerprint/FingerprintManager$LockoutResetCallback;->onLockoutReset()
Landroid/hardware/fingerprint/IFingerprintService;->addLockoutResetCallback(Landroid/hardware/biometrics/IBiometricServiceLockoutResetCallback;)
Landroid/hardware/fingerprint/IFingerprintService;->authenticate(Landroid/os/IBinder;JILandroid/hardware/fingerprint/IFingerprintServiceReceiver;ILjava/lang/String;)
Landroid/hardware/fingerprint/IFingerprintService;->cancelAuthenticationFromService(Landroid/os/IBinder;Ljava/lang/String;IIIZ)
Landroid/hardware/fingerprint/IFingerprintService;->enroll(Landroid/os/IBinder;[BILandroid/hardware/fingerprint/IFingerprintServiceReceiver;ILjava/lang/String;)
Landroid/hardware/fingerprint/IFingerprintService;->enumerate(Landroid/os/IBinder;ILandroid/hardware/fingerprint/IFingerprintServiceReceiver;)
Landroid/hardware/fingerprint/IFingerprintService;->getAuthenticatorId(I)
Landroid/hardware/fingerprint/IFingerprintService;->hasEnrolledFingerprints(ILjava/lang/String;)
Landroid/hardware/fingerprint/IFingerprintService;->initConfiguredStrength(I)
Landroid/hardware/fingerprint/IFingerprintService;->isHardwareDetected(Ljava/lang/String;)
Landroid/hardware/fingerprint/IFingerprintService;->postEnroll(Landroid/os/IBinder;)
Landroid/hardware/fingerprint/IFingerprintService;->preEnroll(Landroid/os/IBinder;)
Landroid/hardware/fingerprint/IFingerprintService;->prepareForAuthentication(Landroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiverInternal;Ljava/lang/String;IIII)
Landroid/hardware/fingerprint/IFingerprintService;->remove(Landroid/os/IBinder;IIILandroid/hardware/fingerprint/IFingerprintServiceReceiver;)
Landroid/hardware/fingerprint/IFingerprintService;->resetTimeout([B)
Landroid/hardware/fingerprint/IFingerprintService;->setActiveUser(I)
Landroid/hardware/fingerprint/IFingerprintService;->startPreparedClient(I)
Landroid/hardware/fingerprint/IFingerprintService$Default;->addLockoutResetCallback(Landroid/hardware/biometrics/IBiometricServiceLockoutResetCallback;)
Landroid/hardware/fingerprint/IFingerprintService$Default;->authenticate(Landroid/os/IBinder;JILandroid/hardware/fingerprint/IFingerprintServiceReceiver;ILjava/lang/String;)
Landroid/hardware/fingerprint/IFingerprintService$Default;->cancelAuthenticationFromService(Landroid/os/IBinder;Ljava/lang/String;IIIZ)
Landroid/hardware/fingerprint/IFingerprintService$Default;->enroll(Landroid/os/IBinder;[BILandroid/hardware/fingerprint/IFingerprintServiceReceiver;ILjava/lang/String;)
Landroid/hardware/fingerprint/IFingerprintService$Default;->enumerate(Landroid/os/IBinder;ILandroid/hardware/fingerprint/IFingerprintServiceReceiver;)
Landroid/hardware/fingerprint/IFingerprintService$Default;->getAuthenticatorId(I)
Landroid/hardware/fingerprint/IFingerprintService$Default;->hasEnrolledFingerprints(ILjava/lang/String;)
Landroid/hardware/fingerprint/IFingerprintService$Default;->initConfiguredStrength(I)
Landroid/hardware/fingerprint/IFingerprintService$Default;->isHardwareDetected(Ljava/lang/String;)
Landroid/hardware/fingerprint/IFingerprintService$Default;->postEnroll(Landroid/os/IBinder;)
Landroid/hardware/fingerprint/IFingerprintService$Default;->preEnroll(Landroid/os/IBinder;)
Landroid/hardware/fingerprint/IFingerprintService$Default;->prepareForAuthentication(Landroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiverInternal;Ljava/lang/String;IIII)
Landroid/hardware/fingerprint/IFingerprintService$Default;->remove(Landroid/os/IBinder;IIILandroid/hardware/fingerprint/IFingerprintServiceReceiver;)
Landroid/hardware/fingerprint/IFingerprintService$Default;->resetTimeout([B)
Landroid/hardware/fingerprint/IFingerprintService$Default;->setActiveUser(I)
Landroid/hardware/fingerprint/IFingerprintService$Default;->startPreparedClient(I)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->addLockoutResetCallback(Landroid/hardware/biometrics/IBiometricServiceLockoutResetCallback;)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->authenticate(Landroid/os/IBinder;JILandroid/hardware/fingerprint/IFingerprintServiceReceiver;ILjava/lang/String;)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->cancelAuthenticationFromService(Landroid/os/IBinder;Ljava/lang/String;IIIZ)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->enroll(Landroid/os/IBinder;[BILandroid/hardware/fingerprint/IFingerprintServiceReceiver;ILjava/lang/String;)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->enumerate(Landroid/os/IBinder;ILandroid/hardware/fingerprint/IFingerprintServiceReceiver;)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->getAuthenticatorId(I)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->hasEnrolledFingerprints(ILjava/lang/String;)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->initConfiguredStrength(I)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->isHardwareDetected(Ljava/lang/String;)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->postEnroll(Landroid/os/IBinder;)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->preEnroll(Landroid/os/IBinder;)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->prepareForAuthentication(Landroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiverInternal;Ljava/lang/String;IIII)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->remove(Landroid/os/IBinder;IIILandroid/hardware/fingerprint/IFingerprintServiceReceiver;)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->resetTimeout([B)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->setActiveUser(I)
Landroid/hardware/fingerprint/IFingerprintService$Stub$Proxy;->startPreparedClient(I)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver;->onAcquired(JII)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver;->onAuthenticationFailed(J)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver;->onAuthenticationSucceeded(JLandroid/hardware/fingerprint/Fingerprint;IZ)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver;->onEnrollResult(JIII)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver;->onEnumerated(JIII)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver;->onError(JII)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver;->onRemoved(JIII)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver$Default;->onAcquired(JII)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver$Default;->onAuthenticationFailed(J)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver$Default;->onAuthenticationSucceeded(JLandroid/hardware/fingerprint/Fingerprint;IZ)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver$Default;->onEnrollResult(JIII)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver$Default;->onEnumerated(JIII)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver$Default;->onError(JII)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver$Default;->onRemoved(JIII)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver$Stub$Proxy;->onAcquired(JII)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver$Stub$Proxy;->onAuthenticationFailed(J)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver$Stub$Proxy;->onAuthenticationSucceeded(JLandroid/hardware/fingerprint/Fingerprint;IZ)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver$Stub$Proxy;->onEnrollResult(JIII)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver$Stub$Proxy;->onEnumerated(JIII)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver$Stub$Proxy;->onError(JII)
Landroid/hardware/fingerprint/IFingerprintServiceReceiver$Stub$Proxy;->onRemoved(JIII)
Landroid/hardware/hdmi/HdmiControlManager;->getHdmiControlStatusChangeListenerWrapper(Landroid/hardware/hdmi/HdmiControlManager$HdmiControlStatusChangeListener;)
Landroid/hardware/hdmi/HdmiControlManager;->getHotplugEventListenerWrapper(Landroid/hardware/hdmi/HdmiControlManager$HotplugEventListener;)
Landroid/hardware/hdmi/HdmiControlManager;->isHdmiCecVolumeControlEnabled()
Landroid/hardware/hdmi/HdmiControlManager;->setHdmiCecVolumeControlEnabled(Z)
Landroid/hardware/hdmi/HdmiControlManager$HdmiCecVolumeControlFeatureListener;->onHdmiCecVolumeControlFeature(Z)
Landroid/hardware/hdmi/HdmiControlManager$HdmiControlStatusChangeListener;->onStatusChange(ZZ)
Landroid/hardware/hdmi/IHdmiCecVolumeControlFeatureListener;->onHdmiCecVolumeControlFeature(Z)
Landroid/hardware/hdmi/IHdmiCecVolumeControlFeatureListener$Default;->onHdmiCecVolumeControlFeature(Z)
Landroid/hardware/hdmi/IHdmiCecVolumeControlFeatureListener$Stub$Proxy;->onHdmiCecVolumeControlFeature(Z)
Landroid/hardware/hdmi/IHdmiControlService;->isHdmiCecVolumeControlEnabled()
Landroid/hardware/hdmi/IHdmiControlService;->setHdmiCecVolumeControlEnabled(Z)
Landroid/hardware/hdmi/IHdmiControlService$Default;->isHdmiCecVolumeControlEnabled()
Landroid/hardware/hdmi/IHdmiControlService$Default;->setHdmiCecVolumeControlEnabled(Z)
Landroid/hardware/hdmi/IHdmiControlService$Stub$Proxy;->isHdmiCecVolumeControlEnabled()
Landroid/hardware/hdmi/IHdmiControlService$Stub$Proxy;->setHdmiCecVolumeControlEnabled(Z)
Landroid/hardware/hdmi/IHdmiControlStatusChangeListener;->onStatusChange(ZZ)
Landroid/hardware/hdmi/IHdmiControlStatusChangeListener$Default;->onStatusChange(ZZ)
Landroid/hardware/hdmi/IHdmiControlStatusChangeListener$Stub$Proxy;->onStatusChange(ZZ)
Landroid/hardware/input/IInputManager;->vibrate(I[JILandroid/os/IBinder;)
Landroid/hardware/input/IInputManager$Default;->vibrate(I[JILandroid/os/IBinder;)
Landroid/hardware/input/IInputManager$Stub$Proxy;->vibrate(I[JILandroid/os/IBinder;)
Landroid/hardware/input/InputManager;->getInputDeviceVibrator(I)
Landroid/hardware/input/InputManager$InputDeviceVibrator;-><init>(Landroid/hardware/input/InputManager;I)
Landroid/hardware/input/InputManager$InputDeviceVibrator;->addVibratorStateListener(Landroid/os/Vibrator$OnVibratorStateChangedListener;)
Landroid/hardware/input/InputManager$InputDeviceVibrator;->addVibratorStateListener(Ljava/util/concurrent/Executor;Landroid/os/Vibrator$OnVibratorStateChangedListener;)
Landroid/hardware/input/InputManager$InputDeviceVibrator;->cancel()
Landroid/hardware/input/InputManager$InputDeviceVibrator;->hasAmplitudeControl()
Landroid/hardware/input/InputManager$InputDeviceVibrator;->hasVibrator()
Landroid/hardware/input/InputManager$InputDeviceVibrator;->isVibrating()
Landroid/hardware/input/InputManager$InputDeviceVibrator;->removeVibratorStateListener(Landroid/os/Vibrator$OnVibratorStateChangedListener;)
Landroid/hardware/input/InputManager$InputDeviceVibrator;->vibrate(ILjava/lang/String;Landroid/os/VibrationEffect;Ljava/lang/String;Landroid/media/AudioAttributes;)
Landroid/hardware/iris/IIrisService;->initConfiguredStrength(I)
Landroid/hardware/iris/IIrisService$Default;->initConfiguredStrength(I)
Landroid/hardware/iris/IIrisService$Stub$Proxy;->initConfiguredStrength(I)
Landroid/hardware/lights/ILightsManager;->openSession(Landroid/os/IBinder;)
Landroid/hardware/lights/ILightsManager$Default;->openSession(Landroid/os/IBinder;)
Landroid/hardware/lights/ILightsManager$Stub$Proxy;->openSession(Landroid/os/IBinder;)
Landroid/hardware/lights/LightsManager;-><init>(Landroid/content/Context;Landroid/hardware/lights/ILightsManager;)
Landroid/hardware/lights/LightsManager$LightsSession;-><init>(Landroid/hardware/lights/LightsManager;)
Landroid/hardware/lights/LightsManager$LightsSession;-><init>(Landroid/hardware/lights/LightsManager;Landroid/hardware/lights/LightsManager$1;)
Landroid/hardware/lights/LightsManager$LightsSession;->finalize()
Landroid/hardware/lights/LightsRequest;-><init>(Landroid/util/SparseArray;)
Landroid/hardware/lights/LightsRequest;-><init>(Landroid/util/SparseArray;Landroid/hardware/lights/LightsRequest$1;)
Landroid/hardware/location/ContextHubIntentEvent;-><init>(Landroid/hardware/location/ContextHubInfo;IJLandroid/hardware/location/NanoAppMessage;I)
Landroid/hardware/location/IContextHubService;->createClient(ILandroid/hardware/location/IContextHubClientCallback;)
Landroid/hardware/location/IContextHubService;->createPendingIntentClient(ILandroid/app/PendingIntent;J)
Landroid/hardware/location/IContextHubService$Default;->createClient(ILandroid/hardware/location/IContextHubClientCallback;)
Landroid/hardware/location/IContextHubService$Default;->createPendingIntentClient(ILandroid/app/PendingIntent;J)
Landroid/hardware/location/IContextHubService$Stub$Proxy;->createClient(ILandroid/hardware/location/IContextHubClientCallback;)
Landroid/hardware/location/IContextHubService$Stub$Proxy;->createPendingIntentClient(ILandroid/app/PendingIntent;J)
Landroid/hardware/soundtrigger/SoundTrigger;->getCurrentOpPackageName()
Landroid/hardware/soundtrigger/SoundTriggerModule;-><init>(Landroid/media/soundtrigger_middleware/ISoundTriggerMiddlewareService;ILandroid/hardware/soundtrigger/SoundTrigger$StatusListener;Landroid/os/Looper;)
Landroid/icu/impl/FormattedStringBuilder;->append([C[Ljava/text/Format$Field;)
Landroid/icu/impl/FormattedStringBuilder;->append(Ljava/lang/CharSequence;Ljava/text/Format$Field;)
Landroid/icu/impl/FormattedStringBuilder;->appendChar16(CLjava/text/Format$Field;)
Landroid/icu/impl/FormattedStringBuilder;->appendCodePoint(ILjava/text/Format$Field;)
Landroid/icu/impl/FormattedStringBuilder;->contentEquals([C[Ljava/text/Format$Field;)
Landroid/icu/impl/FormattedStringBuilder;->insert(I[C[Ljava/text/Format$Field;)
Landroid/icu/impl/FormattedStringBuilder;->insert(ILjava/lang/CharSequence;IILjava/text/Format$Field;)
Landroid/icu/impl/FormattedStringBuilder;->insert(ILjava/lang/CharSequence;Ljava/text/Format$Field;)
Landroid/icu/impl/FormattedStringBuilder;->insertChar16(ICLjava/text/Format$Field;)
Landroid/icu/impl/FormattedStringBuilder;->insertCodePoint(IILjava/text/Format$Field;)
Landroid/icu/impl/FormattedStringBuilder;->splice(IILjava/lang/CharSequence;IILjava/text/Format$Field;)
Landroid/icu/impl/FormattedValueStringBuilderImpl;->isIntOrGroup(Ljava/text/Format$Field;)
Landroid/icu/impl/FormattedValueStringBuilderImpl;->isNumericField(Ljava/text/Format$Field;)
Landroid/icu/impl/ICUCurrencyDisplayInfoProvider$ICUCurrencyDisplayInfo;->fetchNarrowSymbol(Ljava/lang/String;)
Landroid/icu/impl/ICUCurrencyDisplayInfoProvider$ICUCurrencyDisplayInfo$CurrencySink;->consumeCurrenciesNarrowEntry(Landroid/icu/impl/UResource$Key;Landroid/icu/impl/UResource$Value;)
Landroid/icu/impl/ICUCurrencyDisplayInfoProvider$ICUCurrencyDisplayInfo$NarrowSymbol;-><init>(Ljava/lang/String;)
Landroid/icu/impl/PluralRulesLoader;->getPluralRanges(Landroid/icu/util/ULocale;)
Landroid/icu/impl/PluralRulesLoader;->getRulesForRulesId(Ljava/lang/String;)
Landroid/icu/impl/PluralRulesLoader;->isPluralRangesAvailable(Landroid/icu/util/ULocale;)
Landroid/icu/impl/RBBIDataWrapper;->dumpRow(Ljava/io/PrintStream;Landroid/icu/impl/RBBIDataWrapper$RBBIStateTable;I)
Landroid/icu/impl/SimpleFormatterImpl$Int64Iterator;-><init>()
Landroid/icu/impl/SimpleFormatterImpl$Int64Iterator;->getArgIndex(J)
Landroid/icu/impl/SimpleFormatterImpl$Int64Iterator;->step(Ljava/lang/CharSequence;JLjava/lang/StringBuffer;)
Landroid/icu/impl/locale/LSR;-><init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Landroid/icu/impl/locale/LocaleDistance;->getBestIndexAndDistance(Landroid/icu/impl/locale/LSR;[Landroid/icu/impl/locale/LSR;ILandroid/icu/util/LocaleMatcher$FavorSubtag;)
Landroid/icu/impl/number/AdoptingModifierStore;-><init>(Landroid/icu/impl/number/Modifier;Landroid/icu/impl/number/Modifier;Landroid/icu/impl/number/Modifier;)
Landroid/icu/impl/number/AdoptingModifierStore;->getModIndex(ILandroid/icu/impl/StandardPlural;)
Landroid/icu/impl/number/AdoptingModifierStore;->getModifier(ILandroid/icu/impl/StandardPlural;)
Landroid/icu/impl/number/AdoptingModifierStore;->getModifierWithoutPlural(I)
Landroid/icu/impl/number/AdoptingModifierStore;->setModifier(ILandroid/icu/impl/StandardPlural;Landroid/icu/impl/number/Modifier;)
Landroid/icu/impl/number/LongNameHandler;->getModifier(ILandroid/icu/impl/StandardPlural;)
Landroid/icu/impl/number/ModifierStore;->getModifier(ILandroid/icu/impl/StandardPlural;)
Landroid/icu/impl/number/MutablePatternModifier;->createImmutableAndChain(Landroid/icu/impl/number/MicroPropsGenerator;)
Landroid/icu/impl/number/MutablePatternModifier;->setNumberProperties(ILandroid/icu/impl/StandardPlural;)
Landroid/icu/impl/number/MutablePatternModifier$ImmutablePatternModifier;-><init>(Landroid/icu/impl/number/AdoptingModifierStore;Landroid/icu/text/PluralRules;Landroid/icu/impl/number/MicroPropsGenerator;)
Landroid/icu/impl/number/PatternStringUtils;->patternInfoToStringBuilder(Landroid/icu/impl/number/AffixPatternProvider;ZILandroid/icu/number/NumberFormatter$SignDisplay;Landroid/icu/impl/StandardPlural;ZLjava/lang/StringBuilder;)
Landroid/icu/impl/number/SimpleModifier;->formatAsPrefixSuffix(Landroid/icu/impl/FormattedStringBuilder;II)
Landroid/icu/impl/number/range/StandardPluralRanges;-><init>(Landroid/icu/util/ULocale;)
Landroid/icu/impl/number/range/StandardPluralRanges;->getPluralRangesData(Landroid/icu/util/ULocale;Landroid/icu/impl/number/range/StandardPluralRanges;)
Landroid/icu/number/CompactNotation;->withLocaleData(Landroid/icu/util/ULocale;Ljava/lang/String;Landroid/icu/impl/number/CompactData$CompactType;Landroid/icu/text/PluralRules;Landroid/icu/impl/number/MutablePatternModifier;Landroid/icu/impl/number/MicroPropsGenerator;)
Landroid/icu/number/CompactNotation$CompactHandler;-><init>(Landroid/icu/number/CompactNotation;Landroid/icu/util/ULocale;Ljava/lang/String;Landroid/icu/impl/number/CompactData$CompactType;Landroid/icu/text/PluralRules;Landroid/icu/impl/number/MutablePatternModifier;Landroid/icu/impl/number/MicroPropsGenerator;)
Landroid/icu/number/CompactNotation$CompactHandler;-><init>(Landroid/icu/number/CompactNotation;Landroid/icu/util/ULocale;Ljava/lang/String;Landroid/icu/impl/number/CompactData$CompactType;Landroid/icu/text/PluralRules;Landroid/icu/impl/number/MutablePatternModifier;Landroid/icu/impl/number/MicroPropsGenerator;Landroid/icu/number/CompactNotation$1;)
Landroid/icu/number/FormattedNumber;-><init>(Landroid/icu/impl/FormattedStringBuilder;Landroid/icu/impl/number/DecimalQuantity;)
Landroid/icu/number/FormattedNumber;->equals(Ljava/lang/Object;)
Landroid/icu/number/FormattedNumber;->hashCode()
Landroid/icu/number/FormattedNumber;->nextFieldPosition(Ljava/text/FieldPosition;)
Landroid/icu/number/FormattedNumberRange;->nextFieldPosition(Ljava/text/FieldPosition;)
Landroid/icu/number/NumberFormatterImpl;->unitIsNoUnit(Landroid/icu/util/MeasureUnit;)
Landroid/icu/number/NumberSkeletonImpl$BlueprintHelpers;->generateMeasureUnitOption(Landroid/icu/util/MeasureUnit;Ljava/lang/StringBuilder;)
Landroid/icu/number/NumberSkeletonImpl$GeneratorHelpers;->perUnit(Landroid/icu/impl/number/MacroProps;Ljava/lang/StringBuilder;)
Landroid/icu/number/Precision;->constructPassThrough()
Landroid/icu/number/Precision$PassThroughRounderImpl;-><init>()
Landroid/icu/number/Precision$PassThroughRounderImpl;->apply(Landroid/icu/impl/number/DecimalQuantity;)
Landroid/icu/number/Precision$PassThroughRounderImpl;->createCopy()
Landroid/icu/text/ChineseDateFormat;->subFormat(Ljava/lang/StringBuffer;CIIILandroid/icu/text/DisplayContext;Ljava/text/FieldPosition;Landroid/icu/util/Calendar;)
Landroid/icu/text/DateFormatSymbols;-><init>(Landroid/icu/util/ULocale;Landroid/icu/impl/ICUResourceBundle;Ljava/lang/String;)
Landroid/icu/text/DateFormatSymbols;-><init>(Landroid/icu/util/ULocale;Landroid/icu/impl/ICUResourceBundle;Ljava/lang/String;Landroid/icu/text/DateFormatSymbols$1;)
Landroid/icu/text/DateIntervalFormat;->adjustFieldWidth(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)
Landroid/icu/text/DateTimePatternGenerator;->initData(Landroid/icu/util/ULocale;)
Landroid/icu/text/DecimalFormat;->fieldPositionHelper(Landroid/icu/number/FormattedNumber;Ljava/text/FieldPosition;I)
Landroid/icu/text/ListFormatter;->format(Ljava/util/Collection;I)
Landroid/icu/text/ListFormatter$FormattedListBuilder;->append(Ljava/lang/String;Ljava/lang/Object;Z)
Landroid/icu/text/ListFormatter$FormattedListBuilder;->getOffset()
Landroid/icu/text/ListFormatter$FormattedListBuilder;->offsetRecorded()
Landroid/icu/text/PluralRanges;-><init>()
Landroid/icu/text/PluralRanges;->add(Landroid/icu/impl/StandardPlural;Landroid/icu/impl/StandardPlural;Landroid/icu/impl/StandardPlural;)
Landroid/icu/text/PluralRanges;->cloneAsThawed()
Landroid/icu/text/PluralRanges;->compareTo(Landroid/icu/text/PluralRanges;)
Landroid/icu/text/PluralRanges;->compareTo(Ljava/lang/Object;)
Landroid/icu/text/PluralRanges;->equals(Ljava/lang/Object;)
Landroid/icu/text/PluralRanges;->freeze()
Landroid/icu/text/PluralRanges;->get(Landroid/icu/impl/StandardPlural;Landroid/icu/impl/StandardPlural;)
Landroid/icu/text/PluralRanges;->hashCode()
Landroid/icu/text/PluralRanges;->isExplicit(Landroid/icu/impl/StandardPlural;Landroid/icu/impl/StandardPlural;)
Landroid/icu/text/PluralRanges;->isExplicitlySet(Landroid/icu/impl/StandardPlural;)
Landroid/icu/text/PluralRanges;->isFrozen()
Landroid/icu/text/PluralRanges;->toString()
Landroid/icu/text/PluralRanges$Matrix;-><init>()
Landroid/icu/text/PluralRanges$Matrix;->clone()
Landroid/icu/text/PluralRanges$Matrix;->compareTo(Landroid/icu/text/PluralRanges$Matrix;)
Landroid/icu/text/PluralRanges$Matrix;->compareTo(Ljava/lang/Object;)
Landroid/icu/text/PluralRanges$Matrix;->endSame(Landroid/icu/impl/StandardPlural;)
Landroid/icu/text/PluralRanges$Matrix;->equals(Ljava/lang/Object;)
Landroid/icu/text/PluralRanges$Matrix;->get(Landroid/icu/impl/StandardPlural;Landroid/icu/impl/StandardPlural;)
Landroid/icu/text/PluralRanges$Matrix;->hashCode()
Landroid/icu/text/PluralRanges$Matrix;->set(Landroid/icu/impl/StandardPlural;Landroid/icu/impl/StandardPlural;Landroid/icu/impl/StandardPlural;)
Landroid/icu/text/PluralRanges$Matrix;->setIfNew(Landroid/icu/impl/StandardPlural;Landroid/icu/impl/StandardPlural;Landroid/icu/impl/StandardPlural;)
Landroid/icu/text/PluralRanges$Matrix;->startSame(Landroid/icu/impl/StandardPlural;Ljava/util/EnumSet;Landroid/icu/util/Output;)
Landroid/icu/text/PluralRanges$Matrix;->toString()
Landroid/icu/text/PluralRules;-><init>(Landroid/icu/text/PluralRules$RuleList;)
Landroid/icu/text/RBBISetBuilder$RangeDescriptor;->setDictionaryFlag()
Landroid/icu/text/RBBITableBuilder;->calcChainedFollowPos(Landroid/icu/text/RBBINode;)
Landroid/icu/text/RuleBasedBreakIterator$LookAheadResults;-><init>()
Landroid/icu/text/RuleBasedBreakIterator$LookAheadResults;->getPosition(I)
Landroid/icu/text/RuleBasedBreakIterator$LookAheadResults;->reset()
Landroid/icu/text/RuleBasedBreakIterator$LookAheadResults;->setPosition(II)
Landroid/icu/text/SimpleDateFormat;->subFormat(CIIILandroid/icu/text/DisplayContext;Ljava/text/FieldPosition;Landroid/icu/util/Calendar;)
Landroid/icu/text/SimpleDateFormat;->subFormat(Ljava/lang/StringBuffer;CIIILandroid/icu/text/DisplayContext;Ljava/text/FieldPosition;Landroid/icu/util/Calendar;)
Landroid/icu/util/IndianCalendar;->isGregorianLeap(I)
Landroid/icu/util/IndianCalendar;->jdToGregorian(D)
Landroid/icu/util/LocaleMatcher;->putIfAbsent(Ljava/util/Map;Landroid/icu/impl/locale/LSR;I)
Landroid/icu/util/MeasureUnit;->resolveUnitPerUnit(Landroid/icu/util/MeasureUnit;Landroid/icu/util/MeasureUnit;)
Landroid/icu/util/NoUnit;-><init>(Ljava/lang/String;)
Landroid/icu/util/ULocale;-><init>(Ljava/util/Locale;)
Landroid/icu/util/ULocale;->parseAcceptLanguage(Ljava/lang/String;Z)
Landroid/icu/util/ULocale$1ULocaleAcceptLanguageQ;-><init>(DI)
Landroid/icu/util/ULocale$1ULocaleAcceptLanguageQ;->compareTo(Landroid/icu/util/ULocale$1ULocaleAcceptLanguageQ;)
Landroid/icu/util/ULocale$1ULocaleAcceptLanguageQ;->compareTo(Ljava/lang/Object;)
Landroid/icu/util/VersionInfo;->javaVersion()
Landroid/inputmethodservice/IInputMethodSessionWrapper;->toggleSoftInput(II)
Landroid/inputmethodservice/IInputMethodWrapper;->initializeInternal(Landroid/os/IBinder;ILcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;)
Landroid/inputmethodservice/IInputMethodWrapper;->startInput(Landroid/os/IBinder;Lcom/android/internal/view/IInputContext;ILandroid/view/inputmethod/EditorInfo;ZZ)
Landroid/inputmethodservice/InputMethodService;->isVisibilityAppliedUsingInsetsConsumer()
Landroid/inputmethodservice/InputMethodService;->maybeNotifyPreRendered()
Landroid/inputmethodservice/InputMethodService;->onPreRenderedWindowVisibilityChanged(Z)
Landroid/inputmethodservice/InputMethodService$InputMethodImpl;->dispatchStartInputWithToken(Landroid/view/inputmethod/InputConnection;Landroid/view/inputmethod/EditorInfo;ZLandroid/os/IBinder;Z)
Landroid/inputmethodservice/InputMethodService$InputMethodImpl;->initializeInternal(Landroid/os/IBinder;ILcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;)
Landroid/inputmethodservice/MultiClientInputMethodClientCallbackAdaptor$CallbackImpl;->toggleSoftInput(II)
Landroid/inputmethodservice/MultiClientInputMethodClientCallbackAdaptor$InputMethodSessionImpl;->toggleSoftInput(II)
Landroid/inputmethodservice/MultiClientInputMethodServiceDelegate$ClientCallback;->onToggleSoftInput(II)
Landroid/internal/telephony/sysprop/CarProperties;->user_hal_enabled()
Landroid/internal/telephony/sysprop/CarProperties;->user_hal_enabled(Ljava/lang/Boolean;)
Landroid/internal/telephony/sysprop/HdmiProperties;->set_menu_language()
Landroid/internal/telephony/sysprop/TraceProperties;->enable()
Landroid/internal/telephony/sysprop/TraceProperties;->enable(Ljava/lang/Boolean;)
Landroid/location/AbstractListenerManager;-><init>()
Landroid/location/AbstractListenerManager;->addInternal(Ljava/lang/Object;Landroid/location/AbstractListenerManager$Registration;)
Landroid/location/AbstractListenerManager;->addInternal(Ljava/lang/Object;Ljava/lang/Object;Landroid/os/Handler;)
Landroid/location/AbstractListenerManager;->addInternal(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/concurrent/Executor;)
Landroid/location/AbstractListenerManager;->addListener(Ljava/lang/Object;Landroid/os/Handler;)
Landroid/location/AbstractListenerManager;->addListener(Ljava/lang/Object;Ljava/lang/Object;Landroid/os/Handler;)
Landroid/location/AbstractListenerManager;->addListener(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/concurrent/Executor;)
Landroid/location/AbstractListenerManager;->addListener(Ljava/lang/Object;Ljava/util/concurrent/Executor;)
Landroid/location/AbstractListenerManager;->convertKey(Ljava/lang/Object;)
Landroid/location/AbstractListenerManager;->execute(Ljava/util/function/Consumer;)
Landroid/location/AbstractListenerManager;->merge([Ljava/lang/Object;)
Landroid/location/AbstractListenerManager;->mergeRequests()
Landroid/location/AbstractListenerManager;->registerService(Ljava/lang/Object;)
Landroid/location/AbstractListenerManager;->removeListener(Ljava/lang/Object;)
Landroid/location/AbstractListenerManager;->unregisterService()
Landroid/location/AbstractListenerManager$Registration;-><init>(Ljava/lang/Object;Ljava/util/concurrent/Executor;Ljava/lang/Object;)
Landroid/location/AbstractListenerManager$Registration;-><init>(Ljava/lang/Object;Ljava/util/concurrent/Executor;Ljava/lang/Object;Landroid/location/AbstractListenerManager$1;)
Landroid/location/AbstractListenerManager$Registration;->accept(Ljava/util/function/Consumer;)
Landroid/location/AbstractListenerManager$Registration;->execute(Ljava/util/function/Consumer;)
Landroid/location/AbstractListenerManager$Registration;->getRequest()
Landroid/location/AbstractListenerManager$Registration;->unregister()
Landroid/location/GeocoderParams;-><init>()
Landroid/location/GeocoderParams;-><init>(Landroid/location/GeocoderParams$1;)
Landroid/location/Geofence;-><init>(DDF)
Landroid/location/Geofence;->checkLatLong(DD)
Landroid/location/Geofence;->checkRadius(F)
Landroid/location/Geofence;->checkType(I)
Landroid/location/Geofence;->createCircle(DDF)
Landroid/location/Geofence;->getType()
Landroid/location/Geofence;->typeToString(I)
Landroid/location/GnssCapabilities;-><init>(J)
Landroid/location/GnssCapabilities;->hasCapability(J)
Landroid/location/GnssCapabilities;->of(J)
Landroid/location/IBatchedLocationCallback;->onLocationBatch(Ljava/util/List;)
Landroid/location/IBatchedLocationCallback$Default;-><init>()
Landroid/location/IBatchedLocationCallback$Default;->asBinder()
Landroid/location/IBatchedLocationCallback$Default;->onLocationBatch(Ljava/util/List;)
Landroid/location/IBatchedLocationCallback$Stub;-><init>()
Landroid/location/IBatchedLocationCallback$Stub;->asBinder()
Landroid/location/IBatchedLocationCallback$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/location/IBatchedLocationCallback$Stub;->getDefaultImpl()
Landroid/location/IBatchedLocationCallback$Stub;->getDefaultTransactionName(I)
Landroid/location/IBatchedLocationCallback$Stub;->getTransactionName(I)
Landroid/location/IBatchedLocationCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/location/IBatchedLocationCallback$Stub;->setDefaultImpl(Landroid/location/IBatchedLocationCallback;)
Landroid/location/IBatchedLocationCallback$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/location/IBatchedLocationCallback$Stub$Proxy;->asBinder()
Landroid/location/IBatchedLocationCallback$Stub$Proxy;->getInterfaceDescriptor()
Landroid/location/IBatchedLocationCallback$Stub$Proxy;->onLocationBatch(Ljava/util/List;)
Landroid/location/IGeocodeProvider;->getFromLocation(DDILandroid/location/GeocoderParams;Ljava/util/List;)
Landroid/location/IGeocodeProvider;->getFromLocationName(Ljava/lang/String;DDDDILandroid/location/GeocoderParams;Ljava/util/List;)
Landroid/location/IGeocodeProvider$Default;->getFromLocation(DDILandroid/location/GeocoderParams;Ljava/util/List;)
Landroid/location/IGeocodeProvider$Default;->getFromLocationName(Ljava/lang/String;DDDDILandroid/location/GeocoderParams;Ljava/util/List;)
Landroid/location/IGeocodeProvider$Stub$Proxy;->getFromLocation(DDILandroid/location/GeocoderParams;Ljava/util/List;)
Landroid/location/IGeocodeProvider$Stub$Proxy;->getFromLocationName(Ljava/lang/String;DDDDILandroid/location/GeocoderParams;Ljava/util/List;)
Landroid/location/IGnssAntennaInfoListener;->onGnssAntennaInfoReceived(Ljava/util/List;)
Landroid/location/IGnssAntennaInfoListener$Default;->onGnssAntennaInfoReceived(Ljava/util/List;)
Landroid/location/IGnssAntennaInfoListener$Stub$Proxy;->onGnssAntennaInfoReceived(Ljava/util/List;)
Landroid/location/IGnssStatusListener;->onNmeaReceived(JLjava/lang/String;)
Landroid/location/IGnssStatusListener;->onSvStatusChanged(I[I[F[F[F[F[F)
Landroid/location/IGnssStatusListener$Default;->onNmeaReceived(JLjava/lang/String;)
Landroid/location/IGnssStatusListener$Default;->onSvStatusChanged(I[I[F[F[F[F[F)
Landroid/location/IGnssStatusListener$Stub$Proxy;->onNmeaReceived(JLjava/lang/String;)
Landroid/location/IGnssStatusListener$Stub$Proxy;->onSvStatusChanged(I[I[F[F[F[F[F)
Landroid/location/ILocationListener;->onLocationChanged(Landroid/location/Location;)
Landroid/location/ILocationListener;->onProviderDisabled(Ljava/lang/String;)
Landroid/location/ILocationListener;->onProviderEnabled(Ljava/lang/String;)
Landroid/location/ILocationListener;->onRemoved()
Landroid/location/ILocationListener$Default;->onLocationChanged(Landroid/location/Location;)
Landroid/location/ILocationListener$Default;->onProviderDisabled(Ljava/lang/String;)
Landroid/location/ILocationListener$Default;->onProviderEnabled(Ljava/lang/String;)
Landroid/location/ILocationListener$Default;->onRemoved()
Landroid/location/ILocationListener$Stub$Proxy;->onLocationChanged(Landroid/location/Location;)
Landroid/location/ILocationListener$Stub$Proxy;->onProviderDisabled(Ljava/lang/String;)
Landroid/location/ILocationListener$Stub$Proxy;->onProviderEnabled(Ljava/lang/String;)
Landroid/location/ILocationListener$Stub$Proxy;->onRemoved()
Landroid/location/ILocationManager;->addGnssAntennaInfoListener(Landroid/location/IGnssAntennaInfoListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager;->addGnssBatchingCallback(Landroid/location/IBatchedLocationCallback;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager;->addGnssMeasurementsListener(Landroid/location/GnssRequest;Landroid/location/IGnssMeasurementsListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager;->addGnssNavigationMessageListener(Landroid/location/IGnssNavigationMessageListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager;->addTestProvider(Ljava/lang/String;Lcom/android/internal/location/ProviderProperties;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager;->flushGnssBatch(Ljava/lang/String;)
Landroid/location/ILocationManager;->getCurrentLocation(Landroid/location/LocationRequest;Landroid/os/ICancellationSignal;Landroid/location/ILocationListener;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager;->getFromLocation(DDILandroid/location/GeocoderParams;Ljava/util/List;)
Landroid/location/ILocationManager;->getFromLocationName(Ljava/lang/String;DDDDILandroid/location/GeocoderParams;Ljava/util/List;)
Landroid/location/ILocationManager;->getGnssBatchSize(Ljava/lang/String;)
Landroid/location/ILocationManager;->getIgnoreSettingsWhitelist()
Landroid/location/ILocationManager;->getLastLocation(Landroid/location/LocationRequest;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager;->getTestProviderCurrentRequests(Ljava/lang/String;)
Landroid/location/ILocationManager;->injectGnssMeasurementCorrections(Landroid/location/GnssMeasurementCorrections;Ljava/lang/String;)
Landroid/location/ILocationManager;->isProviderPackage(Ljava/lang/String;)
Landroid/location/ILocationManager;->locationCallbackFinished(Landroid/location/ILocationListener;)
Landroid/location/ILocationManager;->registerGnssStatusCallback(Landroid/location/IGnssStatusListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager;->removeGeofence(Landroid/location/Geofence;Landroid/app/PendingIntent;Ljava/lang/String;)
Landroid/location/ILocationManager;->removeGnssBatchingCallback()
Landroid/location/ILocationManager;->removeUpdates(Landroid/location/ILocationListener;Landroid/app/PendingIntent;)
Landroid/location/ILocationManager;->requestGeofence(Landroid/location/LocationRequest;Landroid/location/Geofence;Landroid/app/PendingIntent;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager;->requestLocationUpdates(Landroid/location/LocationRequest;Landroid/location/ILocationListener;Landroid/app/PendingIntent;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager;->startGnssBatch(JZLjava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->addGnssAntennaInfoListener(Landroid/location/IGnssAntennaInfoListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->addGnssBatchingCallback(Landroid/location/IBatchedLocationCallback;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->addGnssMeasurementsListener(Landroid/location/GnssRequest;Landroid/location/IGnssMeasurementsListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->addGnssNavigationMessageListener(Landroid/location/IGnssNavigationMessageListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->addTestProvider(Ljava/lang/String;Lcom/android/internal/location/ProviderProperties;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->flushGnssBatch(Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->getCurrentLocation(Landroid/location/LocationRequest;Landroid/os/ICancellationSignal;Landroid/location/ILocationListener;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->getFromLocation(DDILandroid/location/GeocoderParams;Ljava/util/List;)
Landroid/location/ILocationManager$Default;->getFromLocationName(Ljava/lang/String;DDDDILandroid/location/GeocoderParams;Ljava/util/List;)
Landroid/location/ILocationManager$Default;->getGnssBatchSize(Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->getIgnoreSettingsWhitelist()
Landroid/location/ILocationManager$Default;->getLastLocation(Landroid/location/LocationRequest;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->getTestProviderCurrentRequests(Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->injectGnssMeasurementCorrections(Landroid/location/GnssMeasurementCorrections;Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->isProviderPackage(Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->locationCallbackFinished(Landroid/location/ILocationListener;)
Landroid/location/ILocationManager$Default;->registerGnssStatusCallback(Landroid/location/IGnssStatusListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->removeGeofence(Landroid/location/Geofence;Landroid/app/PendingIntent;Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->removeGnssBatchingCallback()
Landroid/location/ILocationManager$Default;->removeUpdates(Landroid/location/ILocationListener;Landroid/app/PendingIntent;)
Landroid/location/ILocationManager$Default;->requestGeofence(Landroid/location/LocationRequest;Landroid/location/Geofence;Landroid/app/PendingIntent;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->requestLocationUpdates(Landroid/location/LocationRequest;Landroid/location/ILocationListener;Landroid/app/PendingIntent;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Default;->startGnssBatch(JZLjava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->addGnssAntennaInfoListener(Landroid/location/IGnssAntennaInfoListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->addGnssBatchingCallback(Landroid/location/IBatchedLocationCallback;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->addGnssMeasurementsListener(Landroid/location/GnssRequest;Landroid/location/IGnssMeasurementsListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->addGnssNavigationMessageListener(Landroid/location/IGnssNavigationMessageListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->addTestProvider(Ljava/lang/String;Lcom/android/internal/location/ProviderProperties;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->flushGnssBatch(Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->getCurrentLocation(Landroid/location/LocationRequest;Landroid/os/ICancellationSignal;Landroid/location/ILocationListener;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->getFromLocation(DDILandroid/location/GeocoderParams;Ljava/util/List;)
Landroid/location/ILocationManager$Stub$Proxy;->getFromLocationName(Ljava/lang/String;DDDDILandroid/location/GeocoderParams;Ljava/util/List;)
Landroid/location/ILocationManager$Stub$Proxy;->getGnssBatchSize(Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->getIgnoreSettingsWhitelist()
Landroid/location/ILocationManager$Stub$Proxy;->getLastLocation(Landroid/location/LocationRequest;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->getTestProviderCurrentRequests(Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->injectGnssMeasurementCorrections(Landroid/location/GnssMeasurementCorrections;Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->isProviderPackage(Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->locationCallbackFinished(Landroid/location/ILocationListener;)
Landroid/location/ILocationManager$Stub$Proxy;->registerGnssStatusCallback(Landroid/location/IGnssStatusListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->removeGeofence(Landroid/location/Geofence;Landroid/app/PendingIntent;Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->removeGnssBatchingCallback()
Landroid/location/ILocationManager$Stub$Proxy;->removeUpdates(Landroid/location/ILocationListener;Landroid/app/PendingIntent;)
Landroid/location/ILocationManager$Stub$Proxy;->requestGeofence(Landroid/location/LocationRequest;Landroid/location/Geofence;Landroid/app/PendingIntent;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->requestLocationUpdates(Landroid/location/LocationRequest;Landroid/location/ILocationListener;Landroid/app/PendingIntent;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Landroid/location/ILocationManager$Stub$Proxy;->startGnssBatch(JZLjava/lang/String;Ljava/lang/String;)
Landroid/location/Location;->getElapsedRealtimeAgeNanos()
Landroid/location/Location;->getElapsedRealtimeAgeNanos(J)
Landroid/location/Location;->getExtraLocation(Ljava/lang/String;)
Landroid/location/LocationManager;->addGeofence(Landroid/location/LocationRequest;Landroid/location/Geofence;Landroid/app/PendingIntent;)
Landroid/location/LocationManager;->getTestProviderCurrentRequests(Ljava/lang/String;)
Landroid/location/LocationManager;->removeAllGeofences(Landroid/app/PendingIntent;)
Landroid/location/LocationManager;->removeGeofence(Landroid/location/Geofence;Landroid/app/PendingIntent;)
Landroid/location/LocationManager$BatchedLocationCallbackManager;-><init>(Landroid/location/LocationManager;)
Landroid/location/LocationManager$BatchedLocationCallbackManager;-><init>(Landroid/location/LocationManager;Landroid/location/LocationManager$1;)
Landroid/location/LocationManager$BatchedLocationCallbackManager;->registerService(Ljava/lang/Object;)
Landroid/location/LocationManager$BatchedLocationCallbackManager;->registerService(Ljava/lang/Void;)
Landroid/location/LocationManager$BatchedLocationCallbackManager;->unregisterService()
Landroid/location/LocationManager$BatchedLocationCallbackManager$BatchedLocationCallback;-><init>(Landroid/location/LocationManager$BatchedLocationCallbackManager;)
Landroid/location/LocationManager$BatchedLocationCallbackManager$BatchedLocationCallback;-><init>(Landroid/location/LocationManager$BatchedLocationCallbackManager;Landroid/location/LocationManager$1;)
Landroid/location/LocationManager$BatchedLocationCallbackManager$BatchedLocationCallback;->onLocationBatch(Ljava/util/List;)
Landroid/location/LocationManager$GetCurrentLocationTransport;-><init>(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)
Landroid/location/LocationManager$GetCurrentLocationTransport;-><init>(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;Landroid/location/LocationManager$1;)
Landroid/location/LocationManager$GetCurrentLocationTransport;->acceptResult(Landroid/location/Location;)
Landroid/location/LocationManager$GetCurrentLocationTransport;->cancel()
Landroid/location/LocationManager$GetCurrentLocationTransport;->deliverResult(Landroid/location/Location;)
Landroid/location/LocationManager$GetCurrentLocationTransport;->fail()
Landroid/location/LocationManager$GetCurrentLocationTransport;->getListenerId()
Landroid/location/LocationManager$GetCurrentLocationTransport;->onAlarm()
Landroid/location/LocationManager$GetCurrentLocationTransport;->onLocationChanged(Landroid/location/Location;)
Landroid/location/LocationManager$GetCurrentLocationTransport;->onProviderDisabled(Ljava/lang/String;)
Landroid/location/LocationManager$GetCurrentLocationTransport;->onProviderEnabled(Ljava/lang/String;)
Landroid/location/LocationManager$GetCurrentLocationTransport;->onRemoved()
Landroid/location/LocationManager$GetCurrentLocationTransport;->register(Landroid/app/AlarmManager;Landroid/os/ICancellationSignal;)
Landroid/location/LocationManager$GnssAntennaInfoListenerManager;-><init>(Landroid/location/LocationManager;)
Landroid/location/LocationManager$GnssAntennaInfoListenerManager;-><init>(Landroid/location/LocationManager;Landroid/location/LocationManager$1;)
Landroid/location/LocationManager$GnssAntennaInfoListenerManager;->registerService(Ljava/lang/Object;)
Landroid/location/LocationManager$GnssAntennaInfoListenerManager;->registerService(Ljava/lang/Void;)
Landroid/location/LocationManager$GnssAntennaInfoListenerManager;->unregisterService()
Landroid/location/LocationManager$GnssAntennaInfoListenerManager$GnssAntennaInfoListener;-><init>(Landroid/location/LocationManager$GnssAntennaInfoListenerManager;)
Landroid/location/LocationManager$GnssAntennaInfoListenerManager$GnssAntennaInfoListener;-><init>(Landroid/location/LocationManager$GnssAntennaInfoListenerManager;Landroid/location/LocationManager$1;)
Landroid/location/LocationManager$GnssAntennaInfoListenerManager$GnssAntennaInfoListener;->onGnssAntennaInfoReceived(Ljava/util/List;)
Landroid/location/LocationManager$GnssMeasurementsListenerManager;-><init>(Landroid/location/LocationManager;)
Landroid/location/LocationManager$GnssMeasurementsListenerManager;-><init>(Landroid/location/LocationManager;Landroid/location/LocationManager$1;)
Landroid/location/LocationManager$GnssMeasurementsListenerManager;->merge([Landroid/location/GnssRequest;)
Landroid/location/LocationManager$GnssMeasurementsListenerManager;->merge([Ljava/lang/Object;)
Landroid/location/LocationManager$GnssMeasurementsListenerManager;->registerService(Landroid/location/GnssRequest;)
Landroid/location/LocationManager$GnssMeasurementsListenerManager;->registerService(Ljava/lang/Object;)
Landroid/location/LocationManager$GnssMeasurementsListenerManager;->unregisterService()
Landroid/location/LocationManager$GnssMeasurementsListenerManager$GnssMeasurementsListener;-><init>(Landroid/location/LocationManager$GnssMeasurementsListenerManager;)
Landroid/location/LocationManager$GnssMeasurementsListenerManager$GnssMeasurementsListener;-><init>(Landroid/location/LocationManager$GnssMeasurementsListenerManager;Landroid/location/LocationManager$1;)
Landroid/location/LocationManager$GnssMeasurementsListenerManager$GnssMeasurementsListener;->onGnssMeasurementsReceived(Landroid/location/GnssMeasurementsEvent;)
Landroid/location/LocationManager$GnssMeasurementsListenerManager$GnssMeasurementsListener;->onStatusChanged(I)
Landroid/location/LocationManager$GnssNavigationMessageListenerManager;-><init>(Landroid/location/LocationManager;)
Landroid/location/LocationManager$GnssNavigationMessageListenerManager;-><init>(Landroid/location/LocationManager;Landroid/location/LocationManager$1;)
Landroid/location/LocationManager$GnssNavigationMessageListenerManager;->registerService(Ljava/lang/Object;)
Landroid/location/LocationManager$GnssNavigationMessageListenerManager;->registerService(Ljava/lang/Void;)
Landroid/location/LocationManager$GnssNavigationMessageListenerManager;->unregisterService()
Landroid/location/LocationManager$GnssNavigationMessageListenerManager$GnssNavigationMessageListener;-><init>(Landroid/location/LocationManager$GnssNavigationMessageListenerManager;)
Landroid/location/LocationManager$GnssNavigationMessageListenerManager$GnssNavigationMessageListener;-><init>(Landroid/location/LocationManager$GnssNavigationMessageListenerManager;Landroid/location/LocationManager$1;)
Landroid/location/LocationManager$GnssNavigationMessageListenerManager$GnssNavigationMessageListener;->onGnssNavigationMessageReceived(Landroid/location/GnssNavigationMessage;)
Landroid/location/LocationManager$GnssNavigationMessageListenerManager$GnssNavigationMessageListener;->onStatusChanged(I)
Landroid/location/LocationManager$GnssStatusListenerManager;-><init>(Landroid/location/LocationManager;)
Landroid/location/LocationManager$GnssStatusListenerManager;-><init>(Landroid/location/LocationManager;Landroid/location/LocationManager$1;)
Landroid/location/LocationManager$GnssStatusListenerManager;->addListener(Landroid/location/GpsStatus$Listener;Ljava/util/concurrent/Executor;)
Landroid/location/LocationManager$GnssStatusListenerManager;->addListener(Landroid/location/OnNmeaMessageListener;Landroid/os/Handler;)
Landroid/location/LocationManager$GnssStatusListenerManager;->addListener(Landroid/location/OnNmeaMessageListener;Ljava/util/concurrent/Executor;)
Landroid/location/LocationManager$GnssStatusListenerManager;->convertKey(Ljava/lang/Object;)
Landroid/location/LocationManager$GnssStatusListenerManager;->getGnssStatus()
Landroid/location/LocationManager$GnssStatusListenerManager;->getTtff()
Landroid/location/LocationManager$GnssStatusListenerManager;->registerService(Ljava/lang/Object;)
Landroid/location/LocationManager$GnssStatusListenerManager;->registerService(Ljava/lang/Void;)
Landroid/location/LocationManager$GnssStatusListenerManager;->unregisterService()
Landroid/location/LocationManager$GnssStatusListenerManager$GnssStatusListener;-><init>(Landroid/location/LocationManager$GnssStatusListenerManager;)
Landroid/location/LocationManager$GnssStatusListenerManager$GnssStatusListener;-><init>(Landroid/location/LocationManager$GnssStatusListenerManager;Landroid/location/LocationManager$1;)
Landroid/location/LocationManager$GnssStatusListenerManager$GnssStatusListener;->onFirstFix(I)
Landroid/location/LocationManager$GnssStatusListenerManager$GnssStatusListener;->onGnssStarted()
Landroid/location/LocationManager$GnssStatusListenerManager$GnssStatusListener;->onGnssStopped()
Landroid/location/LocationManager$GnssStatusListenerManager$GnssStatusListener;->onNmeaReceived(JLjava/lang/String;)
Landroid/location/LocationManager$GnssStatusListenerManager$GnssStatusListener;->onSvStatusChanged(I[I[F[F[F[F[F)
Landroid/location/LocationManager$LocationListenerTransport;-><init>(Landroid/location/LocationManager;Landroid/location/LocationListener;)
Landroid/location/LocationManager$LocationListenerTransport;-><init>(Landroid/location/LocationManager;Landroid/location/LocationListener;Landroid/location/LocationManager$1;)
Landroid/location/LocationManager$LocationListenerTransport;->acceptLocation(Ljava/util/concurrent/Executor;Landroid/location/Location;)
Landroid/location/LocationManager$LocationListenerTransport;->acceptProviderChange(Ljava/util/concurrent/Executor;Ljava/lang/String;Z)
Landroid/location/LocationManager$LocationListenerTransport;->getKey()
Landroid/location/LocationManager$LocationListenerTransport;->getListenerId()
Landroid/location/LocationManager$LocationListenerTransport;->locationCallbackFinished()
Landroid/location/LocationManager$LocationListenerTransport;->onLocationChanged(Landroid/location/Location;)
Landroid/location/LocationManager$LocationListenerTransport;->onProviderDisabled(Ljava/lang/String;)
Landroid/location/LocationManager$LocationListenerTransport;->onProviderEnabled(Ljava/lang/String;)
Landroid/location/LocationManager$LocationListenerTransport;->onRemoved()
Landroid/location/LocationManager$LocationListenerTransport;->register(Ljava/util/concurrent/Executor;)
Landroid/location/LocationManager$NmeaAdapter;-><init>(Landroid/location/OnNmeaMessageListener;)
Landroid/location/LocationManager$NmeaAdapter;-><init>(Landroid/location/OnNmeaMessageListener;Landroid/location/LocationManager$1;)
Landroid/location/LocationManager$NmeaAdapter;->onNmeaMessage(Ljava/lang/String;J)
Landroid/location/LocationManagerInternal;->isProviderPackage(Ljava/lang/String;)
Landroid/location/LocationProvider;-><init>(Ljava/lang/String;Lcom/android/internal/location/ProviderProperties;)
Landroid/location/LocationProvider;->propertiesMeetCriteria(Ljava/lang/String;Lcom/android/internal/location/ProviderProperties;Landroid/location/Criteria;)
Landroid/location/LocationRequest;-><init>()
Landroid/location/LocationRequest;-><init>(Landroid/location/LocationRequest;)
Landroid/location/LocationRequest;-><init>(Ljava/lang/String;IJJZJJIFZZZLandroid/os/WorkSource;)
Landroid/location/LocationRequest;-><init>(Ljava/lang/String;IJJZJJIFZZZLandroid/os/WorkSource;Landroid/location/LocationRequest$1;)
Landroid/location/LocationRequest;->checkQuality(I)
Landroid/location/LocationRequest;->decrementNumUpdates()
Landroid/location/LocationRequest;->qualityToString(I)
Landroid/media/AudioManager;->getDeviceVolumeBehavior(ILjava/lang/String;)
Landroid/media/AudioManager;->getPrefDevListenerInfo(Landroid/media/AudioManager$OnPreferredDeviceForStrategyChangedListener;)
Landroid/media/AudioManager;->hasHapticChannels(Landroid/net/Uri;)
Landroid/media/AudioManager;->hasPrefDevListener(Landroid/media/AudioManager$OnPreferredDeviceForStrategyChangedListener;)
Landroid/media/AudioManager;->removePrefDevListener(Landroid/media/AudioManager$OnPreferredDeviceForStrategyChangedListener;)
Landroid/media/AudioManager;->setDeviceVolumeBehavior(ILjava/lang/String;I)
Landroid/media/AudioManager$PrefDevListenerInfo;-><init>(Landroid/media/AudioManager$OnPreferredDeviceForStrategyChangedListener;Ljava/util/concurrent/Executor;)
Landroid/media/AudioManager$StrategyPreferredDeviceDispatcherStub;-><init>(Landroid/media/AudioManager;)
Landroid/media/AudioManager$StrategyPreferredDeviceDispatcherStub;-><init>(Landroid/media/AudioManager;Landroid/media/AudioManager$1;)
Landroid/media/AudioManager$StrategyPreferredDeviceDispatcherStub;->dispatchPrefDeviceChanged(ILandroid/media/AudioDeviceAttributes;)
Landroid/media/AudioManagerInternal;->adjustStreamVolumeForUid(IIILjava/lang/String;II)
Landroid/media/AudioManagerInternal;->adjustSuggestedStreamVolumeForUid(IIILjava/lang/String;II)
Landroid/media/AudioManagerInternal;->setStreamVolumeForUid(IIILjava/lang/String;II)
Landroid/media/AudioPlaybackConfiguration;->handleStateEvent(I)
Landroid/media/AudioRecord;->getCurrentOpPackageName()
Landroid/media/AudioSystem;->getPreferredDeviceForStrategy(I[Landroid/media/AudioDeviceAttributes;)
Landroid/media/AudioSystem;->getSurroundFormats(Ljava/util/Map;Z)
Landroid/media/AudioSystem;->isOffloadSupported(Landroid/media/AudioFormat;Landroid/media/AudioAttributes;)
Landroid/media/AudioSystem;->native_get_FCC_8()
Landroid/media/AudioSystem;->native_is_offload_supported(IIIII)
Landroid/media/AudioSystem;->removePreferredDeviceForStrategy(I)
Landroid/media/AudioSystem;->setPreferredDeviceForStrategy(ILandroid/media/AudioDeviceAttributes;)
Landroid/media/AudioSystem;->setPreferredDeviceForStrategy(IILjava/lang/String;)
Landroid/media/AudioTrack;->isMultichannelConfigSupported(I)
Landroid/media/AudioTrack;->native_setup(Ljava/lang/Object;Ljava/lang/Object;[IIIIII[IJZILjava/lang/Object;)
Landroid/media/ExifInterface;->byteArrayToHexString([B)
Landroid/media/ExifInterface;->containsMatch([B[B)
Landroid/media/ExifInterface;->convertToLongArray(Ljava/lang/Object;)
Landroid/media/ExifInterface;->copy(Ljava/io/InputStream;Ljava/io/OutputStream;I)
Landroid/media/IAudioService;->getPreferredDeviceForStrategy(I)
Landroid/media/IAudioService;->playerEvent(II)
Landroid/media/IAudioService;->registerStrategyPreferredDeviceDispatcher(Landroid/media/IStrategyPreferredDeviceDispatcher;)
Landroid/media/IAudioService;->removePreferredDeviceForStrategy(I)
Landroid/media/IAudioService;->setPreferredDeviceForStrategy(ILandroid/media/AudioDeviceAttributes;)
Landroid/media/IAudioService;->unregisterStrategyPreferredDeviceDispatcher(Landroid/media/IStrategyPreferredDeviceDispatcher;)
Landroid/media/IAudioService$Default;->getPreferredDeviceForStrategy(I)
Landroid/media/IAudioService$Default;->playerEvent(II)
Landroid/media/IAudioService$Default;->registerStrategyPreferredDeviceDispatcher(Landroid/media/IStrategyPreferredDeviceDispatcher;)
Landroid/media/IAudioService$Default;->removePreferredDeviceForStrategy(I)
Landroid/media/IAudioService$Default;->setPreferredDeviceForStrategy(ILandroid/media/AudioDeviceAttributes;)
Landroid/media/IAudioService$Default;->unregisterStrategyPreferredDeviceDispatcher(Landroid/media/IStrategyPreferredDeviceDispatcher;)
Landroid/media/IAudioService$Stub$Proxy;->getPreferredDeviceForStrategy(I)
Landroid/media/IAudioService$Stub$Proxy;->playerEvent(II)
Landroid/media/IAudioService$Stub$Proxy;->registerStrategyPreferredDeviceDispatcher(Landroid/media/IStrategyPreferredDeviceDispatcher;)
Landroid/media/IAudioService$Stub$Proxy;->removePreferredDeviceForStrategy(I)
Landroid/media/IAudioService$Stub$Proxy;->setPreferredDeviceForStrategy(ILandroid/media/AudioDeviceAttributes;)
Landroid/media/IAudioService$Stub$Proxy;->unregisterStrategyPreferredDeviceDispatcher(Landroid/media/IStrategyPreferredDeviceDispatcher;)
Landroid/media/IMediaRoute2ProviderServiceCallback;->notifySessionUpdated(Landroid/media/RoutingSessionInfo;)
Landroid/media/IMediaRoute2ProviderServiceCallback;->updateState(Landroid/media/MediaRoute2ProviderInfo;)
Landroid/media/IMediaRoute2ProviderServiceCallback$Default;->notifySessionUpdated(Landroid/media/RoutingSessionInfo;)
Landroid/media/IMediaRoute2ProviderServiceCallback$Default;->updateState(Landroid/media/MediaRoute2ProviderInfo;)
Landroid/media/IMediaRoute2ProviderServiceCallback$Stub$Proxy;->notifySessionUpdated(Landroid/media/RoutingSessionInfo;)
Landroid/media/IMediaRoute2ProviderServiceCallback$Stub$Proxy;->updateState(Landroid/media/MediaRoute2ProviderInfo;)
Landroid/media/IMediaRouter2;->getSessionHintsForCreatingSession(JLandroid/media/MediaRoute2Info;)
Landroid/media/IMediaRouter2$Default;->getSessionHintsForCreatingSession(JLandroid/media/MediaRoute2Info;)
Landroid/media/IMediaRouter2$Stub$Proxy;->getSessionHintsForCreatingSession(JLandroid/media/MediaRoute2Info;)
Landroid/media/IMediaRouterClient;->onSelectedRouteChanged(Ljava/lang/String;)
Landroid/media/IMediaRouterClient$Default;->onSelectedRouteChanged(Ljava/lang/String;)
Landroid/media/IMediaRouterClient$Stub$Proxy;->onSelectedRouteChanged(Ljava/lang/String;)
Landroid/media/IMediaRouterService;->notifySessionHintsForCreatingSession(Landroid/media/IMediaRouter2;JLandroid/media/MediaRoute2Info;Landroid/os/Bundle;)
Landroid/media/IMediaRouterService;->requestCreateSessionWithManager(Landroid/media/IMediaRouter2Manager;ILjava/lang/String;Landroid/media/MediaRoute2Info;)
Landroid/media/IMediaRouterService;->requestCreateSessionWithRouter2(Landroid/media/IMediaRouter2;ILandroid/media/MediaRoute2Info;Landroid/os/Bundle;)
Landroid/media/IMediaRouterService$Default;->notifySessionHintsForCreatingSession(Landroid/media/IMediaRouter2;JLandroid/media/MediaRoute2Info;Landroid/os/Bundle;)
Landroid/media/IMediaRouterService$Default;->requestCreateSessionWithManager(Landroid/media/IMediaRouter2Manager;ILjava/lang/String;Landroid/media/MediaRoute2Info;)
Landroid/media/IMediaRouterService$Default;->requestCreateSessionWithRouter2(Landroid/media/IMediaRouter2;ILandroid/media/MediaRoute2Info;Landroid/os/Bundle;)
Landroid/media/IMediaRouterService$Stub$Proxy;->notifySessionHintsForCreatingSession(Landroid/media/IMediaRouter2;JLandroid/media/MediaRoute2Info;Landroid/os/Bundle;)
Landroid/media/IMediaRouterService$Stub$Proxy;->requestCreateSessionWithManager(Landroid/media/IMediaRouter2Manager;ILjava/lang/String;Landroid/media/MediaRoute2Info;)
Landroid/media/IMediaRouterService$Stub$Proxy;->requestCreateSessionWithRouter2(Landroid/media/IMediaRouter2;ILandroid/media/MediaRoute2Info;Landroid/os/Bundle;)
Landroid/media/IPlayer;->applyVolumeShaper(Landroid/media/VolumeShaper$Configuration;Landroid/media/VolumeShaper$Operation;)
Landroid/media/IPlayer$Default;->applyVolumeShaper(Landroid/media/VolumeShaper$Configuration;Landroid/media/VolumeShaper$Operation;)
Landroid/media/IPlayer$Stub$Proxy;->applyVolumeShaper(Landroid/media/VolumeShaper$Configuration;Landroid/media/VolumeShaper$Operation;)
Landroid/media/IRemoteVolumeController;->remoteVolumeChanged(Landroid/media/session/MediaSession$Token;I)
Landroid/media/IRemoteVolumeController;->updateRemoteController(Landroid/media/session/MediaSession$Token;)
Landroid/media/IRemoteVolumeController$Default;-><init>()
Landroid/media/IRemoteVolumeController$Default;->asBinder()
Landroid/media/IRemoteVolumeController$Default;->remoteVolumeChanged(Landroid/media/session/MediaSession$Token;I)
Landroid/media/IRemoteVolumeController$Default;->updateRemoteController(Landroid/media/session/MediaSession$Token;)
Landroid/media/IRemoteVolumeController$Stub;-><init>()
Landroid/media/IRemoteVolumeController$Stub;->asBinder()
Landroid/media/IRemoteVolumeController$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/media/IRemoteVolumeController$Stub;->getDefaultImpl()
Landroid/media/IRemoteVolumeController$Stub;->getDefaultTransactionName(I)
Landroid/media/IRemoteVolumeController$Stub;->getTransactionName(I)
Landroid/media/IRemoteVolumeController$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/media/IRemoteVolumeController$Stub;->setDefaultImpl(Landroid/media/IRemoteVolumeController;)
Landroid/media/IRemoteVolumeController$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/media/IRemoteVolumeController$Stub$Proxy;->asBinder()
Landroid/media/IRemoteVolumeController$Stub$Proxy;->getInterfaceDescriptor()
Landroid/media/IRemoteVolumeController$Stub$Proxy;->remoteVolumeChanged(Landroid/media/session/MediaSession$Token;I)
Landroid/media/IRemoteVolumeController$Stub$Proxy;->updateRemoteController(Landroid/media/session/MediaSession$Token;)
Landroid/media/IRingtonePlayer;->setPlaybackProperties(Landroid/os/IBinder;FZ)
Landroid/media/IRingtonePlayer$Default;->setPlaybackProperties(Landroid/os/IBinder;FZ)
Landroid/media/IRingtonePlayer$Stub$Proxy;->setPlaybackProperties(Landroid/os/IBinder;FZ)
Landroid/media/IStrategyPreferredDeviceDispatcher;->dispatchPrefDeviceChanged(ILandroid/media/AudioDeviceAttributes;)
Landroid/media/IStrategyPreferredDeviceDispatcher$Default;-><init>()
Landroid/media/IStrategyPreferredDeviceDispatcher$Default;->asBinder()
Landroid/media/IStrategyPreferredDeviceDispatcher$Default;->dispatchPrefDeviceChanged(ILandroid/media/AudioDeviceAttributes;)
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub;-><init>()
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub;->asBinder()
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub;->getDefaultImpl()
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub;->getDefaultTransactionName(I)
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub;->getTransactionName(I)
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub;->setDefaultImpl(Landroid/media/IStrategyPreferredDeviceDispatcher;)
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub$Proxy;->asBinder()
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub$Proxy;->dispatchPrefDeviceChanged(ILandroid/media/AudioDeviceAttributes;)
Landroid/media/IStrategyPreferredDeviceDispatcher$Stub$Proxy;->getInterfaceDescriptor()
Landroid/media/ImageReader;-><init>(IIIIJ)
Landroid/media/ImageReader$ListenerHandler;->handleMessage(Landroid/os/Message;)
Landroid/media/ImageReader$SurfaceImage;->nativeCreatePlanes(II)
Landroid/media/ImageWriter;-><init>(Landroid/view/Surface;II)
Landroid/media/ImageWriter;->nativeInit(Ljava/lang/Object;Landroid/view/Surface;II)
Landroid/media/MediaCodecInfo$AudioCapabilities;->applyLimits(ILandroid/util/Range;)
Landroid/media/MediaMetadata;-><init>(Landroid/os/Bundle;)
Landroid/media/MediaMetadata;-><init>(Landroid/os/Bundle;Landroid/media/MediaMetadata$1;)
Landroid/media/MediaMetadata$Builder;-><init>(Landroid/media/MediaMetadata;I)
Landroid/media/MediaPlayer;->enableNativeRoutingCallbacksLocked(Z)
Landroid/media/MediaPlayer;->native_setup(Ljava/lang/Object;)
Landroid/media/MediaRouter$Static;->updateSelectedRouteForId(Ljava/lang/String;)
Landroid/media/MediaRouter$Static$Client;->onSelectedRouteChanged(Ljava/lang/String;)
Landroid/media/MediaRouter2;->onGetControllerHintsForCreatingSessionOnHandler(JLandroid/media/MediaRoute2Info;)
Landroid/media/MediaRouter2$ControllerCreationRequest;-><init>(ILandroid/media/MediaRoute2Info;)
Landroid/media/MediaRouter2$MediaRouter2Stub;->getSessionHintsForCreatingSession(JLandroid/media/MediaRoute2Info;)
Landroid/media/MediaRouter2$RoutingController;->releaseInternal(ZZ)
Landroid/media/MediaRouter2$SystemRoutingController;->releaseInternal(ZZ)
Landroid/media/MediaRouter2Manager;->getAvailableRoutesForRoutingSession(Landroid/media/RoutingSessionInfo;)
Landroid/media/MediaRouter2Manager$Callback;-><init>()
Landroid/media/MediaTranscodeManager;-><init>(Landroid/content/Context;)
Landroid/media/MediaTranscodeManager;->enqueueTranscodingRequest(Landroid/media/MediaTranscodeManager$TranscodingRequest;Ljava/util/concurrent/Executor;Landroid/media/MediaTranscodeManager$OnTranscodingFinishedListener;)
Landroid/media/MediaTranscodeManager;->getInstance(Landroid/content/Context;)
Landroid/media/MediaTranscodeManager;->native_cancelTranscodingRequest(J)
Landroid/media/MediaTranscodeManager;->native_enqueueTranscodingRequest(JLandroid/media/MediaTranscodeManager$TranscodingRequest;Landroid/content/Context;)
Landroid/media/MediaTranscodeManager;->native_init()
Landroid/media/MediaTranscodeManager;->native_requestUniqueJobID()
Landroid/media/MediaTranscodeManager;->postEventFromNative(IJI)
Landroid/media/MediaTranscodeManager$OnTranscodingFinishedListener;->onTranscodingFinished(Landroid/media/MediaTranscodeManager$TranscodingJob;)
Landroid/media/MediaTranscodeManager$TranscodingJob;-><init>(JLjava/util/concurrent/Executor;Landroid/media/MediaTranscodeManager$OnTranscodingFinishedListener;)
Landroid/media/MediaTranscodeManager$TranscodingJob;-><init>(JLjava/util/concurrent/Executor;Landroid/media/MediaTranscodeManager$OnTranscodingFinishedListener;Landroid/media/MediaTranscodeManager$1;)
Landroid/media/MediaTranscodeManager$TranscodingJob;->cancel()
Landroid/media/MediaTranscodeManager$TranscodingJob;->getProgress()
Landroid/media/MediaTranscodeManager$TranscodingJob;->getResult()
Landroid/media/MediaTranscodeManager$TranscodingJob;->getStatus()
Landroid/media/MediaTranscodeManager$TranscodingJob;->processJobEvent(II)
Landroid/media/MediaTranscodeManager$TranscodingJob;->setJobFinished(I)
Landroid/media/MediaTranscodeManager$TranscodingJob;->setJobProgress(F)
Landroid/media/MediaTranscodeManager$TranscodingJob;->setJobStarted()
Landroid/media/MediaTranscodeManager$TranscodingJob;->setOnProgressChangedListener(Ljava/util/concurrent/Executor;Landroid/media/MediaTranscodeManager$TranscodingJob$OnProgressChangedListener;)
Landroid/media/MediaTranscodeManager$TranscodingJob$OnProgressChangedListener;->onProgressChanged(F)
Landroid/media/MediaTranscodeManager$TranscodingRequest;-><init>(Landroid/media/MediaTranscodeManager$TranscodingRequest$Builder;)
Landroid/media/MediaTranscodeManager$TranscodingRequest;-><init>(Landroid/media/MediaTranscodeManager$TranscodingRequest$Builder;Landroid/media/MediaTranscodeManager$1;)
Landroid/media/MediaTranscodeManager$TranscodingRequest$Builder;-><init>()
Landroid/media/MediaTranscodeManager$TranscodingRequest$Builder;->build()
Landroid/media/MediaTranscodeManager$TranscodingRequest$Builder;->setDestinationFormat(Landroid/media/MediaFormat;)
Landroid/media/MediaTranscodeManager$TranscodingRequest$Builder;->setDestinationUri(Landroid/net/Uri;)
Landroid/media/MediaTranscodeManager$TranscodingRequest$Builder;->setSourceUri(Landroid/net/Uri;)
Landroid/media/PlayerBase;->baseRegisterPlayer()
Landroid/media/PlayerBase;->baseStart()
Landroid/media/PlayerBase;->isRestricted_sync()
Landroid/media/PlayerBase;->updateAppOpsPlayAudio()
Landroid/media/PlayerBase;->updateAppOpsPlayAudio_sync(Z)
Landroid/media/PlayerBase;->updateState(I)
Landroid/media/PlayerBase$IAppOpsCallbackWrapper;-><init>(Landroid/media/PlayerBase;)
Landroid/media/PlayerBase$IAppOpsCallbackWrapper;->opChanged(IILjava/lang/String;)
Landroid/media/PlayerBase$IPlayerWrapper;->applyVolumeShaper(Landroid/media/VolumeShaper$Configuration;Landroid/media/VolumeShaper$Operation;)
Landroid/media/PlayerBase$PlayerIdCard;-><init>(ILandroid/media/AudioAttributes;Landroid/media/IPlayer;)
Landroid/media/SoundPool;->native_setup(Ljava/lang/Object;ILjava/lang/Object;)
Landroid/media/ToneGenerator;->native_setup(II)
Landroid/media/audiofx/AudioEffect;->native_setup(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;[I[Ljava/lang/Object;Ljava/lang/String;Z)
Landroid/media/audiofx/Visualizer;->native_setup(Ljava/lang/Object;I[ILjava/lang/String;)
Landroid/media/audiopolicy/AudioMix;->canBeUsedForPrivilegedCapture(Landroid/media/AudioFormat;)
Landroid/media/audiopolicy/AudioMixingRule;->allowPrivilegedPlaybackCapture()
Landroid/media/browse/MediaBrowser$ServiceCallbacks;->onLoadChildren(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;)
Landroid/media/browse/MediaBrowser$ServiceCallbacks;->onLoadChildrenWithOptions(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;Landroid/os/Bundle;)
Landroid/media/session/ISession;->setMediaButtonReceiver(Landroid/app/PendingIntent;)
Landroid/media/session/ISession;->setQueue(Landroid/content/pm/ParceledListSlice;)
Landroid/media/session/ISession$Default;->setMediaButtonReceiver(Landroid/app/PendingIntent;)
Landroid/media/session/ISession$Default;->setQueue(Landroid/content/pm/ParceledListSlice;)
Landroid/media/session/ISession$Stub$Proxy;->setMediaButtonReceiver(Landroid/app/PendingIntent;)
Landroid/media/session/ISession$Stub$Proxy;->setQueue(Landroid/content/pm/ParceledListSlice;)
Landroid/media/session/ISessionManager;->dispatchMediaKeyEventToSessionAsSystemService(Ljava/lang/String;Landroid/media/session/MediaSession$Token;Landroid/view/KeyEvent;)
Landroid/media/session/ISessionManager;->dispatchVolumeKeyEventToSessionAsSystemService(Ljava/lang/String;Ljava/lang/String;Landroid/media/session/MediaSession$Token;Landroid/view/KeyEvent;)
Landroid/media/session/ISessionManager;->getSession2Tokens(I)
Landroid/media/session/ISessionManager;->notifySession2Created(Landroid/media/Session2Token;)
Landroid/media/session/ISessionManager;->registerRemoteVolumeController(Landroid/media/IRemoteVolumeController;)
Landroid/media/session/ISessionManager;->setCustomMediaKeyDispatcherForTesting(Ljava/lang/String;)
Landroid/media/session/ISessionManager;->setCustomSessionPolicyProviderForTesting(Ljava/lang/String;)
Landroid/media/session/ISessionManager;->unregisterRemoteVolumeController(Landroid/media/IRemoteVolumeController;)
Landroid/media/session/ISessionManager$Default;->dispatchMediaKeyEventToSessionAsSystemService(Ljava/lang/String;Landroid/media/session/MediaSession$Token;Landroid/view/KeyEvent;)
Landroid/media/session/ISessionManager$Default;->dispatchVolumeKeyEventToSessionAsSystemService(Ljava/lang/String;Ljava/lang/String;Landroid/media/session/MediaSession$Token;Landroid/view/KeyEvent;)
Landroid/media/session/ISessionManager$Default;->getSession2Tokens(I)
Landroid/media/session/ISessionManager$Default;->notifySession2Created(Landroid/media/Session2Token;)
Landroid/media/session/ISessionManager$Default;->registerRemoteVolumeController(Landroid/media/IRemoteVolumeController;)
Landroid/media/session/ISessionManager$Default;->setCustomMediaKeyDispatcherForTesting(Ljava/lang/String;)
Landroid/media/session/ISessionManager$Default;->setCustomSessionPolicyProviderForTesting(Ljava/lang/String;)
Landroid/media/session/ISessionManager$Default;->unregisterRemoteVolumeController(Landroid/media/IRemoteVolumeController;)
Landroid/media/session/ISessionManager$Stub$Proxy;->dispatchMediaKeyEventToSessionAsSystemService(Ljava/lang/String;Landroid/media/session/MediaSession$Token;Landroid/view/KeyEvent;)
Landroid/media/session/ISessionManager$Stub$Proxy;->dispatchVolumeKeyEventToSessionAsSystemService(Ljava/lang/String;Ljava/lang/String;Landroid/media/session/MediaSession$Token;Landroid/view/KeyEvent;)
Landroid/media/session/ISessionManager$Stub$Proxy;->getSession2Tokens(I)
Landroid/media/session/ISessionManager$Stub$Proxy;->notifySession2Created(Landroid/media/Session2Token;)
Landroid/media/session/ISessionManager$Stub$Proxy;->registerRemoteVolumeController(Landroid/media/IRemoteVolumeController;)
Landroid/media/session/ISessionManager$Stub$Proxy;->setCustomMediaKeyDispatcherForTesting(Ljava/lang/String;)
Landroid/media/session/ISessionManager$Stub$Proxy;->setCustomSessionPolicyProviderForTesting(Ljava/lang/String;)
Landroid/media/session/ISessionManager$Stub$Proxy;->unregisterRemoteVolumeController(Landroid/media/IRemoteVolumeController;)
Landroid/media/session/MediaController;->getSessionBinder()
Landroid/media/session/MediaController$PlaybackInfo;-><init>(IIIILandroid/media/AudioAttributes;)
Landroid/media/session/MediaSession;->isActiveState(I)
Landroid/media/session/MediaSessionManager;->addOnActiveSessionsChangedListener(Landroid/media/session/MediaSessionManager$OnActiveSessionsChangedListener;Landroid/content/ComponentName;ILandroid/os/Handler;)
Landroid/media/session/MediaSessionManager;->addOnSession2TokensChangedListener(ILandroid/media/session/MediaSessionManager$OnSession2TokensChangedListener;Landroid/os/Handler;)
Landroid/media/session/MediaSessionManager;->dispatchMediaKeyEvent(Landroid/view/KeyEvent;)
Landroid/media/session/MediaSessionManager;->dispatchMediaKeyEventAsSystemService(Landroid/media/session/MediaSession$Token;Landroid/view/KeyEvent;)
Landroid/media/session/MediaSessionManager;->dispatchMediaKeyEventInternal(ZLandroid/view/KeyEvent;Z)
Landroid/media/session/MediaSessionManager;->dispatchVolumeKeyEventAsSystemService(Landroid/media/session/MediaSession$Token;Landroid/view/KeyEvent;)
Landroid/media/session/MediaSessionManager;->dispatchVolumeKeyEventInternal(ZLandroid/view/KeyEvent;IZ)
Landroid/media/session/MediaSessionManager;->getSession2Tokens(I)
Landroid/media/session/MediaSessionManager;->registerRemoteVolumeController(Landroid/media/IRemoteVolumeController;)
Landroid/media/session/MediaSessionManager;->setCustomMediaKeyDispatcherForTesting(Ljava/lang/String;)
Landroid/media/session/MediaSessionManager;->setCustomSessionPolicyProviderForTesting(Ljava/lang/String;)
Landroid/media/session/MediaSessionManager;->unregisterRemoteVolumeController(Landroid/media/IRemoteVolumeController;)
Landroid/media/session/MediaSessionManager$Session2TokensChangedWrapper;-><init>(Landroid/media/session/MediaSessionManager$OnSession2TokensChangedListener;Landroid/os/Handler;)
Landroid/media/session/MediaSessionManager$SessionsChangedWrapper;-><init>(Landroid/content/Context;Landroid/media/session/MediaSessionManager$OnActiveSessionsChangedListener;Landroid/os/Handler;)
Landroid/media/soundtrigger/SoundTriggerDetector;-><init>(Lcom/android/internal/app/ISoundTriggerService;Ljava/util/UUID;Landroid/media/soundtrigger/SoundTriggerDetector$Callback;Landroid/os/Handler;)
Landroid/media/soundtrigger_middleware/ISoundTriggerCallback$Stub;->getDefaultTransactionName(I)
Landroid/media/soundtrigger_middleware/ISoundTriggerCallback$Stub;->getTransactionName(I)
Landroid/media/soundtrigger_middleware/ISoundTriggerMiddlewareService;->attach(ILandroid/media/soundtrigger_middleware/ISoundTriggerCallback;)
Landroid/media/soundtrigger_middleware/ISoundTriggerMiddlewareService;->listModules()
Landroid/media/soundtrigger_middleware/ISoundTriggerMiddlewareService$Default;->attach(ILandroid/media/soundtrigger_middleware/ISoundTriggerCallback;)
Landroid/media/soundtrigger_middleware/ISoundTriggerMiddlewareService$Default;->listModules()
Landroid/media/soundtrigger_middleware/ISoundTriggerMiddlewareService$Stub;->getDefaultTransactionName(I)
Landroid/media/soundtrigger_middleware/ISoundTriggerMiddlewareService$Stub;->getTransactionName(I)
Landroid/media/soundtrigger_middleware/ISoundTriggerMiddlewareService$Stub$Proxy;->attach(ILandroid/media/soundtrigger_middleware/ISoundTriggerCallback;)
Landroid/media/soundtrigger_middleware/ISoundTriggerMiddlewareService$Stub$Proxy;->listModules()
Landroid/media/soundtrigger_middleware/ISoundTriggerModule$Stub;->getDefaultTransactionName(I)
Landroid/media/soundtrigger_middleware/ISoundTriggerModule$Stub;->getTransactionName(I)
Landroid/media/tv/TvInputInfo;-><init>(Landroid/content/pm/ResolveInfo;Ljava/lang/String;IZLjava/lang/CharSequence;ILandroid/graphics/drawable/Icon;Landroid/graphics/drawable/Icon;Landroid/graphics/drawable/Icon;Ljava/lang/String;ZILandroid/hardware/hdmi/HdmiDeviceInfo;ZILjava/lang/String;Landroid/os/Bundle;)
Landroid/media/tv/TvInputInfo;-><init>(Landroid/content/pm/ResolveInfo;Ljava/lang/String;IZLjava/lang/CharSequence;ILandroid/graphics/drawable/Icon;Landroid/graphics/drawable/Icon;Landroid/graphics/drawable/Icon;Ljava/lang/String;ZILandroid/hardware/hdmi/HdmiDeviceInfo;ZILjava/lang/String;Landroid/os/Bundle;Landroid/media/tv/TvInputInfo$1;)
Landroid/media/tv/tuner/Lnb;-><init>(I)
Landroid/media/tv/tuner/Tuner;->nativeCloseFrontendByHandle(I)
Landroid/media/tv/tuner/Tuner;->nativeGetLnbIds()
Landroid/media/tv/tuner/Tuner;->nativeSetLnb(I)
Landroid/media/tv/tuner/Tuner;->setFrontendInfoList()
Landroid/media/tv/tuner/Tuner;->setLnbIds()
Landroid/media/tv/tuner/filter/AvSettings;-><init>(IZZ)
Landroid/media/tv/tuner/filter/AvSettings;-><init>(IZZLandroid/media/tv/tuner/filter/AvSettings$1;)
Landroid/media/tv/tuner/filter/Filter;-><init>(I)
Landroid/media/tv/tuner/filter/IpFilterConfiguration;-><init>(Landroid/media/tv/tuner/filter/Settings;[B[BIIZ)
Landroid/media/tv/tuner/filter/IpFilterConfiguration;-><init>(Landroid/media/tv/tuner/filter/Settings;[B[BIIZLandroid/media/tv/tuner/filter/IpFilterConfiguration$1;)
Landroid/media/tv/tuner/filter/MmtpRecordEvent;-><init>(IJ)
Landroid/media/tv/tuner/filter/TsRecordEvent;-><init>(IIIJ)
Landroid/media/tv/tuner/frontend/AnalogFrontendSettings;-><init>(III)
Landroid/media/tv/tuner/frontend/AnalogFrontendSettings;-><init>(IIILandroid/media/tv/tuner/frontend/AnalogFrontendSettings$1;)
Landroid/media/tv/tuner/frontend/DvbcFrontendCapabilities;-><init>(III)
Landroid/media/tv/tuner/frontend/DvbcFrontendSettings;-><init>(IIJIIII)
Landroid/media/tv/tuner/frontend/DvbcFrontendSettings;-><init>(IIJIIIILandroid/media/tv/tuner/frontend/DvbcFrontendSettings$1;)
Landroid/media/tv/tuner/frontend/DvbsFrontendSettings;-><init>(IILandroid/media/tv/tuner/frontend/DvbsCodeRate;IIIIII)
Landroid/media/tv/tuner/frontend/DvbsFrontendSettings;-><init>(IILandroid/media/tv/tuner/frontend/DvbsCodeRate;IIIIIILandroid/media/tv/tuner/frontend/DvbsFrontendSettings$1;)
Landroid/media/tv/tunerresourcemanager/CasSessionRequest;-><init>(Landroid/os/Parcel;)
Landroid/media/tv/tunerresourcemanager/CasSessionRequest;-><init>(Landroid/os/Parcel;Landroid/media/tv/tunerresourcemanager/CasSessionRequest$1;)
Landroid/media/tv/tunerresourcemanager/CasSessionRequest;-><init>(II)
Landroid/media/tv/tunerresourcemanager/CasSessionRequest;->getCasSystemId()
Landroid/media/tv/tunerresourcemanager/CasSessionRequest;->getClientId()
Landroid/media/tv/tunerresourcemanager/CasSessionRequest;->toString()
Landroid/media/tv/tunerresourcemanager/IResourcesReclaimListener$Stub;->getDefaultTransactionName(I)
Landroid/media/tv/tunerresourcemanager/IResourcesReclaimListener$Stub;->getTransactionName(I)
Landroid/media/tv/tunerresourcemanager/ITunerResourceManager;->setFrontendInfoList([Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;)
Landroid/media/tv/tunerresourcemanager/ITunerResourceManager$Default;->setFrontendInfoList([Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;)
Landroid/media/tv/tunerresourcemanager/ITunerResourceManager$Stub;->getDefaultTransactionName(I)
Landroid/media/tv/tunerresourcemanager/ITunerResourceManager$Stub;->getTransactionName(I)
Landroid/media/tv/tunerresourcemanager/ITunerResourceManager$Stub$Proxy;->setFrontendInfoList([Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;)
Landroid/media/tv/tunerresourcemanager/ResourceClientProfile;-><init>(Landroid/os/Parcel;)
Landroid/media/tv/tunerresourcemanager/ResourceClientProfile;-><init>(Landroid/os/Parcel;Landroid/media/tv/tunerresourcemanager/ResourceClientProfile$1;)
Landroid/media/tv/tunerresourcemanager/ResourceClientProfile;-><init>(Ljava/lang/String;I)
Landroid/media/tv/tunerresourcemanager/ResourceClientProfile;->getTvInputSessionId()
Landroid/media/tv/tunerresourcemanager/ResourceClientProfile;->getUseCase()
Landroid/media/tv/tunerresourcemanager/ResourceClientProfile;->toString()
Landroid/media/tv/tunerresourcemanager/TunerDemuxRequest;-><init>(Landroid/os/Parcel;)
Landroid/media/tv/tunerresourcemanager/TunerDemuxRequest;-><init>(Landroid/os/Parcel;Landroid/media/tv/tunerresourcemanager/TunerDemuxRequest$1;)
Landroid/media/tv/tunerresourcemanager/TunerDemuxRequest;-><init>(I)
Landroid/media/tv/tunerresourcemanager/TunerDemuxRequest;->getClientId()
Landroid/media/tv/tunerresourcemanager/TunerDemuxRequest;->toString()
Landroid/media/tv/tunerresourcemanager/TunerDescramblerRequest;-><init>(Landroid/os/Parcel;)
Landroid/media/tv/tunerresourcemanager/TunerDescramblerRequest;-><init>(Landroid/os/Parcel;Landroid/media/tv/tunerresourcemanager/TunerDescramblerRequest$1;)
Landroid/media/tv/tunerresourcemanager/TunerDescramblerRequest;-><init>(I)
Landroid/media/tv/tunerresourcemanager/TunerDescramblerRequest;->getClientId()
Landroid/media/tv/tunerresourcemanager/TunerDescramblerRequest;->toString()
Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;-><init>(Landroid/os/Parcel;)
Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;-><init>(Landroid/os/Parcel;Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo$1;)
Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;-><init>(III)
Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;->describeContents()
Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;->getExclusiveGroupId()
Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;->getFrontendType()
Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;->getId()
Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;->toString()
Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;->writeToParcel(Landroid/os/Parcel;I)
Landroid/media/tv/tunerresourcemanager/TunerFrontendRequest;-><init>(Landroid/os/Parcel;)
Landroid/media/tv/tunerresourcemanager/TunerFrontendRequest;-><init>(Landroid/os/Parcel;Landroid/media/tv/tunerresourcemanager/TunerFrontendRequest$1;)
Landroid/media/tv/tunerresourcemanager/TunerFrontendRequest;-><init>(II)
Landroid/media/tv/tunerresourcemanager/TunerFrontendRequest;->getClientId()
Landroid/media/tv/tunerresourcemanager/TunerFrontendRequest;->getFrontendType()
Landroid/media/tv/tunerresourcemanager/TunerFrontendRequest;->toString()
Landroid/media/tv/tunerresourcemanager/TunerLnbRequest;-><init>(Landroid/os/Parcel;)
Landroid/media/tv/tunerresourcemanager/TunerLnbRequest;-><init>(Landroid/os/Parcel;Landroid/media/tv/tunerresourcemanager/TunerLnbRequest$1;)
Landroid/media/tv/tunerresourcemanager/TunerLnbRequest;-><init>(I)
Landroid/media/tv/tunerresourcemanager/TunerLnbRequest;->getClientId()
Landroid/media/tv/tunerresourcemanager/TunerLnbRequest;->toString()
Landroid/media/tv/tunerresourcemanager/TunerResourceManager;->setFrontendInfoList([Landroid/media/tv/tunerresourcemanager/TunerFrontendInfo;)
Landroid/mtp/MtpDatabase;->findInMedia(Landroid/mtp/MtpStorageManager$MtpObject;Ljava/nio/file/Path;)
Landroid/mtp/MtpServer;->configure(Z)
Landroid/mtp/MtpServer;->native_configure(Z)
Landroid/net/CaptivePortalData;-><init>(JLandroid/net/Uri;Landroid/net/Uri;ZJJZ)
Landroid/net/CaptivePortalData;-><init>(JLandroid/net/Uri;Landroid/net/Uri;ZJJZLandroid/net/CaptivePortalData$1;)
Landroid/net/ConnectivityManager;->checkMobileProvisioning(I)
Landroid/net/ConnectivityManager;->enforceChangePermission(Landroid/content/Context;)
Landroid/net/ConnectivityManager;->enforceTetherChangePermission(Landroid/content/Context;Ljava/lang/String;)
Landroid/net/ConnectivityManager;->getActiveNetworkQuotaInfo()
Landroid/net/ConnectivityManager;->getAlwaysOnVpnPackageForUser(I)
Landroid/net/ConnectivityManager;->getMobileProvisioningUrl()
Landroid/net/ConnectivityManager;->getNetworkManagementService()
Landroid/net/ConnectivityManager;->getNetworkPolicyManager()
Landroid/net/ConnectivityManager;->getVpnLockdownWhitelist(I)
Landroid/net/ConnectivityManager;->isAlwaysOnVpnPackageSupportedForUser(ILjava/lang/String;)
Landroid/net/ConnectivityManager;->isVpnLockdownEnabled(I)
Landroid/net/ConnectivityManager;->registerNetworkAgent(Landroid/os/Messenger;Landroid/net/NetworkInfo;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;ILandroid/net/NetworkAgentConfig;)
Landroid/net/ConnectivityManager;->registerNetworkAgent(Landroid/os/Messenger;Landroid/net/NetworkInfo;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;ILandroid/net/NetworkAgentConfig;I)
Landroid/net/ConnectivityManager;->registerNetworkFactory(Landroid/os/Messenger;Ljava/lang/String;)
Landroid/net/ConnectivityManager;->sendRequestForNetwork(Landroid/net/NetworkCapabilities;Landroid/net/ConnectivityManager$NetworkCallback;IIILandroid/net/ConnectivityManager$CallbackHandler;)
Landroid/net/ConnectivityManager;->setAlwaysOnVpnPackageForUser(ILjava/lang/String;ZLjava/util/List;)
Landroid/net/ConnectivityManager;->unregisterNetworkFactory(Landroid/os/Messenger;)
Landroid/net/ConnectivityManager;->updateLockdownVpn()
Landroid/net/DnsPacket;-><init>([B)
Landroid/net/DnsPacket$DnsHeader;-><init>(Landroid/net/DnsPacket;Ljava/nio/ByteBuffer;)
Landroid/net/DnsPacket$DnsHeader;->getRecordCount(I)
Landroid/net/DnsPacket$DnsRecord;-><init>(Landroid/net/DnsPacket;ILjava/nio/ByteBuffer;)
Landroid/net/DnsPacket$DnsRecord;->getRR()
Landroid/net/DnsPacket$DnsRecord;->labelToString([B)
Landroid/net/DnsPacket$DnsRecord;->parseName(Ljava/nio/ByteBuffer;I)
Landroid/net/ICaptivePortal;->logEvent(ILjava/lang/String;)
Landroid/net/ICaptivePortal$Default;->logEvent(ILjava/lang/String;)
Landroid/net/ICaptivePortal$Stub;->getDefaultTransactionName(I)
Landroid/net/ICaptivePortal$Stub;->getTransactionName(I)
Landroid/net/ICaptivePortal$Stub$Proxy;->logEvent(ILjava/lang/String;)
Landroid/net/IConnectivityDiagnosticsCallback$Stub;->getDefaultTransactionName(I)
Landroid/net/IConnectivityDiagnosticsCallback$Stub;->getTransactionName(I)
Landroid/net/IConnectivityManager;->addVpnAddress(Ljava/lang/String;I)
Landroid/net/IConnectivityManager;->checkMobileProvisioning(I)
Landroid/net/IConnectivityManager;->deleteVpnProfile(Ljava/lang/String;)
Landroid/net/IConnectivityManager;->establishVpn(Lcom/android/internal/net/VpnConfig;)
Landroid/net/IConnectivityManager;->getActiveNetworkQuotaInfo()
Landroid/net/IConnectivityManager;->getAlwaysOnVpnPackage(I)
Landroid/net/IConnectivityManager;->getDefaultNetworkCapabilitiesForUser(ILjava/lang/String;)
Landroid/net/IConnectivityManager;->getLegacyVpnInfo(I)
Landroid/net/IConnectivityManager;->getMobileProvisioningUrl()
Landroid/net/IConnectivityManager;->getNetworkCapabilities(Landroid/net/Network;Ljava/lang/String;)
Landroid/net/IConnectivityManager;->getVpnConfig(I)
Landroid/net/IConnectivityManager;->getVpnLockdownWhitelist(I)
Landroid/net/IConnectivityManager;->isAlwaysOnVpnPackageSupported(ILjava/lang/String;)
Landroid/net/IConnectivityManager;->isCallerCurrentAlwaysOnVpnApp()
Landroid/net/IConnectivityManager;->isCallerCurrentAlwaysOnVpnLockdownApp()
Landroid/net/IConnectivityManager;->isVpnLockdownEnabled(I)
Landroid/net/IConnectivityManager;->listenForNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;Landroid/os/IBinder;Ljava/lang/String;)
Landroid/net/IConnectivityManager;->pendingListenForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;Ljava/lang/String;)
Landroid/net/IConnectivityManager;->pendingRequestForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;Ljava/lang/String;)
Landroid/net/IConnectivityManager;->prepareVpn(Ljava/lang/String;Ljava/lang/String;I)
Landroid/net/IConnectivityManager;->provisionVpnProfile(Lcom/android/internal/net/VpnProfile;Ljava/lang/String;)
Landroid/net/IConnectivityManager;->registerNetworkAgent(Landroid/os/Messenger;Landroid/net/NetworkInfo;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;ILandroid/net/NetworkAgentConfig;I)
Landroid/net/IConnectivityManager;->registerNetworkFactory(Landroid/os/Messenger;Ljava/lang/String;)
Landroid/net/IConnectivityManager;->removeVpnAddress(Ljava/lang/String;I)
Landroid/net/IConnectivityManager;->requestNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;ILandroid/os/IBinder;ILjava/lang/String;)
Landroid/net/IConnectivityManager;->requestRouteToHostAddress(I[B)
Landroid/net/IConnectivityManager;->setAlwaysOnVpnPackage(ILjava/lang/String;ZLjava/util/List;)
Landroid/net/IConnectivityManager;->setUnderlyingNetworksForVpn([Landroid/net/Network;)
Landroid/net/IConnectivityManager;->setVpnPackageAuthorization(Ljava/lang/String;II)
Landroid/net/IConnectivityManager;->startLegacyVpn(Lcom/android/internal/net/VpnProfile;)
Landroid/net/IConnectivityManager;->startNattKeepaliveWithFd(Landroid/net/Network;Ljava/io/FileDescriptor;IILandroid/net/ISocketKeepaliveCallback;Ljava/lang/String;Ljava/lang/String;)
Landroid/net/IConnectivityManager;->startTcpKeepalive(Landroid/net/Network;Ljava/io/FileDescriptor;ILandroid/net/ISocketKeepaliveCallback;)
Landroid/net/IConnectivityManager;->startVpnProfile(Ljava/lang/String;)
Landroid/net/IConnectivityManager;->stopVpnProfile(Ljava/lang/String;)
Landroid/net/IConnectivityManager;->unregisterNetworkFactory(Landroid/os/Messenger;)
Landroid/net/IConnectivityManager;->updateLockdownVpn()
Landroid/net/IConnectivityManager$Default;->addVpnAddress(Ljava/lang/String;I)
Landroid/net/IConnectivityManager$Default;->checkMobileProvisioning(I)
Landroid/net/IConnectivityManager$Default;->deleteVpnProfile(Ljava/lang/String;)
Landroid/net/IConnectivityManager$Default;->establishVpn(Lcom/android/internal/net/VpnConfig;)
Landroid/net/IConnectivityManager$Default;->getActiveNetworkQuotaInfo()
Landroid/net/IConnectivityManager$Default;->getAlwaysOnVpnPackage(I)
Landroid/net/IConnectivityManager$Default;->getDefaultNetworkCapabilitiesForUser(ILjava/lang/String;)
Landroid/net/IConnectivityManager$Default;->getLegacyVpnInfo(I)
Landroid/net/IConnectivityManager$Default;->getMobileProvisioningUrl()
Landroid/net/IConnectivityManager$Default;->getNetworkCapabilities(Landroid/net/Network;Ljava/lang/String;)
Landroid/net/IConnectivityManager$Default;->getVpnConfig(I)
Landroid/net/IConnectivityManager$Default;->getVpnLockdownWhitelist(I)
Landroid/net/IConnectivityManager$Default;->isAlwaysOnVpnPackageSupported(ILjava/lang/String;)
Landroid/net/IConnectivityManager$Default;->isCallerCurrentAlwaysOnVpnApp()
Landroid/net/IConnectivityManager$Default;->isCallerCurrentAlwaysOnVpnLockdownApp()
Landroid/net/IConnectivityManager$Default;->isVpnLockdownEnabled(I)
Landroid/net/IConnectivityManager$Default;->listenForNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;Landroid/os/IBinder;Ljava/lang/String;)
Landroid/net/IConnectivityManager$Default;->pendingListenForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;Ljava/lang/String;)
Landroid/net/IConnectivityManager$Default;->pendingRequestForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;Ljava/lang/String;)
Landroid/net/IConnectivityManager$Default;->prepareVpn(Ljava/lang/String;Ljava/lang/String;I)
Landroid/net/IConnectivityManager$Default;->provisionVpnProfile(Lcom/android/internal/net/VpnProfile;Ljava/lang/String;)
Landroid/net/IConnectivityManager$Default;->registerNetworkAgent(Landroid/os/Messenger;Landroid/net/NetworkInfo;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;ILandroid/net/NetworkAgentConfig;I)
Landroid/net/IConnectivityManager$Default;->registerNetworkFactory(Landroid/os/Messenger;Ljava/lang/String;)
Landroid/net/IConnectivityManager$Default;->removeVpnAddress(Ljava/lang/String;I)
Landroid/net/IConnectivityManager$Default;->requestNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;ILandroid/os/IBinder;ILjava/lang/String;)
Landroid/net/IConnectivityManager$Default;->requestRouteToHostAddress(I[B)
Landroid/net/IConnectivityManager$Default;->setAlwaysOnVpnPackage(ILjava/lang/String;ZLjava/util/List;)
Landroid/net/IConnectivityManager$Default;->setUnderlyingNetworksForVpn([Landroid/net/Network;)
Landroid/net/IConnectivityManager$Default;->setVpnPackageAuthorization(Ljava/lang/String;II)
Landroid/net/IConnectivityManager$Default;->startLegacyVpn(Lcom/android/internal/net/VpnProfile;)
Landroid/net/IConnectivityManager$Default;->startNattKeepaliveWithFd(Landroid/net/Network;Ljava/io/FileDescriptor;IILandroid/net/ISocketKeepaliveCallback;Ljava/lang/String;Ljava/lang/String;)
Landroid/net/IConnectivityManager$Default;->startTcpKeepalive(Landroid/net/Network;Ljava/io/FileDescriptor;ILandroid/net/ISocketKeepaliveCallback;)
Landroid/net/IConnectivityManager$Default;->startVpnProfile(Ljava/lang/String;)
Landroid/net/IConnectivityManager$Default;->stopVpnProfile(Ljava/lang/String;)
Landroid/net/IConnectivityManager$Default;->unregisterNetworkFactory(Landroid/os/Messenger;)
Landroid/net/IConnectivityManager$Default;->updateLockdownVpn()
Landroid/net/IConnectivityManager$Stub;->getDefaultTransactionName(I)
Landroid/net/IConnectivityManager$Stub;->getTransactionName(I)
Landroid/net/IConnectivityManager$Stub$Proxy;->addVpnAddress(Ljava/lang/String;I)
Landroid/net/IConnectivityManager$Stub$Proxy;->checkMobileProvisioning(I)
Landroid/net/IConnectivityManager$Stub$Proxy;->deleteVpnProfile(Ljava/lang/String;)
Landroid/net/IConnectivityManager$Stub$Proxy;->establishVpn(Lcom/android/internal/net/VpnConfig;)
Landroid/net/IConnectivityManager$Stub$Proxy;->getActiveNetworkQuotaInfo()
Landroid/net/IConnectivityManager$Stub$Proxy;->getAlwaysOnVpnPackage(I)
Landroid/net/IConnectivityManager$Stub$Proxy;->getDefaultNetworkCapabilitiesForUser(ILjava/lang/String;)
Landroid/net/IConnectivityManager$Stub$Proxy;->getLegacyVpnInfo(I)
Landroid/net/IConnectivityManager$Stub$Proxy;->getMobileProvisioningUrl()
Landroid/net/IConnectivityManager$Stub$Proxy;->getNetworkCapabilities(Landroid/net/Network;Ljava/lang/String;)
Landroid/net/IConnectivityManager$Stub$Proxy;->getVpnConfig(I)
Landroid/net/IConnectivityManager$Stub$Proxy;->getVpnLockdownWhitelist(I)
Landroid/net/IConnectivityManager$Stub$Proxy;->isAlwaysOnVpnPackageSupported(ILjava/lang/String;)
Landroid/net/IConnectivityManager$Stub$Proxy;->isCallerCurrentAlwaysOnVpnApp()
Landroid/net/IConnectivityManager$Stub$Proxy;->isCallerCurrentAlwaysOnVpnLockdownApp()
Landroid/net/IConnectivityManager$Stub$Proxy;->isVpnLockdownEnabled(I)
Landroid/net/IConnectivityManager$Stub$Proxy;->listenForNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;Landroid/os/IBinder;Ljava/lang/String;)
Landroid/net/IConnectivityManager$Stub$Proxy;->pendingListenForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;Ljava/lang/String;)
Landroid/net/IConnectivityManager$Stub$Proxy;->pendingRequestForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;Ljava/lang/String;)
Landroid/net/IConnectivityManager$Stub$Proxy;->prepareVpn(Ljava/lang/String;Ljava/lang/String;I)
Landroid/net/IConnectivityManager$Stub$Proxy;->provisionVpnProfile(Lcom/android/internal/net/VpnProfile;Ljava/lang/String;)
Landroid/net/IConnectivityManager$Stub$Proxy;->registerNetworkAgent(Landroid/os/Messenger;Landroid/net/NetworkInfo;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;ILandroid/net/NetworkAgentConfig;I)
Landroid/net/IConnectivityManager$Stub$Proxy;->registerNetworkFactory(Landroid/os/Messenger;Ljava/lang/String;)
Landroid/net/IConnectivityManager$Stub$Proxy;->removeVpnAddress(Ljava/lang/String;I)
Landroid/net/IConnectivityManager$Stub$Proxy;->requestNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;ILandroid/os/IBinder;ILjava/lang/String;)
Landroid/net/IConnectivityManager$Stub$Proxy;->requestRouteToHostAddress(I[B)
Landroid/net/IConnectivityManager$Stub$Proxy;->setAlwaysOnVpnPackage(ILjava/lang/String;ZLjava/util/List;)
Landroid/net/IConnectivityManager$Stub$Proxy;->setUnderlyingNetworksForVpn([Landroid/net/Network;)
Landroid/net/IConnectivityManager$Stub$Proxy;->setVpnPackageAuthorization(Ljava/lang/String;II)
Landroid/net/IConnectivityManager$Stub$Proxy;->startLegacyVpn(Lcom/android/internal/net/VpnProfile;)
Landroid/net/IConnectivityManager$Stub$Proxy;->startNattKeepaliveWithFd(Landroid/net/Network;Ljava/io/FileDescriptor;IILandroid/net/ISocketKeepaliveCallback;Ljava/lang/String;Ljava/lang/String;)
Landroid/net/IConnectivityManager$Stub$Proxy;->startTcpKeepalive(Landroid/net/Network;Ljava/io/FileDescriptor;ILandroid/net/ISocketKeepaliveCallback;)
Landroid/net/IConnectivityManager$Stub$Proxy;->startVpnProfile(Ljava/lang/String;)
Landroid/net/IConnectivityManager$Stub$Proxy;->stopVpnProfile(Ljava/lang/String;)
Landroid/net/IConnectivityManager$Stub$Proxy;->unregisterNetworkFactory(Landroid/os/Messenger;)
Landroid/net/IConnectivityManager$Stub$Proxy;->updateLockdownVpn()
Landroid/net/INetworkManagementEventObserver;->interfaceClassDataActivityChanged(Ljava/lang/String;ZJ)
Landroid/net/INetworkManagementEventObserver$Default;->interfaceClassDataActivityChanged(Ljava/lang/String;ZJ)
Landroid/net/INetworkManagementEventObserver$Stub$Proxy;->interfaceClassDataActivityChanged(Ljava/lang/String;ZJ)
Landroid/net/INetworkPolicyListener;->onSubscriptionOverride(III)
Landroid/net/INetworkPolicyListener$Default;->onSubscriptionOverride(III)
Landroid/net/INetworkPolicyListener$Stub$Proxy;->onSubscriptionOverride(III)
Landroid/net/INetworkPolicyManager;->getNetworkQuotaInfo(Landroid/net/NetworkState;)
Landroid/net/INetworkPolicyManager;->setSubscriptionOverride(IIIJLjava/lang/String;)
Landroid/net/INetworkPolicyManager$Default;->getNetworkQuotaInfo(Landroid/net/NetworkState;)
Landroid/net/INetworkPolicyManager$Default;->setSubscriptionOverride(IIIJLjava/lang/String;)
Landroid/net/INetworkPolicyManager$Stub$Proxy;->getNetworkQuotaInfo(Landroid/net/NetworkState;)
Landroid/net/INetworkPolicyManager$Stub$Proxy;->setSubscriptionOverride(IIIJLjava/lang/String;)
Landroid/net/INetworkStatsService;->forceUpdateIfaces([Landroid/net/Network;[Landroid/net/NetworkState;Ljava/lang/String;[Lcom/android/internal/net/VpnInfo;)
Landroid/net/INetworkStatsService$Default;->forceUpdateIfaces([Landroid/net/Network;[Landroid/net/NetworkState;Ljava/lang/String;[Lcom/android/internal/net/VpnInfo;)
Landroid/net/INetworkStatsService$Stub$Proxy;->forceUpdateIfaces([Landroid/net/Network;[Landroid/net/NetworkState;Ljava/lang/String;[Lcom/android/internal/net/VpnInfo;)
Landroid/net/ISocketKeepaliveCallback$Stub;->getDefaultTransactionName(I)
Landroid/net/ISocketKeepaliveCallback$Stub;->getTransactionName(I)
Landroid/net/ITestNetworkManager$Stub;->getDefaultTransactionName(I)
Landroid/net/ITestNetworkManager$Stub;->getTransactionName(I)
Landroid/net/ITetheringConnector;->isTetheringSupported(Ljava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector;->requestLatestTetheringEntitlementResult(ILandroid/os/ResultReceiver;ZLjava/lang/String;)
Landroid/net/ITetheringConnector;->setUsbTethering(ZLjava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector;->startTethering(Landroid/net/TetheringRequestParcel;Ljava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector;->stopAllTethering(Ljava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector;->stopTethering(ILjava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector;->tether(Ljava/lang/String;Ljava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector;->untether(Ljava/lang/String;Ljava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector$Default;->isTetheringSupported(Ljava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector$Default;->requestLatestTetheringEntitlementResult(ILandroid/os/ResultReceiver;ZLjava/lang/String;)
Landroid/net/ITetheringConnector$Default;->setUsbTethering(ZLjava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector$Default;->startTethering(Landroid/net/TetheringRequestParcel;Ljava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector$Default;->stopAllTethering(Ljava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector$Default;->stopTethering(ILjava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector$Default;->tether(Ljava/lang/String;Ljava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector$Default;->untether(Ljava/lang/String;Ljava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector$Stub$Proxy;->isTetheringSupported(Ljava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector$Stub$Proxy;->requestLatestTetheringEntitlementResult(ILandroid/os/ResultReceiver;ZLjava/lang/String;)
Landroid/net/ITetheringConnector$Stub$Proxy;->setUsbTethering(ZLjava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector$Stub$Proxy;->startTethering(Landroid/net/TetheringRequestParcel;Ljava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector$Stub$Proxy;->stopAllTethering(Ljava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector$Stub$Proxy;->stopTethering(ILjava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector$Stub$Proxy;->tether(Ljava/lang/String;Ljava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/ITetheringConnector$Stub$Proxy;->untether(Ljava/lang/String;Ljava/lang/String;Landroid/net/IIntResultListener;)
Landroid/net/Ikev2VpnProfile;->fromVpnProfile(Lcom/android/internal/net/VpnProfile;Landroid/security/KeyStore;)
Landroid/net/IpSecTransform;->startNattKeepalive(Landroid/net/IpSecTransform$NattKeepaliveCallback;ILandroid/os/Handler;)
Landroid/net/IpSecTransform;->stopNattKeepalive()
Landroid/net/LinkProperties;->compareAllInterfaceNames(Landroid/net/LinkProperties;)
Landroid/net/LinkProperties;->compareAllRoutes(Landroid/net/LinkProperties;)
Landroid/net/LinkProperties;->compareDnses(Landroid/net/LinkProperties;)
Landroid/net/LinkProperties;->compareValidatedPrivateDnses(Landroid/net/LinkProperties;)
Landroid/net/MatchAllNetworkSpecifier;->checkNotMatchAllNetworkSpecifier(Landroid/net/NetworkSpecifier;)
Landroid/net/MatchAllNetworkSpecifier;->satisfiedBy(Landroid/net/NetworkSpecifier;)
Landroid/net/Network;->dumpDebug(Landroid/util/proto/ProtoOutputStream;J)
Landroid/net/Network;->maybeInitUrlConnectionFactory()
Landroid/net/NetworkAgent;-><init>(Landroid/os/Looper;Landroid/content/Context;Ljava/lang/String;Landroid/net/NetworkCapabilities;Landroid/net/LinkProperties;ILandroid/net/NetworkAgentConfig;ILandroid/net/NetworkInfo;Z)
Landroid/net/NetworkAgent;-><init>(Landroid/os/Looper;Landroid/content/Context;Ljava/lang/String;Landroid/net/NetworkInfo;Landroid/net/NetworkCapabilities;Landroid/net/LinkProperties;I)
Landroid/net/NetworkAgent;-><init>(Landroid/os/Looper;Landroid/content/Context;Ljava/lang/String;Landroid/net/NetworkInfo;Landroid/net/NetworkCapabilities;Landroid/net/LinkProperties;ILandroid/net/NetworkAgentConfig;)
Landroid/net/NetworkAgent;-><init>(Landroid/os/Looper;Landroid/content/Context;Ljava/lang/String;Landroid/net/NetworkInfo;Landroid/net/NetworkCapabilities;Landroid/net/LinkProperties;ILandroid/net/NetworkAgentConfig;I)
Landroid/net/NetworkAgent;-><init>(Landroid/os/Looper;Landroid/content/Context;Ljava/lang/String;Landroid/net/NetworkInfo;Landroid/net/NetworkCapabilities;Landroid/net/LinkProperties;II)
Landroid/net/NetworkAgent;->queueOrSendMessage(Landroid/os/Message;)
Landroid/net/NetworkAgent;->queueOrSendMessage(III)
Landroid/net/NetworkAgent;->queueOrSendMessage(IIILjava/lang/Object;)
Landroid/net/NetworkAgent;->queueOrSendMessage(ILjava/lang/Object;)
Landroid/net/NetworkAgent$InitialConfiguration;-><init>(Landroid/content/Context;Landroid/net/NetworkCapabilities;Landroid/net/LinkProperties;ILandroid/net/NetworkAgentConfig;Landroid/net/NetworkInfo;)
Landroid/net/NetworkAgentConfig$Builder;->disableNat64Detection()
Landroid/net/NetworkAgentConfig$Builder;->disableProvisioningNotification()
Landroid/net/NetworkCapabilities;->addUnwantedCapability(I)
Landroid/net/NetworkCapabilities;->deduceRestrictedCapability()
Landroid/net/NetworkCapabilities;->dumpDebug(Landroid/util/proto/ProtoOutputStream;J)
Landroid/net/NetworkCapabilities;->getUnwantedCapabilities()
Landroid/net/NetworkCapabilities;->hasUnwantedCapability(I)
Landroid/net/NetworkIdentity;-><init>(IILjava/lang/String;Ljava/lang/String;ZZZ)
Landroid/net/NetworkIdentity;->buildNetworkIdentity(Landroid/content/Context;Landroid/net/NetworkState;ZI)
Landroid/net/NetworkIdentity;->scrubSubscriberId(Ljava/lang/String;)
Landroid/net/NetworkIdentity;->scrubSubscriberId([Ljava/lang/String;)
Landroid/net/NetworkPolicyManager;->isProcStateAllowedWhileIdleOrPowerSaveMode(I)
Landroid/net/NetworkPolicyManager;->setSubscriptionOverride(IIIJLjava/lang/String;)
Landroid/net/NetworkPolicyManager$Listener;->onSubscriptionOverride(III)
Landroid/net/NetworkPolicyManager$SubscriptionCallback;->onSubscriptionOverride(III)
Landroid/net/NetworkPolicyManager$SubscriptionCallbackProxy;->onSubscriptionOverride(III)
Landroid/net/NetworkRequest;->dumpDebug(Landroid/util/proto/ProtoOutputStream;J)
Landroid/net/NetworkRequest;->hasUnwantedCapability(I)
Landroid/net/NetworkRequest;->isForegroundRequest()
Landroid/net/NetworkRequest;->typeToProtoEnum(Landroid/net/NetworkRequest$Type;)
Landroid/net/NetworkRequest$Builder;->addUnwantedCapability(I)
Landroid/net/NetworkStack;->checkAnyPermissionOf(Landroid/content/Context;[Ljava/lang/String;)
Landroid/net/NetworkStack;->enforceAnyPermissionOf(Landroid/content/Context;[Ljava/lang/String;)
Landroid/net/NetworkState;-><init>(Landroid/net/NetworkInfo;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;Landroid/net/Network;Ljava/lang/String;Ljava/lang/String;)
Landroid/net/NetworkStats;->addTrafficToApplications(ILjava/lang/String;[Ljava/lang/String;Landroid/net/NetworkStats$Entry;[Landroid/net/NetworkStats$Entry;Landroid/net/NetworkStats$Entry;)
Landroid/net/NetworkStats;->deductTrafficFromVpnApp(I[Ljava/lang/String;[Landroid/net/NetworkStats$Entry;)
Landroid/net/NetworkStats;->migrateTun(ILjava/lang/String;[Ljava/lang/String;)
Landroid/net/NetworkStats;->tunAdjustmentInit(ILjava/lang/String;[Ljava/lang/String;Landroid/net/NetworkStats$Entry;[Landroid/net/NetworkStats$Entry;Landroid/net/NetworkStats$Entry;)
Landroid/net/NetworkStatsHistory;-><init>(Ljava/io/DataInputStream;)
Landroid/net/NetworkStatsHistory;->writeToStream(Ljava/io/DataOutputStream;)
Landroid/net/NetworkStatsHistory$DataStreamUtils;->readFullLongArray(Ljava/io/DataInputStream;)
Landroid/net/NetworkStatsHistory$DataStreamUtils;->readVarLong(Ljava/io/DataInputStream;)
Landroid/net/NetworkStatsHistory$DataStreamUtils;->readVarLongArray(Ljava/io/DataInputStream;)
Landroid/net/NetworkStatsHistory$DataStreamUtils;->writeVarLong(Ljava/io/DataOutputStream;J)
Landroid/net/NetworkStatsHistory$DataStreamUtils;->writeVarLongArray(Ljava/io/DataOutputStream;[JI)
Landroid/net/NetworkTemplate;-><init>(ILjava/lang/String;[Ljava/lang/String;Ljava/lang/String;IIII)
Landroid/net/NetworkUtils;->bindSocketToNetwork(II)
Landroid/net/NetworkUtils;->getNetworkPart(Ljava/net/InetAddress;I)
Landroid/net/NetworkUtils;->isWeaklyValidatedHostname(Ljava/lang/String;)
Landroid/net/NetworkUtils;->makeStrings(Ljava/util/Collection;)
Landroid/net/NetworkUtils;->maskRawAddress([BI)
Landroid/net/NetworkUtils;->protectFromVpn(I)
Landroid/net/NetworkUtils;->protectFromVpn(Ljava/io/FileDescriptor;)
Landroid/net/Proxy;->setHttpProxySystemProperty(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)
Landroid/net/Proxy;->validate(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Landroid/net/ProxyInfo;-><init>(Ljava/lang/String;)
Landroid/net/RouteInfo$RouteKey;-><init>(Landroid/net/IpPrefix;Ljava/net/InetAddress;)
Landroid/net/SntpClient;->checkValidServerReply(BBIJ)
Landroid/net/UidRange;->createForUser(I)
Landroid/net/VpnManager;-><init>(Landroid/content/Context;Landroid/net/IConnectivityManager;)
Landroid/net/netstats/provider/INetworkStatsProvider;->onSetLimit(Ljava/lang/String;J)
Landroid/net/netstats/provider/INetworkStatsProvider$Default;->onSetLimit(Ljava/lang/String;J)
Landroid/net/netstats/provider/INetworkStatsProvider$Stub$Proxy;->onSetLimit(Ljava/lang/String;J)
Landroid/net/netstats/provider/INetworkStatsProviderCallback;->notifyLimitReached()
Landroid/net/netstats/provider/INetworkStatsProviderCallback$Default;->notifyLimitReached()
Landroid/net/netstats/provider/INetworkStatsProviderCallback$Stub$Proxy;->notifyLimitReached()
Landroid/net/rtp/AudioGroup;->nativeAdd(IILjava/lang/String;ILjava/lang/String;ILjava/lang/String;)
Landroid/net/shared/Inet4AddressUtils;-><init>()
Landroid/net/shared/Inet4AddressUtils;->getBroadcastAddress(Ljava/net/Inet4Address;I)
Landroid/net/shared/Inet4AddressUtils;->getImplicitNetmask(Ljava/net/Inet4Address;)
Landroid/net/shared/Inet4AddressUtils;->getPrefixMaskAsInet4Address(I)
Landroid/net/shared/Inet4AddressUtils;->inet4AddressToIntHTH(Ljava/net/Inet4Address;)
Landroid/net/shared/Inet4AddressUtils;->inet4AddressToIntHTL(Ljava/net/Inet4Address;)
Landroid/net/shared/Inet4AddressUtils;->intToInet4AddressHTH(I)
Landroid/net/shared/Inet4AddressUtils;->intToInet4AddressHTL(I)
Landroid/net/shared/Inet4AddressUtils;->netmaskToPrefixLength(Ljava/net/Inet4Address;)
Landroid/net/shared/Inet4AddressUtils;->prefixLengthToV4NetmaskIntHTH(I)
Landroid/net/shared/Inet4AddressUtils;->prefixLengthToV4NetmaskIntHTL(I)
Landroid/net/shared/InetAddressUtils;-><init>()
Landroid/net/shared/InetAddressUtils;->parcelInetAddress(Landroid/os/Parcel;Ljava/net/InetAddress;I)
Landroid/net/shared/InetAddressUtils;->unparcelInetAddress(Landroid/os/Parcel;)
Landroid/net/util/IpRange;-><init>(Landroid/net/IpPrefix;)
Landroid/net/util/IpRange;-><init>(Ljava/net/InetAddress;Ljava/net/InetAddress;)
Landroid/net/util/IpRange;->addrToBigInteger([B)
Landroid/net/util/IpRange;->asIpPrefixes()
Landroid/net/util/IpRange;->containsRange(Landroid/net/util/IpRange;)
Landroid/net/util/IpRange;->equals(Ljava/lang/Object;)
Landroid/net/util/IpRange;->getAsInetAddress([B)
Landroid/net/util/IpRange;->getEndAddr()
Landroid/net/util/IpRange;->getStartAddr()
Landroid/net/util/IpRange;->getSubsetPrefixes(Landroid/net/IpPrefix;)
Landroid/net/util/IpRange;->hashCode()
Landroid/net/util/IpRange;->overlapsRange(Landroid/net/util/IpRange;)
Landroid/net/util/IpUtils;-><init>()
Landroid/net/util/IpUtils;->addressAndPortToString(Ljava/net/InetAddress;I)
Landroid/net/util/IpUtils;->checksum(Ljava/nio/ByteBuffer;III)
Landroid/net/util/IpUtils;->intAbs(S)
Landroid/net/util/IpUtils;->ipChecksum(Ljava/nio/ByteBuffer;I)
Landroid/net/util/IpUtils;->ipversion(Ljava/nio/ByteBuffer;I)
Landroid/net/util/IpUtils;->isValidUdpOrTcpPort(I)
Landroid/net/util/IpUtils;->pseudoChecksumIPv4(Ljava/nio/ByteBuffer;III)
Landroid/net/util/IpUtils;->pseudoChecksumIPv6(Ljava/nio/ByteBuffer;III)
Landroid/net/util/IpUtils;->tcpChecksum(Ljava/nio/ByteBuffer;III)
Landroid/net/util/IpUtils;->transportChecksum(Ljava/nio/ByteBuffer;IIII)
Landroid/net/util/IpUtils;->udpChecksum(Ljava/nio/ByteBuffer;II)
Landroid/net/util/LinkPropertiesUtils;-><init>()
Landroid/net/util/LinkPropertiesUtils;->compareAddresses(Landroid/net/LinkProperties;Landroid/net/LinkProperties;)
Landroid/net/util/LinkPropertiesUtils;->isIdenticalAddresses(Landroid/net/LinkProperties;Landroid/net/LinkProperties;)
Landroid/net/util/LinkPropertiesUtils;->isIdenticalDnses(Landroid/net/LinkProperties;Landroid/net/LinkProperties;)
Landroid/net/util/LinkPropertiesUtils;->isIdenticalHttpProxy(Landroid/net/LinkProperties;Landroid/net/LinkProperties;)
Landroid/net/util/LinkPropertiesUtils;->isIdenticalInterfaceName(Landroid/net/LinkProperties;Landroid/net/LinkProperties;)
Landroid/net/util/LinkPropertiesUtils;->isIdenticalRoutes(Landroid/net/LinkProperties;Landroid/net/LinkProperties;)
Landroid/net/util/LinkPropertiesUtils$CompareOrUpdateResult;-><init>(Ljava/util/Collection;Ljava/util/Collection;Ljava/util/function/Function;)
Landroid/net/util/LinkPropertiesUtils$CompareOrUpdateResult;->toString()
Landroid/net/util/LinkPropertiesUtils$CompareResult;-><init>()
Landroid/net/util/LinkPropertiesUtils$CompareResult;-><init>(Ljava/util/Collection;Ljava/util/Collection;)
Landroid/net/util/LinkPropertiesUtils$CompareResult;->toString()
Landroid/net/util/MacAddressUtils;-><init>()
Landroid/net/util/MacAddressUtils;->byteAddrFromLongAddr(J)
Landroid/net/util/MacAddressUtils;->createRandomUnicastAddress()
Landroid/net/util/MacAddressUtils;->createRandomUnicastAddress(Landroid/net/MacAddress;Ljava/util/Random;)
Landroid/net/util/MacAddressUtils;->isMacAddress([B)
Landroid/net/util/MacAddressUtils;->isMulticastAddress(Landroid/net/MacAddress;)
Landroid/net/util/MacAddressUtils;->longAddrFromByteAddr([B)
Landroid/net/util/NetUtils;-><init>()
Landroid/net/util/NetUtils;->addressTypeMatches(Ljava/net/InetAddress;Ljava/net/InetAddress;)
Landroid/net/util/NetUtils;->selectBestRoute(Ljava/util/Collection;Ljava/net/InetAddress;)
Landroid/net/util/nsd/DnsSdTxtRecord;-><init>()
Landroid/net/util/nsd/DnsSdTxtRecord;-><init>(Landroid/net/util/nsd/DnsSdTxtRecord;)
Landroid/net/util/nsd/DnsSdTxtRecord;-><init>([B)
Landroid/net/util/nsd/DnsSdTxtRecord;->contains(Ljava/lang/String;)
Landroid/net/util/nsd/DnsSdTxtRecord;->describeContents()
Landroid/net/util/nsd/DnsSdTxtRecord;->equals(Ljava/lang/Object;)
Landroid/net/util/nsd/DnsSdTxtRecord;->get(Ljava/lang/String;)
Landroid/net/util/nsd/DnsSdTxtRecord;->getKey(I)
Landroid/net/util/nsd/DnsSdTxtRecord;->getRawData()
Landroid/net/util/nsd/DnsSdTxtRecord;->getValue(I)
Landroid/net/util/nsd/DnsSdTxtRecord;->getValue(Ljava/lang/String;)
Landroid/net/util/nsd/DnsSdTxtRecord;->getValueAsString(I)
Landroid/net/util/nsd/DnsSdTxtRecord;->hashCode()
Landroid/net/util/nsd/DnsSdTxtRecord;->insert([B[BI)
Landroid/net/util/nsd/DnsSdTxtRecord;->keyCount()
Landroid/net/util/nsd/DnsSdTxtRecord;->remove(Ljava/lang/String;)
Landroid/net/util/nsd/DnsSdTxtRecord;->set(Ljava/lang/String;Ljava/lang/String;)
Landroid/net/util/nsd/DnsSdTxtRecord;->size()
Landroid/net/util/nsd/DnsSdTxtRecord;->toString()
Landroid/net/util/nsd/DnsSdTxtRecord;->writeToParcel(Landroid/os/Parcel;I)
Landroid/net/wifi/ISoftApCallback;->onConnectedClientsChanged(Ljava/util/List;)
Landroid/net/wifi/ISoftApCallback;->onInfoChanged(Landroid/net/wifi/SoftApInfo;)
Landroid/net/wifi/ISoftApCallback$Default;->onConnectedClientsChanged(Ljava/util/List;)
Landroid/net/wifi/ISoftApCallback$Default;->onInfoChanged(Landroid/net/wifi/SoftApInfo;)
Landroid/net/wifi/ISoftApCallback$Stub$Proxy;->onConnectedClientsChanged(Ljava/util/List;)
Landroid/net/wifi/ISoftApCallback$Stub$Proxy;->onInfoChanged(Landroid/net/wifi/SoftApInfo;)
Landroid/net/wifi/ITxPacketCountListener;->onFailure(I)
Landroid/net/wifi/ITxPacketCountListener;->onSuccess(I)
Landroid/net/wifi/ITxPacketCountListener$Default;-><init>()
Landroid/net/wifi/ITxPacketCountListener$Default;->asBinder()
Landroid/net/wifi/ITxPacketCountListener$Default;->onFailure(I)
Landroid/net/wifi/ITxPacketCountListener$Default;->onSuccess(I)
Landroid/net/wifi/ITxPacketCountListener$Stub;-><init>()
Landroid/net/wifi/ITxPacketCountListener$Stub;->asBinder()
Landroid/net/wifi/ITxPacketCountListener$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/net/wifi/ITxPacketCountListener$Stub;->getDefaultImpl()
Landroid/net/wifi/ITxPacketCountListener$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/net/wifi/ITxPacketCountListener$Stub;->setDefaultImpl(Landroid/net/wifi/ITxPacketCountListener;)
Landroid/net/wifi/ITxPacketCountListener$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/net/wifi/ITxPacketCountListener$Stub$Proxy;->asBinder()
Landroid/net/wifi/ITxPacketCountListener$Stub$Proxy;->getInterfaceDescriptor()
Landroid/net/wifi/ITxPacketCountListener$Stub$Proxy;->onFailure(I)
Landroid/net/wifi/ITxPacketCountListener$Stub$Proxy;->onSuccess(I)
Landroid/net/wifi/IWifiConnectedNetworkScorer;->onStart(I)
Landroid/net/wifi/IWifiConnectedNetworkScorer$Default;->onStart(I)
Landroid/net/wifi/IWifiConnectedNetworkScorer$Stub$Proxy;->onStart(I)
Landroid/net/wifi/IWifiManager;->addOnWifiUsabilityStatsListener(Landroid/os/IBinder;Landroid/net/wifi/IOnWifiUsabilityStatsListener;I)
Landroid/net/wifi/IWifiManager;->connect(Landroid/net/wifi/WifiConfiguration;ILandroid/os/IBinder;Landroid/net/wifi/IActionListener;I)
Landroid/net/wifi/IWifiManager;->deauthenticateNetwork(JZ)
Landroid/net/wifi/IWifiManager;->forget(ILandroid/os/IBinder;Landroid/net/wifi/IActionListener;I)
Landroid/net/wifi/IWifiManager;->getConfiguredNetworks(Ljava/lang/String;Ljava/lang/String;)
Landroid/net/wifi/IWifiManager;->getDhcpInfo()
Landroid/net/wifi/IWifiManager;->registerNetworkRequestMatchCallback(Landroid/os/IBinder;Landroid/net/wifi/INetworkRequestMatchCallback;I)
Landroid/net/wifi/IWifiManager;->registerSoftApCallback(Landroid/os/IBinder;Landroid/net/wifi/ISoftApCallback;I)
Landroid/net/wifi/IWifiManager;->registerSuggestionConnectionStatusListener(Landroid/os/IBinder;Landroid/net/wifi/ISuggestionConnectionStatusListener;ILjava/lang/String;Ljava/lang/String;)
Landroid/net/wifi/IWifiManager;->registerTrafficStateCallback(Landroid/os/IBinder;Landroid/net/wifi/ITrafficStateCallback;I)
Landroid/net/wifi/IWifiManager;->removeOnWifiUsabilityStatsListener(I)
Landroid/net/wifi/IWifiManager;->save(Landroid/net/wifi/WifiConfiguration;Landroid/os/IBinder;Landroid/net/wifi/IActionListener;I)
Landroid/net/wifi/IWifiManager;->setScanAlwaysAvailable(Z)
Landroid/net/wifi/IWifiManager;->startDppAsConfiguratorInitiator(Landroid/os/IBinder;Ljava/lang/String;IILandroid/net/wifi/IDppCallback;)
Landroid/net/wifi/IWifiManager;->startSoftAp(Landroid/net/wifi/WifiConfiguration;)
Landroid/net/wifi/IWifiManager;->startTetheredHotspot(Landroid/net/wifi/SoftApConfiguration;)
Landroid/net/wifi/IWifiManager;->unregisterNetworkRequestMatchCallback(I)
Landroid/net/wifi/IWifiManager;->unregisterSoftApCallback(I)
Landroid/net/wifi/IWifiManager;->unregisterSuggestionConnectionStatusListener(ILjava/lang/String;)
Landroid/net/wifi/IWifiManager;->unregisterTrafficStateCallback(I)
Landroid/net/wifi/IWifiManager$Default;->addOnWifiUsabilityStatsListener(Landroid/os/IBinder;Landroid/net/wifi/IOnWifiUsabilityStatsListener;I)
Landroid/net/wifi/IWifiManager$Default;->connect(Landroid/net/wifi/WifiConfiguration;ILandroid/os/IBinder;Landroid/net/wifi/IActionListener;I)
Landroid/net/wifi/IWifiManager$Default;->deauthenticateNetwork(JZ)
Landroid/net/wifi/IWifiManager$Default;->forget(ILandroid/os/IBinder;Landroid/net/wifi/IActionListener;I)
Landroid/net/wifi/IWifiManager$Default;->getConfiguredNetworks(Ljava/lang/String;Ljava/lang/String;)
Landroid/net/wifi/IWifiManager$Default;->getDhcpInfo()
Landroid/net/wifi/IWifiManager$Default;->registerNetworkRequestMatchCallback(Landroid/os/IBinder;Landroid/net/wifi/INetworkRequestMatchCallback;I)
Landroid/net/wifi/IWifiManager$Default;->registerSoftApCallback(Landroid/os/IBinder;Landroid/net/wifi/ISoftApCallback;I)
Landroid/net/wifi/IWifiManager$Default;->registerSuggestionConnectionStatusListener(Landroid/os/IBinder;Landroid/net/wifi/ISuggestionConnectionStatusListener;ILjava/lang/String;Ljava/lang/String;)
Landroid/net/wifi/IWifiManager$Default;->registerTrafficStateCallback(Landroid/os/IBinder;Landroid/net/wifi/ITrafficStateCallback;I)
Landroid/net/wifi/IWifiManager$Default;->removeOnWifiUsabilityStatsListener(I)
Landroid/net/wifi/IWifiManager$Default;->save(Landroid/net/wifi/WifiConfiguration;Landroid/os/IBinder;Landroid/net/wifi/IActionListener;I)
Landroid/net/wifi/IWifiManager$Default;->setScanAlwaysAvailable(Z)
Landroid/net/wifi/IWifiManager$Default;->startDppAsConfiguratorInitiator(Landroid/os/IBinder;Ljava/lang/String;IILandroid/net/wifi/IDppCallback;)
Landroid/net/wifi/IWifiManager$Default;->startSoftAp(Landroid/net/wifi/WifiConfiguration;)
Landroid/net/wifi/IWifiManager$Default;->startTetheredHotspot(Landroid/net/wifi/SoftApConfiguration;)
Landroid/net/wifi/IWifiManager$Default;->unregisterNetworkRequestMatchCallback(I)
Landroid/net/wifi/IWifiManager$Default;->unregisterSoftApCallback(I)
Landroid/net/wifi/IWifiManager$Default;->unregisterSuggestionConnectionStatusListener(ILjava/lang/String;)
Landroid/net/wifi/IWifiManager$Default;->unregisterTrafficStateCallback(I)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->addOnWifiUsabilityStatsListener(Landroid/os/IBinder;Landroid/net/wifi/IOnWifiUsabilityStatsListener;I)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->connect(Landroid/net/wifi/WifiConfiguration;ILandroid/os/IBinder;Landroid/net/wifi/IActionListener;I)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->deauthenticateNetwork(JZ)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->forget(ILandroid/os/IBinder;Landroid/net/wifi/IActionListener;I)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->getConfiguredNetworks(Ljava/lang/String;Ljava/lang/String;)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->getDhcpInfo()
Landroid/net/wifi/IWifiManager$Stub$Proxy;->registerNetworkRequestMatchCallback(Landroid/os/IBinder;Landroid/net/wifi/INetworkRequestMatchCallback;I)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->registerSoftApCallback(Landroid/os/IBinder;Landroid/net/wifi/ISoftApCallback;I)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->registerSuggestionConnectionStatusListener(Landroid/os/IBinder;Landroid/net/wifi/ISuggestionConnectionStatusListener;ILjava/lang/String;Ljava/lang/String;)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->registerTrafficStateCallback(Landroid/os/IBinder;Landroid/net/wifi/ITrafficStateCallback;I)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->removeOnWifiUsabilityStatsListener(I)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->save(Landroid/net/wifi/WifiConfiguration;Landroid/os/IBinder;Landroid/net/wifi/IActionListener;I)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->setScanAlwaysAvailable(Z)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->startDppAsConfiguratorInitiator(Landroid/os/IBinder;Ljava/lang/String;IILandroid/net/wifi/IDppCallback;)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->startSoftAp(Landroid/net/wifi/WifiConfiguration;)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->startTetheredHotspot(Landroid/net/wifi/SoftApConfiguration;)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->unregisterNetworkRequestMatchCallback(I)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->unregisterSoftApCallback(I)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->unregisterSuggestionConnectionStatusListener(ILjava/lang/String;)
Landroid/net/wifi/IWifiManager$Stub$Proxy;->unregisterTrafficStateCallback(I)
Landroid/net/wifi/ScanResult;->convertChannelToFrequencyMhz(II)
Landroid/net/wifi/ScanResult;->convertFrequencyMhzToChannel(I)
Landroid/net/wifi/SoftApConfiguration;-><init>(Ljava/lang/String;Landroid/net/MacAddress;Ljava/lang/String;ZIIIIZJZLjava/util/List;Ljava/util/List;)
Landroid/net/wifi/SoftApConfiguration;-><init>(Ljava/lang/String;Landroid/net/MacAddress;Ljava/lang/String;ZIIIIZJZLjava/util/List;Ljava/util/List;Landroid/net/wifi/SoftApConfiguration$1;)
Landroid/net/wifi/WifiClient;-><init>(Landroid/net/MacAddress;)
Landroid/net/wifi/WifiConfiguration$RecentFailure;->setAssociationStatus(I)
Landroid/net/wifi/WifiEnterpriseConfig;->isInsecure()
Landroid/net/wifi/WifiManager;->deauthenticateNetwork(JZ)
Landroid/net/wifi/WifiManager;->isAdditionalStaSupported()
Landroid/net/wifi/WifiManager$SoftApCallbackProxy;->onConnectedClientsChanged(Ljava/util/List;)
Landroid/net/wifi/WifiManager$SoftApCallbackProxy;->onInfoChanged(Landroid/net/wifi/SoftApInfo;)
Landroid/net/wifi/WifiManager$WifiConnectedNetworkScorerProxy;->onStart(I)
Landroid/net/wifi/WifiNetworkAgentSpecifier;-><init>(Landroid/net/wifi/WifiConfiguration;)
Landroid/net/wifi/WifiNetworkSpecifier;-><init>(Landroid/os/PatternMatcher;Landroid/util/Pair;Landroid/net/wifi/WifiConfiguration;)
Landroid/net/wifi/WifiNetworkSuggestion;-><init>(Landroid/net/wifi/WifiConfiguration;Landroid/net/wifi/hotspot2/PasspointConfiguration;ZZZZ)
Landroid/net/wifi/WifiScanner$ScanData;->getBandScanned()
Landroid/net/wifi/WifiUsabilityStatsEntry;-><init>(JIIJJJJJJJJJJJJJJJJIIIIIIIZ)
Landroid/net/wifi/p2p/IWifiP2pManager;->getMessenger(Landroid/os/IBinder;)
Landroid/net/wifi/p2p/IWifiP2pManager$Default;->getMessenger(Landroid/os/IBinder;)
Landroid/net/wifi/p2p/IWifiP2pManager$Stub$Proxy;->getMessenger(Landroid/os/IBinder;)
Landroid/net/wifi/p2p/WifiP2pManager;->initalizeChannel(Landroid/content/Context;Landroid/os/Looper;Landroid/net/wifi/p2p/WifiP2pManager$ChannelListener;Landroid/os/Messenger;Landroid/os/Binder;)
Landroid/net/wifi/p2p/nsd/WifiP2pDnsSdServiceInfo;->createTxtServiceQuery(Ljava/lang/String;Ljava/lang/String;Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;)
Landroid/net/wifi/rtt/RangingRequest;-><init>(Ljava/util/List;)
Landroid/net/wifi/rtt/RangingRequest;-><init>(Ljava/util/List;Landroid/net/wifi/rtt/RangingRequest$1;)
Landroid/net/wifi/rtt/RangingResult;-><init>(ILandroid/net/MacAddress;IIIII[B[BLandroid/net/wifi/rtt/ResponderLocation;J)
Landroid/os/BasicShellCommandHandler;-><init>()
Landroid/os/BasicShellCommandHandler;->exec(Landroid/os/Binder;Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;[Ljava/lang/String;)
Landroid/os/BasicShellCommandHandler;->getAllArgs()
Landroid/os/BasicShellCommandHandler;->getBufferedInputStream()
Landroid/os/BasicShellCommandHandler;->getErrFileDescriptor()
Landroid/os/BasicShellCommandHandler;->getErrPrintWriter()
Landroid/os/BasicShellCommandHandler;->getInFileDescriptor()
Landroid/os/BasicShellCommandHandler;->getNextArg()
Landroid/os/BasicShellCommandHandler;->getNextArgRequired()
Landroid/os/BasicShellCommandHandler;->getNextOption()
Landroid/os/BasicShellCommandHandler;->getOutFileDescriptor()
Landroid/os/BasicShellCommandHandler;->getOutPrintWriter()
Landroid/os/BasicShellCommandHandler;->getRawErrorStream()
Landroid/os/BasicShellCommandHandler;->getRawInputStream()
Landroid/os/BasicShellCommandHandler;->getRawOutputStream()
Landroid/os/BasicShellCommandHandler;->getRemainingArgsCount()
Landroid/os/BasicShellCommandHandler;->getTarget()
Landroid/os/BasicShellCommandHandler;->handleDefaultCommands(Ljava/lang/String;)
Landroid/os/BasicShellCommandHandler;->init(Landroid/os/Binder;Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;[Ljava/lang/String;I)
Landroid/os/BasicShellCommandHandler;->onCommand(Ljava/lang/String;)
Landroid/os/BasicShellCommandHandler;->onHelp()
Landroid/os/BasicShellCommandHandler;->peekNextArg()
Landroid/os/BatteryStats;->finishIteratingOldHistoryLocked()
Landroid/os/BatteryStats;->getNextOldHistoryLocked(Landroid/os/BatteryStats$HistoryItem;)
Landroid/os/BatteryStats;->startIteratingOldHistoryLocked()
Landroid/os/Binder;->getFinalizer()
Landroid/os/BugreportManager$DumpstateListener;->onUiIntensiveBugreportDumpsFinished(Ljava/lang/String;)
Landroid/os/Debug;->cacheRegisterMap(Ljava/lang/String;)
Landroid/os/Debug;->getIonMappedSizeKb()
Landroid/os/FileBridge;->setTargetFile(Ljava/io/FileDescriptor;)
Landroid/os/FileBridge$FileBridgeOutputStream;-><init>(Ljava/io/FileDescriptor;)
Landroid/os/GraphicsEnvironment;->buildMap()
Landroid/os/GraphicsEnvironment;->checkAngleWhitelist(Landroid/content/Context;Landroid/os/Bundle;Ljava/lang/String;)
Landroid/os/GraphicsEnvironment;->getDriverForPkg(Landroid/content/Context;Landroid/os/Bundle;Ljava/lang/String;)
Landroid/os/GraphicsEnvironment;->getGlobalSettingsPkgIndex(Ljava/lang/String;Ljava/util/List;)
Landroid/os/GraphicsEnvironment;->setAngleInfo(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/io/FileDescriptor;JJ)
Landroid/os/GraphicsEnvironment;->setupAngleRulesApk(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;Landroid/content/pm/PackageManager;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Landroid/os/GraphicsEnvironment$OpenGlDriverChoice;-><init>(Ljava/lang/String;I)
Landroid/os/GraphicsEnvironment$OpenGlDriverChoice;->valueOf(Ljava/lang/String;)
Landroid/os/GraphicsEnvironment$OpenGlDriverChoice;->values()
Landroid/os/IDeviceIdleController;->addPowerSaveTempWhitelistApp(Ljava/lang/String;JILjava/lang/String;)
Landroid/os/IDeviceIdleController;->addPowerSaveTempWhitelistAppForMms(Ljava/lang/String;ILjava/lang/String;)
Landroid/os/IDeviceIdleController;->addPowerSaveTempWhitelistAppForSms(Ljava/lang/String;ILjava/lang/String;)
Landroid/os/IDeviceIdleController;->whitelistAppTemporarily(Ljava/lang/String;ILjava/lang/String;)
Landroid/os/IDeviceIdleController$Default;->addPowerSaveTempWhitelistApp(Ljava/lang/String;JILjava/lang/String;)
Landroid/os/IDeviceIdleController$Default;->addPowerSaveTempWhitelistAppForMms(Ljava/lang/String;ILjava/lang/String;)
Landroid/os/IDeviceIdleController$Default;->addPowerSaveTempWhitelistAppForSms(Ljava/lang/String;ILjava/lang/String;)
Landroid/os/IDeviceIdleController$Default;->whitelistAppTemporarily(Ljava/lang/String;ILjava/lang/String;)
Landroid/os/IDeviceIdleController$Stub$Proxy;->addPowerSaveTempWhitelistApp(Ljava/lang/String;JILjava/lang/String;)
Landroid/os/IDeviceIdleController$Stub$Proxy;->addPowerSaveTempWhitelistAppForMms(Ljava/lang/String;ILjava/lang/String;)
Landroid/os/IDeviceIdleController$Stub$Proxy;->addPowerSaveTempWhitelistAppForSms(Ljava/lang/String;ILjava/lang/String;)
Landroid/os/IDeviceIdleController$Stub$Proxy;->whitelistAppTemporarily(Ljava/lang/String;ILjava/lang/String;)
Landroid/os/IDumpstate;->cancelBugreport()
Landroid/os/IDumpstate$Default;->cancelBugreport()
Landroid/os/IDumpstate$Stub$Proxy;->cancelBugreport()
Landroid/os/IDumpstateListener;->onUiIntensiveBugreportDumpsFinished(Ljava/lang/String;)
Landroid/os/IDumpstateListener$Default;->onUiIntensiveBugreportDumpsFinished(Ljava/lang/String;)
Landroid/os/IDumpstateListener$Stub$Proxy;->onUiIntensiveBugreportDumpsFinished(Ljava/lang/String;)
Landroid/os/IInstalld;->createAppData(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)
Landroid/os/IInstalld;->createAppDataBatched([Ljava/lang/String;[Ljava/lang/String;II[I[Ljava/lang/String;[I)
Landroid/os/IInstalld$Default;->createAppData(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)
Landroid/os/IInstalld$Default;->createAppDataBatched([Ljava/lang/String;[Ljava/lang/String;II[I[Ljava/lang/String;[I)
Landroid/os/IInstalld$Stub$Proxy;->createAppData(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)
Landroid/os/IInstalld$Stub$Proxy;->createAppDataBatched([Ljava/lang/String;[Ljava/lang/String;II[I[Ljava/lang/String;[I)
Landroid/os/INetworkActivityListener;->onNetworkActive()
Landroid/os/INetworkActivityListener$Default;-><init>()
Landroid/os/INetworkActivityListener$Default;->asBinder()
Landroid/os/INetworkActivityListener$Default;->onNetworkActive()
Landroid/os/INetworkActivityListener$Stub;-><init>()
Landroid/os/INetworkActivityListener$Stub;->asBinder()
Landroid/os/INetworkActivityListener$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/os/INetworkActivityListener$Stub;->getDefaultImpl()
Landroid/os/INetworkActivityListener$Stub;->getDefaultTransactionName(I)
Landroid/os/INetworkActivityListener$Stub;->getTransactionName(I)
Landroid/os/INetworkActivityListener$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/os/INetworkActivityListener$Stub;->setDefaultImpl(Landroid/os/INetworkActivityListener;)
Landroid/os/INetworkActivityListener$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/os/INetworkActivityListener$Stub$Proxy;->asBinder()
Landroid/os/INetworkActivityListener$Stub$Proxy;->getInterfaceDescriptor()
Landroid/os/INetworkActivityListener$Stub$Proxy;->onNetworkActive()
Landroid/os/INetworkManagementService;->addIdleTimer(Ljava/lang/String;II)
Landroid/os/INetworkManagementService;->addInterfaceToNetwork(Ljava/lang/String;I)
Landroid/os/INetworkManagementService;->addLegacyRouteForNetId(ILandroid/net/RouteInfo;I)
Landroid/os/INetworkManagementService;->addVpnUidRanges(I[Landroid/net/UidRange;)
Landroid/os/INetworkManagementService;->clearDefaultNetId()
Landroid/os/INetworkManagementService;->isNetworkActive()
Landroid/os/INetworkManagementService;->registerNetworkActivityListener(Landroid/os/INetworkActivityListener;)
Landroid/os/INetworkManagementService;->removeIdleTimer(Ljava/lang/String;)
Landroid/os/INetworkManagementService;->removeInterfaceFromNetwork(Ljava/lang/String;I)
Landroid/os/INetworkManagementService;->removeVpnUidRanges(I[Landroid/net/UidRange;)
Landroid/os/INetworkManagementService;->setAllowOnlyVpnForUids(Z[Landroid/net/UidRange;)
Landroid/os/INetworkManagementService;->setDefaultNetId(I)
Landroid/os/INetworkManagementService;->setDnsForwarders(Landroid/net/Network;[Ljava/lang/String;)
Landroid/os/INetworkManagementService;->setMtu(Ljava/lang/String;I)
Landroid/os/INetworkManagementService;->setNetworkPermission(II)
Landroid/os/INetworkManagementService;->setUidMeteredNetworkBlacklist(IZ)
Landroid/os/INetworkManagementService;->setUidMeteredNetworkWhitelist(IZ)
Landroid/os/INetworkManagementService;->unregisterNetworkActivityListener(Landroid/os/INetworkActivityListener;)
Landroid/os/INetworkManagementService$Default;->addIdleTimer(Ljava/lang/String;II)
Landroid/os/INetworkManagementService$Default;->addInterfaceToNetwork(Ljava/lang/String;I)
Landroid/os/INetworkManagementService$Default;->addLegacyRouteForNetId(ILandroid/net/RouteInfo;I)
Landroid/os/INetworkManagementService$Default;->addVpnUidRanges(I[Landroid/net/UidRange;)
Landroid/os/INetworkManagementService$Default;->clearDefaultNetId()
Landroid/os/INetworkManagementService$Default;->isNetworkActive()
Landroid/os/INetworkManagementService$Default;->registerNetworkActivityListener(Landroid/os/INetworkActivityListener;)
Landroid/os/INetworkManagementService$Default;->removeIdleTimer(Ljava/lang/String;)
Landroid/os/INetworkManagementService$Default;->removeInterfaceFromNetwork(Ljava/lang/String;I)
Landroid/os/INetworkManagementService$Default;->removeVpnUidRanges(I[Landroid/net/UidRange;)
Landroid/os/INetworkManagementService$Default;->setAllowOnlyVpnForUids(Z[Landroid/net/UidRange;)
Landroid/os/INetworkManagementService$Default;->setDefaultNetId(I)
Landroid/os/INetworkManagementService$Default;->setDnsForwarders(Landroid/net/Network;[Ljava/lang/String;)
Landroid/os/INetworkManagementService$Default;->setMtu(Ljava/lang/String;I)
Landroid/os/INetworkManagementService$Default;->setNetworkPermission(II)
Landroid/os/INetworkManagementService$Default;->setUidMeteredNetworkBlacklist(IZ)
Landroid/os/INetworkManagementService$Default;->setUidMeteredNetworkWhitelist(IZ)
Landroid/os/INetworkManagementService$Default;->unregisterNetworkActivityListener(Landroid/os/INetworkActivityListener;)
Landroid/os/INetworkManagementService$Stub$Proxy;->addIdleTimer(Ljava/lang/String;II)
Landroid/os/INetworkManagementService$Stub$Proxy;->addInterfaceToNetwork(Ljava/lang/String;I)
Landroid/os/INetworkManagementService$Stub$Proxy;->addLegacyRouteForNetId(ILandroid/net/RouteInfo;I)
Landroid/os/INetworkManagementService$Stub$Proxy;->addVpnUidRanges(I[Landroid/net/UidRange;)
Landroid/os/INetworkManagementService$Stub$Proxy;->clearDefaultNetId()
Landroid/os/INetworkManagementService$Stub$Proxy;->isNetworkActive()
Landroid/os/INetworkManagementService$Stub$Proxy;->registerNetworkActivityListener(Landroid/os/INetworkActivityListener;)
Landroid/os/INetworkManagementService$Stub$Proxy;->removeIdleTimer(Ljava/lang/String;)
Landroid/os/INetworkManagementService$Stub$Proxy;->removeInterfaceFromNetwork(Ljava/lang/String;I)
Landroid/os/INetworkManagementService$Stub$Proxy;->removeVpnUidRanges(I[Landroid/net/UidRange;)
Landroid/os/INetworkManagementService$Stub$Proxy;->setAllowOnlyVpnForUids(Z[Landroid/net/UidRange;)
Landroid/os/INetworkManagementService$Stub$Proxy;->setDefaultNetId(I)
Landroid/os/INetworkManagementService$Stub$Proxy;->setDnsForwarders(Landroid/net/Network;[Ljava/lang/String;)
Landroid/os/INetworkManagementService$Stub$Proxy;->setMtu(Ljava/lang/String;I)
Landroid/os/INetworkManagementService$Stub$Proxy;->setNetworkPermission(II)
Landroid/os/INetworkManagementService$Stub$Proxy;->setUidMeteredNetworkBlacklist(IZ)
Landroid/os/INetworkManagementService$Stub$Proxy;->setUidMeteredNetworkWhitelist(IZ)
Landroid/os/INetworkManagementService$Stub$Proxy;->unregisterNetworkActivityListener(Landroid/os/INetworkActivityListener;)
Landroid/os/IPowerManager;->acquireWakeLock(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;Landroid/os/WorkSource;Ljava/lang/String;)
Landroid/os/IPowerManager;->acquireWakeLockWithUid(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;I)
Landroid/os/IPowerManager;->powerHint(II)
Landroid/os/IPowerManager;->userActivity(JII)
Landroid/os/IPowerManager$Default;->acquireWakeLock(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;Landroid/os/WorkSource;Ljava/lang/String;)
Landroid/os/IPowerManager$Default;->acquireWakeLockWithUid(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;I)
Landroid/os/IPowerManager$Default;->powerHint(II)
Landroid/os/IPowerManager$Default;->userActivity(JII)
Landroid/os/IPowerManager$Stub$Proxy;->acquireWakeLock(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;Landroid/os/WorkSource;Ljava/lang/String;)
Landroid/os/IPowerManager$Stub$Proxy;->acquireWakeLockWithUid(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;I)
Landroid/os/IPowerManager$Stub$Proxy;->powerHint(II)
Landroid/os/IPowerManager$Stub$Proxy;->userActivity(JII)
Landroid/os/IRecoverySystem;->clearLskf()
Landroid/os/IRecoverySystem;->rebootWithLskf(Ljava/lang/String;Ljava/lang/String;)
Landroid/os/IRecoverySystem$Default;->clearLskf()
Landroid/os/IRecoverySystem$Default;->rebootWithLskf(Ljava/lang/String;Ljava/lang/String;)
Landroid/os/IRecoverySystem$Stub$Proxy;->clearLskf()
Landroid/os/IRecoverySystem$Stub$Proxy;->rebootWithLskf(Ljava/lang/String;Ljava/lang/String;)
Landroid/os/IVibratorService;->areEffectsSupported([I)
Landroid/os/IVibratorService;->arePrimitivesSupported([I)
Landroid/os/IVibratorService;->cancelVibrate(Landroid/os/IBinder;)
Landroid/os/IVibratorService;->hasAmplitudeControl()
Landroid/os/IVibratorService;->hasVibrator()
Landroid/os/IVibratorService;->isVibrating()
Landroid/os/IVibratorService;->registerVibratorStateListener(Landroid/os/IVibratorStateListener;)
Landroid/os/IVibratorService;->setAlwaysOnEffect(ILjava/lang/String;ILandroid/os/VibrationEffect;Landroid/os/VibrationAttributes;)
Landroid/os/IVibratorService;->unregisterVibratorStateListener(Landroid/os/IVibratorStateListener;)
Landroid/os/IVibratorService;->vibrate(ILjava/lang/String;Landroid/os/VibrationEffect;Landroid/os/VibrationAttributes;Ljava/lang/String;Landroid/os/IBinder;)
Landroid/os/IVibratorService$Default;-><init>()
Landroid/os/IVibratorService$Default;->areEffectsSupported([I)
Landroid/os/IVibratorService$Default;->arePrimitivesSupported([I)
Landroid/os/IVibratorService$Default;->asBinder()
Landroid/os/IVibratorService$Default;->cancelVibrate(Landroid/os/IBinder;)
Landroid/os/IVibratorService$Default;->hasAmplitudeControl()
Landroid/os/IVibratorService$Default;->hasVibrator()
Landroid/os/IVibratorService$Default;->isVibrating()
Landroid/os/IVibratorService$Default;->registerVibratorStateListener(Landroid/os/IVibratorStateListener;)
Landroid/os/IVibratorService$Default;->setAlwaysOnEffect(ILjava/lang/String;ILandroid/os/VibrationEffect;Landroid/os/VibrationAttributes;)
Landroid/os/IVibratorService$Default;->unregisterVibratorStateListener(Landroid/os/IVibratorStateListener;)
Landroid/os/IVibratorService$Default;->vibrate(ILjava/lang/String;Landroid/os/VibrationEffect;Landroid/os/VibrationAttributes;Ljava/lang/String;Landroid/os/IBinder;)
Landroid/os/IVibratorService$Stub;-><init>()
Landroid/os/IVibratorService$Stub;->asBinder()
Landroid/os/IVibratorService$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/os/IVibratorService$Stub;->getDefaultImpl()
Landroid/os/IVibratorService$Stub;->getDefaultTransactionName(I)
Landroid/os/IVibratorService$Stub;->getTransactionName(I)
Landroid/os/IVibratorService$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/os/IVibratorService$Stub;->setDefaultImpl(Landroid/os/IVibratorService;)
Landroid/os/IVibratorService$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/os/IVibratorService$Stub$Proxy;->areEffectsSupported([I)
Landroid/os/IVibratorService$Stub$Proxy;->arePrimitivesSupported([I)
Landroid/os/IVibratorService$Stub$Proxy;->asBinder()
Landroid/os/IVibratorService$Stub$Proxy;->cancelVibrate(Landroid/os/IBinder;)
Landroid/os/IVibratorService$Stub$Proxy;->getInterfaceDescriptor()
Landroid/os/IVibratorService$Stub$Proxy;->hasAmplitudeControl()
Landroid/os/IVibratorService$Stub$Proxy;->hasVibrator()
Landroid/os/IVibratorService$Stub$Proxy;->isVibrating()
Landroid/os/IVibratorService$Stub$Proxy;->registerVibratorStateListener(Landroid/os/IVibratorStateListener;)
Landroid/os/IVibratorService$Stub$Proxy;->setAlwaysOnEffect(ILjava/lang/String;ILandroid/os/VibrationEffect;Landroid/os/VibrationAttributes;)
Landroid/os/IVibratorService$Stub$Proxy;->unregisterVibratorStateListener(Landroid/os/IVibratorStateListener;)
Landroid/os/IVibratorService$Stub$Proxy;->vibrate(ILjava/lang/String;Landroid/os/VibrationEffect;Landroid/os/VibrationAttributes;Ljava/lang/String;Landroid/os/IBinder;)
Landroid/os/IVold;->checkEncryption(Ljava/lang/String;)
Landroid/os/IVold;->encryptFstab(Ljava/lang/String;Ljava/lang/String;)
Landroid/os/IVold;->mountIncFs(Ljava/lang/String;Ljava/lang/String;I)
Landroid/os/IVold;->setIncFsMountOptions(Landroid/os/incremental/IncrementalFileSystemControlParcel;Z)
Landroid/os/IVold$Default;->checkEncryption(Ljava/lang/String;)
Landroid/os/IVold$Default;->encryptFstab(Ljava/lang/String;Ljava/lang/String;)
Landroid/os/IVold$Default;->mountIncFs(Ljava/lang/String;Ljava/lang/String;I)
Landroid/os/IVold$Default;->setIncFsMountOptions(Landroid/os/incremental/IncrementalFileSystemControlParcel;Z)
Landroid/os/IVold$Stub$Proxy;->checkEncryption(Ljava/lang/String;)
Landroid/os/IVold$Stub$Proxy;->encryptFstab(Ljava/lang/String;Ljava/lang/String;)
Landroid/os/IVold$Stub$Proxy;->mountIncFs(Ljava/lang/String;Ljava/lang/String;I)
Landroid/os/IVold$Stub$Proxy;->setIncFsMountOptions(Landroid/os/incremental/IncrementalFileSystemControlParcel;Z)
Landroid/os/NullVibrator;->vibrate(ILjava/lang/String;Landroid/os/VibrationEffect;Ljava/lang/String;Landroid/media/AudioAttributes;)
Landroid/os/Parcel;->updateNativeSize(J)
Landroid/os/PersistableBundle;->writeUnknownObject(Ljava/lang/Object;Ljava/lang/String;Lorg/xmlpull/v1/XmlSerializer;)
Landroid/os/PersistableBundle$MyReadMapCallback;->readThisUnknownObjectXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Landroid/os/PowerManager$WakeData;-><init>(JI)
Landroid/os/PowerManager$WakeLock;-><init>(Landroid/os/PowerManager;ILjava/lang/String;Ljava/lang/String;)
Landroid/os/PowerManagerInternal;->powerHint(II)
Landroid/os/RecoverySystem;->clearLskf()
Landroid/os/RecoverySystem;->rebootWithLskf(Ljava/lang/String;Ljava/lang/String;)
Landroid/os/SystemVibrator;-><init>()
Landroid/os/SystemVibrator;->areEffectsSupported([I)
Landroid/os/SystemVibrator;->arePrimitivesSupported([I)
Landroid/os/SystemVibrator;->vibrate(ILjava/lang/String;Landroid/os/VibrationEffect;Ljava/lang/String;Landroid/media/AudioAttributes;)
Landroid/os/SystemVibrator$OnVibratorStateChangedListenerDelegate;-><init>(Landroid/os/SystemVibrator;Landroid/os/Vibrator$OnVibratorStateChangedListener;Ljava/util/concurrent/Executor;)
Landroid/os/SystemVibrator$OnVibratorStateChangedListenerDelegate;->onVibrating(Z)
Landroid/os/UserManager;->canHaveRestrictedProfile(I)
Landroid/os/VibrationAttributes;-><init>(IILandroid/media/AudioAttributes;)
Landroid/os/VibrationAttributes;-><init>(IILandroid/media/AudioAttributes;Landroid/os/VibrationAttributes$1;)
Landroid/os/VibrationAttributes;->getAudioAttributes()
Landroid/os/VibrationAttributes$Builder;->replaceFlags(I)
Landroid/os/VibrationEffect;->scale(IFI)
Landroid/os/VibrationEffect$Composed;-><init>(Ljava/util/List;)
Landroid/os/VibrationEffect$Composed;->getPrimitiveEffects()
Landroid/os/VibrationEffect$Composed;->scale(FI)
Landroid/os/VibrationEffect$Composition;->checkPrimitive(I)
Landroid/os/VibrationEffect$Composition$PrimitiveEffect;-><init>(IFI)
Landroid/os/VibrationEffect$Composition$PrimitiveEffect;->describeContents()
Landroid/os/VibrationEffect$Composition$PrimitiveEffect;->equals(Ljava/lang/Object;)
Landroid/os/VibrationEffect$Composition$PrimitiveEffect;->hashCode()
Landroid/os/VibrationEffect$Composition$PrimitiveEffect;->toString()
Landroid/os/VibrationEffect$Composition$PrimitiveEffect;->writeToParcel(Landroid/os/Parcel;I)
Landroid/os/VibrationEffect$OneShot;-><init>(Landroid/os/Parcel;)
Landroid/os/VibrationEffect$OneShot;-><init>(JI)
Landroid/os/VibrationEffect$OneShot;->equals(Ljava/lang/Object;)
Landroid/os/VibrationEffect$OneShot;->getAmplitude()
Landroid/os/VibrationEffect$OneShot;->getDuration()
Landroid/os/VibrationEffect$OneShot;->hashCode()
Landroid/os/VibrationEffect$OneShot;->resolve(I)
Landroid/os/VibrationEffect$OneShot;->scale(FI)
Landroid/os/VibrationEffect$OneShot;->toString()
Landroid/os/VibrationEffect$OneShot;->validate()
Landroid/os/VibrationEffect$OneShot;->writeToParcel(Landroid/os/Parcel;I)
Landroid/os/VibrationEffect$Prebaked;-><init>(Landroid/os/Parcel;)
Landroid/os/VibrationEffect$Prebaked;-><init>(IZ)
Landroid/os/VibrationEffect$Prebaked;->equals(Ljava/lang/Object;)
Landroid/os/VibrationEffect$Prebaked;->getDuration()
Landroid/os/VibrationEffect$Prebaked;->getEffectStrength()
Landroid/os/VibrationEffect$Prebaked;->getId()
Landroid/os/VibrationEffect$Prebaked;->hashCode()
Landroid/os/VibrationEffect$Prebaked;->isValidEffectStrength(I)
Landroid/os/VibrationEffect$Prebaked;->setEffectStrength(I)
Landroid/os/VibrationEffect$Prebaked;->shouldFallback()
Landroid/os/VibrationEffect$Prebaked;->toString()
Landroid/os/VibrationEffect$Prebaked;->validate()
Landroid/os/VibrationEffect$Prebaked;->writeToParcel(Landroid/os/Parcel;I)
Landroid/os/VibrationEffect$Waveform;-><init>(Landroid/os/Parcel;)
Landroid/os/VibrationEffect$Waveform;-><init>([J[II)
Landroid/os/VibrationEffect$Waveform;->equals(Ljava/lang/Object;)
Landroid/os/VibrationEffect$Waveform;->getAmplitudes()
Landroid/os/VibrationEffect$Waveform;->getDuration()
Landroid/os/VibrationEffect$Waveform;->getRepeatIndex()
Landroid/os/VibrationEffect$Waveform;->getTimings()
Landroid/os/VibrationEffect$Waveform;->hasNonZeroEntry([J)
Landroid/os/VibrationEffect$Waveform;->hashCode()
Landroid/os/VibrationEffect$Waveform;->resolve(I)
Landroid/os/VibrationEffect$Waveform;->scale(FI)
Landroid/os/VibrationEffect$Waveform;->toString()
Landroid/os/VibrationEffect$Waveform;->validate()
Landroid/os/VibrationEffect$Waveform;->writeToParcel(Landroid/os/Parcel;I)
Landroid/os/Vibrator;->loadVibrationIntensities(Landroid/content/Context;)
Landroid/os/ZygoteProcess;->maybeSetApiBlacklistExemptions(Landroid/os/ZygoteProcess$ZygoteState;Z)
Landroid/os/ZygoteProcess;->setApiBlacklistExemptions(Ljava/util/List;)
Landroid/os/image/DynamicSystemClient;->featureFlagEnabled()
Landroid/os/incremental/IIncrementalService;->createStorage(Ljava/lang/String;Landroid/content/pm/DataLoaderParamsParcel;ILandroid/content/pm/IDataLoaderStatusListener;Landroid/os/incremental/StorageHealthCheckParams;Landroid/os/incremental/IStorageHealthListener;)
Landroid/os/incremental/IIncrementalService;->isFileRangeLoaded(ILjava/lang/String;JJ)
Landroid/os/incremental/IIncrementalService;->makeFile(ILjava/lang/String;Landroid/os/incremental/IncrementalNewFileParams;)
Landroid/os/incremental/IIncrementalService;->startLoading(I)
Landroid/os/incremental/IIncrementalService$Default;->createStorage(Ljava/lang/String;Landroid/content/pm/DataLoaderParamsParcel;ILandroid/content/pm/IDataLoaderStatusListener;Landroid/os/incremental/StorageHealthCheckParams;Landroid/os/incremental/IStorageHealthListener;)
Landroid/os/incremental/IIncrementalService$Default;->isFileRangeLoaded(ILjava/lang/String;JJ)
Landroid/os/incremental/IIncrementalService$Default;->makeFile(ILjava/lang/String;Landroid/os/incremental/IncrementalNewFileParams;)
Landroid/os/incremental/IIncrementalService$Default;->startLoading(I)
Landroid/os/incremental/IIncrementalService$Stub$Proxy;->createStorage(Ljava/lang/String;Landroid/content/pm/DataLoaderParamsParcel;ILandroid/content/pm/IDataLoaderStatusListener;Landroid/os/incremental/StorageHealthCheckParams;Landroid/os/incremental/IStorageHealthListener;)
Landroid/os/incremental/IIncrementalService$Stub$Proxy;->isFileRangeLoaded(ILjava/lang/String;JJ)
Landroid/os/incremental/IIncrementalService$Stub$Proxy;->makeFile(ILjava/lang/String;Landroid/os/incremental/IncrementalNewFileParams;)
Landroid/os/incremental/IIncrementalService$Stub$Proxy;->startLoading(I)
Landroid/os/incremental/IncrementalFileStorages;-><init>(Ljava/io/File;Landroid/os/incremental/IncrementalManager;Landroid/content/pm/DataLoaderParams;Landroid/content/pm/IDataLoaderStatusListener;Landroid/os/incremental/StorageHealthCheckParams;Landroid/os/incremental/IStorageHealthListener;)
Landroid/os/incremental/IncrementalFileStorages;->initialize(Landroid/content/Context;Ljava/io/File;Landroid/content/pm/DataLoaderParams;Landroid/content/pm/IDataLoaderStatusListener;Landroid/os/incremental/StorageHealthCheckParams;Landroid/os/incremental/IStorageHealthListener;Ljava/util/List;)
Landroid/os/incremental/IncrementalFileStorages;->startLoading()
Landroid/os/incremental/IncrementalManager;->closeStorage(Ljava/lang/String;)
Landroid/os/incremental/IncrementalManager;->createStorage(Ljava/lang/String;Landroid/content/pm/DataLoaderParams;IZLandroid/content/pm/IDataLoaderStatusListener;Landroid/os/incremental/StorageHealthCheckParams;Landroid/os/incremental/IStorageHealthListener;)
Landroid/os/incremental/IncrementalManager;->getStorage(I)
Landroid/os/incremental/IncrementalManager;->renameCodePath(Ljava/io/File;Ljava/io/File;)
Landroid/os/incremental/IncrementalStorage;->isFileRangeLoaded(Ljava/lang/String;JJ)
Landroid/os/incremental/IncrementalStorage;->makeFile(Ljava/lang/String;JLjava/util/UUID;[B[B)
Landroid/os/incremental/IncrementalStorage;->startLoading()
Landroid/os/incremental/V4Signature;->getSigningData(JLandroid/os/incremental/V4Signature$HashingInfo;Landroid/os/incremental/V4Signature$SigningInfo;)
Landroid/os/incremental/V4Signature;->readBytes(Ljava/io/InputStream;)
Landroid/os/storage/StorageManagerInternal;->addExternalStoragePolicy(Landroid/os/storage/StorageManagerInternal$ExternalStorageMountPolicy;)
Landroid/os/storage/StorageManagerInternal;->onAppOpsChanged(IILjava/lang/String;I)
Landroid/os/storage/StorageManagerInternal;->onExternalStoragePolicyChanged(ILjava/lang/String;)
Landroid/os/storage/StorageManagerInternal$ExternalStorageMountPolicy;->getMountMode(ILjava/lang/String;)
Landroid/os/storage/StorageManagerInternal$ExternalStorageMountPolicy;->hasExternalStorage(ILjava/lang/String;)
Landroid/os/storage/StorageVolume;-><init>(Ljava/lang/String;Ljava/io/File;Ljava/io/File;Ljava/lang/String;ZZZZJLandroid/os/UserHandle;Ljava/lang/String;Ljava/lang/String;)
Landroid/permission/IPermissionController;->setRuntimePermissionGrantStateByDeviceAdmin(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILcom/android/internal/infra/AndroidFuture;)
Landroid/permission/IPermissionController$Default;->setRuntimePermissionGrantStateByDeviceAdmin(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILcom/android/internal/infra/AndroidFuture;)
Landroid/permission/IPermissionController$Stub$Proxy;->setRuntimePermissionGrantStateByDeviceAdmin(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILcom/android/internal/infra/AndroidFuture;)
Landroid/permission/IPermissionManager;->addWhitelistedRestrictedPermission(Ljava/lang/String;Ljava/lang/String;II)
Landroid/permission/IPermissionManager;->checkDeviceIdentifierAccess(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II)
Landroid/permission/IPermissionManager;->checkPermission(Ljava/lang/String;Ljava/lang/String;I)
Landroid/permission/IPermissionManager;->checkUidPermission(Ljava/lang/String;I)
Landroid/permission/IPermissionManager;->getAppOpPermissionPackages(Ljava/lang/String;)
Landroid/permission/IPermissionManager;->getDefaultBrowser(I)
Landroid/permission/IPermissionManager;->getWhitelistedRestrictedPermissions(Ljava/lang/String;II)
Landroid/permission/IPermissionManager;->grantDefaultPermissionsToActiveLuiApp(Ljava/lang/String;I)
Landroid/permission/IPermissionManager;->grantDefaultPermissionsToEnabledCarrierApps([Ljava/lang/String;I)
Landroid/permission/IPermissionManager;->grantDefaultPermissionsToEnabledImsServices([Ljava/lang/String;I)
Landroid/permission/IPermissionManager;->grantDefaultPermissionsToEnabledTelephonyDataServices([Ljava/lang/String;I)
Landroid/permission/IPermissionManager;->isAutoRevokeWhitelisted(Ljava/lang/String;I)
Landroid/permission/IPermissionManager;->isPermissionEnforced(Ljava/lang/String;)
Landroid/permission/IPermissionManager;->removeWhitelistedRestrictedPermission(Ljava/lang/String;Ljava/lang/String;II)
Landroid/permission/IPermissionManager;->resetRuntimePermissions()
Landroid/permission/IPermissionManager;->revokeDefaultPermissionsFromDisabledTelephonyDataServices([Ljava/lang/String;I)
Landroid/permission/IPermissionManager;->revokeDefaultPermissionsFromLuiApps([Ljava/lang/String;I)
Landroid/permission/IPermissionManager;->revokeRuntimePermission(Ljava/lang/String;Ljava/lang/String;I)
Landroid/permission/IPermissionManager;->setAutoRevokeWhitelisted(Ljava/lang/String;ZI)
Landroid/permission/IPermissionManager;->setDefaultBrowser(Ljava/lang/String;I)
Landroid/permission/IPermissionManager;->setPermissionEnforced(Ljava/lang/String;Z)
Landroid/permission/IPermissionManager$Default;->addWhitelistedRestrictedPermission(Ljava/lang/String;Ljava/lang/String;II)
Landroid/permission/IPermissionManager$Default;->checkDeviceIdentifierAccess(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II)
Landroid/permission/IPermissionManager$Default;->checkPermission(Ljava/lang/String;Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Default;->checkUidPermission(Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Default;->getAppOpPermissionPackages(Ljava/lang/String;)
Landroid/permission/IPermissionManager$Default;->getDefaultBrowser(I)
Landroid/permission/IPermissionManager$Default;->getWhitelistedRestrictedPermissions(Ljava/lang/String;II)
Landroid/permission/IPermissionManager$Default;->grantDefaultPermissionsToActiveLuiApp(Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Default;->grantDefaultPermissionsToEnabledCarrierApps([Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Default;->grantDefaultPermissionsToEnabledImsServices([Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Default;->grantDefaultPermissionsToEnabledTelephonyDataServices([Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Default;->isAutoRevokeWhitelisted(Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Default;->isPermissionEnforced(Ljava/lang/String;)
Landroid/permission/IPermissionManager$Default;->removeWhitelistedRestrictedPermission(Ljava/lang/String;Ljava/lang/String;II)
Landroid/permission/IPermissionManager$Default;->resetRuntimePermissions()
Landroid/permission/IPermissionManager$Default;->revokeDefaultPermissionsFromDisabledTelephonyDataServices([Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Default;->revokeDefaultPermissionsFromLuiApps([Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Default;->revokeRuntimePermission(Ljava/lang/String;Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Default;->setAutoRevokeWhitelisted(Ljava/lang/String;ZI)
Landroid/permission/IPermissionManager$Default;->setDefaultBrowser(Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Default;->setPermissionEnforced(Ljava/lang/String;Z)
Landroid/permission/IPermissionManager$Stub$Proxy;->addWhitelistedRestrictedPermission(Ljava/lang/String;Ljava/lang/String;II)
Landroid/permission/IPermissionManager$Stub$Proxy;->checkDeviceIdentifierAccess(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II)
Landroid/permission/IPermissionManager$Stub$Proxy;->checkPermission(Ljava/lang/String;Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Stub$Proxy;->checkUidPermission(Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Stub$Proxy;->getAppOpPermissionPackages(Ljava/lang/String;)
Landroid/permission/IPermissionManager$Stub$Proxy;->getDefaultBrowser(I)
Landroid/permission/IPermissionManager$Stub$Proxy;->getWhitelistedRestrictedPermissions(Ljava/lang/String;II)
Landroid/permission/IPermissionManager$Stub$Proxy;->grantDefaultPermissionsToActiveLuiApp(Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Stub$Proxy;->grantDefaultPermissionsToEnabledCarrierApps([Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Stub$Proxy;->grantDefaultPermissionsToEnabledImsServices([Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Stub$Proxy;->grantDefaultPermissionsToEnabledTelephonyDataServices([Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Stub$Proxy;->isAutoRevokeWhitelisted(Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Stub$Proxy;->isPermissionEnforced(Ljava/lang/String;)
Landroid/permission/IPermissionManager$Stub$Proxy;->removeWhitelistedRestrictedPermission(Ljava/lang/String;Ljava/lang/String;II)
Landroid/permission/IPermissionManager$Stub$Proxy;->resetRuntimePermissions()
Landroid/permission/IPermissionManager$Stub$Proxy;->revokeDefaultPermissionsFromDisabledTelephonyDataServices([Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Stub$Proxy;->revokeDefaultPermissionsFromLuiApps([Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Stub$Proxy;->revokeRuntimePermission(Ljava/lang/String;Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Stub$Proxy;->setAutoRevokeWhitelisted(Ljava/lang/String;ZI)
Landroid/permission/IPermissionManager$Stub$Proxy;->setDefaultBrowser(Ljava/lang/String;I)
Landroid/permission/IPermissionManager$Stub$Proxy;->setPermissionEnforced(Ljava/lang/String;Z)
Landroid/permission/PermissionControllerManager;->setRuntimePermissionGrantStateByDeviceAdmin(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/util/concurrent/Executor;Ljava/util/function/Consumer;)
Landroid/permission/PermissionManager;-><init>(Landroid/content/Context;Landroid/content/pm/IPackageManager;)
Landroid/permission/PermissionManager;-><init>(Landroid/content/Context;Landroid/content/pm/IPackageManager;Landroid/permission/IPermissionManager;)
Landroid/permission/PermissionManager;->grantDefaultPermissionsToEnabledCarrierApps([Ljava/lang/String;Landroid/os/UserHandle;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)
Landroid/permission/PermissionManager;->grantDefaultPermissionsToEnabledImsServices([Ljava/lang/String;Landroid/os/UserHandle;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)
Landroid/permission/PermissionManager;->grantDefaultPermissionsToEnabledTelephonyDataServices([Ljava/lang/String;Landroid/os/UserHandle;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)
Landroid/permission/PermissionManager;->grantDefaultPermissionsToLuiApp(Ljava/lang/String;Landroid/os/UserHandle;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)
Landroid/permission/PermissionManager;->revokeDefaultPermissionsFromDisabledTelephonyDataServices([Ljava/lang/String;Landroid/os/UserHandle;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)
Landroid/permission/PermissionManager;->revokeDefaultPermissionsFromLuiApps([Ljava/lang/String;Landroid/os/UserHandle;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)
Landroid/permission/PermissionManagerInternal;-><init>()
Landroid/permission/PermissionManagerInternal;->addOnRuntimePermissionStateChangedListener(Landroid/permission/PermissionManagerInternal$OnRuntimePermissionStateChangedListener;)
Landroid/permission/PermissionManagerInternal;->backupRuntimePermissions(Landroid/os/UserHandle;)
Landroid/permission/PermissionManagerInternal;->removeOnRuntimePermissionStateChangedListener(Landroid/permission/PermissionManagerInternal$OnRuntimePermissionStateChangedListener;)
Landroid/permission/PermissionManagerInternal;->restoreDelayedRuntimePermissions(Ljava/lang/String;Landroid/os/UserHandle;)
Landroid/permission/PermissionManagerInternal;->restoreRuntimePermissions([BLandroid/os/UserHandle;)
Landroid/permission/PermissionManagerInternal$CheckPermissionDelegate;->checkPermission(Ljava/lang/String;Ljava/lang/String;ILcom/android/internal/util/function/TriFunction;)
Landroid/permission/PermissionManagerInternal$CheckPermissionDelegate;->checkUidPermission(Ljava/lang/String;ILjava/util/function/BiFunction;)
Landroid/permission/PermissionManagerInternal$OnRuntimePermissionStateChangedListener;->onRuntimePermissionStateChanged(Ljava/lang/String;I)
Landroid/preference/DialogPreference;->needInputMethod()
Landroid/preference/DialogPreference;->requestInputMethod(Landroid/app/Dialog;)
Landroid/preference/EditTextPreference;->needInputMethod()
Landroid/provider/CallLog$Calls;->addCall(Landroid/telecom/CallerInfo;Landroid/content/Context;Ljava/lang/String;IIILandroid/telecom/PhoneAccountHandle;JILjava/lang/Long;)
Landroid/provider/CallLog$Calls;->addCall(Landroid/telecom/CallerInfo;Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIILandroid/telecom/PhoneAccountHandle;JILjava/lang/Long;ZLandroid/os/UserHandle;)
Landroid/provider/CallLog$Calls;->addCall(Landroid/telecom/CallerInfo;Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIILandroid/telecom/PhoneAccountHandle;JILjava/lang/Long;ZLandroid/os/UserHandle;ZILjava/lang/CharSequence;Ljava/lang/String;)
Landroid/provider/Settings;->checkAndNoteChangeNetworkStateOperation(Landroid/content/Context;ILjava/lang/String;Z)
Landroid/provider/Settings;->checkAndNoteDrawOverlaysOperation(Landroid/content/Context;ILjava/lang/String;Z)
Landroid/provider/Settings$NameValueCache;-><init>(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Landroid/provider/Settings$ContentProviderHolder;)
Landroid/provider/Settings$NameValueCache;-><init>(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/provider/Settings$ContentProviderHolder;)
Landroid/providers/settings/GlobalSettingsProto$Auto;-><init>(Landroid/providers/settings/GlobalSettingsProto;)
Landroid/security/Credentials;->deleteAllTypesForAlias(Landroid/security/KeyStore;Ljava/lang/String;)
Landroid/security/Credentials;->deleteAllTypesForAlias(Landroid/security/KeyStore;Ljava/lang/String;I)
Landroid/security/Credentials;->deleteCertificateTypesForAlias(Landroid/security/KeyStore;Ljava/lang/String;)
Landroid/security/Credentials;->deleteCertificateTypesForAlias(Landroid/security/KeyStore;Ljava/lang/String;I)
Landroid/security/Credentials;->deleteLegacyKeyForAlias(Landroid/security/KeyStore;Ljava/lang/String;I)
Landroid/security/Credentials;->deleteUserKeyTypeForAlias(Landroid/security/KeyStore;Ljava/lang/String;)
Landroid/security/Credentials;->deleteUserKeyTypeForAlias(Landroid/security/KeyStore;Ljava/lang/String;I)
Landroid/security/IConfirmationPromptCallback;->onConfirmationPromptCompleted(I[B)
Landroid/security/IConfirmationPromptCallback$Default;-><init>()
Landroid/security/IConfirmationPromptCallback$Default;->asBinder()
Landroid/security/IConfirmationPromptCallback$Default;->onConfirmationPromptCompleted(I[B)
Landroid/security/IConfirmationPromptCallback$Stub;-><init>()
Landroid/security/IConfirmationPromptCallback$Stub;->asBinder()
Landroid/security/IConfirmationPromptCallback$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/security/IConfirmationPromptCallback$Stub;->getDefaultImpl()
Landroid/security/IConfirmationPromptCallback$Stub;->getDefaultTransactionName(I)
Landroid/security/IConfirmationPromptCallback$Stub;->getTransactionName(I)
Landroid/security/IConfirmationPromptCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/security/IConfirmationPromptCallback$Stub;->setDefaultImpl(Landroid/security/IConfirmationPromptCallback;)
Landroid/security/IConfirmationPromptCallback$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/security/IConfirmationPromptCallback$Stub$Proxy;->asBinder()
Landroid/security/IConfirmationPromptCallback$Stub$Proxy;->getInterfaceDescriptor()
Landroid/security/IConfirmationPromptCallback$Stub$Proxy;->onConfirmationPromptCompleted(I[B)
Landroid/security/IKeyChainService;->attestKey(Ljava/lang/String;[B[ILandroid/security/keymaster/KeymasterCertificateChain;)
Landroid/security/IKeyChainService$Default;->attestKey(Ljava/lang/String;[B[ILandroid/security/keymaster/KeymasterCertificateChain;)
Landroid/security/IKeyChainService$Stub$Proxy;->attestKey(Ljava/lang/String;[B[ILandroid/security/keymaster/KeymasterCertificateChain;)
Landroid/security/KeyStore;-><init>(Landroid/security/keystore/IKeystoreService;)
Landroid/security/KeyStore;->abort(Landroid/os/IBinder;)
Landroid/security/KeyStore;->addRngEntropy([BI)
Landroid/security/KeyStore;->attestDeviceIds(Landroid/security/keymaster/KeymasterArguments;Landroid/security/keymaster/KeymasterCertificateChain;)
Landroid/security/KeyStore;->attestKey(Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;Landroid/security/keymaster/KeymasterCertificateChain;)
Landroid/security/KeyStore;->begin(Ljava/lang/String;IZLandroid/security/keymaster/KeymasterArguments;[B)
Landroid/security/KeyStore;->begin(Ljava/lang/String;IZLandroid/security/keymaster/KeymasterArguments;[BI)
Landroid/security/KeyStore;->cancelConfirmationPrompt(Landroid/os/IBinder;)
Landroid/security/KeyStore;->contains(Ljava/lang/String;)
Landroid/security/KeyStore;->contains(Ljava/lang/String;I)
Landroid/security/KeyStore;->delete(Ljava/lang/String;I)
Landroid/security/KeyStore;->delete2(Ljava/lang/String;I)
Landroid/security/KeyStore;->exportKey(Ljava/lang/String;ILandroid/security/keymaster/KeymasterBlob;Landroid/security/keymaster/KeymasterBlob;)
Landroid/security/KeyStore;->exportKey(Ljava/lang/String;ILandroid/security/keymaster/KeymasterBlob;Landroid/security/keymaster/KeymasterBlob;I)
Landroid/security/KeyStore;->finish(Landroid/os/IBinder;Landroid/security/keymaster/KeymasterArguments;[B)
Landroid/security/KeyStore;->finish(Landroid/os/IBinder;Landroid/security/keymaster/KeymasterArguments;[B[B[B)
Landroid/security/KeyStore;->generateKey(Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;[BILandroid/security/keymaster/KeyCharacteristics;)
Landroid/security/KeyStore;->generateKey(Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;[BIILandroid/security/keymaster/KeyCharacteristics;)
Landroid/security/KeyStore;->generateKeyInternal(Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;[BIILandroid/security/keymaster/KeyCharacteristics;)
Landroid/security/KeyStore;->get(Ljava/lang/String;Z)
Landroid/security/KeyStore;->get(Ljava/lang/String;I)
Landroid/security/KeyStore;->get(Ljava/lang/String;IZ)
Landroid/security/KeyStore;->getAlgorithmFromPKCS8([B)
Landroid/security/KeyStore;->getApplicationContext()
Landroid/security/KeyStore;->getInvalidKeyException(Ljava/lang/String;ILandroid/security/KeyStoreException;)
Landroid/security/KeyStore;->getInvalidKeyException(Ljava/lang/String;II)
Landroid/security/KeyStore;->getKeyCharacteristics(Ljava/lang/String;Landroid/security/keymaster/KeymasterBlob;Landroid/security/keymaster/KeymasterBlob;Landroid/security/keymaster/KeyCharacteristics;)
Landroid/security/KeyStore;->getKeyCharacteristics(Ljava/lang/String;Landroid/security/keymaster/KeymasterBlob;Landroid/security/keymaster/KeymasterBlob;ILandroid/security/keymaster/KeyCharacteristics;)
Landroid/security/KeyStore;->getLastError()
Landroid/security/KeyStore;->getToken()
Landroid/security/KeyStore;->getmtime(Ljava/lang/String;)
Landroid/security/KeyStore;->getmtime(Ljava/lang/String;I)
Landroid/security/KeyStore;->grant(Ljava/lang/String;I)
Landroid/security/KeyStore;->importKey(Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;I[BILandroid/security/keymaster/KeyCharacteristics;)
Landroid/security/KeyStore;->importKey(Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;I[BIILandroid/security/keymaster/KeyCharacteristics;)
Landroid/security/KeyStore;->importKey(Ljava/lang/String;[BII)
Landroid/security/KeyStore;->importKeyInternal(Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;I[BIILandroid/security/keymaster/KeyCharacteristics;)
Landroid/security/KeyStore;->importWrappedKey(Ljava/lang/String;[BLjava/lang/String;[BLandroid/security/keymaster/KeymasterArguments;JJILandroid/security/keymaster/KeyCharacteristics;)
Landroid/security/KeyStore;->importWrappedKeyInternal(Ljava/lang/String;[BLjava/lang/String;[BLandroid/security/keymaster/KeymasterArguments;JJLandroid/security/keymaster/KeyCharacteristics;)
Landroid/security/KeyStore;->insert(Ljava/lang/String;[BII)
Landroid/security/KeyStore;->isConfirmationPromptSupported()
Landroid/security/KeyStore;->isEmpty(I)
Landroid/security/KeyStore;->isHardwareBacked()
Landroid/security/KeyStore;->isHardwareBacked(Ljava/lang/String;)
Landroid/security/KeyStore;->isUnlocked()
Landroid/security/KeyStore;->list(Ljava/lang/String;)
Landroid/security/KeyStore;->list(Ljava/lang/String;I)
Landroid/security/KeyStore;->lock()
Landroid/security/KeyStore;->lock(I)
Landroid/security/KeyStore;->makeLegacyArguments(Ljava/lang/String;)
Landroid/security/KeyStore;->onUserAdded(I)
Landroid/security/KeyStore;->onUserAdded(II)
Landroid/security/KeyStore;->onUserLockedStateChanged(IZ)
Landroid/security/KeyStore;->onUserPasswordChanged(ILjava/lang/String;)
Landroid/security/KeyStore;->onUserPasswordChanged(Ljava/lang/String;)
Landroid/security/KeyStore;->onUserRemoved(I)
Landroid/security/KeyStore;->presentConfirmationPrompt(Landroid/os/IBinder;Ljava/lang/String;[BLjava/lang/String;I)
Landroid/security/KeyStore;->put(Ljava/lang/String;[BII)
Landroid/security/KeyStore;->ungrant(Ljava/lang/String;I)
Landroid/security/KeyStore;->unlock(ILjava/lang/String;)
Landroid/security/KeyStore;->update(Landroid/os/IBinder;Landroid/security/keymaster/KeymasterArguments;[B)
Landroid/security/KeyStore$CertificateChainPromise;-><init>(Landroid/security/KeyStore;)
Landroid/security/KeyStore$CertificateChainPromise;-><init>(Landroid/security/KeyStore;Landroid/security/KeyStore$1;)
Landroid/security/KeyStore$CertificateChainPromise;->binderDied()
Landroid/security/KeyStore$CertificateChainPromise;->getFuture()
Landroid/security/KeyStore$CertificateChainPromise;->onFinished(Landroid/security/keystore/KeystoreResponse;Landroid/security/keymaster/KeymasterCertificateChain;)
Landroid/security/KeyStore$ExportKeyPromise;-><init>(Landroid/security/KeyStore;)
Landroid/security/KeyStore$ExportKeyPromise;-><init>(Landroid/security/KeyStore;Landroid/security/KeyStore$1;)
Landroid/security/KeyStore$ExportKeyPromise;->binderDied()
Landroid/security/KeyStore$ExportKeyPromise;->getFuture()
Landroid/security/KeyStore$ExportKeyPromise;->onFinished(Landroid/security/keymaster/ExportResult;)
Landroid/security/KeyStore$KeyAttestationCallbackResult;-><init>(Landroid/security/KeyStore;Landroid/security/keystore/KeystoreResponse;Landroid/security/keymaster/KeymasterCertificateChain;)
Landroid/security/KeyStore$KeyAttestationCallbackResult;->getCertificateChain()
Landroid/security/KeyStore$KeyAttestationCallbackResult;->getKeystoreResponse()
Landroid/security/KeyStore$KeyAttestationCallbackResult;->setCertificateChain(Landroid/security/keymaster/KeymasterCertificateChain;)
Landroid/security/KeyStore$KeyAttestationCallbackResult;->setKeystoreResponse(Landroid/security/keystore/KeystoreResponse;)
Landroid/security/KeyStore$KeyCharacteristicsCallbackResult;-><init>(Landroid/security/KeyStore;Landroid/security/keystore/KeystoreResponse;Landroid/security/keymaster/KeyCharacteristics;)
Landroid/security/KeyStore$KeyCharacteristicsCallbackResult;->getKeyCharacteristics()
Landroid/security/KeyStore$KeyCharacteristicsCallbackResult;->getKeystoreResponse()
Landroid/security/KeyStore$KeyCharacteristicsCallbackResult;->setKeyCharacteristics(Landroid/security/keymaster/KeyCharacteristics;)
Landroid/security/KeyStore$KeyCharacteristicsCallbackResult;->setKeystoreResponse(Landroid/security/keystore/KeystoreResponse;)
Landroid/security/KeyStore$KeyCharacteristicsPromise;-><init>(Landroid/security/KeyStore;)
Landroid/security/KeyStore$KeyCharacteristicsPromise;-><init>(Landroid/security/KeyStore;Landroid/security/KeyStore$1;)
Landroid/security/KeyStore$KeyCharacteristicsPromise;->binderDied()
Landroid/security/KeyStore$KeyCharacteristicsPromise;->getFuture()
Landroid/security/KeyStore$KeyCharacteristicsPromise;->onFinished(Landroid/security/keystore/KeystoreResponse;Landroid/security/keymaster/KeyCharacteristics;)
Landroid/security/KeyStore$KeystoreResultPromise;-><init>(Landroid/security/KeyStore;)
Landroid/security/KeyStore$KeystoreResultPromise;-><init>(Landroid/security/KeyStore;Landroid/security/KeyStore$1;)
Landroid/security/KeyStore$KeystoreResultPromise;->binderDied()
Landroid/security/KeyStore$KeystoreResultPromise;->getFuture()
Landroid/security/KeyStore$KeystoreResultPromise;->onFinished(Landroid/security/keystore/KeystoreResponse;)
Landroid/security/KeyStore$OperationPromise;-><init>(Landroid/security/KeyStore;)
Landroid/security/KeyStore$OperationPromise;-><init>(Landroid/security/KeyStore;Landroid/security/KeyStore$1;)
Landroid/security/KeyStore$OperationPromise;->binderDied()
Landroid/security/KeyStore$OperationPromise;->getFuture()
Landroid/security/KeyStore$OperationPromise;->onFinished(Landroid/security/keymaster/OperationResult;)
Landroid/security/identity/ICredential;->getEntries([B[Landroid/security/identity/RequestNamespaceParcel;[B[BZ)
Landroid/security/identity/ICredential;->selectAuthKey(Z)
Landroid/security/identity/ICredential$Default;->getEntries([B[Landroid/security/identity/RequestNamespaceParcel;[B[BZ)
Landroid/security/identity/ICredential$Default;->selectAuthKey(Z)
Landroid/security/identity/ICredential$Stub$Proxy;->getEntries([B[Landroid/security/identity/RequestNamespaceParcel;[B[BZ)
Landroid/security/identity/ICredential$Stub$Proxy;->selectAuthKey(Z)
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;-><init>(IIZ)
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->addAlgorithmSpecificParametersToBegin(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->engineGetBlockSize()
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->engineGetIV()
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->engineGetOutputSize(I)
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->engineGetParameters()
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->finalize()
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->getAdditionalEntropyAmountForBegin()
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->getAdditionalEntropyAmountForFinish()
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->initAlgorithmSpecificParameters()
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->initAlgorithmSpecificParameters(Ljava/security/AlgorithmParameters;)
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->initAlgorithmSpecificParameters(Ljava/security/spec/AlgorithmParameterSpec;)
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->initKey(ILjava/security/Key;)
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->loadAlgorithmSpecificParametersFromBeginResult(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi;->resetAll()
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$CBC;-><init>(I)
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$CBC$NoPadding;-><init>()
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$CBC$NoPadding;->finalize()
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$CBC$PKCS7Padding;-><init>()
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$CBC$PKCS7Padding;->finalize()
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$ECB;-><init>(I)
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$ECB$NoPadding;-><init>()
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$ECB$NoPadding;->finalize()
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$ECB$PKCS7Padding;-><init>()
Landroid/security/keystore/AndroidKeyStore3DESCipherSpi$ECB$PKCS7Padding;->finalize()
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi;-><init>(II)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi;->addAlgorithmSpecificParametersToBegin(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi;->engineGetBlockSize()
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi;->engineGetIV()
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi;->getIv()
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi;->initKey(ILjava/security/Key;)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi;->loadAlgorithmSpecificParametersFromBeginResult(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi;->resetAll()
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi;->setIv([B)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$AdditionalAuthenticationDataStream;-><init>(Landroid/security/KeyStore;Landroid/os/IBinder;)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$AdditionalAuthenticationDataStream;-><init>(Landroid/security/KeyStore;Landroid/os/IBinder;Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$1;)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$AdditionalAuthenticationDataStream;->finish([B[B[B)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$AdditionalAuthenticationDataStream;->update([B)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$BufferAllOutputUntilDoFinalStreamer;-><init>(Landroid/security/keystore/KeyStoreCryptoOperationStreamer;)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$BufferAllOutputUntilDoFinalStreamer;-><init>(Landroid/security/keystore/KeyStoreCryptoOperationStreamer;Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$1;)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$BufferAllOutputUntilDoFinalStreamer;->doFinal([BII[B[B)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$BufferAllOutputUntilDoFinalStreamer;->getConsumedInputSizeBytes()
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$BufferAllOutputUntilDoFinalStreamer;->getProducedOutputSizeBytes()
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$BufferAllOutputUntilDoFinalStreamer;->update([BII)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;-><init>(I)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->addAlgorithmSpecificParametersToBegin(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->createAdditionalAuthenticationDataStreamer(Landroid/security/KeyStore;Landroid/os/IBinder;)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->createMainDataStreamer(Landroid/security/KeyStore;Landroid/os/IBinder;)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->engineGetParameters()
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->getAdditionalEntropyAmountForBegin()
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->getAdditionalEntropyAmountForFinish()
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->getTagLengthBits()
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->initAlgorithmSpecificParameters()
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->initAlgorithmSpecificParameters(Ljava/security/AlgorithmParameters;)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->initAlgorithmSpecificParameters(Ljava/security/spec/AlgorithmParameterSpec;)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->resetAll()
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM;->resetWhilePreservingInitState()
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM$NoPadding;-><init>()
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM$NoPadding;->engineGetOutputSize(I)
Landroid/security/keystore/AndroidKeyStoreAuthenticatedAESCipherSpi$GCM$NoPadding;->finalize()
Landroid/security/keystore/AndroidKeyStoreBCWorkaroundProvider;-><init>()
Landroid/security/keystore/AndroidKeyStoreBCWorkaroundProvider;->getSupportedEcdsaSignatureDigests()
Landroid/security/keystore/AndroidKeyStoreBCWorkaroundProvider;->getSupportedRsaSignatureWithPkcs1PaddingDigests()
Landroid/security/keystore/AndroidKeyStoreBCWorkaroundProvider;->putAsymmetricCipherImpl(Ljava/lang/String;Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreBCWorkaroundProvider;->putMacImpl(Ljava/lang/String;Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreBCWorkaroundProvider;->putSignatureImpl(Ljava/lang/String;Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreBCWorkaroundProvider;->putSymmetricCipherImpl(Ljava/lang/String;Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;-><init>()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->addAlgorithmSpecificParametersToBegin(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->createAdditionalAuthenticationDataStreamer(Landroid/security/KeyStore;Landroid/os/IBinder;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->createMainDataStreamer(Landroid/security/KeyStore;Landroid/os/IBinder;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineDoFinal([BII)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineDoFinal([BII[BI)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineDoFinal(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineGetKeySize(Ljava/security/Key;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineGetParameters()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineInit(ILjava/security/Key;Ljava/security/AlgorithmParameters;Ljava/security/SecureRandom;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineInit(ILjava/security/Key;Ljava/security/SecureRandom;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineInit(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineSetMode(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineSetPadding(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineUnwrap([BLjava/lang/String;I)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineUpdate([BII)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineUpdate([BII[BI)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineUpdate(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineUpdateAAD([BII)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineUpdateAAD(Ljava/nio/ByteBuffer;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->engineWrap(Ljava/security/Key;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->ensureKeystoreOperationInitialized()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->finalize()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->flushAAD()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->getAdditionalEntropyAmountForBegin()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->getAdditionalEntropyAmountForFinish()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->getConsumedInputSizeBytes()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->getKeyStore()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->getKeymasterPurposeOverride()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->getOperationHandle()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->getProducedOutputSizeBytes()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->init(ILjava/security/Key;Ljava/security/SecureRandom;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->initAlgorithmSpecificParameters()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->initAlgorithmSpecificParameters(Ljava/security/AlgorithmParameters;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->initAlgorithmSpecificParameters(Ljava/security/spec/AlgorithmParameterSpec;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->initKey(ILjava/security/Key;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->isEncrypting()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->loadAlgorithmSpecificParametersFromBeginResult(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->opmodeToString(I)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->resetAll()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->resetWhilePreservingInitState()
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->setKey(Landroid/security/keystore/AndroidKeyStoreKey;)
Landroid/security/keystore/AndroidKeyStoreCipherSpiBase;->setKeymasterPurposeOverride(I)
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi;-><init>(I)
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi;->addAlgorithmSpecificParametersToBegin(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi;->getAdditionalEntropyAmountForSign()
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi;->getGroupSizeBits()
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi;->initKey(Landroid/security/keystore/AndroidKeyStoreKey;)
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi;->resetAll()
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi;->resetWhilePreservingInitState()
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$NONE;-><init>()
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$NONE;->createMainDataStreamer(Landroid/security/KeyStore;Landroid/os/IBinder;)
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$NONE$TruncateToFieldSizeMessageStreamer;-><init>(Landroid/security/keystore/KeyStoreCryptoOperationStreamer;I)
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$NONE$TruncateToFieldSizeMessageStreamer;-><init>(Landroid/security/keystore/KeyStoreCryptoOperationStreamer;ILandroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$1;)
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$NONE$TruncateToFieldSizeMessageStreamer;->doFinal([BII[B[B)
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$NONE$TruncateToFieldSizeMessageStreamer;->getConsumedInputSizeBytes()
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$NONE$TruncateToFieldSizeMessageStreamer;->getProducedOutputSizeBytes()
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$NONE$TruncateToFieldSizeMessageStreamer;->update([BII)
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$SHA1;-><init>()
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$SHA224;-><init>()
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$SHA256;-><init>()
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$SHA384;-><init>()
Landroid/security/keystore/AndroidKeyStoreECDSASignatureSpi$SHA512;-><init>()
Landroid/security/keystore/AndroidKeyStoreECPrivateKey;-><init>(Ljava/lang/String;ILjava/security/spec/ECParameterSpec;)
Landroid/security/keystore/AndroidKeyStoreECPrivateKey;->getParams()
Landroid/security/keystore/AndroidKeyStoreECPublicKey;-><init>(Ljava/lang/String;I[BLjava/security/spec/ECParameterSpec;Ljava/security/spec/ECPoint;)
Landroid/security/keystore/AndroidKeyStoreECPublicKey;-><init>(Ljava/lang/String;ILjava/security/interfaces/ECPublicKey;)
Landroid/security/keystore/AndroidKeyStoreECPublicKey;->getParams()
Landroid/security/keystore/AndroidKeyStoreECPublicKey;->getW()
Landroid/security/keystore/AndroidKeyStoreHmacSpi;-><init>(I)
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->engineDoFinal()
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->engineGetMacLength()
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->engineInit(Ljava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->engineReset()
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->engineUpdate(B)
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->engineUpdate([BII)
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->ensureKeystoreOperationInitialized()
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->finalize()
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->getOperationHandle()
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->init(Ljava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->resetAll()
Landroid/security/keystore/AndroidKeyStoreHmacSpi;->resetWhilePreservingInitState()
Landroid/security/keystore/AndroidKeyStoreHmacSpi$HmacSHA1;-><init>()
Landroid/security/keystore/AndroidKeyStoreHmacSpi$HmacSHA224;-><init>()
Landroid/security/keystore/AndroidKeyStoreHmacSpi$HmacSHA256;-><init>()
Landroid/security/keystore/AndroidKeyStoreHmacSpi$HmacSHA384;-><init>()
Landroid/security/keystore/AndroidKeyStoreHmacSpi$HmacSHA512;-><init>()
Landroid/security/keystore/AndroidKeyStoreKey;-><init>(Ljava/lang/String;ILjava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreKey;->equals(Ljava/lang/Object;)
Landroid/security/keystore/AndroidKeyStoreKey;->getAlgorithm()
Landroid/security/keystore/AndroidKeyStoreKey;->getAlias()
Landroid/security/keystore/AndroidKeyStoreKey;->getEncoded()
Landroid/security/keystore/AndroidKeyStoreKey;->getFormat()
Landroid/security/keystore/AndroidKeyStoreKey;->getUid()
Landroid/security/keystore/AndroidKeyStoreKey;->hashCode()
Landroid/security/keystore/AndroidKeyStoreKeyFactorySpi;-><init>()
Landroid/security/keystore/AndroidKeyStoreKeyFactorySpi;->engineGeneratePrivate(Ljava/security/spec/KeySpec;)
Landroid/security/keystore/AndroidKeyStoreKeyFactorySpi;->engineGeneratePublic(Ljava/security/spec/KeySpec;)
Landroid/security/keystore/AndroidKeyStoreKeyFactorySpi;->engineGetKeySpec(Ljava/security/Key;Ljava/lang/Class;)
Landroid/security/keystore/AndroidKeyStoreKeyFactorySpi;->engineTranslateKey(Ljava/security/Key;)
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;-><init>(II)
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;-><init>(III)
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->engineGenerateKey()
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->engineInit(ILjava/security/SecureRandom;)
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->engineInit(Ljava/security/SecureRandom;)
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->engineInit(Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi;->resetAll()
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$AES;-><init>()
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$AES;->engineInit(Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$DESede;-><init>()
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$HmacBase;-><init>(I)
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$HmacSHA1;-><init>()
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$HmacSHA224;-><init>()
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$HmacSHA256;-><init>()
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$HmacSHA384;-><init>()
Landroid/security/keystore/AndroidKeyStoreKeyGeneratorSpi$HmacSHA512;-><init>()
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;-><init>(I)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->addAlgorithmSpecificParameters(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->checkValidKeySize(IIZ)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->constructKeyGenerationArguments()
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->createCertificateChain(Ljava/lang/String;Ljava/security/KeyPair;)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->generateKeyPair()
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->generateKeystoreKeyPair(Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;[BI)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->generateSelfSignedCertificate(Ljava/security/PrivateKey;Ljava/security/PublicKey;)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->generateSelfSignedCertificateBytes(Ljava/security/KeyPair;)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->generateSelfSignedCertificateWithFakeSignature(Ljava/security/PublicKey;)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->generateSelfSignedCertificateWithValidSignature(Ljava/security/PrivateKey;Ljava/security/PublicKey;Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->getAttestationChain(Ljava/lang/String;Ljava/security/KeyPair;Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->getAvailableKeymasterSignatureDigests([Ljava/lang/String;[Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->getCertificateSignatureAlgorithm(IILandroid/security/keystore/KeyGenParameterSpec;)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->getDefaultKeySize(I)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->initAlgorithmSpecificParameters()
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->initialize(ILjava/security/SecureRandom;)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->initialize(Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->loadKeystoreKeyPair(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->resetAll()
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->storeCertificate(Ljava/lang/String;[BILjava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi;->storeCertificateChain(ILjava/lang/Iterable;)
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi$EC;-><init>()
Landroid/security/keystore/AndroidKeyStoreKeyPairGeneratorSpi$RSA;-><init>()
Landroid/security/keystore/AndroidKeyStoreLoadStoreParameter;-><init>(I)
Landroid/security/keystore/AndroidKeyStoreLoadStoreParameter;->getProtectionParameter()
Landroid/security/keystore/AndroidKeyStoreLoadStoreParameter;->getUid()
Landroid/security/keystore/AndroidKeyStorePrivateKey;-><init>(Ljava/lang/String;ILjava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreProvider;-><init>()
Landroid/security/keystore/AndroidKeyStoreProvider;->getAndroidKeyStorePrivateKey(Landroid/security/keystore/AndroidKeyStorePublicKey;)
Landroid/security/keystore/AndroidKeyStoreProvider;->getAndroidKeyStorePublicKey(Ljava/lang/String;ILjava/lang/String;[B)
Landroid/security/keystore/AndroidKeyStoreProvider;->getKeyCharacteristics(Landroid/security/KeyStore;Ljava/lang/String;I)
Landroid/security/keystore/AndroidKeyStoreProvider;->install()
Landroid/security/keystore/AndroidKeyStoreProvider;->loadAndroidKeyStoreKeyFromKeystore(Landroid/security/KeyStore;Ljava/lang/String;I)
Landroid/security/keystore/AndroidKeyStoreProvider;->loadAndroidKeyStoreKeyPairFromKeystore(Landroid/security/KeyStore;Ljava/lang/String;I)
Landroid/security/keystore/AndroidKeyStoreProvider;->loadAndroidKeyStoreKeyPairFromKeystore(Landroid/security/KeyStore;Ljava/lang/String;ILandroid/security/keymaster/KeyCharacteristics;)
Landroid/security/keystore/AndroidKeyStoreProvider;->loadAndroidKeyStorePrivateKeyFromKeystore(Landroid/security/KeyStore;Ljava/lang/String;I)
Landroid/security/keystore/AndroidKeyStoreProvider;->loadAndroidKeyStorePrivateKeyFromKeystore(Landroid/security/KeyStore;Ljava/lang/String;ILandroid/security/keymaster/KeyCharacteristics;)
Landroid/security/keystore/AndroidKeyStoreProvider;->loadAndroidKeyStorePublicKeyFromKeystore(Landroid/security/KeyStore;Ljava/lang/String;I)
Landroid/security/keystore/AndroidKeyStoreProvider;->loadAndroidKeyStorePublicKeyFromKeystore(Landroid/security/KeyStore;Ljava/lang/String;ILandroid/security/keymaster/KeyCharacteristics;)
Landroid/security/keystore/AndroidKeyStoreProvider;->loadAndroidKeyStoreSecretKeyFromKeystore(Ljava/lang/String;ILandroid/security/keymaster/KeyCharacteristics;)
Landroid/security/keystore/AndroidKeyStoreProvider;->putKeyFactoryImpl(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreProvider;->putSecretKeyFactoryImpl(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStorePublicKey;-><init>(Ljava/lang/String;ILjava/lang/String;[B)
Landroid/security/keystore/AndroidKeyStorePublicKey;->equals(Ljava/lang/Object;)
Landroid/security/keystore/AndroidKeyStorePublicKey;->getEncoded()
Landroid/security/keystore/AndroidKeyStorePublicKey;->getFormat()
Landroid/security/keystore/AndroidKeyStorePublicKey;->hashCode()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;-><init>(I)
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;->addAlgorithmSpecificParametersToBegin(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;->adjustConfigForEncryptingWithPrivateKey()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;->engineGetBlockSize()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;->engineGetIV()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;->engineGetOutputSize(I)
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;->getKeymasterPaddingOverride()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;->getModulusSizeBytes()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;->initKey(ILjava/security/Key;)
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;->loadAlgorithmSpecificParametersFromBeginResult(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;->resetAll()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;->resetWhilePreservingInitState()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi;->setKeymasterPaddingOverride(I)
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$NoPadding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$NoPadding;->adjustConfigForEncryptingWithPrivateKey()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$NoPadding;->engineGetParameters()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$NoPadding;->finalize()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$NoPadding;->getAdditionalEntropyAmountForBegin()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$NoPadding;->getAdditionalEntropyAmountForFinish()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$NoPadding;->initAlgorithmSpecificParameters()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$NoPadding;->initAlgorithmSpecificParameters(Ljava/security/AlgorithmParameters;)
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$NoPadding;->initAlgorithmSpecificParameters(Ljava/security/spec/AlgorithmParameterSpec;)
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithMGF1Padding;-><init>(I)
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithMGF1Padding;->addAlgorithmSpecificParametersToBegin(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithMGF1Padding;->engineGetParameters()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithMGF1Padding;->getAdditionalEntropyAmountForBegin()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithMGF1Padding;->getAdditionalEntropyAmountForFinish()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithMGF1Padding;->initAlgorithmSpecificParameters()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithMGF1Padding;->initAlgorithmSpecificParameters(Ljava/security/AlgorithmParameters;)
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithMGF1Padding;->initAlgorithmSpecificParameters(Ljava/security/spec/AlgorithmParameterSpec;)
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithMGF1Padding;->loadAlgorithmSpecificParametersFromBeginResult(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithSHA1AndMGF1Padding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithSHA1AndMGF1Padding;->finalize()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithSHA224AndMGF1Padding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithSHA224AndMGF1Padding;->finalize()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithSHA256AndMGF1Padding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithSHA256AndMGF1Padding;->finalize()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithSHA384AndMGF1Padding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithSHA384AndMGF1Padding;->finalize()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithSHA512AndMGF1Padding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$OAEPWithSHA512AndMGF1Padding;->finalize()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$PKCS1Padding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$PKCS1Padding;->adjustConfigForEncryptingWithPrivateKey()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$PKCS1Padding;->engineGetParameters()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$PKCS1Padding;->finalize()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$PKCS1Padding;->getAdditionalEntropyAmountForBegin()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$PKCS1Padding;->getAdditionalEntropyAmountForFinish()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$PKCS1Padding;->initAlgorithmSpecificParameters()
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$PKCS1Padding;->initAlgorithmSpecificParameters(Ljava/security/AlgorithmParameters;)
Landroid/security/keystore/AndroidKeyStoreRSACipherSpi$PKCS1Padding;->initAlgorithmSpecificParameters(Ljava/security/spec/AlgorithmParameterSpec;)
Landroid/security/keystore/AndroidKeyStoreRSAPrivateKey;-><init>(Ljava/lang/String;ILjava/math/BigInteger;)
Landroid/security/keystore/AndroidKeyStoreRSAPrivateKey;->getModulus()
Landroid/security/keystore/AndroidKeyStoreRSAPublicKey;-><init>(Ljava/lang/String;I[BLjava/math/BigInteger;Ljava/math/BigInteger;)
Landroid/security/keystore/AndroidKeyStoreRSAPublicKey;-><init>(Ljava/lang/String;ILjava/security/interfaces/RSAPublicKey;)
Landroid/security/keystore/AndroidKeyStoreRSAPublicKey;->getModulus()
Landroid/security/keystore/AndroidKeyStoreRSAPublicKey;->getPublicExponent()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi;-><init>(II)
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi;->addAlgorithmSpecificParametersToBegin(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi;->initKey(Landroid/security/keystore/AndroidKeyStoreKey;)
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi;->resetAll()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi;->resetWhilePreservingInitState()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$MD5WithPKCS1Padding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$NONEWithPKCS1Padding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$PKCS1Padding;-><init>(I)
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$PKCS1Padding;->getAdditionalEntropyAmountForSign()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$PSSPadding;-><init>(I)
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$PSSPadding;->getAdditionalEntropyAmountForSign()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA1WithPKCS1Padding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA1WithPSSPadding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA224WithPKCS1Padding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA224WithPSSPadding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA256WithPKCS1Padding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA256WithPSSPadding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA384WithPKCS1Padding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA384WithPSSPadding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA512WithPKCS1Padding;-><init>()
Landroid/security/keystore/AndroidKeyStoreRSASignatureSpi$SHA512WithPSSPadding;-><init>()
Landroid/security/keystore/AndroidKeyStoreSecretKey;-><init>(Ljava/lang/String;ILjava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreSecretKeyFactorySpi;-><init>()
Landroid/security/keystore/AndroidKeyStoreSecretKeyFactorySpi;->engineGenerateSecret(Ljava/security/spec/KeySpec;)
Landroid/security/keystore/AndroidKeyStoreSecretKeyFactorySpi;->engineGetKeySpec(Ljavax/crypto/SecretKey;Ljava/lang/Class;)
Landroid/security/keystore/AndroidKeyStoreSecretKeyFactorySpi;->engineTranslateKey(Ljavax/crypto/SecretKey;)
Landroid/security/keystore/AndroidKeyStoreSecretKeyFactorySpi;->getGateKeeperSecureUserId()
Landroid/security/keystore/AndroidKeyStoreSecretKeyFactorySpi;->getKeyInfo(Landroid/security/KeyStore;Ljava/lang/String;Ljava/lang/String;I)
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;-><init>()
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->addAlgorithmSpecificParametersToBegin(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->createMainDataStreamer(Landroid/security/KeyStore;Landroid/os/IBinder;)
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->engineGetParameter(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->engineInitSign(Ljava/security/PrivateKey;)
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->engineInitSign(Ljava/security/PrivateKey;Ljava/security/SecureRandom;)
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->engineInitVerify(Ljava/security/PublicKey;)
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->engineSetParameter(Ljava/lang/String;Ljava/lang/Object;)
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->engineSign()
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->engineSign([BII)
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->engineUpdate(B)
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->engineUpdate([BII)
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->engineUpdate(Ljava/nio/ByteBuffer;)
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->engineVerify([B)
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->engineVerify([BII)
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->ensureKeystoreOperationInitialized()
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->getAdditionalEntropyAmountForSign()
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->getKeyStore()
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->getOperationHandle()
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->initKey(Landroid/security/keystore/AndroidKeyStoreKey;)
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->isSigning()
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->resetAll()
Landroid/security/keystore/AndroidKeyStoreSignatureSpiBase;->resetWhilePreservingInitState()
Landroid/security/keystore/AndroidKeyStoreSpi;-><init>()
Landroid/security/keystore/AndroidKeyStoreSpi;->engineAliases()
Landroid/security/keystore/AndroidKeyStoreSpi;->engineContainsAlias(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreSpi;->engineDeleteEntry(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreSpi;->engineGetCertificate(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreSpi;->engineGetCertificateAlias(Ljava/security/cert/Certificate;)
Landroid/security/keystore/AndroidKeyStoreSpi;->engineGetCertificateChain(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreSpi;->engineGetCreationDate(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreSpi;->engineGetKey(Ljava/lang/String;[C)
Landroid/security/keystore/AndroidKeyStoreSpi;->engineIsCertificateEntry(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreSpi;->engineIsKeyEntry(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreSpi;->engineLoad(Ljava/io/InputStream;[C)
Landroid/security/keystore/AndroidKeyStoreSpi;->engineLoad(Ljava/security/KeyStore$LoadStoreParameter;)
Landroid/security/keystore/AndroidKeyStoreSpi;->engineSetCertificateEntry(Ljava/lang/String;Ljava/security/cert/Certificate;)
Landroid/security/keystore/AndroidKeyStoreSpi;->engineSetEntry(Ljava/lang/String;Ljava/security/KeyStore$Entry;Ljava/security/KeyStore$ProtectionParameter;)
Landroid/security/keystore/AndroidKeyStoreSpi;->engineSetKeyEntry(Ljava/lang/String;[B[Ljava/security/cert/Certificate;)
Landroid/security/keystore/AndroidKeyStoreSpi;->engineSetKeyEntry(Ljava/lang/String;Ljava/security/Key;[C[Ljava/security/cert/Certificate;)
Landroid/security/keystore/AndroidKeyStoreSpi;->engineSize()
Landroid/security/keystore/AndroidKeyStoreSpi;->engineStore(Ljava/io/OutputStream;[C)
Landroid/security/keystore/AndroidKeyStoreSpi;->getCertificateForPrivateKeyEntry(Ljava/lang/String;[B)
Landroid/security/keystore/AndroidKeyStoreSpi;->getCertificateForTrustedCertificateEntry([B)
Landroid/security/keystore/AndroidKeyStoreSpi;->getLegacyKeyProtectionParameter(Ljava/security/PrivateKey;)
Landroid/security/keystore/AndroidKeyStoreSpi;->getModificationDate(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreSpi;->getUniqueAliases()
Landroid/security/keystore/AndroidKeyStoreSpi;->isCertificateEntry(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreSpi;->isKeyEntry(Ljava/lang/String;)
Landroid/security/keystore/AndroidKeyStoreSpi;->setPrivateKeyEntry(Ljava/lang/String;Ljava/security/PrivateKey;[Ljava/security/cert/Certificate;Ljava/security/KeyStore$ProtectionParameter;)
Landroid/security/keystore/AndroidKeyStoreSpi;->setSecretKeyEntry(Ljava/lang/String;Ljavax/crypto/SecretKey;Ljava/security/KeyStore$ProtectionParameter;)
Landroid/security/keystore/AndroidKeyStoreSpi;->setWrappedKeyEntry(Ljava/lang/String;Landroid/security/keystore/WrappedKeyEntry;Ljava/security/KeyStore$ProtectionParameter;)
Landroid/security/keystore/AndroidKeyStoreSpi;->toCertificate([B)
Landroid/security/keystore/AndroidKeyStoreSpi;->toCertificates([B)
Landroid/security/keystore/AndroidKeyStoreSpi;->wrapIntoKeyStoreCertificate(Ljava/lang/String;ILjava/security/cert/X509Certificate;)
Landroid/security/keystore/AndroidKeyStoreSpi$KeyStoreX509Certificate;-><init>(Ljava/lang/String;ILjava/security/cert/X509Certificate;)
Landroid/security/keystore/AndroidKeyStoreSpi$KeyStoreX509Certificate;->getPublicKey()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;-><init>(IIZ)
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->addAlgorithmSpecificParametersToBegin(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->engineGetBlockSize()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->engineGetIV()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->engineGetOutputSize(I)
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->engineGetParameters()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->getAdditionalEntropyAmountForBegin()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->getAdditionalEntropyAmountForFinish()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->initAlgorithmSpecificParameters()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->initAlgorithmSpecificParameters(Ljava/security/AlgorithmParameters;)
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->initAlgorithmSpecificParameters(Ljava/security/spec/AlgorithmParameterSpec;)
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->initKey(ILjava/security/Key;)
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->loadAlgorithmSpecificParametersFromBeginResult(Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->resetAll()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi;->resetWhilePreservingInitState()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$CBC;-><init>(I)
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$CBC$NoPadding;-><init>()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$CBC$NoPadding;->finalize()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$CBC$PKCS7Padding;-><init>()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$CBC$PKCS7Padding;->finalize()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$CTR;-><init>(I)
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$CTR$NoPadding;-><init>()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$CTR$NoPadding;->finalize()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$ECB;-><init>(I)
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$ECB$NoPadding;-><init>()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$ECB$NoPadding;->finalize()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$ECB$PKCS7Padding;-><init>()
Landroid/security/keystore/AndroidKeyStoreUnauthenticatedAESCipherSpi$ECB$PKCS7Padding;->finalize()
Landroid/security/keystore/AttestationUtils;->isPotentiallyMisprovisionedDevice(Landroid/content/Context;)
Landroid/security/keystore/AttestationUtils;->prepareAttestationArguments(Landroid/content/Context;[I[B)
Landroid/security/keystore/AttestationUtils;->prepareAttestationArguments(Landroid/content/Context;[I[BLjava/lang/String;)
Landroid/security/keystore/AttestationUtils;->prepareAttestationArgumentsForDeviceId(Landroid/content/Context;[I[B)
Landroid/security/keystore/AttestationUtils;->prepareAttestationArgumentsIfMisprovisioned(Landroid/content/Context;[I[B)
Landroid/security/keystore/ICredstoreTokenCallback;->onFinished(Z[B[B)
Landroid/security/keystore/ICredstoreTokenCallback$Default;-><init>()
Landroid/security/keystore/ICredstoreTokenCallback$Default;->asBinder()
Landroid/security/keystore/ICredstoreTokenCallback$Default;->onFinished(Z[B[B)
Landroid/security/keystore/ICredstoreTokenCallback$Stub;-><init>()
Landroid/security/keystore/ICredstoreTokenCallback$Stub;->asBinder()
Landroid/security/keystore/ICredstoreTokenCallback$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/security/keystore/ICredstoreTokenCallback$Stub;->getDefaultImpl()
Landroid/security/keystore/ICredstoreTokenCallback$Stub;->getDefaultTransactionName(I)
Landroid/security/keystore/ICredstoreTokenCallback$Stub;->getTransactionName(I)
Landroid/security/keystore/ICredstoreTokenCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/security/keystore/ICredstoreTokenCallback$Stub;->setDefaultImpl(Landroid/security/keystore/ICredstoreTokenCallback;)
Landroid/security/keystore/ICredstoreTokenCallback$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/security/keystore/ICredstoreTokenCallback$Stub$Proxy;->asBinder()
Landroid/security/keystore/ICredstoreTokenCallback$Stub$Proxy;->getInterfaceDescriptor()
Landroid/security/keystore/ICredstoreTokenCallback$Stub$Proxy;->onFinished(Z[B[B)
Landroid/security/keystore/IKeystoreCertificateChainCallback;->onFinished(Landroid/security/keystore/KeystoreResponse;Landroid/security/keymaster/KeymasterCertificateChain;)
Landroid/security/keystore/IKeystoreCertificateChainCallback$Default;-><init>()
Landroid/security/keystore/IKeystoreCertificateChainCallback$Default;->asBinder()
Landroid/security/keystore/IKeystoreCertificateChainCallback$Default;->onFinished(Landroid/security/keystore/KeystoreResponse;Landroid/security/keymaster/KeymasterCertificateChain;)
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub;-><init>()
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub;->asBinder()
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub;->getDefaultImpl()
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub;->getDefaultTransactionName(I)
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub;->getTransactionName(I)
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub;->setDefaultImpl(Landroid/security/keystore/IKeystoreCertificateChainCallback;)
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub$Proxy;->asBinder()
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub$Proxy;->getInterfaceDescriptor()
Landroid/security/keystore/IKeystoreCertificateChainCallback$Stub$Proxy;->onFinished(Landroid/security/keystore/KeystoreResponse;Landroid/security/keymaster/KeymasterCertificateChain;)
Landroid/security/keystore/IKeystoreExportKeyCallback;->onFinished(Landroid/security/keymaster/ExportResult;)
Landroid/security/keystore/IKeystoreExportKeyCallback$Default;-><init>()
Landroid/security/keystore/IKeystoreExportKeyCallback$Default;->asBinder()
Landroid/security/keystore/IKeystoreExportKeyCallback$Default;->onFinished(Landroid/security/keymaster/ExportResult;)
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub;-><init>()
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub;->asBinder()
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub;->getDefaultImpl()
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub;->getDefaultTransactionName(I)
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub;->getTransactionName(I)
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub;->setDefaultImpl(Landroid/security/keystore/IKeystoreExportKeyCallback;)
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub$Proxy;->asBinder()
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub$Proxy;->getInterfaceDescriptor()
Landroid/security/keystore/IKeystoreExportKeyCallback$Stub$Proxy;->onFinished(Landroid/security/keymaster/ExportResult;)
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback;->onFinished(Landroid/security/keystore/KeystoreResponse;Landroid/security/keymaster/KeyCharacteristics;)
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Default;-><init>()
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Default;->asBinder()
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Default;->onFinished(Landroid/security/keystore/KeystoreResponse;Landroid/security/keymaster/KeyCharacteristics;)
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub;-><init>()
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub;->asBinder()
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub;->getDefaultImpl()
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub;->getDefaultTransactionName(I)
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub;->getTransactionName(I)
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub;->setDefaultImpl(Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback;)
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub$Proxy;->asBinder()
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub$Proxy;->getInterfaceDescriptor()
Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback$Stub$Proxy;->onFinished(Landroid/security/keystore/KeystoreResponse;Landroid/security/keymaster/KeyCharacteristics;)
Landroid/security/keystore/IKeystoreOperationResultCallback;->onFinished(Landroid/security/keymaster/OperationResult;)
Landroid/security/keystore/IKeystoreOperationResultCallback$Default;-><init>()
Landroid/security/keystore/IKeystoreOperationResultCallback$Default;->asBinder()
Landroid/security/keystore/IKeystoreOperationResultCallback$Default;->onFinished(Landroid/security/keymaster/OperationResult;)
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub;-><init>()
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub;->asBinder()
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub;->getDefaultImpl()
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub;->getDefaultTransactionName(I)
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub;->getTransactionName(I)
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub;->setDefaultImpl(Landroid/security/keystore/IKeystoreOperationResultCallback;)
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub$Proxy;->asBinder()
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub$Proxy;->getInterfaceDescriptor()
Landroid/security/keystore/IKeystoreOperationResultCallback$Stub$Proxy;->onFinished(Landroid/security/keymaster/OperationResult;)
Landroid/security/keystore/IKeystoreResponseCallback;->onFinished(Landroid/security/keystore/KeystoreResponse;)
Landroid/security/keystore/IKeystoreResponseCallback$Default;-><init>()
Landroid/security/keystore/IKeystoreResponseCallback$Default;->asBinder()
Landroid/security/keystore/IKeystoreResponseCallback$Default;->onFinished(Landroid/security/keystore/KeystoreResponse;)
Landroid/security/keystore/IKeystoreResponseCallback$Stub;-><init>()
Landroid/security/keystore/IKeystoreResponseCallback$Stub;->asBinder()
Landroid/security/keystore/IKeystoreResponseCallback$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreResponseCallback$Stub;->getDefaultImpl()
Landroid/security/keystore/IKeystoreResponseCallback$Stub;->getDefaultTransactionName(I)
Landroid/security/keystore/IKeystoreResponseCallback$Stub;->getTransactionName(I)
Landroid/security/keystore/IKeystoreResponseCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/security/keystore/IKeystoreResponseCallback$Stub;->setDefaultImpl(Landroid/security/keystore/IKeystoreResponseCallback;)
Landroid/security/keystore/IKeystoreResponseCallback$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreResponseCallback$Stub$Proxy;->asBinder()
Landroid/security/keystore/IKeystoreResponseCallback$Stub$Proxy;->getInterfaceDescriptor()
Landroid/security/keystore/IKeystoreResponseCallback$Stub$Proxy;->onFinished(Landroid/security/keystore/KeystoreResponse;)
Landroid/security/keystore/IKeystoreService;->abort(Landroid/security/keystore/IKeystoreResponseCallback;Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreService;->addAuthToken([B)
Landroid/security/keystore/IKeystoreService;->addRngEntropy(Landroid/security/keystore/IKeystoreResponseCallback;[BI)
Landroid/security/keystore/IKeystoreService;->attestDeviceIds(Landroid/security/keystore/IKeystoreCertificateChainCallback;Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/IKeystoreService;->attestKey(Landroid/security/keystore/IKeystoreCertificateChainCallback;Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/IKeystoreService;->begin(Landroid/security/keystore/IKeystoreOperationResultCallback;Landroid/os/IBinder;Ljava/lang/String;IZLandroid/security/keymaster/KeymasterArguments;[BI)
Landroid/security/keystore/IKeystoreService;->cancelConfirmationPrompt(Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreService;->clear_uid(J)
Landroid/security/keystore/IKeystoreService;->del(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService;->exist(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService;->exportKey(Landroid/security/keystore/IKeystoreExportKeyCallback;Ljava/lang/String;ILandroid/security/keymaster/KeymasterBlob;Landroid/security/keymaster/KeymasterBlob;I)
Landroid/security/keystore/IKeystoreService;->finish(Landroid/security/keystore/IKeystoreOperationResultCallback;Landroid/os/IBinder;Landroid/security/keymaster/KeymasterArguments;[B[B[B)
Landroid/security/keystore/IKeystoreService;->generateKey(Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback;Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;[BII)
Landroid/security/keystore/IKeystoreService;->get(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService;->getKeyCharacteristics(Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback;Ljava/lang/String;Landroid/security/keymaster/KeymasterBlob;Landroid/security/keymaster/KeymasterBlob;I)
Landroid/security/keystore/IKeystoreService;->getState(I)
Landroid/security/keystore/IKeystoreService;->getTokensForCredstore(JJILandroid/security/keystore/ICredstoreTokenCallback;)
Landroid/security/keystore/IKeystoreService;->getmtime(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService;->grant(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService;->importKey(Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback;Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;I[BII)
Landroid/security/keystore/IKeystoreService;->importWrappedKey(Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback;Ljava/lang/String;[BLjava/lang/String;[BLandroid/security/keymaster/KeymasterArguments;JJ)
Landroid/security/keystore/IKeystoreService;->insert(Ljava/lang/String;[BII)
Landroid/security/keystore/IKeystoreService;->isConfirmationPromptSupported()
Landroid/security/keystore/IKeystoreService;->isEmpty(I)
Landroid/security/keystore/IKeystoreService;->is_hardware_backed(Ljava/lang/String;)
Landroid/security/keystore/IKeystoreService;->list(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService;->listUidsOfAuthBoundKeys(Ljava/util/List;)
Landroid/security/keystore/IKeystoreService;->lock(I)
Landroid/security/keystore/IKeystoreService;->onDeviceOffBody()
Landroid/security/keystore/IKeystoreService;->onKeyguardVisibilityChanged(ZI)
Landroid/security/keystore/IKeystoreService;->onUserAdded(II)
Landroid/security/keystore/IKeystoreService;->onUserPasswordChanged(ILjava/lang/String;)
Landroid/security/keystore/IKeystoreService;->onUserRemoved(I)
Landroid/security/keystore/IKeystoreService;->presentConfirmationPrompt(Landroid/os/IBinder;Ljava/lang/String;[BLjava/lang/String;I)
Landroid/security/keystore/IKeystoreService;->ungrant(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService;->unlock(ILjava/lang/String;)
Landroid/security/keystore/IKeystoreService;->update(Landroid/security/keystore/IKeystoreOperationResultCallback;Landroid/os/IBinder;Landroid/security/keymaster/KeymasterArguments;[B)
Landroid/security/keystore/IKeystoreService$Default;-><init>()
Landroid/security/keystore/IKeystoreService$Default;->abort(Landroid/security/keystore/IKeystoreResponseCallback;Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreService$Default;->addAuthToken([B)
Landroid/security/keystore/IKeystoreService$Default;->addRngEntropy(Landroid/security/keystore/IKeystoreResponseCallback;[BI)
Landroid/security/keystore/IKeystoreService$Default;->asBinder()
Landroid/security/keystore/IKeystoreService$Default;->attestDeviceIds(Landroid/security/keystore/IKeystoreCertificateChainCallback;Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/IKeystoreService$Default;->attestKey(Landroid/security/keystore/IKeystoreCertificateChainCallback;Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/IKeystoreService$Default;->begin(Landroid/security/keystore/IKeystoreOperationResultCallback;Landroid/os/IBinder;Ljava/lang/String;IZLandroid/security/keymaster/KeymasterArguments;[BI)
Landroid/security/keystore/IKeystoreService$Default;->cancelConfirmationPrompt(Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreService$Default;->clear_uid(J)
Landroid/security/keystore/IKeystoreService$Default;->del(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Default;->exist(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Default;->exportKey(Landroid/security/keystore/IKeystoreExportKeyCallback;Ljava/lang/String;ILandroid/security/keymaster/KeymasterBlob;Landroid/security/keymaster/KeymasterBlob;I)
Landroid/security/keystore/IKeystoreService$Default;->finish(Landroid/security/keystore/IKeystoreOperationResultCallback;Landroid/os/IBinder;Landroid/security/keymaster/KeymasterArguments;[B[B[B)
Landroid/security/keystore/IKeystoreService$Default;->generateKey(Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback;Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;[BII)
Landroid/security/keystore/IKeystoreService$Default;->get(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Default;->getKeyCharacteristics(Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback;Ljava/lang/String;Landroid/security/keymaster/KeymasterBlob;Landroid/security/keymaster/KeymasterBlob;I)
Landroid/security/keystore/IKeystoreService$Default;->getState(I)
Landroid/security/keystore/IKeystoreService$Default;->getTokensForCredstore(JJILandroid/security/keystore/ICredstoreTokenCallback;)
Landroid/security/keystore/IKeystoreService$Default;->getmtime(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Default;->grant(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Default;->importKey(Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback;Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;I[BII)
Landroid/security/keystore/IKeystoreService$Default;->importWrappedKey(Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback;Ljava/lang/String;[BLjava/lang/String;[BLandroid/security/keymaster/KeymasterArguments;JJ)
Landroid/security/keystore/IKeystoreService$Default;->insert(Ljava/lang/String;[BII)
Landroid/security/keystore/IKeystoreService$Default;->isConfirmationPromptSupported()
Landroid/security/keystore/IKeystoreService$Default;->isEmpty(I)
Landroid/security/keystore/IKeystoreService$Default;->is_hardware_backed(Ljava/lang/String;)
Landroid/security/keystore/IKeystoreService$Default;->list(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Default;->listUidsOfAuthBoundKeys(Ljava/util/List;)
Landroid/security/keystore/IKeystoreService$Default;->lock(I)
Landroid/security/keystore/IKeystoreService$Default;->onDeviceOffBody()
Landroid/security/keystore/IKeystoreService$Default;->onKeyguardVisibilityChanged(ZI)
Landroid/security/keystore/IKeystoreService$Default;->onUserAdded(II)
Landroid/security/keystore/IKeystoreService$Default;->onUserPasswordChanged(ILjava/lang/String;)
Landroid/security/keystore/IKeystoreService$Default;->onUserRemoved(I)
Landroid/security/keystore/IKeystoreService$Default;->presentConfirmationPrompt(Landroid/os/IBinder;Ljava/lang/String;[BLjava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Default;->ungrant(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Default;->unlock(ILjava/lang/String;)
Landroid/security/keystore/IKeystoreService$Default;->update(Landroid/security/keystore/IKeystoreOperationResultCallback;Landroid/os/IBinder;Landroid/security/keymaster/KeymasterArguments;[B)
Landroid/security/keystore/IKeystoreService$Stub;-><init>()
Landroid/security/keystore/IKeystoreService$Stub;->asBinder()
Landroid/security/keystore/IKeystoreService$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreService$Stub;->getDefaultImpl()
Landroid/security/keystore/IKeystoreService$Stub;->getDefaultTransactionName(I)
Landroid/security/keystore/IKeystoreService$Stub;->getTransactionName(I)
Landroid/security/keystore/IKeystoreService$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/security/keystore/IKeystoreService$Stub;->setDefaultImpl(Landroid/security/keystore/IKeystoreService;)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->abort(Landroid/security/keystore/IKeystoreResponseCallback;Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->addAuthToken([B)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->addRngEntropy(Landroid/security/keystore/IKeystoreResponseCallback;[BI)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->asBinder()
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->attestDeviceIds(Landroid/security/keystore/IKeystoreCertificateChainCallback;Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->attestKey(Landroid/security/keystore/IKeystoreCertificateChainCallback;Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->begin(Landroid/security/keystore/IKeystoreOperationResultCallback;Landroid/os/IBinder;Ljava/lang/String;IZLandroid/security/keymaster/KeymasterArguments;[BI)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->cancelConfirmationPrompt(Landroid/os/IBinder;)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->clear_uid(J)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->del(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->exist(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->exportKey(Landroid/security/keystore/IKeystoreExportKeyCallback;Ljava/lang/String;ILandroid/security/keymaster/KeymasterBlob;Landroid/security/keymaster/KeymasterBlob;I)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->finish(Landroid/security/keystore/IKeystoreOperationResultCallback;Landroid/os/IBinder;Landroid/security/keymaster/KeymasterArguments;[B[B[B)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->generateKey(Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback;Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;[BII)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->get(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->getInterfaceDescriptor()
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->getKeyCharacteristics(Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback;Ljava/lang/String;Landroid/security/keymaster/KeymasterBlob;Landroid/security/keymaster/KeymasterBlob;I)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->getState(I)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->getTokensForCredstore(JJILandroid/security/keystore/ICredstoreTokenCallback;)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->getmtime(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->grant(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->importKey(Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback;Ljava/lang/String;Landroid/security/keymaster/KeymasterArguments;I[BII)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->importWrappedKey(Landroid/security/keystore/IKeystoreKeyCharacteristicsCallback;Ljava/lang/String;[BLjava/lang/String;[BLandroid/security/keymaster/KeymasterArguments;JJ)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->insert(Ljava/lang/String;[BII)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->isConfirmationPromptSupported()
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->isEmpty(I)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->is_hardware_backed(Ljava/lang/String;)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->list(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->listUidsOfAuthBoundKeys(Ljava/util/List;)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->lock(I)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->onDeviceOffBody()
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->onKeyguardVisibilityChanged(ZI)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->onUserAdded(II)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->onUserPasswordChanged(ILjava/lang/String;)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->onUserRemoved(I)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->presentConfirmationPrompt(Landroid/os/IBinder;Ljava/lang/String;[BLjava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->ungrant(Ljava/lang/String;I)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->unlock(ILjava/lang/String;)
Landroid/security/keystore/IKeystoreService$Stub$Proxy;->update(Landroid/security/keystore/IKeystoreOperationResultCallback;Landroid/os/IBinder;Landroid/security/keymaster/KeymasterArguments;[B)
Landroid/security/keystore/KeyGenParameterSpec;-><init>(Ljava/lang/String;IILjava/security/spec/AlgorithmParameterSpec;Ljavax/security/auth/x500/X500Principal;Ljava/math/BigInteger;Ljava/util/Date;Ljava/util/Date;Ljava/util/Date;Ljava/util/Date;Ljava/util/Date;I[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;ZZIIZ[BZZZZZZZ)
Landroid/security/keystore/KeyInfo;-><init>(Ljava/lang/String;ZIILjava/util/Date;Ljava/util/Date;Ljava/util/Date;I[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;ZIIZZZZZ)
Landroid/security/keystore/KeyProtection;-><init>(Ljava/util/Date;Ljava/util/Date;Ljava/util/Date;I[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;ZZIIZZZJZZZZ)
Landroid/security/keystore/KeyProtection;-><init>(Ljava/util/Date;Ljava/util/Date;Ljava/util/Date;I[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;ZZIIZZZJZZZZLandroid/security/keystore/KeyProtection$1;)
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;-><init>(Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer$Stream;)
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;-><init>(Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer$Stream;I)
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;-><init>(Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer$Stream;II)
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;->doFinal([BII[B[B)
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;->getConsumedInputSizeBytes()
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;->getProducedOutputSizeBytes()
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer;->update([BII)
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer$MainDataStream;-><init>(Landroid/security/KeyStore;Landroid/os/IBinder;)
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer$MainDataStream;->finish([B[B[B)
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer$MainDataStream;->update([B)
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer$Stream;->finish([B[B[B)
Landroid/security/keystore/KeyStoreCryptoOperationChunkedStreamer$Stream;->update([B)
Landroid/security/keystore/KeyStoreCryptoOperationStreamer;->doFinal([BII[B[B)
Landroid/security/keystore/KeyStoreCryptoOperationStreamer;->getConsumedInputSizeBytes()
Landroid/security/keystore/KeyStoreCryptoOperationStreamer;->getProducedOutputSizeBytes()
Landroid/security/keystore/KeyStoreCryptoOperationStreamer;->update([BII)
Landroid/security/keystore/KeyStoreCryptoOperationUtils;-><init>()
Landroid/security/keystore/KeyStoreCryptoOperationUtils;->getExceptionForCipherInit(Landroid/security/KeyStore;Landroid/security/keystore/AndroidKeyStoreKey;I)
Landroid/security/keystore/KeyStoreCryptoOperationUtils;->getInvalidKeyExceptionForInit(Landroid/security/KeyStore;Landroid/security/keystore/AndroidKeyStoreKey;I)
Landroid/security/keystore/KeyStoreCryptoOperationUtils;->getRandomBytesToMixIntoKeystoreRng(Ljava/security/SecureRandom;I)
Landroid/security/keystore/KeyStoreCryptoOperationUtils;->getRng()
Landroid/security/keystore/KeymasterUtils;-><init>()
Landroid/security/keystore/KeymasterUtils;->addMinMacLengthAuthorizationIfNecessary(Landroid/security/keymaster/KeymasterArguments;I[I[I)
Landroid/security/keystore/KeymasterUtils;->addSids(Landroid/security/keymaster/KeymasterArguments;Landroid/security/keystore/UserAuthArgs;)
Landroid/security/keystore/KeymasterUtils;->addUserAuthArgs(Landroid/security/keymaster/KeymasterArguments;Landroid/security/keystore/UserAuthArgs;)
Landroid/security/keystore/KeymasterUtils;->getDigestOutputSizeBits(I)
Landroid/security/keystore/KeymasterUtils;->getRootSid()
Landroid/security/keystore/KeymasterUtils;->isKeymasterBlockModeIndCpaCompatibleWithSymmetricCrypto(I)
Landroid/security/keystore/KeymasterUtils;->isKeymasterPaddingSchemeIndCpaCompatibleWithAsymmetricCrypto(I)
Landroid/service/autofill/IInlineSuggestionRenderService;->renderSuggestion(Landroid/service/autofill/IInlineSuggestionUiCallback;Landroid/service/autofill/InlinePresentation;IILandroid/os/IBinder;I)
Landroid/service/autofill/IInlineSuggestionRenderService$Default;->renderSuggestion(Landroid/service/autofill/IInlineSuggestionUiCallback;Landroid/service/autofill/InlinePresentation;IILandroid/os/IBinder;I)
Landroid/service/autofill/IInlineSuggestionRenderService$Stub$Proxy;->renderSuggestion(Landroid/service/autofill/IInlineSuggestionUiCallback;Landroid/service/autofill/InlinePresentation;IILandroid/os/IBinder;I)
Landroid/service/autofill/InlineSuggestionRenderService;->handleRenderSuggestion(Landroid/service/autofill/IInlineSuggestionUiCallback;Landroid/service/autofill/InlinePresentation;IILandroid/os/IBinder;I)
Landroid/service/autofill/InlineSuggestionRenderService$InlineSuggestionUiImpl;-><init>(Landroid/service/autofill/InlineSuggestionRenderService;Landroid/view/SurfaceControlViewHost;Landroid/os/Handler;)
Landroid/service/autofill/augmented/AugmentedAutofillService$AutofillProxy;->reportResult(Ljava/util/List;Landroid/os/Bundle;)
Landroid/service/autofill/augmented/IFillCallback;->onSuccess(Ljava/util/List;Landroid/os/Bundle;)
Landroid/service/autofill/augmented/IFillCallback$Default;->onSuccess(Ljava/util/List;Landroid/os/Bundle;)
Landroid/service/autofill/augmented/IFillCallback$Stub$Proxy;->onSuccess(Ljava/util/List;Landroid/os/Bundle;)
Landroid/service/carrier/CarrierMessagingServiceWrapper;->bindToCarrierMessagingService(Landroid/content/Context;Ljava/lang/String;)
Landroid/service/carrier/CarrierMessagingServiceWrapper;->disposeConnection(Landroid/content/Context;)
Landroid/service/carrier/CarrierMessagingServiceWrapper;->downloadMms(Landroid/net/Uri;ILandroid/net/Uri;Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper;)
Landroid/service/carrier/CarrierMessagingServiceWrapper;->filterSms(Landroid/service/carrier/MessagePdu;Ljava/lang/String;IILandroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper;)
Landroid/service/carrier/CarrierMessagingServiceWrapper;->onServiceReady()
Landroid/service/carrier/CarrierMessagingServiceWrapper;->sendDataSms([BILjava/lang/String;IILandroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper;)
Landroid/service/carrier/CarrierMessagingServiceWrapper;->sendMms(Landroid/net/Uri;ILandroid/net/Uri;Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper;)
Landroid/service/carrier/CarrierMessagingServiceWrapper;->sendMultipartTextSms(Ljava/util/List;ILjava/lang/String;ILandroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper;)
Landroid/service/carrier/CarrierMessagingServiceWrapper;->sendTextSms(Ljava/lang/String;ILjava/lang/String;ILandroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper;)
Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper;-><init>()
Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper;->onDownloadMmsComplete(I)
Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper;->onFilterComplete(I)
Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper;->onSendMmsComplete(I[B)
Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper;->onSendMultipartSmsComplete(I[I)
Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper;->onSendSmsComplete(II)
Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapperInternal;-><init>(Landroid/service/carrier/CarrierMessagingServiceWrapper;Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper;)
Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapperInternal;->onDownloadMmsComplete(I)
Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapperInternal;->onFilterComplete(I)
Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapperInternal;->onSendMmsComplete(I[B)
Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapperInternal;->onSendMultipartSmsComplete(I[I)
Landroid/service/carrier/CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapperInternal;->onSendSmsComplete(II)
Landroid/service/contentsuggestions/IContentSuggestionsService;->provideContextImage(ILandroid/graphics/GraphicBuffer;ILandroid/os/Bundle;)
Landroid/service/contentsuggestions/IContentSuggestionsService$Default;->provideContextImage(ILandroid/graphics/GraphicBuffer;ILandroid/os/Bundle;)
Landroid/service/contentsuggestions/IContentSuggestionsService$Stub$Proxy;->provideContextImage(ILandroid/graphics/GraphicBuffer;ILandroid/os/Bundle;)
Landroid/service/media/IMediaBrowserServiceCallbacks;->onLoadChildren(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;)
Landroid/service/media/IMediaBrowserServiceCallbacks;->onLoadChildrenWithOptions(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;Landroid/os/Bundle;)
Landroid/service/media/IMediaBrowserServiceCallbacks$Default;->onLoadChildren(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;)
Landroid/service/media/IMediaBrowserServiceCallbacks$Default;->onLoadChildrenWithOptions(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;Landroid/os/Bundle;)
Landroid/service/media/IMediaBrowserServiceCallbacks$Stub$Proxy;->onLoadChildren(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;)
Landroid/service/media/IMediaBrowserServiceCallbacks$Stub$Proxy;->onLoadChildrenWithOptions(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;Landroid/os/Bundle;)
Landroid/service/notification/INotificationListener;->onNotificationEnqueuedWithChannel(Landroid/service/notification/IStatusBarNotificationHolder;Landroid/app/NotificationChannel;)
Landroid/service/notification/INotificationListener$Default;->onNotificationEnqueuedWithChannel(Landroid/service/notification/IStatusBarNotificationHolder;Landroid/app/NotificationChannel;)
Landroid/service/notification/INotificationListener$Stub$Proxy;->onNotificationEnqueuedWithChannel(Landroid/service/notification/IStatusBarNotificationHolder;Landroid/app/NotificationChannel;)
Landroid/service/notification/NotificationAssistantService$NotificationAssistantServiceWrapper;->onNotificationEnqueuedWithChannel(Landroid/service/notification/IStatusBarNotificationHolder;Landroid/app/NotificationChannel;)
Landroid/service/notification/NotificationListenerService$NotificationListenerWrapper;->onNotificationEnqueuedWithChannel(Landroid/service/notification/IStatusBarNotificationHolder;Landroid/app/NotificationChannel;)
Landroid/service/notification/NotificationListenerService$Ranking;->getShortcutInfo()
Landroid/service/notification/NotificationListenerService$Ranking;->getVisibilityOverride()
Landroid/service/notification/NotificationListenerService$Ranking;->populate(Ljava/lang/String;IZIIILjava/lang/CharSequence;Ljava/lang/String;Landroid/app/NotificationChannel;Ljava/util/ArrayList;Ljava/util/ArrayList;ZIZJZLjava/util/ArrayList;Ljava/util/ArrayList;ZZZLandroid/content/pm/ShortcutInfo;Z)
Landroid/service/notification/ZenModeConfig;->readConditionXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/service/notification/ZenModeConfig;->readRuleXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/service/notification/ZenModeConfig;->readXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/service/notification/ZenModeConfig;->readZenPolicyXml(Lorg/xmlpull/v1/XmlPullParser;)
Landroid/service/notification/ZenModeConfig;->safeBoolean(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;Z)
Landroid/service/notification/ZenModeConfig;->safeComponentName(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Landroid/service/notification/ZenModeConfig;->safeInt(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;I)
Landroid/service/notification/ZenModeConfig;->safeLong(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;J)
Landroid/service/notification/ZenModeConfig;->safeUri(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Landroid/service/notification/ZenModeConfig;->unsafeBoolean(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Landroid/service/notification/ZenModeConfig;->writeConditionXml(Landroid/service/notification/Condition;Lorg/xmlpull/v1/XmlSerializer;)
Landroid/service/notification/ZenModeConfig;->writeRuleXml(Landroid/service/notification/ZenModeConfig$ZenRule;Lorg/xmlpull/v1/XmlSerializer;)
Landroid/service/notification/ZenModeConfig;->writeXml(Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/Integer;)
Landroid/service/notification/ZenModeConfig;->writeZenPolicyState(Ljava/lang/String;ILorg/xmlpull/v1/XmlSerializer;)
Landroid/service/notification/ZenModeConfig;->writeZenPolicyXml(Landroid/service/notification/ZenPolicy;Lorg/xmlpull/v1/XmlSerializer;)
Landroid/service/quickaccesswallet/QuickAccessWalletServiceInfo;-><init>(Landroid/content/pm/ServiceInfo;Landroid/service/quickaccesswallet/QuickAccessWalletServiceInfo$ServiceMetadata;)
Landroid/service/textservice/SpellCheckerService$InternalISpellCheckerSession;-><init>(Ljava/lang/String;Lcom/android/internal/textservice/ISpellCheckerSessionListener;Landroid/os/Bundle;Landroid/service/textservice/SpellCheckerService$Session;)
Landroid/service/textservice/SpellCheckerService$SpellCheckerServiceBinder;->getISpellCheckerSession(Ljava/lang/String;Lcom/android/internal/textservice/ISpellCheckerSessionListener;Landroid/os/Bundle;Lcom/android/internal/textservice/ISpellCheckerServiceCallback;)
Landroid/service/usb/UsbServiceProto;-><init>()
Landroid/service/voice/AlwaysOnHotwordDetector;-><init>(Ljava/lang/String;Ljava/util/Locale;Landroid/service/voice/AlwaysOnHotwordDetector$Callback;Landroid/hardware/soundtrigger/KeyphraseEnrollmentInfo;Lcom/android/internal/app/IVoiceInteractionManagerService;)
Landroid/service/voice/AlwaysOnHotwordDetector$EventPayload;-><init>(ZZLandroid/media/AudioFormat;I[BLandroid/service/voice/AlwaysOnHotwordDetector$1;)
Landroid/service/voice/AlwaysOnHotwordDetector$SoundTriggerListener;->onKeyphraseDetected(Landroid/hardware/soundtrigger/SoundTrigger$KeyphraseRecognitionEvent;)
Landroid/service/voice/VoiceInteractionServiceInfo;-><init>(Landroid/content/pm/PackageManager;Landroid/content/ComponentName;)
Landroid/speech/IRecognitionService;->cancel(Landroid/speech/IRecognitionListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/speech/IRecognitionService;->startListening(Landroid/content/Intent;Landroid/speech/IRecognitionListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/speech/IRecognitionService;->stopListening(Landroid/speech/IRecognitionListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/speech/IRecognitionService$Default;->cancel(Landroid/speech/IRecognitionListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/speech/IRecognitionService$Default;->startListening(Landroid/content/Intent;Landroid/speech/IRecognitionListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/speech/IRecognitionService$Default;->stopListening(Landroid/speech/IRecognitionListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/speech/IRecognitionService$Stub$Proxy;->cancel(Landroid/speech/IRecognitionListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/speech/IRecognitionService$Stub$Proxy;->startListening(Landroid/content/Intent;Landroid/speech/IRecognitionListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/speech/IRecognitionService$Stub$Proxy;->stopListening(Landroid/speech/IRecognitionListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/speech/RecognitionService;->checkPermissions(Landroid/speech/IRecognitionListener;ZLjava/lang/String;Ljava/lang/String;)
Landroid/speech/RecognitionService;->dispatchStartListening(Landroid/content/Intent;Landroid/speech/IRecognitionListener;I)
Landroid/speech/RecognitionService$Callback;-><init>(Landroid/speech/RecognitionService;Landroid/speech/IRecognitionListener;I)
Landroid/speech/RecognitionService$Callback;-><init>(Landroid/speech/RecognitionService;Landroid/speech/IRecognitionListener;ILandroid/speech/RecognitionService$1;)
Landroid/speech/RecognitionService$RecognitionServiceBinder;->cancel(Landroid/speech/IRecognitionListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/speech/RecognitionService$RecognitionServiceBinder;->startListening(Landroid/content/Intent;Landroid/speech/IRecognitionListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/speech/RecognitionService$RecognitionServiceBinder;->stopListening(Landroid/speech/IRecognitionListener;Ljava/lang/String;Ljava/lang/String;)
Landroid/speech/RecognitionService$StartListeningArgs;-><init>(Landroid/speech/RecognitionService;Landroid/content/Intent;Landroid/speech/IRecognitionListener;I)
Landroid/speech/SpeechRecognizer$Connection;-><init>(Landroid/speech/SpeechRecognizer;)
Landroid/speech/SpeechRecognizer$Connection;-><init>(Landroid/speech/SpeechRecognizer;Landroid/speech/SpeechRecognizer$1;)
Landroid/speech/SpeechRecognizer$Connection;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)
Landroid/speech/SpeechRecognizer$Connection;->onServiceDisconnected(Landroid/content/ComponentName;)
Landroid/speech/tts/TextToSpeech$Connection$SetupConnectionAsyncTask;-><init>(Landroid/speech/tts/TextToSpeech$Connection;Landroid/content/ComponentName;)
Landroid/stats/mediametrics/Mediametrics$AudioPolicyData;-><init>(Landroid/stats/mediametrics/Mediametrics;)
Landroid/stats/mediametrics/Mediametrics$AudioRecordData;-><init>(Landroid/stats/mediametrics/Mediametrics;)
Landroid/stats/mediametrics/Mediametrics$AudioThreadData;-><init>(Landroid/stats/mediametrics/Mediametrics;)
Landroid/stats/mediametrics/Mediametrics$AudioTrackData;-><init>(Landroid/stats/mediametrics/Mediametrics;)
Landroid/stats/mediametrics/Mediametrics$CodecData;-><init>(Landroid/stats/mediametrics/Mediametrics;)
Landroid/stats/mediametrics/Mediametrics$ExtractorData;-><init>(Landroid/stats/mediametrics/Mediametrics;)
Landroid/stats/mediametrics/Mediametrics$NuPlayerData;-><init>(Landroid/stats/mediametrics/Mediametrics;)
Landroid/stats/mediametrics/Mediametrics$RecorderData;-><init>(Landroid/stats/mediametrics/Mediametrics;)
Landroid/sysprop/CarProperties;->user_hal_enabled()
Landroid/sysprop/CarProperties;->user_hal_enabled(Ljava/lang/Boolean;)
Landroid/sysprop/HdmiProperties;->set_menu_language()
Landroid/sysprop/TraceProperties;->enable()
Landroid/sysprop/TraceProperties;->enable(Ljava/lang/Boolean;)
Landroid/system/Os;->ioctlInt(Ljava/io/FileDescriptor;ILandroid/system/Int32Ref;)
Landroid/system/suspend/ISuspendCallback;->notifyWakeup(Z)
Landroid/system/suspend/ISuspendCallback$Default;-><init>()
Landroid/system/suspend/ISuspendCallback$Default;->asBinder()
Landroid/system/suspend/ISuspendCallback$Default;->notifyWakeup(Z)
Landroid/system/suspend/ISuspendCallback$Stub;-><init>()
Landroid/system/suspend/ISuspendCallback$Stub;->asBinder()
Landroid/system/suspend/ISuspendCallback$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/system/suspend/ISuspendCallback$Stub;->getDefaultImpl()
Landroid/system/suspend/ISuspendCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/system/suspend/ISuspendCallback$Stub;->setDefaultImpl(Landroid/system/suspend/ISuspendCallback;)
Landroid/system/suspend/ISuspendCallback$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/system/suspend/ISuspendCallback$Stub$Proxy;->asBinder()
Landroid/system/suspend/ISuspendCallback$Stub$Proxy;->getInterfaceDescriptor()
Landroid/system/suspend/ISuspendCallback$Stub$Proxy;->notifyWakeup(Z)
Landroid/system/suspend/ISuspendControlService;->enableAutosuspend()
Landroid/system/suspend/ISuspendControlService;->forceSuspend()
Landroid/system/suspend/ISuspendControlService;->getWakeLockStats()
Landroid/system/suspend/ISuspendControlService;->registerCallback(Landroid/system/suspend/ISuspendCallback;)
Landroid/system/suspend/ISuspendControlService$Default;-><init>()
Landroid/system/suspend/ISuspendControlService$Default;->asBinder()
Landroid/system/suspend/ISuspendControlService$Default;->enableAutosuspend()
Landroid/system/suspend/ISuspendControlService$Default;->forceSuspend()
Landroid/system/suspend/ISuspendControlService$Default;->getWakeLockStats()
Landroid/system/suspend/ISuspendControlService$Default;->registerCallback(Landroid/system/suspend/ISuspendCallback;)
Landroid/system/suspend/ISuspendControlService$Stub;-><init>()
Landroid/system/suspend/ISuspendControlService$Stub;->asBinder()
Landroid/system/suspend/ISuspendControlService$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/system/suspend/ISuspendControlService$Stub;->getDefaultImpl()
Landroid/system/suspend/ISuspendControlService$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/system/suspend/ISuspendControlService$Stub;->setDefaultImpl(Landroid/system/suspend/ISuspendControlService;)
Landroid/system/suspend/ISuspendControlService$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/system/suspend/ISuspendControlService$Stub$Proxy;->asBinder()
Landroid/system/suspend/ISuspendControlService$Stub$Proxy;->enableAutosuspend()
Landroid/system/suspend/ISuspendControlService$Stub$Proxy;->forceSuspend()
Landroid/system/suspend/ISuspendControlService$Stub$Proxy;->getInterfaceDescriptor()
Landroid/system/suspend/ISuspendControlService$Stub$Proxy;->getWakeLockStats()
Landroid/system/suspend/ISuspendControlService$Stub$Proxy;->registerCallback(Landroid/system/suspend/ISuspendCallback;)
Landroid/system/suspend/WakeLockInfo;-><init>()
Landroid/system/suspend/WakeLockInfo;->describeContents()
Landroid/system/suspend/WakeLockInfo;->readFromParcel(Landroid/os/Parcel;)
Landroid/system/suspend/WakeLockInfo;->writeToParcel(Landroid/os/Parcel;I)
Landroid/telecom/Call$Details;-><init>(Ljava/lang/String;Landroid/net/Uri;ILjava/lang/String;ILandroid/telecom/PhoneAccountHandle;IILandroid/telecom/DisconnectCause;JLandroid/telecom/GatewayInfo;ILandroid/telecom/StatusHints;Landroid/os/Bundle;Landroid/os/Bundle;JLjava/lang/String;II)
Landroid/telecom/CallScreeningService$CallResponse;-><init>(ZZZZZZ)
Landroid/telecom/CallScreeningService$CallResponse;-><init>(ZZZZZZLandroid/telecom/CallScreeningService$1;)
Landroid/telecom/TelecomManager;->isServiceConnected()
Landroid/telephony/CallForwardingInfo;-><init>(IILjava/lang/String;I)
Landroid/telephony/CallForwardingInfo;->getStatus()
Landroid/telephony/CdmaEriInformation;-><init>(Landroid/os/Parcel;)
Landroid/telephony/CdmaEriInformation;-><init>(Landroid/os/Parcel;Landroid/telephony/CdmaEriInformation$1;)
Landroid/telephony/CdmaEriInformation;-><init>(II)
Landroid/telephony/CdmaEriInformation;->describeContents()
Landroid/telephony/CdmaEriInformation;->getEriIconIndex()
Landroid/telephony/CdmaEriInformation;->getEriIconMode()
Landroid/telephony/CdmaEriInformation;->setEriIconIndex(I)
Landroid/telephony/CdmaEriInformation;->setEriIconMode(I)
Landroid/telephony/CdmaEriInformation;->writeToParcel(Landroid/os/Parcel;I)
Landroid/telephony/DataSpecificRegistrationInfo;-><init>(IZZZLandroid/telephony/LteVopsSupportInfo;Z)
Landroid/telephony/DataSpecificRegistrationInfo;->isUsingCarrierAggregation()
Landroid/telephony/DataSpecificRegistrationInfo;->setIsUsingCarrierAggregation(Z)
Landroid/telephony/ModemActivityInfo;->getTimestamp()
Landroid/telephony/ModemActivityInfo;->getTransmitPowerInfo()
Landroid/telephony/ModemActivityInfo;->populateTransmitPowerRange([I)
Landroid/telephony/ModemActivityInfo$TransmitPower;-><init>(Landroid/telephony/ModemActivityInfo;Landroid/util/Range;I)
Landroid/telephony/ModemActivityInfo$TransmitPower;->getPowerRangeInDbm()
Landroid/telephony/ModemActivityInfo$TransmitPower;->getTimeInMillis()
Landroid/telephony/ModemActivityInfo$TransmitPower;->toString()
Landroid/telephony/NetworkRegistrationInfo;-><init>(IIIIIZLjava/util/List;Landroid/telephony/CellIdentity;Ljava/lang/String;IZZZLandroid/telephony/LteVopsSupportInfo;Z)
Landroid/telephony/PackageChangeReceiver;-><init>()
Landroid/telephony/PackageChangeReceiver;->getPackageName(Landroid/content/Intent;)
Landroid/telephony/PackageChangeReceiver;->getStaticLooper()
Landroid/telephony/PackageChangeReceiver;->onHandleForceStop([Ljava/lang/String;Z)
Landroid/telephony/PackageChangeReceiver;->onPackageAdded(Ljava/lang/String;)
Landroid/telephony/PackageChangeReceiver;->onPackageAppeared()
Landroid/telephony/PackageChangeReceiver;->onPackageDisappeared()
Landroid/telephony/PackageChangeReceiver;->onPackageModified(Ljava/lang/String;)
Landroid/telephony/PackageChangeReceiver;->onPackageRemoved(Ljava/lang/String;)
Landroid/telephony/PackageChangeReceiver;->onPackageUpdateFinished(Ljava/lang/String;)
Landroid/telephony/PackageChangeReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)
Landroid/telephony/PackageChangeReceiver;->register(Landroid/content/Context;Landroid/os/Looper;Landroid/os/UserHandle;)
Landroid/telephony/PackageChangeReceiver;->unregister()
Landroid/telephony/PhoneCapability;-><init>(IIILjava/util/List;Z)
Landroid/telephony/PhoneStateListener$IPhoneStateListenerStub;->onCallStateChanged(ILjava/lang/String;)
Landroid/telephony/PhoneStateListener$IPhoneStateListenerStub;->onOutgoingEmergencyCall(Landroid/telephony/emergency/EmergencyNumber;)
Landroid/telephony/PhoneStateListener$IPhoneStateListenerStub;->onOutgoingEmergencySms(Landroid/telephony/emergency/EmergencyNumber;)
Landroid/telephony/PhysicalChannelConfig;->getCellBandwidthDownlink()
Landroid/telephony/PhysicalChannelConfig;->getChannelNumber()
Landroid/telephony/PhysicalChannelConfig;->getRat()
Landroid/telephony/PhysicalChannelConfig$Builder;->setChannelNumber(I)
Landroid/telephony/PhysicalChannelConfig$Builder;->setRat(I)
Landroid/telephony/PinResult;->getType()
Landroid/telephony/PreciseDataConnectionState;-><init>()
Landroid/telephony/PreciseDataConnectionState;-><init>(IIILjava/lang/String;Landroid/net/LinkProperties;ILandroid/telephony/data/ApnSetting;)
Landroid/telephony/PreciseDataConnectionState;->getDataConnectionLinkProperties()
Landroid/telephony/PreciseDataConnectionState;->getDataConnectionNetworkType()
Landroid/telephony/ServiceState;->getLteEarfcnRsrpBoost()
Landroid/telephony/ServiceState;->setIsUsingCarrierAggregation(Z)
Landroid/telephony/ServiceState;->setLteEarfcnRsrpBoost(I)
Landroid/telephony/SignalThresholdInfo;-><init>(III[IZ)
Landroid/telephony/SignalThresholdInfo;->getSignalMeasurement()
Landroid/telephony/SmsManager;-><init>(I)
Landroid/telephony/SmsMessage;->newFromCMT([B)
Landroid/telephony/TelephonyManager;->changeIccLockPassword(Ljava/lang/String;Ljava/lang/String;)
Landroid/telephony/TelephonyManager;->dataStateToString(I)
Landroid/telephony/TelephonyManager;->disableLocationUpdates()
Landroid/telephony/TelephonyManager;->disableLocationUpdates(I)
Landroid/telephony/TelephonyManager;->enableLocationUpdates()
Landroid/telephony/TelephonyManager;->enableLocationUpdates(I)
Landroid/telephony/TelephonyManager;->getCallForwarding(I)
Landroid/telephony/TelephonyManager;->getCallWaitingStatus()
Landroid/telephony/TelephonyManager;->getCdmaEriInformation()
Landroid/telephony/TelephonyManager;->getImsMmTelFeatureAndListen(ILcom/android/ims/internal/IImsServiceFeatureCallback;)
Landroid/telephony/TelephonyManager;->getImsRcsFeatureAndListen(ILcom/android/ims/internal/IImsServiceFeatureCallback;)
Landroid/telephony/TelephonyManager;->getLteOnCdmaModeStatic()
Landroid/telephony/TelephonyManager;->getProcCmdLine()
Landroid/telephony/TelephonyManager;->isDataAllowedInVoiceCall()
Landroid/telephony/TelephonyManager;->isSystemProcess()
Landroid/telephony/TelephonyManager;->requestModemActivityInfo(Landroid/os/ResultReceiver;)
Landroid/telephony/TelephonyManager;->setAlwaysAllowMmsData(Z)
Landroid/telephony/TelephonyManager;->setCallForwarding(Landroid/telephony/CallForwardingInfo;)
Landroid/telephony/TelephonyManager;->setCallWaitingStatus(Z)
Landroid/telephony/TelephonyManager;->setDataAllowedDuringVoiceCall(Z)
Landroid/telephony/TelephonyManager;->supplyPinReportPinResult(Ljava/lang/String;)
Landroid/telephony/TelephonyManager;->supplyPukReportPinResult(Ljava/lang/String;Ljava/lang/String;)
Landroid/telephony/TelephonyManager;->unregisterImsFeatureCallback(IILcom/android/ims/internal/IImsServiceFeatureCallback;)
Landroid/telephony/TelephonyRegistryManager;->listenForSubscriber(ILjava/lang/String;Ljava/lang/String;Landroid/telephony/PhoneStateListener;IZ)
Landroid/telephony/TelephonyRegistryManager;->notifyDataConnectionForSubscriber(IIILandroid/telephony/PreciseDataConnectionState;)
Landroid/telephony/TelephonyRegistryManager;->notifyPreciseDataConnectionFailed(IIILjava/lang/String;I)
Landroid/telephony/data/DataCallResponse;-><init>(IIIIILjava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;III)
Landroid/telephony/data/DataCallResponse;-><init>(IIIIILjava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;IIILandroid/telephony/data/DataCallResponse$1;)
Landroid/telephony/data/DataService$IDataServiceWrapper;->setupDataCall(IILandroid/telephony/data/DataProfile;ZZILandroid/net/LinkProperties;Landroid/telephony/data/IDataServiceCallback;)
Landroid/telephony/data/DataService$SetupDataCallRequest;-><init>(ILandroid/telephony/data/DataProfile;ZZILandroid/net/LinkProperties;Landroid/telephony/data/IDataServiceCallback;)
Landroid/telephony/data/IDataService;->setupDataCall(IILandroid/telephony/data/DataProfile;ZZILandroid/net/LinkProperties;Landroid/telephony/data/IDataServiceCallback;)
Landroid/telephony/data/IDataService$Default;->setupDataCall(IILandroid/telephony/data/DataProfile;ZZILandroid/net/LinkProperties;Landroid/telephony/data/IDataServiceCallback;)
Landroid/telephony/data/IDataService$Stub$Proxy;->setupDataCall(IILandroid/telephony/data/DataProfile;ZZILandroid/net/LinkProperties;Landroid/telephony/data/IDataServiceCallback;)
Landroid/telephony/ims/ImsMmTelManager;-><init>(I)
Landroid/telephony/ims/ImsRcsManager;-><init>(Landroid/content/Context;I)
Landroid/telephony/ims/ImsRcsManager;->isAvailable(I)
Landroid/telephony/ims/ImsRcsManager;->registerRcsAvailabilityCallback(Ljava/util/concurrent/Executor;Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback;)
Landroid/telephony/ims/ImsRcsManager;->unregisterRcsAvailabilityCallback(Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback;)
Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback;-><init>()
Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback;->getBinder()
Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback;->onAvailabilityChanged(Landroid/telephony/ims/feature/RcsFeature$RcsImsCapabilities;)
Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback;->setExecutor(Ljava/util/concurrent/Executor;)
Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback$CapabilityBinder;-><init>(Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback;)
Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback$CapabilityBinder;->onCapabilitiesStatusChanged(I)
Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback$CapabilityBinder;->onChangeCapabilityConfigurationError(III)
Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback$CapabilityBinder;->onQueryCapabilityConfiguration(IIZ)
Landroid/telephony/ims/ImsRcsManager$AvailabilityCallback$CapabilityBinder;->setExecutor(Ljava/util/concurrent/Executor;)
Landroid/telephony/ims/ImsService;->createMmTelFeatureInternal(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/ImsService;->createRcsFeatureInternal(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/ImsService;->removeImsFeature(IILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/ImsService;->setupFeature(Landroid/telephony/ims/feature/ImsFeature;IILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/RcsContactUceCapability;-><init>(Landroid/net/Uri;)
Landroid/telephony/ims/RcsContactUceCapability;->getCapableExtensionTags()
Landroid/telephony/ims/RcsContactUceCapability;->getServiceUri(J)
Landroid/telephony/ims/RcsContactUceCapability;->isCapable(Ljava/lang/String;)
Landroid/telephony/ims/RcsContactUceCapability;->isCapable(J)
Landroid/telephony/ims/RcsContactUceCapability$Builder;-><init>(Landroid/net/Uri;)
Landroid/telephony/ims/RcsContactUceCapability$Builder;->add(Ljava/lang/String;)
Landroid/telephony/ims/RcsContactUceCapability$Builder;->add(J)
Landroid/telephony/ims/RcsContactUceCapability$Builder;->add(JLandroid/net/Uri;)
Landroid/telephony/ims/RcsContactUceCapability$Builder;->build()
Landroid/telephony/ims/RcsUceAdapter;->requestCapabilities(Ljava/util/concurrent/Executor;Ljava/util/List;Landroid/telephony/ims/RcsUceAdapter$CapabilitiesCallback;)
Landroid/telephony/ims/RcsUceAdapter$CapabilitiesCallback;-><init>()
Landroid/telephony/ims/RcsUceAdapter$CapabilitiesCallback;->onError(I)
Landroid/telephony/ims/RegistrationManager$RegistrationCallback$RegistrationBinder;->getAccessType(I)
Landroid/telephony/ims/RegistrationManager$RegistrationCallback$RegistrationBinder;->onRegistered(I)
Landroid/telephony/ims/RegistrationManager$RegistrationCallback$RegistrationBinder;->onRegistering(I)
Landroid/telephony/ims/aidl/IImsRcsController;->isAvailable(II)
Landroid/telephony/ims/aidl/IImsRcsController$Default;->isAvailable(II)
Landroid/telephony/ims/aidl/IImsRcsController$Stub$Proxy;->isAvailable(II)
Landroid/telephony/ims/aidl/IImsRcsFeature;->requestCapabilities(Ljava/util/List;I)
Landroid/telephony/ims/aidl/IImsRcsFeature;->respondToCapabilityRequest(Ljava/lang/String;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/aidl/IImsRcsFeature;->respondToCapabilityRequestWithError(Landroid/net/Uri;ILjava/lang/String;I)
Landroid/telephony/ims/aidl/IImsRcsFeature;->sendCapabilityRequest(Landroid/net/Uri;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/aidl/IImsRcsFeature;->setListener(Landroid/telephony/ims/aidl/IRcsFeatureListener;)
Landroid/telephony/ims/aidl/IImsRcsFeature;->updateCapabilities(Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/aidl/IImsRcsFeature$Default;->requestCapabilities(Ljava/util/List;I)
Landroid/telephony/ims/aidl/IImsRcsFeature$Default;->respondToCapabilityRequest(Ljava/lang/String;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/aidl/IImsRcsFeature$Default;->respondToCapabilityRequestWithError(Landroid/net/Uri;ILjava/lang/String;I)
Landroid/telephony/ims/aidl/IImsRcsFeature$Default;->sendCapabilityRequest(Landroid/net/Uri;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/aidl/IImsRcsFeature$Default;->setListener(Landroid/telephony/ims/aidl/IRcsFeatureListener;)
Landroid/telephony/ims/aidl/IImsRcsFeature$Default;->updateCapabilities(Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/aidl/IImsRcsFeature$Stub$Proxy;->requestCapabilities(Ljava/util/List;I)
Landroid/telephony/ims/aidl/IImsRcsFeature$Stub$Proxy;->respondToCapabilityRequest(Ljava/lang/String;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/aidl/IImsRcsFeature$Stub$Proxy;->respondToCapabilityRequestWithError(Landroid/net/Uri;ILjava/lang/String;I)
Landroid/telephony/ims/aidl/IImsRcsFeature$Stub$Proxy;->sendCapabilityRequest(Landroid/net/Uri;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/aidl/IImsRcsFeature$Stub$Proxy;->setListener(Landroid/telephony/ims/aidl/IRcsFeatureListener;)
Landroid/telephony/ims/aidl/IImsRcsFeature$Stub$Proxy;->updateCapabilities(Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/aidl/IImsRegistrationCallback;->onRegistered(I)
Landroid/telephony/ims/aidl/IImsRegistrationCallback;->onRegistering(I)
Landroid/telephony/ims/aidl/IImsRegistrationCallback$Default;->onRegistered(I)
Landroid/telephony/ims/aidl/IImsRegistrationCallback$Default;->onRegistering(I)
Landroid/telephony/ims/aidl/IImsRegistrationCallback$Stub$Proxy;->onRegistered(I)
Landroid/telephony/ims/aidl/IImsRegistrationCallback$Stub$Proxy;->onRegistering(I)
Landroid/telephony/ims/aidl/IImsServiceController;->createMmTelFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/aidl/IImsServiceController;->createRcsFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/aidl/IImsServiceController;->removeImsFeature(IILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/aidl/IImsServiceController$Default;->createMmTelFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/aidl/IImsServiceController$Default;->createRcsFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/aidl/IImsServiceController$Default;->removeImsFeature(IILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/aidl/IImsServiceController$Stub$Proxy;->createMmTelFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/aidl/IImsServiceController$Stub$Proxy;->createRcsFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/aidl/IImsServiceController$Stub$Proxy;->removeImsFeature(IILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/aidl/IRcsFeatureListener;->onCapabilityRequestResponseOptions(ILjava/lang/String;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/aidl/IRcsFeatureListener;->onCapabilityRequestResponsePresence(Ljava/util/List;I)
Landroid/telephony/ims/aidl/IRcsFeatureListener;->onCommandUpdate(II)
Landroid/telephony/ims/aidl/IRcsFeatureListener;->onNetworkResponse(ILjava/lang/String;I)
Landroid/telephony/ims/aidl/IRcsFeatureListener;->onNotifyUpdateCapabilities(I)
Landroid/telephony/ims/aidl/IRcsFeatureListener;->onRemoteCapabilityRequest(Landroid/net/Uri;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/aidl/IRcsFeatureListener;->onUnpublish()
Landroid/telephony/ims/aidl/IRcsFeatureListener$Default;-><init>()
Landroid/telephony/ims/aidl/IRcsFeatureListener$Default;->asBinder()
Landroid/telephony/ims/aidl/IRcsFeatureListener$Default;->onCapabilityRequestResponseOptions(ILjava/lang/String;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Default;->onCapabilityRequestResponsePresence(Ljava/util/List;I)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Default;->onCommandUpdate(II)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Default;->onNetworkResponse(ILjava/lang/String;I)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Default;->onNotifyUpdateCapabilities(I)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Default;->onRemoteCapabilityRequest(Landroid/net/Uri;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Default;->onUnpublish()
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;-><init>()
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;->asBinder()
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;->getDefaultImpl()
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;->getDefaultTransactionName(I)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;->getTransactionName(I)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub;->setDefaultImpl(Landroid/telephony/ims/aidl/IRcsFeatureListener;)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub$Proxy;->asBinder()
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub$Proxy;->getInterfaceDescriptor()
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub$Proxy;->onCapabilityRequestResponseOptions(ILjava/lang/String;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub$Proxy;->onCapabilityRequestResponsePresence(Ljava/util/List;I)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub$Proxy;->onCommandUpdate(II)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub$Proxy;->onNetworkResponse(ILjava/lang/String;I)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub$Proxy;->onNotifyUpdateCapabilities(I)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub$Proxy;->onRemoteCapabilityRequest(Landroid/net/Uri;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/aidl/IRcsFeatureListener$Stub$Proxy;->onUnpublish()
Landroid/telephony/ims/aidl/IRcsUceControllerCallback;->onError(I)
Landroid/telephony/ims/aidl/IRcsUceControllerCallback$Default;->onError(I)
Landroid/telephony/ims/aidl/IRcsUceControllerCallback$Stub$Proxy;->onError(I)
Landroid/telephony/ims/compat/ImsService;->createEmergencyMMTelFeatureInternal(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/compat/ImsService;->createMMTelFeatureInternal(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/compat/ImsService;->createRcsFeatureInternal(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/compat/ImsService;->removeImsFeature(IILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/compat/ImsService;->setupFeature(Landroid/telephony/ims/compat/feature/ImsFeature;IILcom/android/ims/internal/IImsFeatureStatusCallback;)
Landroid/telephony/ims/feature/RcsFeature;->getListener()
Landroid/telephony/ims/feature/RcsFeature;->getOptionsExchangeImpl()
Landroid/telephony/ims/feature/RcsFeature;->getOptionsExchangeInternal()
Landroid/telephony/ims/feature/RcsFeature;->getPresenceExchangeImpl()
Landroid/telephony/ims/feature/RcsFeature;->getPresenceExchangeInternal()
Landroid/telephony/ims/feature/RcsFeature;->setListener(Landroid/telephony/ims/aidl/IRcsFeatureListener;)
Landroid/telephony/ims/feature/RcsFeature$RcsFeatureBinder;->requestCapabilities(Ljava/util/List;I)
Landroid/telephony/ims/feature/RcsFeature$RcsFeatureBinder;->respondToCapabilityRequest(Ljava/lang/String;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/feature/RcsFeature$RcsFeatureBinder;->respondToCapabilityRequestWithError(Landroid/net/Uri;ILjava/lang/String;I)
Landroid/telephony/ims/feature/RcsFeature$RcsFeatureBinder;->sendCapabilityRequest(Landroid/net/Uri;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/feature/RcsFeature$RcsFeatureBinder;->setListener(Landroid/telephony/ims/aidl/IRcsFeatureListener;)
Landroid/telephony/ims/feature/RcsFeature$RcsFeatureBinder;->updateCapabilities(Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/stub/ImsRegistrationImplBase;->getConnectionType()
Landroid/telephony/ims/stub/ImsRegistrationImplBase;->updateToState(II)
Landroid/telephony/ims/stub/RcsCapabilityExchange;-><init>()
Landroid/telephony/ims/stub/RcsCapabilityExchange;->getListener()
Landroid/telephony/ims/stub/RcsCapabilityExchange;->initialize(Landroid/telephony/ims/feature/RcsFeature;)
Landroid/telephony/ims/stub/RcsCapabilityExchange;->onCommandUpdate(II)
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;-><init>()
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->onCapabilityRequestResponse(Ljava/util/List;I)
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->onNetworkResponse(ILjava/lang/String;I)
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->onNotifyUpdateCapabilites(I)
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->onUnpublish()
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->requestCapabilities(Ljava/util/List;I)
Landroid/telephony/ims/stub/RcsPresenceExchangeImplBase;->updateCapabilities(Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/stub/RcsSipOptionsImplBase;-><init>()
Landroid/telephony/ims/stub/RcsSipOptionsImplBase;->onCapabilityRequestResponse(ILjava/lang/String;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/stub/RcsSipOptionsImplBase;->onRemoteCapabilityRequest(Landroid/net/Uri;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/stub/RcsSipOptionsImplBase;->respondToCapabilityRequest(Ljava/lang/String;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/telephony/ims/stub/RcsSipOptionsImplBase;->respondToCapabilityRequestWithError(Landroid/net/Uri;ILjava/lang/String;I)
Landroid/telephony/ims/stub/RcsSipOptionsImplBase;->sendCapabilityRequest(Landroid/net/Uri;Landroid/telephony/ims/RcsContactUceCapability;I)
Landroid/text/FontConfig;-><init>([Landroid/text/FontConfig$Family;[Landroid/text/FontConfig$Alias;)
Landroid/text/FontConfig$Alias;->getToName()
Landroid/text/FontConfig$Family;-><init>(Ljava/lang/String;[Landroid/text/FontConfig$Font;Ljava/lang/String;I)
Landroid/text/FontConfig$Family;->getFonts()
Landroid/text/FontConfig$Family;->getLanguages()
Landroid/text/FontConfig$Family;->getName()
Landroid/text/FontConfig$Family;->getVariant()
Landroid/text/FontConfig$Font;-><init>(Ljava/lang/String;I[Landroid/graphics/fonts/FontVariationAxis;IZLjava/lang/String;)
Landroid/text/FontConfig$Font;->getFallbackFor()
Landroid/text/FontConfig$Font;->getFontName()
Landroid/text/FontConfig$Font;->getUri()
Landroid/text/FontConfig$Font;->setUri(Landroid/net/Uri;)
Landroid/text/TextLine;->handleRun(IIIZLandroid/graphics/Canvas;FIIILandroid/graphics/Paint$FontMetricsInt;Z)
Landroid/text/TextLine;->handleText(Landroid/text/TextPaint;IIIIZLandroid/graphics/Canvas;FIIILandroid/graphics/Paint$FontMetricsInt;ZILjava/util/ArrayList;)
Landroid/text/format/DateFormat;->getDayOfWeekString(Llibcore/icu/LocaleData;III)
Landroid/text/format/DateFormat;->getMonthString(Llibcore/icu/LocaleData;III)
Landroid/text/format/Time$TimeCalculator;->lookupZoneInfo(Ljava/lang/String;)
Landroid/text/format/TimeFormatter;->format(Ljava/lang/String;Llibcore/util/ZoneInfo$WallTime;Llibcore/util/ZoneInfo;)
Landroid/text/format/TimeFormatter;->formatInternal(Ljava/lang/String;Llibcore/util/ZoneInfo$WallTime;Llibcore/util/ZoneInfo;)
Landroid/text/format/TimeFormatter;->handleToken(Ljava/nio/CharBuffer;Llibcore/util/ZoneInfo$WallTime;Llibcore/util/ZoneInfo;)
Landroid/timezone/CountryTimeZones;-><init>(Llibcore/timezone/CountryTimeZones;)
Landroid/timezone/CountryTimeZones$TimeZoneMapping;-><init>(Llibcore/timezone/CountryTimeZones$TimeZoneMapping;)
Landroid/timezone/TelephonyLookup;-><init>(Llibcore/timezone/TelephonyLookup;)
Landroid/timezone/TelephonyNetwork;-><init>(Llibcore/timezone/TelephonyNetwork;)
Landroid/timezone/TelephonyNetworkFinder;-><init>(Llibcore/timezone/TelephonyNetworkFinder;)
Landroid/timezone/TimeZoneFinder;-><init>(Llibcore/timezone/TimeZoneFinder;)
Landroid/timezone/TzDataSetVersion;-><init>(Llibcore/timezone/TzDataSetVersion;)
Landroid/timezone/ZoneInfoDb;-><init>(Llibcore/timezone/ZoneInfoDb;)
Landroid/util/SparseArrayMap;->add(ILjava/lang/String;Ljava/lang/Object;)
Landroid/util/SparseArrayMap;->contains(ILjava/lang/String;)
Landroid/util/SparseArrayMap;->delete(ILjava/lang/String;)
Landroid/util/SparseArrayMap;->get(ILjava/lang/String;)
Landroid/util/SparseArrayMap;->getOrDefault(ILjava/lang/String;Ljava/lang/Object;)
Landroid/util/SparseArrayMap;->indexOfKey(ILjava/lang/String;)
Landroid/util/apk/ApkSignatureSchemeV2Verifier$VerifiedSigner;-><init>([[Ljava/security/cert/X509Certificate;[B[B)
Landroid/util/apk/ApkSignatureSchemeV3Verifier;->verifyProofOfRotationStruct(Ljava/nio/ByteBuffer;Ljava/security/cert/CertificateFactory;)
Landroid/util/apk/ApkSignatureSchemeV3Verifier$VerifiedProofOfRotation;-><init>(Ljava/util/List;Ljava/util/List;)
Landroid/util/apk/ApkSignatureSchemeV3Verifier$VerifiedSigner;-><init>([Ljava/security/cert/X509Certificate;Landroid/util/apk/ApkSignatureSchemeV3Verifier$VerifiedProofOfRotation;)
Landroid/util/apk/ApkSignatureSchemeV4Verifier$VerifiedSigner;-><init>([Ljava/security/cert/Certificate;[B)
Landroid/util/apk/ApkSigningBlockUtils;->pickBestDigestForV4(Ljava/util/Map;)
Landroid/util/apk/SourceStampVerificationResult;-><init>(ZZLjava/security/cert/Certificate;)
Landroid/util/apk/SourceStampVerificationResult;->verified(Ljava/security/cert/Certificate;)
Landroid/util/apk/SourceStampVerifier;->getApkContentDigests(Ljava/io/RandomAccessFile;)
Landroid/util/apk/SourceStampVerifier;->verify(Ljava/io/RandomAccessFile;[B)
Landroid/util/apk/VerityBuilder;->generateFsVerityDigestAtLeafLevel(Ljava/io/RandomAccessFile;Ljava/nio/ByteBuffer;)
Landroid/view/AccessibilityInteractionController;->adjustBoundsInScreenIfNeeded(Ljava/util/List;)
Landroid/view/AccessibilityInteractionController;->adjustIsVisibleToUserIfNeeded(Ljava/util/List;Landroid/graphics/Region;)
Landroid/view/AccessibilityInteractionController;->applyAppScaleAndMagnificationSpecIfNeeded(Ljava/util/List;Landroid/view/MagnificationSpec;)
Landroid/view/AccessibilityInteractionController;->associateLeashedParentIfNeeded(Ljava/util/List;)
Landroid/view/AccessibilityInteractionController;->recycleMagnificationSpecAndRegionIfNeeded(Landroid/view/MagnificationSpec;Landroid/graphics/Region;)
Landroid/view/AccessibilityInteractionController$AccessibilityNodePrefetcher;->enforceNodeTreeConsistent(Ljava/util/List;)
Landroid/view/AccessibilityInteractionController$AccessibilityNodePrefetcher;->prefetchAccessibilityNodeInfos(Landroid/view/View;IILjava/util/List;Landroid/os/Bundle;)
Landroid/view/AppTransitionAnimationSpec;-><init>(ILandroid/graphics/GraphicBuffer;Landroid/graphics/Rect;)
Landroid/view/Choreographer;->doCallbacks(IJ)
Landroid/view/Choreographer;->doFrame(JI)
Landroid/view/Choreographer$FrameDisplayEventReceiver;->onVsync(JJI)
Landroid/view/DisplayAddress;->fromPortAndModel(BLjava/lang/Long;)
Landroid/view/DisplayAddress$Physical;-><init>(BLjava/lang/Long;)
Landroid/view/DisplayAddress$Physical;-><init>(BLjava/lang/Long;Landroid/view/DisplayAddress$1;)
Landroid/view/DisplayAdjustments$FixedRotationAdjustments;-><init>(ILandroid/view/DisplayCutout;)
Landroid/view/DisplayCutout;-><init>(Landroid/graphics/Rect;Landroid/graphics/Insets;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Z)
Landroid/view/DisplayCutout;-><init>(Landroid/graphics/Rect;Landroid/graphics/Insets;[Landroid/graphics/Rect;Z)
Landroid/view/DisplayCutout;-><init>(Landroid/graphics/Rect;Landroid/graphics/Insets;[Landroid/graphics/Rect;ZLandroid/view/DisplayCutout$1;)
Landroid/view/DisplayCutout;-><init>(Landroid/graphics/Rect;Landroid/graphics/Insets;Landroid/view/DisplayCutout$Bounds;)
Landroid/view/DisplayCutout;->fromBoundsAndWaterfall([Landroid/graphics/Rect;Landroid/graphics/Insets;)
Landroid/view/DisplayCutout;->pathAndDisplayCutoutFromSpec(Ljava/lang/String;IIFLandroid/graphics/Insets;)
Landroid/view/DisplayEventReceiver;->dispatchConfigChanged(JJI)
Landroid/view/DisplayEventReceiver;->dispatchVsync(JJI)
Landroid/view/DisplayEventReceiver;->onConfigChanged(JJI)
Landroid/view/DisplayEventReceiver;->onVsync(JJI)
Landroid/view/DisplayListCanvas;-><init>(J)
Landroid/view/DisplayListCanvas;->drawCircle(Landroid/graphics/CanvasProperty;Landroid/graphics/CanvasProperty;Landroid/graphics/CanvasProperty;Landroid/graphics/CanvasProperty;)
Landroid/view/DisplayListCanvas;->drawRoundRect(Landroid/graphics/CanvasProperty;Landroid/graphics/CanvasProperty;Landroid/graphics/CanvasProperty;Landroid/graphics/CanvasProperty;Landroid/graphics/CanvasProperty;Landroid/graphics/CanvasProperty;Landroid/graphics/CanvasProperty;)
Landroid/view/DragEvent;->init(IFFLandroid/content/ClipDescription;Landroid/content/ClipData;Lcom/android/internal/view/IDragAndDropPermissions;Ljava/lang/Object;Z)
Landroid/view/DragEvent;->obtain(IFFLjava/lang/Object;Landroid/content/ClipDescription;Landroid/content/ClipData;Lcom/android/internal/view/IDragAndDropPermissions;Z)
Landroid/view/IPinnedStackController;->getDisplayRotation()
Landroid/view/IPinnedStackController$Default;-><init>()
Landroid/view/IPinnedStackController$Default;->asBinder()
Landroid/view/IPinnedStackController$Default;->getDisplayRotation()
Landroid/view/IPinnedStackController$Stub;-><init>()
Landroid/view/IPinnedStackController$Stub;->asBinder()
Landroid/view/IPinnedStackController$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/view/IPinnedStackController$Stub;->getDefaultImpl()
Landroid/view/IPinnedStackController$Stub;->getDefaultTransactionName(I)
Landroid/view/IPinnedStackController$Stub;->getTransactionName(I)
Landroid/view/IPinnedStackController$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/view/IPinnedStackController$Stub;->setDefaultImpl(Landroid/view/IPinnedStackController;)
Landroid/view/IPinnedStackController$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/view/IPinnedStackController$Stub$Proxy;->asBinder()
Landroid/view/IPinnedStackController$Stub$Proxy;->getDisplayRotation()
Landroid/view/IPinnedStackController$Stub$Proxy;->getInterfaceDescriptor()
Landroid/view/IPinnedStackListener;->onActionsChanged(Landroid/content/pm/ParceledListSlice;)
Landroid/view/IPinnedStackListener;->onActivityHidden(Landroid/content/ComponentName;)
Landroid/view/IPinnedStackListener;->onAspectRatioChanged(F)
Landroid/view/IPinnedStackListener;->onConfigurationChanged()
Landroid/view/IPinnedStackListener;->onDisplayInfoChanged(Landroid/view/DisplayInfo;)
Landroid/view/IPinnedStackListener;->onImeVisibilityChanged(ZI)
Landroid/view/IPinnedStackListener;->onListenerRegistered(Landroid/view/IPinnedStackController;)
Landroid/view/IPinnedStackListener;->onMovementBoundsChanged(Z)
Landroid/view/IPinnedStackListener$Default;-><init>()
Landroid/view/IPinnedStackListener$Default;->asBinder()
Landroid/view/IPinnedStackListener$Default;->onActionsChanged(Landroid/content/pm/ParceledListSlice;)
Landroid/view/IPinnedStackListener$Default;->onActivityHidden(Landroid/content/ComponentName;)
Landroid/view/IPinnedStackListener$Default;->onAspectRatioChanged(F)
Landroid/view/IPinnedStackListener$Default;->onConfigurationChanged()
Landroid/view/IPinnedStackListener$Default;->onDisplayInfoChanged(Landroid/view/DisplayInfo;)
Landroid/view/IPinnedStackListener$Default;->onImeVisibilityChanged(ZI)
Landroid/view/IPinnedStackListener$Default;->onListenerRegistered(Landroid/view/IPinnedStackController;)
Landroid/view/IPinnedStackListener$Default;->onMovementBoundsChanged(Z)
Landroid/view/IPinnedStackListener$Stub;-><init>()
Landroid/view/IPinnedStackListener$Stub;->asBinder()
Landroid/view/IPinnedStackListener$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/view/IPinnedStackListener$Stub;->getDefaultImpl()
Landroid/view/IPinnedStackListener$Stub;->getDefaultTransactionName(I)
Landroid/view/IPinnedStackListener$Stub;->getTransactionName(I)
Landroid/view/IPinnedStackListener$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/view/IPinnedStackListener$Stub;->setDefaultImpl(Landroid/view/IPinnedStackListener;)
Landroid/view/IPinnedStackListener$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/view/IPinnedStackListener$Stub$Proxy;->asBinder()
Landroid/view/IPinnedStackListener$Stub$Proxy;->getInterfaceDescriptor()
Landroid/view/IPinnedStackListener$Stub$Proxy;->onActionsChanged(Landroid/content/pm/ParceledListSlice;)
Landroid/view/IPinnedStackListener$Stub$Proxy;->onActivityHidden(Landroid/content/ComponentName;)
Landroid/view/IPinnedStackListener$Stub$Proxy;->onAspectRatioChanged(F)
Landroid/view/IPinnedStackListener$Stub$Proxy;->onConfigurationChanged()
Landroid/view/IPinnedStackListener$Stub$Proxy;->onDisplayInfoChanged(Landroid/view/DisplayInfo;)
Landroid/view/IPinnedStackListener$Stub$Proxy;->onImeVisibilityChanged(ZI)
Landroid/view/IPinnedStackListener$Stub$Proxy;->onListenerRegistered(Landroid/view/IPinnedStackController;)
Landroid/view/IPinnedStackListener$Stub$Proxy;->onMovementBoundsChanged(Z)
Landroid/view/IRecentsAnimationRunner;->onAnimationCanceled(Landroid/app/ActivityManager$TaskSnapshot;)
Landroid/view/IRecentsAnimationRunner$Default;->onAnimationCanceled(Landroid/app/ActivityManager$TaskSnapshot;)
Landroid/view/IRecentsAnimationRunner$Stub$Proxy;->onAnimationCanceled(Landroid/app/ActivityManager$TaskSnapshot;)
Landroid/view/IRemoteAnimationRunner;->onAnimationStart([Landroid/view/RemoteAnimationTarget;[Landroid/view/RemoteAnimationTarget;Landroid/view/IRemoteAnimationFinishedCallback;)
Landroid/view/IRemoteAnimationRunner$Default;->onAnimationStart([Landroid/view/RemoteAnimationTarget;[Landroid/view/RemoteAnimationTarget;Landroid/view/IRemoteAnimationFinishedCallback;)
Landroid/view/IRemoteAnimationRunner$Stub$Proxy;->onAnimationStart([Landroid/view/RemoteAnimationTarget;[Landroid/view/RemoteAnimationTarget;Landroid/view/IRemoteAnimationFinishedCallback;)
Landroid/view/IScrollCaptureClient;->endCapture()
Landroid/view/IScrollCaptureClient;->requestImage(Landroid/graphics/Rect;)
Landroid/view/IScrollCaptureClient;->startCapture(Landroid/view/Surface;)
Landroid/view/IScrollCaptureClient$Default;-><init>()
Landroid/view/IScrollCaptureClient$Default;->asBinder()
Landroid/view/IScrollCaptureClient$Default;->endCapture()
Landroid/view/IScrollCaptureClient$Default;->requestImage(Landroid/graphics/Rect;)
Landroid/view/IScrollCaptureClient$Default;->startCapture(Landroid/view/Surface;)
Landroid/view/IScrollCaptureClient$Stub;-><init>()
Landroid/view/IScrollCaptureClient$Stub;->asBinder()
Landroid/view/IScrollCaptureClient$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/view/IScrollCaptureClient$Stub;->getDefaultImpl()
Landroid/view/IScrollCaptureClient$Stub;->getDefaultTransactionName(I)
Landroid/view/IScrollCaptureClient$Stub;->getTransactionName(I)
Landroid/view/IScrollCaptureClient$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/view/IScrollCaptureClient$Stub;->setDefaultImpl(Landroid/view/IScrollCaptureClient;)
Landroid/view/IScrollCaptureClient$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/view/IScrollCaptureClient$Stub$Proxy;->asBinder()
Landroid/view/IScrollCaptureClient$Stub$Proxy;->endCapture()
Landroid/view/IScrollCaptureClient$Stub$Proxy;->getInterfaceDescriptor()
Landroid/view/IScrollCaptureClient$Stub$Proxy;->requestImage(Landroid/graphics/Rect;)
Landroid/view/IScrollCaptureClient$Stub$Proxy;->startCapture(Landroid/view/Surface;)
Landroid/view/IScrollCaptureController;->onCaptureBufferSent(JLandroid/graphics/Rect;)
Landroid/view/IScrollCaptureController;->onCaptureStarted()
Landroid/view/IScrollCaptureController;->onClientConnected(Landroid/view/IScrollCaptureClient;Landroid/graphics/Rect;Landroid/graphics/Point;)
Landroid/view/IScrollCaptureController;->onClientUnavailable()
Landroid/view/IScrollCaptureController;->onConnectionClosed()
Landroid/view/IScrollCaptureController$Default;-><init>()
Landroid/view/IScrollCaptureController$Default;->asBinder()
Landroid/view/IScrollCaptureController$Default;->onCaptureBufferSent(JLandroid/graphics/Rect;)
Landroid/view/IScrollCaptureController$Default;->onCaptureStarted()
Landroid/view/IScrollCaptureController$Default;->onClientConnected(Landroid/view/IScrollCaptureClient;Landroid/graphics/Rect;Landroid/graphics/Point;)
Landroid/view/IScrollCaptureController$Default;->onClientUnavailable()
Landroid/view/IScrollCaptureController$Default;->onConnectionClosed()
Landroid/view/IScrollCaptureController$Stub;-><init>()
Landroid/view/IScrollCaptureController$Stub;->asBinder()
Landroid/view/IScrollCaptureController$Stub;->asInterface(Landroid/os/IBinder;)
Landroid/view/IScrollCaptureController$Stub;->getDefaultImpl()
Landroid/view/IScrollCaptureController$Stub;->getDefaultTransactionName(I)
Landroid/view/IScrollCaptureController$Stub;->getTransactionName(I)
Landroid/view/IScrollCaptureController$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Landroid/view/IScrollCaptureController$Stub;->setDefaultImpl(Landroid/view/IScrollCaptureController;)
Landroid/view/IScrollCaptureController$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Landroid/view/IScrollCaptureController$Stub$Proxy;->asBinder()
Landroid/view/IScrollCaptureController$Stub$Proxy;->getInterfaceDescriptor()
Landroid/view/IScrollCaptureController$Stub$Proxy;->onCaptureBufferSent(JLandroid/graphics/Rect;)
Landroid/view/IScrollCaptureController$Stub$Proxy;->onCaptureStarted()
Landroid/view/IScrollCaptureController$Stub$Proxy;->onClientConnected(Landroid/view/IScrollCaptureClient;Landroid/graphics/Rect;Landroid/graphics/Point;)
Landroid/view/IScrollCaptureController$Stub$Proxy;->onClientUnavailable()
Landroid/view/IScrollCaptureController$Stub$Proxy;->onConnectionClosed()
Landroid/view/IWindow;->dispatchPointerCaptureChanged(Z)
Landroid/view/IWindow;->dispatchSystemUiVisibilityChanged(IIII)
Landroid/view/IWindow;->insetsChanged(Landroid/view/InsetsState;)
Landroid/view/IWindow;->insetsControlChanged(Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;)
Landroid/view/IWindow;->requestScrollCapture(Landroid/view/IScrollCaptureController;)
Landroid/view/IWindow;->resized(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;ZLandroid/util/MergedConfiguration;Landroid/graphics/Rect;ZZILandroid/view/DisplayCutout$ParcelableWrapper;)
Landroid/view/IWindow$Default;->dispatchPointerCaptureChanged(Z)
Landroid/view/IWindow$Default;->dispatchSystemUiVisibilityChanged(IIII)
Landroid/view/IWindow$Default;->insetsChanged(Landroid/view/InsetsState;)
Landroid/view/IWindow$Default;->insetsControlChanged(Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;)
Landroid/view/IWindow$Default;->requestScrollCapture(Landroid/view/IScrollCaptureController;)
Landroid/view/IWindow$Default;->resized(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;ZLandroid/util/MergedConfiguration;Landroid/graphics/Rect;ZZILandroid/view/DisplayCutout$ParcelableWrapper;)
Landroid/view/IWindow$Stub$Proxy;->dispatchPointerCaptureChanged(Z)
Landroid/view/IWindow$Stub$Proxy;->dispatchSystemUiVisibilityChanged(IIII)
Landroid/view/IWindow$Stub$Proxy;->insetsChanged(Landroid/view/InsetsState;)
Landroid/view/IWindow$Stub$Proxy;->insetsControlChanged(Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;)
Landroid/view/IWindow$Stub$Proxy;->requestScrollCapture(Landroid/view/IScrollCaptureController;)
Landroid/view/IWindow$Stub$Proxy;->resized(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;ZLandroid/util/MergedConfiguration;Landroid/graphics/Rect;ZZILandroid/view/DisplayCutout$ParcelableWrapper;)
Landroid/view/IWindowManager;->addWindowToken(Landroid/os/IBinder;II)
Landroid/view/IWindowManager;->addWindowTokenWithOptions(Landroid/os/IBinder;IILandroid/os/Bundle;Ljava/lang/String;)
Landroid/view/IWindowManager;->executeAppTransition()
Landroid/view/IWindowManager;->getWindowInsets(Landroid/view/WindowManager$LayoutParams;ILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/view/InsetsState;)
Landroid/view/IWindowManager;->injectInputAfterTransactionsApplied(Landroid/view/InputEvent;I)
Landroid/view/IWindowManager;->prepareAppTransition(IZ)
Landroid/view/IWindowManager;->registerPinnedStackListener(ILandroid/view/IPinnedStackListener;)
Landroid/view/IWindowManager;->requestScrollCapture(ILandroid/os/IBinder;ILandroid/view/IScrollCaptureController;)
Landroid/view/IWindowManager;->setDockedStackDividerTouchRegion(Landroid/graphics/Rect;)
Landroid/view/IWindowManager;->setForceShowSystemBars(Z)
Landroid/view/IWindowManager;->setPipVisibility(Z)
Landroid/view/IWindowManager;->setShouldShowIme(IZ)
Landroid/view/IWindowManager;->shouldShowIme(I)
Landroid/view/IWindowManager;->statusBarVisibilityChanged(II)
Landroid/view/IWindowManager;->syncInputTransactions()
Landroid/view/IWindowManager$Default;->addWindowToken(Landroid/os/IBinder;II)
Landroid/view/IWindowManager$Default;->addWindowTokenWithOptions(Landroid/os/IBinder;IILandroid/os/Bundle;Ljava/lang/String;)
Landroid/view/IWindowManager$Default;->executeAppTransition()
Landroid/view/IWindowManager$Default;->getWindowInsets(Landroid/view/WindowManager$LayoutParams;ILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/view/InsetsState;)
Landroid/view/IWindowManager$Default;->injectInputAfterTransactionsApplied(Landroid/view/InputEvent;I)
Landroid/view/IWindowManager$Default;->prepareAppTransition(IZ)
Landroid/view/IWindowManager$Default;->registerPinnedStackListener(ILandroid/view/IPinnedStackListener;)
Landroid/view/IWindowManager$Default;->requestScrollCapture(ILandroid/os/IBinder;ILandroid/view/IScrollCaptureController;)
Landroid/view/IWindowManager$Default;->setDockedStackDividerTouchRegion(Landroid/graphics/Rect;)
Landroid/view/IWindowManager$Default;->setForceShowSystemBars(Z)
Landroid/view/IWindowManager$Default;->setPipVisibility(Z)
Landroid/view/IWindowManager$Default;->setShouldShowIme(IZ)
Landroid/view/IWindowManager$Default;->shouldShowIme(I)
Landroid/view/IWindowManager$Default;->statusBarVisibilityChanged(II)
Landroid/view/IWindowManager$Default;->syncInputTransactions()
Landroid/view/IWindowManager$Stub$Proxy;->addWindowToken(Landroid/os/IBinder;II)
Landroid/view/IWindowManager$Stub$Proxy;->addWindowTokenWithOptions(Landroid/os/IBinder;IILandroid/os/Bundle;Ljava/lang/String;)
Landroid/view/IWindowManager$Stub$Proxy;->executeAppTransition()
Landroid/view/IWindowManager$Stub$Proxy;->getWindowInsets(Landroid/view/WindowManager$LayoutParams;ILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/view/InsetsState;)
Landroid/view/IWindowManager$Stub$Proxy;->injectInputAfterTransactionsApplied(Landroid/view/InputEvent;I)
Landroid/view/IWindowManager$Stub$Proxy;->prepareAppTransition(IZ)
Landroid/view/IWindowManager$Stub$Proxy;->registerPinnedStackListener(ILandroid/view/IPinnedStackListener;)
Landroid/view/IWindowManager$Stub$Proxy;->requestScrollCapture(ILandroid/os/IBinder;ILandroid/view/IScrollCaptureController;)
Landroid/view/IWindowManager$Stub$Proxy;->setDockedStackDividerTouchRegion(Landroid/graphics/Rect;)
Landroid/view/IWindowManager$Stub$Proxy;->setForceShowSystemBars(Z)
Landroid/view/IWindowManager$Stub$Proxy;->setPipVisibility(Z)
Landroid/view/IWindowManager$Stub$Proxy;->setShouldShowIme(IZ)
Landroid/view/IWindowManager$Stub$Proxy;->shouldShowIme(I)
Landroid/view/IWindowManager$Stub$Proxy;->statusBarVisibilityChanged(II)
Landroid/view/IWindowManager$Stub$Proxy;->syncInputTransactions()
Landroid/view/IWindowSession;->addToDisplay(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/view/InputChannel;Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;)
Landroid/view/IWindowSession;->addToDisplayAsUser(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IIILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/view/InputChannel;Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;)
Landroid/view/IWindowSession;->addToDisplayWithoutInputChannel(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/InsetsState;)
Landroid/view/IWindowSession;->getDisplayFrame(Landroid/view/IWindow;Landroid/graphics/Rect;)
Landroid/view/IWindowSession;->grantInputChannel(ILandroid/view/SurfaceControl;Landroid/view/IWindow;Landroid/os/IBinder;IILandroid/view/InputChannel;)
Landroid/view/IWindowSession;->relayout(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IIIIJLandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/util/MergedConfiguration;Landroid/view/SurfaceControl;Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;Landroid/graphics/Point;Landroid/view/SurfaceControl;)
Landroid/view/IWindowSession;->reparentDisplayContent(Landroid/view/IWindow;Landroid/view/SurfaceControl;I)
Landroid/view/IWindowSession;->setTransparentRegion(Landroid/view/IWindow;Landroid/graphics/Region;)
Landroid/view/IWindowSession;->updateInputChannel(Landroid/os/IBinder;ILandroid/view/SurfaceControl;ILandroid/graphics/Region;)
Landroid/view/IWindowSession$Default;->addToDisplay(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/view/InputChannel;Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;)
Landroid/view/IWindowSession$Default;->addToDisplayAsUser(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IIILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/view/InputChannel;Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;)
Landroid/view/IWindowSession$Default;->addToDisplayWithoutInputChannel(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/InsetsState;)
Landroid/view/IWindowSession$Default;->getDisplayFrame(Landroid/view/IWindow;Landroid/graphics/Rect;)
Landroid/view/IWindowSession$Default;->grantInputChannel(ILandroid/view/SurfaceControl;Landroid/view/IWindow;Landroid/os/IBinder;IILandroid/view/InputChannel;)
Landroid/view/IWindowSession$Default;->relayout(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IIIIJLandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/util/MergedConfiguration;Landroid/view/SurfaceControl;Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;Landroid/graphics/Point;Landroid/view/SurfaceControl;)
Landroid/view/IWindowSession$Default;->reparentDisplayContent(Landroid/view/IWindow;Landroid/view/SurfaceControl;I)
Landroid/view/IWindowSession$Default;->setTransparentRegion(Landroid/view/IWindow;Landroid/graphics/Region;)
Landroid/view/IWindowSession$Default;->updateInputChannel(Landroid/os/IBinder;ILandroid/view/SurfaceControl;ILandroid/graphics/Region;)
Landroid/view/IWindowSession$Stub$Proxy;->addToDisplay(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/view/InputChannel;Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;)
Landroid/view/IWindowSession$Stub$Proxy;->addToDisplayAsUser(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IIILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/view/InputChannel;Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;)
Landroid/view/IWindowSession$Stub$Proxy;->addToDisplayWithoutInputChannel(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/InsetsState;)
Landroid/view/IWindowSession$Stub$Proxy;->getDisplayFrame(Landroid/view/IWindow;Landroid/graphics/Rect;)
Landroid/view/IWindowSession$Stub$Proxy;->grantInputChannel(ILandroid/view/SurfaceControl;Landroid/view/IWindow;Landroid/os/IBinder;IILandroid/view/InputChannel;)
Landroid/view/IWindowSession$Stub$Proxy;->relayout(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IIIIJLandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/util/MergedConfiguration;Landroid/view/SurfaceControl;Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;Landroid/graphics/Point;Landroid/view/SurfaceControl;)
Landroid/view/IWindowSession$Stub$Proxy;->reparentDisplayContent(Landroid/view/IWindow;Landroid/view/SurfaceControl;I)
Landroid/view/IWindowSession$Stub$Proxy;->setTransparentRegion(Landroid/view/IWindow;Landroid/graphics/Region;)
Landroid/view/IWindowSession$Stub$Proxy;->updateInputChannel(Landroid/os/IBinder;ILandroid/view/SurfaceControl;ILandroid/graphics/Region;)
Landroid/view/ImeFocusController$InputMethodManagerDelegate;->isAcceptingText()
Landroid/view/ImeInsetsSourceConsumer;->applyImeVisibility(Z)
Landroid/view/ImeInsetsSourceConsumer;->areEditorsSimilar(Landroid/view/inputmethod/EditorInfo;Landroid/view/inputmethod/EditorInfo;)
Landroid/view/ImeInsetsSourceConsumer;->isDummyOrEmptyEditor(Landroid/view/inputmethod/EditorInfo;)
Landroid/view/ImeInsetsSourceConsumer;->isServedEditorRendered()
Landroid/view/ImeInsetsSourceConsumer;->onPreRendered(Landroid/view/inputmethod/EditorInfo;)
Landroid/view/ImeInsetsSourceConsumer;->onServedEditorChanged(Landroid/view/inputmethod/EditorInfo;)
Landroid/view/ImeInsetsSourceConsumer;->onWindowFocusGained()
Landroid/view/InputApplicationHandle;-><init>(Landroid/os/IBinder;)
Landroid/view/InputChannel;->finalize()
Landroid/view/InputChannel;->nativeDispose(Z)
Landroid/view/InputChannel;->nativeDup(Landroid/view/InputChannel;)
Landroid/view/InputChannel;->nativeGetName()
Landroid/view/InputChannel;->nativeGetToken()
Landroid/view/InputChannel;->nativeRelease()
Landroid/view/InputChannel;->nativeTransferTo(Landroid/view/InputChannel;)
Landroid/view/InputChannel;->nativeWriteToParcel(Landroid/os/Parcel;)
Landroid/view/InputChannel;->transferTo(Landroid/view/InputChannel;)
Landroid/view/InputDevice;-><init>(IIILjava/lang/String;IILjava/lang/String;ZIILandroid/view/KeyCharacterMap;ZZZ)
Landroid/view/InsetsAnimationControlImpl;-><init>(Landroid/util/SparseArray;Landroid/graphics/Rect;Landroid/view/InsetsState;Landroid/view/WindowInsetsAnimationControlListener;ILandroid/view/InsetsAnimationControlCallbacks;JLandroid/view/animation/Interpolator;I)
Landroid/view/InsetsAnimationControlImpl;->buildTypeSourcesMap(Landroid/util/SparseIntArray;Landroid/util/SparseSetArray;Landroid/util/SparseArray;)
Landroid/view/InsetsAnimationControlImpl;->getListener()
Landroid/view/InsetsAnimationControlImpl;->updateLeashesForSide(IIIILjava/util/ArrayList;Landroid/view/InsetsState;Ljava/lang/Float;)
Landroid/view/InsetsAnimationThreadControlRunner;-><init>(Landroid/util/SparseArray;Landroid/graphics/Rect;Landroid/view/InsetsState;Landroid/view/WindowInsetsAnimationControlListener;ILandroid/view/InsetsAnimationControlCallbacks;JLandroid/view/animation/Interpolator;ILandroid/os/Handler;)
Landroid/view/InsetsController;->applyImeVisibility(Z)
Landroid/view/InsetsController;->calculateInsets(ZZLandroid/view/DisplayCutout;II)
Landroid/view/InsetsController;->hideDirectly(IZI)
Landroid/view/InsetsController;->onWindowFocusGained()
Landroid/view/InsetsController;->showDirectly(I)
Landroid/view/InsetsController;->updateRequestedState()
Landroid/view/InsetsController$InternalAnimationControlListener;-><init>(ZZI)
Landroid/view/InsetsController$InternalAnimationControlListener;->getInterpolator()
Landroid/view/InsetsFlags;->convertFlag(III)
Landroid/view/InsetsFlags;->convertNoFlag(III)
Landroid/view/InsetsFlags;->getAppearance(I)
Landroid/view/InsetsSourceConsumer;->hasWindowFocus()
Landroid/view/InsetsSourceConsumer;->onWindowFocusGained()
Landroid/view/InsetsSourceConsumer;->updateSource(Landroid/view/InsetsSource;)
Landroid/view/InsetsSourceControl;-><init>(ILandroid/view/SurfaceControl;Landroid/graphics/Point;)
Landroid/view/InsetsState;->calculateInsets(Landroid/graphics/Rect;Landroid/view/InsetsState;ZZLandroid/view/DisplayCutout;IILandroid/util/SparseIntArray;)
Landroid/view/InsetsState;->equals(Ljava/lang/Object;Z)
Landroid/view/InsetsState;->getSourcesCount()
Landroid/view/InsetsState;->setSourceVisible(ILandroid/view/InsetsState;)
Landroid/view/InsetsState;->sourceAt(I)
Landroid/view/MagnificationSpec;->obtain()
Landroid/view/MagnificationSpec;->obtain(Landroid/view/MagnificationSpec;)
Landroid/view/MagnificationSpec;->recycle()
Landroid/view/NotificationHeaderView;->generateLayoutParams(Landroid/util/AttributeSet;)
Landroid/view/NotificationHeaderView;->getExpandButton()
Landroid/view/NotificationHeaderView;->getHeaderTextMarginEnd()
Landroid/view/NotificationHeaderView;->getIcon()
Landroid/view/NotificationHeaderView;->getOriginalIconColor()
Landroid/view/NotificationHeaderView;->getOriginalNotificationColor()
Landroid/view/NotificationHeaderView;->getWorkProfileIcon()
Landroid/view/NotificationHeaderView;->onLayout(ZIIII)
Landroid/view/NotificationHeaderView;->onMeasure(II)
Landroid/view/NotificationHeaderView;->setAppOpsOnClickListener(Landroid/view/View$OnClickListener;)
Landroid/view/NotificationHeaderView;->setExpanded(Z)
Landroid/view/NotificationHeaderView;->setHeaderTextMarginEnd(I)
Landroid/view/NotificationHeaderView;->setShowExpandButtonAtEnd(Z)
Landroid/view/NotificationHeaderView;->setShowWorkBadgeAtEnd(Z)
Landroid/view/NotificationHeaderView;->shrinkViewForOverflow(IILandroid/view/View;I)
Landroid/view/NotificationHeaderView;->updateExpandButton()
Landroid/view/RemoteAnimationTarget;-><init>(IILandroid/view/SurfaceControl;ZLandroid/graphics/Rect;Landroid/graphics/Rect;ILandroid/graphics/Point;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/app/WindowConfiguration;ZLandroid/view/SurfaceControl;Landroid/graphics/Rect;)
Landroid/view/ScrollCaptureCallback;->onScrollCaptureImageRequest(Landroid/view/ScrollCaptureSession;Landroid/graphics/Rect;)
Landroid/view/ScrollCaptureCallback;->onScrollCaptureSearch(Ljava/util/function/Consumer;)
Landroid/view/ScrollCaptureCallback;->onScrollCaptureStart(Landroid/view/ScrollCaptureSession;Ljava/lang/Runnable;)
Landroid/view/ScrollCaptureClient;-><init>(Landroid/view/ScrollCaptureTarget;Landroid/view/IScrollCaptureController;)
Landroid/view/ScrollCaptureClient;->cancelTimeout()
Landroid/view/ScrollCaptureClient;->checkConnected()
Landroid/view/ScrollCaptureClient;->checkStarted()
Landroid/view/ScrollCaptureClient;->disconnect()
Landroid/view/ScrollCaptureClient;->doShutdown()
Landroid/view/ScrollCaptureClient;->endCapture()
Landroid/view/ScrollCaptureClient;->getTimeoutAction()
Landroid/view/ScrollCaptureClient;->isStarted()
Landroid/view/ScrollCaptureClient;->onEndCaptureCompleted()
Landroid/view/ScrollCaptureClient;->onEndCaptureTimeout()
Landroid/view/ScrollCaptureClient;->onRequestImageCompleted(JLandroid/graphics/Rect;)
Landroid/view/ScrollCaptureClient;->onRequestImageTimeout()
Landroid/view/ScrollCaptureClient;->onStartCaptureCompleted()
Landroid/view/ScrollCaptureClient;->onStartCaptureTimeout()
Landroid/view/ScrollCaptureClient;->requestImage(Landroid/graphics/Rect;)
Landroid/view/ScrollCaptureClient;->scheduleTimeout(JLjava/lang/Runnable;)
Landroid/view/ScrollCaptureClient;->setTimeoutMillis(I)
Landroid/view/ScrollCaptureClient;->startCapture(Landroid/view/Surface;)
Landroid/view/ScrollCaptureClient;->toString()
Landroid/view/ScrollCaptureClient$DelayedAction;-><init>(Landroid/os/Handler;JLjava/lang/Runnable;)
Landroid/view/ScrollCaptureClient$DelayedAction;->cancel()
Landroid/view/ScrollCaptureClient$DelayedAction;->onTimeout()
Landroid/view/ScrollCaptureClient$DelayedAction;->timeoutNow()
Landroid/view/ScrollCaptureSession;-><init>(Landroid/view/Surface;Landroid/graphics/Rect;Landroid/graphics/Point;Landroid/view/ScrollCaptureClient;)
Landroid/view/ScrollCaptureSession;->disconnect()
Landroid/view/ScrollCaptureSession;->notifyBufferSent(JLandroid/graphics/Rect;)
Landroid/view/ScrollCaptureTarget;->roundIntoPoint(Landroid/graphics/Point;[F)
Landroid/view/ScrollCaptureTarget;->zero([F)
Landroid/view/ScrollCaptureTargetResolver;-><init>(Ljava/util/Queue;)
Landroid/view/ScrollCaptureTargetResolver;->area(Landroid/graphics/Rect;)
Landroid/view/ScrollCaptureTargetResolver;->checkThread()
Landroid/view/ScrollCaptureTargetResolver;->chooseTarget(Landroid/view/ScrollCaptureTarget;Landroid/view/ScrollCaptureTarget;)
Landroid/view/ScrollCaptureTargetResolver;->findRelation(Landroid/view/View;Landroid/view/View;)
Landroid/view/ScrollCaptureTargetResolver;->hasIncludeHint(Landroid/view/View;)
Landroid/view/ScrollCaptureTargetResolver;->isDescendant(Landroid/view/View;Landroid/view/View;)
Landroid/view/ScrollCaptureTargetResolver;->nullOrEmpty(Landroid/graphics/Rect;)
Landroid/view/ScrollCaptureTargetResolver;->onScrollBoundsProvided(Landroid/view/ScrollCaptureTarget;Landroid/graphics/Rect;)
Landroid/view/ScrollCaptureTargetResolver;->queryTarget(Landroid/view/ScrollCaptureTarget;)
Landroid/view/ScrollCaptureTargetResolver;->run(JLjava/util/function/Consumer;)
Landroid/view/ScrollCaptureTargetResolver;->start(Landroid/os/Handler;JLjava/util/function/Consumer;)
Landroid/view/ScrollCaptureTargetResolver;->supplyResult(Landroid/view/ScrollCaptureTarget;)
Landroid/view/ScrollCaptureTargetResolver;->waitForResult()
Landroid/view/ScrollCaptureTargetResolver$SingletonConsumer;-><init>(Ljava/util/function/Consumer;)
Landroid/view/ScrollCaptureTargetResolver$SingletonConsumer;->accept(Ljava/lang/Object;)
Landroid/view/Surface;->attachAndQueueBuffer(Landroid/graphics/GraphicBuffer;)
Landroid/view/Surface;->attachAndQueueBufferWithColorSpace(Landroid/graphics/GraphicBuffer;Landroid/graphics/ColorSpace;)
Landroid/view/Surface;->nativeAttachAndQueueBufferWithColorSpace(JLandroid/graphics/GraphicBuffer;I)
Landroid/view/Surface;->nativeSetFrameRate(JFI)
Landroid/view/SurfaceControl;-><init>(Landroid/view/SurfaceControl;)
Landroid/view/SurfaceControl;-><init>(Landroid/view/SurfaceSession;Ljava/lang/String;IIIILandroid/view/SurfaceControl;Landroid/util/SparseIntArray;)
Landroid/view/SurfaceControl;-><init>(Landroid/view/SurfaceSession;Ljava/lang/String;IIIILandroid/view/SurfaceControl;Landroid/util/SparseIntArray;Landroid/view/SurfaceControl$1;)
Landroid/view/SurfaceControl;->assignNativeObject(J)
Landroid/view/SurfaceControl;->copyFrom(Landroid/view/SurfaceControl;)
Landroid/view/SurfaceControl;->deferTransactionUntil(Landroid/view/SurfaceControl;J)
Landroid/view/SurfaceControl;->detachChildren()
Landroid/view/SurfaceControl;->getActiveColorMode(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->getActiveConfig(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->getAutoLowLatencyModeSupport(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->getDesiredDisplayConfigSpecs(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->getDisplayColorModes(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->getDisplayConfigs(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->getDisplayInfo(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->getGameContentTypeSupport(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->getHdrCapabilities(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->getReleaseStack()
Landroid/view/SurfaceControl;->hide()
Landroid/view/SurfaceControl;->nativeCaptureLayers(Landroid/os/IBinder;JLandroid/graphics/Rect;F[JI)
Landroid/view/SurfaceControl;->nativeDeferTransactionUntil(JJJJ)
Landroid/view/SurfaceControl;->nativeDeferTransactionUntilSurface(JJJJ)
Landroid/view/SurfaceControl;->nativeGetActiveColorMode(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->nativeGetActiveConfig(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->nativeGetAutoLowLatencyModeSupport(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->nativeGetDesiredDisplayConfigSpecs(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->nativeGetDisplayColorModes(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->nativeGetDisplayConfigs(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->nativeGetDisplayInfo(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->nativeGetGameContentTypeSupport(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->nativeGetHdrCapabilities(Landroid/os/IBinder;)
Landroid/view/SurfaceControl;->nativeReparentChildren(JJJ)
Landroid/view/SurfaceControl;->nativeScreenshot(Landroid/os/IBinder;Landroid/graphics/Rect;IIZIZ)
Landroid/view/SurfaceControl;->nativeSetDesiredDisplayConfigSpecs(Landroid/os/IBinder;Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;)
Landroid/view/SurfaceControl;->nativeSetDisplayBrightness(Landroid/os/IBinder;F)
Landroid/view/SurfaceControl;->nativeSetEarlyWakeup(J)
Landroid/view/SurfaceControl;->nativeSetFrameRate(JJFI)
Landroid/view/SurfaceControl;->nativeSetOverrideScalingMode(JJI)
Landroid/view/SurfaceControl;->nativeSeverChildren(JJ)
Landroid/view/SurfaceControl;->reparentChildren(Landroid/view/SurfaceControl;)
Landroid/view/SurfaceControl;->rotateCropForSF(Landroid/graphics/Rect;I)
Landroid/view/SurfaceControl;->screenshot(Landroid/graphics/Rect;IIZI)
Landroid/view/SurfaceControl;->screenshot(Landroid/graphics/Rect;III)
Landroid/view/SurfaceControl;->screenshot(Landroid/os/IBinder;Landroid/view/Surface;)
Landroid/view/SurfaceControl;->screenshot(Landroid/os/IBinder;Landroid/view/Surface;Landroid/graphics/Rect;IIZI)
Landroid/view/SurfaceControl;->screenshotToBuffer(Landroid/os/IBinder;Landroid/graphics/Rect;IIZI)
Landroid/view/SurfaceControl;->screenshotToBufferWithSecureLayersUnsafe(Landroid/os/IBinder;Landroid/graphics/Rect;IIZI)
Landroid/view/SurfaceControl;->setAlpha(F)
Landroid/view/SurfaceControl;->setBufferSize(II)
Landroid/view/SurfaceControl;->setColorSpaceAgnostic(Z)
Landroid/view/SurfaceControl;->setDesiredDisplayConfigSpecs(Landroid/os/IBinder;Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;)
Landroid/view/SurfaceControl;->setLayer(I)
Landroid/view/SurfaceControl;->setMatrix(FFFF)
Landroid/view/SurfaceControl;->setOpaque(Z)
Landroid/view/SurfaceControl;->setOverrideScalingMode(I)
Landroid/view/SurfaceControl;->setPosition(FF)
Landroid/view/SurfaceControl;->setSecure(Z)
Landroid/view/SurfaceControl;->setTransparentRegionHint(Landroid/graphics/Region;)
Landroid/view/SurfaceControl;->setWindowCrop(Landroid/graphics/Rect;)
Landroid/view/SurfaceControl;->show()
Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;-><init>()
Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;-><init>(Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;)
Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;-><init>(IFFFF)
Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;->copyFrom(Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;)
Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;->equals(Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;)
Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;->equals(Ljava/lang/Object;)
Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;->hashCode()
Landroid/view/SurfaceControl$DesiredDisplayConfigSpecs;->toString()
Landroid/view/SurfaceControl$DisplayConfig;-><init>()
Landroid/view/SurfaceControl$DisplayConfig;->toString()
Landroid/view/SurfaceControl$DisplayInfo;-><init>()
Landroid/view/SurfaceControl$DisplayInfo;->toString()
Landroid/view/SurfaceControl$ScreenshotGraphicBuffer;-><init>(Landroid/graphics/GraphicBuffer;Landroid/graphics/ColorSpace;Z)
Landroid/view/SurfaceControl$ScreenshotGraphicBuffer;->containsSecureLayers()
Landroid/view/SurfaceControl$ScreenshotGraphicBuffer;->createFromNative(IIIIJIZ)
Landroid/view/SurfaceControl$ScreenshotGraphicBuffer;->getColorSpace()
Landroid/view/SurfaceControl$ScreenshotGraphicBuffer;->getGraphicBuffer()
Landroid/view/SurfaceControl$Transaction;->deferTransactionUntil(Landroid/view/SurfaceControl;Landroid/view/SurfaceControl;J)
Landroid/view/SurfaceControl$Transaction;->deferTransactionUntilSurface(Landroid/view/SurfaceControl;Landroid/view/Surface;J)
Landroid/view/SurfaceControl$Transaction;->detachChildren(Landroid/view/SurfaceControl;)
Landroid/view/SurfaceControl$Transaction;->reparentChildren(Landroid/view/SurfaceControl;Landroid/view/SurfaceControl;)
Landroid/view/SurfaceControl$Transaction;->setEarlyWakeup()
Landroid/view/SurfaceControl$Transaction;->setOverrideScalingMode(Landroid/view/SurfaceControl;I)
Landroid/view/SurfaceControlViewHost$SurfacePackage;-><init>(Landroid/view/SurfaceControl;Landroid/view/accessibility/IAccessibilityEmbeddedConnection;)
Landroid/view/SurfaceSession;->nativeKill(J)
Landroid/view/SurfaceView;->applySurfaceTransforms(Landroid/view/SurfaceControl;Landroid/view/SurfaceControl$Transaction;Landroid/graphics/Rect;J)
Landroid/view/SurfaceView;->getRemoteAccessibilityEmbeddedConnection()
Landroid/view/SurfaceView;->releaseSurfaces()
Landroid/view/SurfaceView;->setParentSpaceRectangle(Landroid/graphics/Rect;J)
Landroid/view/SurfaceView;->setRemoteAccessibilityEmbeddedConnection(Landroid/view/accessibility/IAccessibilityEmbeddedConnection;Landroid/os/IBinder;)
Landroid/view/SurfaceView;->updateScreenMatrixForEmbeddedHierarchy()
Landroid/view/SurfaceView$RemoteAccessibilityEmbeddedConnection;-><init>(Landroid/view/SurfaceView;Landroid/view/accessibility/IAccessibilityEmbeddedConnection;Landroid/os/IBinder;)
Landroid/view/SurfaceView$RemoteAccessibilityEmbeddedConnection;->binderDied()
Landroid/view/SurfaceView$RemoteAccessibilityEmbeddedConnection;->getConnection()
Landroid/view/SurfaceView$RemoteAccessibilityEmbeddedConnection;->getLeashToken()
Landroid/view/SurfaceView$RemoteAccessibilityEmbeddedConnection;->linkToDeath()
Landroid/view/SurfaceView$RemoteAccessibilityEmbeddedConnection;->unlinkToDeath()
Landroid/view/SyncRtSurfaceTransactionApplier;->applyParams(Landroid/view/SurfaceControl$Transaction;JZ[Landroid/view/SyncRtSurfaceTransactionApplier$SurfaceParams;)
Landroid/view/SyncRtSurfaceTransactionApplier;->scheduleApply(Z[Landroid/view/SyncRtSurfaceTransactionApplier$SurfaceParams;)
Landroid/view/SyncRtSurfaceTransactionApplier$SurfaceParams;-><init>(Landroid/view/SurfaceControl;IFLandroid/graphics/Matrix;Landroid/graphics/Rect;IFIZ)
Landroid/view/SyncRtSurfaceTransactionApplier$SurfaceParams;-><init>(Landroid/view/SurfaceControl;IFLandroid/graphics/Matrix;Landroid/graphics/Rect;IFIZLandroid/view/SyncRtSurfaceTransactionApplier$1;)
Landroid/view/TextureLayer;-><init>(Landroid/graphics/HardwareRenderer;J)
Landroid/view/TextureLayer;->adoptTextureLayer(Landroid/graphics/HardwareRenderer;J)
Landroid/view/TextureLayer;->copyInto(Landroid/graphics/Bitmap;)
Landroid/view/TextureLayer;->destroy()
Landroid/view/TextureLayer;->detachSurfaceTexture()
Landroid/view/TextureLayer;->getDeferredLayerUpdater()
Landroid/view/TextureLayer;->getLayerHandle()
Landroid/view/TextureLayer;->isValid()
Landroid/view/TextureLayer;->nPrepare(JIIZ)
Landroid/view/TextureLayer;->nSetLayerPaint(JJ)
Landroid/view/TextureLayer;->nSetSurfaceTexture(JLandroid/graphics/SurfaceTexture;)
Landroid/view/TextureLayer;->nSetTransform(JJ)
Landroid/view/TextureLayer;->nUpdateSurfaceTexture(J)
Landroid/view/TextureLayer;->prepare(IIZ)
Landroid/view/TextureLayer;->setLayerPaint(Landroid/graphics/Paint;)
Landroid/view/TextureLayer;->setSurfaceTexture(Landroid/graphics/SurfaceTexture;)
Landroid/view/TextureLayer;->setTransform(Landroid/graphics/Matrix;)
Landroid/view/TextureLayer;->updateSurfaceTexture()
Landroid/view/ThreadedRenderer;->disable(Z)
Landroid/view/ThreadedRenderer;->isAvailable()
Landroid/view/VelocityTracker;-><init>(Ljava/lang/String;)
Landroid/view/VelocityTracker;->nativeInitialize(Ljava/lang/String;)
Landroid/view/View;->dispatchScrollCaptureSearch(Landroid/graphics/Rect;Landroid/graphics/Point;Ljava/util/Queue;)
Landroid/view/View;->notifyAppearedOrDisappearedForContentCaptureIfNeededNoTrace(Z)
Landroid/view/ViewGroup;->dispatchScrollCaptureSearch(Landroid/graphics/Rect;Landroid/graphics/Point;Ljava/util/Queue;)
Landroid/view/ViewGroup;->dispatchTransformedScrollCaptureSearch(Landroid/view/View;Landroid/graphics/Rect;Landroid/graphics/Point;Ljava/util/Queue;)
Landroid/view/ViewRootImpl;->collectRootScrollCaptureTargets(Ljava/util/Queue;)
Landroid/view/ViewRootImpl;->dispatchInsetsChanged(Landroid/view/InsetsState;)
Landroid/view/ViewRootImpl;->dispatchInsetsControlChanged(Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;)
Landroid/view/ViewRootImpl;->dispatchResized(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;ZLandroid/util/MergedConfiguration;Landroid/graphics/Rect;ZZILandroid/view/DisplayCutout$ParcelableWrapper;)
Landroid/view/ViewRootImpl;->dispatchScrollCaptureRequest(Landroid/view/IScrollCaptureController;)
Landroid/view/ViewRootImpl;->dispatchScrollCaptureSearchResult(Landroid/view/IScrollCaptureController;Landroid/view/ScrollCaptureTarget;)
Landroid/view/ViewRootImpl;->dispatchSystemUiVisibilityChanged(IIII)
Landroid/view/ViewRootImpl;->dump(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)
Landroid/view/ViewRootImpl;->finishBLASTSync(Z)
Landroid/view/ViewRootImpl;->getBLASTSyncTransaction()
Landroid/view/ViewRootImpl;->getOrCreateBLASTSurface(II)
Landroid/view/ViewRootImpl;->getRenderSurfaceControl()
Landroid/view/ViewRootImpl;->getScrollCaptureClient()
Landroid/view/ViewRootImpl;->handleScrollCaptureRequest(Landroid/view/IScrollCaptureController;)
Landroid/view/ViewRootImpl;->hasColorModeChanged(I)
Landroid/view/ViewRootImpl;->isDrawingToBLASTTransaction()
Landroid/view/ViewRootImpl;->setBoundsLayerCrop()
Landroid/view/ViewRootImpl;->setUseBLASTSyncTransaction()
Landroid/view/ViewRootImpl;->updateBoundsLayer()
Landroid/view/ViewRootImpl$W;->dispatchPointerCaptureChanged(Z)
Landroid/view/ViewRootImpl$W;->dispatchSystemUiVisibilityChanged(IIII)
Landroid/view/ViewRootImpl$W;->insetsChanged(Landroid/view/InsetsState;)
Landroid/view/ViewRootImpl$W;->insetsControlChanged(Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;)
Landroid/view/ViewRootImpl$W;->requestScrollCapture(Landroid/view/IScrollCaptureController;)
Landroid/view/ViewRootImpl$W;->resized(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;ZLandroid/util/MergedConfiguration;Landroid/graphics/Rect;ZZILandroid/view/DisplayCutout$ParcelableWrapper;)
Landroid/view/Window;->addScrollCaptureCallback(Landroid/view/ScrollCaptureCallback;)
Landroid/view/Window;->removeScrollCaptureCallback(Landroid/view/ScrollCaptureCallback;)
Landroid/view/Window;->requestScrollCapture(Landroid/view/IScrollCaptureController;)
Landroid/view/WindowInsets;-><init>([Landroid/graphics/Insets;[Landroid/graphics/Insets;[ZZZLandroid/view/DisplayCutout;IZ)
Landroid/view/WindowManager;->setShouldShowIme(IZ)
Landroid/view/WindowManager;->shouldShowIme(I)
Landroid/view/WindowManagerImpl;-><init>(Landroid/content/Context;Landroid/view/Window;)
Landroid/view/WindowManagerImpl;->applyDefaultToken(Landroid/view/ViewGroup$LayoutParams;)
Landroid/view/WindowManagerImpl;->getMaximumBounds()
Landroid/view/WindowManagerImpl;->setShouldShowIme(IZ)
Landroid/view/WindowManagerImpl;->shouldShowIme(I)
Landroid/view/WindowlessWindowManager;->addToDisplay(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/view/InputChannel;Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;)
Landroid/view/WindowlessWindowManager;->addToDisplayAsUser(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IIILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/view/InputChannel;Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;)
Landroid/view/WindowlessWindowManager;->addToDisplayWithoutInputChannel(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/InsetsState;)
Landroid/view/WindowlessWindowManager;->getDisplayFrame(Landroid/view/IWindow;Landroid/graphics/Rect;)
Landroid/view/WindowlessWindowManager;->grantInputChannel(ILandroid/view/SurfaceControl;Landroid/view/IWindow;Landroid/os/IBinder;IILandroid/view/InputChannel;)
Landroid/view/WindowlessWindowManager;->relayout(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IIIIJLandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/util/MergedConfiguration;Landroid/view/SurfaceControl;Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;Landroid/graphics/Point;Landroid/view/SurfaceControl;)
Landroid/view/WindowlessWindowManager;->reparentDisplayContent(Landroid/view/IWindow;Landroid/view/SurfaceControl;I)
Landroid/view/WindowlessWindowManager;->setTransparentRegion(Landroid/view/IWindow;Landroid/graphics/Region;)
Landroid/view/WindowlessWindowManager;->updateInputChannel(Landroid/os/IBinder;ILandroid/view/SurfaceControl;ILandroid/graphics/Region;)
Landroid/view/accessibility/AccessibilityCache;->refreshCachedNodeLocked(IJ)
Landroid/view/accessibility/AccessibilityCache;->refreshCachedWindowLocked(I)
Landroid/view/accessibility/AccessibilityManager;-><init>(Landroid/os/Handler;Landroid/view/accessibility/IAccessibilityManager;I)
Landroid/view/accessibility/IWindowMagnificationConnection;->disableWindowMagnification(I)
Landroid/view/accessibility/IWindowMagnificationConnection;->enableWindowMagnification(IFFF)
Landroid/view/accessibility/IWindowMagnificationConnection$Default;->disableWindowMagnification(I)
Landroid/view/accessibility/IWindowMagnificationConnection$Default;->enableWindowMagnification(IFFF)
Landroid/view/accessibility/IWindowMagnificationConnection$Stub$Proxy;->disableWindowMagnification(I)
Landroid/view/accessibility/IWindowMagnificationConnection$Stub$Proxy;->enableWindowMagnification(IFFF)
Landroid/view/autofill/AutofillManager;->ensureServiceClientAddedIfNeededLocked()
Landroid/view/contentcapture/ContentCaptureContext;-><init>(Landroid/view/contentcapture/ContentCaptureContext;Landroid/content/ComponentName;III)
Landroid/view/contentcapture/ContentCaptureManager;->onActivityCreated(Landroid/os/IBinder;Landroid/content/ComponentName;)
Landroid/view/contentcapture/IContentCaptureManager;->startSession(Landroid/os/IBinder;Landroid/content/ComponentName;IILcom/android/internal/os/IResultReceiver;)
Landroid/view/contentcapture/IContentCaptureManager$Default;->startSession(Landroid/os/IBinder;Landroid/content/ComponentName;IILcom/android/internal/os/IResultReceiver;)
Landroid/view/contentcapture/IContentCaptureManager$Stub$Proxy;->startSession(Landroid/os/IBinder;Landroid/content/ComponentName;IILcom/android/internal/os/IResultReceiver;)
Landroid/view/contentcapture/MainContentCaptureSession;->start(Landroid/os/IBinder;Landroid/content/ComponentName;I)
Landroid/view/inputmethod/CursorAnchorInfo;-><init>(IIILjava/lang/CharSequence;IFFFFLandroid/view/inputmethod/SparseRectFArray;[F)
Landroid/view/inputmethod/CursorAnchorInfo;->computeMatrixValues(Landroid/graphics/Matrix;Landroid/view/inputmethod/CursorAnchorInfo;)
Landroid/view/inputmethod/CursorAnchorInfo;->create(Landroid/view/inputmethod/CursorAnchorInfo$Builder;)
Landroid/view/inputmethod/CursorAnchorInfo;->createForAdditionalParentMatrix(Landroid/view/inputmethod/CursorAnchorInfo;Landroid/graphics/Matrix;)
Landroid/view/inputmethod/EditorInfo;->trimLongSurroundingText(Ljava/lang/CharSequence;II)
Landroid/view/inputmethod/EditorInfo$InitialSurroundingText;-><init>()
Landroid/view/inputmethod/EditorInfo$InitialSurroundingText;-><init>(Ljava/lang/CharSequence;II)
Landroid/view/inputmethod/EditorInfo$InitialSurroundingText;->describeContents()
Landroid/view/inputmethod/EditorInfo$InitialSurroundingText;->getInitialSelectedText(I)
Landroid/view/inputmethod/EditorInfo$InitialSurroundingText;->getInitialTextAfterCursor(II)
Landroid/view/inputmethod/EditorInfo$InitialSurroundingText;->getInitialTextBeforeCursor(II)
Landroid/view/inputmethod/EditorInfo$InitialSurroundingText;->getSelectionLength()
Landroid/view/inputmethod/EditorInfo$InitialSurroundingText;->writeToParcel(Landroid/os/Parcel;I)
Landroid/view/inputmethod/InlineSuggestion;-><init>(Landroid/view/inputmethod/InlineSuggestionInfo;Lcom/android/internal/view/inline/IInlineContentProvider;Landroid/view/inputmethod/InlineSuggestion$InlineContentCallbackImpl;)
Landroid/view/inputmethod/InlineSuggestion;->getInlineContentCallback(Landroid/content/Context;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)
Landroid/view/inputmethod/InlineSuggestion$InlineContentCallbackImpl;-><init>(Landroid/content/Context;Lcom/android/internal/view/inline/IInlineContentProvider;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)
Landroid/view/inputmethod/InlineSuggestionInfo;-><init>(Landroid/widget/inline/InlinePresentationSpec;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Z)
Landroid/view/inputmethod/InlineSuggestionsRequest;-><init>(ILjava/util/List;Ljava/lang/String;Landroid/os/LocaleList;Landroid/os/Bundle;Landroid/os/IBinder;I)
Landroid/view/inputmethod/InputMethod;->dispatchStartInputWithToken(Landroid/view/inputmethod/InputConnection;Landroid/view/inputmethod/EditorInfo;ZLandroid/os/IBinder;Z)
Landroid/view/inputmethod/InputMethod;->initializeInternal(Landroid/os/IBinder;ILcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;)
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorProto;-><init>(Landroid/view/inputmethod/InputMethodEditorTraceProto;)
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorProto$ClientSideProto;-><init>(Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorProto;)
Landroid/view/inputmethod/InputMethodEditorTraceProto$InputMethodEditorTraceFileProto;-><init>(Landroid/view/inputmethod/InputMethodEditorTraceProto;)
Landroid/view/inputmethod/InputMethodInfo;-><init>(Landroid/content/pm/ResolveInfo;ZLjava/lang/String;Ljava/util/List;IZZZZ)
Landroid/view/inputmethod/InputMethodInfo;->buildDummyResolveInfo(Ljava/lang/String;Ljava/lang/String;Ljava/lang/CharSequence;)
Landroid/view/inputmethod/InputMethodManager;->maybeCallServedViewChangedLocked(Landroid/view/inputmethod/EditorInfo;)
Landroid/view/inputmethod/InputMethodManager;->notifyImeHidden()
Landroid/view/inputmethod/InputMethodManager;->removeImeSurface()
Landroid/view/inputmethod/InputMethodManager;->reportActivityView(ILandroid/graphics/Matrix;)
Landroid/view/inputmethod/InputMethodManager;->requestImeShow(Landroid/os/ResultReceiver;)
Landroid/view/inputmethod/InputMethodManager$ControlledInputConnectionWrapper;-><init>(Landroid/os/Looper;Landroid/view/inputmethod/InputConnection;Landroid/view/inputmethod/InputMethodManager;)
Landroid/view/inputmethod/InputMethodManager$ControlledInputConnectionWrapper;->deactivate()
Landroid/view/inputmethod/InputMethodManager$ControlledInputConnectionWrapper;->isActive()
Landroid/view/inputmethod/InputMethodManager$ControlledInputConnectionWrapper;->toString()
Landroid/view/inputmethod/InputMethodManager$DelegateImpl;->isAcceptingText()
Landroid/view/inputmethod/InputMethodManager$ImeThreadFactory;-><init>(Ljava/lang/String;)
Landroid/view/inputmethod/InputMethodManager$ImeThreadFactory;->newThread(Ljava/lang/Runnable;)
Landroid/view/textclassifier/SystemTextClassifier$BlockingCallback;-><init>(Ljava/lang/String;)
Landroid/view/textclassifier/SystemTextClassifier$ResponseReceiver;-><init>(Ljava/lang/String;)
Landroid/view/textclassifier/SystemTextClassifier$ResponseReceiver;-><init>(Ljava/lang/String;Landroid/view/textclassifier/SystemTextClassifier$1;)
Landroid/view/textclassifier/TextClassificationSession;->checkDestroyed()
Landroid/view/textclassifier/TextSelection;-><init>(IILjava/util/Map;Ljava/lang/String;Landroid/os/Bundle;)
Landroid/view/textclassifier/TextSelection;-><init>(IILjava/util/Map;Ljava/lang/String;Landroid/os/Bundle;Landroid/view/textclassifier/TextSelection$1;)
Landroid/view/textclassifier/TextSelection$Request;-><init>(Ljava/lang/CharSequence;IILandroid/os/LocaleList;ZLandroid/os/Bundle;)
Landroid/view/textclassifier/TextSelection$Request;-><init>(Ljava/lang/CharSequence;IILandroid/os/LocaleList;ZLandroid/os/Bundle;Landroid/view/textclassifier/TextSelection$1;)
Landroid/view/textservice/SpellCheckerSession;-><init>(Landroid/view/textservice/SpellCheckerInfo;Landroid/view/textservice/TextServicesManager;Landroid/view/textservice/SpellCheckerSession$SpellCheckerSessionListener;)
Landroid/view/textservice/SpellCheckerSession$SpellCheckerSessionListenerImpl;-><init>(Landroid/os/Handler;)
Landroid/view/textservice/TextServicesManager;-><init>(I)
Landroid/widget/AbsListView;->setRemoteViewsOnClickHandler(Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/AdapterViewAnimator;->setRemoteViewsOnClickHandler(Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/AnalogClock;->toLocalDateTime(JLjava/time/ZoneId;)
Landroid/widget/CompoundButton;->setDefaultStateDescritption()
Landroid/widget/EditorTouchState;->isDragCloseToVertical()
Landroid/widget/Magnifier;->setSourceHorizontalBounds(II)
Landroid/widget/RemoteViews;->apply(Landroid/content/Context;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews;->applyAsync(Landroid/content/Context;Landroid/view/ViewGroup;Ljava/util/concurrent/Executor;Landroid/widget/RemoteViews$OnViewAppliedListener;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews;->applyWithTheme(Landroid/content/Context;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;I)
Landroid/widget/RemoteViews;->getAsyncApplyTask(Landroid/content/Context;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnViewAppliedListener;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews;->inflateView(Landroid/content/Context;Landroid/widget/RemoteViews;Landroid/view/ViewGroup;I)
Landroid/widget/RemoteViews;->performApply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews;->reapply(Landroid/content/Context;Landroid/view/View;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews;->reapplyAsync(Landroid/content/Context;Landroid/view/View;Ljava/util/concurrent/Executor;Landroid/widget/RemoteViews$OnViewAppliedListener;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews;->setViewLayoutMarginBottomDimen(II)
Landroid/widget/RemoteViews;->setViewLayoutMarginEnd(II)
Landroid/widget/RemoteViews;->setViewLayoutMarginEndDimen(II)
Landroid/widget/RemoteViews;->setViewLayoutWidth(II)
Landroid/widget/RemoteViews$Action;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$Action;->initActionAsync(Landroid/widget/RemoteViews$ViewTree;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$AsyncApplyTask;-><init>(Landroid/widget/RemoteViews;Landroid/widget/RemoteViews;Landroid/view/ViewGroup;Landroid/content/Context;Landroid/widget/RemoteViews$OnViewAppliedListener;Landroid/widget/RemoteViews$OnClickHandler;Landroid/view/View;)
Landroid/widget/RemoteViews$AsyncApplyTask;-><init>(Landroid/widget/RemoteViews;Landroid/widget/RemoteViews;Landroid/view/ViewGroup;Landroid/content/Context;Landroid/widget/RemoteViews$OnViewAppliedListener;Landroid/widget/RemoteViews$OnClickHandler;Landroid/view/View;Landroid/widget/RemoteViews$1;)
Landroid/widget/RemoteViews$BitmapReflectionAction;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$LayoutParamAction;-><init>(III)
Landroid/widget/RemoteViews$LayoutParamAction;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$LayoutParamAction;->resolveDimenPixelOffset(Landroid/view/View;I)
Landroid/widget/RemoteViews$OnClickHandler;->onClickHandler(Landroid/view/View;Landroid/app/PendingIntent;Landroid/widget/RemoteViews$RemoteResponse;)
Landroid/widget/RemoteViews$OverrideTextColorsAction;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$ReflectionAction;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$ReflectionAction;->getParameterType()
Landroid/widget/RemoteViews$ReflectionAction;->getUniqueKey()
Landroid/widget/RemoteViews$ReflectionAction;->initActionAsync(Landroid/widget/RemoteViews$ViewTree;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$ReflectionAction;->mergeBehavior()
Landroid/widget/RemoteViews$ReflectionAction;->prefersAsyncApply()
Landroid/widget/RemoteViews$ReflectionAction;->visitUris(Ljava/util/function/Consumer;)
Landroid/widget/RemoteViews$RemoteResponse;->handleViewClick(Landroid/view/View;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$RunnableAction;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$SetDrawableTint;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$SetEmptyView;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$SetIntTagAction;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$SetOnClickResponse;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$SetPendingIntentTemplate;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$SetRemoteInputsAction;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$SetRemoteViewsAdapterIntent;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$SetRemoteViewsAdapterIntent;->initActionAsync(Landroid/widget/RemoteViews$ViewTree;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$SetRemoteViewsAdapterList;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$SetRippleDrawableColor;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$TextViewDrawableAction;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$TextViewDrawableAction;->initActionAsync(Landroid/widget/RemoteViews$ViewTree;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$TextViewSizeAction;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$ViewContentNavigation;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$ViewGroupActionAdd;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$ViewGroupActionAdd;->initActionAsync(Landroid/widget/RemoteViews$ViewTree;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$ViewGroupActionRemove;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$ViewGroupActionRemove;->initActionAsync(Landroid/widget/RemoteViews$ViewTree;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViews$ViewPaddingAction;->apply(Landroid/view/View;Landroid/view/ViewGroup;Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViewsAdapter;->setRemoteViewsOnClickHandler(Landroid/widget/RemoteViews$OnClickHandler;)
Landroid/widget/RemoteViewsAdapter$RemoteViewsFrameLayout;->onRemoteViewsLoaded(Landroid/widget/RemoteViews;Landroid/widget/RemoteViews$OnClickHandler;Z)
Landroid/widget/RemoteViewsListAdapter;-><init>(Landroid/content/Context;Ljava/util/ArrayList;I)
Landroid/widget/SelectionActionModeHelper;->sortSelctionIndices(II)
Landroid/widget/SelectionActionModeHelper;->sortSelctionIndicesFromTextView(Landroid/widget/TextView;)
Landroid/widget/SmartSelectSprite;->createAnimator(Landroid/widget/SmartSelectSprite$RectangleList;FFLjava/util/List;Landroid/animation/ValueAnimator$AnimatorUpdateListener;Ljava/lang/Runnable;)
Landroid/widget/SmartSelectSprite;->createCornerAnimator(Landroid/widget/SmartSelectSprite$RoundedRectangleShape;Landroid/animation/ValueAnimator$AnimatorUpdateListener;)
Landroid/widget/SpellChecker$SpellParser;->parse(II)
Landroid/widget/TextView;->applySingleLine(ZZZ)
Landroid/widget/TextView;->paste(IIZ)
Landroid/widget/TextView;->replaceSelectionWithText(Ljava/lang/CharSequence;)
Landroid/widget/TimePickerSpinnerDelegate;->getAmPmStrings(Landroid/content/Context;)
Landroid/widget/ToastPresenter;->adjustLayoutParams(Landroid/view/WindowManager$LayoutParams;Landroid/os/IBinder;IIIIFF)
Landroid/window/DisplayAreaOrganizer;-><init>()
Landroid/window/ITaskOrganizerController;->createRootTask(II)
Landroid/window/ITaskOrganizerController;->registerTaskOrganizer(Landroid/window/ITaskOrganizer;I)
Landroid/window/ITaskOrganizerController;->setInterceptBackPressedOnTaskRoot(Landroid/window/ITaskOrganizer;Z)
Landroid/window/ITaskOrganizerController;->setLaunchRoot(ILandroid/window/WindowContainerToken;)
Landroid/window/ITaskOrganizerController$Default;->createRootTask(II)
Landroid/window/ITaskOrganizerController$Default;->registerTaskOrganizer(Landroid/window/ITaskOrganizer;I)
Landroid/window/ITaskOrganizerController$Default;->setInterceptBackPressedOnTaskRoot(Landroid/window/ITaskOrganizer;Z)
Landroid/window/ITaskOrganizerController$Default;->setLaunchRoot(ILandroid/window/WindowContainerToken;)
Landroid/window/ITaskOrganizerController$Stub$Proxy;->createRootTask(II)
Landroid/window/ITaskOrganizerController$Stub$Proxy;->registerTaskOrganizer(Landroid/window/ITaskOrganizer;I)
Landroid/window/ITaskOrganizerController$Stub$Proxy;->setInterceptBackPressedOnTaskRoot(Landroid/window/ITaskOrganizer;Z)
Landroid/window/ITaskOrganizerController$Stub$Proxy;->setLaunchRoot(ILandroid/window/WindowContainerToken;)
Landroid/window/IWindowOrganizerController;->takeScreenshot(Landroid/window/WindowContainerToken;Landroid/view/SurfaceControl;)
Landroid/window/IWindowOrganizerController$Default;->takeScreenshot(Landroid/window/WindowContainerToken;Landroid/view/SurfaceControl;)
Landroid/window/IWindowOrganizerController$Stub$Proxy;->takeScreenshot(Landroid/window/WindowContainerToken;Landroid/view/SurfaceControl;)
Landroid/window/TaskEmbedder;-><init>(Landroid/content/Context;Landroid/window/TaskEmbedder$Host;)
Landroid/window/TaskEmbedder;->applyTapExcludeRegion(Landroid/view/IWindow;Landroid/graphics/Region;)
Landroid/window/TaskEmbedder;->clearTapExcludeRegion()
Landroid/window/TaskEmbedder;->finalize()
Landroid/window/TaskEmbedder;->gatherTransparentRegion(Landroid/graphics/Region;)
Landroid/window/TaskEmbedder;->getDisplayId()
Landroid/window/TaskEmbedder;->getId()
Landroid/window/TaskEmbedder;->getSurfaceControl()
Landroid/window/TaskEmbedder;->getVirtualDisplay()
Landroid/window/TaskEmbedder;->initialize(Landroid/view/SurfaceControl;)
Landroid/window/TaskEmbedder;->isInitialized()
Landroid/window/TaskEmbedder;->notifyBoundsChanged()
Landroid/window/TaskEmbedder;->onInitialize()
Landroid/window/TaskEmbedder;->onRelease()
Landroid/window/TaskEmbedder;->performBackPress()
Landroid/window/TaskEmbedder;->performRelease()
Landroid/window/TaskEmbedder;->prepareActivityOptions(Landroid/app/ActivityOptions;)
Landroid/window/TaskEmbedder;->release()
Landroid/window/TaskEmbedder;->resizeTask(II)
Landroid/window/TaskEmbedder;->setForwardedInsets(Landroid/graphics/Insets;)
Landroid/window/TaskEmbedder;->setListener(Landroid/window/TaskEmbedder$Listener;)
Landroid/window/TaskEmbedder;->start()
Landroid/window/TaskEmbedder;->startActivity(Landroid/app/PendingIntent;)
Landroid/window/TaskEmbedder;->startActivity(Landroid/app/PendingIntent;Landroid/content/Intent;Landroid/app/ActivityOptions;)
Landroid/window/TaskEmbedder;->startActivity(Landroid/content/Intent;)
Landroid/window/TaskEmbedder;->startActivity(Landroid/content/Intent;Landroid/os/UserHandle;)
Landroid/window/TaskEmbedder;->startShortcutActivity(Landroid/content/pm/ShortcutInfo;Landroid/app/ActivityOptions;Landroid/graphics/Rect;)
Landroid/window/TaskEmbedder;->stop()
Landroid/window/TaskEmbedder;->updateLocationAndTapExcludeRegion()
Landroid/window/TaskEmbedder$Host;->canReceivePointerEvents()
Landroid/window/TaskEmbedder$Host;->getHeight()
Landroid/window/TaskEmbedder$Host;->getPositionInWindow()
Landroid/window/TaskEmbedder$Host;->getScreenBounds()
Landroid/window/TaskEmbedder$Host;->getScreenToTaskMatrix()
Landroid/window/TaskEmbedder$Host;->getTapExcludeRegion()
Landroid/window/TaskEmbedder$Host;->getWidth()
Landroid/window/TaskEmbedder$Host;->getWindow()
Landroid/window/TaskEmbedder$Host;->onTaskBackgroundColorChanged(Landroid/window/TaskEmbedder;I)
Landroid/window/TaskEmbedder$Host;->post(Ljava/lang/Runnable;)
Landroid/window/TaskEmbedder$Listener;->onBackPressedOnTaskRoot(I)
Landroid/window/TaskEmbedder$Listener;->onInitialized()
Landroid/window/TaskEmbedder$Listener;->onReleased()
Landroid/window/TaskEmbedder$Listener;->onTaskCreated(ILandroid/content/ComponentName;)
Landroid/window/TaskEmbedder$Listener;->onTaskMovedToFront(I)
Landroid/window/TaskEmbedder$Listener;->onTaskRemovalStarted(I)
Landroid/window/TaskEmbedder$Listener;->onTaskVisibilityChanged(IZ)
Landroid/window/TaskOrganizer;->createRootTask(II)
Landroid/window/TaskOrganizer;->registerOrganizer(I)
Landroid/window/TaskOrganizer;->setInterceptBackPressedOnTaskRoot(Z)
Landroid/window/TaskOrganizer;->setLaunchRoot(ILandroid/window/WindowContainerToken;)
Landroid/window/TaskOrganizerTaskEmbedder;-><init>(Landroid/content/Context;Landroid/window/TaskEmbedder$Host;)
Landroid/window/TaskOrganizerTaskEmbedder;->getId()
Landroid/window/TaskOrganizerTaskEmbedder;->getTaskId()
Landroid/window/TaskOrganizerTaskEmbedder;->isInitialized()
Landroid/window/TaskOrganizerTaskEmbedder;->log(Ljava/lang/String;)
Landroid/window/TaskOrganizerTaskEmbedder;->notifyBoundsChanged()
Landroid/window/TaskOrganizerTaskEmbedder;->onInitialize()
Landroid/window/TaskOrganizerTaskEmbedder;->onRelease()
Landroid/window/TaskOrganizerTaskEmbedder;->performBackPress()
Landroid/window/TaskOrganizerTaskEmbedder;->prepareActivityOptions(Landroid/app/ActivityOptions;)
Landroid/window/TaskOrganizerTaskEmbedder;->resetTaskInfo()
Landroid/window/TaskOrganizerTaskEmbedder;->start()
Landroid/window/TaskOrganizerTaskEmbedder;->stop()
Landroid/window/TaskOrganizerTaskEmbedder$TaskOrganizerImpl;-><init>(Landroid/window/TaskOrganizerTaskEmbedder;)
Landroid/window/TaskOrganizerTaskEmbedder$TaskOrganizerImpl;-><init>(Landroid/window/TaskOrganizerTaskEmbedder;Landroid/window/TaskOrganizerTaskEmbedder$1;)
Landroid/window/TaskOrganizerTaskEmbedder$TaskOrganizerImpl;->onBackPressedOnTaskRoot(Landroid/app/ActivityManager$RunningTaskInfo;)
Landroid/window/TaskOrganizerTaskEmbedder$TaskOrganizerImpl;->onTaskAppeared(Landroid/app/ActivityManager$RunningTaskInfo;Landroid/view/SurfaceControl;)
Landroid/window/TaskOrganizerTaskEmbedder$TaskOrganizerImpl;->onTaskInfoChanged(Landroid/app/ActivityManager$RunningTaskInfo;)
Landroid/window/TaskOrganizerTaskEmbedder$TaskOrganizerImpl;->onTaskVanished(Landroid/app/ActivityManager$RunningTaskInfo;)
Landroid/window/VirtualDisplayTaskEmbedder;-><init>(Landroid/content/Context;Landroid/window/TaskEmbedder$Host;ZZ)
Landroid/window/VirtualDisplayTaskEmbedder;->clearActivityViewGeometryForIme()
Landroid/window/VirtualDisplayTaskEmbedder;->createKeyEvent(III)
Landroid/window/VirtualDisplayTaskEmbedder;->gatherTransparentRegion(Landroid/graphics/Region;)
Landroid/window/VirtualDisplayTaskEmbedder;->getBaseDisplayDensity()
Landroid/window/VirtualDisplayTaskEmbedder;->getDisplayId()
Landroid/window/VirtualDisplayTaskEmbedder;->getId()
Landroid/window/VirtualDisplayTaskEmbedder;->getVirtualDisplay()
Landroid/window/VirtualDisplayTaskEmbedder;->isInitialized()
Landroid/window/VirtualDisplayTaskEmbedder;->onInitialize()
Landroid/window/VirtualDisplayTaskEmbedder;->onRelease()
Landroid/window/VirtualDisplayTaskEmbedder;->performBackPress()
Landroid/window/VirtualDisplayTaskEmbedder;->prepareActivityOptions(Landroid/app/ActivityOptions;)
Landroid/window/VirtualDisplayTaskEmbedder;->reportLocation(Landroid/graphics/Matrix;Landroid/graphics/Point;)
Landroid/window/VirtualDisplayTaskEmbedder;->resizeTask(II)
Landroid/window/VirtualDisplayTaskEmbedder;->setForwardedInsets(Landroid/graphics/Insets;)
Landroid/window/VirtualDisplayTaskEmbedder;->start()
Landroid/window/VirtualDisplayTaskEmbedder;->stop()
Landroid/window/VirtualDisplayTaskEmbedder;->updateLocationAndTapExcludeRegion()
Landroid/window/VirtualDisplayTaskEmbedder$TaskStackListenerImpl;-><init>(Landroid/window/VirtualDisplayTaskEmbedder;)
Landroid/window/VirtualDisplayTaskEmbedder$TaskStackListenerImpl;-><init>(Landroid/window/VirtualDisplayTaskEmbedder;Landroid/window/VirtualDisplayTaskEmbedder$1;)
Landroid/window/VirtualDisplayTaskEmbedder$TaskStackListenerImpl;->getTopMostStackInfo()
Landroid/window/VirtualDisplayTaskEmbedder$TaskStackListenerImpl;->onTaskCreated(ILandroid/content/ComponentName;)
Landroid/window/VirtualDisplayTaskEmbedder$TaskStackListenerImpl;->onTaskDescriptionChanged(Landroid/app/ActivityManager$RunningTaskInfo;)
Landroid/window/VirtualDisplayTaskEmbedder$TaskStackListenerImpl;->onTaskMovedToFront(Landroid/app/ActivityManager$RunningTaskInfo;)
Landroid/window/VirtualDisplayTaskEmbedder$TaskStackListenerImpl;->onTaskRemovalStarted(Landroid/app/ActivityManager$RunningTaskInfo;)
Landroid/window/WindowContainerTransaction$HierarchyOp;-><init>(Landroid/os/IBinder;Landroid/os/IBinder;Z)
Landroid/window/WindowContainerTransaction$HierarchyOp;-><init>(Landroid/os/IBinder;Z)
Landroid/window/WindowOrganizer;->takeScreenshot(Landroid/window/WindowContainerToken;)
Lcom/android/icu/charset/CharsetICU;->charsetForName(Ljava/lang/String;)
Lcom/android/icu/charset/CharsetICU;->getAvailableCharsetNames()
Lcom/android/ims/FeatureConnection;-><init>(Landroid/content/Context;I)
Lcom/android/ims/FeatureConnection;->getListener()
Lcom/android/ims/FeatureConnection;->getRegistrationBinder()
Lcom/android/ims/FeatureConnection;->handleImsFeatureCreatedCallback(II)
Lcom/android/ims/FeatureConnection;->handleImsFeatureRemovedCallback(II)
Lcom/android/ims/FeatureConnection;->handleImsStatusChangedCallback(III)
Lcom/android/ims/FeatureConnection;->setStatusCallback(Lcom/android/ims/FeatureConnection$IFeatureUpdate;)
Lcom/android/ims/FeatureConnection$IFeatureUpdate;->notifyStateChanged()
Lcom/android/ims/FeatureConnection$IFeatureUpdate;->notifyUnavailable()
Lcom/android/ims/FeatureConnector;-><init>(Landroid/content/Context;ILcom/android/ims/FeatureConnector$Listener;Ljava/lang/String;)
Lcom/android/ims/FeatureConnector;-><init>(Landroid/content/Context;ILcom/android/ims/FeatureConnector$Listener;Ljava/util/concurrent/Executor;Landroid/os/Looper;)
Lcom/android/ims/FeatureConnector;-><init>(Landroid/content/Context;ILcom/android/ims/FeatureConnector$Listener;Ljava/util/concurrent/Executor;Ljava/lang/String;)
Lcom/android/ims/FeatureConnector;->createImsService()
Lcom/android/ims/FeatureConnector;->notifyReady()
Lcom/android/ims/FeatureConnector;->retryGetImsService()
Lcom/android/ims/FeatureConnector$Listener;->connectionReady(Ljava/lang/Object;)
Lcom/android/ims/FeatureConnector$Listener;->connectionUnavailable()
Lcom/android/ims/FeatureConnector$Listener;->getFeatureManager()
Lcom/android/ims/FeatureConnector$RetryTimeout;->get()
Lcom/android/ims/IFeatureConnector;->addNotifyStatusChangedCallbackIfAvailable(Lcom/android/ims/FeatureConnection$IFeatureUpdate;)
Lcom/android/ims/IFeatureConnector;->getImsServiceState()
Lcom/android/ims/IFeatureConnector;->removeNotifyStatusChangedCallback(Lcom/android/ims/FeatureConnection$IFeatureUpdate;)
Lcom/android/ims/ImsEcbm$ImsEcbmListenerProxy;-><init>(Lcom/android/ims/ImsEcbm;Lcom/android/ims/ImsEcbmStateListener;)
Lcom/android/ims/ImsManager;->addCapabilitiesCallback(Landroid/telephony/ims/ImsMmTelManager$CapabilityCallback;)
Lcom/android/ims/ImsManager;->addNotifyStatusChangedCallbackIfAvailable(Lcom/android/ims/FeatureConnection$IFeatureUpdate;)
Lcom/android/ims/ImsManager;->addRegistrationCallback(Landroid/telephony/ims/RegistrationManager$RegistrationCallback;)
Lcom/android/ims/ImsManager;->addToRecentDisconnectReasons(Landroid/telephony/ims/ImsReasonInfo;)
Lcom/android/ims/ImsManager;->changeMmTelCapability(IIZ)
Lcom/android/ims/ImsManager;->checkAndThrowExceptionIfServiceUnavailable()
Lcom/android/ims/ImsManager;->connectIfServiceIsAvailable()
Lcom/android/ims/ImsManager;->createImsService()
Lcom/android/ims/ImsManager;->getMultiEndpointInterface()
Lcom/android/ims/ImsManager;->getRecentImsDisconnectReasons()
Lcom/android/ims/ImsManager;->getSupplementaryServiceConfiguration()
Lcom/android/ims/ImsManager;->getThreadExecutor()
Lcom/android/ims/ImsManager;->isTurnOffImsAllowedByPlatform(Landroid/content/Context;)
Lcom/android/ims/ImsManager;->makeACopy(Landroid/telephony/ims/ImsReasonInfo;)
Lcom/android/ims/ImsManager;->open(Landroid/telephony/ims/feature/MmTelFeature$Listener;)
Lcom/android/ims/ImsManager;->removeNotifyStatusChangedCallback(Lcom/android/ims/FeatureConnection$IFeatureUpdate;)
Lcom/android/ims/ImsManager;->setAdvanced4GMode(Z)
Lcom/android/ims/ImsManager;->setConfigListener(Lcom/android/ims/ImsConfigListener;)
Lcom/android/ims/ImsManager;->setLteFeatureValues(Z)
Lcom/android/ims/ImsManager;->updateImsServiceConfig(Landroid/content/Context;IZ)
Lcom/android/ims/ImsManager;->updateImsServiceConfig(Z)
Lcom/android/ims/ImsManager;->updateVideoCallFeatureValue(Landroid/telephony/ims/feature/CapabilityChangeRequest;)
Lcom/android/ims/ImsManager;->updateVolteFeatureValue(Landroid/telephony/ims/feature/CapabilityChangeRequest;)
Lcom/android/ims/ImsManager;->updateWfcFeatureAndProvisionedValues(Landroid/telephony/ims/feature/CapabilityChangeRequest;)
Lcom/android/ims/ImsManager$ExecutorFactory;->executeRunnable(Ljava/lang/Runnable;)
Lcom/android/ims/ImsManager$ImsExecutorFactory;-><init>()
Lcom/android/ims/ImsManager$ImsExecutorFactory;->destroy()
Lcom/android/ims/ImsManager$ImsExecutorFactory;->executeRunnable(Ljava/lang/Runnable;)
Lcom/android/ims/MmTelFeatureConnection;-><init>(Landroid/content/Context;I)
Lcom/android/ims/MmTelFeatureConnection;->create(Landroid/content/Context;I)
Lcom/android/ims/MmTelFeatureConnection;->getConfig()
Lcom/android/ims/MmTelFeatureConnection;->getConfigInterface()
Lcom/android/ims/MmTelFeatureConnection;->getMultiEndpointInterface()
Lcom/android/ims/MmTelFeatureConnection;->getRegistrationBinder()
Lcom/android/ims/MmTelFeatureConnection;->getUtInterface()
Lcom/android/ims/MmTelFeatureConnection;->handleImsFeatureCreatedCallback(II)
Lcom/android/ims/MmTelFeatureConnection;->handleImsFeatureRemovedCallback(II)
Lcom/android/ims/MmTelFeatureConnection;->handleImsStatusChangedCallback(III)
Lcom/android/ims/MmTelFeatureConnection;->openConnection(Landroid/telephony/ims/feature/MmTelFeature$Listener;)
Lcom/android/ims/MmTelFeatureConnection;->removeImsFeatureCallback()
Lcom/android/ims/RcsFeatureConnection;-><init>(Landroid/content/Context;ILcom/android/ims/FeatureConnection$IFeatureUpdate;)
Lcom/android/ims/RcsFeatureConnection;->create(Landroid/content/Context;ILcom/android/ims/FeatureConnection$IFeatureUpdate;)
Lcom/android/ims/RcsFeatureConnection;->getRegistrationBinder()
Lcom/android/ims/RcsFeatureConnection;->handleImsFeatureCreatedCallback(II)
Lcom/android/ims/RcsFeatureConnection;->handleImsFeatureRemovedCallback(II)
Lcom/android/ims/RcsFeatureConnection;->handleImsStatusChangedCallback(III)
Lcom/android/ims/RcsFeatureConnection;->isUpdateForThisFeatureAndSlot(II)
Lcom/android/ims/RcsFeatureConnection;->removeImsFeatureCallback()
Lcom/android/ims/RcsFeatureConnection;->removeRcsFeatureListener()
Lcom/android/ims/RcsFeatureConnection;->setRcsFeatureListener(Landroid/telephony/ims/aidl/IRcsFeatureListener;)
Lcom/android/ims/RcsFeatureManager;->addFeatureListenerCallback(Lcom/android/ims/RcsFeatureManager$RcsFeatureCallbacks;)
Lcom/android/ims/RcsFeatureManager;->addNotifyStatusChangedCallbackIfAvailable(Lcom/android/ims/FeatureConnection$IFeatureUpdate;)
Lcom/android/ims/RcsFeatureManager;->createImsService()
Lcom/android/ims/RcsFeatureManager;->getImsServiceState()
Lcom/android/ims/RcsFeatureManager;->isAvailable(I)
Lcom/android/ims/RcsFeatureManager;->isOptionsSupported()
Lcom/android/ims/RcsFeatureManager;->isPresenceSupported()
Lcom/android/ims/RcsFeatureManager;->removeFeatureListenerCallback(Lcom/android/ims/RcsFeatureManager$RcsFeatureCallbacks;)
Lcom/android/ims/RcsFeatureManager;->removeNotifyStatusChangedCallback(Lcom/android/ims/FeatureConnection$IFeatureUpdate;)
Lcom/android/ims/RcsFeatureManager;->updateCapabilities()
Lcom/android/ims/RcsFeatureManager$RcsFeatureCallbacks;-><init>()
Lcom/android/ims/RcsFeatureManager$RcsFeatureCallbacks;->onCapabilityRequestResponseOptions(ILjava/lang/String;Landroid/telephony/ims/RcsContactUceCapability;I)
Lcom/android/ims/RcsFeatureManager$RcsFeatureCallbacks;->onCapabilityRequestResponsePresence(Ljava/util/List;I)
Lcom/android/ims/RcsFeatureManager$RcsFeatureCallbacks;->onCommandUpdate(II)
Lcom/android/ims/RcsFeatureManager$RcsFeatureCallbacks;->onNetworkResponse(ILjava/lang/String;I)
Lcom/android/ims/RcsFeatureManager$RcsFeatureCallbacks;->onNotifyUpdateCapabilities(I)
Lcom/android/ims/RcsFeatureManager$RcsFeatureCallbacks;->onRemoteCapabilityRequest(Landroid/net/Uri;Landroid/telephony/ims/RcsContactUceCapability;I)
Lcom/android/ims/RcsFeatureManager$RcsFeatureCallbacks;->onUnpublish()
Lcom/android/ims/internal/IImsServiceController;->createEmergencyMMTelFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/ims/internal/IImsServiceController;->createMMTelFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/ims/internal/IImsServiceController;->createRcsFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/ims/internal/IImsServiceController;->removeImsFeature(IILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/ims/internal/IImsServiceController$Default;->createEmergencyMMTelFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/ims/internal/IImsServiceController$Default;->createMMTelFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/ims/internal/IImsServiceController$Default;->createRcsFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/ims/internal/IImsServiceController$Default;->removeImsFeature(IILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/ims/internal/IImsServiceController$Stub$Proxy;->createEmergencyMMTelFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/ims/internal/IImsServiceController$Stub$Proxy;->createMMTelFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/ims/internal/IImsServiceController$Stub$Proxy;->createRcsFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/ims/internal/IImsServiceController$Stub$Proxy;->removeImsFeature(IILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/ims/internal/IImsServiceFeatureCallback;->imsFeatureCreated(II)
Lcom/android/ims/internal/IImsServiceFeatureCallback;->imsFeatureRemoved(II)
Lcom/android/ims/internal/IImsServiceFeatureCallback;->imsStatusChanged(III)
Lcom/android/ims/internal/IImsServiceFeatureCallback$Default;->imsFeatureCreated(II)
Lcom/android/ims/internal/IImsServiceFeatureCallback$Default;->imsFeatureRemoved(II)
Lcom/android/ims/internal/IImsServiceFeatureCallback$Default;->imsStatusChanged(III)
Lcom/android/ims/internal/IImsServiceFeatureCallback$Stub$Proxy;->imsFeatureCreated(II)
Lcom/android/ims/internal/IImsServiceFeatureCallback$Stub$Proxy;->imsFeatureRemoved(II)
Lcom/android/ims/internal/IImsServiceFeatureCallback$Stub$Proxy;->imsStatusChanged(III)
Lcom/android/internal/BrightnessSynchronizer;-><init>(Landroid/content/Context;)
Lcom/android/internal/BrightnessSynchronizer;->brightnessFloatToInt(Landroid/content/Context;F)
Lcom/android/internal/BrightnessSynchronizer;->brightnessFloatToIntRange(Landroid/content/Context;F)
Lcom/android/internal/BrightnessSynchronizer;->brightnessFloatToIntRange(FFFFF)
Lcom/android/internal/BrightnessSynchronizer;->brightnessIntToFloat(Landroid/content/Context;I)
Lcom/android/internal/BrightnessSynchronizer;->brightnessIntToFloat(IIIFF)
Lcom/android/internal/BrightnessSynchronizer;->floatEquals(FF)
Lcom/android/internal/BrightnessSynchronizer;->getScreenBrightnessFloat(Landroid/content/Context;)
Lcom/android/internal/BrightnessSynchronizer;->getScreenBrightnessInt(Landroid/content/Context;)
Lcom/android/internal/BrightnessSynchronizer;->updateBrightnessFloatFromInt(I)
Lcom/android/internal/BrightnessSynchronizer;->updateBrightnessIntFromFloat(F)
Lcom/android/internal/BrightnessSynchronizer$BrightnessSyncObserver;-><init>(Lcom/android/internal/BrightnessSynchronizer;Landroid/os/Handler;)
Lcom/android/internal/BrightnessSynchronizer$BrightnessSyncObserver;->onChange(Z)
Lcom/android/internal/BrightnessSynchronizer$BrightnessSyncObserver;->onChange(ZLandroid/net/Uri;)
Lcom/android/internal/BrightnessSynchronizer$BrightnessSyncObserver;->startObserving()
Lcom/android/internal/BrightnessSynchronizer$BrightnessSyncObserver;->stopObserving()
Lcom/android/internal/accessibility/dialog/AccessibilityTargetHelper;->getWhiteListingFeatureTargets(Landroid/content/Context;I)
Lcom/android/internal/accessibility/dialog/InvisibleToggleWhiteListingFeatureTarget;-><init>(Landroid/content/Context;IZLjava/lang/String;Ljava/lang/CharSequence;Landroid/graphics/drawable/Drawable;Ljava/lang/String;)
Lcom/android/internal/accessibility/dialog/ToggleWhiteListingFeatureTarget;-><init>(Landroid/content/Context;IZLjava/lang/String;Ljava/lang/CharSequence;Landroid/graphics/drawable/Drawable;Ljava/lang/String;)
Lcom/android/internal/accessibility/dialog/ToggleWhiteListingFeatureTarget;->isFeatureEnabled()
Lcom/android/internal/accessibility/dialog/ToggleWhiteListingFeatureTarget;->updateActionItem(Lcom/android/internal/accessibility/dialog/TargetAdapter$ViewHolder;I)
Lcom/android/internal/accessibility/util/AccessibilityStatsLogUtils;->convertToLoggingShortcutType(I)
Lcom/android/internal/accessibility/util/AccessibilityStatsLogUtils;->logAccessibilityShortcutActivated(Landroid/content/ComponentName;I)
Lcom/android/internal/accessibility/util/AccessibilityStatsLogUtils;->logAccessibilityShortcutActivated(Landroid/content/ComponentName;IZ)
Lcom/android/internal/accessibility/util/AccessibilityStatsLogUtils;->logAccessibilityShortcutActivated(Landroid/content/ComponentName;II)
Lcom/android/internal/app/AppPredictionServiceResolverComparator;-><init>(Landroid/content/Context;Landroid/content/Intent;Ljava/lang/String;Landroid/app/prediction/AppPredictor;Landroid/os/UserHandle;)
Lcom/android/internal/app/ChooserActivity;->getDisplayResolveInfos(Lcom/android/internal/app/ChooserListAdapter;)
Lcom/android/internal/app/ChooserActivity;->isPackageEnabled(Ljava/lang/String;)
Lcom/android/internal/app/ChooserActivity;->sendChooserTargetRankingScore(Ljava/util/List;Landroid/os/UserHandle;)
Lcom/android/internal/app/ChooserActivity;->sendShareShortcutInfoList(Ljava/util/List;Ljava/util/List;Ljava/util/List;Landroid/os/UserHandle;)
Lcom/android/internal/app/ChooserActivity$ChooserGridAdapter;->getContentPreviewRowCount()
Lcom/android/internal/app/ChooserActivity$ChooserGridAdapter;->getMaxTargetsPerRow()
Lcom/android/internal/app/ChooserListAdapter;-><init>(Landroid/content/Context;Ljava/util/List;[Landroid/content/Intent;Ljava/util/List;ZLcom/android/internal/app/ResolverListController;Lcom/android/internal/app/ChooserListAdapter$ChooserListCommunicator;Lcom/android/internal/app/chooser/SelectableTargetInfo$SelectableTargetInfoCommunicator;Landroid/content/pm/PackageManager;)
Lcom/android/internal/app/ChooserListAdapter;->addChooserTargetRankingScore(Ljava/util/List;)
Lcom/android/internal/app/ChooserListAdapter;->appendServiceTargetsWithQuota()
Lcom/android/internal/app/ChooserListAdapter;->checkDuplicateTarget(Lcom/android/internal/app/chooser/ChooserTargetInfo;Ljava/util/List;)
Lcom/android/internal/app/ChooserListAdapter;->fillAllServiceTargets()
Lcom/android/internal/app/ChooserListAdapter;->parkTargetIntoMemory(Lcom/android/internal/app/chooser/DisplayResolveInfo;Ljava/util/List;ILjava/util/Map;Ljava/util/List;)
Lcom/android/internal/app/ChooserListAdapter;->rankTargetsWithinComponent(Landroid/content/ComponentName;)
Lcom/android/internal/app/ChooserMultiProfilePagerAdapter;-><init>(Landroid/content/Context;Lcom/android/internal/app/ChooserActivity$ChooserGridAdapter;Landroid/os/UserHandle;Landroid/os/UserHandle;Z)
Lcom/android/internal/app/ChooserMultiProfilePagerAdapter;-><init>(Landroid/content/Context;Lcom/android/internal/app/ChooserActivity$ChooserGridAdapter;Lcom/android/internal/app/ChooserActivity$ChooserGridAdapter;ILandroid/os/UserHandle;Landroid/os/UserHandle;Z)
Lcom/android/internal/app/ChooserStackedAppDialogFragment;-><init>(Lcom/android/internal/app/chooser/MultiDisplayResolveInfo;ILandroid/os/UserHandle;)
Lcom/android/internal/app/ChooserTargetActionsDialogFragment;-><init>(Ljava/util/List;Landroid/os/UserHandle;)
Lcom/android/internal/app/ChooserTargetActionsDialogFragment;->onConfigurationChanged(Landroid/content/res/Configuration;)
Lcom/android/internal/app/IAppOpsActiveCallback;->opActiveChanged(IILjava/lang/String;Z)
Lcom/android/internal/app/IAppOpsActiveCallback$Default;->opActiveChanged(IILjava/lang/String;Z)
Lcom/android/internal/app/IAppOpsActiveCallback$Stub$Proxy;->opActiveChanged(IILjava/lang/String;Z)
Lcom/android/internal/app/IAppOpsNotedCallback;->opNoted(IILjava/lang/String;I)
Lcom/android/internal/app/IAppOpsNotedCallback$Default;->opNoted(IILjava/lang/String;I)
Lcom/android/internal/app/IAppOpsNotedCallback$Stub$Proxy;->opNoted(IILjava/lang/String;I)
Lcom/android/internal/app/IAppOpsService;->checkOperationRaw(IILjava/lang/String;)
Lcom/android/internal/app/IAppOpsService;->getHistoricalOps(ILjava/lang/String;Ljava/lang/String;Ljava/util/List;IJJILandroid/os/RemoteCallback;)
Lcom/android/internal/app/IAppOpsService;->getHistoricalOpsFromDiskRaw(ILjava/lang/String;Ljava/lang/String;Ljava/util/List;IJJILandroid/os/RemoteCallback;)
Lcom/android/internal/app/IAppOpsService;->noteOperation(IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;)
Lcom/android/internal/app/IAppOpsService;->noteProxyOperation(IILjava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;)
Lcom/android/internal/app/IAppOpsService;->setUserRestriction(IZLandroid/os/IBinder;I[Ljava/lang/String;)
Lcom/android/internal/app/IAppOpsService;->startOperation(Landroid/os/IBinder;IILjava/lang/String;Ljava/lang/String;ZZLjava/lang/String;)
Lcom/android/internal/app/IAppOpsService$Default;->checkOperationRaw(IILjava/lang/String;)
Lcom/android/internal/app/IAppOpsService$Default;->getHistoricalOps(ILjava/lang/String;Ljava/lang/String;Ljava/util/List;IJJILandroid/os/RemoteCallback;)
Lcom/android/internal/app/IAppOpsService$Default;->getHistoricalOpsFromDiskRaw(ILjava/lang/String;Ljava/lang/String;Ljava/util/List;IJJILandroid/os/RemoteCallback;)
Lcom/android/internal/app/IAppOpsService$Default;->noteOperation(IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;)
Lcom/android/internal/app/IAppOpsService$Default;->noteProxyOperation(IILjava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;)
Lcom/android/internal/app/IAppOpsService$Default;->setUserRestriction(IZLandroid/os/IBinder;I[Ljava/lang/String;)
Lcom/android/internal/app/IAppOpsService$Default;->startOperation(Landroid/os/IBinder;IILjava/lang/String;Ljava/lang/String;ZZLjava/lang/String;)
Lcom/android/internal/app/IAppOpsService$Stub$Proxy;->checkOperationRaw(IILjava/lang/String;)
Lcom/android/internal/app/IAppOpsService$Stub$Proxy;->getHistoricalOps(ILjava/lang/String;Ljava/lang/String;Ljava/util/List;IJJILandroid/os/RemoteCallback;)
Lcom/android/internal/app/IAppOpsService$Stub$Proxy;->getHistoricalOpsFromDiskRaw(ILjava/lang/String;Ljava/lang/String;Ljava/util/List;IJJILandroid/os/RemoteCallback;)
Lcom/android/internal/app/IAppOpsService$Stub$Proxy;->noteOperation(IILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;)
Lcom/android/internal/app/IAppOpsService$Stub$Proxy;->noteProxyOperation(IILjava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;)
Lcom/android/internal/app/IAppOpsService$Stub$Proxy;->setUserRestriction(IZLandroid/os/IBinder;I[Ljava/lang/String;)
Lcom/android/internal/app/IAppOpsService$Stub$Proxy;->startOperation(Landroid/os/IBinder;IILjava/lang/String;Ljava/lang/String;ZZLjava/lang/String;)
Lcom/android/internal/app/IAppOpsStartedCallback;->opStarted(IILjava/lang/String;I)
Lcom/android/internal/app/IAppOpsStartedCallback$Default;->opStarted(IILjava/lang/String;I)
Lcom/android/internal/app/IAppOpsStartedCallback$Stub$Proxy;->opStarted(IILjava/lang/String;I)
Lcom/android/internal/app/IBatteryStats;->getStatisticsStream()
Lcom/android/internal/app/IBatteryStats;->noteNetworkInterfaceType(Ljava/lang/String;I)
Lcom/android/internal/app/IBatteryStats$Default;->getStatisticsStream()
Lcom/android/internal/app/IBatteryStats$Default;->noteNetworkInterfaceType(Ljava/lang/String;I)
Lcom/android/internal/app/IBatteryStats$Stub$Proxy;->getStatisticsStream()
Lcom/android/internal/app/IBatteryStats$Stub$Proxy;->noteNetworkInterfaceType(Ljava/lang/String;I)
Lcom/android/internal/app/ISoundTriggerService;->deleteSoundModel(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService;->getModelState(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService;->getModuleProperties()
Lcom/android/internal/app/ISoundTriggerService;->getParameter(Landroid/os/ParcelUuid;I)
Lcom/android/internal/app/ISoundTriggerService;->getSoundModel(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService;->isRecognitionActive(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService;->loadGenericSoundModel(Landroid/hardware/soundtrigger/SoundTrigger$GenericSoundModel;)
Lcom/android/internal/app/ISoundTriggerService;->loadKeyphraseSoundModel(Landroid/hardware/soundtrigger/SoundTrigger$KeyphraseSoundModel;)
Lcom/android/internal/app/ISoundTriggerService;->queryParameter(Landroid/os/ParcelUuid;I)
Lcom/android/internal/app/ISoundTriggerService;->setParameter(Landroid/os/ParcelUuid;II)
Lcom/android/internal/app/ISoundTriggerService;->startRecognition(Landroid/os/ParcelUuid;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)
Lcom/android/internal/app/ISoundTriggerService;->startRecognitionForService(Landroid/os/ParcelUuid;Landroid/os/Bundle;Landroid/content/ComponentName;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)
Lcom/android/internal/app/ISoundTriggerService;->stopRecognition(Landroid/os/ParcelUuid;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;)
Lcom/android/internal/app/ISoundTriggerService;->stopRecognitionForService(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService;->unloadSoundModel(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService;->updateSoundModel(Landroid/hardware/soundtrigger/SoundTrigger$GenericSoundModel;)
Lcom/android/internal/app/ISoundTriggerService$Default;->deleteSoundModel(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService$Default;->getModelState(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService$Default;->getModuleProperties()
Lcom/android/internal/app/ISoundTriggerService$Default;->getParameter(Landroid/os/ParcelUuid;I)
Lcom/android/internal/app/ISoundTriggerService$Default;->getSoundModel(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService$Default;->isRecognitionActive(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService$Default;->loadGenericSoundModel(Landroid/hardware/soundtrigger/SoundTrigger$GenericSoundModel;)
Lcom/android/internal/app/ISoundTriggerService$Default;->loadKeyphraseSoundModel(Landroid/hardware/soundtrigger/SoundTrigger$KeyphraseSoundModel;)
Lcom/android/internal/app/ISoundTriggerService$Default;->queryParameter(Landroid/os/ParcelUuid;I)
Lcom/android/internal/app/ISoundTriggerService$Default;->setParameter(Landroid/os/ParcelUuid;II)
Lcom/android/internal/app/ISoundTriggerService$Default;->startRecognition(Landroid/os/ParcelUuid;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)
Lcom/android/internal/app/ISoundTriggerService$Default;->startRecognitionForService(Landroid/os/ParcelUuid;Landroid/os/Bundle;Landroid/content/ComponentName;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)
Lcom/android/internal/app/ISoundTriggerService$Default;->stopRecognition(Landroid/os/ParcelUuid;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;)
Lcom/android/internal/app/ISoundTriggerService$Default;->stopRecognitionForService(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService$Default;->unloadSoundModel(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService$Default;->updateSoundModel(Landroid/hardware/soundtrigger/SoundTrigger$GenericSoundModel;)
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->deleteSoundModel(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->getModelState(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->getModuleProperties()
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->getParameter(Landroid/os/ParcelUuid;I)
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->getSoundModel(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->isRecognitionActive(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->loadGenericSoundModel(Landroid/hardware/soundtrigger/SoundTrigger$GenericSoundModel;)
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->loadKeyphraseSoundModel(Landroid/hardware/soundtrigger/SoundTrigger$KeyphraseSoundModel;)
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->queryParameter(Landroid/os/ParcelUuid;I)
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->setParameter(Landroid/os/ParcelUuid;II)
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->startRecognition(Landroid/os/ParcelUuid;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->startRecognitionForService(Landroid/os/ParcelUuid;Landroid/os/Bundle;Landroid/content/ComponentName;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->stopRecognition(Landroid/os/ParcelUuid;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;)
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->stopRecognitionForService(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->unloadSoundModel(Landroid/os/ParcelUuid;)
Lcom/android/internal/app/ISoundTriggerService$Stub$Proxy;->updateSoundModel(Landroid/hardware/soundtrigger/SoundTrigger$GenericSoundModel;)
Lcom/android/internal/app/IVoiceInteractionManagerService;->getDspModuleProperties()
Lcom/android/internal/app/IVoiceInteractionManagerService;->getParameter(II)
Lcom/android/internal/app/IVoiceInteractionManagerService;->queryParameter(II)
Lcom/android/internal/app/IVoiceInteractionManagerService;->setParameter(III)
Lcom/android/internal/app/IVoiceInteractionManagerService;->startRecognition(ILjava/lang/String;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)
Lcom/android/internal/app/IVoiceInteractionManagerService;->stopRecognition(ILandroid/hardware/soundtrigger/IRecognitionStatusCallback;)
Lcom/android/internal/app/IVoiceInteractionManagerService$Default;->getDspModuleProperties()
Lcom/android/internal/app/IVoiceInteractionManagerService$Default;->getParameter(II)
Lcom/android/internal/app/IVoiceInteractionManagerService$Default;->queryParameter(II)
Lcom/android/internal/app/IVoiceInteractionManagerService$Default;->setParameter(III)
Lcom/android/internal/app/IVoiceInteractionManagerService$Default;->startRecognition(ILjava/lang/String;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)
Lcom/android/internal/app/IVoiceInteractionManagerService$Default;->stopRecognition(ILandroid/hardware/soundtrigger/IRecognitionStatusCallback;)
Lcom/android/internal/app/IVoiceInteractionManagerService$Stub$Proxy;->getDspModuleProperties()
Lcom/android/internal/app/IVoiceInteractionManagerService$Stub$Proxy;->getParameter(II)
Lcom/android/internal/app/IVoiceInteractionManagerService$Stub$Proxy;->queryParameter(II)
Lcom/android/internal/app/IVoiceInteractionManagerService$Stub$Proxy;->setParameter(III)
Lcom/android/internal/app/IVoiceInteractionManagerService$Stub$Proxy;->startRecognition(ILjava/lang/String;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)
Lcom/android/internal/app/IVoiceInteractionManagerService$Stub$Proxy;->stopRecognition(ILandroid/hardware/soundtrigger/IRecognitionStatusCallback;)
Lcom/android/internal/app/NetInitiatedActivity;->handleNIVerify(Landroid/content/Intent;)
Lcom/android/internal/app/NetInitiatedActivity;->showNIError()
Lcom/android/internal/app/PlatLogoActivity;->launchNextStage()
Lcom/android/internal/app/PlatLogoActivity;->testOverlap()
Lcom/android/internal/app/PlatLogoActivity$BackslashDrawable;-><init>(I)
Lcom/android/internal/app/PlatLogoActivity$BackslashDrawable;->draw(Landroid/graphics/Canvas;)
Lcom/android/internal/app/PlatLogoActivity$BackslashDrawable;->getOpacity()
Lcom/android/internal/app/PlatLogoActivity$BackslashDrawable;->onTimeUpdate(Landroid/animation/TimeAnimator;JJ)
Lcom/android/internal/app/PlatLogoActivity$BackslashDrawable;->setAlpha(I)
Lcom/android/internal/app/PlatLogoActivity$BackslashDrawable;->setColorFilter(Landroid/graphics/ColorFilter;)
Lcom/android/internal/app/PlatLogoActivity$BackslashDrawable;->startAnimating()
Lcom/android/internal/app/PlatLogoActivity$BackslashDrawable;->stopAnimating()
Lcom/android/internal/app/PlatLogoActivity$OneDrawable;-><init>()
Lcom/android/internal/app/PlatLogoActivity$OneDrawable;->draw(Landroid/graphics/Canvas;)
Lcom/android/internal/app/PlatLogoActivity$OneDrawable;->getOpacity()
Lcom/android/internal/app/PlatLogoActivity$OneDrawable;->setAlpha(I)
Lcom/android/internal/app/PlatLogoActivity$OneDrawable;->setColorFilter(Landroid/graphics/ColorFilter;)
Lcom/android/internal/app/PlatLogoActivity$OneDrawable;->setTintList(Landroid/content/res/ColorStateList;)
Lcom/android/internal/app/PlatLogoActivity$ZeroDrawable;-><init>()
Lcom/android/internal/app/PlatLogoActivity$ZeroDrawable;->draw(Landroid/graphics/Canvas;)
Lcom/android/internal/app/PlatLogoActivity$ZeroDrawable;->getOpacity()
Lcom/android/internal/app/PlatLogoActivity$ZeroDrawable;->setAlpha(I)
Lcom/android/internal/app/PlatLogoActivity$ZeroDrawable;->setColorFilter(Landroid/graphics/ColorFilter;)
Lcom/android/internal/app/PlatLogoActivity$ZeroDrawable;->setTintList(Landroid/content/res/ColorStateList;)
Lcom/android/internal/app/ResolverActivity;->safelyStartActivityInternal(Lcom/android/internal/app/chooser/TargetInfo;)
Lcom/android/internal/app/ResolverListAdapter;->createSuspendedColorMatrix()
Lcom/android/internal/app/ResolverListAdapter$LoadIconTask;-><init>(Lcom/android/internal/app/ResolverListAdapter;Lcom/android/internal/app/chooser/DisplayResolveInfo;Landroid/widget/ImageView;)
Lcom/android/internal/app/ResolverListAdapter$ViewHolder;->bindLabel(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)
Lcom/android/internal/app/ResolverRankerServiceResolverComparator;-><init>(Landroid/content/Context;Landroid/content/Intent;Ljava/lang/String;Lcom/android/internal/app/AbstractResolverComparator$AfterCompute;)
Lcom/android/internal/app/procstats/AssociationState;->createSortedAssociations(JJ)
Lcom/android/internal/app/procstats/AssociationState$SourceDumpContainer;-><init>(Lcom/android/internal/app/procstats/AssociationState;Lcom/android/internal/app/procstats/AssociationState$SourceState;)
Lcom/android/internal/app/procstats/AssociationState$SourceState;-><init>(Lcom/android/internal/app/procstats/AssociationState;Lcom/android/internal/app/procstats/AssociationState$SourceKey;)
Lcom/android/internal/app/procstats/ProcessState;->dumpInternalLocked(Ljava/io/PrintWriter;Ljava/lang/String;Z)
Lcom/android/internal/app/procstats/ProcessState;->readFromParcel(Landroid/os/Parcel;Z)
Lcom/android/internal/app/procstats/ProcessStats;->dumpAggregatedProtoForStatsd(Landroid/util/proto/ProtoOutputStream;)
Lcom/android/internal/app/procstats/ProcessStats;->dumpFilteredAssociationStatesProtoForProc(Landroid/util/proto/ProtoOutputStream;JJLcom/android/internal/app/procstats/ProcessState;Lcom/android/internal/app/ProcessMap;Landroid/util/SparseArray;)
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;-><init>()
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->draw(Landroid/graphics/Canvas;)
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->getAlpha()
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->getColorFilter()
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->getMainColor()
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->getOpacity()
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->setAlpha(I)
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->setColor(IZ)
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->setColorFilter(Landroid/graphics/ColorFilter;)
Lcom/android/internal/colorextraction/drawable/ScrimDrawable;->setXfermode(Landroid/graphics/Xfermode;)
Lcom/android/internal/compat/CompatibilityChangeInfo;-><init>(Ljava/lang/Long;Ljava/lang/String;IZZLjava/lang/String;)
Lcom/android/internal/compat/CompatibilityChangeInfo;->getEnableAfterTargetSdk()
Lcom/android/internal/content/FileSystemProvider;->moveInMediaStore(Ljava/io/File;Ljava/io/File;)
Lcom/android/internal/content/FileSystemProvider;->removeFromMediaStore(Ljava/io/File;)
Lcom/android/internal/content/NativeLibraryHelper;->waitForNativeBinariesExtraction(Landroid/util/ArraySet;)
Lcom/android/internal/content/NativeLibraryHelper$Handle;->create(Landroid/content/pm/PackageParser$PackageLite;)
Lcom/android/internal/content/NativeLibraryHelper$Handle;->createFd(Landroid/content/pm/PackageParser$PackageLite;Ljava/io/FileDescriptor;)
Lcom/android/internal/content/PackageHelper;->calculateInstalledSize(Landroid/content/pm/PackageParser$PackageLite;ZLcom/android/internal/content/NativeLibraryHelper$Handle;Ljava/lang/String;)
Lcom/android/internal/content/PackageHelper;->calculateInstalledSize(Landroid/content/pm/PackageParser$PackageLite;ZLjava/lang/String;)
Lcom/android/internal/content/PackageHelper;->calculateInstalledSize(Landroid/content/pm/PackageParser$PackageLite;Lcom/android/internal/content/NativeLibraryHelper$Handle;Ljava/lang/String;)
Lcom/android/internal/content/PackageHelper;->calculateInstalledSize(Landroid/content/pm/PackageParser$PackageLite;Ljava/lang/String;)
Lcom/android/internal/content/PackageHelper;->calculateInstalledSize(Landroid/content/pm/PackageParser$PackageLite;Ljava/lang/String;Ljava/io/FileDescriptor;)
Lcom/android/internal/graphics/palette/ColorCutQuantizer;->quantize([II[Lcom/android/internal/graphics/palette/Palette$Filter;)
Lcom/android/internal/graphics/palette/ColorCutQuantizer;->shouldIgnoreColor(Lcom/android/internal/graphics/palette/Palette$Swatch;)
Lcom/android/internal/graphics/palette/ColorCutQuantizer;->shouldIgnoreColor(I)
Lcom/android/internal/graphics/palette/ColorCutQuantizer;->shouldIgnoreColor(I[F)
Lcom/android/internal/graphics/palette/Palette;-><init>(Ljava/util/List;Ljava/util/List;)
Lcom/android/internal/graphics/palette/Palette;->copyHslValues(Lcom/android/internal/graphics/palette/Palette$Swatch;)
Lcom/android/internal/graphics/palette/Palette;->from(Landroid/graphics/Bitmap;)
Lcom/android/internal/graphics/palette/Palette;->generate()
Lcom/android/internal/graphics/palette/Palette;->generate(Landroid/graphics/Bitmap;)
Lcom/android/internal/graphics/palette/Palette;->generate(Landroid/graphics/Bitmap;I)
Lcom/android/internal/graphics/palette/Palette;->generateAsync(Landroid/graphics/Bitmap;Lcom/android/internal/graphics/palette/Palette$PaletteAsyncListener;)
Lcom/android/internal/graphics/palette/Palette;->generateAsync(Landroid/graphics/Bitmap;ILcom/android/internal/graphics/palette/Palette$PaletteAsyncListener;)
Lcom/android/internal/graphics/palette/Palette;->generateScore(Lcom/android/internal/graphics/palette/Palette$Swatch;Lcom/android/internal/graphics/palette/Target;)
Lcom/android/internal/graphics/palette/Palette;->generateScoredTarget(Lcom/android/internal/graphics/palette/Target;)
Lcom/android/internal/graphics/palette/Palette;->getColorForTarget(Lcom/android/internal/graphics/palette/Target;I)
Lcom/android/internal/graphics/palette/Palette;->getDarkMutedColor(I)
Lcom/android/internal/graphics/palette/Palette;->getDarkMutedSwatch()
Lcom/android/internal/graphics/palette/Palette;->getDarkVibrantColor(I)
Lcom/android/internal/graphics/palette/Palette;->getDarkVibrantSwatch()
Lcom/android/internal/graphics/palette/Palette;->getDominantColor(I)
Lcom/android/internal/graphics/palette/Palette;->getLightMutedColor(I)
Lcom/android/internal/graphics/palette/Palette;->getLightMutedSwatch()
Lcom/android/internal/graphics/palette/Palette;->getLightVibrantColor(I)
Lcom/android/internal/graphics/palette/Palette;->getLightVibrantSwatch()
Lcom/android/internal/graphics/palette/Palette;->getMaxScoredSwatchForTarget(Lcom/android/internal/graphics/palette/Target;)
Lcom/android/internal/graphics/palette/Palette;->getMutedColor(I)
Lcom/android/internal/graphics/palette/Palette;->getMutedSwatch()
Lcom/android/internal/graphics/palette/Palette;->getSwatchForTarget(Lcom/android/internal/graphics/palette/Target;)
Lcom/android/internal/graphics/palette/Palette;->getTargets()
Lcom/android/internal/graphics/palette/Palette;->getVibrantColor(I)
Lcom/android/internal/graphics/palette/Palette;->getVibrantSwatch()
Lcom/android/internal/graphics/palette/Palette;->shouldBeScoredForTarget(Lcom/android/internal/graphics/palette/Palette$Swatch;Lcom/android/internal/graphics/palette/Target;)
Lcom/android/internal/graphics/palette/Palette$Builder;-><init>(Landroid/graphics/Bitmap;)
Lcom/android/internal/graphics/palette/Palette$Builder;->addFilter(Lcom/android/internal/graphics/palette/Palette$Filter;)
Lcom/android/internal/graphics/palette/Palette$Builder;->addTarget(Lcom/android/internal/graphics/palette/Target;)
Lcom/android/internal/graphics/palette/Palette$Builder;->clearFilters()
Lcom/android/internal/graphics/palette/Palette$Builder;->clearTargets()
Lcom/android/internal/graphics/palette/Palette$Builder;->setQuantizer(Lcom/android/internal/graphics/palette/Quantizer;)
Lcom/android/internal/graphics/palette/Palette$Swatch;-><init>([FI)
Lcom/android/internal/graphics/palette/Palette$Swatch;-><init>(IIII)
Lcom/android/internal/graphics/palette/Palette$Swatch;->ensureTextColorsGenerated()
Lcom/android/internal/graphics/palette/Palette$Swatch;->getBodyTextColor()
Lcom/android/internal/graphics/palette/Palette$Swatch;->getHsl()
Lcom/android/internal/graphics/palette/Palette$Swatch;->getRgb()
Lcom/android/internal/graphics/palette/Palette$Swatch;->getTitleTextColor()
Lcom/android/internal/graphics/palette/Quantizer;->quantize([II[Lcom/android/internal/graphics/palette/Palette$Filter;)
Lcom/android/internal/graphics/palette/Target;->getMaximumLightness()
Lcom/android/internal/graphics/palette/Target;->getMaximumSaturation()
Lcom/android/internal/graphics/palette/Target;->getMinimumLightness()
Lcom/android/internal/graphics/palette/Target;->getMinimumSaturation()
Lcom/android/internal/graphics/palette/Target;->getSaturationWeight()
Lcom/android/internal/graphics/palette/Target;->getTargetLightness()
Lcom/android/internal/graphics/palette/Target;->getTargetSaturation()
Lcom/android/internal/graphics/palette/Target;->isExclusive()
Lcom/android/internal/graphics/palette/Target;->normalizeWeights()
Lcom/android/internal/graphics/palette/Target;->setDefaultDarkLightnessValues(Lcom/android/internal/graphics/palette/Target;)
Lcom/android/internal/graphics/palette/Target;->setDefaultLightLightnessValues(Lcom/android/internal/graphics/palette/Target;)
Lcom/android/internal/graphics/palette/Target;->setDefaultMutedSaturationValues(Lcom/android/internal/graphics/palette/Target;)
Lcom/android/internal/graphics/palette/Target;->setDefaultNormalLightnessValues(Lcom/android/internal/graphics/palette/Target;)
Lcom/android/internal/graphics/palette/Target;->setDefaultVibrantSaturationValues(Lcom/android/internal/graphics/palette/Target;)
Lcom/android/internal/graphics/palette/Target;->setDefaultWeights()
Lcom/android/internal/graphics/palette/Target;->setTargetDefaultValues([F)
Lcom/android/internal/graphics/palette/Target$Builder;->setExclusive(Z)
Lcom/android/internal/graphics/palette/Target$Builder;->setMaximumLightness(F)
Lcom/android/internal/graphics/palette/Target$Builder;->setMaximumSaturation(F)
Lcom/android/internal/graphics/palette/Target$Builder;->setMinimumLightness(F)
Lcom/android/internal/graphics/palette/Target$Builder;->setMinimumSaturation(F)
Lcom/android/internal/graphics/palette/Target$Builder;->setSaturationWeight(F)
Lcom/android/internal/graphics/palette/Target$Builder;->setTargetLightness(F)
Lcom/android/internal/graphics/palette/Target$Builder;->setTargetSaturation(F)
Lcom/android/internal/graphics/palette/VariationalKMeansQuantizer;->quantize([II[Lcom/android/internal/graphics/palette/Palette$Filter;)
Lcom/android/internal/infra/AndroidFuture;->parcelException(Landroid/os/Parcel;Ljava/lang/Throwable;)
Lcom/android/internal/infra/AndroidFuture;->unparcelException(Landroid/os/Parcel;)
Lcom/android/internal/infra/ServiceConnector$Impl;->bindService(Landroid/content/ServiceConnection;Landroid/os/Handler;)
Lcom/android/internal/infra/ThrottledRunnable;-><init>(Landroid/os/Handler;JLjava/lang/Runnable;)
Lcom/android/internal/infra/ThrottledRunnable;->run()
Lcom/android/internal/inputmethod/CancellationGroup;->createCompletableCharSequence()
Lcom/android/internal/inputmethod/CancellationGroup;->createCompletableExtractedText()
Lcom/android/internal/inputmethod/CancellationGroup;->createCompletableInt()
Lcom/android/internal/inputmethod/CancellationGroup$Completable;-><init>()
Lcom/android/internal/inputmethod/CancellationGroup$Completable$CharSequence;-><init>(Lcom/android/internal/inputmethod/CancellationGroup;)
Lcom/android/internal/inputmethod/CancellationGroup$Completable$CharSequence;-><init>(Lcom/android/internal/inputmethod/CancellationGroup;Lcom/android/internal/inputmethod/CancellationGroup$1;)
Lcom/android/internal/inputmethod/CancellationGroup$Completable$ExtractedText;-><init>(Lcom/android/internal/inputmethod/CancellationGroup;)
Lcom/android/internal/inputmethod/CancellationGroup$Completable$ExtractedText;-><init>(Lcom/android/internal/inputmethod/CancellationGroup;Lcom/android/internal/inputmethod/CancellationGroup$1;)
Lcom/android/internal/inputmethod/CancellationGroup$Completable$Int;-><init>(Lcom/android/internal/inputmethod/CancellationGroup;)
Lcom/android/internal/inputmethod/CancellationGroup$Completable$Int;-><init>(Lcom/android/internal/inputmethod/CancellationGroup;Lcom/android/internal/inputmethod/CancellationGroup$1;)
Lcom/android/internal/inputmethod/CancellationGroup$Completable$Int;->await(ILjava/util/concurrent/TimeUnit;)
Lcom/android/internal/inputmethod/CancellationGroup$Completable$Int;->getValue()
Lcom/android/internal/inputmethod/CancellationGroup$Completable$Int;->hasValue()
Lcom/android/internal/inputmethod/CancellationGroup$Completable$Int;->onComplete(I)
Lcom/android/internal/inputmethod/CancellationGroup$Completable$ValueBase;-><init>(Lcom/android/internal/inputmethod/CancellationGroup;)
Lcom/android/internal/inputmethod/CancellationGroup$Completable$ValueBase;->await(ILjava/util/concurrent/TimeUnit;)
Lcom/android/internal/inputmethod/CancellationGroup$Completable$ValueBase;->hasValue()
Lcom/android/internal/inputmethod/CancellationGroup$Completable$ValueBase;->onComplete()
Lcom/android/internal/inputmethod/CancellationGroup$Completable$Values;-><init>(Lcom/android/internal/inputmethod/CancellationGroup;)
Lcom/android/internal/inputmethod/CancellationGroup$Completable$Values;->await(ILjava/util/concurrent/TimeUnit;)
Lcom/android/internal/inputmethod/CancellationGroup$Completable$Values;->getValue()
Lcom/android/internal/inputmethod/CancellationGroup$Completable$Values;->hasValue()
Lcom/android/internal/inputmethod/CancellationGroup$Completable$Values;->onComplete(Ljava/lang/Object;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;->applyImeVisibility(Landroid/os/IBinder;Z)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;->createInputContentUriToken(Landroid/net/Uri;Ljava/lang/String;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;->hideMySoftInput(I)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;->notifyUserAction()
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;->reportFullscreenMode(Z)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;->reportPreRendered(Landroid/view/inputmethod/EditorInfo;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;->reportStartInput(Landroid/os/IBinder;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;->setImeWindowStatus(II)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;->setInputMethod(Ljava/lang/String;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;->setInputMethodAndSubtype(Ljava/lang/String;Landroid/view/inputmethod/InputMethodSubtype;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;->shouldOfferSwitchingToNextInputMethod()
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;->showMySoftInput(I)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;->switchToNextInputMethod(Z)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;->switchToPreviousInputMethod()
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;->updateStatusIcon(Ljava/lang/String;I)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Default;->applyImeVisibility(Landroid/os/IBinder;Z)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Default;->createInputContentUriToken(Landroid/net/Uri;Ljava/lang/String;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Default;->hideMySoftInput(I)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Default;->notifyUserAction()
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Default;->reportFullscreenMode(Z)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Default;->reportPreRendered(Landroid/view/inputmethod/EditorInfo;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Default;->reportStartInput(Landroid/os/IBinder;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Default;->setImeWindowStatus(II)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Default;->setInputMethod(Ljava/lang/String;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Default;->setInputMethodAndSubtype(Ljava/lang/String;Landroid/view/inputmethod/InputMethodSubtype;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Default;->shouldOfferSwitchingToNextInputMethod()
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Default;->showMySoftInput(I)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Default;->switchToNextInputMethod(Z)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Default;->switchToPreviousInputMethod()
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Default;->updateStatusIcon(Ljava/lang/String;I)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub$Proxy;->applyImeVisibility(Landroid/os/IBinder;Z)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub$Proxy;->createInputContentUriToken(Landroid/net/Uri;Ljava/lang/String;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub$Proxy;->hideMySoftInput(I)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub$Proxy;->notifyUserAction()
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub$Proxy;->reportFullscreenMode(Z)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub$Proxy;->reportPreRendered(Landroid/view/inputmethod/EditorInfo;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub$Proxy;->reportStartInput(Landroid/os/IBinder;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub$Proxy;->setImeWindowStatus(II)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub$Proxy;->setInputMethod(Ljava/lang/String;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub$Proxy;->setInputMethodAndSubtype(Ljava/lang/String;Landroid/view/inputmethod/InputMethodSubtype;)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub$Proxy;->shouldOfferSwitchingToNextInputMethod()
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub$Proxy;->showMySoftInput(I)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub$Proxy;->switchToNextInputMethod(Z)
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub$Proxy;->switchToPreviousInputMethod()
Lcom/android/internal/inputmethod/IInputMethodPrivilegedOperations$Stub$Proxy;->updateStatusIcon(Ljava/lang/String;I)
Lcom/android/internal/inputmethod/InputMethodPrivilegedOperations;->applyImeVisibility(Landroid/os/IBinder;Z)
Lcom/android/internal/inputmethod/InputMethodPrivilegedOperations;->notifyUserAction()
Lcom/android/internal/inputmethod/InputMethodPrivilegedOperations;->reportFullscreenMode(Z)
Lcom/android/internal/inputmethod/InputMethodPrivilegedOperations;->reportPreRendered(Landroid/view/inputmethod/EditorInfo;)
Lcom/android/internal/inputmethod/InputMethodPrivilegedOperations;->reportStartInput(Landroid/os/IBinder;)
Lcom/android/internal/inputmethod/InputMethodPrivilegedOperations;->setImeWindowStatus(II)
Lcom/android/internal/inputmethod/InputMethodPrivilegedOperations;->updateStatusIcon(Ljava/lang/String;I)
Lcom/android/internal/inputmethod/ResultCallbacks;->of(Lcom/android/internal/inputmethod/CancellationGroup$Completable$CharSequence;)
Lcom/android/internal/inputmethod/ResultCallbacks;->of(Lcom/android/internal/inputmethod/CancellationGroup$Completable$ExtractedText;)
Lcom/android/internal/inputmethod/ResultCallbacks;->of(Lcom/android/internal/inputmethod/CancellationGroup$Completable$Int;)
Lcom/android/internal/location/ILocationProvider;->sendExtraCommand(Ljava/lang/String;Landroid/os/Bundle;)
Lcom/android/internal/location/ILocationProvider;->setLocationProviderManager(Lcom/android/internal/location/ILocationProviderManager;)
Lcom/android/internal/location/ILocationProvider;->setRequest(Lcom/android/internal/location/ProviderRequest;Landroid/os/WorkSource;)
Lcom/android/internal/location/ILocationProvider$Default;-><init>()
Lcom/android/internal/location/ILocationProvider$Default;->asBinder()
Lcom/android/internal/location/ILocationProvider$Default;->sendExtraCommand(Ljava/lang/String;Landroid/os/Bundle;)
Lcom/android/internal/location/ILocationProvider$Default;->setLocationProviderManager(Lcom/android/internal/location/ILocationProviderManager;)
Lcom/android/internal/location/ILocationProvider$Default;->setRequest(Lcom/android/internal/location/ProviderRequest;Landroid/os/WorkSource;)
Lcom/android/internal/location/ILocationProvider$Stub;-><init>()
Lcom/android/internal/location/ILocationProvider$Stub;->asBinder()
Lcom/android/internal/location/ILocationProvider$Stub;->asInterface(Landroid/os/IBinder;)
Lcom/android/internal/location/ILocationProvider$Stub;->getDefaultImpl()
Lcom/android/internal/location/ILocationProvider$Stub;->getDefaultTransactionName(I)
Lcom/android/internal/location/ILocationProvider$Stub;->getTransactionName(I)
Lcom/android/internal/location/ILocationProvider$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Lcom/android/internal/location/ILocationProvider$Stub;->setDefaultImpl(Lcom/android/internal/location/ILocationProvider;)
Lcom/android/internal/location/ILocationProvider$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Lcom/android/internal/location/ILocationProvider$Stub$Proxy;->asBinder()
Lcom/android/internal/location/ILocationProvider$Stub$Proxy;->getInterfaceDescriptor()
Lcom/android/internal/location/ILocationProvider$Stub$Proxy;->sendExtraCommand(Ljava/lang/String;Landroid/os/Bundle;)
Lcom/android/internal/location/ILocationProvider$Stub$Proxy;->setLocationProviderManager(Lcom/android/internal/location/ILocationProviderManager;)
Lcom/android/internal/location/ILocationProvider$Stub$Proxy;->setRequest(Lcom/android/internal/location/ProviderRequest;Landroid/os/WorkSource;)
Lcom/android/internal/location/ILocationProviderManager;->onReportLocation(Landroid/location/Location;)
Lcom/android/internal/location/ILocationProviderManager;->onSetAdditionalProviderPackages(Ljava/util/List;)
Lcom/android/internal/location/ILocationProviderManager;->onSetAllowed(Z)
Lcom/android/internal/location/ILocationProviderManager;->onSetProperties(Lcom/android/internal/location/ProviderProperties;)
Lcom/android/internal/location/ILocationProviderManager$Default;-><init>()
Lcom/android/internal/location/ILocationProviderManager$Default;->asBinder()
Lcom/android/internal/location/ILocationProviderManager$Default;->onReportLocation(Landroid/location/Location;)
Lcom/android/internal/location/ILocationProviderManager$Default;->onSetAdditionalProviderPackages(Ljava/util/List;)
Lcom/android/internal/location/ILocationProviderManager$Default;->onSetAllowed(Z)
Lcom/android/internal/location/ILocationProviderManager$Default;->onSetProperties(Lcom/android/internal/location/ProviderProperties;)
Lcom/android/internal/location/ILocationProviderManager$Stub;-><init>()
Lcom/android/internal/location/ILocationProviderManager$Stub;->asBinder()
Lcom/android/internal/location/ILocationProviderManager$Stub;->asInterface(Landroid/os/IBinder;)
Lcom/android/internal/location/ILocationProviderManager$Stub;->getDefaultImpl()
Lcom/android/internal/location/ILocationProviderManager$Stub;->getDefaultTransactionName(I)
Lcom/android/internal/location/ILocationProviderManager$Stub;->getTransactionName(I)
Lcom/android/internal/location/ILocationProviderManager$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)
Lcom/android/internal/location/ILocationProviderManager$Stub;->setDefaultImpl(Lcom/android/internal/location/ILocationProviderManager;)
Lcom/android/internal/location/ILocationProviderManager$Stub$Proxy;-><init>(Landroid/os/IBinder;)
Lcom/android/internal/location/ILocationProviderManager$Stub$Proxy;->asBinder()
Lcom/android/internal/location/ILocationProviderManager$Stub$Proxy;->getInterfaceDescriptor()
Lcom/android/internal/location/ILocationProviderManager$Stub$Proxy;->onReportLocation(Landroid/location/Location;)
Lcom/android/internal/location/ILocationProviderManager$Stub$Proxy;->onSetAdditionalProviderPackages(Ljava/util/List;)
Lcom/android/internal/location/ILocationProviderManager$Stub$Proxy;->onSetAllowed(Z)
Lcom/android/internal/location/ILocationProviderManager$Stub$Proxy;->onSetProperties(Lcom/android/internal/location/ProviderProperties;)
Lcom/android/internal/location/ProviderProperties;-><init>(ZZZZZZZII)
Lcom/android/internal/location/ProviderProperties;->accuracyToString(I)
Lcom/android/internal/location/ProviderProperties;->describeContents()
Lcom/android/internal/location/ProviderProperties;->powerToString(I)
Lcom/android/internal/location/ProviderProperties;->toString()
Lcom/android/internal/location/ProviderProperties;->writeToParcel(Landroid/os/Parcel;I)
Lcom/android/internal/location/ProviderRequest;-><init>(ZJZZLjava/util/List;Landroid/os/WorkSource;)
Lcom/android/internal/location/ProviderRequest;-><init>(ZJZZLjava/util/List;Landroid/os/WorkSource;Lcom/android/internal/location/ProviderRequest$1;)
Lcom/android/internal/location/ProviderRequest;->describeContents()
Lcom/android/internal/location/ProviderRequest;->toString()
Lcom/android/internal/location/ProviderRequest;->writeToParcel(Landroid/os/Parcel;I)
Lcom/android/internal/location/ProviderRequest$Builder;-><init>()
Lcom/android/internal/location/ProviderRequest$Builder;->build()
Lcom/android/internal/location/ProviderRequest$Builder;->getInterval()
Lcom/android/internal/location/ProviderRequest$Builder;->getLocationRequests()
Lcom/android/internal/location/ProviderRequest$Builder;->getWorkSource()
Lcom/android/internal/location/ProviderRequest$Builder;->isLocationSettingsIgnored()
Lcom/android/internal/location/ProviderRequest$Builder;->isLowPowerMode()
Lcom/android/internal/location/ProviderRequest$Builder;->setInterval(J)
Lcom/android/internal/location/ProviderRequest$Builder;->setLocationRequests(Ljava/util/List;)
Lcom/android/internal/location/ProviderRequest$Builder;->setLocationSettingsIgnored(Z)
Lcom/android/internal/location/ProviderRequest$Builder;->setLowPowerMode(Z)
Lcom/android/internal/location/ProviderRequest$Builder;->setWorkSource(Landroid/os/WorkSource;)
Lcom/android/internal/location/gnssmetrics/GnssMetrics;-><init>(Landroid/content/Context;Lcom/android/internal/app/IBatteryStats;)
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->dumpGnssMetricsAsProtoString()
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->dumpGnssMetricsAsText()
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->isL5Sv(F)
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->logCn0([FI[F)
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->logCn0L5(I[F[F)
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->logConstellationType(I)
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->logMissedReports(II)
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->logPositionAccuracyMeters(F)
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->logReceivedLocationStatus(Z)
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->logSvStatus(Landroid/location/GnssStatus;)
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->logTimeToFirstFixMilliSecs(I)
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->registerGnssStats()
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->reset()
Lcom/android/internal/location/gnssmetrics/GnssMetrics;->resetConstellationTypes()
Lcom/android/internal/location/gnssmetrics/GnssMetrics$GnssPowerMetrics;-><init>(Lcom/android/internal/location/gnssmetrics/GnssMetrics;Lcom/android/internal/app/IBatteryStats;)
Lcom/android/internal/location/gnssmetrics/GnssMetrics$GnssPowerMetrics;-><init>(Lcom/android/internal/location/gnssmetrics/GnssMetrics;Lcom/android/internal/app/IBatteryStats;Lcom/android/internal/location/gnssmetrics/GnssMetrics$1;)
Lcom/android/internal/location/gnssmetrics/GnssMetrics$GnssPowerMetrics;->buildProto()
Lcom/android/internal/location/gnssmetrics/GnssMetrics$GnssPowerMetrics;->getGpsBatteryStats()
Lcom/android/internal/location/gnssmetrics/GnssMetrics$GnssPowerMetrics;->getSignalLevel(D)
Lcom/android/internal/location/gnssmetrics/GnssMetrics$GnssPowerMetrics;->reportSignalQuality([FI)
Lcom/android/internal/location/gnssmetrics/GnssMetrics$Statistics;-><init>()
Lcom/android/internal/location/gnssmetrics/GnssMetrics$Statistics;-><init>(Lcom/android/internal/location/gnssmetrics/GnssMetrics$1;)
Lcom/android/internal/location/gnssmetrics/GnssMetrics$Statistics;->addItem(D)
Lcom/android/internal/location/gnssmetrics/GnssMetrics$Statistics;->getCount()
Lcom/android/internal/location/gnssmetrics/GnssMetrics$Statistics;->getLongSum()
Lcom/android/internal/location/gnssmetrics/GnssMetrics$Statistics;->getMean()
Lcom/android/internal/location/gnssmetrics/GnssMetrics$Statistics;->getStandardDeviation()
Lcom/android/internal/location/gnssmetrics/GnssMetrics$Statistics;->reset()
Lcom/android/internal/location/gnssmetrics/GnssMetrics$StatsPullAtomCallbackImpl;-><init>(Lcom/android/internal/location/gnssmetrics/GnssMetrics;)
Lcom/android/internal/location/gnssmetrics/GnssMetrics$StatsPullAtomCallbackImpl;-><init>(Lcom/android/internal/location/gnssmetrics/GnssMetrics;Lcom/android/internal/location/gnssmetrics/GnssMetrics$1;)
Lcom/android/internal/location/gnssmetrics/GnssMetrics$StatsPullAtomCallbackImpl;->onPullAtom(ILjava/util/List;)
Lcom/android/internal/net/LegacyVpnInfo;->stateFromNetworkInfo(Landroid/net/NetworkInfo;)
Lcom/android/internal/net/VpnInfo;-><init>()
Lcom/android/internal/net/VpnInfo;->describeContents()
Lcom/android/internal/net/VpnInfo;->toString()
Lcom/android/internal/net/VpnInfo;->writeToParcel(Landroid/os/Parcel;I)
Lcom/android/internal/net/VpnProfile;->validateAllowedAlgorithms(Ljava/util/List;)
Lcom/android/internal/os/AppIdToPackageMap;-><init>(Ljava/util/Map;)
Lcom/android/internal/os/BatteryStatsHelper;->addAmbientDisplayUsage()
Lcom/android/internal/os/BatteryStatsHelper;->addBluetoothUsage()
Lcom/android/internal/os/BatteryStatsHelper;->addEntry(Lcom/android/internal/os/BatterySipper$DrainType;JD)
Lcom/android/internal/os/BatteryStatsHelper;->addIdleUsage()
Lcom/android/internal/os/BatteryStatsHelper;->addMemoryUsage()
Lcom/android/internal/os/BatteryStatsHelper;->addPhoneUsage()
Lcom/android/internal/os/BatteryStatsHelper;->addRadioUsage()
Lcom/android/internal/os/BatteryStatsHelper;->addScreenUsage()
Lcom/android/internal/os/BatteryStatsHelper;->addUserUsage()
Lcom/android/internal/os/BatteryStatsHelper;->addWiFiUsage()
Lcom/android/internal/os/BatteryStatsHelper;->aggregateSippers(Lcom/android/internal/os/BatterySipper;Ljava/util/List;Ljava/lang/String;)
Lcom/android/internal/os/BatteryStatsHelper;->checkHasBluetoothPowerReporting(Landroid/os/BatteryStats;Lcom/android/internal/os/PowerProfile;)
Lcom/android/internal/os/BatteryStatsHelper;->checkHasWifiPowerReporting(Landroid/os/BatteryStats;Lcom/android/internal/os/PowerProfile;)
Lcom/android/internal/os/BatteryStatsHelper;->getForegroundActivityTotalTimeUs(Landroid/os/BatteryStats$Uid;J)
Lcom/android/internal/os/BatteryStatsHelper;->getProcessForegroundTimeMs(Landroid/os/BatteryStats$Uid;I)
Lcom/android/internal/os/BatteryStatsHelper;->getStats(Lcom/android/internal/app/IBatteryStats;)
Lcom/android/internal/os/BatteryStatsHelper;->processMiscUsage()
Lcom/android/internal/os/BatteryStatsHelper;->smearScreenBatterySipper(Ljava/util/List;Lcom/android/internal/os/BatterySipper;)
Lcom/android/internal/os/BatteryStatsHistory;-><init>(Lcom/android/internal/os/BatteryStatsImpl;Landroid/os/Parcel;)
Lcom/android/internal/os/BatteryStatsImpl;-><init>(Lcom/android/internal/os/BatteryStatsImpl$Clocks;Ljava/io/File;Landroid/os/Handler;Lcom/android/internal/os/BatteryStatsImpl$PlatformIdleStateCallback;Lcom/android/internal/os/BatteryStatsImpl$RailEnergyDataCallback;Lcom/android/internal/os/BatteryStatsImpl$UserInfoProvider;)
Lcom/android/internal/os/BatteryStatsImpl;-><init>(Ljava/io/File;Landroid/os/Handler;Lcom/android/internal/os/BatteryStatsImpl$PlatformIdleStateCallback;Lcom/android/internal/os/BatteryStatsImpl$RailEnergyDataCallback;Lcom/android/internal/os/BatteryStatsImpl$UserInfoProvider;)
Lcom/android/internal/os/BatteryStatsImpl;->addHistoryBufferLocked(JLandroid/os/BatteryStats$HistoryItem;)
Lcom/android/internal/os/BatteryStatsImpl;->addHistoryRecordInnerLocked(JLandroid/os/BatteryStats$HistoryItem;)
Lcom/android/internal/os/BatteryStatsImpl;->addModemTxPowerToHistory(Landroid/telephony/ModemActivityInfo;)
Lcom/android/internal/os/BatteryStatsImpl;->aggregateLastWakeupUptimeLocked(J)
Lcom/android/internal/os/BatteryStatsImpl;->finishIteratingOldHistoryLocked()
Lcom/android/internal/os/BatteryStatsImpl;->getDeltaModemActivityInfo(Landroid/telephony/ModemActivityInfo;)
Lcom/android/internal/os/BatteryStatsImpl;->getNextOldHistoryLocked(Landroid/os/BatteryStats$HistoryItem;)
Lcom/android/internal/os/BatteryStatsImpl;->initDischarge()
Lcom/android/internal/os/BatteryStatsImpl;->isScreenDoze(I)
Lcom/android/internal/os/BatteryStatsImpl;->isScreenOff(I)
Lcom/android/internal/os/BatteryStatsImpl;->isScreenOn(I)
Lcom/android/internal/os/BatteryStatsImpl;->noteBluetoothScanStartedLocked(Landroid/os/WorkSource$WorkChain;IZ)
Lcom/android/internal/os/BatteryStatsImpl;->noteBluetoothScanStoppedLocked(Landroid/os/WorkSource$WorkChain;IZ)
Lcom/android/internal/os/BatteryStatsImpl;->noteLongPartialWakeLockFinishInternal(Ljava/lang/String;Ljava/lang/String;I)
Lcom/android/internal/os/BatteryStatsImpl;->noteLongPartialWakeLockStartInternal(Ljava/lang/String;Ljava/lang/String;I)
Lcom/android/internal/os/BatteryStatsImpl;->noteNetworkInterfaceType(Ljava/lang/String;I)
Lcom/android/internal/os/BatteryStatsImpl;->noteStartGpsLocked(ILandroid/os/WorkSource$WorkChain;)
Lcom/android/internal/os/BatteryStatsImpl;->noteStopGpsLocked(ILandroid/os/WorkSource$WorkChain;)
Lcom/android/internal/os/BatteryStatsImpl;->noteUsbConnectionStateLocked(Z)
Lcom/android/internal/os/BatteryStatsImpl;->onCleanupUserLocked(I)
Lcom/android/internal/os/BatteryStatsImpl;->readDailyItemTagDetailsLocked(Lorg/xmlpull/v1/XmlPullParser;Landroid/os/BatteryStats$DailyItem;ZLjava/lang/String;)
Lcom/android/internal/os/BatteryStatsImpl;->readDailyItemTagLocked(Lorg/xmlpull/v1/XmlPullParser;)
Lcom/android/internal/os/BatteryStatsImpl;->readDailyItemsLocked(Lorg/xmlpull/v1/XmlPullParser;)
Lcom/android/internal/os/BatteryStatsImpl;->readHistoryBuffer(Landroid/os/Parcel;Z)
Lcom/android/internal/os/BatteryStatsImpl;->readHistoryDelta(Landroid/os/Parcel;Landroid/os/BatteryStats$HistoryItem;)
Lcom/android/internal/os/BatteryStatsImpl;->readHistoryTag(ILandroid/os/BatteryStats$HistoryTag;)
Lcom/android/internal/os/BatteryStatsImpl;->readKernelUidCpuClusterTimesLocked(Z)
Lcom/android/internal/os/BatteryStatsImpl;->readKernelUidCpuFreqTimesLocked(Ljava/util/ArrayList;ZZ)
Lcom/android/internal/os/BatteryStatsImpl;->readOldHistory(Landroid/os/Parcel;)
Lcom/android/internal/os/BatteryStatsImpl;->recordDailyStatsIfNeededLocked(Z)
Lcom/android/internal/os/BatteryStatsImpl;->removeIsolatedUidLocked(I)
Lcom/android/internal/os/BatteryStatsImpl;->resetAllStatsLocked()
Lcom/android/internal/os/BatteryStatsImpl;->resetIfNotNull(Lcom/android/internal/os/BatteryStatsImpl$ControllerActivityCounterImpl;Z)
Lcom/android/internal/os/BatteryStatsImpl;->resetIfNotNull(Lcom/android/internal/os/BatteryStatsImpl$TimeBaseObs;Z)
Lcom/android/internal/os/BatteryStatsImpl;->resetIfNotNull([Lcom/android/internal/os/BatteryStatsImpl$TimeBaseObs;Z)
Lcom/android/internal/os/BatteryStatsImpl;->resetIfNotNull([[Lcom/android/internal/os/BatteryStatsImpl$TimeBaseObs;Z)
Lcom/android/internal/os/BatteryStatsImpl;->startIteratingOldHistoryLocked()
Lcom/android/internal/os/BatteryStatsImpl;->stopAllPhoneSignalStrengthTimersLocked(I)
Lcom/android/internal/os/BatteryStatsImpl;->stopAllWifiSignalStrengthTimersLocked(I)
Lcom/android/internal/os/BatteryStatsImpl;->updateAllPhoneStateLocked(III)
Lcom/android/internal/os/BatteryStatsImpl;->updateBluetoothStateLocked(Landroid/bluetooth/BluetoothActivityEnergyInfo;)
Lcom/android/internal/os/BatteryStatsImpl;->updateClusterSpeedTimes(Landroid/util/SparseLongArray;Z)
Lcom/android/internal/os/BatteryStatsImpl;->updateCpuTimeLocked(ZZ)
Lcom/android/internal/os/BatteryStatsImpl;->updateMobileRadioState(Landroid/telephony/ModemActivityInfo;)
Lcom/android/internal/os/BatteryStatsImpl;->updateRpmStatsLocked()
Lcom/android/internal/os/BatteryStatsImpl;->updateWifiState(Landroid/os/connectivity/WifiActivityEnergyInfo;)
Lcom/android/internal/os/BatteryStatsImpl;->writeDailyItemsLocked(Lorg/xmlpull/v1/XmlSerializer;)
Lcom/android/internal/os/BatteryStatsImpl;->writeDailyLevelSteps(Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Landroid/os/BatteryStats$LevelStepTracker;Ljava/lang/StringBuilder;)
Lcom/android/internal/os/BatteryStatsImpl;->writeHistoryBuffer(Landroid/os/Parcel;ZZ)
Lcom/android/internal/os/BatteryStatsImpl;->writeOldHistory(Landroid/os/Parcel;)
Lcom/android/internal/os/BatteryStatsImpl$BatchTimer;->computeRunTimeLocked(J)
Lcom/android/internal/os/BatteryStatsImpl$BatchTimer;->reset(Z)
Lcom/android/internal/os/BatteryStatsImpl$ControllerActivityCounterImpl;->reset(Z)
Lcom/android/internal/os/BatteryStatsImpl$Counter;->reset(Z)
Lcom/android/internal/os/BatteryStatsImpl$DualTimer;->reset(Z)
Lcom/android/internal/os/BatteryStatsImpl$DurationTimer;->reset(Z)
Lcom/android/internal/os/BatteryStatsImpl$ExternalStatsSync;->scheduleCpuSyncDueToScreenStateChange(ZZ)
Lcom/android/internal/os/BatteryStatsImpl$LongSamplingCounter;->reset(Z)
Lcom/android/internal/os/BatteryStatsImpl$LongSamplingCounterArray;->reset(Z)
Lcom/android/internal/os/BatteryStatsImpl$OverflowArrayMap;->cleanup()
Lcom/android/internal/os/BatteryStatsImpl$OverflowArrayMap;->startObject(Ljava/lang/String;)
Lcom/android/internal/os/BatteryStatsImpl$OverflowArrayMap;->stopObject(Ljava/lang/String;)
Lcom/android/internal/os/BatteryStatsImpl$PlatformIdleStateCallback;->getPlatformLowPowerStats()
Lcom/android/internal/os/BatteryStatsImpl$RailEnergyDataCallback;->fillRailDataStats(Lcom/android/internal/os/RailStats;)
Lcom/android/internal/os/BatteryStatsImpl$SamplingTimer;->computeRunTimeLocked(J)
Lcom/android/internal/os/BatteryStatsImpl$SamplingTimer;->reset(Z)
Lcom/android/internal/os/BatteryStatsImpl$SamplingTimer;->update(JI)
Lcom/android/internal/os/BatteryStatsImpl$StopwatchTimer;->computeRunTimeLocked(J)
Lcom/android/internal/os/BatteryStatsImpl$StopwatchTimer;->reset(Z)
Lcom/android/internal/os/BatteryStatsImpl$Timer;->computeRunTimeLocked(J)
Lcom/android/internal/os/BatteryStatsImpl$Uid;->noteVibratorOffLocked()
Lcom/android/internal/os/BatteryStatsImpl$Uid;->noteVibratorOnLocked(J)
Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg;->reset(Z)
Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv;->reset(Z)
Lcom/android/internal/os/BatteryStatsImpl$Uid$Proc;->reset(Z)
Lcom/android/internal/os/BatteryStatsImpl$Uid$Sensor;->reset()
Lcom/android/internal/os/BatteryStatsImpl$Uid$Wakelock;->reset()
Lcom/android/internal/os/BinderCallsStats;->dump(Ljava/io/PrintWriter;Lcom/android/internal/os/AppIdToPackageMap;Z)
Lcom/android/internal/os/BinderCallsStats;->dumpLocked(Ljava/io/PrintWriter;Lcom/android/internal/os/AppIdToPackageMap;Z)
Lcom/android/internal/os/BinderCallsStats;->getDefaultTransactionNameMethod(Ljava/lang/Class;)
Lcom/android/internal/os/BinderCallsStats;->resolveTransactionCode(Ljava/lang/reflect/Method;I)
Lcom/android/internal/os/BinderDeathDispatcher;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)
Lcom/android/internal/os/BluetoothPowerCalculator;->calculateApp(Lcom/android/internal/os/BatterySipper;Landroid/os/BatteryStats$Uid;JJI)
Lcom/android/internal/os/BluetoothPowerCalculator;->calculateRemaining(Lcom/android/internal/os/BatterySipper;Landroid/os/BatteryStats;JJI)
Lcom/android/internal/os/BluetoothPowerCalculator;->reset()
Lcom/android/internal/os/ClassLoaderFactory;->createClassLoader(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;IZLjava/lang/String;Ljava/util/List;)
Lcom/android/internal/os/ClassLoaderFactory;->createClassloaderNamespace(Ljava/lang/ClassLoader;ILjava/lang/String;Ljava/lang/String;ZLjava/lang/String;)
Lcom/android/internal/os/CpuPowerCalculator;->calculateApp(Lcom/android/internal/os/BatterySipper;Landroid/os/BatteryStats$Uid;JJI)
Lcom/android/internal/os/IDropBoxManagerService;->add(Landroid/os/DropBoxManager$Entry;)
Lcom/android/internal/os/IDropBoxManagerService$Default;->add(Landroid/os/DropBoxManager$Entry;)
Lcom/android/internal/os/IDropBoxManagerService$Stub$Proxy;->add(Landroid/os/DropBoxManager$Entry;)
Lcom/android/internal/os/KernelWakelockReader;->updateWakelockStats([Landroid/system/suspend/WakeLockInfo;Lcom/android/internal/os/KernelWakelockStats;)
Lcom/android/internal/os/MemoryPowerCalculator;->calculateApp(Lcom/android/internal/os/BatterySipper;Landroid/os/BatteryStats$Uid;JJI)
Lcom/android/internal/os/MemoryPowerCalculator;->calculateRemaining(Lcom/android/internal/os/BatterySipper;Landroid/os/BatteryStats;JJI)
Lcom/android/internal/os/MobileRadioPowerCalculator;-><init>(Lcom/android/internal/os/PowerProfile;Landroid/os/BatteryStats;)
Lcom/android/internal/os/MobileRadioPowerCalculator;->calculateApp(Lcom/android/internal/os/BatterySipper;Landroid/os/BatteryStats$Uid;JJI)
Lcom/android/internal/os/MobileRadioPowerCalculator;->calculateRemaining(Lcom/android/internal/os/BatterySipper;Landroid/os/BatteryStats;JJI)
Lcom/android/internal/os/MobileRadioPowerCalculator;->getMobilePowerPerPacket(JI)
Lcom/android/internal/os/MobileRadioPowerCalculator;->reset()
Lcom/android/internal/os/MobileRadioPowerCalculator;->reset(Landroid/os/BatteryStats;)
Lcom/android/internal/os/PowerCalculator;->calculateRemaining(Lcom/android/internal/os/BatterySipper;Landroid/os/BatteryStats;JJI)
Lcom/android/internal/os/RuntimeInit$RuntimeThreadPrioritySetter;-><init>()
Lcom/android/internal/os/RuntimeInit$RuntimeThreadPrioritySetter;-><init>(Lcom/android/internal/os/RuntimeInit$1;)
Lcom/android/internal/os/RuntimeInit$RuntimeThreadPrioritySetter;->setPriority(II)
Lcom/android/internal/os/SensorPowerCalculator;-><init>(Lcom/android/internal/os/PowerProfile;Landroid/hardware/SensorManager;Landroid/os/BatteryStats;JI)
Lcom/android/internal/os/SensorPowerCalculator;->getAverageGpsPower(Lcom/android/internal/os/PowerProfile;Landroid/os/BatteryStats;JI)
Lcom/android/internal/os/WakelockPowerCalculator;->calculateApp(Lcom/android/internal/os/BatterySipper;Landroid/os/BatteryStats$Uid;JJI)
Lcom/android/internal/os/WakelockPowerCalculator;->calculateRemaining(Lcom/android/internal/os/BatterySipper;Landroid/os/BatteryStats;JJI)
Lcom/android/internal/os/WakelockPowerCalculator;->reset()
Lcom/android/internal/os/WifiPowerCalculator;->calculateApp(Lcom/android/internal/os/BatterySipper;Landroid/os/BatteryStats$Uid;JJI)
Lcom/android/internal/os/WifiPowerCalculator;->calculateRemaining(Lcom/android/internal/os/BatterySipper;Landroid/os/BatteryStats;JJI)
Lcom/android/internal/os/WifiPowerCalculator;->reset()
Lcom/android/internal/os/WifiPowerEstimator;-><init>(Lcom/android/internal/os/PowerProfile;)
Lcom/android/internal/os/WifiPowerEstimator;->calculateApp(Lcom/android/internal/os/BatterySipper;Landroid/os/BatteryStats$Uid;JJI)
Lcom/android/internal/os/WifiPowerEstimator;->calculateRemaining(Lcom/android/internal/os/BatterySipper;Landroid/os/BatteryStats;JJI)
Lcom/android/internal/os/WifiPowerEstimator;->getWifiPowerPerPacket(Lcom/android/internal/os/PowerProfile;)
Lcom/android/internal/os/WifiPowerEstimator;->reset()
Lcom/android/internal/os/Zygote;->nativeForkUsap(II[IZ)
Lcom/android/internal/os/Zygote;->readArgumentList(Ljava/io/BufferedReader;)
Lcom/android/internal/os/Zygote;->usapMain(Landroid/net/LocalServerSocket;Ljava/io/FileDescriptor;)
Lcom/android/internal/os/ZygoteArguments;-><init>([Ljava/lang/String;)
Lcom/android/internal/os/ZygoteArguments;->parseArgs([Ljava/lang/String;)
Lcom/android/internal/os/ZygoteConnection;->handleApiBlacklistExemptions(Lcom/android/internal/os/ZygoteServer;[Ljava/lang/String;)
Lcom/android/internal/os/ZygoteConnection;->processOneCommand(Lcom/android/internal/os/ZygoteServer;)
Lcom/android/internal/os/ZygoteInit;->childZygoteInit(I[Ljava/lang/String;Ljava/lang/ClassLoader;)
Lcom/android/internal/os/ZygoteInit;->setApiBlacklistExemptions([Ljava/lang/String;)
Lcom/android/internal/os/logging/MetricsLoggerWrapper;->getUid(Landroid/content/Context;Landroid/content/ComponentName;I)
Lcom/android/internal/os/logging/MetricsLoggerWrapper;->logPictureInPictureDismissByDrag(Landroid/content/Context;Landroid/util/Pair;)
Lcom/android/internal/os/logging/MetricsLoggerWrapper;->logPictureInPictureDismissByTap(Landroid/content/Context;Landroid/util/Pair;)
Lcom/android/internal/os/logging/MetricsLoggerWrapper;->logPictureInPictureEnter(Landroid/content/Context;ILjava/lang/String;Z)
Lcom/android/internal/os/logging/MetricsLoggerWrapper;->logPictureInPictureFullScreen(Landroid/content/Context;ILjava/lang/String;)
Lcom/android/internal/os/logging/MetricsLoggerWrapper;->logPictureInPictureMenuVisible(Landroid/content/Context;Z)
Lcom/android/internal/os/logging/MetricsLoggerWrapper;->logPictureInPictureMinimize(Landroid/content/Context;ZLandroid/util/Pair;)
Lcom/android/internal/policy/BackdropFrameRenderer;-><init>(Lcom/android/internal/policy/DecorView;Landroid/view/ThreadedRenderer;Landroid/graphics/Rect;Landroid/graphics/drawable/Drawable;Landroid/graphics/drawable/Drawable;Landroid/graphics/drawable/Drawable;IIZLandroid/graphics/Rect;Landroid/graphics/Rect;)
Lcom/android/internal/policy/BackdropFrameRenderer;->drawColorViews(IIIIZLandroid/graphics/Rect;Landroid/graphics/Rect;)
Lcom/android/internal/policy/BackdropFrameRenderer;->redrawLocked(Landroid/graphics/Rect;ZLandroid/graphics/Rect;Landroid/graphics/Rect;)
Lcom/android/internal/policy/BackdropFrameRenderer;->setTargetRect(Landroid/graphics/Rect;ZLandroid/graphics/Rect;Landroid/graphics/Rect;)
Lcom/android/internal/policy/DecorView;->calculateNavigationBarColor()
Lcom/android/internal/policy/DecorView;->calculateStatusBarColor()
Lcom/android/internal/policy/DecorView;->getColorViewBottomInset(II)
Lcom/android/internal/policy/DecorView;->getColorViewLeftInset(II)
Lcom/android/internal/policy/DecorView;->getColorViewRightInset(II)
Lcom/android/internal/policy/DecorView;->getColorViewTopInset(II)
Lcom/android/internal/policy/DecorView;->getNavigationBarRect(IILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;F)
Lcom/android/internal/policy/DecorView;->updateColorViewInt(Lcom/android/internal/policy/DecorView$ColorViewState;IIIIZZIZZLandroid/view/WindowInsetsController;)
Lcom/android/internal/policy/DecorView$ColorViewAttributes;-><init>(IIIIILjava/lang/String;III)
Lcom/android/internal/policy/DecorView$ColorViewAttributes;-><init>(IIIIILjava/lang/String;IIILcom/android/internal/policy/DecorView$1;)
Lcom/android/internal/policy/DecorView$ColorViewAttributes;->isPresent(IIZ)
Lcom/android/internal/policy/DecorView$ColorViewAttributes;->isVisible(IIIZ)
Lcom/android/internal/policy/DividerSnapAlgorithm;-><init>(Landroid/content/res/Resources;IIIZLandroid/graphics/Rect;IZ)
Lcom/android/internal/policy/IKeyguardService;->onStartedWakingUp()
Lcom/android/internal/policy/IKeyguardService$Default;->onStartedWakingUp()
Lcom/android/internal/policy/IKeyguardService$Stub$Proxy;->onStartedWakingUp()
Lcom/android/internal/policy/PhoneWindow;->addScrollCaptureCallback(Landroid/view/ScrollCaptureCallback;)
Lcom/android/internal/policy/PhoneWindow;->removeScrollCaptureCallback(Landroid/view/ScrollCaptureCallback;)
Lcom/android/internal/policy/PhoneWindow;->requestScrollCapture(Landroid/view/IScrollCaptureController;)
Lcom/android/internal/statsd/StatsdStatsLog;->write(I)
Lcom/android/internal/statusbar/IStatusBar;->onBiometricHelp(Ljava/lang/String;)
Lcom/android/internal/statusbar/IStatusBar;->onSystemBarAppearanceChanged(II[Lcom/android/internal/view/AppearanceRegion;Z)
Lcom/android/internal/statusbar/IStatusBar;->showAuthenticationDialog(Landroid/os/Bundle;Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;IZILjava/lang/String;JI)
Lcom/android/internal/statusbar/IStatusBar;->topAppWindowChanged(IZZ)
Lcom/android/internal/statusbar/IStatusBar$Default;->onBiometricHelp(Ljava/lang/String;)
Lcom/android/internal/statusbar/IStatusBar$Default;->onSystemBarAppearanceChanged(II[Lcom/android/internal/view/AppearanceRegion;Z)
Lcom/android/internal/statusbar/IStatusBar$Default;->showAuthenticationDialog(Landroid/os/Bundle;Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;IZILjava/lang/String;JI)
Lcom/android/internal/statusbar/IStatusBar$Default;->topAppWindowChanged(IZZ)
Lcom/android/internal/statusbar/IStatusBar$Stub$Proxy;->onBiometricHelp(Ljava/lang/String;)
Lcom/android/internal/statusbar/IStatusBar$Stub$Proxy;->onSystemBarAppearanceChanged(II[Lcom/android/internal/view/AppearanceRegion;Z)
Lcom/android/internal/statusbar/IStatusBar$Stub$Proxy;->showAuthenticationDialog(Landroid/os/Bundle;Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;IZILjava/lang/String;JI)
Lcom/android/internal/statusbar/IStatusBar$Stub$Proxy;->topAppWindowChanged(IZZ)
Lcom/android/internal/statusbar/IStatusBarService;->onBiometricHelp(Ljava/lang/String;)
Lcom/android/internal/statusbar/IStatusBarService;->onBubbleNotificationSuppressionChanged(Ljava/lang/String;Z)
Lcom/android/internal/statusbar/IStatusBarService;->onNotificationClear(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;IILcom/android/internal/statusbar/NotificationVisibility;)
Lcom/android/internal/statusbar/IStatusBarService;->showAuthenticationDialog(Landroid/os/Bundle;Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;IZILjava/lang/String;JI)
Lcom/android/internal/statusbar/IStatusBarService$Default;->onBiometricHelp(Ljava/lang/String;)
Lcom/android/internal/statusbar/IStatusBarService$Default;->onBubbleNotificationSuppressionChanged(Ljava/lang/String;Z)
Lcom/android/internal/statusbar/IStatusBarService$Default;->onNotificationClear(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;IILcom/android/internal/statusbar/NotificationVisibility;)
Lcom/android/internal/statusbar/IStatusBarService$Default;->showAuthenticationDialog(Landroid/os/Bundle;Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;IZILjava/lang/String;JI)
Lcom/android/internal/statusbar/IStatusBarService$Stub$Proxy;->onBiometricHelp(Ljava/lang/String;)
Lcom/android/internal/statusbar/IStatusBarService$Stub$Proxy;->onBubbleNotificationSuppressionChanged(Ljava/lang/String;Z)
Lcom/android/internal/statusbar/IStatusBarService$Stub$Proxy;->onNotificationClear(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;IILcom/android/internal/statusbar/NotificationVisibility;)
Lcom/android/internal/statusbar/IStatusBarService$Stub$Proxy;->showAuthenticationDialog(Landroid/os/Bundle;Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;IZILjava/lang/String;JI)
Lcom/android/internal/statusbar/RegisterStatusBarResult;-><init>(Landroid/util/ArrayMap;II[Lcom/android/internal/view/AppearanceRegion;IIZILandroid/os/IBinder;ZZZ[I)
Lcom/android/internal/telecom/ICallScreeningAdapter;->allowCall(Ljava/lang/String;)
Lcom/android/internal/telecom/ICallScreeningAdapter;->disallowCall(Ljava/lang/String;ZZZLandroid/content/ComponentName;)
Lcom/android/internal/telecom/ICallScreeningAdapter;->screenCallFurther(Ljava/lang/String;)
Lcom/android/internal/telecom/ICallScreeningAdapter;->silenceCall(Ljava/lang/String;)
Lcom/android/internal/telecom/ICallScreeningAdapter$Default;->allowCall(Ljava/lang/String;)
Lcom/android/internal/telecom/ICallScreeningAdapter$Default;->disallowCall(Ljava/lang/String;ZZZLandroid/content/ComponentName;)
Lcom/android/internal/telecom/ICallScreeningAdapter$Default;->screenCallFurther(Ljava/lang/String;)
Lcom/android/internal/telecom/ICallScreeningAdapter$Default;->silenceCall(Ljava/lang/String;)
Lcom/android/internal/telecom/ICallScreeningAdapter$Stub$Proxy;->allowCall(Ljava/lang/String;)
Lcom/android/internal/telecom/ICallScreeningAdapter$Stub$Proxy;->disallowCall(Ljava/lang/String;ZZZLandroid/content/ComponentName;)
Lcom/android/internal/telecom/ICallScreeningAdapter$Stub$Proxy;->screenCallFurther(Ljava/lang/String;)
Lcom/android/internal/telecom/ICallScreeningAdapter$Stub$Proxy;->silenceCall(Ljava/lang/String;)
Lcom/android/internal/telecom/ITelecomService;->getPhoneAccount(Landroid/telecom/PhoneAccountHandle;)
Lcom/android/internal/telecom/ITelecomService$Default;->getPhoneAccount(Landroid/telecom/PhoneAccountHandle;)
Lcom/android/internal/telecom/ITelecomService$Stub$Proxy;->getPhoneAccount(Landroid/telecom/PhoneAccountHandle;)
Lcom/android/internal/telephony/BaseCommands;->getLteOnCdmaMode()
Lcom/android/internal/telephony/BasicShellCommandHandler;-><init>()
Lcom/android/internal/telephony/BasicShellCommandHandler;->exec(Landroid/os/Binder;Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;[Ljava/lang/String;)
Lcom/android/internal/telephony/BasicShellCommandHandler;->getAllArgs()
Lcom/android/internal/telephony/BasicShellCommandHandler;->getBufferedInputStream()
Lcom/android/internal/telephony/BasicShellCommandHandler;->getErrFileDescriptor()
Lcom/android/internal/telephony/BasicShellCommandHandler;->getErrPrintWriter()
Lcom/android/internal/telephony/BasicShellCommandHandler;->getInFileDescriptor()
Lcom/android/internal/telephony/BasicShellCommandHandler;->getNextArg()
Lcom/android/internal/telephony/BasicShellCommandHandler;->getNextArgRequired()
Lcom/android/internal/telephony/BasicShellCommandHandler;->getNextOption()
Lcom/android/internal/telephony/BasicShellCommandHandler;->getOutFileDescriptor()
Lcom/android/internal/telephony/BasicShellCommandHandler;->getOutPrintWriter()
Lcom/android/internal/telephony/BasicShellCommandHandler;->getRawErrorStream()
Lcom/android/internal/telephony/BasicShellCommandHandler;->getRawInputStream()
Lcom/android/internal/telephony/BasicShellCommandHandler;->getRawOutputStream()
Lcom/android/internal/telephony/BasicShellCommandHandler;->getRemainingArgsCount()
Lcom/android/internal/telephony/BasicShellCommandHandler;->getTarget()
Lcom/android/internal/telephony/BasicShellCommandHandler;->handleDefaultCommands(Ljava/lang/String;)
Lcom/android/internal/telephony/BasicShellCommandHandler;->init(Landroid/os/Binder;Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;[Ljava/lang/String;I)
Lcom/android/internal/telephony/BasicShellCommandHandler;->onCommand(Ljava/lang/String;)
Lcom/android/internal/telephony/BasicShellCommandHandler;->onHelp()
Lcom/android/internal/telephony/BasicShellCommandHandler;->peekNextArg()
Lcom/android/internal/telephony/CarrierInfoManager;->deleteCarrierInfoForImsiEncryption(Landroid/content/Context;)
Lcom/android/internal/telephony/CarrierInfoManager;->getCarrierInfoForImsiEncryption(ILandroid/content/Context;Ljava/lang/String;)
Lcom/android/internal/telephony/CarrierKeyDownloadManager;->cleanupDownloadPreferences(J)
Lcom/android/internal/telephony/CarrierKeyDownloadManager;->convertToString(Ljava/io/InputStream;)
Lcom/android/internal/telephony/CarrierKeyDownloadManager;->getMccMncSetFromPref()
Lcom/android/internal/telephony/CarrierKeyDownloadManager;->isValidDownload(Ljava/lang/String;)
Lcom/android/internal/telephony/CarrierPrivilegesTracker;->getCarrierConfigCerts(I)
Lcom/android/internal/telephony/CarrierPrivilegesTracker;->getSimCerts()
Lcom/android/internal/telephony/CarrierPrivilegesTracker;->isPackagePrivileged(Ljava/util/Set;)
Lcom/android/internal/telephony/CarrierPrivilegesTracker;->maybeUpdateCertsAndNotifyRegistrants(Ljava/util/Set;Ljava/util/Set;)
Lcom/android/internal/telephony/CarrierResolver;->loadCarrierMatchingRulesOnMccMnc()
Lcom/android/internal/telephony/CarrierResolver;->matchSubscriptionCarrier()
Lcom/android/internal/telephony/CarrierServiceStateTracker;->getContentObserver()
Lcom/android/internal/telephony/CarrierServiceStateTracker;->handlePrefNetworkModeChanged()
Lcom/android/internal/telephony/CarrierServiceStateTracker;->registerPrefNetworkModeObserver()
Lcom/android/internal/telephony/CarrierServiceStateTracker;->unregisterPrefNetworkModeObserver()
Lcom/android/internal/telephony/CarrierServicesSmsFilter$CarrierSmsFilterCallback;->onFilterComplete(I)
Lcom/android/internal/telephony/CarrierServicesSmsFilter$FilterAggregator;->onFilterComplete(I)
Lcom/android/internal/telephony/CarrierSmsUtils;->getCarrierImsPackage(Landroid/content/Context;Lcom/android/internal/telephony/Phone;)
Lcom/android/internal/telephony/CarrierSmsUtils;->getCarrierImsPackageForIntent(Landroid/content/Context;Lcom/android/internal/telephony/Phone;Landroid/content/Intent;)
Lcom/android/internal/telephony/CommandsInterface;->getLteOnCdmaMode()
Lcom/android/internal/telephony/CommandsInterface;->setupDataCall(ILandroid/telephony/data/DataProfile;ZZILandroid/net/LinkProperties;Landroid/os/Message;)
Lcom/android/internal/telephony/DefaultPhoneNotifier;->notifyDataConnection(Lcom/android/internal/telephony/Phone;Ljava/lang/String;Landroid/telephony/PreciseDataConnectionState;)
Lcom/android/internal/telephony/DefaultPhoneNotifier;->notifyDataConnectionFailed(Lcom/android/internal/telephony/Phone;Ljava/lang/String;Ljava/lang/String;I)
Lcom/android/internal/telephony/DefaultPhoneNotifier;->notifyOutgoingEmergencyCall(Lcom/android/internal/telephony/Phone;Landroid/telephony/emergency/EmergencyNumber;)
Lcom/android/internal/telephony/DeviceStateMonitor;->isCarModeOn()
Lcom/android/internal/telephony/GsmCdmaCallTracker;->dial(Ljava/lang/String;Landroid/os/Bundle;)
Lcom/android/internal/telephony/GsmCdmaCallTracker;->dialCdma(Ljava/lang/String;ILandroid/os/Bundle;)
Lcom/android/internal/telephony/GsmCdmaCallTracker;->dialThreeWay(Ljava/lang/String;Landroid/os/Bundle;)
Lcom/android/internal/telephony/GsmCdmaConnection;-><init>(Lcom/android/internal/telephony/GsmCdmaPhone;Ljava/lang/String;Lcom/android/internal/telephony/GsmCdmaCallTracker;Lcom/android/internal/telephony/GsmCdmaCall;Z)
Lcom/android/internal/telephony/GsmCdmaPhone;->dial(Ljava/lang/String;Lcom/android/internal/telephony/PhoneInternalInterface$DialArgs;)
Lcom/android/internal/telephony/GsmCdmaPhone;->getCarrierInfoForImsiEncryption(I)
Lcom/android/internal/telephony/GsmCdmaPhone;->getPreciseDataConnectionState(Ljava/lang/String;)
Lcom/android/internal/telephony/GsmCdmaPhone;->setIsoCountryProperty(Ljava/lang/String;)
Lcom/android/internal/telephony/GsmCdmaPhone;->updateServiceLocation()
Lcom/android/internal/telephony/IIccPhoneBook;->updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/internal/telephony/IIccPhoneBook;->updateAdnRecordsInEfByIndexForSubscriber(IILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/internal/telephony/IIccPhoneBook;->updateAdnRecordsInEfBySearchForSubscriber(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Lcom/android/internal/telephony/IIccPhoneBook$Default;->updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/internal/telephony/IIccPhoneBook$Default;->updateAdnRecordsInEfByIndexForSubscriber(IILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/internal/telephony/IIccPhoneBook$Default;->updateAdnRecordsInEfBySearchForSubscriber(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Lcom/android/internal/telephony/IIccPhoneBook$Stub$Proxy;->updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/internal/telephony/IIccPhoneBook$Stub$Proxy;->updateAdnRecordsInEfByIndexForSubscriber(IILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/internal/telephony/IIccPhoneBook$Stub$Proxy;->updateAdnRecordsInEfBySearchForSubscriber(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Lcom/android/internal/telephony/IPhoneStateListener;->onCallStateChanged(ILjava/lang/String;)
Lcom/android/internal/telephony/IPhoneStateListener;->onOutgoingEmergencyCall(Landroid/telephony/emergency/EmergencyNumber;)
Lcom/android/internal/telephony/IPhoneStateListener;->onOutgoingEmergencySms(Landroid/telephony/emergency/EmergencyNumber;)
Lcom/android/internal/telephony/IPhoneStateListener$Default;->onCallStateChanged(ILjava/lang/String;)
Lcom/android/internal/telephony/IPhoneStateListener$Default;->onOutgoingEmergencyCall(Landroid/telephony/emergency/EmergencyNumber;)
Lcom/android/internal/telephony/IPhoneStateListener$Default;->onOutgoingEmergencySms(Landroid/telephony/emergency/EmergencyNumber;)
Lcom/android/internal/telephony/IPhoneStateListener$Stub$Proxy;->onCallStateChanged(ILjava/lang/String;)
Lcom/android/internal/telephony/IPhoneStateListener$Stub$Proxy;->onOutgoingEmergencyCall(Landroid/telephony/emergency/EmergencyNumber;)
Lcom/android/internal/telephony/IPhoneStateListener$Stub$Proxy;->onOutgoingEmergencySms(Landroid/telephony/emergency/EmergencyNumber;)
Lcom/android/internal/telephony/IPhoneSubInfo;->getIccSimChallengeResponse(IIILjava/lang/String;)
Lcom/android/internal/telephony/IPhoneSubInfo$Default;->getIccSimChallengeResponse(IIILjava/lang/String;)
Lcom/android/internal/telephony/IPhoneSubInfo$Stub$Proxy;->getIccSimChallengeResponse(IIILjava/lang/String;)
Lcom/android/internal/telephony/ITelephony;->carrierActionSetMeteredApnsEnabled(IZ)
Lcom/android/internal/telephony/ITelephony;->disableLocationUpdatesForSubscriber(I)
Lcom/android/internal/telephony/ITelephony;->enableLocationUpdatesForSubscriber(I)
Lcom/android/internal/telephony/ITelephony;->getAllowedNetworkTypes(I)
Lcom/android/internal/telephony/ITelephony;->getCalculatedPreferredNetworkType(Ljava/lang/String;Ljava/lang/String;)
Lcom/android/internal/telephony/ITelephony;->getCallForwarding(II)
Lcom/android/internal/telephony/ITelephony;->getCallStateForSlot(I)
Lcom/android/internal/telephony/ITelephony;->getCallWaitingStatus(I)
Lcom/android/internal/telephony/ITelephony;->getMmTelFeatureAndListen(ILcom/android/ims/internal/IImsServiceFeatureCallback;)
Lcom/android/internal/telephony/ITelephony;->getPreferredNetworkType(I)
Lcom/android/internal/telephony/ITelephony;->getRcsFeatureAndListen(ILcom/android/ims/internal/IImsServiceFeatureCallback;)
Lcom/android/internal/telephony/ITelephony;->isDataAllowedInVoiceCall(I)
Lcom/android/internal/telephony/ITelephony;->setAllowedNetworkTypes(IJ)
Lcom/android/internal/telephony/ITelephony;->setAlwaysAllowMmsData(IZ)
Lcom/android/internal/telephony/ITelephony;->setCallForwarding(ILandroid/telephony/CallForwardingInfo;)
Lcom/android/internal/telephony/ITelephony;->setCallWaitingStatus(IZ)
Lcom/android/internal/telephony/ITelephony;->setDataAllowedDuringVoiceCall(IZ)
Lcom/android/internal/telephony/ITelephony;->setPolicyDataEnabled(ZI)
Lcom/android/internal/telephony/ITelephony;->setPreferredNetworkType(II)
Lcom/android/internal/telephony/ITelephony;->setRadioCapability([Landroid/telephony/RadioAccessFamily;)
Lcom/android/internal/telephony/ITelephony;->setUserDataEnabled(IZ)
Lcom/android/internal/telephony/ITelephony;->unregisterImsFeatureCallback(IILcom/android/ims/internal/IImsServiceFeatureCallback;)
Lcom/android/internal/telephony/ITelephony;->updateServiceLocationForSubscriber(I)
Lcom/android/internal/telephony/ITelephony$Default;->carrierActionSetMeteredApnsEnabled(IZ)
Lcom/android/internal/telephony/ITelephony$Default;->disableLocationUpdatesForSubscriber(I)
Lcom/android/internal/telephony/ITelephony$Default;->enableLocationUpdatesForSubscriber(I)
Lcom/android/internal/telephony/ITelephony$Default;->getAllowedNetworkTypes(I)
Lcom/android/internal/telephony/ITelephony$Default;->getCalculatedPreferredNetworkType(Ljava/lang/String;Ljava/lang/String;)
Lcom/android/internal/telephony/ITelephony$Default;->getCallForwarding(II)
Lcom/android/internal/telephony/ITelephony$Default;->getCallStateForSlot(I)
Lcom/android/internal/telephony/ITelephony$Default;->getCallWaitingStatus(I)
Lcom/android/internal/telephony/ITelephony$Default;->getMmTelFeatureAndListen(ILcom/android/ims/internal/IImsServiceFeatureCallback;)
Lcom/android/internal/telephony/ITelephony$Default;->getPreferredNetworkType(I)
Lcom/android/internal/telephony/ITelephony$Default;->getRcsFeatureAndListen(ILcom/android/ims/internal/IImsServiceFeatureCallback;)
Lcom/android/internal/telephony/ITelephony$Default;->isDataAllowedInVoiceCall(I)
Lcom/android/internal/telephony/ITelephony$Default;->setAllowedNetworkTypes(IJ)
Lcom/android/internal/telephony/ITelephony$Default;->setAlwaysAllowMmsData(IZ)
Lcom/android/internal/telephony/ITelephony$Default;->setCallForwarding(ILandroid/telephony/CallForwardingInfo;)
Lcom/android/internal/telephony/ITelephony$Default;->setCallWaitingStatus(IZ)
Lcom/android/internal/telephony/ITelephony$Default;->setDataAllowedDuringVoiceCall(IZ)
Lcom/android/internal/telephony/ITelephony$Default;->setPolicyDataEnabled(ZI)
Lcom/android/internal/telephony/ITelephony$Default;->setPreferredNetworkType(II)
Lcom/android/internal/telephony/ITelephony$Default;->setRadioCapability([Landroid/telephony/RadioAccessFamily;)
Lcom/android/internal/telephony/ITelephony$Default;->setUserDataEnabled(IZ)
Lcom/android/internal/telephony/ITelephony$Default;->unregisterImsFeatureCallback(IILcom/android/ims/internal/IImsServiceFeatureCallback;)
Lcom/android/internal/telephony/ITelephony$Default;->updateServiceLocationForSubscriber(I)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->carrierActionSetMeteredApnsEnabled(IZ)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->disableLocationUpdatesForSubscriber(I)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->enableLocationUpdatesForSubscriber(I)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->getAllowedNetworkTypes(I)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->getCalculatedPreferredNetworkType(Ljava/lang/String;Ljava/lang/String;)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->getCallForwarding(II)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->getCallStateForSlot(I)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->getCallWaitingStatus(I)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->getMmTelFeatureAndListen(ILcom/android/ims/internal/IImsServiceFeatureCallback;)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->getPreferredNetworkType(I)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->getRcsFeatureAndListen(ILcom/android/ims/internal/IImsServiceFeatureCallback;)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->isDataAllowedInVoiceCall(I)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->setAllowedNetworkTypes(IJ)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->setAlwaysAllowMmsData(IZ)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->setCallForwarding(ILandroid/telephony/CallForwardingInfo;)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->setCallWaitingStatus(IZ)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->setDataAllowedDuringVoiceCall(IZ)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->setPolicyDataEnabled(ZI)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->setPreferredNetworkType(II)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->setRadioCapability([Landroid/telephony/RadioAccessFamily;)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->setUserDataEnabled(IZ)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->unregisterImsFeatureCallback(IILcom/android/ims/internal/IImsServiceFeatureCallback;)
Lcom/android/internal/telephony/ITelephony$Stub$Proxy;->updateServiceLocationForSubscriber(I)
Lcom/android/internal/telephony/ITelephonyRegistry;->listen(Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)
Lcom/android/internal/telephony/ITelephonyRegistry;->listenForSubscriber(ILjava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)
Lcom/android/internal/telephony/ITelephonyRegistry;->listenWithFeature(Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)
Lcom/android/internal/telephony/ITelephonyRegistry;->notifyCellLocation(Landroid/telephony/CellIdentity;)
Lcom/android/internal/telephony/ITelephonyRegistry;->notifyDataConnectionFailed(Ljava/lang/String;)
Lcom/android/internal/telephony/ITelephonyRegistry;->notifyDataConnectionForSubscriber(IIILandroid/telephony/PreciseDataConnectionState;)
Lcom/android/internal/telephony/ITelephonyRegistry;->notifyPreciseDataConnectionFailed(IIILjava/lang/String;I)
Lcom/android/internal/telephony/ITelephonyRegistry$Default;->listen(Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)
Lcom/android/internal/telephony/ITelephonyRegistry$Default;->listenForSubscriber(ILjava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)
Lcom/android/internal/telephony/ITelephonyRegistry$Default;->listenWithFeature(Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)
Lcom/android/internal/telephony/ITelephonyRegistry$Default;->notifyCellLocation(Landroid/telephony/CellIdentity;)
Lcom/android/internal/telephony/ITelephonyRegistry$Default;->notifyDataConnectionFailed(Ljava/lang/String;)
Lcom/android/internal/telephony/ITelephonyRegistry$Default;->notifyDataConnectionForSubscriber(IIILandroid/telephony/PreciseDataConnectionState;)
Lcom/android/internal/telephony/ITelephonyRegistry$Default;->notifyPreciseDataConnectionFailed(IIILjava/lang/String;I)
Lcom/android/internal/telephony/ITelephonyRegistry$Stub$Proxy;->listen(Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)
Lcom/android/internal/telephony/ITelephonyRegistry$Stub$Proxy;->listenForSubscriber(ILjava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)
Lcom/android/internal/telephony/ITelephonyRegistry$Stub$Proxy;->listenWithFeature(Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)
Lcom/android/internal/telephony/ITelephonyRegistry$Stub$Proxy;->notifyCellLocation(Landroid/telephony/CellIdentity;)
Lcom/android/internal/telephony/ITelephonyRegistry$Stub$Proxy;->notifyDataConnectionFailed(Ljava/lang/String;)
Lcom/android/internal/telephony/ITelephonyRegistry$Stub$Proxy;->notifyDataConnectionForSubscriber(IIILandroid/telephony/PreciseDataConnectionState;)
Lcom/android/internal/telephony/ITelephonyRegistry$Stub$Proxy;->notifyPreciseDataConnectionFailed(IIILjava/lang/String;I)
Lcom/android/internal/telephony/IccPhoneBookInterfaceManager;->updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/internal/telephony/IccPhoneBookInterfaceManager;->updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Lcom/android/internal/telephony/IccProvider;->addIccRecordToEf(ILjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;I)
Lcom/android/internal/telephony/IccProvider;->deleteIccRecordFromEf(ILjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;I)
Lcom/android/internal/telephony/IccProvider;->updateIccRecordInEf(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)
Lcom/android/internal/telephony/IccSmsInterfaceManager;-><init>(Lcom/android/internal/telephony/Phone;Landroid/content/Context;Landroid/app/AppOpsManager;Landroid/os/UserManager;Lcom/android/internal/telephony/SmsDispatchersController;)
Lcom/android/internal/telephony/IccSmsInterfaceManager;->getSmsCapacityOnIcc()
Lcom/android/internal/telephony/ImsSmsDispatcher;-><init>(Lcom/android/internal/telephony/Phone;Lcom/android/internal/telephony/SmsDispatchersController;)
Lcom/android/internal/telephony/ImsSmsDispatcher;->fallbackToPstn(ILcom/android/internal/telephony/SMSDispatcher$SmsTracker;)
Lcom/android/internal/telephony/InboundSmsHandler;->dispatchIntent(Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;Landroid/content/BroadcastReceiver;Landroid/os/UserHandle;I)
Lcom/android/internal/telephony/InboundSmsHandler;->dispatchMessage(Lcom/android/internal/telephony/SmsMessageBase;)
Lcom/android/internal/telephony/InboundSmsHandler;->dispatchMessageRadioSpecific(Lcom/android/internal/telephony/SmsMessageBase;)
Lcom/android/internal/telephony/InboundSmsHandler;->dispatchNormalMessage(Lcom/android/internal/telephony/SmsMessageBase;)
Lcom/android/internal/telephony/InboundSmsHandler;->filterSms([[BILcom/android/internal/telephony/InboundSmsTracker;Lcom/android/internal/telephony/InboundSmsHandler$SmsBroadcastReceiver;Z)
Lcom/android/internal/telephony/InboundSmsHandler;->handleInjectSms(Landroid/os/AsyncResult;)
Lcom/android/internal/telephony/InboundSmsHandler;->parseSmsMessage([Landroid/telephony/SmsMessage;)
Lcom/android/internal/telephony/InboundSmsHandler;->processMessagePartWithUserLocked(Lcom/android/internal/telephony/InboundSmsTracker;[[BILcom/android/internal/telephony/InboundSmsHandler$SmsBroadcastReceiver;)
Lcom/android/internal/telephony/InboundSmsHandler;->writeInboxMessage(Landroid/content/Intent;)
Lcom/android/internal/telephony/InboundSmsHandler$CarrierServicesSmsFilterCallback;-><init>(Lcom/android/internal/telephony/InboundSmsHandler;[[BILjava/lang/String;Lcom/android/internal/telephony/InboundSmsHandler$SmsBroadcastReceiver;ZZIJ)
Lcom/android/internal/telephony/InboundSmsTracker;-><init>(Landroid/content/Context;[BJIZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZI)
Lcom/android/internal/telephony/InboundSmsTracker;-><init>(Landroid/content/Context;[BJIZLjava/lang/String;Ljava/lang/String;IIIZLjava/lang/String;ZI)
Lcom/android/internal/telephony/IndentingPrintWriter;->maybeWriteIndent()
Lcom/android/internal/telephony/IndentingPrintWriter;->println()
Lcom/android/internal/telephony/IndentingPrintWriter;->write([CII)
Lcom/android/internal/telephony/IndentingPrintWriter;->write(I)
Lcom/android/internal/telephony/IndentingPrintWriter;->write(Ljava/lang/String;II)
Lcom/android/internal/telephony/LinkCapacityEstimate;-><init>(II)
Lcom/android/internal/telephony/LinkCapacityEstimate;-><init>(III)
Lcom/android/internal/telephony/LinkCapacityEstimate;->toString()
Lcom/android/internal/telephony/LocaleTracker;->getCarrierCountry()
Lcom/android/internal/telephony/NetworkFactory;->acceptRequest(Landroid/net/NetworkRequest;I)
Lcom/android/internal/telephony/NetworkFactory;->evalRequest(Lcom/android/internal/telephony/NetworkFactory$NetworkRequestInfo;)
Lcom/android/internal/telephony/NetworkFactory;->evalRequests()
Lcom/android/internal/telephony/NetworkFactory;->handleAddRequest(Landroid/net/NetworkRequest;II)
Lcom/android/internal/telephony/NetworkFactory;->handleMessage(Landroid/os/Message;)
Lcom/android/internal/telephony/NetworkFactory;->handleRemoveRequest(Landroid/net/NetworkRequest;)
Lcom/android/internal/telephony/NetworkFactory;->handleSetFilter(Landroid/net/NetworkCapabilities;)
Lcom/android/internal/telephony/NetworkFactory;->handleSetScore(I)
Lcom/android/internal/telephony/NetworkFactory;->needNetworkFor(Landroid/net/NetworkRequest;I)
Lcom/android/internal/telephony/NetworkFactory;->shouldNeedNetworkFor(Lcom/android/internal/telephony/NetworkFactory$NetworkRequestInfo;)
Lcom/android/internal/telephony/NetworkFactory;->shouldReleaseNetworkFor(Lcom/android/internal/telephony/NetworkFactory$NetworkRequestInfo;)
Lcom/android/internal/telephony/NetworkFactory$NetworkRequestInfo;-><init>(Landroid/net/NetworkRequest;II)
Lcom/android/internal/telephony/NetworkFactory$NetworkRequestInfo;->toString()
Lcom/android/internal/telephony/NetworkTypeController;->getNrDisplayType()
Lcom/android/internal/telephony/NetworkTypeController;->isDataActive()
Lcom/android/internal/telephony/OemHookIndication;-><init>(Lcom/android/internal/telephony/RIL;)
Lcom/android/internal/telephony/OemHookIndication;->oemHookRaw(ILjava/util/ArrayList;)
Lcom/android/internal/telephony/OemHookResponse;-><init>(Lcom/android/internal/telephony/RIL;)
Lcom/android/internal/telephony/OemHookResponse;->sendRequestRawResponse(Landroid/hardware/radio/V1_0/RadioResponseInfo;Ljava/util/ArrayList;)
Lcom/android/internal/telephony/OemHookResponse;->sendRequestStringsResponse(Landroid/hardware/radio/V1_0/RadioResponseInfo;Ljava/util/ArrayList;)
Lcom/android/internal/telephony/Phone;->getCachedPreferredNetworkType()
Lcom/android/internal/telephony/Phone;->getCarrierInfoForImsiEncryption(I)
Lcom/android/internal/telephony/Phone;->getCellIdentity()
Lcom/android/internal/telephony/Phone;->getLteOnCdmaMode()
Lcom/android/internal/telephony/Phone;->getPreferredNetworkType(Landroid/os/Message;)
Lcom/android/internal/telephony/Phone;->isImsUseEnabled()
Lcom/android/internal/telephony/Phone;->notifyAllActiveDataConnections()
Lcom/android/internal/telephony/Phone;->notifyDataConnection(Ljava/lang/String;)
Lcom/android/internal/telephony/Phone;->notifyDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;I)
Lcom/android/internal/telephony/Phone;->notifyOutgoingEmergencyCall(Landroid/telephony/emergency/EmergencyNumber;)
Lcom/android/internal/telephony/Phone;->notifyPhysicalChannelConfiguration(Ljava/util/List;)
Lcom/android/internal/telephony/Phone;->radioCapabilityUpdated(Lcom/android/internal/telephony/RadioCapability;)
Lcom/android/internal/telephony/Phone;->setCdmaSubscription(ILandroid/os/Message;)
Lcom/android/internal/telephony/Phone;->setPreferredNetworkType(ILandroid/os/Message;)
Lcom/android/internal/telephony/Phone;->setSimPowerState(ILandroid/os/WorkSource;)
Lcom/android/internal/telephony/PhoneFactory;->calculatePreferredNetworkType(Landroid/content/Context;I)
Lcom/android/internal/telephony/PhoneInternalInterface;->getCarrierInfoForImsiEncryption(I)
Lcom/android/internal/telephony/PhoneNotifier;->notifyDataConnection(Lcom/android/internal/telephony/Phone;Ljava/lang/String;Landroid/telephony/PreciseDataConnectionState;)
Lcom/android/internal/telephony/PhoneNotifier;->notifyDataConnectionFailed(Lcom/android/internal/telephony/Phone;Ljava/lang/String;Ljava/lang/String;I)
Lcom/android/internal/telephony/PhoneNotifier;->notifyOutgoingEmergencyCall(Lcom/android/internal/telephony/Phone;Landroid/telephony/emergency/EmergencyNumber;)
Lcom/android/internal/telephony/PhoneSubInfoController;->getIccSimChallengeResponse(IIILjava/lang/String;)
Lcom/android/internal/telephony/PhoneSwitcher$PhoneSwitcherNetworkRequestListener;->needNetworkFor(Landroid/net/NetworkRequest;I)
Lcom/android/internal/telephony/RIL;->getDeafultWorkSourceIfInvalid(Landroid/os/WorkSource;)
Lcom/android/internal/telephony/RIL;->getOemHookProxy(Landroid/os/Message;)
Lcom/android/internal/telephony/RIL;->processResponseCleanUp(Lcom/android/internal/telephony/RILRequest;Landroid/hardware/radio/V1_0/RadioResponseInfo;Ljava/lang/Object;)
Lcom/android/internal/telephony/RIL;->setLocationUpdates(ZLandroid/os/Message;)
Lcom/android/internal/telephony/RIL;->setupDataCall(ILandroid/telephony/data/DataProfile;ZZILandroid/net/LinkProperties;Landroid/os/Message;)
Lcom/android/internal/telephony/RadioConfig;-><init>(Landroid/content/Context;)
Lcom/android/internal/telephony/RadioConfig;->getInstance(Landroid/content/Context;)
Lcom/android/internal/telephony/RadioConfigResponse;-><init>(Lcom/android/internal/telephony/RadioConfig;)
Lcom/android/internal/telephony/RadioResponse;->sendCdmaSMSExpectMoreResponse(Landroid/hardware/radio/V1_0/RadioResponseInfo;Landroid/hardware/radio/V1_0/SendSmsResult;)
Lcom/android/internal/telephony/RatRatcheter;->ratchet(Landroid/telephony/ServiceState;Landroid/telephony/ServiceState;Z)
Lcom/android/internal/telephony/RetryManager;-><init>(Lcom/android/internal/telephony/Phone;Ljava/lang/String;)
Lcom/android/internal/telephony/RetryManager;->setModemSuggestedDelay(J)
Lcom/android/internal/telephony/RetryManager;->validateNonNegativeInt(Ljava/lang/String;I)
Lcom/android/internal/telephony/RetryManager$RetryRec;-><init>(II)
Lcom/android/internal/telephony/SMSDispatcher;->handleNotInService(ILandroid/app/PendingIntent;)
Lcom/android/internal/telephony/SMSDispatcher$MultipartSmsSenderCallback;->onFilterComplete(I)
Lcom/android/internal/telephony/SMSDispatcher$SmsSender;-><init>(Lcom/android/internal/telephony/SMSDispatcher;Lcom/android/internal/telephony/SMSDispatcher$SmsTracker;)
Lcom/android/internal/telephony/SMSDispatcher$SmsSender;->sendSmsByCarrierApp(Ljava/lang/String;Lcom/android/internal/telephony/SMSDispatcher$SmsSenderCallback;)
Lcom/android/internal/telephony/SMSDispatcher$SmsSenderCallback;->onFilterComplete(I)
Lcom/android/internal/telephony/ServiceStateTracker;->dumpEarfcnPairList(Ljava/io/PrintWriter;)
Lcom/android/internal/telephony/ServiceStateTracker;->enableSingleLocationUpdate()
Lcom/android/internal/telephony/ServiceStateTracker;->getLteEarfcn(Landroid/telephony/CellIdentity;)
Lcom/android/internal/telephony/ServiceStateTracker;->updateLteEarfcnLists(Landroid/os/PersistableBundle;)
Lcom/android/internal/telephony/ServiceStateTracker;->updateServiceStateLteEarfcnBoost(Landroid/telephony/ServiceState;I)
Lcom/android/internal/telephony/SmsBroadcastUndelivered;-><init>(Landroid/content/Context;Lcom/android/internal/telephony/gsm/GsmInboundSmsHandler;Lcom/android/internal/telephony/cdma/CdmaInboundSmsHandler;)
Lcom/android/internal/telephony/SmsBroadcastUndelivered;->broadcastSms(Lcom/android/internal/telephony/InboundSmsTracker;Lcom/android/internal/telephony/cdma/CdmaInboundSmsHandler;Lcom/android/internal/telephony/gsm/GsmInboundSmsHandler;)
Lcom/android/internal/telephony/SmsBroadcastUndelivered;->getPhoneId(Lcom/android/internal/telephony/gsm/GsmInboundSmsHandler;Lcom/android/internal/telephony/cdma/CdmaInboundSmsHandler;)
Lcom/android/internal/telephony/SmsBroadcastUndelivered;->scanRawTable(Landroid/content/Context;Lcom/android/internal/telephony/cdma/CdmaInboundSmsHandler;Lcom/android/internal/telephony/gsm/GsmInboundSmsHandler;J)
Lcom/android/internal/telephony/SmsDispatchersController;->handleCdmaStatusReport(Lcom/android/internal/telephony/SMSDispatcher$SmsTracker;Ljava/lang/String;[B)
Lcom/android/internal/telephony/SmsDispatchersController;->handleGsmStatusReport(Lcom/android/internal/telephony/SMSDispatcher$SmsTracker;Ljava/lang/String;[B)
Lcom/android/internal/telephony/SmsDispatchersController;->handleSentOverImsStatusReport(ILjava/lang/String;[B)
Lcom/android/internal/telephony/SmsDispatchersController;->handleSmsStatusReport(Lcom/android/internal/telephony/SMSDispatcher$SmsTracker;Ljava/lang/String;[B)
Lcom/android/internal/telephony/SmsDispatchersController;->injectSmsPdu(Landroid/telephony/SmsMessage;Ljava/lang/String;Lcom/android/internal/telephony/SmsDispatchersController$SmsInjectionCallback;Z)
Lcom/android/internal/telephony/SmsDispatchersController;->injectSmsPdu([BLjava/lang/String;Lcom/android/internal/telephony/SmsDispatchersController$SmsInjectionCallback;)
Lcom/android/internal/telephony/SubscriptionController;->getIccIdsOfInsertedSims()
Lcom/android/internal/telephony/SubscriptionController;->hasSubscriberIdentifierAccess(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Lcom/android/internal/telephony/SubscriptionInfoUpdater;-><init>(Landroid/os/Looper;Landroid/content/Context;[Lcom/android/internal/telephony/CommandsInterface;)
Lcom/android/internal/telephony/SubscriptionInfoUpdater;->cleanSubscriptionInPhone(I)
Lcom/android/internal/telephony/SubscriptionInfoUpdater;->isNewSim(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)
Lcom/android/internal/telephony/TelephonyComponentFactory;->makeInboundSmsTracker(Landroid/content/Context;[BJIZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZI)
Lcom/android/internal/telephony/TelephonyComponentFactory;->makeInboundSmsTracker(Landroid/content/Context;[BJIZLjava/lang/String;Ljava/lang/String;IIIZLjava/lang/String;ZI)
Lcom/android/internal/telephony/TelephonyComponentFactory;->makeSubscriptionInfoUpdater(Landroid/os/Looper;Landroid/content/Context;[Lcom/android/internal/telephony/CommandsInterface;)
Lcom/android/internal/telephony/TelephonyPermissions;->checkPrivilegedReadPermissionOrCarrierPrivilegePermission(Landroid/content/Context;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)
Lcom/android/internal/telephony/TelephonyPermissions;->enforeceCallingOrSelfReadPhoneStatePermissionOrCarrierPrivilege(Landroid/content/Context;ILjava/lang/String;)
Lcom/android/internal/telephony/TelephonyPermissions;->enforeceCallingOrSelfReadPrecisePhoneStatePermissionOrCarrierPrivilege(Landroid/content/Context;ILjava/lang/String;)
Lcom/android/internal/telephony/TelephonyPermissions;->enforeceCallingOrSelfReadPrivilegedPhoneStatePermissionOrCarrierPrivilege(Landroid/content/Context;ILjava/lang/String;)
Lcom/android/internal/telephony/TelephonyStatsLog;->write(I)
Lcom/android/internal/telephony/UiccPhoneBookController;->updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/internal/telephony/UiccPhoneBookController;->updateAdnRecordsInEfByIndexForSubscriber(IILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/internal/telephony/UiccPhoneBookController;->updateAdnRecordsInEfBySearchForSubscriber(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Lcom/android/internal/telephony/WapPushOverSms;->dispatchWapPdu([BLandroid/content/BroadcastReceiver;Lcom/android/internal/telephony/InboundSmsHandler;Ljava/lang/String;IJ)
Lcom/android/internal/telephony/WapPushOverSms;->getDeliveryOrReadReportThreadId(Landroid/content/Context;Lcom/google/android/mms/pdu/GenericPdu;)
Lcom/android/internal/telephony/WapPushOverSms;->isDuplicateNotification(Landroid/content/Context;Lcom/google/android/mms/pdu/NotificationInd;)
Lcom/android/internal/telephony/WapPushOverSms;->writeInboxMessage(ILcom/google/android/mms/pdu/GenericPdu;)
Lcom/android/internal/telephony/WapPushOverSms$BindServiceThread;-><init>(Lcom/android/internal/telephony/WapPushOverSms;Landroid/content/Context;)
Lcom/android/internal/telephony/WapPushOverSms$BindServiceThread;-><init>(Lcom/android/internal/telephony/WapPushOverSms;Landroid/content/Context;Lcom/android/internal/telephony/WapPushOverSms$1;)
Lcom/android/internal/telephony/WapPushOverSms$BindServiceThread;->run()
Lcom/android/internal/telephony/cdma/CdmaInboundSmsHandler;->addVoicemailSmsToMetrics()
Lcom/android/internal/telephony/cdma/CdmaInboundSmsHandler;->dispatchMessageRadioSpecific(Lcom/android/internal/telephony/SmsMessageBase;)
Lcom/android/internal/telephony/cdma/CdmaInboundSmsHandler;->handleVoicemailTeleservice(Lcom/android/internal/telephony/cdma/SmsMessage;)
Lcom/android/internal/telephony/cdma/CdmaInboundSmsHandler;->processCdmaWapPdu([BILjava/lang/String;Ljava/lang/String;J)
Lcom/android/internal/telephony/cdma/CdmaSMSDispatcher;->handleCdmaStatusReport(Lcom/android/internal/telephony/cdma/SmsMessage;)
Lcom/android/internal/telephony/cdnr/BrandOverrideEfData;->getServiceProviderNameDisplayCondition()
Lcom/android/internal/telephony/cdnr/CarrierConfigEfData;->getServiceProviderNameDisplayCondition()
Lcom/android/internal/telephony/cdnr/CarrierDisplayNameResolver;->getCombinedRegState(Landroid/telephony/ServiceState;)
Lcom/android/internal/telephony/cdnr/CarrierDisplayNameResolver$CarrierDisplayNameConditionRule;->shouldShowPnn(Z)
Lcom/android/internal/telephony/cdnr/CarrierDisplayNameResolver$CarrierDisplayNameConditionRule;->shouldShowSpn(Z)
Lcom/android/internal/telephony/cdnr/EfData;->getServiceProviderNameDisplayCondition()
Lcom/android/internal/telephony/cdnr/RuimEfData;->getServiceProviderNameDisplayCondition()
Lcom/android/internal/telephony/cdnr/UsimEfData;->getServiceProviderNameDisplayCondition()
Lcom/android/internal/telephony/dataconnection/AccessNetworksManager;->dump(Ljava/io/FileDescriptor;Lcom/android/internal/telephony/IndentingPrintWriter;[Ljava/lang/String;)
Lcom/android/internal/telephony/dataconnection/AccessNetworksManager;->handleMessage(Landroid/os/Message;)
Lcom/android/internal/telephony/dataconnection/AccessNetworksManager$QualifiedNetworksServiceConnection;-><init>(Lcom/android/internal/telephony/dataconnection/AccessNetworksManager;Lcom/android/internal/telephony/dataconnection/AccessNetworksManager$1;)
Lcom/android/internal/telephony/dataconnection/ApnContext;->setModemSuggestedDelay(J)
Lcom/android/internal/telephony/dataconnection/CellularDataService$CellularDataServiceProvider;->setupDataCall(ILandroid/telephony/data/DataProfile;ZZILandroid/net/LinkProperties;Landroid/telephony/data/DataServiceCallback;)
Lcom/android/internal/telephony/dataconnection/DataConnection;-><init>(Lcom/android/internal/telephony/Phone;Ljava/lang/String;ILcom/android/internal/telephony/dataconnection/DcTracker;Lcom/android/internal/telephony/dataconnection/DataServiceManager;Lcom/android/internal/telephony/dataconnection/DcTesterFailBringUpAll;Lcom/android/internal/telephony/dataconnection/DcController;)
Lcom/android/internal/telephony/dataconnection/DataConnection;->makeDataConnection(Lcom/android/internal/telephony/Phone;ILcom/android/internal/telephony/dataconnection/DcTracker;Lcom/android/internal/telephony/dataconnection/DataServiceManager;Lcom/android/internal/telephony/dataconnection/DcTesterFailBringUpAll;Lcom/android/internal/telephony/dataconnection/DcController;)
Lcom/android/internal/telephony/dataconnection/DataConnection;->notifyConnectCompleted(Lcom/android/internal/telephony/dataconnection/DataConnection$ConnectionParams;IZ)
Lcom/android/internal/telephony/dataconnection/DataConnection;->onSubscriptionOverride(II)
Lcom/android/internal/telephony/dataconnection/DataConnection;->setLinkPropertiesHttpProxy(Landroid/net/ProxyInfo;)
Lcom/android/internal/telephony/dataconnection/DataConnection;->updateLinkBandwidthsFromModem(Lcom/android/internal/telephony/LinkCapacityEstimate;)
Lcom/android/internal/telephony/dataconnection/DataConnection;->updateNetworkInfo()
Lcom/android/internal/telephony/dataconnection/DataConnection;->updateNetworkInfoSuspendState()
Lcom/android/internal/telephony/dataconnection/DataConnection$DcInactiveState;->setEnterNotificationParams(Lcom/android/internal/telephony/dataconnection/DataConnection$ConnectionParams;I)
Lcom/android/internal/telephony/dataconnection/DataServiceManager;->setupDataCall(ILandroid/telephony/data/DataProfile;ZZILandroid/net/LinkProperties;Landroid/os/Message;)
Lcom/android/internal/telephony/dataconnection/DcController;-><init>(Ljava/lang/String;Lcom/android/internal/telephony/Phone;Lcom/android/internal/telephony/dataconnection/DcTracker;Lcom/android/internal/telephony/dataconnection/DataServiceManager;Landroid/os/Handler;)
Lcom/android/internal/telephony/dataconnection/DcController;->dispose()
Lcom/android/internal/telephony/dataconnection/DcController;->getWhatToString(I)
Lcom/android/internal/telephony/dataconnection/DcController;->isExecutingCarrierChange()
Lcom/android/internal/telephony/dataconnection/DcController;->lr(Ljava/lang/String;)
Lcom/android/internal/telephony/dataconnection/DcController;->makeDcc(Lcom/android/internal/telephony/Phone;Lcom/android/internal/telephony/dataconnection/DcTracker;Lcom/android/internal/telephony/dataconnection/DataServiceManager;Landroid/os/Handler;Ljava/lang/String;)
Lcom/android/internal/telephony/dataconnection/DcController$DccDefaultState;-><init>(Lcom/android/internal/telephony/dataconnection/DcController;)
Lcom/android/internal/telephony/dataconnection/DcController$DccDefaultState;-><init>(Lcom/android/internal/telephony/dataconnection/DcController;Lcom/android/internal/telephony/dataconnection/DcController$1;)
Lcom/android/internal/telephony/dataconnection/DcController$DccDefaultState;->enter()
Lcom/android/internal/telephony/dataconnection/DcController$DccDefaultState;->exit()
Lcom/android/internal/telephony/dataconnection/DcController$DccDefaultState;->onDataStateChanged(Ljava/util/ArrayList;)
Lcom/android/internal/telephony/dataconnection/DcController$DccDefaultState;->processMessage(Landroid/os/Message;)
Lcom/android/internal/telephony/dataconnection/DcFailBringUp;->saveParameters(III)
Lcom/android/internal/telephony/dataconnection/DcNetworkAgent;-><init>(Lcom/android/internal/telephony/dataconnection/DataConnection;Lcom/android/internal/telephony/Phone;Landroid/net/NetworkInfo;ILandroid/net/NetworkAgentConfig;Landroid/net/NetworkProvider;I)
Lcom/android/internal/telephony/dataconnection/DcNetworkAgent;->checkDuplicateInterface(Ljava/lang/String;)
Lcom/android/internal/telephony/dataconnection/DcNetworkAgent;->getNetworkInfo()
Lcom/android/internal/telephony/dataconnection/DcNetworkAgent;->sendNetworkInfo(Landroid/net/NetworkInfo;Lcom/android/internal/telephony/dataconnection/DataConnection;)
Lcom/android/internal/telephony/dataconnection/DcTracker;->addEmergencyApnSetting()
Lcom/android/internal/telephony/dataconnection/DcTracker;->addRequestNetworkCompleteMsg(Landroid/os/Message;I)
Lcom/android/internal/telephony/dataconnection/DcTracker;->allowInitialAttachForOperator()
Lcom/android/internal/telephony/dataconnection/DcTracker;->checkForCompatibleDataConnection(Lcom/android/internal/telephony/dataconnection/ApnContext;)
Lcom/android/internal/telephony/dataconnection/DcTracker;->containsAllApns(Ljava/util/List;Ljava/util/List;)
Lcom/android/internal/telephony/dataconnection/DcTracker;->convertDctStateToTelephonyDataState(Lcom/android/internal/telephony/DctConstants$State;)
Lcom/android/internal/telephony/dataconnection/DcTracker;->getOverallState()
Lcom/android/internal/telephony/dataconnection/DcTracker;->getPreciseDataConnectionState(Ljava/lang/String;ZI)
Lcom/android/internal/telephony/dataconnection/DcTracker;->initEmergencyApnSetting()
Lcom/android/internal/telephony/dataconnection/DcTracker;->isConnected()
Lcom/android/internal/telephony/dataconnection/DcTracker;->isDisconnected()
Lcom/android/internal/telephony/dataconnection/DcTracker;->isNrNsaFrequencyRangeUnmetered()
Lcom/android/internal/telephony/dataconnection/DcTracker;->isNrSaFrequencyRangeUnmetered()
Lcom/android/internal/telephony/dataconnection/DcTracker;->onDataReconnect(Lcom/android/internal/telephony/dataconnection/ApnContext;I)
Lcom/android/internal/telephony/dataconnection/DcTracker;->onDataSetupComplete(Lcom/android/internal/telephony/dataconnection/ApnContext;ZII)
Lcom/android/internal/telephony/dataconnection/DcTracker;->onDataSetupCompleteError(Lcom/android/internal/telephony/dataconnection/ApnContext;I)
Lcom/android/internal/telephony/dataconnection/DcTracker;->sendRequestNetworkCompleteMsg(Landroid/os/Message;ZIII)
Lcom/android/internal/telephony/dataconnection/DcTracker;->sortApnListByPreferred(Ljava/util/ArrayList;)
Lcom/android/internal/telephony/dataconnection/DcTracker;->startReconnect(JLcom/android/internal/telephony/dataconnection/ApnContext;)
Lcom/android/internal/telephony/dataconnection/DcTracker;->trySetupData(Lcom/android/internal/telephony/dataconnection/ApnContext;I)
Lcom/android/internal/telephony/dataconnection/TelephonyNetworkFactory;->needNetworkFor(Landroid/net/NetworkRequest;I)
Lcom/android/internal/telephony/gsm/GsmInboundSmsHandler;->addSmsTypeZeroToMetrics()
Lcom/android/internal/telephony/gsm/GsmInboundSmsHandler;->addVoicemailSmsToMetrics()
Lcom/android/internal/telephony/gsm/GsmInboundSmsHandler;->dispatchMessageRadioSpecific(Lcom/android/internal/telephony/SmsMessageBase;)
Lcom/android/internal/telephony/gsm/SmsMessage;->newFromCDS([B)
Lcom/android/internal/telephony/gsm/SmsMessage;->newFromCMT([B)
Lcom/android/internal/telephony/gsm/UsimDataDownloadHandler;->addUsimDataDownloadToMetrics(Z)
Lcom/android/internal/telephony/gsm/UsimDataDownloadHandler;->handleDataDownload(Lcom/android/internal/telephony/gsm/SmsMessage;)
Lcom/android/internal/telephony/gsm/UsimDataDownloadHandler;->handleUsimDataDownload(Lcom/android/internal/telephony/uicc/UsimServiceTable;Lcom/android/internal/telephony/gsm/SmsMessage;)
Lcom/android/internal/telephony/gsm/UsimDataDownloadHandler;->startDataDownload(Lcom/android/internal/telephony/gsm/SmsMessage;)
Lcom/android/internal/telephony/ims/ImsResolver;-><init>(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;I)
Lcom/android/internal/telephony/ims/ImsResolver;->getImsServiceController(II)
Lcom/android/internal/telephony/ims/ImsResolver;->getImsServiceControllerAndListen(IILcom/android/ims/internal/IImsServiceFeatureCallback;)
Lcom/android/internal/telephony/ims/ImsResolver;->getMmTelFeatureAndListen(ILcom/android/ims/internal/IImsServiceFeatureCallback;)
Lcom/android/internal/telephony/ims/ImsResolver;->getRcsFeatureAndListen(ILcom/android/ims/internal/IImsServiceFeatureCallback;)
Lcom/android/internal/telephony/ims/ImsResolver;->unregisterImsFeatureCallback(IILcom/android/ims/internal/IImsServiceFeatureCallback;)
Lcom/android/internal/telephony/ims/ImsResolver$ImsServiceControllerFactory;->create(Landroid/content/Context;Landroid/content/ComponentName;Lcom/android/internal/telephony/ims/ImsServiceController$ImsServiceControllerCallbacks;)
Lcom/android/internal/telephony/ims/ImsServiceController;-><init>(Landroid/content/Context;Landroid/content/ComponentName;Lcom/android/internal/telephony/ims/ImsServiceController$ImsServiceControllerCallbacks;)
Lcom/android/internal/telephony/ims/ImsServiceController;-><init>(Landroid/content/Context;Landroid/content/ComponentName;Lcom/android/internal/telephony/ims/ImsServiceController$ImsServiceControllerCallbacks;Landroid/os/Handler;Lcom/android/internal/telephony/ims/ImsServiceController$RebindRetry;)
Lcom/android/internal/telephony/ims/ImsServiceController;->addImsFeatureBinder(IILandroid/os/IInterface;)
Lcom/android/internal/telephony/ims/ImsServiceController;->addImsServiceFeature(Landroid/telephony/ims/stub/ImsFeatureConfiguration$FeatureSlotPair;)
Lcom/android/internal/telephony/ims/ImsServiceController;->addImsServiceFeatureCallback(Lcom/android/ims/internal/IImsServiceFeatureCallback;)
Lcom/android/internal/telephony/ims/ImsServiceController;->cleanUpService()
Lcom/android/internal/telephony/ims/ImsServiceController;->createImsFeature(IILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/internal/telephony/ims/ImsServiceController;->getImsFeatureContainer(II)
Lcom/android/internal/telephony/ims/ImsServiceController;->getMmTelFeature(I)
Lcom/android/internal/telephony/ims/ImsServiceController;->getRcsFeature(I)
Lcom/android/internal/telephony/ims/ImsServiceController;->isBound()
Lcom/android/internal/telephony/ims/ImsServiceController;->removeImsFeature(IILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/internal/telephony/ims/ImsServiceController;->removeImsServiceFeatureCallback(Lcom/android/ims/internal/IImsServiceFeatureCallback;)
Lcom/android/internal/telephony/ims/ImsServiceController;->removeImsServiceFeatureCallbacks()
Lcom/android/internal/telephony/ims/ImsServiceController;->sendImsFeatureCreatedCallback(II)
Lcom/android/internal/telephony/ims/ImsServiceController;->sendImsFeatureRemovedCallback(II)
Lcom/android/internal/telephony/ims/ImsServiceController;->sendImsFeatureStatusChanged(III)
Lcom/android/internal/telephony/ims/ImsServiceController$ImsFeatureContainer;-><init>(Lcom/android/internal/telephony/ims/ImsServiceController;IILandroid/os/IInterface;)
Lcom/android/internal/telephony/ims/ImsServiceController$ImsFeatureContainer;->equals(Ljava/lang/Object;)
Lcom/android/internal/telephony/ims/ImsServiceController$ImsFeatureContainer;->hashCode()
Lcom/android/internal/telephony/ims/ImsServiceController$ImsFeatureContainer;->resolve(Ljava/lang/Class;)
Lcom/android/internal/telephony/ims/ImsServiceControllerCompat;-><init>(Landroid/content/Context;Landroid/content/ComponentName;Lcom/android/internal/telephony/ims/ImsServiceController$ImsServiceControllerCallbacks;)
Lcom/android/internal/telephony/ims/ImsServiceControllerCompat;->createImsFeature(IILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/internal/telephony/ims/ImsServiceControllerCompat;->createMMTelCompat(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/internal/telephony/ims/ImsServiceControllerCompat;->createRcsFeature(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/internal/telephony/ims/ImsServiceControllerCompat;->getInterface(ILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/internal/telephony/ims/ImsServiceControllerCompat;->removeImsFeature(IILcom/android/ims/internal/IImsFeatureStatusCallback;)
Lcom/android/internal/telephony/imsphone/ImsPhone;-><init>(Landroid/content/Context;Lcom/android/internal/telephony/PhoneNotifier;Lcom/android/internal/telephony/Phone;Z)
Lcom/android/internal/telephony/imsphone/ImsPhone;->dial(Ljava/lang/String;Lcom/android/internal/telephony/PhoneInternalInterface$DialArgs;)
Lcom/android/internal/telephony/imsphone/ImsPhone;->setImsRegistrationState(I)
Lcom/android/internal/telephony/imsphone/ImsPhone$ImsDialArgs$Builder;->from(Lcom/android/internal/telephony/imsphone/ImsPhone$ImsDialArgs;)
Lcom/android/internal/telephony/imsphone/ImsPhone$ImsDialArgs$Builder;->setClirMode(I)
Lcom/android/internal/telephony/imsphone/ImsPhoneCallTracker;-><init>(Lcom/android/internal/telephony/imsphone/ImsPhone;)
Lcom/android/internal/telephony/imsphone/ImsPhoneCallTracker;-><init>(Lcom/android/internal/telephony/imsphone/ImsPhone;Ljava/util/concurrent/Executor;)
Lcom/android/internal/telephony/imsphone/ImsPhoneCallTracker;->cacheCarrierConfiguration(I)
Lcom/android/internal/telephony/imsphone/ImsPhoneCallTracker;->getMultiEndpointInterface()
Lcom/android/internal/telephony/imsphone/ImsPhoneCallTracker;->isVolteEnabled()
Lcom/android/internal/telephony/imsphone/ImsPhoneCallTracker;->retryGetImsService()
Lcom/android/internal/telephony/imsphone/ImsPhoneCallTracker;->setPhoneNumberUtilsProxy(Lcom/android/internal/telephony/imsphone/ImsPhoneCallTracker$PhoneNumberUtilsProxy;)
Lcom/android/internal/telephony/imsphone/ImsPhoneCallTracker;->setRetryTimeout(Lcom/android/ims/FeatureConnector$RetryTimeout;)
Lcom/android/internal/telephony/imsphone/ImsPhoneCallTracker$PhoneNumberUtilsProxy;->isEmergencyNumber(Ljava/lang/String;)
Lcom/android/internal/telephony/imsphone/ImsPhoneCommandInterface;->setupDataCall(ILandroid/telephony/data/DataProfile;ZZILandroid/net/LinkProperties;Landroid/os/Message;)
Lcom/android/internal/telephony/imsphone/ImsPhoneConnection;-><init>(Lcom/android/internal/telephony/Phone;Ljava/lang/String;Lcom/android/internal/telephony/imsphone/ImsPhoneCallTracker;Lcom/android/internal/telephony/imsphone/ImsPhoneCall;Z)
Lcom/android/internal/telephony/imsphone/ImsPhoneConnection;->onRemoteDisconnect(Ljava/lang/String;)
Lcom/android/internal/telephony/metrics/MetricsCollector;->buildStatsEvent(Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;)
Lcom/android/internal/telephony/metrics/PersistAtomsStorage;->saveAtomsToFile()
Lcom/android/internal/telephony/metrics/TelephonyMetrics;->writeImsServiceSendSms(ILjava/lang/String;I)
Lcom/android/internal/telephony/metrics/TelephonyMetrics;->writeIncomingSmsError(IZI)
Lcom/android/internal/telephony/metrics/TelephonyMetrics;->writeIncomingSmsSession(IZLjava/lang/String;[JZJ)
Lcom/android/internal/telephony/metrics/TelephonyMetrics;->writeIncomingSmsSessionWithType(IIZLjava/lang/String;[JZZJ)
Lcom/android/internal/telephony/metrics/TelephonyMetrics;->writeIncomingWapPush(IZLjava/lang/String;[JZJ)
Lcom/android/internal/telephony/metrics/TelephonyMetrics;->writeRilSendSms(IIII)
Lcom/android/internal/telephony/metrics/VoiceCallRatTracker;->addProto(Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;)
Lcom/android/internal/telephony/metrics/VoiceCallRatTracker;->fromProto([Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;)
Lcom/android/internal/telephony/metrics/VoiceCallRatTracker$Key;->fromProto(Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;)
Lcom/android/internal/telephony/metrics/VoiceCallRatTracker$Value;->fromProto(Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;)
Lcom/android/internal/telephony/metrics/VoiceCallSessionStats;->audioQualityToCodecBitmask(II)
Lcom/android/internal/telephony/metrics/VoiceCallSessionStats;->classifySetupDuration(J)
Lcom/android/internal/telephony/metrics/VoiceCallSessionStats;->getSimSlotId()
Lcom/android/internal/telephony/metrics/VoiceCallSessionStats;->isEsim()
Lcom/android/internal/telephony/metrics/VoiceCallSessionStats;->onActiveSubscriptionInfoChanged(Ljava/util/List;)
Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;-><init>()
Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;->clear()
Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;->computeSerializedSize()
Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;->emptyArray()
Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;->mergeFrom(Lcom/android/internal/telephony/protobuf/nano/CodedInputByteBufferNano;)
Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;->parseFrom([B)
Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;->parseFrom(Lcom/android/internal/telephony/protobuf/nano/CodedInputByteBufferNano;)
Lcom/android/internal/telephony/nano/PersistAtomsProto$RawVoiceCallRatUsage;->writeTo(Lcom/android/internal/telephony/protobuf/nano/CodedOutputByteBufferNano;)
Lcom/android/internal/telephony/sip/SipCommandInterface;->setupDataCall(ILandroid/telephony/data/DataProfile;ZZILandroid/net/LinkProperties;Landroid/os/Message;)
Lcom/android/internal/telephony/sip/SipPhone;->dial(Ljava/lang/String;Lcom/android/internal/telephony/PhoneInternalInterface$DialArgs;)
Lcom/android/internal/telephony/uicc/RuimRecords;->adjstMinDigits(I)
Lcom/android/internal/telephony/uicc/RuimRecords$EfCsimImsimLoaded;-><init>(Lcom/android/internal/telephony/uicc/RuimRecords;Lcom/android/internal/telephony/uicc/RuimRecords$1;)
Lcom/android/internal/telephony/uicc/UiccProfile;->checkSubIdAndIccIdMatch(Ljava/lang/String;)
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;-><init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;ZIILcom/android/internal/telephony/TelephonyComponentFactory;)
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;-><init>(Landroid/content/Context;Lcom/android/internal/telephony/CommandsInterface;Lcom/android/internal/telephony/PhoneNotifier;IILcom/android/internal/telephony/TelephonyComponentFactory;)
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->fetchIMEI()
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->getCallForwardingIndicator()
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->getServiceState()
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->handleMessage(Landroid/os/Message;)
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->isCurrentSubValid()
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->logd(Ljava/lang/String;)
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->loge(Ljava/lang/String;)
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->phoneObjectUpdater(I)
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->sendBurstDtmf(Ljava/lang/String;IILandroid/os/Message;)
Lcom/android/internal/telephony/vendor/VendorGsmCdmaPhone;->startDtmf(C)
Lcom/android/internal/telephony/vendor/VendorMultiSimSettingController;-><init>(Landroid/content/Context;Lcom/android/internal/telephony/SubscriptionController;)
Lcom/android/internal/telephony/vendor/VendorMultiSimSettingController;->disableDataForNonDefaultNonOpportunisticSubscriptions()
Lcom/android/internal/telephony/vendor/VendorMultiSimSettingController;->getInstance()
Lcom/android/internal/telephony/vendor/VendorMultiSimSettingController;->init(Landroid/content/Context;Lcom/android/internal/telephony/SubscriptionController;)
Lcom/android/internal/telephony/vendor/VendorMultiSimSettingController;->log(Ljava/lang/String;)
Lcom/android/internal/telephony/vendor/VendorMultiSimSettingController;->onUserDataEnabled(IZ)
Lcom/android/internal/telephony/vendor/VendorMultiSimSettingController;->setUserDataEnabledForGroup(IZ)
Lcom/android/internal/telephony/vendor/VendorMultiSimSettingController;->updateDefaults()
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;-><init>(ILandroid/content/Context;Landroid/os/Looper;)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->activate(I)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->deactivate(I)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->enforceDds(I)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->getConnectFailureCount(I)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->handleConnectMaxFailure(I)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->handleMessage(Landroid/os/Message;)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->incConnectFailureCount(I)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->isAnyVoiceCallActiveOnDevice()
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->isCallInProgress()
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->isPhoneIdValidForRetry(I)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->isPhoneInVoiceCall(Lcom/android/internal/telephony/Phone;)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->isSimReady(I)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->isUiccProvisioned(I)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->make(ILandroid/content/Context;Landroid/os/Looper;)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->notifyDdsSwitchDone()
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->onDdsSwitchResponse(ILandroid/os/AsyncResult;)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->onEvaluate(ZLjava/lang/String;)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->phoneIdForRequest(Landroid/net/NetworkRequest;I)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->resetConnectFailureCount(I)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher;->sendRilCommands(I)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher$DdsSwitchState;-><init>(Ljava/lang/String;I)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher$DdsSwitchState;->valueOf(Ljava/lang/String;)
Lcom/android/internal/telephony/vendor/VendorPhoneSwitcher$DdsSwitchState;->values()
Lcom/android/internal/telephony/vendor/VendorServiceStateTracker;-><init>(Lcom/android/internal/telephony/GsmCdmaPhone;Lcom/android/internal/telephony/CommandsInterface;)
Lcom/android/internal/telephony/vendor/VendorServiceStateTracker;->handleMessage(Landroid/os/Message;)
Lcom/android/internal/telephony/vendor/VendorServiceStateTracker;->handlePollStateResultMessage(ILandroid/os/AsyncResult;)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;-><init>(Landroid/content/Context;)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->addSubInfo(Ljava/lang/String;Ljava/lang/String;II)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->addSubInfoRecord(Ljava/lang/String;I)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->getInstance()
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->getUserPrefDataSubIdFromDB()
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->handleDataPreference(I)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->init(Landroid/content/Context;)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->isNonSimAccountFound()
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->isRadioAvailableOnAllSubs()
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->isRadioInValidState()
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->isShuttingDown()
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->isSmsPromptEnabled()
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->isSubProvisioned(I)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->isUiccProvisioned(I)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->logd(Ljava/lang/String;)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->loge(Ljava/lang/String;)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->logi(Ljava/lang/String;)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->registerForAddSubscriptionRecord(Landroid/os/Handler;ILjava/lang/Object;)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->setSmsPromptEnabled(Z)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->setUiccApplicationsEnabled(ZI)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->subscriptionIdToPhoneAccountHandle(I)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->unregisterForAddSubscriptionRecord(Landroid/os/Handler;)
Lcom/android/internal/telephony/vendor/VendorSubscriptionController;->updateUserPreferences()
Lcom/android/internal/telephony/vendor/VendorSubscriptionInfoUpdater;-><init>(Landroid/os/Looper;Landroid/content/Context;[Lcom/android/internal/telephony/CommandsInterface;)
Lcom/android/internal/telephony/vendor/VendorSubscriptionInfoUpdater;->getInstance()
Lcom/android/internal/telephony/vendor/VendorSubscriptionInfoUpdater;->handleSimLoaded(I)
Lcom/android/internal/telephony/vendor/VendorSubscriptionInfoUpdater;->handleSimReady(I)
Lcom/android/internal/telephony/vendor/VendorSubscriptionInfoUpdater;->init(Landroid/os/Looper;Landroid/content/Context;[Lcom/android/internal/telephony/CommandsInterface;)
Lcom/android/internal/telephony/vendor/VendorSubscriptionInfoUpdater;->updateSubscriptionInfoByIccId(IZ)
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;-><init>(ILcom/android/internal/telephony/Phone;Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker$ResetEventListener;)
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->dispose()
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->log(Ljava/lang/String;)
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->notifyResetEvent(Ljava/lang/String;Z)
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->startResetEventTracker()
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker;->stopResetEventTracker()
Lcom/android/internal/telephony/vendor/dataconnection/VendorDataResetEventTracker$ResetEventListener;->onResetEvent(Z)
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;-><init>(Lcom/android/internal/telephony/Phone;I)
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->allowInitialAttachForOperator()
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->displayPopup(Ljava/lang/String;)
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->fillIccIdSet()
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->handlePdpRejectCauseFailure(Ljava/lang/String;)
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->handlePdpRejectCauseSuccess()
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->isMatchingPdpRejectCause(Ljava/lang/String;)
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->isWCDMA(I)
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->log(Ljava/lang/String;)
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->onDataSetupComplete(Lcom/android/internal/telephony/dataconnection/ApnContext;ZII)
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->onDataSetupCompleteError(Lcom/android/internal/telephony/dataconnection/ApnContext;I)
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->onVoiceCallEnded()
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->resetDataRejectCounter()
Lcom/android/internal/telephony/vendor/dataconnection/VendorDcTracker;->setupDataOnConnectableApn(Lcom/android/internal/telephony/dataconnection/ApnContext;Ljava/lang/String;Lcom/android/internal/telephony/dataconnection/DcTracker$RetryFailures;)
Lcom/android/internal/textservice/ISpellCheckerService;->getISpellCheckerSession(Ljava/lang/String;Lcom/android/internal/textservice/ISpellCheckerSessionListener;Landroid/os/Bundle;Lcom/android/internal/textservice/ISpellCheckerServiceCallback;)
Lcom/android/internal/textservice/ISpellCheckerService$Default;->getISpellCheckerSession(Ljava/lang/String;Lcom/android/internal/textservice/ISpellCheckerSessionListener;Landroid/os/Bundle;Lcom/android/internal/textservice/ISpellCheckerServiceCallback;)
Lcom/android/internal/textservice/ISpellCheckerService$Stub$Proxy;->getISpellCheckerSession(Ljava/lang/String;Lcom/android/internal/textservice/ISpellCheckerSessionListener;Landroid/os/Bundle;Lcom/android/internal/textservice/ISpellCheckerServiceCallback;)
Lcom/android/internal/textservice/ITextServicesManager;->getSpellCheckerService(ILjava/lang/String;Ljava/lang/String;Lcom/android/internal/textservice/ITextServicesSessionListener;Lcom/android/internal/textservice/ISpellCheckerSessionListener;Landroid/os/Bundle;)
Lcom/android/internal/textservice/ITextServicesManager$Default;->getSpellCheckerService(ILjava/lang/String;Ljava/lang/String;Lcom/android/internal/textservice/ITextServicesSessionListener;Lcom/android/internal/textservice/ISpellCheckerSessionListener;Landroid/os/Bundle;)
Lcom/android/internal/textservice/ITextServicesManager$Stub$Proxy;->getSpellCheckerService(ILjava/lang/String;Ljava/lang/String;Lcom/android/internal/textservice/ITextServicesSessionListener;Lcom/android/internal/textservice/ISpellCheckerSessionListener;Landroid/os/Bundle;)
Lcom/android/internal/util/FrameworkStatsLog;->write(ILandroid/os/WorkSource;Ljava/lang/String;IIIIZZZZZZZZ)
Lcom/android/internal/util/FrameworkStatsLog;->write(IZ)
Lcom/android/internal/util/FrameworkStatsLog;->write(IZLjava/lang/String;JIJ)
Lcom/android/internal/util/FrameworkStatsLog;->write(IIIZ)
Lcom/android/internal/util/FrameworkStatsLog;->write(IIIZIZIJZ)
Lcom/android/internal/util/FrameworkStatsLog;->write(IIIZIIIIZ)
Lcom/android/internal/util/FrameworkStatsLog;->write(IIIZIIIIZJ)
Lcom/android/internal/util/FrameworkStatsLog;->write(IIILjava/lang/String;III)
Lcom/android/internal/util/FrameworkStatsLog;->write(IIILjava/lang/String;IIIIJIIII)
Lcom/android/internal/util/FrameworkStatsLog;->write(IIIJZ)
Lcom/android/internal/util/FrameworkStatsLog;->write(IILjava/lang/String;ILjava/lang/String;ZJ)
Lcom/android/internal/util/FrameworkStatsLog;->write(IILjava/lang/String;ILjava/lang/String;Ljava/lang/String;ZJIIIIILjava/lang/String;II)
Lcom/android/internal/util/FrameworkStatsLog;->write(IILjava/lang/String;Ljava/lang/String;ILjava/lang/String;III)
Lcom/android/internal/util/FrameworkStatsLog;->write(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)
Lcom/android/internal/util/FrameworkStatsLog;->write(I[I[Ljava/lang/String;Ljava/lang/String;IIIIZZZZZZZZ)
Lcom/android/internal/util/FrameworkStatsLog;->write(IJILjava/lang/String;I)
Lcom/android/internal/util/FrameworkStatsLog;->write_non_chained(IILjava/lang/String;Ljava/lang/String;IIIIZZZZZZZZ)
Lcom/android/internal/util/IndentingPrintWriter;->maybeWriteIndent()
Lcom/android/internal/util/IndentingPrintWriter;->println()
Lcom/android/internal/util/IndentingPrintWriter;->write([CII)
Lcom/android/internal/util/IndentingPrintWriter;->write(I)
Lcom/android/internal/util/IndentingPrintWriter;->write(Ljava/lang/String;II)
Lcom/android/internal/util/LatencyTracker;-><init>(Landroid/content/Context;)
Lcom/android/internal/util/LatencyTracker;->reloadProperty()
Lcom/android/internal/util/LocalLog;->dump(Ljava/io/PrintWriter;Ljava/lang/String;Ljava/lang/String;)
Lcom/android/internal/util/LocationPermissionChecker;-><init>(Landroid/content/Context;)
Lcom/android/internal/util/LocationPermissionChecker;->checkCallersLocationPermission(Ljava/lang/String;Ljava/lang/String;IZLjava/lang/String;)
Lcom/android/internal/util/LocationPermissionChecker;->checkLocationPermission(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/internal/util/LocationPermissionChecker;->checkLocationPermissionInternal(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/internal/util/LocationPermissionChecker;->checkLocationPermissionWithDetailInfo(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/internal/util/LocationPermissionChecker;->checkPackage(ILjava/lang/String;)
Lcom/android/internal/util/LocationPermissionChecker;->enforceLocationPermission(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/internal/util/LocationPermissionChecker;->getCurrentUser()
Lcom/android/internal/util/LocationPermissionChecker;->getUidPermission(Ljava/lang/String;I)
Lcom/android/internal/util/LocationPermissionChecker;->isLocationModeEnabled()
Lcom/android/internal/util/LocationPermissionChecker;->isTargetSdkLessThan(Ljava/lang/String;II)
Lcom/android/internal/util/LocationPermissionChecker;->noteAppOpAllowed(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/internal/util/ProcFileReader;->parseAndConsumeLong(I)
Lcom/android/internal/util/ScreenRecordHelper;-><init>(Landroid/content/Context;)
Lcom/android/internal/util/ScreenRecordHelper;->launchRecordPrompt()
Lcom/android/internal/util/StatLogger;->dump(Lcom/android/internal/util/IndentingPrintWriter;)
Lcom/android/internal/util/XmlUtils;->readThisArrayMapXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;[Ljava/lang/String;Lcom/android/internal/util/XmlUtils$ReadMapCallback;)
Lcom/android/internal/util/XmlUtils;->readThisBooleanArrayXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;[Ljava/lang/String;)
Lcom/android/internal/util/XmlUtils;->readThisByteArrayXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;[Ljava/lang/String;)
Lcom/android/internal/util/XmlUtils;->readThisDoubleArrayXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;[Ljava/lang/String;)
Lcom/android/internal/util/XmlUtils;->readThisIntArrayXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;[Ljava/lang/String;)
Lcom/android/internal/util/XmlUtils;->readThisListXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;[Ljava/lang/String;)
Lcom/android/internal/util/XmlUtils;->readThisListXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;[Ljava/lang/String;Lcom/android/internal/util/XmlUtils$ReadMapCallback;Z)
Lcom/android/internal/util/XmlUtils;->readThisLongArrayXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;[Ljava/lang/String;)
Lcom/android/internal/util/XmlUtils;->readThisMapXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;[Ljava/lang/String;)
Lcom/android/internal/util/XmlUtils;->readThisMapXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;[Ljava/lang/String;Lcom/android/internal/util/XmlUtils$ReadMapCallback;)
Lcom/android/internal/util/XmlUtils;->readThisPrimitiveValueXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Lcom/android/internal/util/XmlUtils;->readThisSetXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;[Ljava/lang/String;)
Lcom/android/internal/util/XmlUtils;->readThisSetXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;[Ljava/lang/String;Lcom/android/internal/util/XmlUtils$ReadMapCallback;Z)
Lcom/android/internal/util/XmlUtils;->readThisStringArrayXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;[Ljava/lang/String;)
Lcom/android/internal/util/XmlUtils;->readThisValueXml(Lorg/xmlpull/v1/XmlPullParser;[Ljava/lang/String;Lcom/android/internal/util/XmlUtils$ReadMapCallback;Z)
Lcom/android/internal/util/XmlUtils;->readValueXml(Lorg/xmlpull/v1/XmlPullParser;[Ljava/lang/String;)
Lcom/android/internal/util/XmlUtils;->writeBooleanArrayXml([ZLjava/lang/String;Lorg/xmlpull/v1/XmlSerializer;)
Lcom/android/internal/util/XmlUtils;->writeByteArrayXml([BLjava/lang/String;Lorg/xmlpull/v1/XmlSerializer;)
Lcom/android/internal/util/XmlUtils;->writeDoubleArrayXml([DLjava/lang/String;Lorg/xmlpull/v1/XmlSerializer;)
Lcom/android/internal/util/XmlUtils;->writeIntArrayXml([ILjava/lang/String;Lorg/xmlpull/v1/XmlSerializer;)
Lcom/android/internal/util/XmlUtils;->writeListXml(Ljava/util/List;Ljava/lang/String;Lorg/xmlpull/v1/XmlSerializer;)
Lcom/android/internal/util/XmlUtils;->writeLongArrayXml([JLjava/lang/String;Lorg/xmlpull/v1/XmlSerializer;)
Lcom/android/internal/util/XmlUtils;->writeMapXml(Ljava/util/Map;Ljava/lang/String;Lorg/xmlpull/v1/XmlSerializer;)
Lcom/android/internal/util/XmlUtils;->writeMapXml(Ljava/util/Map;Ljava/lang/String;Lorg/xmlpull/v1/XmlSerializer;Lcom/android/internal/util/XmlUtils$WriteMapCallback;)
Lcom/android/internal/util/XmlUtils;->writeMapXml(Ljava/util/Map;Lorg/xmlpull/v1/XmlSerializer;Lcom/android/internal/util/XmlUtils$WriteMapCallback;)
Lcom/android/internal/util/XmlUtils;->writeSetXml(Ljava/util/Set;Ljava/lang/String;Lorg/xmlpull/v1/XmlSerializer;)
Lcom/android/internal/util/XmlUtils;->writeStringArrayXml([Ljava/lang/String;Ljava/lang/String;Lorg/xmlpull/v1/XmlSerializer;)
Lcom/android/internal/util/XmlUtils;->writeValueXml(Ljava/lang/Object;Ljava/lang/String;Lorg/xmlpull/v1/XmlSerializer;Lcom/android/internal/util/XmlUtils$WriteMapCallback;)
Lcom/android/internal/util/XmlUtils$ReadMapCallback;->readThisUnknownObjectXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Lcom/android/internal/util/XmlUtils$WriteMapCallback;->writeUnknownObject(Ljava/lang/Object;Ljava/lang/String;Lorg/xmlpull/v1/XmlSerializer;)
Lcom/android/internal/util/dump/DualDumpOutputStream;-><init>(Lcom/android/internal/util/IndentingPrintWriter;)
Lcom/android/internal/util/dump/DualDumpOutputStream$DumpField;->print(Lcom/android/internal/util/IndentingPrintWriter;Z)
Lcom/android/internal/util/dump/DualDumpOutputStream$DumpObject;->print(Lcom/android/internal/util/IndentingPrintWriter;Z)
Lcom/android/internal/util/dump/DualDumpOutputStream$Dumpable;->print(Lcom/android/internal/util/IndentingPrintWriter;Z)
Lcom/android/internal/util/function/pooled/PooledLambdaImpl;->acquire(Lcom/android/internal/util/function/pooled/PooledLambdaImpl$Pool;Ljava/lang/Object;IIILjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)
Lcom/android/internal/view/BaseIWindow;->dispatchPointerCaptureChanged(Z)
Lcom/android/internal/view/BaseIWindow;->dispatchSystemUiVisibilityChanged(IIII)
Lcom/android/internal/view/BaseIWindow;->insetsChanged(Landroid/view/InsetsState;)
Lcom/android/internal/view/BaseIWindow;->insetsControlChanged(Landroid/view/InsetsState;[Landroid/view/InsetsSourceControl;)
Lcom/android/internal/view/BaseIWindow;->requestScrollCapture(Landroid/view/IScrollCaptureController;)
Lcom/android/internal/view/BaseIWindow;->resized(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;ZLandroid/util/MergedConfiguration;Landroid/graphics/Rect;ZZILandroid/view/DisplayCutout$ParcelableWrapper;)
Lcom/android/internal/view/IDragAndDropPermissions;->takeTransient(Landroid/os/IBinder;)
Lcom/android/internal/view/IDragAndDropPermissions$Default;->takeTransient(Landroid/os/IBinder;)
Lcom/android/internal/view/IDragAndDropPermissions$Stub$Proxy;->takeTransient(Landroid/os/IBinder;)
Lcom/android/internal/view/IInputConnectionWrapper;-><init>(Landroid/os/Looper;Landroid/view/inputmethod/InputConnection;)
Lcom/android/internal/view/IInputMethod;->initializeInternal(Landroid/os/IBinder;ILcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;)
Lcom/android/internal/view/IInputMethod;->startInput(Landroid/os/IBinder;Lcom/android/internal/view/IInputContext;ILandroid/view/inputmethod/EditorInfo;ZZ)
Lcom/android/internal/view/IInputMethod$Default;->initializeInternal(Landroid/os/IBinder;ILcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;)
Lcom/android/internal/view/IInputMethod$Default;->startInput(Landroid/os/IBinder;Lcom/android/internal/view/IInputContext;ILandroid/view/inputmethod/EditorInfo;ZZ)
Lcom/android/internal/view/IInputMethod$Stub$Proxy;->initializeInternal(Landroid/os/IBinder;ILcom/android/internal/inputmethod/IInputMethodPrivilegedOperations;)
Lcom/android/internal/view/IInputMethod$Stub$Proxy;->startInput(Landroid/os/IBinder;Lcom/android/internal/view/IInputContext;ILandroid/view/inputmethod/EditorInfo;ZZ)
Lcom/android/internal/view/IInputMethodClient;->applyImeVisibility(Z)
Lcom/android/internal/view/IInputMethodClient;->reportPreRendered(Landroid/view/inputmethod/EditorInfo;)
Lcom/android/internal/view/IInputMethodClient;->setActive(ZZ)
Lcom/android/internal/view/IInputMethodClient;->updateActivityViewToScreenMatrix(I[F)
Lcom/android/internal/view/IInputMethodClient$Default;->applyImeVisibility(Z)
Lcom/android/internal/view/IInputMethodClient$Default;->reportPreRendered(Landroid/view/inputmethod/EditorInfo;)
Lcom/android/internal/view/IInputMethodClient$Default;->setActive(ZZ)
Lcom/android/internal/view/IInputMethodClient$Default;->updateActivityViewToScreenMatrix(I[F)
Lcom/android/internal/view/IInputMethodClient$Stub$Proxy;->applyImeVisibility(Z)
Lcom/android/internal/view/IInputMethodClient$Stub$Proxy;->reportPreRendered(Landroid/view/inputmethod/EditorInfo;)
Lcom/android/internal/view/IInputMethodClient$Stub$Proxy;->setActive(ZZ)
Lcom/android/internal/view/IInputMethodClient$Stub$Proxy;->updateActivityViewToScreenMatrix(I[F)
Lcom/android/internal/view/IInputMethodManager;->hideSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;)
Lcom/android/internal/view/IInputMethodManager;->reportActivityView(Lcom/android/internal/view/IInputMethodClient;I[F)
Lcom/android/internal/view/IInputMethodManager;->showSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;)
Lcom/android/internal/view/IInputMethodManager$Default;->hideSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;)
Lcom/android/internal/view/IInputMethodManager$Default;->reportActivityView(Lcom/android/internal/view/IInputMethodClient;I[F)
Lcom/android/internal/view/IInputMethodManager$Default;->showSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;)
Lcom/android/internal/view/IInputMethodManager$Stub$Proxy;->hideSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;)
Lcom/android/internal/view/IInputMethodManager$Stub$Proxy;->reportActivityView(Lcom/android/internal/view/IInputMethodClient;I[F)
Lcom/android/internal/view/IInputMethodManager$Stub$Proxy;->showSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;)
Lcom/android/internal/view/IInputMethodSession;->toggleSoftInput(II)
Lcom/android/internal/view/IInputMethodSession$Default;->toggleSoftInput(II)
Lcom/android/internal/view/IInputMethodSession$Stub$Proxy;->toggleSoftInput(II)
Lcom/android/internal/view/InputBindResult;-><init>(ILcom/android/internal/view/IInputMethodSession;Landroid/view/InputChannel;Ljava/lang/String;ILandroid/graphics/Matrix;)
Lcom/android/internal/view/InputBindResult;->getActivityViewToScreenMatrix()
Lcom/android/internal/view/InputConnectionWrapper;->getResultOrNull(Lcom/android/internal/inputmethod/CancellationGroup$Completable$Values;Ljava/lang/String;)
Lcom/android/internal/view/InputConnectionWrapper;->getResultOrZero(Lcom/android/internal/inputmethod/CancellationGroup$Completable$Int;Ljava/lang/String;)
Lcom/android/internal/view/InputConnectionWrapper;->logInternal(Ljava/lang/String;ZLjava/lang/Object;)
Lcom/android/internal/view/ScrollCaptureViewSupport;->createCallback(Landroid/view/View;Lcom/android/internal/view/ScrollCaptureViewHelper;)
Lcom/android/internal/view/ScrollCaptureViewSupport;->onScrollCaptureImageRequest(Landroid/view/ScrollCaptureSession;Landroid/graphics/Rect;)
Lcom/android/internal/view/ScrollCaptureViewSupport;->onScrollCaptureSearch(Ljava/util/function/Consumer;)
Lcom/android/internal/view/ScrollCaptureViewSupport;->onScrollCaptureStart(Landroid/view/ScrollCaptureSession;Ljava/lang/Runnable;)
Lcom/android/internal/view/ScrollCaptureViewSupport$ViewRenderer;->buildRootDisplayList(Landroid/view/View;Landroid/graphics/Rect;)
Lcom/android/internal/view/ScrollCaptureViewSupport$ViewRenderer;->renderFrame(Landroid/view/View;Landroid/graphics/Rect;Landroid/os/Handler;Ljava/lang/Runnable;)
Lcom/android/internal/widget/ConversationLayout;->animateViewForceHidden(Lcom/android/internal/widget/CachingIconView;Z)
Lcom/android/internal/widget/ConversationLayout;->createAvatarSymbol(Ljava/lang/CharSequence;Ljava/lang/String;I)
Lcom/android/internal/widget/ConversationLayout;->findColor(Ljava/lang/CharSequence;I)
Lcom/android/internal/widget/ConversationLayout;->findNameSplit(Ljava/lang/String;)
Lcom/android/internal/widget/EmphasizedNotificationButton;->setHasStroke(Z)
Lcom/android/internal/widget/FloatingToolbar;->isCurrentlyShowing(Ljava/util/List;)
Lcom/android/internal/widget/ILockSettings;->verifyCredential(Lcom/android/internal/widget/LockscreenCredential;JI)
Lcom/android/internal/widget/ILockSettings;->verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;JI)
Lcom/android/internal/widget/ILockSettings$Default;->verifyCredential(Lcom/android/internal/widget/LockscreenCredential;JI)
Lcom/android/internal/widget/ILockSettings$Default;->verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;JI)
Lcom/android/internal/widget/ILockSettings$Stub$Proxy;->verifyCredential(Lcom/android/internal/widget/LockscreenCredential;JI)
Lcom/android/internal/widget/ILockSettings$Stub$Proxy;->verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;JI)
Lcom/android/internal/widget/LocalImageResolver;->getBoundsOptionsForImage(Landroid/net/Uri;Landroid/content/Context;)
Lcom/android/internal/widget/LockPatternChecker;->verifyCredential(Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/widget/LockscreenCredential;JILcom/android/internal/widget/LockPatternChecker$OnVerifyCallback;)
Lcom/android/internal/widget/LockPatternChecker;->verifyTiedProfileChallenge(Lcom/android/internal/widget/LockPatternUtils;Lcom/android/internal/widget/LockscreenCredential;JILcom/android/internal/widget/LockPatternChecker$OnVerifyCallback;)
Lcom/android/internal/widget/LockPatternChecker$OnVerifyCallback;->onVerified([BI)
Lcom/android/internal/widget/LockPatternUtils;->getRequestedPasswordMinimumLetters(I)
Lcom/android/internal/widget/LockPatternUtils;->getRequestedPasswordMinimumLowerCase(I)
Lcom/android/internal/widget/LockPatternUtils;->getRequestedPasswordMinimumNonLetter(I)
Lcom/android/internal/widget/LockPatternUtils;->getRequestedPasswordMinimumNumeric(I)
Lcom/android/internal/widget/LockPatternUtils;->getRequestedPasswordMinimumSymbols(I)
Lcom/android/internal/widget/LockPatternUtils;->getRequestedPasswordMinimumUpperCase(I)
Lcom/android/internal/widget/LockPatternUtils;->getRequestedPasswordQuality(I)
Lcom/android/internal/widget/LockPatternUtils;->isDoNotAskCredentialsOnBootSet()
Lcom/android/internal/widget/LockPatternUtils;->isSeparateProfileChallengeAllowedToUnify(I)
Lcom/android/internal/widget/LockPatternUtils;->legacyPasswordToHash([BI)
Lcom/android/internal/widget/LockPatternUtils;->onPostPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)
Lcom/android/internal/widget/LockPatternUtils;->passwordToHistoryHash([B[BI)
Lcom/android/internal/widget/LockPatternUtils;->shouldEncryptWithCredentials(Z)
Lcom/android/internal/widget/LockPatternUtils;->updateEncryptionPassword(I[B)
Lcom/android/internal/widget/LockPatternUtils;->updateEncryptionPasswordIfNeeded(Lcom/android/internal/widget/LockscreenCredential;I)
Lcom/android/internal/widget/LockPatternUtils;->updatePasswordHistory(Lcom/android/internal/widget/LockscreenCredential;I)
Lcom/android/internal/widget/LockPatternUtils;->verifyCredential(Lcom/android/internal/widget/LockscreenCredential;JI)
Lcom/android/internal/widget/LockPatternUtils;->verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;JI)
Lcom/android/internal/widget/MediaNotificationView;->onLayout(ZIIII)
Lcom/android/internal/widget/MediaNotificationView;->onMeasure(II)
Lcom/android/internal/widget/MediaNotificationView;->resetHeaderIndention()
Lcom/android/internal/widget/MessagingLinearLayout;->setMessagingLayout(Lcom/android/internal/widget/IMessagingLayout;)
Lcom/android/internal/widget/NotificationExpandButton;->extendRectToMinTouchSize(Landroid/graphics/Rect;)
Lcom/android/internal/widget/NotificationExpandButton;->getOriginalNotificationColor()
Lcom/android/internal/widget/NotificationExpandButton;->setOriginalNotificationColor(I)
Lcom/android/internal/widget/VerifyCredentialResponse;-><init>()
Lcom/android/internal/widget/VerifyCredentialResponse;-><init>([B)
Lcom/android/internal/widget/VerifyCredentialResponse;-><init>(I)
Lcom/android/internal/widget/VerifyCredentialResponse;-><init>(II[B)
Lcom/android/internal/widget/VerifyCredentialResponse;-><init>(II[BLcom/android/internal/widget/VerifyCredentialResponse$1;)
Lcom/android/internal/widget/VerifyCredentialResponse;->getPayload()
Lcom/android/internal/widget/VerifyCredentialResponse;->setPayload([B)
Lcom/android/internal/widget/VerifyCredentialResponse;->setTimeout(I)
Lcom/android/internal/widget/ViewPager;->performDrag(F)
Lcom/android/net/IProxyService;->startPacSystem()
Lcom/android/net/IProxyService;->stopPacSystem()
Lcom/android/net/IProxyService$Default;->startPacSystem()
Lcom/android/net/IProxyService$Default;->stopPacSystem()
Lcom/android/net/IProxyService$Stub$Proxy;->startPacSystem()
Lcom/android/net/IProxyService$Stub$Proxy;->stopPacSystem()
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;-><init>()
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;-><init>([B)
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;-><init>(Lcom/android/net/module/util/nsd/DnsSdTxtRecord;)
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->contains(Ljava/lang/String;)
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->describeContents()
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->equals(Ljava/lang/Object;)
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->get(Ljava/lang/String;)
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->getKey(I)
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->getRawData()
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->getValue(I)
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->getValue(Ljava/lang/String;)
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->getValueAsString(I)
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->hashCode()
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->insert([B[BI)
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->keyCount()
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->remove(Ljava/lang/String;)
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->set(Ljava/lang/String;Ljava/lang/String;)
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->size()
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->toString()
Lcom/android/net/module/util/nsd/DnsSdTxtRecord;->writeToParcel(Landroid/os/Parcel;I)
Lcom/android/org/bouncycastle/asn1/ASN1ApplicationSpecific;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/ASN1BitString;->derForm([BI)
Lcom/android/org/bouncycastle/asn1/ASN1BitString;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/ASN1Boolean;-><init>(Z)
Lcom/android/org/bouncycastle/asn1/ASN1Boolean;-><init>([B)
Lcom/android/org/bouncycastle/asn1/ASN1Boolean;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/ASN1Enumerated;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/ASN1GeneralizedTime;->calculateGMTOffset()
Lcom/android/org/bouncycastle/asn1/ASN1GeneralizedTime;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/ASN1InputStream;->buildDEREncodableVector(Lcom/android/org/bouncycastle/asn1/DefiniteLengthInputStream;)
Lcom/android/org/bouncycastle/asn1/ASN1InputStream;->buildEncodableVector()
Lcom/android/org/bouncycastle/asn1/ASN1InputStream;->readLength(Ljava/io/InputStream;I)
Lcom/android/org/bouncycastle/asn1/ASN1Integer;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/ASN1Null;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/ASN1ObjectIdentifier;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/ASN1OctetString;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;->write([B)
Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;->writeEncoded(I[B)
Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;->writeEncoded(II[B)
Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;->writeImplicitObject(Lcom/android/org/bouncycastle/asn1/ASN1Primitive;)
Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;->writeNull()
Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;->writeTag(II)
Lcom/android/org/bouncycastle/asn1/ASN1OutputStream$ImplicitOutputStream;-><init>(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;Ljava/io/OutputStream;)
Lcom/android/org/bouncycastle/asn1/ASN1OutputStream$ImplicitOutputStream;->write(I)
Lcom/android/org/bouncycastle/asn1/ASN1Primitive;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/ASN1Sequence;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/ASN1Sequence;->getNext(Ljava/util/Enumeration;)
Lcom/android/org/bouncycastle/asn1/ASN1Set;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/ASN1Set;->getNext(Ljava/util/Enumeration;)
Lcom/android/org/bouncycastle/asn1/ASN1Set;->sort()
Lcom/android/org/bouncycastle/asn1/ASN1TaggedObject;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/ASN1TaggedObject;->isEmpty()
Lcom/android/org/bouncycastle/asn1/ASN1UTCTime;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/BERApplicationSpecific;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/BEROctetString;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/BEROctetString;->generateOcts()
Lcom/android/org/bouncycastle/asn1/BEROctetString;->getOctets()
Lcom/android/org/bouncycastle/asn1/BEROutputStream;->writeObject(Ljava/lang/Object;)
Lcom/android/org/bouncycastle/asn1/BERSequence;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/BERSet;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/BERTaggedObject;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERApplicationSpecific;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERBMPString;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERBitString;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERBitString;->toByteArray(B)
Lcom/android/org/bouncycastle/asn1/DERBoolean;-><init>(Z)
Lcom/android/org/bouncycastle/asn1/DERBoolean;-><init>([B)
Lcom/android/org/bouncycastle/asn1/DERExternal;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERGeneralString;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERGeneralizedTime;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERGraphicString;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERIA5String;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERNull;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERNumericString;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DEROctetString;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DEROctetString;->encode(Lcom/android/org/bouncycastle/asn1/DEROutputStream;[B)
Lcom/android/org/bouncycastle/asn1/DEROutputStream;->writeObject(Lcom/android/org/bouncycastle/asn1/ASN1Encodable;)
Lcom/android/org/bouncycastle/asn1/DERPrintableString;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERSequence;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERSet;-><init>(Lcom/android/org/bouncycastle/asn1/ASN1EncodableVector;Z)
Lcom/android/org/bouncycastle/asn1/DERSet;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERT61String;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERTaggedObject;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERUTF8String;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERUniversalString;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERVideotexString;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DERVisibleString;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DLApplicationSpecific;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DLBitString;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DLBitString;->toByteArray(B)
Lcom/android/org/bouncycastle/asn1/DLExternal;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DLOutputStream;->writeObject(Lcom/android/org/bouncycastle/asn1/ASN1Encodable;)
Lcom/android/org/bouncycastle/asn1/DLSequence;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DLSet;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DLTaggedObject;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/DefiniteLengthInputStream;-><init>(Ljava/io/InputStream;I)
Lcom/android/org/bouncycastle/asn1/LazyEncodedSequence;->encode(Lcom/android/org/bouncycastle/asn1/ASN1OutputStream;)
Lcom/android/org/bouncycastle/asn1/LazyEncodedSequence;->parse()
Lcom/android/org/bouncycastle/asn1/LimitedInputStream;->getRemaining()
Lcom/android/org/bouncycastle/asn1/x500/X500Name;->copy([Lcom/android/org/bouncycastle/asn1/x500/RDN;)
Lcom/android/org/bouncycastle/asn1/x500/style/IETFUtils;->bytesToString([B)
Lcom/android/org/bouncycastle/asn1/x9/ECNamedCurveTable;->fromDomainParameters(Lcom/android/org/bouncycastle/crypto/params/ECDomainParameters;)
Lcom/android/org/bouncycastle/asn1/x9/X9ECParameters;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECPoint;Ljava/math/BigInteger;)
Lcom/android/org/bouncycastle/asn1/x9/X9ECParameters;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECPoint;Ljava/math/BigInteger;Ljava/math/BigInteger;)
Lcom/android/org/bouncycastle/asn1/x9/X9ECParameters;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECPoint;Ljava/math/BigInteger;Ljava/math/BigInteger;[B)
Lcom/android/org/bouncycastle/asn1/x9/X9ECPoint;-><init>(Lcom/android/org/bouncycastle/math/ec/ECPoint;)
Lcom/android/org/bouncycastle/crypto/modes/AEADBlockCipher;->doFinal([BI)
Lcom/android/org/bouncycastle/crypto/modes/AEADBlockCipher;->getAlgorithmName()
Lcom/android/org/bouncycastle/crypto/modes/AEADBlockCipher;->getMac()
Lcom/android/org/bouncycastle/crypto/modes/AEADBlockCipher;->getOutputSize(I)
Lcom/android/org/bouncycastle/crypto/modes/AEADBlockCipher;->getUpdateOutputSize(I)
Lcom/android/org/bouncycastle/crypto/modes/AEADBlockCipher;->init(ZLcom/android/org/bouncycastle/crypto/CipherParameters;)
Lcom/android/org/bouncycastle/crypto/modes/AEADBlockCipher;->processAADByte(B)
Lcom/android/org/bouncycastle/crypto/modes/AEADBlockCipher;->processAADBytes([BII)
Lcom/android/org/bouncycastle/crypto/modes/AEADBlockCipher;->processByte(B[BI)
Lcom/android/org/bouncycastle/crypto/modes/AEADBlockCipher;->processBytes([BII[BI)
Lcom/android/org/bouncycastle/crypto/modes/AEADBlockCipher;->reset()
Lcom/android/org/bouncycastle/crypto/params/ECDomainParameters;->validate(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECPoint;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/ec/BCECPrivateKey;->calculateQ(Lcom/android/org/bouncycastle/jce/spec/ECParameterSpec;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/rsa/BCRSAPrivateKey;-><init>()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/rsa/BCRSAPrivateKey;-><init>(Lcom/android/org/bouncycastle/asn1/pkcs/RSAPrivateKey;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/rsa/KeyPairGeneratorSpi;-><init>(Ljava/lang/String;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/util/EC5Util;->convertPoint(Lcom/android/org/bouncycastle/math/ec/ECCurve;Ljava/security/spec/ECPoint;Z)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/util/EC5Util;->convertPoint(Ljava/security/spec/ECParameterSpec;Ljava/security/spec/ECPoint;Z)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/util/EC5Util;->convertSpec(Ljava/security/spec/ECParameterSpec;Z)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/util/ECUtil;->calculateQ(Ljava/math/BigInteger;Lcom/android/org/bouncycastle/jce/spec/ECParameterSpec;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->doVerify(Ljava/security/PublicKey;Ljava/security/Signature;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getCriticalExtensionOIDs()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getEncoded()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getExtensionOIDs(Z)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getExtensionValue(Ljava/lang/String;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getIssuerDN()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getIssuerX500Principal()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getNextUpdate()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getNonCriticalExtensionOIDs()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getRevokedCertificate(Ljava/math/BigInteger;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getRevokedCertificates()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getSigAlgName()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getSigAlgOID()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getSigAlgParams()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getSignature()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getTBSCertList()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getThisUpdate()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->getVersion()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->hasUnsupportedCriticalExtension()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->isIndirectCRL(Ljava/security/cert/X509CRL;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->isRevoked(Ljava/security/cert/Certificate;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->loadCRLEntries()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->toString()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->verify(Ljava/security/PublicKey;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->verify(Ljava/security/PublicKey;Ljava/lang/String;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject;->verify(Ljava/security/PublicKey;Ljava/security/Provider;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->checkSignature(Ljava/security/PublicKey;Ljava/security/Signature;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->checkValidity()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getAlternativeNames([B)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getBasicConstraints()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getCriticalExtensionOIDs()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getExtendedKeyUsage()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getExtensionBytes(Ljava/lang/String;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getExtensionValue(Ljava/lang/String;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getIssuerAlternativeNames()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getIssuerDN()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getIssuerUniqueID()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getKeyUsage()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getNonCriticalExtensionOIDs()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getNotAfter()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getNotBefore()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getSerialNumber()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getSigAlgName()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getSigAlgOID()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getSigAlgParams()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getSignature()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getSubjectAlternativeNames()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getSubjectDN()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getSubjectUniqueID()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getTBSCertificate()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->getVersion()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->hasUnsupportedCriticalExtension()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->isAlgIdEqual(Lcom/android/org/bouncycastle/asn1/x509/AlgorithmIdentifier;Lcom/android/org/bouncycastle/asn1/x509/AlgorithmIdentifier;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->toString()
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->verify(Ljava/security/PublicKey;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->verify(Ljava/security/PublicKey;Ljava/lang/String;)
Lcom/android/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject;->verify(Ljava/security/PublicKey;Ljava/security/Provider;)
Lcom/android/org/bouncycastle/jcajce/provider/symmetric/util/BCPBEKey;-><init>(Ljava/lang/String;Ljava/security/spec/KeySpec;Lcom/android/org/bouncycastle/crypto/CipherParameters;)
Lcom/android/org/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$AEADGenericBlockCipher;-><init>(Lcom/android/org/bouncycastle/crypto/modes/AEADBlockCipher;)
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;-><init>()
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;-><init>(Ljava/lang/String;Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;->closeQuietly(Ljava/io/Closeable;)
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;->isHex(Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;->isPubkeyHash(Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;->isPublicKeyBlackListed(Ljava/security/PublicKey;)
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;->isSerialNumberBlackListed(Ljava/math/BigInteger;)
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;->readBlacklist(Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;->readFileAsBytes(Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;->readFileAsString(Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;->readPublicKeyBlackList(Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/CertBlacklist;->readSerialBlackList(Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/CertPathValidatorUtilities;->checkCRLsNotEmpty(Ljava/util/Set;Ljava/lang/Object;)
Lcom/android/org/bouncycastle/jce/provider/CertPathValidatorUtilities;->findCertificates(Lcom/android/org/bouncycastle/jcajce/PKIXCertStoreSelector;Ljava/util/List;)
Lcom/android/org/bouncycastle/jce/provider/CertPathValidatorUtilities;->getAdditionalStoresFromCRLDistributionPoint(Lcom/android/org/bouncycastle/asn1/x509/CRLDistPoint;Ljava/util/Map;)
Lcom/android/org/bouncycastle/jce/provider/CertPathValidatorUtilities;->getCompleteCRLs(Lcom/android/org/bouncycastle/asn1/x509/DistributionPoint;Ljava/lang/Object;Ljava/util/Date;Lcom/android/org/bouncycastle/jcajce/PKIXExtendedParameters;)
Lcom/android/org/bouncycastle/jce/provider/CertPathValidatorUtilities;->getDeltaCRLs(Ljava/util/Date;Ljava/security/cert/X509CRL;Ljava/util/List;Ljava/util/List;)
Lcom/android/org/bouncycastle/jce/provider/CertPathValidatorUtilities;->getValidCertDateFromValidityModel(Lcom/android/org/bouncycastle/jcajce/PKIXExtendedParameters;Ljava/security/cert/CertPath;I)
Lcom/android/org/bouncycastle/jce/provider/CertPathValidatorUtilities;->getValidDate(Lcom/android/org/bouncycastle/jcajce/PKIXExtendedParameters;)
Lcom/android/org/bouncycastle/jce/provider/PKIXCRLUtil;->findCRLs(Lcom/android/org/bouncycastle/jcajce/PKIXCRLStoreSelector;Ljava/util/List;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->checkExcludedDN(Ljava/util/Set;Lcom/android/org/bouncycastle/asn1/ASN1Sequence;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->checkExcludedDNS(Ljava/util/Set;Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->checkExcludedEmail(Ljava/util/Set;Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->checkExcludedIP(Ljava/util/Set;[B)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->checkExcludedURI(Ljava/util/Set;Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->checkPermittedDN(Ljava/util/Set;Lcom/android/org/bouncycastle/asn1/ASN1Sequence;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->checkPermittedDNS(Ljava/util/Set;Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->checkPermittedEmail(Ljava/util/Set;Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->checkPermittedIP(Ljava/util/Set;[B)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->checkPermittedURI(Ljava/util/Set;Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->collectionsAreEqual(Ljava/util/Collection;Ljava/util/Collection;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->compareTo([B[B)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->emailIsConstrained(Ljava/lang/String;Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->equals(Ljava/lang/Object;Ljava/lang/Object;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->extractHostFromURL(Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->extractIPsAndSubnetMasks([B[B)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->extractNameAsString(Lcom/android/org/bouncycastle/asn1/x509/GeneralName;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->hashCollection(Ljava/util/Collection;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->intersectDN(Ljava/util/Set;Ljava/util/Set;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->intersectDNS(Ljava/util/Set;Ljava/util/Set;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->intersectEmail(Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->intersectEmail(Ljava/util/Set;Ljava/util/Set;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->intersectIP(Ljava/util/Set;Ljava/util/Set;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->intersectIPRange([B[B)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->intersectURI(Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->intersectURI(Ljava/util/Set;Ljava/util/Set;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->ipWithSubnetMask([B[B)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->isIPConstrained([B[B)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->isUriConstrained(Ljava/lang/String;Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->max([B[B)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->min([B[B)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->minMaxIPs([B[B[B[B)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->or([B[B)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->stringifyIP([B)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->stringifyIPCollection(Ljava/util/Set;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->unionDN(Ljava/util/Set;Lcom/android/org/bouncycastle/asn1/ASN1Sequence;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->unionDNS(Ljava/util/Set;Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->unionEmail(Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->unionEmail(Ljava/util/Set;Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->unionIP(Ljava/util/Set;[B)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->unionIPRange([B[B)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->unionURI(Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->unionURI(Ljava/util/Set;Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->withinDNSubtree(Lcom/android/org/bouncycastle/asn1/ASN1Sequence;Lcom/android/org/bouncycastle/asn1/ASN1Sequence;)
Lcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;->withinDomain(Ljava/lang/String;Ljava/lang/String;)
Lcom/android/org/bouncycastle/jce/provider/RFC3280CertPathUtilities;->checkCRL(Lcom/android/org/bouncycastle/asn1/x509/DistributionPoint;Lcom/android/org/bouncycastle/jcajce/PKIXExtendedParameters;Ljava/security/cert/X509Certificate;Ljava/util/Date;Ljava/security/cert/X509Certificate;Ljava/security/PublicKey;Lcom/android/org/bouncycastle/jce/provider/CertStatus;Lcom/android/org/bouncycastle/jce/provider/ReasonsMask;Ljava/util/List;Lcom/android/org/bouncycastle/jcajce/util/JcaJceHelper;)
Lcom/android/org/bouncycastle/jce/provider/RFC3280CertPathUtilities;->checkCRLs(Lcom/android/org/bouncycastle/jcajce/PKIXExtendedParameters;Ljava/security/cert/X509Certificate;Ljava/util/Date;Ljava/security/cert/X509Certificate;Ljava/security/PublicKey;Ljava/util/List;Lcom/android/org/bouncycastle/jcajce/util/JcaJceHelper;)
Lcom/android/org/bouncycastle/jce/provider/RFC3280CertPathUtilities;->processCRLA1i(Ljava/util/Date;Lcom/android/org/bouncycastle/jcajce/PKIXExtendedParameters;Ljava/security/cert/X509Certificate;Ljava/security/cert/X509CRL;)
Lcom/android/org/bouncycastle/jce/provider/RFC3280CertPathUtilities;->processCRLA1ii(Ljava/util/Date;Lcom/android/org/bouncycastle/jcajce/PKIXExtendedParameters;Ljava/security/cert/X509Certificate;Ljava/security/cert/X509CRL;)
Lcom/android/org/bouncycastle/jce/provider/RFC3280CertPathUtilities;->processCertA(Ljava/security/cert/CertPath;Lcom/android/org/bouncycastle/jcajce/PKIXExtendedParameters;ILjava/security/PublicKey;ZLcom/android/org/bouncycastle/asn1/x500/X500Name;Ljava/security/cert/X509Certificate;Lcom/android/org/bouncycastle/jcajce/util/JcaJceHelper;)
Lcom/android/org/bouncycastle/jce/provider/RFC3280CertPathUtilities;->processCertBC(Ljava/security/cert/CertPath;ILcom/android/org/bouncycastle/jce/provider/PKIXNameConstraintValidator;)
Lcom/android/org/bouncycastle/jce/provider/RFC3280CertPathUtilities;->processCertD(Ljava/security/cert/CertPath;ILjava/util/Set;Lcom/android/org/bouncycastle/jce/provider/PKIXPolicyNode;[Ljava/util/List;I)
Lcom/android/org/bouncycastle/math/ec/ECAlgorithms;->implShamirsTrickWNaf(Lcom/android/org/bouncycastle/math/ec/ECPoint;Ljava/math/BigInteger;Lcom/android/org/bouncycastle/math/ec/ECPointMap;Ljava/math/BigInteger;)
Lcom/android/org/bouncycastle/math/ec/ECAlgorithms;->implSumOfMultiplies([Lcom/android/org/bouncycastle/math/ec/ECPoint;Lcom/android/org/bouncycastle/math/ec/ECPointMap;[Ljava/math/BigInteger;)
Lcom/android/org/bouncycastle/math/ec/ECCurve;->createPoint(Ljava/math/BigInteger;Ljava/math/BigInteger;Z)
Lcom/android/org/bouncycastle/math/ec/ECCurve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/ECCurve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/ECCurve;->validatePoint(Ljava/math/BigInteger;Ljava/math/BigInteger;Z)
Lcom/android/org/bouncycastle/math/ec/ECCurve$AbstractF2m;->createPoint(Ljava/math/BigInteger;Ljava/math/BigInteger;Z)
Lcom/android/org/bouncycastle/math/ec/ECCurve$F2m;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/ECCurve$F2m;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/ECCurve$Fp;-><init>(Ljava/math/BigInteger;Ljava/math/BigInteger;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;)
Lcom/android/org/bouncycastle/math/ec/ECCurve$Fp;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/ECCurve$Fp;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/ECFieldElement$F2m;->checkFieldElements(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;)
Lcom/android/org/bouncycastle/math/ec/ECPoint;->getEncoded()
Lcom/android/org/bouncycastle/math/ec/ECPoint;->isCompressed()
Lcom/android/org/bouncycastle/math/ec/ECPoint$F2m;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/ECPoint$F2m;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/ECPoint$Fp;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/ECPoint$Fp;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/WNafL2RMultiplier;->getWindowSize(I)
Lcom/android/org/bouncycastle/math/ec/WNafUtil;->mapPointWithPrecomp(Lcom/android/org/bouncycastle/math/ec/ECPoint;IZLcom/android/org/bouncycastle/math/ec/ECPointMap;)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP192K1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP192K1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP192K1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP192K1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP192R1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP192R1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP192R1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP192R1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP224K1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP224K1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP224K1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP224K1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP224R1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP224R1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP224R1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP224R1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP256K1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP256K1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP256K1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP256K1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP256R1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP256R1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP256R1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP256R1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP384R1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP384R1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP384R1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP384R1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP521R1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP521R1Curve;->createRawPoint(Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP521R1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/custom/sec/SecP521R1Point;-><init>(Lcom/android/org/bouncycastle/math/ec/ECCurve;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Lcom/android/org/bouncycastle/math/ec/ECFieldElement;[Lcom/android/org/bouncycastle/math/ec/ECFieldElement;Z)
Lcom/android/org/bouncycastle/math/ec/endo/GLVTypeBEndomorphism;->calculateB(Ljava/math/BigInteger;Ljava/math/BigInteger;I)
Lcom/android/org/bouncycastle/math/ec/endo/GLVTypeBParameters;->checkVector([Ljava/math/BigInteger;Ljava/lang/String;)
Lcom/android/org/bouncycastle/math/ec/endo/GLVTypeBParameters;->getV1()
Lcom/android/org/bouncycastle/math/ec/endo/GLVTypeBParameters;->getV2()
Lcom/android/org/bouncycastle/math/raw/Mod;->getTrailingZeroes(I)
Lcom/android/org/bouncycastle/math/raw/Mod;->inversionResult([II[I[I)
Lcom/android/org/bouncycastle/math/raw/Mod;->inversionStep([I[II[II)
Lcom/android/org/bouncycastle/util/Properties;->fetchProperty(Ljava/lang/String;)
Lcom/android/org/conscrypt/AbstractConscryptSocket;->chooseClientAlias(Ljavax/net/ssl/X509KeyManager;[Ljavax/security/auth/x500/X500Principal;[Ljava/lang/String;)
Lcom/android/org/conscrypt/AbstractConscryptSocket;->chooseServerAlias(Ljavax/net/ssl/X509KeyManager;Ljava/lang/String;)
Lcom/android/org/conscrypt/CertBlacklist;->isPublicKeyBlackListed(Ljava/security/PublicKey;)
Lcom/android/org/conscrypt/CertBlacklist;->isSerialNumberBlackListed(Ljava/math/BigInteger;)
Lcom/android/org/conscrypt/CertBlacklistImpl;-><init>(Ljava/util/Set;Ljava/util/Set;)
Lcom/android/org/conscrypt/CertBlacklistImpl;->closeQuietly(Ljava/io/Closeable;)
Lcom/android/org/conscrypt/CertBlacklistImpl;->getDefault()
Lcom/android/org/conscrypt/CertBlacklistImpl;->isHex(Ljava/lang/String;)
Lcom/android/org/conscrypt/CertBlacklistImpl;->isPubkeyHash(Ljava/lang/String;)
Lcom/android/org/conscrypt/CertBlacklistImpl;->isPublicKeyBlackListed(Ljava/security/PublicKey;)
Lcom/android/org/conscrypt/CertBlacklistImpl;->isSerialNumberBlackListed(Ljava/math/BigInteger;)
Lcom/android/org/conscrypt/CertBlacklistImpl;->readBlacklist(Ljava/lang/String;)
Lcom/android/org/conscrypt/CertBlacklistImpl;->readFileAsBytes(Ljava/lang/String;)
Lcom/android/org/conscrypt/CertBlacklistImpl;->readFileAsString(Ljava/lang/String;)
Lcom/android/org/conscrypt/CertBlacklistImpl;->readPublicKeyBlackList(Ljava/lang/String;)
Lcom/android/org/conscrypt/CertBlacklistImpl;->readSerialBlackList(Ljava/lang/String;)
Lcom/android/org/conscrypt/CertBlacklistImpl;->toByteStrings([[B)
Lcom/android/org/conscrypt/CertBlacklistImpl;->toHex([B)
Lcom/android/org/conscrypt/CertBlacklistImpl$ByteString;-><init>([B)
Lcom/android/org/conscrypt/CertBlacklistImpl$ByteString;->equals(Ljava/lang/Object;)
Lcom/android/org/conscrypt/CertBlacklistImpl$ByteString;->hashCode()
Lcom/android/org/conscrypt/ConscryptHostnameVerifier;->verify(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)
Lcom/android/org/conscrypt/NativeCrypto;->ENGINE_SSL_read_BIO_heap(JLcom/android/org/conscrypt/NativeSsl;J[BIILcom/android/org/conscrypt/NativeCrypto$SSLHandshakeCallbacks;)
Lcom/android/org/conscrypt/NativeCrypto;->ENGINE_SSL_write_BIO_heap(JLcom/android/org/conscrypt/NativeSsl;J[BIILcom/android/org/conscrypt/NativeCrypto$SSLHandshakeCallbacks;)
Lcom/android/org/conscrypt/NativeCrypto;->X509_delete_ext(JLcom/android/org/conscrypt/OpenSSLX509Certificate;Ljava/lang/String;)
Lcom/android/org/conscrypt/NativeCrypto;->X509_dup(JLcom/android/org/conscrypt/OpenSSLX509Certificate;)
Lcom/android/org/conscrypt/NativeCrypto;->get_X509_cert_info_enc(JLcom/android/org/conscrypt/OpenSSLX509Certificate;)
Lcom/android/org/conscrypt/OpenSSLBIOSink;-><init>(Ljava/io/ByteArrayOutputStream;)
Lcom/android/org/conscrypt/OpenSSLBIOSink;->available()
Lcom/android/org/conscrypt/OpenSSLBIOSink;->create()
Lcom/android/org/conscrypt/OpenSSLBIOSink;->finalize()
Lcom/android/org/conscrypt/OpenSSLBIOSink;->getContext()
Lcom/android/org/conscrypt/OpenSSLBIOSink;->position()
Lcom/android/org/conscrypt/OpenSSLBIOSink;->reset()
Lcom/android/org/conscrypt/OpenSSLBIOSink;->skip(J)
Lcom/android/org/conscrypt/OpenSSLBIOSink;->toByteArray()
Lcom/android/org/conscrypt/OpenSSLBIOSource;-><init>(Lcom/android/org/conscrypt/OpenSSLBIOInputStream;)
Lcom/android/org/conscrypt/OpenSSLBIOSource;->finalize()
Lcom/android/org/conscrypt/OpenSSLBIOSource;->getContext()
Lcom/android/org/conscrypt/OpenSSLBIOSource;->release()
Lcom/android/org/conscrypt/OpenSSLBIOSource;->wrap(Ljava/nio/ByteBuffer;)
Lcom/android/org/conscrypt/OpenSSLBIOSource$ByteBufferInputStream;-><init>(Ljava/nio/ByteBuffer;)
Lcom/android/org/conscrypt/OpenSSLBIOSource$ByteBufferInputStream;->available()
Lcom/android/org/conscrypt/OpenSSLBIOSource$ByteBufferInputStream;->read()
Lcom/android/org/conscrypt/OpenSSLBIOSource$ByteBufferInputStream;->read([B)
Lcom/android/org/conscrypt/OpenSSLBIOSource$ByteBufferInputStream;->read([BII)
Lcom/android/org/conscrypt/OpenSSLBIOSource$ByteBufferInputStream;->reset()
Lcom/android/org/conscrypt/OpenSSLBIOSource$ByteBufferInputStream;->skip(J)
Lcom/android/org/conscrypt/OpenSSLECDHKeyAgreement;->checkCompleted()
Lcom/android/org/conscrypt/OpenSSLECDHKeyAgreement;->engineDoPhase(Ljava/security/Key;Z)
Lcom/android/org/conscrypt/OpenSSLECDHKeyAgreement;->engineGenerateSecret()
Lcom/android/org/conscrypt/OpenSSLECDHKeyAgreement;->engineGenerateSecret([BI)
Lcom/android/org/conscrypt/OpenSSLECDHKeyAgreement;->engineGenerateSecret(Ljava/lang/String;)
Lcom/android/org/conscrypt/OpenSSLECDHKeyAgreement;->engineInit(Ljava/security/Key;Ljava/security/SecureRandom;)
Lcom/android/org/conscrypt/OpenSSLECDHKeyAgreement;->engineInit(Ljava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)
Lcom/android/org/conscrypt/OpenSSLMac;-><init>(JI)
Lcom/android/org/conscrypt/OpenSSLMac;-><init>(JILcom/android/org/conscrypt/OpenSSLMac$1;)
Lcom/android/org/conscrypt/OpenSSLMac;->engineUpdate([BII)
Lcom/android/org/conscrypt/OpenSSLX509Certificate;->withDeletedExtension(Ljava/lang/String;)
Lcom/android/org/conscrypt/Platform;->newDefaultBlacklist()
Lcom/android/org/conscrypt/TrustManagerImpl;-><init>(Ljava/security/KeyStore;Lcom/android/org/conscrypt/CertPinManager;Lcom/android/org/conscrypt/ConscryptCertStore;Lcom/android/org/conscrypt/CertBlacklist;)
Lcom/android/org/conscrypt/TrustManagerImpl;-><init>(Ljava/security/KeyStore;Lcom/android/org/conscrypt/CertPinManager;Lcom/android/org/conscrypt/ConscryptCertStore;Lcom/android/org/conscrypt/CertBlacklist;Lcom/android/org/conscrypt/ct/CTLogStore;Lcom/android/org/conscrypt/ct/CTVerifier;Lcom/android/org/conscrypt/ct/CTPolicy;)
Lcom/android/org/conscrypt/TrustManagerImpl;->checkBlacklist(Ljava/security/cert/X509Certificate;)
Lcom/android/org/conscrypt/TrustManagerImpl$GlobalHostnameVerifierAdapter;-><init>(Ljava/lang/String;I)
Lcom/android/org/conscrypt/TrustManagerImpl$GlobalHostnameVerifierAdapter;->valueOf(Ljava/lang/String;)
Lcom/android/org/conscrypt/TrustManagerImpl$GlobalHostnameVerifierAdapter;->values()
Lcom/android/org/conscrypt/TrustManagerImpl$GlobalHostnameVerifierAdapter;->verify(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)
Lcom/android/server/AlarmClockMetadataProto;-><init>()
Lcom/android/server/AlarmManagerServiceDumpProto;-><init>()
Lcom/android/server/AlarmManagerServiceDumpProto$AlarmStat;-><init>(Lcom/android/server/AlarmManagerServiceDumpProto;)
Lcom/android/server/AlarmManagerServiceDumpProto$LastAllowWhileIdleDispatch;-><init>(Lcom/android/server/AlarmManagerServiceDumpProto;)
Lcom/android/server/AlarmManagerServiceDumpProto$TopAlarm;-><init>(Lcom/android/server/AlarmManagerServiceDumpProto;)
Lcom/android/server/AlarmProto;-><init>()
Lcom/android/server/AppWidgetBackupBridge;->restoreFinished(I)
Lcom/android/server/AppWidgetBackupBridge;->restoreStarting(I)
Lcom/android/server/BatchProto;-><init>()
Lcom/android/server/BootReceiver;-><init>()
Lcom/android/server/BootReceiver;->addAuditErrorsToDropBox(Landroid/os/DropBoxManager;Ljava/util/HashMap;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/server/BootReceiver;->addFileToDropBox(Landroid/os/DropBoxManager;Ljava/util/HashMap;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/server/BootReceiver;->addFileWithFootersToDropBox(Landroid/os/DropBoxManager;Ljava/util/HashMap;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/server/BootReceiver;->addFsckErrorsToDropBoxAndLogFsStat(Landroid/os/DropBoxManager;Ljava/util/HashMap;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/server/BootReceiver;->addLastkToDropBox(Landroid/os/DropBoxManager;Ljava/util/HashMap;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)
Lcom/android/server/BootReceiver;->addTextToDropBox(Landroid/os/DropBoxManager;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)
Lcom/android/server/BootReceiver;->fixFsckFsStat(Ljava/lang/String;I[Ljava/lang/String;II)
Lcom/android/server/BootReceiver;->getBootHeadersToLogAndUpdate()
Lcom/android/server/BootReceiver;->getCurrentBootHeaders()
Lcom/android/server/BootReceiver;->getPreviousBootHeaders()
Lcom/android/server/BootReceiver;->handleFsckFsStat(Ljava/util/regex/Matcher;[Ljava/lang/String;II)
Lcom/android/server/BootReceiver;->logBootEvents(Landroid/content/Context;)
Lcom/android/server/BootReceiver;->logFsMountTime()
Lcom/android/server/BootReceiver;->logFsShutdownTime()
Lcom/android/server/BootReceiver;->logStatsdShutdownAtom(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Lcom/android/server/BootReceiver;->logSystemServerShutdownTimeMetrics()
Lcom/android/server/BootReceiver;->logTronShutdownMetric(Ljava/lang/String;Ljava/lang/String;)
Lcom/android/server/BootReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)
Lcom/android/server/BootReceiver;->readTimestamps()
Lcom/android/server/BootReceiver;->removeOldUpdatePackages(Landroid/content/Context;)
Lcom/android/server/BootReceiver;->writeTimestamps(Ljava/util/HashMap;)
Lcom/android/server/BroadcastStatsProto;-><init>()
Lcom/android/server/ConstantsProto;-><init>()
Lcom/android/server/DeviceIdleInternal;->addPowerSaveTempWhitelistApp(ILjava/lang/String;JIZLjava/lang/String;)
Lcom/android/server/DeviceIdleInternal;->addPowerSaveTempWhitelistAppDirect(IJZLjava/lang/String;)
Lcom/android/server/DeviceIdleInternal;->getNotificationWhitelistDuration()
Lcom/android/server/FilterStatsProto;-><init>()
Lcom/android/server/IdleDispatchEntryProto;-><init>()
Lcom/android/server/InFlightProto;-><init>()
Lcom/android/server/PrebakedProto;-><init>()
Lcom/android/server/SystemConfig;->getSystemUserBlacklistedApps()
Lcom/android/server/SystemConfig;->getSystemUserWhitelistedApps()
Lcom/android/server/VibrationEffectProto;-><init>()
Lcom/android/server/VibrationProto;-><init>()
Lcom/android/server/VibratorServiceDumpProto;-><init>()
Lcom/android/server/WakeupEventProto;-><init>()
Lcom/android/server/WaveformProto;-><init>()
Lcom/android/server/WidgetBackupProvider;->restoreFinished(I)
Lcom/android/server/WidgetBackupProvider;->restoreStarting(I)
Lcom/android/server/backup/PreferredActivityBackupHelper;-><init>()
Lcom/android/server/job/JobSchedulerInternal;->cancelJobsForUid(ILjava/lang/String;)
Lcom/android/server/net/BaseNetworkObserver;->interfaceClassDataActivityChanged(Ljava/lang/String;ZJ)
Lcom/android/server/protolog/ProtoLogFileProto;-><init>()
Lcom/android/server/protolog/ProtoLogMessage;-><init>()
Lcom/android/server/role/RoleManagerServiceDumpProto;-><init>()
Lcom/android/server/role/RoleProto;-><init>()
Lcom/android/server/role/RoleUserStateProto;-><init>()
Lcom/android/server/usage/AppStandbyInternal;->dumpUser(Lcom/android/internal/util/IndentingPrintWriter;ILjava/util/List;)
Lcom/android/server/usage/AppStandbyInternal;->flushDurationsToDisk()
Lcom/android/server/usage/AppStandbyInternal;->flushToDisk(I)
Lcom/android/server/usage/AppStandbyInternal;->newAppStandbyController(Ljava/lang/ClassLoader;Landroid/content/Context;Landroid/os/Looper;)
Lcom/android/server/usage/AppStandbyInternal;->reportEvent(Landroid/app/usage/UsageEvents$Event;JI)
Lcom/android/server/wm/DockedStackDividerControllerProto;-><init>()
Lcom/android/server/wm/PinnedStackControllerProto;-><init>()
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;-><init>(Landroid/os/Parcel;Ljava/lang/ClassLoader;)
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;-><init>(Ljava/util/List;)
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;->getList()
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;->readCreator(Landroid/os/Parcelable$Creator;Landroid/os/Parcel;Ljava/lang/ClassLoader;)
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;->readParcelableCreator(Landroid/os/Parcel;Ljava/lang/ClassLoader;)
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;->setInlineCountLimit(I)
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;->verifySameType(Ljava/lang/Class;Ljava/lang/Class;)
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;->writeElement(Ljava/lang/Object;Landroid/os/Parcel;I)
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;->writeParcelableCreator(Ljava/lang/Object;Landroid/os/Parcel;)
Lcom/android/wifi/x/android/content/pm/BaseParceledListSlice;->writeToParcel(Landroid/os/Parcel;I)
Lcom/android/wifi/x/android/content/pm/ParceledListSlice;-><init>(Landroid/os/Parcel;Ljava/lang/ClassLoader;)
Lcom/android/wifi/x/android/content/pm/ParceledListSlice;-><init>(Landroid/os/Parcel;Ljava/lang/ClassLoader;Lcom/android/wifi/x/android/content/pm/ParceledListSlice$1;)
Lcom/android/wifi/x/android/content/pm/ParceledListSlice;-><init>(Ljava/util/List;)
Lcom/android/wifi/x/android/content/pm/ParceledListSlice;->describeContents()
Lcom/android/wifi/x/android/content/pm/ParceledListSlice;->emptyList()
Lcom/android/wifi/x/android/content/pm/ParceledListSlice;->getList()
Lcom/android/wifi/x/android/content/pm/ParceledListSlice;->readParcelableCreator(Landroid/os/Parcel;Ljava/lang/ClassLoader;)
Lcom/android/wifi/x/android/content/pm/ParceledListSlice;->setInlineCountLimit(I)
Lcom/android/wifi/x/android/content/pm/ParceledListSlice;->writeElement(Landroid/os/Parcelable;Landroid/os/Parcel;I)
Lcom/android/wifi/x/android/content/pm/ParceledListSlice;->writeElement(Ljava/lang/Object;Landroid/os/Parcel;I)
Lcom/android/wifi/x/android/content/pm/ParceledListSlice;->writeParcelableCreator(Landroid/os/Parcelable;Landroid/os/Parcel;)
Lcom/android/wifi/x/android/content/pm/ParceledListSlice;->writeParcelableCreator(Ljava/lang/Object;Landroid/os/Parcel;)
Lcom/android/wifi/x/android/content/pm/ParceledListSlice;->writeToParcel(Landroid/os/Parcel;I)
Lcom/android/wifi/x/android/net/shared/Inet4AddressUtils;-><init>()
Lcom/android/wifi/x/android/net/shared/Inet4AddressUtils;->getBroadcastAddress(Ljava/net/Inet4Address;I)
Lcom/android/wifi/x/android/net/shared/Inet4AddressUtils;->getImplicitNetmask(Ljava/net/Inet4Address;)
Lcom/android/wifi/x/android/net/shared/Inet4AddressUtils;->getPrefixMaskAsInet4Address(I)
Lcom/android/wifi/x/android/net/shared/Inet4AddressUtils;->inet4AddressToIntHTH(Ljava/net/Inet4Address;)
Lcom/android/wifi/x/android/net/shared/Inet4AddressUtils;->inet4AddressToIntHTL(Ljava/net/Inet4Address;)
Lcom/android/wifi/x/android/net/shared/Inet4AddressUtils;->intToInet4AddressHTH(I)
Lcom/android/wifi/x/android/net/shared/Inet4AddressUtils;->intToInet4AddressHTL(I)
Lcom/android/wifi/x/android/net/shared/Inet4AddressUtils;->netmaskToPrefixLength(Ljava/net/Inet4Address;)
Lcom/android/wifi/x/android/net/shared/Inet4AddressUtils;->prefixLengthToV4NetmaskIntHTH(I)
Lcom/android/wifi/x/android/net/shared/Inet4AddressUtils;->prefixLengthToV4NetmaskIntHTL(I)
Lcom/android/wifi/x/android/net/util/MacAddressUtils;-><init>()
Lcom/android/wifi/x/android/net/util/MacAddressUtils;->byteAddrFromLongAddr(J)
Lcom/android/wifi/x/android/net/util/MacAddressUtils;->createRandomUnicastAddress()
Lcom/android/wifi/x/android/net/util/MacAddressUtils;->createRandomUnicastAddress(Landroid/net/MacAddress;Ljava/util/Random;)
Lcom/android/wifi/x/android/net/util/MacAddressUtils;->isMacAddress([B)
Lcom/android/wifi/x/android/net/util/MacAddressUtils;->isMulticastAddress(Landroid/net/MacAddress;)
Lcom/android/wifi/x/android/net/util/MacAddressUtils;->longAddrFromByteAddr([B)
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;-><init>()
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;-><init>([B)
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;-><init>(Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;)
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->contains(Ljava/lang/String;)
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->describeContents()
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->equals(Ljava/lang/Object;)
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->get(Ljava/lang/String;)
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->getKey(I)
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->getRawData()
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->getValue(I)
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->getValue(Ljava/lang/String;)
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->getValueAsString(I)
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->hashCode()
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->insert([B[BI)
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->keyCount()
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->remove(Ljava/lang/String;)
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->set(Ljava/lang/String;Ljava/lang/String;)
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->size()
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->toString()
Lcom/android/wifi/x/android/net/util/nsd/DnsSdTxtRecord;->writeToParcel(Landroid/os/Parcel;I)
Ldalvik/system/DalvikLogHandler;->publish(Ljava/util/logging/Logger;Ljava/lang/String;Ljava/util/logging/Level;Ljava/lang/String;)
Ldalvik/system/DalvikLogging;-><init>()
Ldalvik/system/DalvikLogging;->loggerNameToTag(Ljava/lang/String;)
Ldalvik/system/DexFile;->getClassLoaderContext(Ljava/lang/ClassLoader;[Ldalvik/system/DexPathList$Element;)
Ldalvik/system/DexFile;->verifyInBackground(Ljava/lang/ClassLoader;Ljava/lang/String;)
Ldalvik/system/DexFile;->verifyInBackgroundNative(Ljava/lang/Object;Ljava/lang/ClassLoader;Ljava/lang/String;)
Ldalvik/system/RuntimeHooks;->getThreadPrioritySetter()
Ldalvik/system/RuntimeHooks;->setThreadPrioritySetter(Ldalvik/system/ThreadPrioritySetter;)
Ldalvik/system/ThreadPrioritySetter;->setPriority(II)
Ldalvik/system/VMDebug;->attachAgent(Ljava/lang/String;)
Ldalvik/system/VMDebug;->cacheRegisterMap(Ljava/lang/String;)
Ldalvik/system/VMDebug;->crash()
Ldalvik/system/VMDebug;->getHeapSpaceStats([J)
Ldalvik/system/VMDebug;->infopoint(I)
Ldalvik/system/VMDebug;->startClassPrep()
Ldalvik/system/VMDebug;->startEmulatorTracing()
Ldalvik/system/VMDebug;->startGC()
Ldalvik/system/VMDebug;->startMethodTracing()
Ldalvik/system/VMDebug;->startMethodTracing(Ljava/lang/String;Ljava/io/FileDescriptor;IIZI)
Ldalvik/system/VMDebug;->stopEmulatorTracing()
Ldalvik/system/VMRuntime;->concurrentGC()
Ldalvik/system/VMRuntime;->didPruneDalvikCache()
Ldalvik/system/VMRuntime;->disableJitCompilation()
Ldalvik/system/VMRuntime;->doNotInitializeInAot()
Ldalvik/system/VMRuntime;->hasBootImageSpaces()
Ldalvik/system/VMRuntime;->registerAppInfo(Ljava/lang/String;[Ljava/lang/String;)
Ldalvik/system/VMRuntime;->startJitCompilation()
Ljava/lang/Thread;->getNativeTid()
Ljava/math/BigDecimal;-><init>(II)
Ljava/math/BigDecimal;-><init>(JI)
Ljava/math/BigDecimal;->addAndMult10(Ljava/math/BigDecimal;Ljava/math/BigDecimal;I)
Ljava/math/BigDecimal;->approxPrecision()
Ljava/math/BigDecimal;->bitLength(I)
Ljava/math/BigDecimal;->bitLength(J)
Ljava/math/BigDecimal;->compareAbsoluteValues(JJ)
Ljava/math/BigDecimal;->compareForRounding(JJ)
Ljava/math/BigDecimal;->decimalDigitsInLong(J)
Ljava/math/BigDecimal;->divideBigIntegers(Ljava/math/BigInteger;Ljava/math/BigInteger;ILjava/math/RoundingMode;)
Ljava/math/BigDecimal;->dividePrimitiveLongs(JJILjava/math/RoundingMode;)
Ljava/math/BigDecimal;->getUnscaledValue()
Ljava/math/BigDecimal;->inplaceRound(Ljava/math/MathContext;)
Ljava/math/BigDecimal;->isZero()
Ljava/math/BigDecimal;->movePoint(J)
Ljava/math/BigDecimal;->roundingBehavior(IILjava/math/RoundingMode;)
Ljava/math/BigDecimal;->safeLongToInt(J)
Ljava/math/BigDecimal;->setUnscaledValue(Ljava/math/BigInteger;)
Ljava/math/BigDecimal;->smallRound(Ljava/math/MathContext;I)
Ljava/math/BigDecimal;->valueExact(I)
Ljava/math/BigDecimal;->zeroScaledBy(J)
Ljava/math/BigInt;-><init>()
Ljava/math/BigInt;->add(Ljava/math/BigInt;)
Ljava/math/BigInt;->addPositiveInt(I)
Ljava/math/BigInt;->addition(Ljava/math/BigInt;Ljava/math/BigInt;)
Ljava/math/BigInt;->bigEndianMagnitude()
Ljava/math/BigInt;->bigExp(Ljava/math/BigInt;Ljava/math/BigInt;)
Ljava/math/BigInt;->bitLength()
Ljava/math/BigInt;->checkString(Ljava/lang/String;I)
Ljava/math/BigInt;->cmp(Ljava/math/BigInt;Ljava/math/BigInt;)
Ljava/math/BigInt;->copy()
Ljava/math/BigInt;->decString()
Ljava/math/BigInt;->division(Ljava/math/BigInt;Ljava/math/BigInt;Ljava/math/BigInt;Ljava/math/BigInt;)
Ljava/math/BigInt;->exp(Ljava/math/BigInt;I)
Ljava/math/BigInt;->gcd(Ljava/math/BigInt;Ljava/math/BigInt;)
Ljava/math/BigInt;->generatePrimeDefault(I)
Ljava/math/BigInt;->hasNativeBignum()
Ljava/math/BigInt;->hexString()
Ljava/math/BigInt;->invalidBigInteger(Ljava/lang/String;)
Ljava/math/BigInt;->isBitSet(I)
Ljava/math/BigInt;->isPrime(I)
Ljava/math/BigInt;->littleEndianIntsMagnitude()
Ljava/math/BigInt;->longInt()
Ljava/math/BigInt;->makeValid()
Ljava/math/BigInt;->modExp(Ljava/math/BigInt;Ljava/math/BigInt;Ljava/math/BigInt;)
Ljava/math/BigInt;->modInverse(Ljava/math/BigInt;Ljava/math/BigInt;)
Ljava/math/BigInt;->modulus(Ljava/math/BigInt;Ljava/math/BigInt;)
Ljava/math/BigInt;->multiplyByPositiveInt(I)
Ljava/math/BigInt;->newBigInt()
Ljava/math/BigInt;->product(Ljava/math/BigInt;Ljava/math/BigInt;)
Ljava/math/BigInt;->putBigEndian([BZ)
Ljava/math/BigInt;->putBigEndianTwosComplement([B)
Ljava/math/BigInt;->putCopy(Ljava/math/BigInt;)
Ljava/math/BigInt;->putDecString(Ljava/lang/String;)
Ljava/math/BigInt;->putHexString(Ljava/lang/String;)
Ljava/math/BigInt;->putLittleEndianInts([IZ)
Ljava/math/BigInt;->putLongInt(J)
Ljava/math/BigInt;->putULongInt(JZ)
Ljava/math/BigInt;->remainderByPositiveInt(Ljava/math/BigInt;I)
Ljava/math/BigInt;->setSign(I)
Ljava/math/BigInt;->shift(I)
Ljava/math/BigInt;->shift(Ljava/math/BigInt;I)
Ljava/math/BigInt;->sign()
Ljava/math/BigInt;->subtraction(Ljava/math/BigInt;Ljava/math/BigInt;)
Ljava/math/BigInt;->toAscii(Ljava/lang/String;I)
Ljava/math/BigInt;->toString()
Ljava/math/BigInt;->twosCompFitsIntoBytes(I)
Ljava/math/BigInteger;-><init>(II[I)
Ljava/math/BigInteger;-><init>(IJ)
Ljava/math/BigInteger;-><init>(Ljava/math/BigInt;)
Ljava/math/BigInteger;->copy()
Ljava/math/BigInteger;->getBigInt()
Ljava/math/BigInteger;->getFirstNonzeroDigit()
Ljava/math/BigInteger;->inplaceAdd([III)
Ljava/math/BigInteger;->isSmallPrime(I)
Ljava/math/BigInteger;->multiplyByInt([I[III)
Ljava/math/BigInteger;->parseFromString(Ljava/math/BigInteger;Ljava/lang/String;I)
Ljava/math/BigInteger;->prepareJavaRepresentation()
Ljava/math/BigInteger;->setBigInt(Ljava/math/BigInt;)
Ljava/math/BigInteger;->setJavaRepresentation(II[I)
Ljava/math/BigInteger;->shiftLeftOneBit()
Ljava/math/BigInteger;->twosComplement()
Ljava/math/BitLevel;-><init>()
Ljava/math/BitLevel;->bitCount(Ljava/math/BigInteger;)
Ljava/math/BitLevel;->bitLength(Ljava/math/BigInteger;)
Ljava/math/BitLevel;->flipBit(Ljava/math/BigInteger;I)
Ljava/math/BitLevel;->nonZeroDroppedBits(I[I)
Ljava/math/BitLevel;->shiftLeftOneBit([I[II)
Ljava/math/BitLevel;->shiftLeftOneBit(Ljava/math/BigInteger;)
Ljava/math/BitLevel;->shiftRight([II[III)
Ljava/math/BitLevel;->shiftRight(Ljava/math/BigInteger;I)
Ljava/math/BitLevel;->testBit(Ljava/math/BigInteger;I)
Ljava/math/Conversion;-><init>()
Ljava/math/Conversion;->bigInteger2Double(Ljava/math/BigInteger;)
Ljava/math/Conversion;->bigInteger2String(Ljava/math/BigInteger;I)
Ljava/math/Conversion;->divideLongByBillion(J)
Ljava/math/Conversion;->toDecimalScaledString(Ljava/math/BigInteger;I)
Ljava/math/Conversion;->toDecimalScaledString(JI)
Ljava/math/Division;-><init>()
Ljava/math/Division;->divideArrayByInt([I[III)
Ljava/math/Logical;-><init>()
Ljava/math/Logical;->and(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->andDiffSigns(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->andNegative(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->andNot(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->andNotNegative(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->andNotNegativePositive(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->andNotPositive(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->andNotPositiveNegative(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->andPositive(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->not(Ljava/math/BigInteger;)
Ljava/math/Logical;->or(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->orDiffSigns(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->orNegative(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->orPositive(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->xor(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->xorDiffSigns(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->xorNegative(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/Logical;->xorPositive(Ljava/math/BigInteger;Ljava/math/BigInteger;)
Ljava/math/MathContext;->checkValid()
Ljava/math/MathContext;->invalidMathContext(Ljava/lang/String;Ljava/lang/String;)
Ljava/math/Multiplication;-><init>()
Ljava/math/Multiplication;->multiplyByFivePow(Ljava/math/BigInteger;I)
Ljava/math/Multiplication;->multiplyByPositiveInt(Ljava/math/BigInteger;I)
Ljava/math/Multiplication;->multiplyByTenPow(Ljava/math/BigInteger;J)
Ljava/math/Multiplication;->powerOf10(J)
Ljava/math/NativeBN;-><init>()
Ljava/math/NativeBN;->BN_add(JJJ)
Ljava/math/NativeBN;->BN_add_word(JI)
Ljava/math/NativeBN;->BN_bin2bn([BIZJ)
Ljava/math/NativeBN;->BN_bn2bin(J)
Ljava/math/NativeBN;->BN_bn2dec(J)
Ljava/math/NativeBN;->BN_bn2hex(J)
Ljava/math/NativeBN;->BN_cmp(JJ)
Ljava/math/NativeBN;->BN_copy(JJ)
Ljava/math/NativeBN;->BN_dec2bn(JLjava/lang/String;)
Ljava/math/NativeBN;->BN_div(JJJJ)
Ljava/math/NativeBN;->BN_exp(JJJ)
Ljava/math/NativeBN;->BN_free(J)
Ljava/math/NativeBN;->BN_gcd(JJJ)
Ljava/math/NativeBN;->BN_generate_prime_ex(JIZJJ)
Ljava/math/NativeBN;->BN_hex2bn(JLjava/lang/String;)
Ljava/math/NativeBN;->BN_is_bit_set(JI)
Ljava/math/NativeBN;->BN_mod_exp(JJJJ)
Ljava/math/NativeBN;->BN_mod_inverse(JJJ)
Ljava/math/NativeBN;->BN_mod_word(JI)
Ljava/math/NativeBN;->BN_mul(JJJ)
Ljava/math/NativeBN;->BN_mul_word(JI)
Ljava/math/NativeBN;->BN_new()
Ljava/math/NativeBN;->BN_nnmod(JJJ)
Ljava/math/NativeBN;->BN_primality_test(JIZ)
Ljava/math/NativeBN;->BN_set_negative(JI)
Ljava/math/NativeBN;->BN_shift(JJI)
Ljava/math/NativeBN;->BN_sub(JJJ)
Ljava/math/NativeBN;->bitLength(J)
Ljava/math/NativeBN;->bn2litEndInts(J)
Ljava/math/NativeBN;->getNativeFinalizer()
Ljava/math/NativeBN;->litEndInts2bn([IIZJ)
Ljava/math/NativeBN;->longInt(J)
Ljava/math/NativeBN;->putLongInt(JJ)
Ljava/math/NativeBN;->putULongInt(JJZ)
Ljava/math/NativeBN;->sign(J)
Ljava/math/NativeBN;->twosComp2bn([BIJ)
Ljava/math/Primality;-><init>()
Ljava/math/Primality;->nextProbablePrime(Ljava/math/BigInteger;)
Ljava/text/Normalizer$Form;-><init>(Ljava/lang/String;ILandroid/icu/text/Normalizer$Mode;)
Ljava/time/format/DateTimeTextProvider;->extractQuarters(Landroid/icu/impl/ICUResourceBundle;Ljava/lang/String;)
Ljava/time/zone/IcuZoneRulesProvider;->millisToOffset(I)
Ljava/time/zone/IcuZoneRulesProvider;->toZoneOffsetTransitionRule(Landroid/icu/util/AnnualTimeZoneRule;I)
Ljava/time/zone/IcuZoneRulesProvider;->verify(ZLjava/lang/String;Ljava/lang/String;)
Ljava/util/ImmutableCollections$AbstractImmutableList;->add(Ljava/lang/Object;)
Ljava/util/ImmutableCollections$AbstractImmutableList;->addAll(Ljava/util/Collection;)
Ljava/util/ImmutableCollections$AbstractImmutableList;->clear()
Ljava/util/ImmutableCollections$AbstractImmutableList;->remove(Ljava/lang/Object;)
Ljava/util/ImmutableCollections$AbstractImmutableList;->removeAll(Ljava/util/Collection;)
Ljava/util/ImmutableCollections$AbstractImmutableList;->removeIf(Ljava/util/function/Predicate;)
Ljava/util/ImmutableCollections$AbstractImmutableList;->retainAll(Ljava/util/Collection;)
Ljava/util/ImmutableCollections$List0;-><init>()
Ljava/util/ImmutableCollections$List0;->contains(Ljava/lang/Object;)
Ljava/util/ImmutableCollections$List0;->containsAll(Ljava/util/Collection;)
Ljava/util/ImmutableCollections$List0;->get(I)
Ljava/util/ImmutableCollections$List0;->hashCode()
Ljava/util/ImmutableCollections$List0;->instance()
Ljava/util/ImmutableCollections$List0;->iterator()
Ljava/util/ImmutableCollections$List0;->readObject(Ljava/io/ObjectInputStream;)
Ljava/util/ImmutableCollections$List0;->size()
Ljava/util/ImmutableCollections$List0;->writeReplace()
Ljava/util/ImmutableCollections$List1;-><init>(Ljava/lang/Object;)
Ljava/util/ImmutableCollections$List1;->contains(Ljava/lang/Object;)
Ljava/util/ImmutableCollections$List1;->get(I)
Ljava/util/ImmutableCollections$List1;->hashCode()
Ljava/util/ImmutableCollections$List1;->readObject(Ljava/io/ObjectInputStream;)
Ljava/util/ImmutableCollections$List1;->size()
Ljava/util/ImmutableCollections$List1;->writeReplace()
Ljava/util/ImmutableCollections$List2;-><init>(Ljava/lang/Object;Ljava/lang/Object;)
Ljava/util/ImmutableCollections$List2;->contains(Ljava/lang/Object;)
Ljava/util/ImmutableCollections$List2;->get(I)
Ljava/util/ImmutableCollections$List2;->hashCode()
Ljava/util/ImmutableCollections$List2;->readObject(Ljava/io/ObjectInputStream;)
Ljava/util/ImmutableCollections$List2;->size()
Ljava/util/ImmutableCollections$List2;->writeReplace()
Ljava/util/ImmutableCollections$ListN;->contains(Ljava/lang/Object;)
Ljava/util/ImmutableCollections$ListN;->hashCode()
Ljava/util/Locale;->adjustLanguageCode(Ljava/lang/String;)
Llibcore/content/type/MimeMap$Builder;->put(Ljava/lang/String;Ljava/lang/String;)
Llibcore/content/type/MimeMap$Builder;->put(Ljava/lang/String;Ljava/util/List;)
Llibcore/icu/DateIntervalFormat;->getFormatter(Ljava/lang/String;Landroid/icu/util/ULocale;Landroid/icu/util/TimeZone;)
Llibcore/icu/DateTimeFormat;-><init>()
Llibcore/icu/DateTimeFormat;->format(Landroid/icu/util/ULocale;Landroid/icu/util/Calendar;ILandroid/icu/text/DisplayContext;)
Llibcore/icu/DateTimeFormat$FormatterCache;-><init>()
Llibcore/icu/ICU;->initLocaleDataNative(Ljava/lang/String;Llibcore/icu/LocaleData;)
Llibcore/icu/LocaleData;-><init>()
Llibcore/icu/RelativeDateTimeFormatter;-><init>()
Llibcore/icu/RelativeDateTimeFormatter;->dayDistance(Landroid/icu/util/TimeZone;JJ)
Llibcore/icu/RelativeDateTimeFormatter;->getFormatter(Landroid/icu/util/ULocale;Landroid/icu/text/RelativeDateTimeFormatter$Style;Landroid/icu/text/DisplayContext;)
Llibcore/icu/RelativeDateTimeFormatter;->getRelativeDateTimeString(Ljava/util/Locale;Ljava/util/TimeZone;JJJJI)
Llibcore/icu/RelativeDateTimeFormatter;->getRelativeTimeSpanString(Landroid/icu/util/ULocale;Landroid/icu/util/TimeZone;JJJILandroid/icu/text/DisplayContext;)
Llibcore/icu/RelativeDateTimeFormatter;->getRelativeTimeSpanString(Ljava/util/Locale;Ljava/util/TimeZone;JJJI)
Llibcore/icu/RelativeDateTimeFormatter;->getRelativeTimeSpanString(Ljava/util/Locale;Ljava/util/TimeZone;JJJILandroid/icu/text/DisplayContext;)
Llibcore/icu/RelativeDateTimeFormatter;->julianDay(Landroid/icu/util/TimeZone;J)
Llibcore/icu/RelativeDateTimeFormatter$FormatterCache;-><init>()
Llibcore/icu/TimeZoneNames;->fillZoneStrings(Ljava/lang/String;[[Ljava/lang/String;)
Llibcore/io/ForwardingOs;->ioctlInt(Ljava/io/FileDescriptor;ILandroid/system/Int32Ref;)
Llibcore/io/Linux;->ioctlInt(Ljava/io/FileDescriptor;ILandroid/system/Int32Ref;)
Llibcore/io/Os;->ioctlInt(Ljava/io/FileDescriptor;ILandroid/system/Int32Ref;)
Llibcore/net/event/NetworkEventDispatcher;->onNetworkConfigurationChanged()
Llibcore/timezone/CountryTimeZones;-><init>(Ljava/lang/String;Ljava/lang/String;ZZLjava/util/List;)
Llibcore/timezone/CountryTimeZones;->createValidated(Ljava/lang/String;Ljava/lang/String;ZZLjava/util/List;Ljava/lang/String;)
Llibcore/timezone/CountryTimeZones;->equals(Ljava/lang/Object;)
Llibcore/timezone/CountryTimeZones;->getCountryIso()
Llibcore/timezone/CountryTimeZones;->getDefaultTimeZone()
Llibcore/timezone/CountryTimeZones;->getDefaultTimeZoneId()
Llibcore/timezone/CountryTimeZones;->getEffectiveTimeZoneMappingsAt(J)
Llibcore/timezone/CountryTimeZones;->getTimeZoneMappings()
Llibcore/timezone/CountryTimeZones;->hasUtcZone(J)
Llibcore/timezone/CountryTimeZones;->hashCode()
Llibcore/timezone/CountryTimeZones;->isDefaultTimeZoneBoosted()
Llibcore/timezone/CountryTimeZones;->isForCountryCode(Ljava/lang/String;)
Llibcore/timezone/CountryTimeZones;->lookupByOffsetWithBias(JLandroid/icu/util/TimeZone;I)
Llibcore/timezone/CountryTimeZones;->lookupByOffsetWithBias(JLandroid/icu/util/TimeZone;IZ)
Llibcore/timezone/CountryTimeZones;->lookupByOffsetWithBiasInternal(JLandroid/icu/util/TimeZone;ILjava/lang/Boolean;)
Llibcore/timezone/CountryTimeZones;->normalizeCountryIso(Ljava/lang/String;)
Llibcore/timezone/CountryTimeZones;->offsetMatchesAtTime(JLandroid/icu/util/TimeZone;ILjava/lang/Boolean;)
Llibcore/timezone/CountryTimeZones;->toString()
Llibcore/timezone/CountryTimeZones$OffsetResult;-><init>(Landroid/icu/util/TimeZone;Z)
Llibcore/timezone/CountryTimeZones$OffsetResult;->getTimeZone()
Llibcore/timezone/CountryTimeZones$OffsetResult;->isOnlyMatch()
Llibcore/timezone/CountryTimeZones$OffsetResult;->toString()
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;-><init>(Ljava/lang/String;ZLjava/lang/Long;)
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;->containsTimeZoneId(Ljava/util/List;Ljava/lang/String;)
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;->createForTests(Ljava/lang/String;ZLjava/lang/Long;)
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;->equals(Ljava/lang/Object;)
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;->getNotUsedAfter()
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;->getTimeZone()
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;->getTimeZoneId()
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;->hashCode()
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;->isEffectiveAt(J)
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;->isShownInPicker()
Llibcore/timezone/CountryTimeZones$TimeZoneMapping;->toString()
Llibcore/timezone/CountryZonesFinder;-><init>(Ljava/util/List;)
Llibcore/timezone/CountryZonesFinder;->createForTests(Ljava/util/List;)
Llibcore/timezone/CountryZonesFinder;->lookupAllCountryIsoCodes()
Llibcore/timezone/CountryZonesFinder;->lookupCountryTimeZones(Ljava/lang/String;)
Llibcore/timezone/CountryZonesFinder;->lookupCountryTimeZonesForZoneId(Ljava/lang/String;)
Llibcore/timezone/TelephonyLookup;-><init>(Llibcore/timezone/XmlUtils$ReaderSupplier;)
Llibcore/timezone/TelephonyLookup;->createInstance(Ljava/lang/String;)
Llibcore/timezone/TelephonyLookup;->createInstanceForTests(Ljava/lang/String;)
Llibcore/timezone/TelephonyLookup;->createInstanceWithFallback([Ljava/lang/String;)
Llibcore/timezone/TelephonyLookup;->getInstance()
Llibcore/timezone/TelephonyLookup;->getTelephonyNetworkFinder()
Llibcore/timezone/TelephonyLookup;->processNetworks(Lorg/xmlpull/v1/XmlPullParser;Llibcore/timezone/TelephonyLookup$TelephonyNetworkProcessor;)
Llibcore/timezone/TelephonyLookup;->processXml(Llibcore/timezone/TelephonyLookup$TelephonyNetworkProcessor;)
Llibcore/timezone/TelephonyLookup;->validate()
Llibcore/timezone/TelephonyLookup$TelephonyNetworkProcessor;->processNetwork(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Llibcore/timezone/TelephonyLookup$TelephonyNetworkValidator;-><init>()
Llibcore/timezone/TelephonyLookup$TelephonyNetworkValidator;-><init>(Llibcore/timezone/TelephonyLookup$1;)
Llibcore/timezone/TelephonyLookup$TelephonyNetworkValidator;->isAsciiNumeric(Ljava/lang/String;)
Llibcore/timezone/TelephonyLookup$TelephonyNetworkValidator;->processNetwork(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Llibcore/timezone/TelephonyLookup$TelephonyNetworksExtractor;-><init>()
Llibcore/timezone/TelephonyLookup$TelephonyNetworksExtractor;-><init>(Llibcore/timezone/TelephonyLookup$1;)
Llibcore/timezone/TelephonyLookup$TelephonyNetworksExtractor;->getTelephonyNetworkFinder()
Llibcore/timezone/TelephonyLookup$TelephonyNetworksExtractor;->processNetwork(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Llibcore/timezone/TelephonyNetwork;-><init>(Llibcore/timezone/TelephonyNetwork$MccMnc;Ljava/lang/String;)
Llibcore/timezone/TelephonyNetwork;->create(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
Llibcore/timezone/TelephonyNetwork;->equals(Ljava/lang/Object;)
Llibcore/timezone/TelephonyNetwork;->getCountryIsoCode()
Llibcore/timezone/TelephonyNetwork;->getMcc()
Llibcore/timezone/TelephonyNetwork;->getMccMnc()
Llibcore/timezone/TelephonyNetwork;->getMnc()
Llibcore/timezone/TelephonyNetwork;->hashCode()
Llibcore/timezone/TelephonyNetwork;->toString()
Llibcore/timezone/TelephonyNetwork$MccMnc;-><init>(Ljava/lang/String;Ljava/lang/String;)
Llibcore/timezone/TelephonyNetwork$MccMnc;->equals(Ljava/lang/Object;)
Llibcore/timezone/TelephonyNetwork$MccMnc;->hashCode()
Llibcore/timezone/TelephonyNetwork$MccMnc;->toString()
Llibcore/timezone/TelephonyNetworkFinder;-><init>(Ljava/util/List;Ljava/util/Map;)
Llibcore/timezone/TelephonyNetworkFinder;->create(Ljava/util/List;)
Llibcore/timezone/TelephonyNetworkFinder;->findNetworkByMccMnc(Ljava/lang/String;Ljava/lang/String;)
Llibcore/timezone/TelephonyNetworkFinder;->getAll()
Llibcore/timezone/TimeZoneDataFiles;-><init>()
Llibcore/timezone/TimeZoneDataFiles;->generateIcuDataPath()
Llibcore/timezone/TimeZoneDataFiles;->getDataTimeZoneFile(Ljava/lang/String;)
Llibcore/timezone/TimeZoneDataFiles;->getDataTimeZoneRootDir()
Llibcore/timezone/TimeZoneDataFiles;->getEnvironmentPath(Ljava/lang/String;Ljava/lang/String;)
Llibcore/timezone/TimeZoneDataFiles;->getI18nModuleFile(Ljava/lang/String;)
Llibcore/timezone/TimeZoneDataFiles;->getI18nModuleIcuFile(Ljava/lang/String;)
Llibcore/timezone/TimeZoneDataFiles;->getSystemIcuFile(Ljava/lang/String;)
Llibcore/timezone/TimeZoneDataFiles;->getSystemTzFile(Ljava/lang/String;)
Llibcore/timezone/TimeZoneDataFiles;->getTimeZoneFilePaths(Ljava/lang/String;)
Llibcore/timezone/TimeZoneDataFiles;->getTimeZoneModuleFile(Ljava/lang/String;)
Llibcore/timezone/TimeZoneDataFiles;->getTimeZoneModuleIcuFile(Ljava/lang/String;)
Llibcore/timezone/TimeZoneDataFiles;->getTimeZoneModuleTzFile(Ljava/lang/String;)
Llibcore/timezone/TimeZoneDataFiles;->getTimeZoneModuleTzVersionFile()
Llibcore/timezone/TimeZoneFinder;-><init>(Llibcore/timezone/XmlUtils$ReaderSupplier;)
Llibcore/timezone/TimeZoneFinder;->createInstance(Ljava/lang/String;)
Llibcore/timezone/TimeZoneFinder;->createInstanceForTests(Ljava/lang/String;)
Llibcore/timezone/TimeZoneFinder;->createInstanceWithFallback([Ljava/lang/String;)
Llibcore/timezone/TimeZoneFinder;->getCountryZonesFinder()
Llibcore/timezone/TimeZoneFinder;->getIanaVersion()
Llibcore/timezone/TimeZoneFinder;->getInstance()
Llibcore/timezone/TimeZoneFinder;->lookupCountryTimeZones(Ljava/lang/String;)
Llibcore/timezone/TimeZoneFinder;->parseTimeZoneMappings(Lorg/xmlpull/v1/XmlPullParser;)
Llibcore/timezone/TimeZoneFinder;->processCountryZones(Lorg/xmlpull/v1/XmlPullParser;Llibcore/timezone/TimeZoneFinder$TimeZonesProcessor;)
Llibcore/timezone/TimeZoneFinder;->processXml(Llibcore/timezone/TimeZoneFinder$TimeZonesProcessor;)
Llibcore/timezone/TimeZoneFinder;->validate()
Llibcore/timezone/TimeZoneFinder$CountryZonesLookupExtractor;-><init>()
Llibcore/timezone/TimeZoneFinder$CountryZonesLookupExtractor;-><init>(Llibcore/timezone/TimeZoneFinder$1;)
Llibcore/timezone/TimeZoneFinder$CountryZonesLookupExtractor;->getCountryZonesLookup()
Llibcore/timezone/TimeZoneFinder$CountryZonesLookupExtractor;->processCountryZones(Ljava/lang/String;Ljava/lang/String;ZZLjava/util/List;Ljava/lang/String;)
Llibcore/timezone/TimeZoneFinder$IanaVersionExtractor;-><init>()
Llibcore/timezone/TimeZoneFinder$IanaVersionExtractor;-><init>(Llibcore/timezone/TimeZoneFinder$1;)
Llibcore/timezone/TimeZoneFinder$IanaVersionExtractor;->getIanaVersion()
Llibcore/timezone/TimeZoneFinder$IanaVersionExtractor;->processHeader(Ljava/lang/String;)
Llibcore/timezone/TimeZoneFinder$SelectiveCountryTimeZonesExtractor;-><init>(Ljava/lang/String;)
Llibcore/timezone/TimeZoneFinder$SelectiveCountryTimeZonesExtractor;-><init>(Ljava/lang/String;Llibcore/timezone/TimeZoneFinder$1;)
Llibcore/timezone/TimeZoneFinder$SelectiveCountryTimeZonesExtractor;->getValidatedCountryTimeZones()
Llibcore/timezone/TimeZoneFinder$SelectiveCountryTimeZonesExtractor;->processCountryZones(Ljava/lang/String;Ljava/lang/String;ZZLjava/util/List;Ljava/lang/String;)
Llibcore/timezone/TimeZoneFinder$TimeZonesProcessor;->processCountryZones(Ljava/lang/String;Ljava/lang/String;ZZLjava/util/List;Ljava/lang/String;)
Llibcore/timezone/TimeZoneFinder$TimeZonesProcessor;->processHeader(Ljava/lang/String;)
Llibcore/timezone/TimeZoneFinder$TimeZonesValidator;-><init>()
Llibcore/timezone/TimeZoneFinder$TimeZonesValidator;-><init>(Llibcore/timezone/TimeZoneFinder$1;)
Llibcore/timezone/TimeZoneFinder$TimeZonesValidator;->processCountryZones(Ljava/lang/String;Ljava/lang/String;ZZLjava/util/List;Ljava/lang/String;)
Llibcore/timezone/TzDataSetVersion;-><init>(IILjava/lang/String;I)
Llibcore/timezone/TzDataSetVersion;->currentFormatMajorVersion()
Llibcore/timezone/TzDataSetVersion;->currentFormatMinorVersion()
Llibcore/timezone/TzDataSetVersion;->equals(Ljava/lang/Object;)
Llibcore/timezone/TzDataSetVersion;->from3DigitVersionString(Ljava/lang/String;)
Llibcore/timezone/TzDataSetVersion;->fromBytes([B)
Llibcore/timezone/TzDataSetVersion;->getFormatMajorVersion()
Llibcore/timezone/TzDataSetVersion;->getFormatMinorVersion()
Llibcore/timezone/TzDataSetVersion;->getRevision()
Llibcore/timezone/TzDataSetVersion;->getRulesVersion()
Llibcore/timezone/TzDataSetVersion;->hashCode()
Llibcore/timezone/TzDataSetVersion;->isCompatibleWithThisDevice(Llibcore/timezone/TzDataSetVersion;)
Llibcore/timezone/TzDataSetVersion;->readBytes(Ljava/io/File;I)
Llibcore/timezone/TzDataSetVersion;->readFromFile(Ljava/io/File;)
Llibcore/timezone/TzDataSetVersion;->readTimeZoneModuleVersion()
Llibcore/timezone/TzDataSetVersion;->to3DigitVersionString(I)
Llibcore/timezone/TzDataSetVersion;->toBytes()
Llibcore/timezone/TzDataSetVersion;->toBytes(IILjava/lang/String;I)
Llibcore/timezone/TzDataSetVersion;->toFormatVersionString(II)
Llibcore/timezone/TzDataSetVersion;->toString()
Llibcore/timezone/TzDataSetVersion;->validate3DigitVersion(I)
Llibcore/timezone/TzDataSetVersion$TzDataSetException;-><init>(Ljava/lang/String;)
Llibcore/timezone/TzDataSetVersion$TzDataSetException;-><init>(Ljava/lang/String;Ljava/lang/Throwable;)
Llibcore/timezone/XmlUtils;-><init>()
Llibcore/timezone/XmlUtils;->checkOnEndTag(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Llibcore/timezone/XmlUtils;->consumeText(Lorg/xmlpull/v1/XmlPullParser;)
Llibcore/timezone/XmlUtils;->consumeUntilEndTag(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Llibcore/timezone/XmlUtils;->findNextStartTagOrEndTagNoRecurse(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Llibcore/timezone/XmlUtils;->findNextStartTagOrThrowNoRecurse(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Llibcore/timezone/XmlUtils;->isEndTag(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)
Llibcore/timezone/XmlUtils;->normalizeCountryIso(Ljava/lang/String;)
Llibcore/timezone/XmlUtils;->parseBooleanAttribute(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;Ljava/lang/Boolean;)
Llibcore/timezone/XmlUtils;->parseLongAttribute(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;Ljava/lang/Long;)
Llibcore/timezone/XmlUtils$ReaderSupplier;->forFile(Ljava/lang/String;Ljava/nio/charset/Charset;)
Llibcore/timezone/XmlUtils$ReaderSupplier;->forString(Ljava/lang/String;)
Llibcore/timezone/XmlUtils$ReaderSupplier;->get()
Llibcore/timezone/ZoneInfoDb;-><init>()
Llibcore/timezone/ZoneInfoDb;->checkNotClosed()
Llibcore/timezone/ZoneInfoDb;->close()
Llibcore/timezone/ZoneInfoDb;->createFallback()
Llibcore/timezone/ZoneInfoDb;->finalize()
Llibcore/timezone/ZoneInfoDb;->getAvailableIDs()
Llibcore/timezone/ZoneInfoDb;->getAvailableIDs(I)
Llibcore/timezone/ZoneInfoDb;->getBufferIterator(Ljava/lang/String;)
Llibcore/timezone/ZoneInfoDb;->getInstance()
Llibcore/timezone/ZoneInfoDb;->getRawUtcOffsets()
Llibcore/timezone/ZoneInfoDb;->getVersion()
Llibcore/timezone/ZoneInfoDb;->getZoneTab()
Llibcore/timezone/ZoneInfoDb;->hasTimeZone(Ljava/lang/String;)
Llibcore/timezone/ZoneInfoDb;->loadData(Ljava/lang/String;)
Llibcore/timezone/ZoneInfoDb;->loadTzData(Ljava/lang/String;)
Llibcore/timezone/ZoneInfoDb;->loadTzDataWithFallback([Ljava/lang/String;)
Llibcore/timezone/ZoneInfoDb;->makeTimeZone(Ljava/lang/String;)
Llibcore/timezone/ZoneInfoDb;->makeTimeZoneUncached(Ljava/lang/String;)
Llibcore/timezone/ZoneInfoDb;->populateFallback()
Llibcore/timezone/ZoneInfoDb;->readHeader()
Llibcore/timezone/ZoneInfoDb;->readIndex(Llibcore/io/BufferIterator;II)
Llibcore/timezone/ZoneInfoDb;->readZoneTab(Llibcore/io/BufferIterator;II)
Llibcore/timezone/ZoneInfoDb;->validate()
Llibcore/timezone/ZoneInfoDb;->validateOffset(II)
Llibcore/util/CoreLibraryDebug;-><init>()
Llibcore/util/CoreLibraryDebug;->addTzDataSetVersionDebugInfo(Ljava/lang/String;Ljava/lang/String;Llibcore/util/DebugInfo;)
Llibcore/util/CoreLibraryDebug;->getDebugInfo()
Llibcore/util/CoreLibraryDebug;->populateTimeZoneFilesInfo(Llibcore/util/DebugInfo;)
Llibcore/util/CoreLibraryDebug;->populateTimeZoneLibraryReportedVersion(Llibcore/util/DebugInfo;)
Llibcore/util/DebugInfo;-><init>()
Llibcore/util/DebugInfo;->addStringEntry(Ljava/lang/String;I)
Llibcore/util/DebugInfo;->addStringEntry(Ljava/lang/String;Ljava/lang/String;)
Llibcore/util/DebugInfo;->getDebugEntries()
Llibcore/util/DebugInfo;->getDebugEntry(Ljava/lang/String;)
Llibcore/util/DebugInfo$DebugEntry;-><init>(Ljava/lang/String;Ljava/lang/String;)
Llibcore/util/DebugInfo$DebugEntry;->getKey()
Llibcore/util/DebugInfo$DebugEntry;->getStringValue()
Llibcore/util/ZoneInfo;-><init>(Ljava/lang/String;[J[B[I[BJ)
Llibcore/util/ZoneInfo;->checkTzifVersionAcceptable(Ljava/lang/String;B)
Llibcore/util/ZoneInfo;->checked32BitAdd(JI)
Llibcore/util/ZoneInfo;->checked32BitSubtract(JI)
Llibcore/util/ZoneInfo;->findOffsetIndexForTimeInMilliseconds(J)
Llibcore/util/ZoneInfo;->findOffsetIndexForTimeInSeconds(J)
Llibcore/util/ZoneInfo;->findTransitionIndex(J)
Llibcore/util/ZoneInfo;->read64BitData(Ljava/lang/String;Llibcore/io/BufferIterator;J)
Llibcore/util/ZoneInfo;->readTimeZone(Ljava/lang/String;Llibcore/io/BufferIterator;J)
Llibcore/util/ZoneInfo;->roundDownMillisToSeconds(J)
Llibcore/util/ZoneInfo;->roundUpMillisToSeconds(J)
Llibcore/util/ZoneInfo;->saturated32BitAdd(JI)
Llibcore/util/ZoneInfo;->skipOver32BitData(Ljava/lang/String;Llibcore/io/BufferIterator;)
Llibcore/util/ZoneInfo$CheckedArithmeticException;-><init>()
Llibcore/util/ZoneInfo$CheckedArithmeticException;-><init>(Llibcore/util/ZoneInfo$1;)
Llibcore/util/ZoneInfo$OffsetInterval;-><init>(IIII)
Llibcore/util/ZoneInfo$OffsetInterval;->containsWallTime(J)
Llibcore/util/ZoneInfo$OffsetInterval;->create(Llibcore/util/ZoneInfo;I)
Llibcore/util/ZoneInfo$OffsetInterval;->getEndWallTimeSeconds()
Llibcore/util/ZoneInfo$OffsetInterval;->getIsDst()
Llibcore/util/ZoneInfo$OffsetInterval;->getStartWallTimeSeconds()
Llibcore/util/ZoneInfo$OffsetInterval;->getTotalOffsetSeconds()
Llibcore/util/ZoneInfo$WallTime;-><init>()
Llibcore/util/ZoneInfo$WallTime;->copyFieldsFromCalendar()
Llibcore/util/ZoneInfo$WallTime;->copyFieldsToCalendar()
Llibcore/util/ZoneInfo$WallTime;->doWallTimeSearch(Llibcore/util/ZoneInfo;IIZ)
Llibcore/util/ZoneInfo$WallTime;->getGmtOffset()
Llibcore/util/ZoneInfo$WallTime;->getHour()
Llibcore/util/ZoneInfo$WallTime;->getIsDst()
Llibcore/util/ZoneInfo$WallTime;->getMinute()
Llibcore/util/ZoneInfo$WallTime;->getMonth()
Llibcore/util/ZoneInfo$WallTime;->getMonthDay()
Llibcore/util/ZoneInfo$WallTime;->getOffsetsOfType(Llibcore/util/ZoneInfo;II)
Llibcore/util/ZoneInfo$WallTime;->getSecond()
Llibcore/util/ZoneInfo$WallTime;->getWeekDay()
Llibcore/util/ZoneInfo$WallTime;->getYear()
Llibcore/util/ZoneInfo$WallTime;->getYearDay()
Llibcore/util/ZoneInfo$WallTime;->localtime(ILlibcore/util/ZoneInfo;)
Llibcore/util/ZoneInfo$WallTime;->mktime(Llibcore/util/ZoneInfo;)
Llibcore/util/ZoneInfo$WallTime;->setGmtOffset(I)
Llibcore/util/ZoneInfo$WallTime;->setHour(I)
Llibcore/util/ZoneInfo$WallTime;->setIsDst(I)
Llibcore/util/ZoneInfo$WallTime;->setMinute(I)
Llibcore/util/ZoneInfo$WallTime;->setMonth(I)
Llibcore/util/ZoneInfo$WallTime;->setMonthDay(I)
Llibcore/util/ZoneInfo$WallTime;->setSecond(I)
Llibcore/util/ZoneInfo$WallTime;->setWeekDay(I)
Llibcore/util/ZoneInfo$WallTime;->setYear(I)
Llibcore/util/ZoneInfo$WallTime;->setYearDay(I)
Llibcore/util/ZoneInfo$WallTime;->tryOffsetAdjustments(Llibcore/util/ZoneInfo;ILlibcore/util/ZoneInfo$OffsetInterval;II)
Lorg/apache/harmony/dalvik/NativeTestTarget;-><init>()
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyInlineMethod()
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyInternalStaticMethod()
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniMethod0()
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniMethod0_Fast()
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniMethod6(IIIIII)
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniMethod6L(Ljava/lang/String;[Ljava/lang/String;[[ILjava/lang/Object;[Ljava/lang/Object;[[[[Ljava/lang/Object;)
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniMethod6L_Fast(Ljava/lang/String;[Ljava/lang/String;[[ILjava/lang/Object;[Ljava/lang/Object;[[[[Ljava/lang/Object;)
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniMethod6_Fast(IIIIII)
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniStaticMethod0()
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniStaticMethod0_Critical()
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniStaticMethod0_Fast()
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniStaticMethod6(IIIIII)
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniStaticMethod6L(Ljava/lang/String;[Ljava/lang/String;[[ILjava/lang/Object;[Ljava/lang/Object;[[[[Ljava/lang/Object;)
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniStaticMethod6L_Fast(Ljava/lang/String;[Ljava/lang/String;[[ILjava/lang/Object;[Ljava/lang/Object;[[[[Ljava/lang/Object;)
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniStaticMethod6_Critical(IIIIII)
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniStaticMethod6_Fast(IIIIII)
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniStaticSynchronizedMethod0()
Lorg/apache/harmony/dalvik/NativeTestTarget;->emptyJniSynchronizedMethod0()
Lorg/apache/harmony/dalvik/ddmc/ChunkHandler;->connected()
Lorg/apache/harmony/dalvik/ddmc/ChunkHandler;->disconnected()
Lorg/apache/harmony/dalvik/ddmc/ChunkHandler;->getString(Ljava/nio/ByteBuffer;I)
Lorg/apache/harmony/dalvik/ddmc/ChunkHandler;->putString(Ljava/nio/ByteBuffer;Ljava/lang/String;)
Lorg/apache/harmony/dalvik/ddmc/DdmVmInternal;->enableRecentAllocations(Z)
Lorg/apache/harmony/dalvik/ddmc/DdmVmInternal;->getRecentAllocationStatus()
Lorg/apache/harmony/dalvik/ddmc/DdmVmInternal;->getRecentAllocations()
Lorg/apache/harmony/dalvik/ddmc/DdmVmInternal;->heapInfoNotify(I)
Lorg/apache/harmony/dalvik/ddmc/DdmVmInternal;->heapSegmentNotify(IIZ)
Lorg/apache/harmony/dalvik/ddmc/DdmVmInternal;->threadNotify(Z)
----------
