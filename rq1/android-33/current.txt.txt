android.Manifest
<android.Manifest: void <init>()>
android.Manifest$permission
<android.Manifest$permission: void <init>()>
<android.Manifest$permission: java.lang.String ACCEPT_HANDOVER>
<android.Manifest$permission: java.lang.String ACCESS_BACKGROUND_LOCATION>
<android.Manifest$permission: java.lang.String ACCESS_BLOBS_ACROSS_USERS>
<android.Manifest$permission: java.lang.String ACCESS_CHECKIN_PROPERTIES>
<android.Manifest$permission: java.lang.String ACCESS_COARSE_LOCATION>
<android.Manifest$permission: java.lang.String ACCESS_FINE_LOCATION>
<android.Manifest$permission: java.lang.String ACCESS_LOCATION_EXTRA_COMMANDS>
<android.Manifest$permission: java.lang.String ACCESS_MEDIA_LOCATION>
<android.Manifest$permission: java.lang.String ACCESS_NETWORK_STATE>
<android.Manifest$permission: java.lang.String ACCESS_NOTIFICATION_POLICY>
<android.Manifest$permission: java.lang.String ACCESS_WIFI_STATE>
<android.Manifest$permission: java.lang.String ACCOUNT_MANAGER>
<android.Manifest$permission: java.lang.String ACTIVITY_RECOGNITION>
<android.Manifest$permission: java.lang.String ADD_VOICEMAIL>
<android.Manifest$permission: java.lang.String ANSWER_PHONE_CALLS>
<android.Manifest$permission: java.lang.String BATTERY_STATS>
<android.Manifest$permission: java.lang.String BIND_ACCESSIBILITY_SERVICE>
<android.Manifest$permission: java.lang.String BIND_APPWIDGET>
<android.Manifest$permission: java.lang.String BIND_AUTOFILL_SERVICE>
<android.Manifest$permission: java.lang.String BIND_CALL_REDIRECTION_SERVICE>
<android.Manifest$permission: java.lang.String BIND_CARRIER_MESSAGING_CLIENT_SERVICE>
<android.Manifest$permission: java.lang.String BIND_CARRIER_MESSAGING_SERVICE>
<android.Manifest$permission: java.lang.String BIND_CARRIER_SERVICES>
<android.Manifest$permission: java.lang.String BIND_CHOOSER_TARGET_SERVICE>
<android.Manifest$permission: java.lang.String BIND_COMPANION_DEVICE_SERVICE>
<android.Manifest$permission: java.lang.String BIND_CONDITION_PROVIDER_SERVICE>
<android.Manifest$permission: java.lang.String BIND_CONTROLS>
<android.Manifest$permission: java.lang.String BIND_DEVICE_ADMIN>
<android.Manifest$permission: java.lang.String BIND_DREAM_SERVICE>
<android.Manifest$permission: java.lang.String BIND_INCALL_SERVICE>
<android.Manifest$permission: java.lang.String BIND_INPUT_METHOD>
<android.Manifest$permission: java.lang.String BIND_MIDI_DEVICE_SERVICE>
<android.Manifest$permission: java.lang.String BIND_NFC_SERVICE>
<android.Manifest$permission: java.lang.String BIND_NOTIFICATION_LISTENER_SERVICE>
<android.Manifest$permission: java.lang.String BIND_PRINT_SERVICE>
<android.Manifest$permission: java.lang.String BIND_QUICK_ACCESS_WALLET_SERVICE>
<android.Manifest$permission: java.lang.String BIND_QUICK_SETTINGS_TILE>
<android.Manifest$permission: java.lang.String BIND_REMOTEVIEWS>
<android.Manifest$permission: java.lang.String BIND_SCREENING_SERVICE>
<android.Manifest$permission: java.lang.String BIND_TELECOM_CONNECTION_SERVICE>
<android.Manifest$permission: java.lang.String BIND_TEXT_SERVICE>
<android.Manifest$permission: java.lang.String BIND_TV_INPUT>
<android.Manifest$permission: java.lang.String BIND_TV_INTERACTIVE_APP>
<android.Manifest$permission: java.lang.String BIND_VISUAL_VOICEMAIL_SERVICE>
<android.Manifest$permission: java.lang.String BIND_VOICE_INTERACTION>
<android.Manifest$permission: java.lang.String BIND_VPN_SERVICE>
<android.Manifest$permission: java.lang.String BIND_VR_LISTENER_SERVICE>
<android.Manifest$permission: java.lang.String BIND_WALLPAPER>
<android.Manifest$permission: java.lang.String BLUETOOTH>
<android.Manifest$permission: java.lang.String BLUETOOTH_ADMIN>
<android.Manifest$permission: java.lang.String BLUETOOTH_ADVERTISE>
<android.Manifest$permission: java.lang.String BLUETOOTH_CONNECT>
<android.Manifest$permission: java.lang.String BLUETOOTH_PRIVILEGED>
<android.Manifest$permission: java.lang.String BLUETOOTH_SCAN>
<android.Manifest$permission: java.lang.String BODY_SENSORS>
<android.Manifest$permission: java.lang.String BODY_SENSORS_BACKGROUND>
<android.Manifest$permission: java.lang.String BROADCAST_PACKAGE_REMOVED>
<android.Manifest$permission: java.lang.String BROADCAST_SMS>
<android.Manifest$permission: java.lang.String BROADCAST_STICKY>
<android.Manifest$permission: java.lang.String BROADCAST_WAP_PUSH>
<android.Manifest$permission: java.lang.String CALL_COMPANION_APP>
<android.Manifest$permission: java.lang.String CALL_PHONE>
<android.Manifest$permission: java.lang.String CALL_PRIVILEGED>
<android.Manifest$permission: java.lang.String CAMERA>
<android.Manifest$permission: java.lang.String CAPTURE_AUDIO_OUTPUT>
<android.Manifest$permission: java.lang.String CHANGE_COMPONENT_ENABLED_STATE>
<android.Manifest$permission: java.lang.String CHANGE_CONFIGURATION>
<android.Manifest$permission: java.lang.String CHANGE_NETWORK_STATE>
<android.Manifest$permission: java.lang.String CHANGE_WIFI_MULTICAST_STATE>
<android.Manifest$permission: java.lang.String CHANGE_WIFI_STATE>
<android.Manifest$permission: java.lang.String CLEAR_APP_CACHE>
<android.Manifest$permission: java.lang.String CONTROL_LOCATION_UPDATES>
<android.Manifest$permission: java.lang.String DELETE_CACHE_FILES>
<android.Manifest$permission: java.lang.String DELETE_PACKAGES>
<android.Manifest$permission: java.lang.String DELIVER_COMPANION_MESSAGES>
<android.Manifest$permission: java.lang.String DIAGNOSTIC>
<android.Manifest$permission: java.lang.String DISABLE_KEYGUARD>
<android.Manifest$permission: java.lang.String DUMP>
<android.Manifest$permission: java.lang.String EXPAND_STATUS_BAR>
<android.Manifest$permission: java.lang.String FACTORY_TEST>
<android.Manifest$permission: java.lang.String FOREGROUND_SERVICE>
<android.Manifest$permission: java.lang.String GET_ACCOUNTS>
<android.Manifest$permission: java.lang.String GET_ACCOUNTS_PRIVILEGED>
<android.Manifest$permission: java.lang.String GET_PACKAGE_SIZE>
<android.Manifest$permission: java.lang.String GET_TASKS>
<android.Manifest$permission: java.lang.String GLOBAL_SEARCH>
<android.Manifest$permission: java.lang.String HIDE_OVERLAY_WINDOWS>
<android.Manifest$permission: java.lang.String HIGH_SAMPLING_RATE_SENSORS>
<android.Manifest$permission: java.lang.String INSTALL_LOCATION_PROVIDER>
<android.Manifest$permission: java.lang.String INSTALL_PACKAGES>
<android.Manifest$permission: java.lang.String INSTALL_SHORTCUT>
<android.Manifest$permission: java.lang.String INSTANT_APP_FOREGROUND_SERVICE>
<android.Manifest$permission: java.lang.String INTERACT_ACROSS_PROFILES>
<android.Manifest$permission: java.lang.String INTERNET>
<android.Manifest$permission: java.lang.String KILL_BACKGROUND_PROCESSES>
<android.Manifest$permission: java.lang.String LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINK>
<android.Manifest$permission: java.lang.String LOADER_USAGE_STATS>
<android.Manifest$permission: java.lang.String LOCATION_HARDWARE>
<android.Manifest$permission: java.lang.String MANAGE_DOCUMENTS>
<android.Manifest$permission: java.lang.String MANAGE_EXTERNAL_STORAGE>
<android.Manifest$permission: java.lang.String MANAGE_MEDIA>
<android.Manifest$permission: java.lang.String MANAGE_ONGOING_CALLS>
<android.Manifest$permission: java.lang.String MANAGE_OWN_CALLS>
<android.Manifest$permission: java.lang.String MANAGE_WIFI_INTERFACES>
<android.Manifest$permission: java.lang.String MANAGE_WIFI_NETWORK_SELECTION>
<android.Manifest$permission: java.lang.String MASTER_CLEAR>
<android.Manifest$permission: java.lang.String MEDIA_CONTENT_CONTROL>
<android.Manifest$permission: java.lang.String MODIFY_AUDIO_SETTINGS>
<android.Manifest$permission: java.lang.String MODIFY_PHONE_STATE>
<android.Manifest$permission: java.lang.String MOUNT_FORMAT_FILESYSTEMS>
<android.Manifest$permission: java.lang.String MOUNT_UNMOUNT_FILESYSTEMS>
<android.Manifest$permission: java.lang.String NEARBY_WIFI_DEVICES>
<android.Manifest$permission: java.lang.String NFC>
<android.Manifest$permission: java.lang.String NFC_PREFERRED_PAYMENT_INFO>
<android.Manifest$permission: java.lang.String NFC_TRANSACTION_EVENT>
<android.Manifest$permission: java.lang.String OVERRIDE_WIFI_CONFIG>
<android.Manifest$permission: java.lang.String PACKAGE_USAGE_STATS>
<android.Manifest$permission: java.lang.String PERSISTENT_ACTIVITY>
<android.Manifest$permission: java.lang.String POST_NOTIFICATIONS>
<android.Manifest$permission: java.lang.String PROCESS_OUTGOING_CALLS>
<android.Manifest$permission: java.lang.String QUERY_ALL_PACKAGES>
<android.Manifest$permission: java.lang.String READ_ASSISTANT_APP_SEARCH_DATA>
<android.Manifest$permission: java.lang.String READ_BASIC_PHONE_STATE>
<android.Manifest$permission: java.lang.String READ_CALENDAR>
<android.Manifest$permission: java.lang.String READ_CALL_LOG>
<android.Manifest$permission: java.lang.String READ_CONTACTS>
<android.Manifest$permission: java.lang.String READ_EXTERNAL_STORAGE>
<android.Manifest$permission: java.lang.String READ_HOME_APP_SEARCH_DATA>
<android.Manifest$permission: java.lang.String READ_INPUT_STATE>
<android.Manifest$permission: java.lang.String READ_LOGS>
<android.Manifest$permission: java.lang.String READ_MEDIA_AUDIO>
<android.Manifest$permission: java.lang.String READ_MEDIA_IMAGES>
<android.Manifest$permission: java.lang.String READ_MEDIA_VIDEO>
<android.Manifest$permission: java.lang.String READ_NEARBY_STREAMING_POLICY>
<android.Manifest$permission: java.lang.String READ_PHONE_NUMBERS>
<android.Manifest$permission: java.lang.String READ_PHONE_STATE>
<android.Manifest$permission: java.lang.String READ_PRECISE_PHONE_STATE>
<android.Manifest$permission: java.lang.String READ_SMS>
<android.Manifest$permission: java.lang.String READ_SYNC_SETTINGS>
<android.Manifest$permission: java.lang.String READ_SYNC_STATS>
<android.Manifest$permission: java.lang.String READ_VOICEMAIL>
<android.Manifest$permission: java.lang.String REBOOT>
<android.Manifest$permission: java.lang.String RECEIVE_BOOT_COMPLETED>
<android.Manifest$permission: java.lang.String RECEIVE_MMS>
<android.Manifest$permission: java.lang.String RECEIVE_SMS>
<android.Manifest$permission: java.lang.String RECEIVE_WAP_PUSH>
<android.Manifest$permission: java.lang.String RECORD_AUDIO>
<android.Manifest$permission: java.lang.String REORDER_TASKS>
<android.Manifest$permission: java.lang.String REQUEST_COMPANION_PROFILE_APP_STREAMING>
<android.Manifest$permission: java.lang.String REQUEST_COMPANION_PROFILE_AUTOMOTIVE_PROJECTION>
<android.Manifest$permission: java.lang.String REQUEST_COMPANION_PROFILE_COMPUTER>
<android.Manifest$permission: java.lang.String REQUEST_COMPANION_PROFILE_WATCH>
<android.Manifest$permission: java.lang.String REQUEST_COMPANION_RUN_IN_BACKGROUND>
<android.Manifest$permission: java.lang.String REQUEST_COMPANION_SELF_MANAGED>
<android.Manifest$permission: java.lang.String REQUEST_COMPANION_START_FOREGROUND_SERVICES_FROM_BACKGROUND>
<android.Manifest$permission: java.lang.String REQUEST_COMPANION_USE_DATA_IN_BACKGROUND>
<android.Manifest$permission: java.lang.String REQUEST_DELETE_PACKAGES>
<android.Manifest$permission: java.lang.String REQUEST_IGNORE_BATTERY_OPTIMIZATIONS>
<android.Manifest$permission: java.lang.String REQUEST_INSTALL_PACKAGES>
<android.Manifest$permission: java.lang.String REQUEST_OBSERVE_COMPANION_DEVICE_PRESENCE>
<android.Manifest$permission: java.lang.String REQUEST_PASSWORD_COMPLEXITY>
<android.Manifest$permission: java.lang.String RESTART_PACKAGES>
<android.Manifest$permission: java.lang.String SCHEDULE_EXACT_ALARM>
<android.Manifest$permission: java.lang.String SEND_RESPOND_VIA_MESSAGE>
<android.Manifest$permission: java.lang.String SEND_SMS>
<android.Manifest$permission: java.lang.String SET_ALARM>
<android.Manifest$permission: java.lang.String SET_ALWAYS_FINISH>
<android.Manifest$permission: java.lang.String SET_ANIMATION_SCALE>
<android.Manifest$permission: java.lang.String SET_DEBUG_APP>
<android.Manifest$permission: java.lang.String SET_PREFERRED_APPLICATIONS>
<android.Manifest$permission: java.lang.String SET_PROCESS_LIMIT>
<android.Manifest$permission: java.lang.String SET_TIME>
<android.Manifest$permission: java.lang.String SET_TIME_ZONE>
<android.Manifest$permission: java.lang.String SET_WALLPAPER>
<android.Manifest$permission: java.lang.String SET_WALLPAPER_HINTS>
<android.Manifest$permission: java.lang.String SIGNAL_PERSISTENT_PROCESSES>
<android.Manifest$permission: java.lang.String SMS_FINANCIAL_TRANSACTIONS>
<android.Manifest$permission: java.lang.String START_FOREGROUND_SERVICES_FROM_BACKGROUND>
<android.Manifest$permission: java.lang.String START_VIEW_APP_FEATURES>
<android.Manifest$permission: java.lang.String START_VIEW_PERMISSION_USAGE>
<android.Manifest$permission: java.lang.String STATUS_BAR>
<android.Manifest$permission: java.lang.String SUBSCRIBE_TO_KEYGUARD_LOCKED_STATE>
<android.Manifest$permission: java.lang.String SYSTEM_ALERT_WINDOW>
<android.Manifest$permission: java.lang.String TRANSMIT_IR>
<android.Manifest$permission: java.lang.String UNINSTALL_SHORTCUT>
<android.Manifest$permission: java.lang.String UPDATE_DEVICE_STATS>
<android.Manifest$permission: java.lang.String UPDATE_PACKAGES_WITHOUT_USER_ACTION>
<android.Manifest$permission: java.lang.String USE_BIOMETRIC>
<android.Manifest$permission: java.lang.String USE_EXACT_ALARM>
<android.Manifest$permission: java.lang.String USE_FINGERPRINT>
<android.Manifest$permission: java.lang.String USE_FULL_SCREEN_INTENT>
<android.Manifest$permission: java.lang.String USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER>
<android.Manifest$permission: java.lang.String USE_SIP>
<android.Manifest$permission: java.lang.String UWB_RANGING>
<android.Manifest$permission: java.lang.String VIBRATE>
<android.Manifest$permission: java.lang.String WAKE_LOCK>
<android.Manifest$permission: java.lang.String WRITE_APN_SETTINGS>
<android.Manifest$permission: java.lang.String WRITE_CALENDAR>
<android.Manifest$permission: java.lang.String WRITE_CALL_LOG>
<android.Manifest$permission: java.lang.String WRITE_CONTACTS>
<android.Manifest$permission: java.lang.String WRITE_EXTERNAL_STORAGE>
<android.Manifest$permission: java.lang.String WRITE_GSERVICES>
<android.Manifest$permission: java.lang.String WRITE_SECURE_SETTINGS>
<android.Manifest$permission: java.lang.String WRITE_SETTINGS>
<android.Manifest$permission: java.lang.String WRITE_SYNC_SETTINGS>
<android.Manifest$permission: java.lang.String WRITE_VOICEMAIL>
android.Manifest$permission_group
<android.Manifest$permission_group: void <init>()>
<android.Manifest$permission_group: java.lang.String ACTIVITY_RECOGNITION>
<android.Manifest$permission_group: java.lang.String CALENDAR>
<android.Manifest$permission_group: java.lang.String CALL_LOG>
<android.Manifest$permission_group: java.lang.String CAMERA>
<android.Manifest$permission_group: java.lang.String CONTACTS>
<android.Manifest$permission_group: java.lang.String LOCATION>
<android.Manifest$permission_group: java.lang.String MICROPHONE>
<android.Manifest$permission_group: java.lang.String NEARBY_DEVICES>
<android.Manifest$permission_group: java.lang.String NOTIFICATIONS>
<android.Manifest$permission_group: java.lang.String PHONE>
<android.Manifest$permission_group: java.lang.String READ_MEDIA_AURAL>
<android.Manifest$permission_group: java.lang.String READ_MEDIA_VISUAL>
<android.Manifest$permission_group: java.lang.String SENSORS>
<android.Manifest$permission_group: java.lang.String SMS>
<android.Manifest$permission_group: java.lang.String STORAGE>
android.R
<android.R: void <init>()>
android.R$anim
<android.R$anim: void <init>()>
<android.R$anim: int accelerate_decelerate_interpolator>
<android.R$anim: int accelerate_interpolator>
<android.R$anim: int anticipate_interpolator>
<android.R$anim: int anticipate_overshoot_interpolator>
<android.R$anim: int bounce_interpolator>
<android.R$anim: int cycle_interpolator>
<android.R$anim: int decelerate_interpolator>
<android.R$anim: int fade_in>
<android.R$anim: int fade_out>
<android.R$anim: int linear_interpolator>
<android.R$anim: int overshoot_interpolator>
<android.R$anim: int slide_in_left>
<android.R$anim: int slide_out_right>
android.R$animator
<android.R$animator: void <init>()>
<android.R$animator: int fade_in>
<android.R$animator: int fade_out>
android.R$array
<android.R$array: void <init>()>
<android.R$array: int emailAddressTypes>
<android.R$array: int imProtocols>
<android.R$array: int organizationTypes>
<android.R$array: int phoneTypes>
<android.R$array: int postalAddressTypes>
android.R$attr
<android.R$attr: void <init>()>
<android.R$attr: int absListViewStyle>
<android.R$attr: int accessibilityEventTypes>
<android.R$attr: int accessibilityFeedbackType>
<android.R$attr: int accessibilityFlags>
<android.R$attr: int accessibilityHeading>
<android.R$attr: int accessibilityLiveRegion>
<android.R$attr: int accessibilityPaneTitle>
<android.R$attr: int accessibilityTraversalAfter>
<android.R$attr: int accessibilityTraversalBefore>
<android.R$attr: int accountPreferences>
<android.R$attr: int accountType>
<android.R$attr: int action>
<android.R$attr: int actionBarDivider>
<android.R$attr: int actionBarItemBackground>
<android.R$attr: int actionBarPopupTheme>
<android.R$attr: int actionBarSize>
<android.R$attr: int actionBarSplitStyle>
<android.R$attr: int actionBarStyle>
<android.R$attr: int actionBarTabBarStyle>
<android.R$attr: int actionBarTabStyle>
<android.R$attr: int actionBarTabTextStyle>
<android.R$attr: int actionBarTheme>
<android.R$attr: int actionBarWidgetTheme>
<android.R$attr: int actionButtonStyle>
<android.R$attr: int actionDropDownStyle>
<android.R$attr: int actionLayout>
<android.R$attr: int actionMenuTextAppearance>
<android.R$attr: int actionMenuTextColor>
<android.R$attr: int actionModeBackground>
<android.R$attr: int actionModeCloseButtonStyle>
<android.R$attr: int actionModeCloseDrawable>
<android.R$attr: int actionModeCopyDrawable>
<android.R$attr: int actionModeCutDrawable>
<android.R$attr: int actionModeFindDrawable>
<android.R$attr: int actionModePasteDrawable>
<android.R$attr: int actionModeSelectAllDrawable>
<android.R$attr: int actionModeShareDrawable>
<android.R$attr: int actionModeSplitBackground>
<android.R$attr: int actionModeStyle>
<android.R$attr: int actionModeWebSearchDrawable>
<android.R$attr: int actionOverflowButtonStyle>
<android.R$attr: int actionOverflowMenuStyle>
<android.R$attr: int actionProviderClass>
<android.R$attr: int actionViewClass>
<android.R$attr: int activatedBackgroundIndicator>
<android.R$attr: int activityCloseEnterAnimation>
<android.R$attr: int activityCloseExitAnimation>
<android.R$attr: int activityOpenEnterAnimation>
<android.R$attr: int activityOpenExitAnimation>
<android.R$attr: int addPrintersActivity>
<android.R$attr: int addStatesFromChildren>
<android.R$attr: int adjustViewBounds>
<android.R$attr: int advancedPrintOptionsActivity>
<android.R$attr: int alertDialogIcon>
<android.R$attr: int alertDialogStyle>
<android.R$attr: int alertDialogTheme>
<android.R$attr: int alignmentMode>
<android.R$attr: int allContactsName>
<android.R$attr: int allowAudioPlaybackCapture>
<android.R$attr: int allowBackup>
<android.R$attr: int allowClearUserData>
<android.R$attr: int allowClickWhenDisabled>
<android.R$attr: int allowEmbedded>
<android.R$attr: int allowGameAngleDriver>
<android.R$attr: int allowGameDownscaling>
<android.R$attr: int allowGameFpsOverride>
<android.R$attr: int allowNativeHeapPointerTagging>
<android.R$attr: int allowParallelSyncs>
<android.R$attr: int allowSingleTap>
<android.R$attr: int allowTaskReparenting>
<android.R$attr: int allowUndo>
<android.R$attr: int allowUntrustedActivityEmbedding>
<android.R$attr: int alpha>
<android.R$attr: int alphabeticModifiers>
<android.R$attr: int alphabeticShortcut>
<android.R$attr: int alwaysDrawnWithCache>
<android.R$attr: int alwaysRetainTaskState>
<android.R$attr: int amPmBackgroundColor>
<android.R$attr: int amPmTextColor>
<android.R$attr: int ambientShadowAlpha>
<android.R$attr: int angle>
<android.R$attr: int animateFirstView>
<android.R$attr: int animateLayoutChanges>
<android.R$attr: int animateOnClick>
<android.R$attr: int animatedImageDrawable>
<android.R$attr: int animation>
<android.R$attr: int animationCache>
<android.R$attr: int animationDuration>
<android.R$attr: int animationOrder>
<android.R$attr: int animationResolution>
<android.R$attr: int antialias>
<android.R$attr: int anyDensity>
<android.R$attr: int apduServiceBanner>
<android.R$attr: int apiKey>
<android.R$attr: int appCategory>
<android.R$attr: int appComponentFactory>
<android.R$attr: int attributionTags>
<android.R$attr: int attributionsAreUserVisible>
<android.R$attr: int author>
<android.R$attr: int authorities>
<android.R$attr: int autoAdvanceViewId>
<android.R$attr: int autoCompleteTextViewStyle>
<android.R$attr: int autoHandwritingEnabled>
<android.R$attr: int autoLink>
<android.R$attr: int autoMirrored>
<android.R$attr: int autoRemoveFromRecents>
<android.R$attr: int autoRevokePermissions>
<android.R$attr: int autoSizeMaxTextSize>
<android.R$attr: int autoSizeMinTextSize>
<android.R$attr: int autoSizePresetSizes>
<android.R$attr: int autoSizeStepGranularity>
<android.R$attr: int autoSizeTextType>
<android.R$attr: int autoStart>
<android.R$attr: int autoText>
<android.R$attr: int autoUrlDetect>
<android.R$attr: int autoVerify>
<android.R$attr: int autofillHints>
<android.R$attr: int autofilledHighlight>
<android.R$attr: int backdropColor>
<android.R$attr: int background>
<android.R$attr: int backgroundDimAmount>
<android.R$attr: int backgroundDimEnabled>
<android.R$attr: int backgroundSplit>
<android.R$attr: int backgroundStacked>
<android.R$attr: int backgroundTint>
<android.R$attr: int backgroundTintMode>
<android.R$attr: int backupAgent>
<android.R$attr: int backupInForeground>
<android.R$attr: int banner>
<android.R$attr: int baseline>
<android.R$attr: int baselineAlignBottom>
<android.R$attr: int baselineAligned>
<android.R$attr: int baselineAlignedChildIndex>
<android.R$attr: int bitmap>
<android.R$attr: int borderlessButtonStyle>
<android.R$attr: int bottom>
<android.R$attr: int bottomBright>
<android.R$attr: int bottomDark>
<android.R$attr: int bottomLeftRadius>
<android.R$attr: int bottomMedium>
<android.R$attr: int bottomOffset>
<android.R$attr: int bottomRightRadius>
<android.R$attr: int breadCrumbShortTitle>
<android.R$attr: int breadCrumbTitle>
<android.R$attr: int breakStrategy>
<android.R$attr: int bufferType>
<android.R$attr: int button>
<android.R$attr: int buttonBarButtonStyle>
<android.R$attr: int buttonBarNegativeButtonStyle>
<android.R$attr: int buttonBarNeutralButtonStyle>
<android.R$attr: int buttonBarPositiveButtonStyle>
<android.R$attr: int buttonBarStyle>
<android.R$attr: int buttonCornerRadius>
<android.R$attr: int buttonGravity>
<android.R$attr: int buttonStyle>
<android.R$attr: int buttonStyleInset>
<android.R$attr: int buttonStyleSmall>
<android.R$attr: int buttonStyleToggle>
<android.R$attr: int buttonTint>
<android.R$attr: int buttonTintMode>
<android.R$attr: int cacheColorHint>
<android.R$attr: int calendarTextColor>
<android.R$attr: int calendarViewShown>
<android.R$attr: int calendarViewStyle>
<android.R$attr: int canControlMagnification>
<android.R$attr: int canDisplayOnRemoteDevices>
<android.R$attr: int canPauseRecording>
<android.R$attr: int canPerformGestures>
<android.R$attr: int canRecord>
<android.R$attr: int canRequestEnhancedWebAccessibility>
<android.R$attr: int canRequestFilterKeyEvents>
<android.R$attr: int canRequestFingerprintGestures>
<android.R$attr: int canRequestTouchExplorationMode>
<android.R$attr: int canRetrieveWindowContent>
<android.R$attr: int canTakeScreenshot>
<android.R$attr: int candidatesTextStyleSpans>
<android.R$attr: int cantSaveState>
<android.R$attr: int capitalize>
<android.R$attr: int category>
<android.R$attr: int centerBright>
<android.R$attr: int centerColor>
<android.R$attr: int centerDark>
<android.R$attr: int centerMedium>
<android.R$attr: int centerX>
<android.R$attr: int centerY>
<android.R$attr: int certDigest>
<android.R$attr: int checkBoxPreferenceStyle>
<android.R$attr: int checkMark>
<android.R$attr: int checkMarkTint>
<android.R$attr: int checkMarkTintMode>
<android.R$attr: int checkable>
<android.R$attr: int checkableBehavior>
<android.R$attr: int checkboxStyle>
<android.R$attr: int checked>
<android.R$attr: int checkedButton>
<android.R$attr: int checkedTextViewStyle>
<android.R$attr: int childDivider>
<android.R$attr: int childIndicator>
<android.R$attr: int childIndicatorEnd>
<android.R$attr: int childIndicatorLeft>
<android.R$attr: int childIndicatorRight>
<android.R$attr: int childIndicatorStart>
<android.R$attr: int choiceMode>
<android.R$attr: int classLoader>
<android.R$attr: int clearTaskOnLaunch>
<android.R$attr: int clickable>
<android.R$attr: int clipChildren>
<android.R$attr: int clipOrientation>
<android.R$attr: int clipToOutline>
<android.R$attr: int clipToPadding>
<android.R$attr: int closeIcon>
<android.R$attr: int codes>
<android.R$attr: int collapseColumns>
<android.R$attr: int collapseContentDescription>
<android.R$attr: int collapseIcon>
<android.R$attr: int color>
<android.R$attr: int colorAccent>
<android.R$attr: int colorActivatedHighlight>
<android.R$attr: int colorBackground>
<android.R$attr: int colorBackgroundCacheHint>
<android.R$attr: int colorBackgroundFloating>
<android.R$attr: int colorButtonNormal>
<android.R$attr: int colorControlActivated>
<android.R$attr: int colorControlHighlight>
<android.R$attr: int colorControlNormal>
<android.R$attr: int colorEdgeEffect>
<android.R$attr: int colorError>
<android.R$attr: int colorFocusedHighlight>
<android.R$attr: int colorForeground>
<android.R$attr: int colorForegroundInverse>
<android.R$attr: int colorLongPressedHighlight>
<android.R$attr: int colorMode>
<android.R$attr: int colorMultiSelectHighlight>
<android.R$attr: int colorPressedHighlight>
<android.R$attr: int colorPrimary>
<android.R$attr: int colorPrimaryDark>
<android.R$attr: int colorSecondary>
<android.R$attr: int columnCount>
<android.R$attr: int columnDelay>
<android.R$attr: int columnOrderPreserved>
<android.R$attr: int columnWidth>
<android.R$attr: int commitIcon>
<android.R$attr: int compatibleWidthLimitDp>
<android.R$attr: int completionHint>
<android.R$attr: int completionHintView>
<android.R$attr: int completionThreshold>
<android.R$attr: int configChanges>
<android.R$attr: int configure>
<android.R$attr: int constantSize>
<android.R$attr: int content>
<android.R$attr: int contentAgeHint>
<android.R$attr: int contentAuthority>
<android.R$attr: int contentDescription>
<android.R$attr: int contentInsetEnd>
<android.R$attr: int contentInsetEndWithActions>
<android.R$attr: int contentInsetLeft>
<android.R$attr: int contentInsetRight>
<android.R$attr: int contentInsetStart>
<android.R$attr: int contentInsetStartWithNavigation>
<android.R$attr: int contextClickable>
<android.R$attr: int contextDescription>
<android.R$attr: int contextPopupMenuStyle>
<android.R$attr: int contextUri>
<android.R$attr: int controlX1>
<android.R$attr: int controlX2>
<android.R$attr: int controlY1>
<android.R$attr: int controlY2>
<android.R$attr: int countDown>
<android.R$attr: int country>
<android.R$attr: int cropToPadding>
<android.R$attr: int crossProfile>
<android.R$attr: int cursorVisible>
<android.R$attr: int customNavigationLayout>
<android.R$attr: int customTokens>
<android.R$attr: int cycles>
<android.R$attr: int dashGap>
<android.R$attr: int dashWidth>
<android.R$attr: int data>
<android.R$attr: int dataExtractionRules>
<android.R$attr: int datePickerDialogTheme>
<android.R$attr: int datePickerMode>
<android.R$attr: int datePickerStyle>
<android.R$attr: int dateTextAppearance>
<android.R$attr: int dayOfWeekBackground>
<android.R$attr: int dayOfWeekTextAppearance>
<android.R$attr: int debuggable>
<android.R$attr: int defaultFocusHighlightEnabled>
<android.R$attr: int defaultHeight>
<android.R$attr: int defaultToDeviceProtectedStorage>
<android.R$attr: int defaultValue>
<android.R$attr: int defaultWidth>
<android.R$attr: int delay>
<android.R$attr: int dependency>
<android.R$attr: int descendantFocusability>
<android.R$attr: int description>
<android.R$attr: int detachWallpaper>
<android.R$attr: int detailColumn>
<android.R$attr: int detailSocialSummary>
<android.R$attr: int detailsElementBackground>
<android.R$attr: int dial>
<android.R$attr: int dialTint>
<android.R$attr: int dialTintMode>
<android.R$attr: int dialogCornerRadius>
<android.R$attr: int dialogIcon>
<android.R$attr: int dialogLayout>
<android.R$attr: int dialogMessage>
<android.R$attr: int dialogPreferenceStyle>
<android.R$attr: int dialogPreferredPadding>
<android.R$attr: int dialogTheme>
<android.R$attr: int dialogTitle>
<android.R$attr: int digits>
<android.R$attr: int directBootAware>
<android.R$attr: int direction>
<android.R$attr: int directionDescriptions>
<android.R$attr: int directionPriority>
<android.R$attr: int disableDependentsState>
<android.R$attr: int disabledAlpha>
<android.R$attr: int displayOptions>
<android.R$attr: int dither>
<android.R$attr: int divider>
<android.R$attr: int dividerHeight>
<android.R$attr: int dividerHorizontal>
<android.R$attr: int dividerPadding>
<android.R$attr: int dividerVertical>
<android.R$attr: int documentLaunchMode>
<android.R$attr: int drawSelectorOnTop>
<android.R$attr: int drawable>
<android.R$attr: int drawableBottom>
<android.R$attr: int drawableEnd>
<android.R$attr: int drawableLeft>
<android.R$attr: int drawablePadding>
<android.R$attr: int drawableRight>
<android.R$attr: int drawableStart>
<android.R$attr: int drawableTint>
<android.R$attr: int drawableTintMode>
<android.R$attr: int drawableTop>
<android.R$attr: int drawingCacheQuality>
<android.R$attr: int dropDownAnchor>
<android.R$attr: int dropDownHeight>
<android.R$attr: int dropDownHintAppearance>
<android.R$attr: int dropDownHorizontalOffset>
<android.R$attr: int dropDownItemStyle>
<android.R$attr: int dropDownListViewStyle>
<android.R$attr: int dropDownSelector>
<android.R$attr: int dropDownSpinnerStyle>
<android.R$attr: int dropDownVerticalOffset>
<android.R$attr: int dropDownWidth>
<android.R$attr: int duplicateParentState>
<android.R$attr: int duration>
<android.R$attr: int editTextBackground>
<android.R$attr: int editTextColor>
<android.R$attr: int editTextPreferenceStyle>
<android.R$attr: int editTextStyle>
<android.R$attr: int editable>
<android.R$attr: int editorExtras>
<android.R$attr: int effectColor>
<android.R$attr: int elegantTextHeight>
<android.R$attr: int elevation>
<android.R$attr: int ellipsize>
<android.R$attr: int ems>
<android.R$attr: int enableOnBackInvokedCallback>
<android.R$attr: int enableVrMode>
<android.R$attr: int enabled>
<android.R$attr: int end>
<android.R$attr: int endColor>
<android.R$attr: int endX>
<android.R$attr: int endY>
<android.R$attr: int endYear>
<android.R$attr: int enforceNavigationBarContrast>
<android.R$attr: int enforceStatusBarContrast>
<android.R$attr: int enterFadeDuration>
<android.R$attr: int entries>
<android.R$attr: int entryValues>
<android.R$attr: int eventsInterceptionEnabled>
<android.R$attr: int excludeClass>
<android.R$attr: int excludeFromRecents>
<android.R$attr: int excludeId>
<android.R$attr: int excludeName>
<android.R$attr: int exitFadeDuration>
<android.R$attr: int expandableListPreferredChildIndicatorLeft>
<android.R$attr: int expandableListPreferredChildIndicatorRight>
<android.R$attr: int expandableListPreferredChildPaddingLeft>
<android.R$attr: int expandableListPreferredItemIndicatorLeft>
<android.R$attr: int expandableListPreferredItemIndicatorRight>
<android.R$attr: int expandableListPreferredItemPaddingLeft>
<android.R$attr: int expandableListViewStyle>
<android.R$attr: int expandableListViewWhiteStyle>
<android.R$attr: int exported>
<android.R$attr: int externalService>
<android.R$attr: int extraTension>
<android.R$attr: int extractNativeLibs>
<android.R$attr: int factor>
<android.R$attr: int fadeDuration>
<android.R$attr: int fadeEnabled>
<android.R$attr: int fadeOffset>
<android.R$attr: int fadeScrollbars>
<android.R$attr: int fadingEdge>
<android.R$attr: int fadingEdgeLength>
<android.R$attr: int fadingMode>
<android.R$attr: int fallbackLineSpacing>
<android.R$attr: int fastScrollAlwaysVisible>
<android.R$attr: int fastScrollEnabled>
<android.R$attr: int fastScrollOverlayPosition>
<android.R$attr: int fastScrollPreviewBackgroundLeft>
<android.R$attr: int fastScrollPreviewBackgroundRight>
<android.R$attr: int fastScrollStyle>
<android.R$attr: int fastScrollTextColor>
<android.R$attr: int fastScrollThumbDrawable>
<android.R$attr: int fastScrollTrackDrawable>
<android.R$attr: int fillAfter>
<android.R$attr: int fillAlpha>
<android.R$attr: int fillBefore>
<android.R$attr: int fillColor>
<android.R$attr: int fillEnabled>
<android.R$attr: int fillType>
<android.R$attr: int fillViewport>
<android.R$attr: int filter>
<android.R$attr: int filterTouchesWhenObscured>
<android.R$attr: int fingerprintAuthDrawable>
<android.R$attr: int finishOnCloseSystemDialogs>
<android.R$attr: int finishOnTaskLaunch>
<android.R$attr: int firstBaselineToTopHeight>
<android.R$attr: int firstDayOfWeek>
<android.R$attr: int fitsSystemWindows>
<android.R$attr: int flipInterval>
<android.R$attr: int focusable>
<android.R$attr: int focusableInTouchMode>
<android.R$attr: int focusedByDefault>
<android.R$attr: int focusedMonthDateColor>
<android.R$attr: int font>
<android.R$attr: int fontFamily>
<android.R$attr: int fontFeatureSettings>
<android.R$attr: int fontProviderAuthority>
<android.R$attr: int fontProviderCerts>
<android.R$attr: int fontProviderPackage>
<android.R$attr: int fontProviderQuery>
<android.R$attr: int fontProviderSystemFontFamily>
<android.R$attr: int fontStyle>
<android.R$attr: int fontVariationSettings>
<android.R$attr: int fontWeight>
<android.R$attr: int footerDividersEnabled>
<android.R$attr: int forceDarkAllowed>
<android.R$attr: int forceHasOverlappingRendering>
<android.R$attr: int forceQueryable>
<android.R$attr: int forceUriPermissions>
<android.R$attr: int foreground>
<android.R$attr: int foregroundGravity>
<android.R$attr: int foregroundServiceType>
<android.R$attr: int foregroundTint>
<android.R$attr: int foregroundTintMode>
<android.R$attr: int format>
<android.R$attr: int format12Hour>
<android.R$attr: int format24Hour>
<android.R$attr: int fraction>
<android.R$attr: int fragment>
<android.R$attr: int fragmentAllowEnterTransitionOverlap>
<android.R$attr: int fragmentAllowReturnTransitionOverlap>
<android.R$attr: int fragmentCloseEnterAnimation>
<android.R$attr: int fragmentCloseExitAnimation>
<android.R$attr: int fragmentEnterTransition>
<android.R$attr: int fragmentExitTransition>
<android.R$attr: int fragmentFadeEnterAnimation>
<android.R$attr: int fragmentFadeExitAnimation>
<android.R$attr: int fragmentOpenEnterAnimation>
<android.R$attr: int fragmentOpenExitAnimation>
<android.R$attr: int fragmentReenterTransition>
<android.R$attr: int fragmentReturnTransition>
<android.R$attr: int fragmentSharedElementEnterTransition>
<android.R$attr: int fragmentSharedElementReturnTransition>
<android.R$attr: int freezesText>
<android.R$attr: int fromAlpha>
<android.R$attr: int fromDegrees>
<android.R$attr: int fromExtendBottom>
<android.R$attr: int fromExtendLeft>
<android.R$attr: int fromExtendRight>
<android.R$attr: int fromExtendTop>
<android.R$attr: int fromId>
<android.R$attr: int fromScene>
<android.R$attr: int fromXDelta>
<android.R$attr: int fromXScale>
<android.R$attr: int fromYDelta>
<android.R$attr: int fromYScale>
<android.R$attr: int fullBackupContent>
<android.R$attr: int fullBackupOnly>
<android.R$attr: int fullBright>
<android.R$attr: int fullDark>
<android.R$attr: int functionalTest>
<android.R$attr: int galleryItemBackground>
<android.R$attr: int galleryStyle>
<android.R$attr: int gestureColor>
<android.R$attr: int gestureStrokeAngleThreshold>
<android.R$attr: int gestureStrokeLengthThreshold>
<android.R$attr: int gestureStrokeSquarenessThreshold>
<android.R$attr: int gestureStrokeType>
<android.R$attr: int gestureStrokeWidth>
<android.R$attr: int glEsVersion>
<android.R$attr: int goIcon>
<android.R$attr: int gradientRadius>
<android.R$attr: int grantUriPermissions>
<android.R$attr: int gravity>
<android.R$attr: int gridViewStyle>
<android.R$attr: int groupIndicator>
<android.R$attr: int gwpAsanMode>
<android.R$attr: int hand_hour>
<android.R$attr: int hand_hourTint>
<android.R$attr: int hand_hourTintMode>
<android.R$attr: int hand_minute>
<android.R$attr: int hand_minuteTint>
<android.R$attr: int hand_minuteTintMode>
<android.R$attr: int hand_second>
<android.R$attr: int hand_secondTint>
<android.R$attr: int hand_secondTintMode>
<android.R$attr: int handle>
<android.R$attr: int handleProfiling>
<android.R$attr: int hapticFeedbackEnabled>
<android.R$attr: int hardwareAccelerated>
<android.R$attr: int hasCode>
<android.R$attr: int hasFragileUserData>
<android.R$attr: int headerAmPmTextAppearance>
<android.R$attr: int headerBackground>
<android.R$attr: int headerDayOfMonthTextAppearance>
<android.R$attr: int headerDividersEnabled>
<android.R$attr: int headerMonthTextAppearance>
<android.R$attr: int headerTimeTextAppearance>
<android.R$attr: int headerYearTextAppearance>
<android.R$attr: int height>
<android.R$attr: int hideOnContentScroll>
<android.R$attr: int hint>
<android.R$attr: int homeAsUpIndicator>
<android.R$attr: int homeLayout>
<android.R$attr: int horizontalDivider>
<android.R$attr: int horizontalGap>
<android.R$attr: int horizontalScrollViewStyle>
<android.R$attr: int horizontalSpacing>
<android.R$attr: int host>
<android.R$attr: int hotSpotX>
<android.R$attr: int hotSpotY>
<android.R$attr: int htmlDescription>
<android.R$attr: int hyphenationFrequency>
<android.R$attr: int icon>
<android.R$attr: int iconPreview>
<android.R$attr: int iconSpaceReserved>
<android.R$attr: int iconTint>
<android.R$attr: int iconTintMode>
<android.R$attr: int iconifiedByDefault>
<android.R$attr: int id>
<android.R$attr: int identifier>
<android.R$attr: int ignoreGravity>
<android.R$attr: int imageButtonStyle>
<android.R$attr: int imageWellStyle>
<android.R$attr: int imeActionId>
<android.R$attr: int imeActionLabel>
<android.R$attr: int imeExtractEnterAnimation>
<android.R$attr: int imeExtractExitAnimation>
<android.R$attr: int imeFullscreenBackground>
<android.R$attr: int imeOptions>
<android.R$attr: int imeSubtypeExtraValue>
<android.R$attr: int imeSubtypeLocale>
<android.R$attr: int imeSubtypeMode>
<android.R$attr: int immersive>
<android.R$attr: int importantForAccessibility>
<android.R$attr: int importantForAutofill>
<android.R$attr: int importantForContentCapture>
<android.R$attr: int inAnimation>
<android.R$attr: int includeFontPadding>
<android.R$attr: int includeInGlobalSearch>
<android.R$attr: int indeterminate>
<android.R$attr: int indeterminateBehavior>
<android.R$attr: int indeterminateDrawable>
<android.R$attr: int indeterminateDuration>
<android.R$attr: int indeterminateOnly>
<android.R$attr: int indeterminateProgressStyle>
<android.R$attr: int indeterminateTint>
<android.R$attr: int indeterminateTintMode>
<android.R$attr: int indicatorEnd>
<android.R$attr: int indicatorLeft>
<android.R$attr: int indicatorRight>
<android.R$attr: int indicatorStart>
<android.R$attr: int inflatedId>
<android.R$attr: int inheritShowWhenLocked>
<android.R$attr: int initOrder>
<android.R$attr: int initialKeyguardLayout>
<android.R$attr: int initialLayout>
<android.R$attr: int innerRadius>
<android.R$attr: int innerRadiusRatio>
<android.R$attr: int inputMethod>
<android.R$attr: int inputType>
<android.R$attr: int inset>
<android.R$attr: int insetBottom>
<android.R$attr: int insetLeft>
<android.R$attr: int insetRight>
<android.R$attr: int insetTop>
<android.R$attr: int installLocation>
<android.R$attr: int interactiveUiTimeout>
<android.R$attr: int interpolator>
<android.R$attr: int intro>
<android.R$attr: int isAccessibilityTool>
<android.R$attr: int isAlwaysSyncable>
<android.R$attr: int isAsciiCapable>
<android.R$attr: int isAuxiliary>
<android.R$attr: int isDefault>
<android.R$attr: int isFeatureSplit>
<android.R$attr: int isGame>
<android.R$attr: int isIndicator>
<android.R$attr: int isLightTheme>
<android.R$attr: int isModifier>
<android.R$attr: int isRepeatable>
<android.R$attr: int isScrollContainer>
<android.R$attr: int isSplitRequired>
<android.R$attr: int isStatic>
<android.R$attr: int isSticky>
<android.R$attr: int isolatedProcess>
<android.R$attr: int isolatedSplits>
<android.R$attr: int itemBackground>
<android.R$attr: int itemIconDisabledAlpha>
<android.R$attr: int itemPadding>
<android.R$attr: int itemTextAppearance>
<android.R$attr: int justificationMode>
<android.R$attr: int keepScreenOn>
<android.R$attr: int key>
<android.R$attr: int keyBackground>
<android.R$attr: int keyEdgeFlags>
<android.R$attr: int keyHeight>
<android.R$attr: int keyIcon>
<android.R$attr: int keyLabel>
<android.R$attr: int keyOutputText>
<android.R$attr: int keyPreviewHeight>
<android.R$attr: int keyPreviewLayout>
<android.R$attr: int keyPreviewOffset>
<android.R$attr: int keySet>
<android.R$attr: int keyTextColor>
<android.R$attr: int keyTextSize>
<android.R$attr: int keyWidth>
<android.R$attr: int keyboardLayout>
<android.R$attr: int keyboardMode>
<android.R$attr: int keyboardNavigationCluster>
<android.R$attr: int keycode>
<android.R$attr: int killAfterRestore>
<android.R$attr: int knownActivityEmbeddingCerts>
<android.R$attr: int knownCerts>
<android.R$attr: int lStar>
<android.R$attr: int label>
<android.R$attr: int labelFor>
<android.R$attr: int labelTextSize>
<android.R$attr: int languageTag>
<android.R$attr: int largeHeap>
<android.R$attr: int largeScreens>
<android.R$attr: int largestWidthLimitDp>
<android.R$attr: int lastBaselineToBottomHeight>
<android.R$attr: int launchMode>
<android.R$attr: int launchTaskBehindSourceAnimation>
<android.R$attr: int launchTaskBehindTargetAnimation>
<android.R$attr: int layerType>
<android.R$attr: int layout>
<android.R$attr: int layoutAnimation>
<android.R$attr: int layoutDirection>
<android.R$attr: int layoutMode>
<android.R$attr: int layout_above>
<android.R$attr: int layout_alignBaseline>
<android.R$attr: int layout_alignBottom>
<android.R$attr: int layout_alignEnd>
<android.R$attr: int layout_alignLeft>
<android.R$attr: int layout_alignParentBottom>
<android.R$attr: int layout_alignParentEnd>
<android.R$attr: int layout_alignParentLeft>
<android.R$attr: int layout_alignParentRight>
<android.R$attr: int layout_alignParentStart>
<android.R$attr: int layout_alignParentTop>
<android.R$attr: int layout_alignRight>
<android.R$attr: int layout_alignStart>
<android.R$attr: int layout_alignTop>
<android.R$attr: int layout_alignWithParentIfMissing>
<android.R$attr: int layout_below>
<android.R$attr: int layout_centerHorizontal>
<android.R$attr: int layout_centerInParent>
<android.R$attr: int layout_centerVertical>
<android.R$attr: int layout_column>
<android.R$attr: int layout_columnSpan>
<android.R$attr: int layout_columnWeight>
<android.R$attr: int layout_gravity>
<android.R$attr: int layout_height>
<android.R$attr: int layout_margin>
<android.R$attr: int layout_marginBottom>
<android.R$attr: int layout_marginEnd>
<android.R$attr: int layout_marginHorizontal>
<android.R$attr: int layout_marginLeft>
<android.R$attr: int layout_marginRight>
<android.R$attr: int layout_marginStart>
<android.R$attr: int layout_marginTop>
<android.R$attr: int layout_marginVertical>
<android.R$attr: int layout_row>
<android.R$attr: int layout_rowSpan>
<android.R$attr: int layout_rowWeight>
<android.R$attr: int layout_scale>
<android.R$attr: int layout_span>
<android.R$attr: int layout_toEndOf>
<android.R$attr: int layout_toLeftOf>
<android.R$attr: int layout_toRightOf>
<android.R$attr: int layout_toStartOf>
<android.R$attr: int layout_weight>
<android.R$attr: int layout_width>
<android.R$attr: int layout_x>
<android.R$attr: int layout_y>
<android.R$attr: int left>
<android.R$attr: int letterSpacing>
<android.R$attr: int level>
<android.R$attr: int lineBreakStyle>
<android.R$attr: int lineBreakWordStyle>
<android.R$attr: int lineHeight>
<android.R$attr: int lineSpacingExtra>
<android.R$attr: int lineSpacingMultiplier>
<android.R$attr: int lines>
<android.R$attr: int linksClickable>
<android.R$attr: int listChoiceBackgroundIndicator>
<android.R$attr: int listChoiceIndicatorMultiple>
<android.R$attr: int listChoiceIndicatorSingle>
<android.R$attr: int listDivider>
<android.R$attr: int listDividerAlertDialog>
<android.R$attr: int listMenuViewStyle>
<android.R$attr: int listPopupWindowStyle>
<android.R$attr: int listPreferredItemHeight>
<android.R$attr: int listPreferredItemHeightLarge>
<android.R$attr: int listPreferredItemHeightSmall>
<android.R$attr: int listPreferredItemPaddingEnd>
<android.R$attr: int listPreferredItemPaddingLeft>
<android.R$attr: int listPreferredItemPaddingRight>
<android.R$attr: int listPreferredItemPaddingStart>
<android.R$attr: int listSelector>
<android.R$attr: int listSeparatorTextViewStyle>
<android.R$attr: int listViewStyle>
<android.R$attr: int listViewWhiteStyle>
<android.R$attr: int localeConfig>
<android.R$attr: int lockTaskMode>
<android.R$attr: int logo>
<android.R$attr: int logoDescription>
<android.R$attr: int longClickable>
<android.R$attr: int loopViews>
<android.R$attr: int manageSpaceActivity>
<android.R$attr: int mapViewStyle>
<android.R$attr: int marqueeRepeatLimit>
<android.R$attr: int matchOrder>
<android.R$attr: int max>
<android.R$attr: int maxAspectRatio>
<android.R$attr: int maxButtonHeight>
<android.R$attr: int maxDate>
<android.R$attr: int maxEms>
<android.R$attr: int maxHeight>
<android.R$attr: int maxItemsPerRow>
<android.R$attr: int maxLength>
<android.R$attr: int maxLevel>
<android.R$attr: int maxLines>
<android.R$attr: int maxLongVersionCode>
<android.R$attr: int maxRecents>
<android.R$attr: int maxResizeHeight>
<android.R$attr: int maxResizeWidth>
<android.R$attr: int maxRows>
<android.R$attr: int maxSdkVersion>
<android.R$attr: int maxWidth>
<android.R$attr: int maximumAngle>
<android.R$attr: int measureAllChildren>
<android.R$attr: int measureWithLargestChild>
<android.R$attr: int mediaRouteButtonStyle>
<android.R$attr: int mediaRouteTypes>
<android.R$attr: int memtagMode>
<android.R$attr: int menuCategory>
<android.R$attr: int mimeGroup>
<android.R$attr: int mimeType>
<android.R$attr: int min>
<android.R$attr: int minAspectRatio>
<android.R$attr: int minDate>
<android.R$attr: int minEms>
<android.R$attr: int minHeight>
<android.R$attr: int minLevel>
<android.R$attr: int minLines>
<android.R$attr: int minResizeHeight>
<android.R$attr: int minResizeWidth>
<android.R$attr: int minSdkVersion>
<android.R$attr: int minWidth>
<android.R$attr: int minimumHorizontalAngle>
<android.R$attr: int minimumVerticalAngle>
<android.R$attr: int mipMap>
<android.R$attr: int mirrorForRtl>
<android.R$attr: int mode>
<android.R$attr: int moreIcon>
<android.R$attr: int multiArch>
<android.R$attr: int multiprocess>
<android.R$attr: int name>
<android.R$attr: int nativeHeapZeroInitialized>
<android.R$attr: int navigationBarColor>
<android.R$attr: int navigationBarDividerColor>
<android.R$attr: int navigationContentDescription>
<android.R$attr: int navigationIcon>
<android.R$attr: int navigationMode>
<android.R$attr: int negativeButtonText>
<android.R$attr: int nestedScrollingEnabled>
<android.R$attr: int networkSecurityConfig>
<android.R$attr: int nextClusterForward>
<android.R$attr: int nextFocusDown>
<android.R$attr: int nextFocusForward>
<android.R$attr: int nextFocusLeft>
<android.R$attr: int nextFocusRight>
<android.R$attr: int nextFocusUp>
<android.R$attr: int noHistory>
<android.R$attr: int nonInteractiveUiTimeout>
<android.R$attr: int normalScreens>
<android.R$attr: int notificationTimeout>
<android.R$attr: int numColumns>
<android.R$attr: int numStars>
<android.R$attr: int numberPickerStyle>
<android.R$attr: int numbersBackgroundColor>
<android.R$attr: int numbersInnerTextColor>
<android.R$attr: int numbersSelectorColor>
<android.R$attr: int numbersTextColor>
<android.R$attr: int numeric>
<android.R$attr: int numericModifiers>
<android.R$attr: int numericShortcut>
<android.R$attr: int offset>
<android.R$attr: int onClick>
<android.R$attr: int oneshot>
<android.R$attr: int opacity>
<android.R$attr: int opticalInsetBottom>
<android.R$attr: int opticalInsetLeft>
<android.R$attr: int opticalInsetRight>
<android.R$attr: int opticalInsetTop>
<android.R$attr: int order>
<android.R$attr: int orderInCategory>
<android.R$attr: int ordering>
<android.R$attr: int orderingFromXml>
<android.R$attr: int orientation>
<android.R$attr: int outAnimation>
<android.R$attr: int outlineAmbientShadowColor>
<android.R$attr: int outlineProvider>
<android.R$attr: int outlineSpotShadowColor>
<android.R$attr: int overScrollFooter>
<android.R$attr: int overScrollHeader>
<android.R$attr: int overScrollMode>
<android.R$attr: int overlapAnchor>
<android.R$attr: int overridesImplicitlyEnabledSubtype>
<android.R$attr: int packageNames>
<android.R$attr: int packageType>
<android.R$attr: int padding>
<android.R$attr: int paddingBottom>
<android.R$attr: int paddingEnd>
<android.R$attr: int paddingHorizontal>
<android.R$attr: int paddingLeft>
<android.R$attr: int paddingMode>
<android.R$attr: int paddingRight>
<android.R$attr: int paddingStart>
<android.R$attr: int paddingTop>
<android.R$attr: int paddingVertical>
<android.R$attr: int panelBackground>
<android.R$attr: int panelColorBackground>
<android.R$attr: int panelColorForeground>
<android.R$attr: int panelFullBackground>
<android.R$attr: int panelTextAppearance>
<android.R$attr: int parentActivityName>
<android.R$attr: int password>
<android.R$attr: int passwordsActivity>
<android.R$attr: int path>
<android.R$attr: int pathAdvancedPattern>
<android.R$attr: int pathData>
<android.R$attr: int pathPattern>
<android.R$attr: int pathPrefix>
<android.R$attr: int pathSuffix>
<android.R$attr: int patternPathData>
<android.R$attr: int permission>
<android.R$attr: int permissionFlags>
<android.R$attr: int permissionGroup>
<android.R$attr: int permissionGroupFlags>
<android.R$attr: int persistableMode>
<android.R$attr: int persistent>
<android.R$attr: int persistentDrawingCache>
<android.R$attr: int persistentWhenFeatureAvailable>
<android.R$attr: int phoneNumber>
<android.R$attr: int pivotX>
<android.R$attr: int pivotY>
<android.R$attr: int pointerIcon>
<android.R$attr: int popupAnimationStyle>
<android.R$attr: int popupBackground>
<android.R$attr: int popupCharacters>
<android.R$attr: int popupElevation>
<android.R$attr: int popupEnterTransition>
<android.R$attr: int popupExitTransition>
<android.R$attr: int popupKeyboard>
<android.R$attr: int popupLayout>
<android.R$attr: int popupMenuStyle>
<android.R$attr: int popupTheme>
<android.R$attr: int popupWindowStyle>
<android.R$attr: int port>
<android.R$attr: int positiveButtonText>
<android.R$attr: int preferKeepClear>
<android.R$attr: int preferMinimalPostProcessing>
<android.R$attr: int preferenceCategoryStyle>
<android.R$attr: int preferenceFragmentStyle>
<android.R$attr: int preferenceInformationStyle>
<android.R$attr: int preferenceLayoutChild>
<android.R$attr: int preferenceScreenStyle>
<android.R$attr: int preferenceStyle>
<android.R$attr: int presentationTheme>
<android.R$attr: int preserveLegacyExternalStorage>
<android.R$attr: int previewImage>
<android.R$attr: int previewLayout>
<android.R$attr: int primaryContentAlpha>
<android.R$attr: int priority>
<android.R$attr: int privateImeOptions>
<android.R$attr: int process>
<android.R$attr: int progress>
<android.R$attr: int progressBackgroundTint>
<android.R$attr: int progressBackgroundTintMode>
<android.R$attr: int progressBarPadding>
<android.R$attr: int progressBarStyle>
<android.R$attr: int progressBarStyleHorizontal>
<android.R$attr: int progressBarStyleInverse>
<android.R$attr: int progressBarStyleLarge>
<android.R$attr: int progressBarStyleLargeInverse>
<android.R$attr: int progressBarStyleSmall>
<android.R$attr: int progressBarStyleSmallInverse>
<android.R$attr: int progressBarStyleSmallTitle>
<android.R$attr: int progressDrawable>
<android.R$attr: int progressTint>
<android.R$attr: int progressTintMode>
<android.R$attr: int prompt>
<android.R$attr: int propertyName>
<android.R$attr: int propertyXName>
<android.R$attr: int propertyYName>
<android.R$attr: int protectionLevel>
<android.R$attr: int publicKey>
<android.R$attr: int queryActionMsg>
<android.R$attr: int queryAfterZeroResults>
<android.R$attr: int queryBackground>
<android.R$attr: int queryHint>
<android.R$attr: int quickContactBadgeStyleSmallWindowLarge>
<android.R$attr: int quickContactBadgeStyleSmallWindowMedium>
<android.R$attr: int quickContactBadgeStyleSmallWindowSmall>
<android.R$attr: int quickContactBadgeStyleWindowLarge>
<android.R$attr: int quickContactBadgeStyleWindowMedium>
<android.R$attr: int quickContactBadgeStyleWindowSmall>
<android.R$attr: int radioButtonStyle>
<android.R$attr: int radius>
<android.R$attr: int rating>
<android.R$attr: int ratingBarStyle>
<android.R$attr: int ratingBarStyleIndicator>
<android.R$attr: int ratingBarStyleSmall>
<android.R$attr: int readPermission>
<android.R$attr: int recognitionService>
<android.R$attr: int recreateOnConfigChanges>
<android.R$attr: int recycleEnabled>
<android.R$attr: int relinquishTaskIdentity>
<android.R$attr: int reparent>
<android.R$attr: int reparentWithOverlay>
<android.R$attr: int repeatCount>
<android.R$attr: int repeatMode>
<android.R$attr: int reqFiveWayNav>
<android.R$attr: int reqHardKeyboard>
<android.R$attr: int reqKeyboardType>
<android.R$attr: int reqNavigation>
<android.R$attr: int reqTouchScreen>
<android.R$attr: int requestLegacyExternalStorage>
<android.R$attr: int requestRawExternalStorageAccess>
<android.R$attr: int requireDeviceScreenOn>
<android.R$attr: int requireDeviceUnlock>
<android.R$attr: int required>
<android.R$attr: int requiredAccountType>
<android.R$attr: int requiredFeature>
<android.R$attr: int requiredForAllUsers>
<android.R$attr: int requiredNotFeature>
<android.R$attr: int requiredSplitTypes>
<android.R$attr: int requiresFadingEdge>
<android.R$attr: int requiresSmallestWidthDp>
<android.R$attr: int resetEnabledSettingsOnAppDataCleared>
<android.R$attr: int resizeClip>
<android.R$attr: int resizeMode>
<android.R$attr: int resizeable>
<android.R$attr: int resizeableActivity>
<android.R$attr: int resource>
<android.R$attr: int resourcesMap>
<android.R$attr: int restoreAnyVersion>
<android.R$attr: int restoreNeedsApplication>
<android.R$attr: int restrictedAccountType>
<android.R$attr: int restrictionType>
<android.R$attr: int resumeWhilePausing>
<android.R$attr: int reversible>
<android.R$attr: int revisionCode>
<android.R$attr: int right>
<android.R$attr: int ringtonePreferenceStyle>
<android.R$attr: int ringtoneType>
<android.R$attr: int rollbackDataPolicy>
<android.R$attr: int rotation>
<android.R$attr: int rotationAnimation>
<android.R$attr: int rotationX>
<android.R$attr: int rotationY>
<android.R$attr: int roundIcon>
<android.R$attr: int rowCount>
<android.R$attr: int rowDelay>
<android.R$attr: int rowEdgeFlags>
<android.R$attr: int rowHeight>
<android.R$attr: int rowOrderPreserved>
<android.R$attr: int saveEnabled>
<android.R$attr: int scaleGravity>
<android.R$attr: int scaleHeight>
<android.R$attr: int scaleType>
<android.R$attr: int scaleWidth>
<android.R$attr: int scaleX>
<android.R$attr: int scaleY>
<android.R$attr: int scheme>
<android.R$attr: int screenDensity>
<android.R$attr: int screenOrientation>
<android.R$attr: int screenReaderFocusable>
<android.R$attr: int screenSize>
<android.R$attr: int scrollHorizontally>
<android.R$attr: int scrollIndicators>
<android.R$attr: int scrollViewStyle>
<android.R$attr: int scrollX>
<android.R$attr: int scrollY>
<android.R$attr: int scrollbarAlwaysDrawHorizontalTrack>
<android.R$attr: int scrollbarAlwaysDrawVerticalTrack>
<android.R$attr: int scrollbarDefaultDelayBeforeFade>
<android.R$attr: int scrollbarFadeDuration>
<android.R$attr: int scrollbarSize>
<android.R$attr: int scrollbarStyle>
<android.R$attr: int scrollbarThumbHorizontal>
<android.R$attr: int scrollbarThumbVertical>
<android.R$attr: int scrollbarTrackHorizontal>
<android.R$attr: int scrollbarTrackVertical>
<android.R$attr: int scrollbars>
<android.R$attr: int scrollingCache>
<android.R$attr: int searchButtonText>
<android.R$attr: int searchHintIcon>
<android.R$attr: int searchIcon>
<android.R$attr: int searchMode>
<android.R$attr: int searchSettingsDescription>
<android.R$attr: int searchSuggestAuthority>
<android.R$attr: int searchSuggestIntentAction>
<android.R$attr: int searchSuggestIntentData>
<android.R$attr: int searchSuggestPath>
<android.R$attr: int searchSuggestSelection>
<android.R$attr: int searchSuggestThreshold>
<android.R$attr: int searchViewStyle>
<android.R$attr: int secondaryContentAlpha>
<android.R$attr: int secondaryProgress>
<android.R$attr: int secondaryProgressTint>
<android.R$attr: int secondaryProgressTintMode>
<android.R$attr: int secureElementName>
<android.R$attr: int seekBarStyle>
<android.R$attr: int segmentedButtonStyle>
<android.R$attr: int selectAllOnFocus>
<android.R$attr: int selectable>
<android.R$attr: int selectableAsDefault>
<android.R$attr: int selectableItemBackground>
<android.R$attr: int selectableItemBackgroundBorderless>
<android.R$attr: int selectedDateVerticalBar>
<android.R$attr: int selectedWeekBackgroundColor>
<android.R$attr: int selectionDividerHeight>
<android.R$attr: int sessionService>
<android.R$attr: int settingsActivity>
<android.R$attr: int settingsSliceUri>
<android.R$attr: int setupActivity>
<android.R$attr: int shadowColor>
<android.R$attr: int shadowDx>
<android.R$attr: int shadowDy>
<android.R$attr: int shadowRadius>
<android.R$attr: int shape>
<android.R$attr: int shareInterpolator>
<android.R$attr: int sharedUserId>
<android.R$attr: int sharedUserLabel>
<android.R$attr: int sharedUserMaxSdkVersion>
<android.R$attr: int shell>
<android.R$attr: int shortcutDisabledMessage>
<android.R$attr: int shortcutId>
<android.R$attr: int shortcutLongLabel>
<android.R$attr: int shortcutShortLabel>
<android.R$attr: int shouldDisableView>
<android.R$attr: int shouldUseDefaultUnfoldTransition>
<android.R$attr: int showAsAction>
<android.R$attr: int showBackdrop>
<android.R$attr: int showClockAndComplications>
<android.R$attr: int showDefault>
<android.R$attr: int showDividers>
<android.R$attr: int showForAllUsers>
<android.R$attr: int showInInputMethodPicker>
<android.R$attr: int showMetadataInPreview>
<android.R$attr: int showOnLockScreen>
<android.R$attr: int showSilent>
<android.R$attr: int showText>
<android.R$attr: int showWeekNumber>
<android.R$attr: int showWhenLocked>
<android.R$attr: int shownWeekCount>
<android.R$attr: int shrinkColumns>
<android.R$attr: int singleLine>
<android.R$attr: int singleLineTitle>
<android.R$attr: int singleUser>
<android.R$attr: int slideEdge>
<android.R$attr: int smallIcon>
<android.R$attr: int smallScreens>
<android.R$attr: int smoothScrollbar>
<android.R$attr: int soundEffectsEnabled>
<android.R$attr: int spacing>
<android.R$attr: int spinnerDropDownItemStyle>
<android.R$attr: int spinnerItemStyle>
<android.R$attr: int spinnerMode>
<android.R$attr: int spinnerStyle>
<android.R$attr: int spinnersShown>
<android.R$attr: int splashScreenTheme>
<android.R$attr: int splitMotionEvents>
<android.R$attr: int splitName>
<android.R$attr: int splitTrack>
<android.R$attr: int splitTypes>
<android.R$attr: int spotShadowAlpha>
<android.R$attr: int src>
<android.R$attr: int ssp>
<android.R$attr: int sspAdvancedPattern>
<android.R$attr: int sspPattern>
<android.R$attr: int sspPrefix>
<android.R$attr: int sspSuffix>
<android.R$attr: int stackFromBottom>
<android.R$attr: int stackViewStyle>
<android.R$attr: int starStyle>
<android.R$attr: int start>
<android.R$attr: int startColor>
<android.R$attr: int startDelay>
<android.R$attr: int startOffset>
<android.R$attr: int startX>
<android.R$attr: int startY>
<android.R$attr: int startYear>
<android.R$attr: int stateListAnimator>
<android.R$attr: int stateNotNeeded>
<android.R$attr: int state_above_anchor>
<android.R$attr: int state_accelerated>
<android.R$attr: int state_activated>
<android.R$attr: int state_active>
<android.R$attr: int state_checkable>
<android.R$attr: int state_checked>
<android.R$attr: int state_drag_can_accept>
<android.R$attr: int state_drag_hovered>
<android.R$attr: int state_empty>
<android.R$attr: int state_enabled>
<android.R$attr: int state_expanded>
<android.R$attr: int state_first>
<android.R$attr: int state_focused>
<android.R$attr: int state_hovered>
<android.R$attr: int state_last>
<android.R$attr: int state_long_pressable>
<android.R$attr: int state_middle>
<android.R$attr: int state_multiline>
<android.R$attr: int state_pressed>
<android.R$attr: int state_selected>
<android.R$attr: int state_single>
<android.R$attr: int state_window_focused>
<android.R$attr: int staticWallpaperPreview>
<android.R$attr: int statusBarColor>
<android.R$attr: int stepSize>
<android.R$attr: int stopWithTask>
<android.R$attr: int streamType>
<android.R$attr: int stretchColumns>
<android.R$attr: int stretchMode>
<android.R$attr: int strokeAlpha>
<android.R$attr: int strokeColor>
<android.R$attr: int strokeLineCap>
<android.R$attr: int strokeLineJoin>
<android.R$attr: int strokeMiterLimit>
<android.R$attr: int strokeWidth>
<android.R$attr: int subMenuArrow>
<android.R$attr: int submitBackground>
<android.R$attr: int subtitle>
<android.R$attr: int subtitleTextAppearance>
<android.R$attr: int subtitleTextColor>
<android.R$attr: int subtitleTextStyle>
<android.R$attr: int subtypeExtraValue>
<android.R$attr: int subtypeId>
<android.R$attr: int subtypeLocale>
<android.R$attr: int suggestActionMsg>
<android.R$attr: int suggestActionMsgColumn>
<android.R$attr: int suggestionRowLayout>
<android.R$attr: int summary>
<android.R$attr: int summaryColumn>
<android.R$attr: int summaryOff>
<android.R$attr: int summaryOn>
<android.R$attr: int supportedTypes>
<android.R$attr: int supportsAssist>
<android.R$attr: int supportsBatteryGameMode>
<android.R$attr: int supportsInlineSuggestions>
<android.R$attr: int supportsInlineSuggestionsWithTouchExploration>
<android.R$attr: int supportsLaunchVoiceAssistFromKeyguard>
<android.R$attr: int supportsLocalInteraction>
<android.R$attr: int supportsMultipleDisplays>
<android.R$attr: int supportsPerformanceGameMode>
<android.R$attr: int supportsPictureInPicture>
<android.R$attr: int supportsRtl>
<android.R$attr: int supportsStylusHandwriting>
<android.R$attr: int supportsSwitchingToNextInputMethod>
<android.R$attr: int supportsUploading>
<android.R$attr: int suppressesSpellChecker>
<android.R$attr: int switchMinWidth>
<android.R$attr: int switchPadding>
<android.R$attr: int switchPreferenceStyle>
<android.R$attr: int switchStyle>
<android.R$attr: int switchTextAppearance>
<android.R$attr: int switchTextOff>
<android.R$attr: int switchTextOn>
<android.R$attr: int syncable>
<android.R$attr: int tabStripEnabled>
<android.R$attr: int tabStripLeft>
<android.R$attr: int tabStripRight>
<android.R$attr: int tabWidgetStyle>
<android.R$attr: int tag>
<android.R$attr: int targetActivity>
<android.R$attr: int targetCellHeight>
<android.R$attr: int targetCellWidth>
<android.R$attr: int targetClass>
<android.R$attr: int targetDescriptions>
<android.R$attr: int targetId>
<android.R$attr: int targetName>
<android.R$attr: int targetPackage>
<android.R$attr: int targetProcesses>
<android.R$attr: int targetSandboxVersion>
<android.R$attr: int targetSdkVersion>
<android.R$attr: int taskAffinity>
<android.R$attr: int taskCloseEnterAnimation>
<android.R$attr: int taskCloseExitAnimation>
<android.R$attr: int taskOpenEnterAnimation>
<android.R$attr: int taskOpenExitAnimation>
<android.R$attr: int taskToBackEnterAnimation>
<android.R$attr: int taskToBackExitAnimation>
<android.R$attr: int taskToFrontEnterAnimation>
<android.R$attr: int taskToFrontExitAnimation>
<android.R$attr: int tension>
<android.R$attr: int testOnly>
<android.R$attr: int text>
<android.R$attr: int textAlignment>
<android.R$attr: int textAllCaps>
<android.R$attr: int textAppearance>
<android.R$attr: int textAppearanceButton>
<android.R$attr: int textAppearanceInverse>
<android.R$attr: int textAppearanceLarge>
<android.R$attr: int textAppearanceLargeInverse>
<android.R$attr: int textAppearanceLargePopupMenu>
<android.R$attr: int textAppearanceListItem>
<android.R$attr: int textAppearanceListItemSecondary>
<android.R$attr: int textAppearanceListItemSmall>
<android.R$attr: int textAppearanceMedium>
<android.R$attr: int textAppearanceMediumInverse>
<android.R$attr: int textAppearancePopupMenuHeader>
<android.R$attr: int textAppearanceSearchResultSubtitle>
<android.R$attr: int textAppearanceSearchResultTitle>
<android.R$attr: int textAppearanceSmall>
<android.R$attr: int textAppearanceSmallInverse>
<android.R$attr: int textAppearanceSmallPopupMenu>
<android.R$attr: int textCheckMark>
<android.R$attr: int textCheckMarkInverse>
<android.R$attr: int textColor>
<android.R$attr: int textColorAlertDialogListItem>
<android.R$attr: int textColorHighlight>
<android.R$attr: int textColorHighlightInverse>
<android.R$attr: int textColorHint>
<android.R$attr: int textColorHintInverse>
<android.R$attr: int textColorLink>
<android.R$attr: int textColorLinkInverse>
<android.R$attr: int textColorPrimary>
<android.R$attr: int textColorPrimaryDisableOnly>
<android.R$attr: int textColorPrimaryInverse>
<android.R$attr: int textColorPrimaryInverseDisableOnly>
<android.R$attr: int textColorPrimaryInverseNoDisable>
<android.R$attr: int textColorPrimaryNoDisable>
<android.R$attr: int textColorSecondary>
<android.R$attr: int textColorSecondaryInverse>
<android.R$attr: int textColorSecondaryInverseNoDisable>
<android.R$attr: int textColorSecondaryNoDisable>
<android.R$attr: int textColorTertiary>
<android.R$attr: int textColorTertiaryInverse>
<android.R$attr: int textCursorDrawable>
<android.R$attr: int textDirection>
<android.R$attr: int textEditNoPasteWindowLayout>
<android.R$attr: int textEditPasteWindowLayout>
<android.R$attr: int textEditSideNoPasteWindowLayout>
<android.R$attr: int textEditSidePasteWindowLayout>
<android.R$attr: int textEditSuggestionItemLayout>
<android.R$attr: int textFilterEnabled>
<android.R$attr: int textFontWeight>
<android.R$attr: int textIsSelectable>
<android.R$attr: int textLocale>
<android.R$attr: int textOff>
<android.R$attr: int textOn>
<android.R$attr: int textScaleX>
<android.R$attr: int textSelectHandle>
<android.R$attr: int textSelectHandleLeft>
<android.R$attr: int textSelectHandleRight>
<android.R$attr: int textSelectHandleWindowStyle>
<android.R$attr: int textSize>
<android.R$attr: int textStyle>
<android.R$attr: int textSuggestionsWindowStyle>
<android.R$attr: int textViewStyle>
<android.R$attr: int theme>
<android.R$attr: int thickness>
<android.R$attr: int thicknessRatio>
<android.R$attr: int thumb>
<android.R$attr: int thumbOffset>
<android.R$attr: int thumbPosition>
<android.R$attr: int thumbTextPadding>
<android.R$attr: int thumbTint>
<android.R$attr: int thumbTintMode>
<android.R$attr: int thumbnail>
<android.R$attr: int tickMark>
<android.R$attr: int tickMarkTint>
<android.R$attr: int tickMarkTintMode>
<android.R$attr: int tileMode>
<android.R$attr: int tileModeX>
<android.R$attr: int tileModeY>
<android.R$attr: int tileService>
<android.R$attr: int timePickerDialogTheme>
<android.R$attr: int timePickerMode>
<android.R$attr: int timePickerStyle>
<android.R$attr: int timeZone>
<android.R$attr: int tint>
<android.R$attr: int tintMode>
<android.R$attr: int title>
<android.R$attr: int titleCondensed>
<android.R$attr: int titleMargin>
<android.R$attr: int titleMarginBottom>
<android.R$attr: int titleMarginEnd>
<android.R$attr: int titleMarginStart>
<android.R$attr: int titleMarginTop>
<android.R$attr: int titleTextAppearance>
<android.R$attr: int titleTextColor>
<android.R$attr: int titleTextStyle>
<android.R$attr: int toAlpha>
<android.R$attr: int toDegrees>
<android.R$attr: int toExtendBottom>
<android.R$attr: int toExtendLeft>
<android.R$attr: int toExtendRight>
<android.R$attr: int toExtendTop>
<android.R$attr: int toId>
<android.R$attr: int toScene>
<android.R$attr: int toXDelta>
<android.R$attr: int toXScale>
<android.R$attr: int toYDelta>
<android.R$attr: int toYScale>
<android.R$attr: int toolbarStyle>
<android.R$attr: int tooltipText>
<android.R$attr: int top>
<android.R$attr: int topBright>
<android.R$attr: int topDark>
<android.R$attr: int topLeftRadius>
<android.R$attr: int topOffset>
<android.R$attr: int topRightRadius>
<android.R$attr: int touchscreenBlocksFocus>
<android.R$attr: int track>
<android.R$attr: int trackTint>
<android.R$attr: int trackTintMode>
<android.R$attr: int transcriptMode>
<android.R$attr: int transformPivotX>
<android.R$attr: int transformPivotY>
<android.R$attr: int transition>
<android.R$attr: int transitionGroup>
<android.R$attr: int transitionName>
<android.R$attr: int transitionOrdering>
<android.R$attr: int transitionVisibilityMode>
<android.R$attr: int translateX>
<android.R$attr: int translateY>
<android.R$attr: int translationX>
<android.R$attr: int translationY>
<android.R$attr: int translationZ>
<android.R$attr: int trimPathEnd>
<android.R$attr: int trimPathOffset>
<android.R$attr: int trimPathStart>
<android.R$attr: int ttcIndex>
<android.R$attr: int tunerCount>
<android.R$attr: int turnScreenOn>
<android.R$attr: int type>
<android.R$attr: int typeface>
<android.R$attr: int uiOptions>
<android.R$attr: int uncertainGestureColor>
<android.R$attr: int unfocusedMonthDateColor>
<android.R$attr: int unselectedAlpha>
<android.R$attr: int updatePeriodMillis>
<android.R$attr: int use32bitAbi>
<android.R$attr: int useAppZygote>
<android.R$attr: int useDefaultMargins>
<android.R$attr: int useEmbeddedDex>
<android.R$attr: int useIntrinsicSizeAsMinimum>
<android.R$attr: int useLevel>
<android.R$attr: int userVisible>
<android.R$attr: int usesCleartextTraffic>
<android.R$attr: int usesPermissionFlags>
<android.R$attr: int value>
<android.R$attr: int valueFrom>
<android.R$attr: int valueTo>
<android.R$attr: int valueType>
<android.R$attr: int variablePadding>
<android.R$attr: int vendor>
<android.R$attr: int version>
<android.R$attr: int versionCode>
<android.R$attr: int versionCodeMajor>
<android.R$attr: int versionMajor>
<android.R$attr: int versionName>
<android.R$attr: int verticalCorrection>
<android.R$attr: int verticalDivider>
<android.R$attr: int verticalGap>
<android.R$attr: int verticalScrollbarPosition>
<android.R$attr: int verticalSpacing>
<android.R$attr: int viewportHeight>
<android.R$attr: int viewportWidth>
<android.R$attr: int visibility>
<android.R$attr: int visible>
<android.R$attr: int visibleToInstantApps>
<android.R$attr: int vmSafeMode>
<android.R$attr: int voiceIcon>
<android.R$attr: int voiceLanguage>
<android.R$attr: int voiceLanguageModel>
<android.R$attr: int voiceMaxResults>
<android.R$attr: int voicePromptText>
<android.R$attr: int voiceSearchMode>
<android.R$attr: int wallpaperCloseEnterAnimation>
<android.R$attr: int wallpaperCloseExitAnimation>
<android.R$attr: int wallpaperIntraCloseEnterAnimation>
<android.R$attr: int wallpaperIntraCloseExitAnimation>
<android.R$attr: int wallpaperIntraOpenEnterAnimation>
<android.R$attr: int wallpaperIntraOpenExitAnimation>
<android.R$attr: int wallpaperOpenEnterAnimation>
<android.R$attr: int wallpaperOpenExitAnimation>
<android.R$attr: int webTextViewStyle>
<android.R$attr: int webViewStyle>
<android.R$attr: int weekDayTextAppearance>
<android.R$attr: int weekNumberColor>
<android.R$attr: int weekSeparatorLineColor>
<android.R$attr: int weightSum>
<android.R$attr: int widgetCategory>
<android.R$attr: int widgetFeatures>
<android.R$attr: int widgetLayout>
<android.R$attr: int width>
<android.R$attr: int windowActionBar>
<android.R$attr: int windowActionBarOverlay>
<android.R$attr: int windowActionModeOverlay>
<android.R$attr: int windowActivityTransitions>
<android.R$attr: int windowAllowEnterTransitionOverlap>
<android.R$attr: int windowAllowReturnTransitionOverlap>
<android.R$attr: int windowAnimationStyle>
<android.R$attr: int windowBackground>
<android.R$attr: int windowBackgroundBlurRadius>
<android.R$attr: int windowBackgroundFallback>
<android.R$attr: int windowBlurBehindEnabled>
<android.R$attr: int windowBlurBehindRadius>
<android.R$attr: int windowClipToOutline>
<android.R$attr: int windowCloseOnTouchOutside>
<android.R$attr: int windowContentOverlay>
<android.R$attr: int windowContentTransitionManager>
<android.R$attr: int windowContentTransitions>
<android.R$attr: int windowDisablePreview>
<android.R$attr: int windowDrawsSystemBarBackgrounds>
<android.R$attr: int windowElevation>
<android.R$attr: int windowEnableSplitTouch>
<android.R$attr: int windowEnterAnimation>
<android.R$attr: int windowEnterTransition>
<android.R$attr: int windowExitAnimation>
<android.R$attr: int windowExitTransition>
<android.R$attr: int windowFrame>
<android.R$attr: int windowFullscreen>
<android.R$attr: int windowHideAnimation>
<android.R$attr: int windowIsFloating>
<android.R$attr: int windowIsTranslucent>
<android.R$attr: int windowLayoutAffinity>
<android.R$attr: int windowLayoutInDisplayCutoutMode>
<android.R$attr: int windowLightNavigationBar>
<android.R$attr: int windowLightStatusBar>
<android.R$attr: int windowMinWidthMajor>
<android.R$attr: int windowMinWidthMinor>
<android.R$attr: int windowNoDisplay>
<android.R$attr: int windowNoTitle>
<android.R$attr: int windowOverscan>
<android.R$attr: int windowReenterTransition>
<android.R$attr: int windowReturnTransition>
<android.R$attr: int windowSharedElementEnterTransition>
<android.R$attr: int windowSharedElementExitTransition>
<android.R$attr: int windowSharedElementReenterTransition>
<android.R$attr: int windowSharedElementReturnTransition>
<android.R$attr: int windowSharedElementsUseOverlay>
<android.R$attr: int windowShowAnimation>
<android.R$attr: int windowShowWallpaper>
<android.R$attr: int windowSoftInputMode>
<android.R$attr: int windowSplashScreenAnimatedIcon>
<android.R$attr: int windowSplashScreenAnimationDuration>
<android.R$attr: int windowSplashScreenBackground>
<android.R$attr: int windowSplashScreenBehavior>
<android.R$attr: int windowSplashScreenBrandingImage>
<android.R$attr: int windowSplashScreenIconBackgroundColor>
<android.R$attr: int windowSplashscreenContent>
<android.R$attr: int windowSwipeToDismiss>
<android.R$attr: int windowTitleBackgroundStyle>
<android.R$attr: int windowTitleSize>
<android.R$attr: int windowTitleStyle>
<android.R$attr: int windowTransitionBackgroundFadeDuration>
<android.R$attr: int windowTranslucentNavigation>
<android.R$attr: int windowTranslucentStatus>
<android.R$attr: int writePermission>
<android.R$attr: int x>
<android.R$attr: int xlargeScreens>
<android.R$attr: int y>
<android.R$attr: int yearListItemTextAppearance>
<android.R$attr: int yearListSelectorColor>
<android.R$attr: int yesNoPreferenceStyle>
<android.R$attr: int zAdjustment>
<android.R$attr: int zygotePreloadName>
android.R$bool
<android.R$bool: void <init>()>
android.R$color
<android.R$color: void <init>()>
<android.R$color: int background_dark>
<android.R$color: int background_light>
<android.R$color: int black>
<android.R$color: int darker_gray>
<android.R$color: int holo_blue_bright>
<android.R$color: int holo_blue_dark>
<android.R$color: int holo_blue_light>
<android.R$color: int holo_green_dark>
<android.R$color: int holo_green_light>
<android.R$color: int holo_orange_dark>
<android.R$color: int holo_orange_light>
<android.R$color: int holo_purple>
<android.R$color: int holo_red_dark>
<android.R$color: int holo_red_light>
<android.R$color: int primary_text_dark>
<android.R$color: int primary_text_dark_nodisable>
<android.R$color: int primary_text_light>
<android.R$color: int primary_text_light_nodisable>
<android.R$color: int secondary_text_dark>
<android.R$color: int secondary_text_dark_nodisable>
<android.R$color: int secondary_text_light>
<android.R$color: int secondary_text_light_nodisable>
<android.R$color: int system_accent1_0>
<android.R$color: int system_accent1_10>
<android.R$color: int system_accent1_100>
<android.R$color: int system_accent1_1000>
<android.R$color: int system_accent1_200>
<android.R$color: int system_accent1_300>
<android.R$color: int system_accent1_400>
<android.R$color: int system_accent1_50>
<android.R$color: int system_accent1_500>
<android.R$color: int system_accent1_600>
<android.R$color: int system_accent1_700>
<android.R$color: int system_accent1_800>
<android.R$color: int system_accent1_900>
<android.R$color: int system_accent2_0>
<android.R$color: int system_accent2_10>
<android.R$color: int system_accent2_100>
<android.R$color: int system_accent2_1000>
<android.R$color: int system_accent2_200>
<android.R$color: int system_accent2_300>
<android.R$color: int system_accent2_400>
<android.R$color: int system_accent2_50>
<android.R$color: int system_accent2_500>
<android.R$color: int system_accent2_600>
<android.R$color: int system_accent2_700>
<android.R$color: int system_accent2_800>
<android.R$color: int system_accent2_900>
<android.R$color: int system_accent3_0>
<android.R$color: int system_accent3_10>
<android.R$color: int system_accent3_100>
<android.R$color: int system_accent3_1000>
<android.R$color: int system_accent3_200>
<android.R$color: int system_accent3_300>
<android.R$color: int system_accent3_400>
<android.R$color: int system_accent3_50>
<android.R$color: int system_accent3_500>
<android.R$color: int system_accent3_600>
<android.R$color: int system_accent3_700>
<android.R$color: int system_accent3_800>
<android.R$color: int system_accent3_900>
<android.R$color: int system_neutral1_0>
<android.R$color: int system_neutral1_10>
<android.R$color: int system_neutral1_100>
<android.R$color: int system_neutral1_1000>
<android.R$color: int system_neutral1_200>
<android.R$color: int system_neutral1_300>
<android.R$color: int system_neutral1_400>
<android.R$color: int system_neutral1_50>
<android.R$color: int system_neutral1_500>
<android.R$color: int system_neutral1_600>
<android.R$color: int system_neutral1_700>
<android.R$color: int system_neutral1_800>
<android.R$color: int system_neutral1_900>
<android.R$color: int system_neutral2_0>
<android.R$color: int system_neutral2_10>
<android.R$color: int system_neutral2_100>
<android.R$color: int system_neutral2_1000>
<android.R$color: int system_neutral2_200>
<android.R$color: int system_neutral2_300>
<android.R$color: int system_neutral2_400>
<android.R$color: int system_neutral2_50>
<android.R$color: int system_neutral2_500>
<android.R$color: int system_neutral2_600>
<android.R$color: int system_neutral2_700>
<android.R$color: int system_neutral2_800>
<android.R$color: int system_neutral2_900>
<android.R$color: int tab_indicator_text>
<android.R$color: int tertiary_text_dark>
<android.R$color: int tertiary_text_light>
<android.R$color: int transparent>
<android.R$color: int white>
<android.R$color: int widget_edittext_dark>
android.R$dimen
<android.R$dimen: void <init>()>
<android.R$dimen: int app_icon_size>
<android.R$dimen: int dialog_min_width_major>
<android.R$dimen: int dialog_min_width_minor>
<android.R$dimen: int notification_large_icon_height>
<android.R$dimen: int notification_large_icon_width>
<android.R$dimen: int system_app_widget_background_radius>
<android.R$dimen: int system_app_widget_inner_radius>
<android.R$dimen: int thumbnail_height>
<android.R$dimen: int thumbnail_width>
android.R$drawable
<android.R$drawable: void <init>()>
<android.R$drawable: int alert_dark_frame>
<android.R$drawable: int alert_light_frame>
<android.R$drawable: int arrow_down_float>
<android.R$drawable: int arrow_up_float>
<android.R$drawable: int bottom_bar>
<android.R$drawable: int btn_default>
<android.R$drawable: int btn_default_small>
<android.R$drawable: int btn_dialog>
<android.R$drawable: int btn_dropdown>
<android.R$drawable: int btn_minus>
<android.R$drawable: int btn_plus>
<android.R$drawable: int btn_radio>
<android.R$drawable: int btn_star>
<android.R$drawable: int btn_star_big_off>
<android.R$drawable: int btn_star_big_on>
<android.R$drawable: int button_onoff_indicator_off>
<android.R$drawable: int button_onoff_indicator_on>
<android.R$drawable: int checkbox_off_background>
<android.R$drawable: int checkbox_on_background>
<android.R$drawable: int dark_header>
<android.R$drawable: int dialog_frame>
<android.R$drawable: int dialog_holo_dark_frame>
<android.R$drawable: int dialog_holo_light_frame>
<android.R$drawable: int divider_horizontal_bright>
<android.R$drawable: int divider_horizontal_dark>
<android.R$drawable: int divider_horizontal_dim_dark>
<android.R$drawable: int divider_horizontal_textfield>
<android.R$drawable: int edit_text>
<android.R$drawable: int editbox_background>
<android.R$drawable: int editbox_background_normal>
<android.R$drawable: int editbox_dropdown_dark_frame>
<android.R$drawable: int editbox_dropdown_light_frame>
<android.R$drawable: int gallery_thumb>
<android.R$drawable: int ic_btn_speak_now>
<android.R$drawable: int ic_delete>
<android.R$drawable: int ic_dialog_alert>
<android.R$drawable: int ic_dialog_dialer>
<android.R$drawable: int ic_dialog_email>
<android.R$drawable: int ic_dialog_info>
<android.R$drawable: int ic_dialog_map>
<android.R$drawable: int ic_input_add>
<android.R$drawable: int ic_input_delete>
<android.R$drawable: int ic_input_get>
<android.R$drawable: int ic_lock_idle_alarm>
<android.R$drawable: int ic_lock_idle_charging>
<android.R$drawable: int ic_lock_idle_lock>
<android.R$drawable: int ic_lock_idle_low_battery>
<android.R$drawable: int ic_lock_lock>
<android.R$drawable: int ic_lock_power_off>
<android.R$drawable: int ic_lock_silent_mode>
<android.R$drawable: int ic_lock_silent_mode_off>
<android.R$drawable: int ic_media_ff>
<android.R$drawable: int ic_media_next>
<android.R$drawable: int ic_media_pause>
<android.R$drawable: int ic_media_play>
<android.R$drawable: int ic_media_previous>
<android.R$drawable: int ic_media_rew>
<android.R$drawable: int ic_menu_add>
<android.R$drawable: int ic_menu_agenda>
<android.R$drawable: int ic_menu_always_landscape_portrait>
<android.R$drawable: int ic_menu_call>
<android.R$drawable: int ic_menu_camera>
<android.R$drawable: int ic_menu_close_clear_cancel>
<android.R$drawable: int ic_menu_compass>
<android.R$drawable: int ic_menu_crop>
<android.R$drawable: int ic_menu_day>
<android.R$drawable: int ic_menu_delete>
<android.R$drawable: int ic_menu_directions>
<android.R$drawable: int ic_menu_edit>
<android.R$drawable: int ic_menu_gallery>
<android.R$drawable: int ic_menu_help>
<android.R$drawable: int ic_menu_info_details>
<android.R$drawable: int ic_menu_manage>
<android.R$drawable: int ic_menu_mapmode>
<android.R$drawable: int ic_menu_month>
<android.R$drawable: int ic_menu_more>
<android.R$drawable: int ic_menu_my_calendar>
<android.R$drawable: int ic_menu_mylocation>
<android.R$drawable: int ic_menu_myplaces>
<android.R$drawable: int ic_menu_preferences>
<android.R$drawable: int ic_menu_recent_history>
<android.R$drawable: int ic_menu_report_image>
<android.R$drawable: int ic_menu_revert>
<android.R$drawable: int ic_menu_rotate>
<android.R$drawable: int ic_menu_save>
<android.R$drawable: int ic_menu_search>
<android.R$drawable: int ic_menu_send>
<android.R$drawable: int ic_menu_set_as>
<android.R$drawable: int ic_menu_share>
<android.R$drawable: int ic_menu_slideshow>
<android.R$drawable: int ic_menu_sort_alphabetically>
<android.R$drawable: int ic_menu_sort_by_size>
<android.R$drawable: int ic_menu_today>
<android.R$drawable: int ic_menu_upload>
<android.R$drawable: int ic_menu_upload_you_tube>
<android.R$drawable: int ic_menu_view>
<android.R$drawable: int ic_menu_week>
<android.R$drawable: int ic_menu_zoom>
<android.R$drawable: int ic_notification_clear_all>
<android.R$drawable: int ic_notification_overlay>
<android.R$drawable: int ic_partial_secure>
<android.R$drawable: int ic_popup_disk_full>
<android.R$drawable: int ic_popup_reminder>
<android.R$drawable: int ic_popup_sync>
<android.R$drawable: int ic_search_category_default>
<android.R$drawable: int ic_secure>
<android.R$drawable: int list_selector_background>
<android.R$drawable: int menu_frame>
<android.R$drawable: int menu_full_frame>
<android.R$drawable: int menuitem_background>
<android.R$drawable: int picture_frame>
<android.R$drawable: int presence_audio_away>
<android.R$drawable: int presence_audio_busy>
<android.R$drawable: int presence_audio_online>
<android.R$drawable: int presence_away>
<android.R$drawable: int presence_busy>
<android.R$drawable: int presence_invisible>
<android.R$drawable: int presence_offline>
<android.R$drawable: int presence_online>
<android.R$drawable: int presence_video_away>
<android.R$drawable: int presence_video_busy>
<android.R$drawable: int presence_video_online>
<android.R$drawable: int progress_horizontal>
<android.R$drawable: int progress_indeterminate_horizontal>
<android.R$drawable: int radiobutton_off_background>
<android.R$drawable: int radiobutton_on_background>
<android.R$drawable: int screen_background_dark>
<android.R$drawable: int screen_background_dark_transparent>
<android.R$drawable: int screen_background_light>
<android.R$drawable: int screen_background_light_transparent>
<android.R$drawable: int spinner_background>
<android.R$drawable: int spinner_dropdown_background>
<android.R$drawable: int star_big_off>
<android.R$drawable: int star_big_on>
<android.R$drawable: int star_off>
<android.R$drawable: int star_on>
<android.R$drawable: int stat_notify_call_mute>
<android.R$drawable: int stat_notify_chat>
<android.R$drawable: int stat_notify_error>
<android.R$drawable: int stat_notify_missed_call>
<android.R$drawable: int stat_notify_more>
<android.R$drawable: int stat_notify_sdcard>
<android.R$drawable: int stat_notify_sdcard_prepare>
<android.R$drawable: int stat_notify_sdcard_usb>
<android.R$drawable: int stat_notify_sync>
<android.R$drawable: int stat_notify_sync_noanim>
<android.R$drawable: int stat_notify_voicemail>
<android.R$drawable: int stat_sys_data_bluetooth>
<android.R$drawable: int stat_sys_download>
<android.R$drawable: int stat_sys_download_done>
<android.R$drawable: int stat_sys_headset>
<android.R$drawable: int stat_sys_phone_call>
<android.R$drawable: int stat_sys_phone_call_forward>
<android.R$drawable: int stat_sys_phone_call_on_hold>
<android.R$drawable: int stat_sys_speakerphone>
<android.R$drawable: int stat_sys_upload>
<android.R$drawable: int stat_sys_upload_done>
<android.R$drawable: int stat_sys_vp_phone_call>
<android.R$drawable: int stat_sys_vp_phone_call_on_hold>
<android.R$drawable: int stat_sys_warning>
<android.R$drawable: int status_bar_item_app_background>
<android.R$drawable: int status_bar_item_background>
<android.R$drawable: int sym_action_call>
<android.R$drawable: int sym_action_chat>
<android.R$drawable: int sym_action_email>
<android.R$drawable: int sym_call_incoming>
<android.R$drawable: int sym_call_missed>
<android.R$drawable: int sym_call_outgoing>
<android.R$drawable: int sym_contact_card>
<android.R$drawable: int sym_def_app_icon>
<android.R$drawable: int title_bar>
<android.R$drawable: int title_bar_tall>
<android.R$drawable: int toast_frame>
<android.R$drawable: int zoom_plate>
android.R$fraction
<android.R$fraction: void <init>()>
android.R$id
<android.R$id: void <init>()>
<android.R$id: int accessibilityActionContextClick>
<android.R$id: int accessibilityActionDragCancel>
<android.R$id: int accessibilityActionDragDrop>
<android.R$id: int accessibilityActionDragStart>
<android.R$id: int accessibilityActionHideTooltip>
<android.R$id: int accessibilityActionImeEnter>
<android.R$id: int accessibilityActionMoveWindow>
<android.R$id: int accessibilityActionPageDown>
<android.R$id: int accessibilityActionPageLeft>
<android.R$id: int accessibilityActionPageRight>
<android.R$id: int accessibilityActionPageUp>
<android.R$id: int accessibilityActionPressAndHold>
<android.R$id: int accessibilityActionScrollDown>
<android.R$id: int accessibilityActionScrollLeft>
<android.R$id: int accessibilityActionScrollRight>
<android.R$id: int accessibilityActionScrollToPosition>
<android.R$id: int accessibilityActionScrollUp>
<android.R$id: int accessibilityActionSetProgress>
<android.R$id: int accessibilityActionShowOnScreen>
<android.R$id: int accessibilityActionShowTextSuggestions>
<android.R$id: int accessibilityActionShowTooltip>
<android.R$id: int accessibilitySystemActionBack>
<android.R$id: int accessibilitySystemActionHome>
<android.R$id: int accessibilitySystemActionLockScreen>
<android.R$id: int accessibilitySystemActionNotifications>
<android.R$id: int accessibilitySystemActionPowerDialog>
<android.R$id: int accessibilitySystemActionQuickSettings>
<android.R$id: int accessibilitySystemActionRecents>
<android.R$id: int accessibilitySystemActionTakeScreenshot>
<android.R$id: int accessibilitySystemActionToggleSplitScreen>
<android.R$id: int addToDictionary>
<android.R$id: int autofill>
<android.R$id: int background>
<android.R$id: int button1>
<android.R$id: int button2>
<android.R$id: int button3>
<android.R$id: int candidatesArea>
<android.R$id: int checkbox>
<android.R$id: int closeButton>
<android.R$id: int content>
<android.R$id: int copy>
<android.R$id: int copyUrl>
<android.R$id: int custom>
<android.R$id: int cut>
<android.R$id: int edit>
<android.R$id: int empty>
<android.R$id: int extractArea>
<android.R$id: int hint>
<android.R$id: int home>
<android.R$id: int icon>
<android.R$id: int icon1>
<android.R$id: int icon2>
<android.R$id: int icon_frame>
<android.R$id: int input>
<android.R$id: int inputArea>
<android.R$id: int inputExtractAccessories>
<android.R$id: int inputExtractAction>
<android.R$id: int inputExtractEditText>
<android.R$id: int keyboardView>
<android.R$id: int list>
<android.R$id: int list_container>
<android.R$id: int mask>
<android.R$id: int message>
<android.R$id: int navigationBarBackground>
<android.R$id: int paste>
<android.R$id: int pasteAsPlainText>
<android.R$id: int primary>
<android.R$id: int progress>
<android.R$id: int redo>
<android.R$id: int replaceText>
<android.R$id: int secondaryProgress>
<android.R$id: int selectAll>
<android.R$id: int selectTextMode>
<android.R$id: int selectedIcon>
<android.R$id: int shareText>
<android.R$id: int startSelectingText>
<android.R$id: int statusBarBackground>
<android.R$id: int stopSelectingText>
<android.R$id: int summary>
<android.R$id: int switchInputMethod>
<android.R$id: int switch_widget>
<android.R$id: int tabcontent>
<android.R$id: int tabhost>
<android.R$id: int tabs>
<android.R$id: int text1>
<android.R$id: int text2>
<android.R$id: int textAssist>
<android.R$id: int title>
<android.R$id: int toggle>
<android.R$id: int undo>
<android.R$id: int widget_frame>
android.R$integer
<android.R$integer: void <init>()>
<android.R$integer: int config_longAnimTime>
<android.R$integer: int config_mediumAnimTime>
<android.R$integer: int config_shortAnimTime>
<android.R$integer: int status_bar_notification_info_maxnum>
android.R$interpolator
<android.R$interpolator: void <init>()>
<android.R$interpolator: int accelerate_cubic>
<android.R$interpolator: int accelerate_decelerate>
<android.R$interpolator: int accelerate_quad>
<android.R$interpolator: int accelerate_quint>
<android.R$interpolator: int anticipate>
<android.R$interpolator: int anticipate_overshoot>
<android.R$interpolator: int bounce>
<android.R$interpolator: int cycle>
<android.R$interpolator: int decelerate_cubic>
<android.R$interpolator: int decelerate_quad>
<android.R$interpolator: int decelerate_quint>
<android.R$interpolator: int fast_out_extra_slow_in>
<android.R$interpolator: int fast_out_linear_in>
<android.R$interpolator: int fast_out_slow_in>
<android.R$interpolator: int linear>
<android.R$interpolator: int linear_out_slow_in>
<android.R$interpolator: int overshoot>
android.R$layout
<android.R$layout: void <init>()>
<android.R$layout: int activity_list_item>
<android.R$layout: int browser_link_context_header>
<android.R$layout: int expandable_list_content>
<android.R$layout: int list_content>
<android.R$layout: int preference_category>
<android.R$layout: int select_dialog_item>
<android.R$layout: int select_dialog_multichoice>
<android.R$layout: int select_dialog_singlechoice>
<android.R$layout: int simple_dropdown_item_1line>
<android.R$layout: int simple_expandable_list_item_1>
<android.R$layout: int simple_expandable_list_item_2>
<android.R$layout: int simple_gallery_item>
<android.R$layout: int simple_list_item_1>
<android.R$layout: int simple_list_item_2>
<android.R$layout: int simple_list_item_activated_1>
<android.R$layout: int simple_list_item_activated_2>
<android.R$layout: int simple_list_item_checked>
<android.R$layout: int simple_list_item_multiple_choice>
<android.R$layout: int simple_list_item_single_choice>
<android.R$layout: int simple_selectable_list_item>
<android.R$layout: int simple_spinner_dropdown_item>
<android.R$layout: int simple_spinner_item>
<android.R$layout: int test_list_item>
<android.R$layout: int two_line_list_item>
android.R$menu
<android.R$menu: void <init>()>
android.R$mipmap
<android.R$mipmap: void <init>()>
<android.R$mipmap: int sym_def_app_icon>
android.R$plurals
<android.R$plurals: void <init>()>
android.R$raw
<android.R$raw: void <init>()>
android.R$string
<android.R$string: void <init>()>
<android.R$string: int VideoView_error_button>
<android.R$string: int VideoView_error_text_invalid_progressive_playback>
<android.R$string: int VideoView_error_text_unknown>
<android.R$string: int VideoView_error_title>
<android.R$string: int autofill>
<android.R$string: int cancel>
<android.R$string: int copy>
<android.R$string: int copyUrl>
<android.R$string: int cut>
<android.R$string: int defaultMsisdnAlphaTag>
<android.R$string: int defaultVoiceMailAlphaTag>
<android.R$string: int dialog_alert_title>
<android.R$string: int emptyPhoneNumber>
<android.R$string: int fingerprint_icon_content_description>
<android.R$string: int httpErrorBadUrl>
<android.R$string: int httpErrorUnsupportedScheme>
<android.R$string: int no>
<android.R$string: int ok>
<android.R$string: int paste>
<android.R$string: int paste_as_plain_text>
<android.R$string: int search_go>
<android.R$string: int selectAll>
<android.R$string: int selectTextMode>
<android.R$string: int status_bar_notification_info_overflow>
<android.R$string: int unknownName>
<android.R$string: int untitled>
<android.R$string: int yes>
android.R$style
<android.R$style: void <init>()>
<android.R$style: int Animation>
<android.R$style: int Animation_Activity>
<android.R$style: int Animation_Dialog>
<android.R$style: int Animation_InputMethod>
<android.R$style: int Animation_Toast>
<android.R$style: int Animation_Translucent>
<android.R$style: int DeviceDefault_ButtonBar>
<android.R$style: int DeviceDefault_ButtonBar_AlertDialog>
<android.R$style: int DeviceDefault_Light_ButtonBar>
<android.R$style: int DeviceDefault_Light_ButtonBar_AlertDialog>
<android.R$style: int DeviceDefault_Light_SegmentedButton>
<android.R$style: int DeviceDefault_SegmentedButton>
<android.R$style: int Holo_ButtonBar>
<android.R$style: int Holo_ButtonBar_AlertDialog>
<android.R$style: int Holo_Light_ButtonBar>
<android.R$style: int Holo_Light_ButtonBar_AlertDialog>
<android.R$style: int Holo_Light_SegmentedButton>
<android.R$style: int Holo_SegmentedButton>
<android.R$style: int MediaButton>
<android.R$style: int MediaButton_Ffwd>
<android.R$style: int MediaButton_Next>
<android.R$style: int MediaButton_Pause>
<android.R$style: int MediaButton_Play>
<android.R$style: int MediaButton_Previous>
<android.R$style: int MediaButton_Rew>
<android.R$style: int TextAppearance>
<android.R$style: int TextAppearance_DeviceDefault>
<android.R$style: int TextAppearance_DeviceDefault_DialogWindowTitle>
<android.R$style: int TextAppearance_DeviceDefault_Headline>
<android.R$style: int TextAppearance_DeviceDefault_Inverse>
<android.R$style: int TextAppearance_DeviceDefault_Large>
<android.R$style: int TextAppearance_DeviceDefault_Large_Inverse>
<android.R$style: int TextAppearance_DeviceDefault_Medium>
<android.R$style: int TextAppearance_DeviceDefault_Medium_Inverse>
<android.R$style: int TextAppearance_DeviceDefault_SearchResult_Subtitle>
<android.R$style: int TextAppearance_DeviceDefault_SearchResult_Title>
<android.R$style: int TextAppearance_DeviceDefault_Small>
<android.R$style: int TextAppearance_DeviceDefault_Small_Inverse>
<android.R$style: int TextAppearance_DeviceDefault_Widget>
<android.R$style: int TextAppearance_DeviceDefault_Widget_ActionBar_Menu>
<android.R$style: int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle>
<android.R$style: int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_Inverse>
<android.R$style: int TextAppearance_DeviceDefault_Widget_ActionBar_Title>
<android.R$style: int TextAppearance_DeviceDefault_Widget_ActionBar_Title_Inverse>
<android.R$style: int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle>
<android.R$style: int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_Inverse>
<android.R$style: int TextAppearance_DeviceDefault_Widget_ActionMode_Title>
<android.R$style: int TextAppearance_DeviceDefault_Widget_ActionMode_Title_Inverse>
<android.R$style: int TextAppearance_DeviceDefault_Widget_Button>
<android.R$style: int TextAppearance_DeviceDefault_Widget_DropDownHint>
<android.R$style: int TextAppearance_DeviceDefault_Widget_DropDownItem>
<android.R$style: int TextAppearance_DeviceDefault_Widget_EditText>
<android.R$style: int TextAppearance_DeviceDefault_Widget_IconMenu_Item>
<android.R$style: int TextAppearance_DeviceDefault_Widget_PopupMenu>
<android.R$style: int TextAppearance_DeviceDefault_Widget_PopupMenu_Large>
<android.R$style: int TextAppearance_DeviceDefault_Widget_PopupMenu_Small>
<android.R$style: int TextAppearance_DeviceDefault_Widget_TabWidget>
<android.R$style: int TextAppearance_DeviceDefault_Widget_TextView>
<android.R$style: int TextAppearance_DeviceDefault_Widget_TextView_PopupMenu>
<android.R$style: int TextAppearance_DeviceDefault_Widget_TextView_SpinnerItem>
<android.R$style: int TextAppearance_DeviceDefault_WindowTitle>
<android.R$style: int TextAppearance_DialogWindowTitle>
<android.R$style: int TextAppearance_Holo>
<android.R$style: int TextAppearance_Holo_DialogWindowTitle>
<android.R$style: int TextAppearance_Holo_Inverse>
<android.R$style: int TextAppearance_Holo_Large>
<android.R$style: int TextAppearance_Holo_Large_Inverse>
<android.R$style: int TextAppearance_Holo_Medium>
<android.R$style: int TextAppearance_Holo_Medium_Inverse>
<android.R$style: int TextAppearance_Holo_SearchResult_Subtitle>
<android.R$style: int TextAppearance_Holo_SearchResult_Title>
<android.R$style: int TextAppearance_Holo_Small>
<android.R$style: int TextAppearance_Holo_Small_Inverse>
<android.R$style: int TextAppearance_Holo_Widget>
<android.R$style: int TextAppearance_Holo_Widget_ActionBar_Menu>
<android.R$style: int TextAppearance_Holo_Widget_ActionBar_Subtitle>
<android.R$style: int TextAppearance_Holo_Widget_ActionBar_Subtitle_Inverse>
<android.R$style: int TextAppearance_Holo_Widget_ActionBar_Title>
<android.R$style: int TextAppearance_Holo_Widget_ActionBar_Title_Inverse>
<android.R$style: int TextAppearance_Holo_Widget_ActionMode_Subtitle>
<android.R$style: int TextAppearance_Holo_Widget_ActionMode_Subtitle_Inverse>
<android.R$style: int TextAppearance_Holo_Widget_ActionMode_Title>
<android.R$style: int TextAppearance_Holo_Widget_ActionMode_Title_Inverse>
<android.R$style: int TextAppearance_Holo_Widget_Button>
<android.R$style: int TextAppearance_Holo_Widget_DropDownHint>
<android.R$style: int TextAppearance_Holo_Widget_DropDownItem>
<android.R$style: int TextAppearance_Holo_Widget_EditText>
<android.R$style: int TextAppearance_Holo_Widget_IconMenu_Item>
<android.R$style: int TextAppearance_Holo_Widget_PopupMenu>
<android.R$style: int TextAppearance_Holo_Widget_PopupMenu_Large>
<android.R$style: int TextAppearance_Holo_Widget_PopupMenu_Small>
<android.R$style: int TextAppearance_Holo_Widget_TabWidget>
<android.R$style: int TextAppearance_Holo_Widget_TextView>
<android.R$style: int TextAppearance_Holo_Widget_TextView_PopupMenu>
<android.R$style: int TextAppearance_Holo_Widget_TextView_SpinnerItem>
<android.R$style: int TextAppearance_Holo_WindowTitle>
<android.R$style: int TextAppearance_Inverse>
<android.R$style: int TextAppearance_Large>
<android.R$style: int TextAppearance_Large_Inverse>
<android.R$style: int TextAppearance_Material>
<android.R$style: int TextAppearance_Material_Body1>
<android.R$style: int TextAppearance_Material_Body2>
<android.R$style: int TextAppearance_Material_Button>
<android.R$style: int TextAppearance_Material_Caption>
<android.R$style: int TextAppearance_Material_DialogWindowTitle>
<android.R$style: int TextAppearance_Material_Display1>
<android.R$style: int TextAppearance_Material_Display2>
<android.R$style: int TextAppearance_Material_Display3>
<android.R$style: int TextAppearance_Material_Display4>
<android.R$style: int TextAppearance_Material_Headline>
<android.R$style: int TextAppearance_Material_Inverse>
<android.R$style: int TextAppearance_Material_Large>
<android.R$style: int TextAppearance_Material_Large_Inverse>
<android.R$style: int TextAppearance_Material_Medium>
<android.R$style: int TextAppearance_Material_Medium_Inverse>
<android.R$style: int TextAppearance_Material_Menu>
<android.R$style: int TextAppearance_Material_Notification>
<android.R$style: int TextAppearance_Material_Notification_Emphasis>
<android.R$style: int TextAppearance_Material_Notification_Info>
<android.R$style: int TextAppearance_Material_Notification_Line2>
<android.R$style: int TextAppearance_Material_Notification_Time>
<android.R$style: int TextAppearance_Material_Notification_Title>
<android.R$style: int TextAppearance_Material_SearchResult_Subtitle>
<android.R$style: int TextAppearance_Material_SearchResult_Title>
<android.R$style: int TextAppearance_Material_Small>
<android.R$style: int TextAppearance_Material_Small_Inverse>
<android.R$style: int TextAppearance_Material_Subhead>
<android.R$style: int TextAppearance_Material_Title>
<android.R$style: int TextAppearance_Material_Widget>
<android.R$style: int TextAppearance_Material_Widget_ActionBar_Menu>
<android.R$style: int TextAppearance_Material_Widget_ActionBar_Subtitle>
<android.R$style: int TextAppearance_Material_Widget_ActionBar_Subtitle_Inverse>
<android.R$style: int TextAppearance_Material_Widget_ActionBar_Title>
<android.R$style: int TextAppearance_Material_Widget_ActionBar_Title_Inverse>
<android.R$style: int TextAppearance_Material_Widget_ActionMode_Subtitle>
<android.R$style: int TextAppearance_Material_Widget_ActionMode_Subtitle_Inverse>
<android.R$style: int TextAppearance_Material_Widget_ActionMode_Title>
<android.R$style: int TextAppearance_Material_Widget_ActionMode_Title_Inverse>
<android.R$style: int TextAppearance_Material_Widget_Button>
<android.R$style: int TextAppearance_Material_Widget_Button_Borderless_Colored>
<android.R$style: int TextAppearance_Material_Widget_Button_Colored>
<android.R$style: int TextAppearance_Material_Widget_Button_Inverse>
<android.R$style: int TextAppearance_Material_Widget_DropDownHint>
<android.R$style: int TextAppearance_Material_Widget_DropDownItem>
<android.R$style: int TextAppearance_Material_Widget_EditText>
<android.R$style: int TextAppearance_Material_Widget_IconMenu_Item>
<android.R$style: int TextAppearance_Material_Widget_PopupMenu>
<android.R$style: int TextAppearance_Material_Widget_PopupMenu_Large>
<android.R$style: int TextAppearance_Material_Widget_PopupMenu_Small>
<android.R$style: int TextAppearance_Material_Widget_TabWidget>
<android.R$style: int TextAppearance_Material_Widget_TextView>
<android.R$style: int TextAppearance_Material_Widget_TextView_PopupMenu>
<android.R$style: int TextAppearance_Material_Widget_TextView_SpinnerItem>
<android.R$style: int TextAppearance_Material_Widget_Toolbar_Subtitle>
<android.R$style: int TextAppearance_Material_Widget_Toolbar_Title>
<android.R$style: int TextAppearance_Material_WindowTitle>
<android.R$style: int TextAppearance_Medium>
<android.R$style: int TextAppearance_Medium_Inverse>
<android.R$style: int TextAppearance_Small>
<android.R$style: int TextAppearance_Small_Inverse>
<android.R$style: int TextAppearance_StatusBar_EventContent>
<android.R$style: int TextAppearance_StatusBar_EventContent_Title>
<android.R$style: int TextAppearance_StatusBar_Icon>
<android.R$style: int TextAppearance_StatusBar_Title>
<android.R$style: int TextAppearance_SuggestionHighlight>
<android.R$style: int TextAppearance_Theme>
<android.R$style: int TextAppearance_Theme_Dialog>
<android.R$style: int TextAppearance_Widget>
<android.R$style: int TextAppearance_Widget_Button>
<android.R$style: int TextAppearance_Widget_DropDownHint>
<android.R$style: int TextAppearance_Widget_DropDownItem>
<android.R$style: int TextAppearance_Widget_EditText>
<android.R$style: int TextAppearance_Widget_IconMenu_Item>
<android.R$style: int TextAppearance_Widget_PopupMenu_Large>
<android.R$style: int TextAppearance_Widget_PopupMenu_Small>
<android.R$style: int TextAppearance_Widget_TabWidget>
<android.R$style: int TextAppearance_Widget_TextView>
<android.R$style: int TextAppearance_Widget_TextView_PopupMenu>
<android.R$style: int TextAppearance_Widget_TextView_SpinnerItem>
<android.R$style: int TextAppearance_WindowTitle>
<android.R$style: int Theme>
<android.R$style: int ThemeOverlay>
<android.R$style: int ThemeOverlay_DeviceDefault_Accent_DayNight>
<android.R$style: int ThemeOverlay_Material>
<android.R$style: int ThemeOverlay_Material_ActionBar>
<android.R$style: int ThemeOverlay_Material_Dark>
<android.R$style: int ThemeOverlay_Material_Dark_ActionBar>
<android.R$style: int ThemeOverlay_Material_Dialog>
<android.R$style: int ThemeOverlay_Material_Dialog_Alert>
<android.R$style: int ThemeOverlay_Material_Light>
<android.R$style: int Theme_Black>
<android.R$style: int Theme_Black_NoTitleBar>
<android.R$style: int Theme_Black_NoTitleBar_Fullscreen>
<android.R$style: int Theme_DeviceDefault>
<android.R$style: int Theme_DeviceDefault_DayNight>
<android.R$style: int Theme_DeviceDefault_Dialog>
<android.R$style: int Theme_DeviceDefault_DialogWhenLarge>
<android.R$style: int Theme_DeviceDefault_DialogWhenLarge_NoActionBar>
<android.R$style: int Theme_DeviceDefault_Dialog_Alert>
<android.R$style: int Theme_DeviceDefault_Dialog_MinWidth>
<android.R$style: int Theme_DeviceDefault_Dialog_NoActionBar>
<android.R$style: int Theme_DeviceDefault_Dialog_NoActionBar_MinWidth>
<android.R$style: int Theme_DeviceDefault_InputMethod>
<android.R$style: int Theme_DeviceDefault_Light>
<android.R$style: int Theme_DeviceDefault_Light_DarkActionBar>
<android.R$style: int Theme_DeviceDefault_Light_Dialog>
<android.R$style: int Theme_DeviceDefault_Light_DialogWhenLarge>
<android.R$style: int Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBar>
<android.R$style: int Theme_DeviceDefault_Light_Dialog_Alert>
<android.R$style: int Theme_DeviceDefault_Light_Dialog_MinWidth>
<android.R$style: int Theme_DeviceDefault_Light_Dialog_NoActionBar>
<android.R$style: int Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidth>
<android.R$style: int Theme_DeviceDefault_Light_NoActionBar>
<android.R$style: int Theme_DeviceDefault_Light_NoActionBar_Fullscreen>
<android.R$style: int Theme_DeviceDefault_Light_NoActionBar_Overscan>
<android.R$style: int Theme_DeviceDefault_Light_NoActionBar_TranslucentDecor>
<android.R$style: int Theme_DeviceDefault_Light_Panel>
<android.R$style: int Theme_DeviceDefault_NoActionBar>
<android.R$style: int Theme_DeviceDefault_NoActionBar_Fullscreen>
<android.R$style: int Theme_DeviceDefault_NoActionBar_Overscan>
<android.R$style: int Theme_DeviceDefault_NoActionBar_TranslucentDecor>
<android.R$style: int Theme_DeviceDefault_Panel>
<android.R$style: int Theme_DeviceDefault_Settings>
<android.R$style: int Theme_DeviceDefault_Wallpaper>
<android.R$style: int Theme_DeviceDefault_Wallpaper_NoTitleBar>
<android.R$style: int Theme_Dialog>
<android.R$style: int Theme_Holo>
<android.R$style: int Theme_Holo_Dialog>
<android.R$style: int Theme_Holo_DialogWhenLarge>
<android.R$style: int Theme_Holo_DialogWhenLarge_NoActionBar>
<android.R$style: int Theme_Holo_Dialog_MinWidth>
<android.R$style: int Theme_Holo_Dialog_NoActionBar>
<android.R$style: int Theme_Holo_Dialog_NoActionBar_MinWidth>
<android.R$style: int Theme_Holo_InputMethod>
<android.R$style: int Theme_Holo_Light>
<android.R$style: int Theme_Holo_Light_DarkActionBar>
<android.R$style: int Theme_Holo_Light_Dialog>
<android.R$style: int Theme_Holo_Light_DialogWhenLarge>
<android.R$style: int Theme_Holo_Light_DialogWhenLarge_NoActionBar>
<android.R$style: int Theme_Holo_Light_Dialog_MinWidth>
<android.R$style: int Theme_Holo_Light_Dialog_NoActionBar>
<android.R$style: int Theme_Holo_Light_Dialog_NoActionBar_MinWidth>
<android.R$style: int Theme_Holo_Light_NoActionBar>
<android.R$style: int Theme_Holo_Light_NoActionBar_Fullscreen>
<android.R$style: int Theme_Holo_Light_NoActionBar_Overscan>
<android.R$style: int Theme_Holo_Light_NoActionBar_TranslucentDecor>
<android.R$style: int Theme_Holo_Light_Panel>
<android.R$style: int Theme_Holo_NoActionBar>
<android.R$style: int Theme_Holo_NoActionBar_Fullscreen>
<android.R$style: int Theme_Holo_NoActionBar_Overscan>
<android.R$style: int Theme_Holo_NoActionBar_TranslucentDecor>
<android.R$style: int Theme_Holo_Panel>
<android.R$style: int Theme_Holo_Wallpaper>
<android.R$style: int Theme_Holo_Wallpaper_NoTitleBar>
<android.R$style: int Theme_InputMethod>
<android.R$style: int Theme_Light>
<android.R$style: int Theme_Light_NoTitleBar>
<android.R$style: int Theme_Light_NoTitleBar_Fullscreen>
<android.R$style: int Theme_Light_Panel>
<android.R$style: int Theme_Light_WallpaperSettings>
<android.R$style: int Theme_Material>
<android.R$style: int Theme_Material_Dialog>
<android.R$style: int Theme_Material_DialogWhenLarge>
<android.R$style: int Theme_Material_DialogWhenLarge_NoActionBar>
<android.R$style: int Theme_Material_Dialog_Alert>
<android.R$style: int Theme_Material_Dialog_MinWidth>
<android.R$style: int Theme_Material_Dialog_NoActionBar>
<android.R$style: int Theme_Material_Dialog_NoActionBar_MinWidth>
<android.R$style: int Theme_Material_Dialog_Presentation>
<android.R$style: int Theme_Material_InputMethod>
<android.R$style: int Theme_Material_Light>
<android.R$style: int Theme_Material_Light_DarkActionBar>
<android.R$style: int Theme_Material_Light_Dialog>
<android.R$style: int Theme_Material_Light_DialogWhenLarge>
<android.R$style: int Theme_Material_Light_DialogWhenLarge_DarkActionBar>
<android.R$style: int Theme_Material_Light_DialogWhenLarge_NoActionBar>
<android.R$style: int Theme_Material_Light_Dialog_Alert>
<android.R$style: int Theme_Material_Light_Dialog_MinWidth>
<android.R$style: int Theme_Material_Light_Dialog_NoActionBar>
<android.R$style: int Theme_Material_Light_Dialog_NoActionBar_MinWidth>
<android.R$style: int Theme_Material_Light_Dialog_Presentation>
<android.R$style: int Theme_Material_Light_LightStatusBar>
<android.R$style: int Theme_Material_Light_NoActionBar>
<android.R$style: int Theme_Material_Light_NoActionBar_Fullscreen>
<android.R$style: int Theme_Material_Light_NoActionBar_Overscan>
<android.R$style: int Theme_Material_Light_NoActionBar_TranslucentDecor>
<android.R$style: int Theme_Material_Light_Panel>
<android.R$style: int Theme_Material_Light_Voice>
<android.R$style: int Theme_Material_NoActionBar>
<android.R$style: int Theme_Material_NoActionBar_Fullscreen>
<android.R$style: int Theme_Material_NoActionBar_Overscan>
<android.R$style: int Theme_Material_NoActionBar_TranslucentDecor>
<android.R$style: int Theme_Material_Panel>
<android.R$style: int Theme_Material_Settings>
<android.R$style: int Theme_Material_Voice>
<android.R$style: int Theme_Material_Wallpaper>
<android.R$style: int Theme_Material_Wallpaper_NoTitleBar>
<android.R$style: int Theme_NoDisplay>
<android.R$style: int Theme_NoTitleBar>
<android.R$style: int Theme_NoTitleBar_Fullscreen>
<android.R$style: int Theme_NoTitleBar_OverlayActionModes>
<android.R$style: int Theme_Panel>
<android.R$style: int Theme_Translucent>
<android.R$style: int Theme_Translucent_NoTitleBar>
<android.R$style: int Theme_Translucent_NoTitleBar_Fullscreen>
<android.R$style: int Theme_Wallpaper>
<android.R$style: int Theme_WallpaperSettings>
<android.R$style: int Theme_Wallpaper_NoTitleBar>
<android.R$style: int Theme_Wallpaper_NoTitleBar_Fullscreen>
<android.R$style: int Theme_WithActionBar>
<android.R$style: int Widget>
<android.R$style: int Widget_AbsListView>
<android.R$style: int Widget_ActionBar>
<android.R$style: int Widget_ActionBar_TabBar>
<android.R$style: int Widget_ActionBar_TabText>
<android.R$style: int Widget_ActionBar_TabView>
<android.R$style: int Widget_ActionButton>
<android.R$style: int Widget_ActionButton_CloseMode>
<android.R$style: int Widget_ActionButton_Overflow>
<android.R$style: int Widget_AutoCompleteTextView>
<android.R$style: int Widget_Button>
<android.R$style: int Widget_Button_Inset>
<android.R$style: int Widget_Button_Small>
<android.R$style: int Widget_Button_Toggle>
<android.R$style: int Widget_CalendarView>
<android.R$style: int Widget_CompoundButton>
<android.R$style: int Widget_CompoundButton_CheckBox>
<android.R$style: int Widget_CompoundButton_RadioButton>
<android.R$style: int Widget_CompoundButton_Star>
<android.R$style: int Widget_DatePicker>
<android.R$style: int Widget_DeviceDefault>
<android.R$style: int Widget_DeviceDefault_ActionBar>
<android.R$style: int Widget_DeviceDefault_ActionBar_Solid>
<android.R$style: int Widget_DeviceDefault_ActionBar_TabBar>
<android.R$style: int Widget_DeviceDefault_ActionBar_TabText>
<android.R$style: int Widget_DeviceDefault_ActionBar_TabView>
<android.R$style: int Widget_DeviceDefault_ActionButton>
<android.R$style: int Widget_DeviceDefault_ActionButton_CloseMode>
<android.R$style: int Widget_DeviceDefault_ActionButton_Overflow>
<android.R$style: int Widget_DeviceDefault_ActionButton_TextButton>
<android.R$style: int Widget_DeviceDefault_ActionMode>
<android.R$style: int Widget_DeviceDefault_AutoCompleteTextView>
<android.R$style: int Widget_DeviceDefault_Button>
<android.R$style: int Widget_DeviceDefault_Button_Borderless>
<android.R$style: int Widget_DeviceDefault_Button_Borderless_Colored>
<android.R$style: int Widget_DeviceDefault_Button_Borderless_Small>
<android.R$style: int Widget_DeviceDefault_Button_Colored>
<android.R$style: int Widget_DeviceDefault_Button_Inset>
<android.R$style: int Widget_DeviceDefault_Button_Small>
<android.R$style: int Widget_DeviceDefault_Button_Toggle>
<android.R$style: int Widget_DeviceDefault_CalendarView>
<android.R$style: int Widget_DeviceDefault_CheckedTextView>
<android.R$style: int Widget_DeviceDefault_CompoundButton_CheckBox>
<android.R$style: int Widget_DeviceDefault_CompoundButton_RadioButton>
<android.R$style: int Widget_DeviceDefault_CompoundButton_Star>
<android.R$style: int Widget_DeviceDefault_DatePicker>
<android.R$style: int Widget_DeviceDefault_DropDownItem>
<android.R$style: int Widget_DeviceDefault_DropDownItem_Spinner>
<android.R$style: int Widget_DeviceDefault_EditText>
<android.R$style: int Widget_DeviceDefault_ExpandableListView>
<android.R$style: int Widget_DeviceDefault_FastScroll>
<android.R$style: int Widget_DeviceDefault_GridView>
<android.R$style: int Widget_DeviceDefault_HorizontalScrollView>
<android.R$style: int Widget_DeviceDefault_ImageButton>
<android.R$style: int Widget_DeviceDefault_Light>
<android.R$style: int Widget_DeviceDefault_Light_ActionBar>
<android.R$style: int Widget_DeviceDefault_Light_ActionBar_Solid>
<android.R$style: int Widget_DeviceDefault_Light_ActionBar_Solid_Inverse>
<android.R$style: int Widget_DeviceDefault_Light_ActionBar_TabBar>
<android.R$style: int Widget_DeviceDefault_Light_ActionBar_TabBar_Inverse>
<android.R$style: int Widget_DeviceDefault_Light_ActionBar_TabText>
<android.R$style: int Widget_DeviceDefault_Light_ActionBar_TabText_Inverse>
<android.R$style: int Widget_DeviceDefault_Light_ActionBar_TabView>
<android.R$style: int Widget_DeviceDefault_Light_ActionBar_TabView_Inverse>
<android.R$style: int Widget_DeviceDefault_Light_ActionButton>
<android.R$style: int Widget_DeviceDefault_Light_ActionButton_CloseMode>
<android.R$style: int Widget_DeviceDefault_Light_ActionButton_Overflow>
<android.R$style: int Widget_DeviceDefault_Light_ActionMode>
<android.R$style: int Widget_DeviceDefault_Light_ActionMode_Inverse>
<android.R$style: int Widget_DeviceDefault_Light_AutoCompleteTextView>
<android.R$style: int Widget_DeviceDefault_Light_Button>
<android.R$style: int Widget_DeviceDefault_Light_Button_Borderless_Small>
<android.R$style: int Widget_DeviceDefault_Light_Button_Inset>
<android.R$style: int Widget_DeviceDefault_Light_Button_Small>
<android.R$style: int Widget_DeviceDefault_Light_Button_Toggle>
<android.R$style: int Widget_DeviceDefault_Light_CalendarView>
<android.R$style: int Widget_DeviceDefault_Light_CheckedTextView>
<android.R$style: int Widget_DeviceDefault_Light_CompoundButton_CheckBox>
<android.R$style: int Widget_DeviceDefault_Light_CompoundButton_RadioButton>
<android.R$style: int Widget_DeviceDefault_Light_CompoundButton_Star>
<android.R$style: int Widget_DeviceDefault_Light_DropDownItem>
<android.R$style: int Widget_DeviceDefault_Light_DropDownItem_Spinner>
<android.R$style: int Widget_DeviceDefault_Light_EditText>
<android.R$style: int Widget_DeviceDefault_Light_ExpandableListView>
<android.R$style: int Widget_DeviceDefault_Light_FastScroll>
<android.R$style: int Widget_DeviceDefault_Light_GridView>
<android.R$style: int Widget_DeviceDefault_Light_HorizontalScrollView>
<android.R$style: int Widget_DeviceDefault_Light_ImageButton>
<android.R$style: int Widget_DeviceDefault_Light_ListPopupWindow>
<android.R$style: int Widget_DeviceDefault_Light_ListView>
<android.R$style: int Widget_DeviceDefault_Light_ListView_DropDown>
<android.R$style: int Widget_DeviceDefault_Light_MediaRouteButton>
<android.R$style: int Widget_DeviceDefault_Light_PopupMenu>
<android.R$style: int Widget_DeviceDefault_Light_PopupWindow>
<android.R$style: int Widget_DeviceDefault_Light_ProgressBar>
<android.R$style: int Widget_DeviceDefault_Light_ProgressBar_Horizontal>
<android.R$style: int Widget_DeviceDefault_Light_ProgressBar_Inverse>
<android.R$style: int Widget_DeviceDefault_Light_ProgressBar_Large>
<android.R$style: int Widget_DeviceDefault_Light_ProgressBar_Large_Inverse>
<android.R$style: int Widget_DeviceDefault_Light_ProgressBar_Small>
<android.R$style: int Widget_DeviceDefault_Light_ProgressBar_Small_Inverse>
<android.R$style: int Widget_DeviceDefault_Light_ProgressBar_Small_Title>
<android.R$style: int Widget_DeviceDefault_Light_RatingBar>
<android.R$style: int Widget_DeviceDefault_Light_RatingBar_Indicator>
<android.R$style: int Widget_DeviceDefault_Light_RatingBar_Small>
<android.R$style: int Widget_DeviceDefault_Light_ScrollView>
<android.R$style: int Widget_DeviceDefault_Light_SeekBar>
<android.R$style: int Widget_DeviceDefault_Light_Spinner>
<android.R$style: int Widget_DeviceDefault_Light_StackView>
<android.R$style: int Widget_DeviceDefault_Light_Tab>
<android.R$style: int Widget_DeviceDefault_Light_TabWidget>
<android.R$style: int Widget_DeviceDefault_Light_TextView>
<android.R$style: int Widget_DeviceDefault_Light_TextView_SpinnerItem>
<android.R$style: int Widget_DeviceDefault_Light_WebTextView>
<android.R$style: int Widget_DeviceDefault_Light_WebView>
<android.R$style: int Widget_DeviceDefault_ListPopupWindow>
<android.R$style: int Widget_DeviceDefault_ListView>
<android.R$style: int Widget_DeviceDefault_ListView_DropDown>
<android.R$style: int Widget_DeviceDefault_MediaRouteButton>
<android.R$style: int Widget_DeviceDefault_PopupMenu>
<android.R$style: int Widget_DeviceDefault_PopupWindow>
<android.R$style: int Widget_DeviceDefault_ProgressBar>
<android.R$style: int Widget_DeviceDefault_ProgressBar_Horizontal>
<android.R$style: int Widget_DeviceDefault_ProgressBar_Large>
<android.R$style: int Widget_DeviceDefault_ProgressBar_Small>
<android.R$style: int Widget_DeviceDefault_ProgressBar_Small_Title>
<android.R$style: int Widget_DeviceDefault_RatingBar>
<android.R$style: int Widget_DeviceDefault_RatingBar_Indicator>
<android.R$style: int Widget_DeviceDefault_RatingBar_Small>
<android.R$style: int Widget_DeviceDefault_ScrollView>
<android.R$style: int Widget_DeviceDefault_SeekBar>
<android.R$style: int Widget_DeviceDefault_Spinner>
<android.R$style: int Widget_DeviceDefault_StackView>
<android.R$style: int Widget_DeviceDefault_Tab>
<android.R$style: int Widget_DeviceDefault_TabWidget>
<android.R$style: int Widget_DeviceDefault_TextView>
<android.R$style: int Widget_DeviceDefault_TextView_SpinnerItem>
<android.R$style: int Widget_DeviceDefault_WebTextView>
<android.R$style: int Widget_DeviceDefault_WebView>
<android.R$style: int Widget_DropDownItem>
<android.R$style: int Widget_DropDownItem_Spinner>
<android.R$style: int Widget_EditText>
<android.R$style: int Widget_ExpandableListView>
<android.R$style: int Widget_FastScroll>
<android.R$style: int Widget_FragmentBreadCrumbs>
<android.R$style: int Widget_Gallery>
<android.R$style: int Widget_GridView>
<android.R$style: int Widget_Holo>
<android.R$style: int Widget_Holo_ActionBar>
<android.R$style: int Widget_Holo_ActionBar_Solid>
<android.R$style: int Widget_Holo_ActionBar_TabBar>
<android.R$style: int Widget_Holo_ActionBar_TabText>
<android.R$style: int Widget_Holo_ActionBar_TabView>
<android.R$style: int Widget_Holo_ActionButton>
<android.R$style: int Widget_Holo_ActionButton_CloseMode>
<android.R$style: int Widget_Holo_ActionButton_Overflow>
<android.R$style: int Widget_Holo_ActionButton_TextButton>
<android.R$style: int Widget_Holo_ActionMode>
<android.R$style: int Widget_Holo_AutoCompleteTextView>
<android.R$style: int Widget_Holo_Button>
<android.R$style: int Widget_Holo_Button_Borderless>
<android.R$style: int Widget_Holo_Button_Borderless_Small>
<android.R$style: int Widget_Holo_Button_Inset>
<android.R$style: int Widget_Holo_Button_Small>
<android.R$style: int Widget_Holo_Button_Toggle>
<android.R$style: int Widget_Holo_CalendarView>
<android.R$style: int Widget_Holo_CheckedTextView>
<android.R$style: int Widget_Holo_CompoundButton_CheckBox>
<android.R$style: int Widget_Holo_CompoundButton_RadioButton>
<android.R$style: int Widget_Holo_CompoundButton_Star>
<android.R$style: int Widget_Holo_DatePicker>
<android.R$style: int Widget_Holo_DropDownItem>
<android.R$style: int Widget_Holo_DropDownItem_Spinner>
<android.R$style: int Widget_Holo_EditText>
<android.R$style: int Widget_Holo_ExpandableListView>
<android.R$style: int Widget_Holo_GridView>
<android.R$style: int Widget_Holo_HorizontalScrollView>
<android.R$style: int Widget_Holo_ImageButton>
<android.R$style: int Widget_Holo_Light>
<android.R$style: int Widget_Holo_Light_ActionBar>
<android.R$style: int Widget_Holo_Light_ActionBar_Solid>
<android.R$style: int Widget_Holo_Light_ActionBar_Solid_Inverse>
<android.R$style: int Widget_Holo_Light_ActionBar_TabBar>
<android.R$style: int Widget_Holo_Light_ActionBar_TabBar_Inverse>
<android.R$style: int Widget_Holo_Light_ActionBar_TabText>
<android.R$style: int Widget_Holo_Light_ActionBar_TabText_Inverse>
<android.R$style: int Widget_Holo_Light_ActionBar_TabView>
<android.R$style: int Widget_Holo_Light_ActionBar_TabView_Inverse>
<android.R$style: int Widget_Holo_Light_ActionButton>
<android.R$style: int Widget_Holo_Light_ActionButton_CloseMode>
<android.R$style: int Widget_Holo_Light_ActionButton_Overflow>
<android.R$style: int Widget_Holo_Light_ActionMode>
<android.R$style: int Widget_Holo_Light_ActionMode_Inverse>
<android.R$style: int Widget_Holo_Light_AutoCompleteTextView>
<android.R$style: int Widget_Holo_Light_Button>
<android.R$style: int Widget_Holo_Light_Button_Borderless_Small>
<android.R$style: int Widget_Holo_Light_Button_Inset>
<android.R$style: int Widget_Holo_Light_Button_Small>
<android.R$style: int Widget_Holo_Light_Button_Toggle>
<android.R$style: int Widget_Holo_Light_CalendarView>
<android.R$style: int Widget_Holo_Light_CheckedTextView>
<android.R$style: int Widget_Holo_Light_CompoundButton_CheckBox>
<android.R$style: int Widget_Holo_Light_CompoundButton_RadioButton>
<android.R$style: int Widget_Holo_Light_CompoundButton_Star>
<android.R$style: int Widget_Holo_Light_DropDownItem>
<android.R$style: int Widget_Holo_Light_DropDownItem_Spinner>
<android.R$style: int Widget_Holo_Light_EditText>
<android.R$style: int Widget_Holo_Light_ExpandableListView>
<android.R$style: int Widget_Holo_Light_GridView>
<android.R$style: int Widget_Holo_Light_HorizontalScrollView>
<android.R$style: int Widget_Holo_Light_ImageButton>
<android.R$style: int Widget_Holo_Light_ListPopupWindow>
<android.R$style: int Widget_Holo_Light_ListView>
<android.R$style: int Widget_Holo_Light_ListView_DropDown>
<android.R$style: int Widget_Holo_Light_MediaRouteButton>
<android.R$style: int Widget_Holo_Light_PopupMenu>
<android.R$style: int Widget_Holo_Light_PopupWindow>
<android.R$style: int Widget_Holo_Light_ProgressBar>
<android.R$style: int Widget_Holo_Light_ProgressBar_Horizontal>
<android.R$style: int Widget_Holo_Light_ProgressBar_Inverse>
<android.R$style: int Widget_Holo_Light_ProgressBar_Large>
<android.R$style: int Widget_Holo_Light_ProgressBar_Large_Inverse>
<android.R$style: int Widget_Holo_Light_ProgressBar_Small>
<android.R$style: int Widget_Holo_Light_ProgressBar_Small_Inverse>
<android.R$style: int Widget_Holo_Light_ProgressBar_Small_Title>
<android.R$style: int Widget_Holo_Light_RatingBar>
<android.R$style: int Widget_Holo_Light_RatingBar_Indicator>
<android.R$style: int Widget_Holo_Light_RatingBar_Small>
<android.R$style: int Widget_Holo_Light_ScrollView>
<android.R$style: int Widget_Holo_Light_SeekBar>
<android.R$style: int Widget_Holo_Light_Spinner>
<android.R$style: int Widget_Holo_Light_Tab>
<android.R$style: int Widget_Holo_Light_TabWidget>
<android.R$style: int Widget_Holo_Light_TextView>
<android.R$style: int Widget_Holo_Light_TextView_SpinnerItem>
<android.R$style: int Widget_Holo_Light_WebTextView>
<android.R$style: int Widget_Holo_Light_WebView>
<android.R$style: int Widget_Holo_ListPopupWindow>
<android.R$style: int Widget_Holo_ListView>
<android.R$style: int Widget_Holo_ListView_DropDown>
<android.R$style: int Widget_Holo_MediaRouteButton>
<android.R$style: int Widget_Holo_PopupMenu>
<android.R$style: int Widget_Holo_PopupWindow>
<android.R$style: int Widget_Holo_ProgressBar>
<android.R$style: int Widget_Holo_ProgressBar_Horizontal>
<android.R$style: int Widget_Holo_ProgressBar_Large>
<android.R$style: int Widget_Holo_ProgressBar_Small>
<android.R$style: int Widget_Holo_ProgressBar_Small_Title>
<android.R$style: int Widget_Holo_RatingBar>
<android.R$style: int Widget_Holo_RatingBar_Indicator>
<android.R$style: int Widget_Holo_RatingBar_Small>
<android.R$style: int Widget_Holo_ScrollView>
<android.R$style: int Widget_Holo_SeekBar>
<android.R$style: int Widget_Holo_Spinner>
<android.R$style: int Widget_Holo_Tab>
<android.R$style: int Widget_Holo_TabWidget>
<android.R$style: int Widget_Holo_TextView>
<android.R$style: int Widget_Holo_TextView_SpinnerItem>
<android.R$style: int Widget_Holo_WebTextView>
<android.R$style: int Widget_Holo_WebView>
<android.R$style: int Widget_ImageButton>
<android.R$style: int Widget_ImageWell>
<android.R$style: int Widget_KeyboardView>
<android.R$style: int Widget_ListPopupWindow>
<android.R$style: int Widget_ListView>
<android.R$style: int Widget_ListView_DropDown>
<android.R$style: int Widget_ListView_Menu>
<android.R$style: int Widget_ListView_White>
<android.R$style: int Widget_Material>
<android.R$style: int Widget_Material_ActionBar>
<android.R$style: int Widget_Material_ActionBar_Solid>
<android.R$style: int Widget_Material_ActionBar_TabBar>
<android.R$style: int Widget_Material_ActionBar_TabText>
<android.R$style: int Widget_Material_ActionBar_TabView>
<android.R$style: int Widget_Material_ActionButton>
<android.R$style: int Widget_Material_ActionButton_CloseMode>
<android.R$style: int Widget_Material_ActionButton_Overflow>
<android.R$style: int Widget_Material_ActionMode>
<android.R$style: int Widget_Material_AutoCompleteTextView>
<android.R$style: int Widget_Material_Button>
<android.R$style: int Widget_Material_ButtonBar>
<android.R$style: int Widget_Material_ButtonBar_AlertDialog>
<android.R$style: int Widget_Material_Button_Borderless>
<android.R$style: int Widget_Material_Button_Borderless_Colored>
<android.R$style: int Widget_Material_Button_Borderless_Small>
<android.R$style: int Widget_Material_Button_Colored>
<android.R$style: int Widget_Material_Button_Inset>
<android.R$style: int Widget_Material_Button_Small>
<android.R$style: int Widget_Material_Button_Toggle>
<android.R$style: int Widget_Material_CalendarView>
<android.R$style: int Widget_Material_CheckedTextView>
<android.R$style: int Widget_Material_CompoundButton_CheckBox>
<android.R$style: int Widget_Material_CompoundButton_RadioButton>
<android.R$style: int Widget_Material_CompoundButton_Star>
<android.R$style: int Widget_Material_CompoundButton_Switch>
<android.R$style: int Widget_Material_DatePicker>
<android.R$style: int Widget_Material_DropDownItem>
<android.R$style: int Widget_Material_DropDownItem_Spinner>
<android.R$style: int Widget_Material_EditText>
<android.R$style: int Widget_Material_ExpandableListView>
<android.R$style: int Widget_Material_FastScroll>
<android.R$style: int Widget_Material_GridView>
<android.R$style: int Widget_Material_HorizontalScrollView>
<android.R$style: int Widget_Material_ImageButton>
<android.R$style: int Widget_Material_Light>
<android.R$style: int Widget_Material_Light_ActionBar>
<android.R$style: int Widget_Material_Light_ActionBar_Solid>
<android.R$style: int Widget_Material_Light_ActionBar_TabBar>
<android.R$style: int Widget_Material_Light_ActionBar_TabText>
<android.R$style: int Widget_Material_Light_ActionBar_TabView>
<android.R$style: int Widget_Material_Light_ActionButton>
<android.R$style: int Widget_Material_Light_ActionButton_CloseMode>
<android.R$style: int Widget_Material_Light_ActionButton_Overflow>
<android.R$style: int Widget_Material_Light_ActionMode>
<android.R$style: int Widget_Material_Light_AutoCompleteTextView>
<android.R$style: int Widget_Material_Light_Button>
<android.R$style: int Widget_Material_Light_ButtonBar>
<android.R$style: int Widget_Material_Light_ButtonBar_AlertDialog>
<android.R$style: int Widget_Material_Light_Button_Borderless>
<android.R$style: int Widget_Material_Light_Button_Borderless_Colored>
<android.R$style: int Widget_Material_Light_Button_Borderless_Small>
<android.R$style: int Widget_Material_Light_Button_Inset>
<android.R$style: int Widget_Material_Light_Button_Small>
<android.R$style: int Widget_Material_Light_Button_Toggle>
<android.R$style: int Widget_Material_Light_CalendarView>
<android.R$style: int Widget_Material_Light_CheckedTextView>
<android.R$style: int Widget_Material_Light_CompoundButton_CheckBox>
<android.R$style: int Widget_Material_Light_CompoundButton_RadioButton>
<android.R$style: int Widget_Material_Light_CompoundButton_Star>
<android.R$style: int Widget_Material_Light_CompoundButton_Switch>
<android.R$style: int Widget_Material_Light_DatePicker>
<android.R$style: int Widget_Material_Light_DropDownItem>
<android.R$style: int Widget_Material_Light_DropDownItem_Spinner>
<android.R$style: int Widget_Material_Light_EditText>
<android.R$style: int Widget_Material_Light_ExpandableListView>
<android.R$style: int Widget_Material_Light_FastScroll>
<android.R$style: int Widget_Material_Light_GridView>
<android.R$style: int Widget_Material_Light_HorizontalScrollView>
<android.R$style: int Widget_Material_Light_ImageButton>
<android.R$style: int Widget_Material_Light_ListPopupWindow>
<android.R$style: int Widget_Material_Light_ListView>
<android.R$style: int Widget_Material_Light_ListView_DropDown>
<android.R$style: int Widget_Material_Light_MediaRouteButton>
<android.R$style: int Widget_Material_Light_NumberPicker>
<android.R$style: int Widget_Material_Light_PopupMenu>
<android.R$style: int Widget_Material_Light_PopupMenu_Overflow>
<android.R$style: int Widget_Material_Light_PopupWindow>
<android.R$style: int Widget_Material_Light_ProgressBar>
<android.R$style: int Widget_Material_Light_ProgressBar_Horizontal>
<android.R$style: int Widget_Material_Light_ProgressBar_Inverse>
<android.R$style: int Widget_Material_Light_ProgressBar_Large>
<android.R$style: int Widget_Material_Light_ProgressBar_Large_Inverse>
<android.R$style: int Widget_Material_Light_ProgressBar_Small>
<android.R$style: int Widget_Material_Light_ProgressBar_Small_Inverse>
<android.R$style: int Widget_Material_Light_ProgressBar_Small_Title>
<android.R$style: int Widget_Material_Light_RatingBar>
<android.R$style: int Widget_Material_Light_RatingBar_Indicator>
<android.R$style: int Widget_Material_Light_RatingBar_Small>
<android.R$style: int Widget_Material_Light_ScrollView>
<android.R$style: int Widget_Material_Light_SearchView>
<android.R$style: int Widget_Material_Light_SeekBar>
<android.R$style: int Widget_Material_Light_SegmentedButton>
<android.R$style: int Widget_Material_Light_Spinner>
<android.R$style: int Widget_Material_Light_Spinner_Underlined>
<android.R$style: int Widget_Material_Light_StackView>
<android.R$style: int Widget_Material_Light_Tab>
<android.R$style: int Widget_Material_Light_TabWidget>
<android.R$style: int Widget_Material_Light_TextView>
<android.R$style: int Widget_Material_Light_TextView_SpinnerItem>
<android.R$style: int Widget_Material_Light_TimePicker>
<android.R$style: int Widget_Material_Light_WebTextView>
<android.R$style: int Widget_Material_Light_WebView>
<android.R$style: int Widget_Material_ListPopupWindow>
<android.R$style: int Widget_Material_ListView>
<android.R$style: int Widget_Material_ListView_DropDown>
<android.R$style: int Widget_Material_MediaRouteButton>
<android.R$style: int Widget_Material_NumberPicker>
<android.R$style: int Widget_Material_PopupMenu>
<android.R$style: int Widget_Material_PopupMenu_Overflow>
<android.R$style: int Widget_Material_PopupWindow>
<android.R$style: int Widget_Material_ProgressBar>
<android.R$style: int Widget_Material_ProgressBar_Horizontal>
<android.R$style: int Widget_Material_ProgressBar_Large>
<android.R$style: int Widget_Material_ProgressBar_Small>
<android.R$style: int Widget_Material_ProgressBar_Small_Title>
<android.R$style: int Widget_Material_RatingBar>
<android.R$style: int Widget_Material_RatingBar_Indicator>
<android.R$style: int Widget_Material_RatingBar_Small>
<android.R$style: int Widget_Material_ScrollView>
<android.R$style: int Widget_Material_SearchView>
<android.R$style: int Widget_Material_SeekBar>
<android.R$style: int Widget_Material_SeekBar_Discrete>
<android.R$style: int Widget_Material_SegmentedButton>
<android.R$style: int Widget_Material_Spinner>
<android.R$style: int Widget_Material_Spinner_Underlined>
<android.R$style: int Widget_Material_StackView>
<android.R$style: int Widget_Material_Tab>
<android.R$style: int Widget_Material_TabWidget>
<android.R$style: int Widget_Material_TextView>
<android.R$style: int Widget_Material_TextView_SpinnerItem>
<android.R$style: int Widget_Material_TimePicker>
<android.R$style: int Widget_Material_Toolbar>
<android.R$style: int Widget_Material_Toolbar_Button_Navigation>
<android.R$style: int Widget_Material_WebTextView>
<android.R$style: int Widget_Material_WebView>
<android.R$style: int Widget_PopupMenu>
<android.R$style: int Widget_PopupWindow>
<android.R$style: int Widget_ProgressBar>
<android.R$style: int Widget_ProgressBar_Horizontal>
<android.R$style: int Widget_ProgressBar_Inverse>
<android.R$style: int Widget_ProgressBar_Large>
<android.R$style: int Widget_ProgressBar_Large_Inverse>
<android.R$style: int Widget_ProgressBar_Small>
<android.R$style: int Widget_ProgressBar_Small_Inverse>
<android.R$style: int Widget_RatingBar>
<android.R$style: int Widget_ScrollView>
<android.R$style: int Widget_SeekBar>
<android.R$style: int Widget_Spinner>
<android.R$style: int Widget_Spinner_DropDown>
<android.R$style: int Widget_StackView>
<android.R$style: int Widget_TabWidget>
<android.R$style: int Widget_TextView>
<android.R$style: int Widget_TextView_PopupMenu>
<android.R$style: int Widget_TextView_SpinnerItem>
<android.R$style: int Widget_Toolbar>
<android.R$style: int Widget_Toolbar_Button_Navigation>
<android.R$style: int Widget_WebView>
android.R$transition
<android.R$transition: void <init>()>
<android.R$transition: int explode>
<android.R$transition: int fade>
<android.R$transition: int move>
<android.R$transition: int no_transition>
<android.R$transition: int slide_bottom>
<android.R$transition: int slide_left>
<android.R$transition: int slide_right>
<android.R$transition: int slide_top>
android.R$xml
<android.R$xml: void <init>()>
android.accessibilityservice.AccessibilityButtonController
<android.accessibilityservice.AccessibilityButtonController: boolean isAccessibilityButtonAvailable()>
<android.accessibilityservice.AccessibilityButtonController: void registerAccessibilityButtonCallback(android.accessibilityservice.AccessibilityButtonController$AccessibilityButtonCallback)>
<android.accessibilityservice.AccessibilityButtonController: void registerAccessibilityButtonCallback(android.accessibilityservice.AccessibilityButtonController$AccessibilityButtonCallback,android.os.Handler)>
<android.accessibilityservice.AccessibilityButtonController: void unregisterAccessibilityButtonCallback(android.accessibilityservice.AccessibilityButtonController$AccessibilityButtonCallback)>
android.accessibilityservice.AccessibilityButtonController$AccessibilityButtonCallback
<android.accessibilityservice.AccessibilityButtonController$AccessibilityButtonCallback: void <init>()>
<android.accessibilityservice.AccessibilityButtonController$AccessibilityButtonCallback: void onAvailabilityChanged(android.accessibilityservice.AccessibilityButtonController,boolean)>
<android.accessibilityservice.AccessibilityButtonController$AccessibilityButtonCallback: void onClicked(android.accessibilityservice.AccessibilityButtonController)>
android.accessibilityservice.AccessibilityGestureEvent
<android.accessibilityservice.AccessibilityGestureEvent: void <init>(int,int,java.util.List)>
<android.accessibilityservice.AccessibilityGestureEvent: int describeContents()>
<android.accessibilityservice.AccessibilityGestureEvent: java.lang.String gestureIdToString(int)>
<android.accessibilityservice.AccessibilityGestureEvent: int getDisplayId()>
<android.accessibilityservice.AccessibilityGestureEvent: int getGestureId()>
<android.accessibilityservice.AccessibilityGestureEvent: java.util.List getMotionEvents()>
<android.accessibilityservice.AccessibilityGestureEvent: void writeToParcel(android.os.Parcel,int)>
<android.accessibilityservice.AccessibilityGestureEvent: android.os.Parcelable$Creator CREATOR>
android.accessibilityservice.AccessibilityService
<android.accessibilityservice.AccessibilityService: void <init>()>
<android.accessibilityservice.AccessibilityService: boolean clearCache()>
<android.accessibilityservice.AccessibilityService: boolean clearCachedSubtree(android.view.accessibility.AccessibilityNodeInfo)>
<android.accessibilityservice.AccessibilityService: void disableSelf()>
<android.accessibilityservice.AccessibilityService: boolean dispatchGesture(android.accessibilityservice.GestureDescription,android.accessibilityservice.AccessibilityService$GestureResultCallback,android.os.Handler)>
<android.accessibilityservice.AccessibilityService: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityButtonController getAccessibilityButtonController()>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityButtonController getAccessibilityButtonController(int)>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.FingerprintGestureController getFingerprintGestureController()>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.InputMethod getInputMethod()>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityService$MagnificationController getMagnificationController()>
<android.accessibilityservice.AccessibilityService: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>
<android.accessibilityservice.AccessibilityService: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow(int)>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityService$SoftKeyboardController getSoftKeyboardController()>
<android.accessibilityservice.AccessibilityService: java.util.List getSystemActions()>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.TouchInteractionController getTouchInteractionController(int)>
<android.accessibilityservice.AccessibilityService: java.util.List getWindows()>
<android.accessibilityservice.AccessibilityService: android.util.SparseArray getWindowsOnAllDisplays()>
<android.accessibilityservice.AccessibilityService: boolean isCacheEnabled()>
<android.accessibilityservice.AccessibilityService: boolean isNodeInCache(android.view.accessibility.AccessibilityNodeInfo)>
<android.accessibilityservice.AccessibilityService: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.accessibilityservice.AccessibilityService: android.os.IBinder onBind(android.content.Intent)>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.InputMethod onCreateInputMethod()>
<android.accessibilityservice.AccessibilityService: boolean onGesture(int)>
<android.accessibilityservice.AccessibilityService: boolean onGesture(android.accessibilityservice.AccessibilityGestureEvent)>
<android.accessibilityservice.AccessibilityService: void onInterrupt()>
<android.accessibilityservice.AccessibilityService: boolean onKeyEvent(android.view.KeyEvent)>
<android.accessibilityservice.AccessibilityService: void onServiceConnected()>
<android.accessibilityservice.AccessibilityService: void onSystemActionsChanged()>
<android.accessibilityservice.AccessibilityService: boolean performGlobalAction(int)>
<android.accessibilityservice.AccessibilityService: void setAccessibilityFocusAppearance(int,int)>
<android.accessibilityservice.AccessibilityService: void setAnimationScale(float)>
<android.accessibilityservice.AccessibilityService: boolean setCacheEnabled(boolean)>
<android.accessibilityservice.AccessibilityService: void setGestureDetectionPassthroughRegion(int,android.graphics.Region)>
<android.accessibilityservice.AccessibilityService: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>
<android.accessibilityservice.AccessibilityService: void setTouchExplorationPassthroughRegion(int,android.graphics.Region)>
<android.accessibilityservice.AccessibilityService: void takeScreenshot(int,java.util.concurrent.Executor,android.accessibilityservice.AccessibilityService$TakeScreenshotCallback)>
<android.accessibilityservice.AccessibilityService: int ERROR_TAKE_SCREENSHOT_INTERNAL_ERROR>
<android.accessibilityservice.AccessibilityService: int ERROR_TAKE_SCREENSHOT_INTERVAL_TIME_SHORT>
<android.accessibilityservice.AccessibilityService: int ERROR_TAKE_SCREENSHOT_INVALID_DISPLAY>
<android.accessibilityservice.AccessibilityService: int ERROR_TAKE_SCREENSHOT_NO_ACCESSIBILITY_ACCESS>
<android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_DOUBLE_TAP>
<android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_DOUBLE_TAP_AND_HOLD>
<android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_SINGLE_TAP>
<android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_SWIPE_DOWN>
<android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_SWIPE_LEFT>
<android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_SWIPE_RIGHT>
<android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_SWIPE_UP>
<android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_TRIPLE_TAP>
<android.accessibilityservice.AccessibilityService: int GESTURE_2_FINGER_TRIPLE_TAP_AND_HOLD>
<android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_DOUBLE_TAP>
<android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_DOUBLE_TAP_AND_HOLD>
<android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_SINGLE_TAP>
<android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_SINGLE_TAP_AND_HOLD>
<android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_SWIPE_DOWN>
<android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_SWIPE_LEFT>
<android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_SWIPE_RIGHT>
<android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_SWIPE_UP>
<android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_TRIPLE_TAP>
<android.accessibilityservice.AccessibilityService: int GESTURE_3_FINGER_TRIPLE_TAP_AND_HOLD>
<android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_DOUBLE_TAP>
<android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_DOUBLE_TAP_AND_HOLD>
<android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_SINGLE_TAP>
<android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_SWIPE_DOWN>
<android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_SWIPE_LEFT>
<android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_SWIPE_RIGHT>
<android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_SWIPE_UP>
<android.accessibilityservice.AccessibilityService: int GESTURE_4_FINGER_TRIPLE_TAP>
<android.accessibilityservice.AccessibilityService: int GESTURE_DOUBLE_TAP>
<android.accessibilityservice.AccessibilityService: int GESTURE_DOUBLE_TAP_AND_HOLD>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_DOWN>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_DOWN_AND_LEFT>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_DOWN_AND_RIGHT>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_DOWN_AND_UP>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_LEFT>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_LEFT_AND_DOWN>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_LEFT_AND_RIGHT>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_LEFT_AND_UP>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_RIGHT>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_RIGHT_AND_DOWN>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_RIGHT_AND_LEFT>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_RIGHT_AND_UP>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_UP>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_UP_AND_DOWN>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_UP_AND_LEFT>
<android.accessibilityservice.AccessibilityService: int GESTURE_SWIPE_UP_AND_RIGHT>
<android.accessibilityservice.AccessibilityService: int GESTURE_UNKNOWN>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_ACCESSIBILITY_ALL_APPS>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_ACCESSIBILITY_BUTTON>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_ACCESSIBILITY_BUTTON_CHOOSER>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_ACCESSIBILITY_SHORTCUT>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_BACK>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_DISMISS_NOTIFICATION_SHADE>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_DPAD_CENTER>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_DPAD_DOWN>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_DPAD_LEFT>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_DPAD_RIGHT>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_DPAD_UP>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_HOME>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_KEYCODE_HEADSETHOOK>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_LOCK_SCREEN>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_NOTIFICATIONS>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_POWER_DIALOG>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_QUICK_SETTINGS>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_RECENTS>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_TAKE_SCREENSHOT>
<android.accessibilityservice.AccessibilityService: int GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN>
<android.accessibilityservice.AccessibilityService: java.lang.String SERVICE_INTERFACE>
<android.accessibilityservice.AccessibilityService: java.lang.String SERVICE_META_DATA>
<android.accessibilityservice.AccessibilityService: int SHOW_MODE_AUTO>
<android.accessibilityservice.AccessibilityService: int SHOW_MODE_HIDDEN>
<android.accessibilityservice.AccessibilityService: int SHOW_MODE_IGNORE_HARD_KEYBOARD>
android.accessibilityservice.AccessibilityService$GestureResultCallback
<android.accessibilityservice.AccessibilityService$GestureResultCallback: void <init>()>
<android.accessibilityservice.AccessibilityService$GestureResultCallback: void onCancelled(android.accessibilityservice.GestureDescription)>
<android.accessibilityservice.AccessibilityService$GestureResultCallback: void onCompleted(android.accessibilityservice.GestureDescription)>
android.accessibilityservice.AccessibilityService$MagnificationController
<android.accessibilityservice.AccessibilityService$MagnificationController: void addListener(android.accessibilityservice.AccessibilityService$MagnificationController$OnMagnificationChangedListener)>
<android.accessibilityservice.AccessibilityService$MagnificationController: void addListener(android.accessibilityservice.AccessibilityService$MagnificationController$OnMagnificationChangedListener,android.os.Handler)>
<android.accessibilityservice.AccessibilityService$MagnificationController: float getCenterX()>
<android.accessibilityservice.AccessibilityService$MagnificationController: float getCenterY()>
<android.accessibilityservice.AccessibilityService$MagnificationController: android.graphics.Region getCurrentMagnificationRegion()>
<android.accessibilityservice.AccessibilityService$MagnificationController: android.accessibilityservice.MagnificationConfig getMagnificationConfig()>
<android.accessibilityservice.AccessibilityService$MagnificationController: android.graphics.Region getMagnificationRegion()>
<android.accessibilityservice.AccessibilityService$MagnificationController: float getScale()>
<android.accessibilityservice.AccessibilityService$MagnificationController: boolean removeListener(android.accessibilityservice.AccessibilityService$MagnificationController$OnMagnificationChangedListener)>
<android.accessibilityservice.AccessibilityService$MagnificationController: boolean reset(boolean)>
<android.accessibilityservice.AccessibilityService$MagnificationController: boolean resetCurrentMagnification(boolean)>
<android.accessibilityservice.AccessibilityService$MagnificationController: boolean setCenter(float,float,boolean)>
<android.accessibilityservice.AccessibilityService$MagnificationController: boolean setMagnificationConfig(android.accessibilityservice.MagnificationConfig,boolean)>
<android.accessibilityservice.AccessibilityService$MagnificationController: boolean setScale(float,boolean)>
android.accessibilityservice.AccessibilityService$MagnificationController$OnMagnificationChangedListener
<android.accessibilityservice.AccessibilityService$MagnificationController$OnMagnificationChangedListener: void onMagnificationChanged(android.accessibilityservice.AccessibilityService$MagnificationController,android.graphics.Region,float,float,float)>
<android.accessibilityservice.AccessibilityService$MagnificationController$OnMagnificationChangedListener: void onMagnificationChanged(android.accessibilityservice.AccessibilityService$MagnificationController,android.graphics.Region,android.accessibilityservice.MagnificationConfig)>
android.accessibilityservice.AccessibilityService$ScreenshotResult
<android.accessibilityservice.AccessibilityService$ScreenshotResult: android.graphics.ColorSpace getColorSpace()>
<android.accessibilityservice.AccessibilityService$ScreenshotResult: android.hardware.HardwareBuffer getHardwareBuffer()>
<android.accessibilityservice.AccessibilityService$ScreenshotResult: long getTimestamp()>
android.accessibilityservice.AccessibilityService$SoftKeyboardController
<android.accessibilityservice.AccessibilityService$SoftKeyboardController: void addOnShowModeChangedListener(android.accessibilityservice.AccessibilityService$SoftKeyboardController$OnShowModeChangedListener)>
<android.accessibilityservice.AccessibilityService$SoftKeyboardController: void addOnShowModeChangedListener(android.accessibilityservice.AccessibilityService$SoftKeyboardController$OnShowModeChangedListener,android.os.Handler)>
<android.accessibilityservice.AccessibilityService$SoftKeyboardController: int getShowMode()>
<android.accessibilityservice.AccessibilityService$SoftKeyboardController: boolean removeOnShowModeChangedListener(android.accessibilityservice.AccessibilityService$SoftKeyboardController$OnShowModeChangedListener)>
<android.accessibilityservice.AccessibilityService$SoftKeyboardController: int setInputMethodEnabled(java.lang.String,boolean)>
<android.accessibilityservice.AccessibilityService$SoftKeyboardController: boolean setShowMode(int)>
<android.accessibilityservice.AccessibilityService$SoftKeyboardController: boolean switchToInputMethod(java.lang.String)>
<android.accessibilityservice.AccessibilityService$SoftKeyboardController: int ENABLE_IME_FAIL_BY_ADMIN>
<android.accessibilityservice.AccessibilityService$SoftKeyboardController: int ENABLE_IME_FAIL_UNKNOWN>
<android.accessibilityservice.AccessibilityService$SoftKeyboardController: int ENABLE_IME_SUCCESS>
android.accessibilityservice.AccessibilityService$SoftKeyboardController$OnShowModeChangedListener
<android.accessibilityservice.AccessibilityService$SoftKeyboardController$OnShowModeChangedListener: void onShowModeChanged(android.accessibilityservice.AccessibilityService$SoftKeyboardController,int)>
android.accessibilityservice.AccessibilityService$TakeScreenshotCallback
<android.accessibilityservice.AccessibilityService$TakeScreenshotCallback: void onFailure(int)>
<android.accessibilityservice.AccessibilityService$TakeScreenshotCallback: void onSuccess(android.accessibilityservice.AccessibilityService$ScreenshotResult)>
android.accessibilityservice.AccessibilityServiceInfo
<android.accessibilityservice.AccessibilityServiceInfo: void <init>()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String capabilityToString(int)>
<android.accessibilityservice.AccessibilityServiceInfo: int describeContents()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String feedbackTypeToString(int)>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String flagToString(int)>
<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()>
<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getDescription()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getId()>
<android.accessibilityservice.AccessibilityServiceInfo: int getInteractiveUiTimeoutMillis()>
<android.accessibilityservice.AccessibilityServiceInfo: int getNonInteractiveUiTimeoutMillis()>
<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getSettingsActivityName()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getTileServiceName()>
<android.accessibilityservice.AccessibilityServiceInfo: boolean isAccessibilityTool()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String loadDescription(android.content.pm.PackageManager)>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.CharSequence loadIntro(android.content.pm.PackageManager)>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.CharSequence loadSummary(android.content.pm.PackageManager)>
<android.accessibilityservice.AccessibilityServiceInfo: void setInteractiveUiTimeoutMillis(int)>
<android.accessibilityservice.AccessibilityServiceInfo: void setNonInteractiveUiTimeoutMillis(int)>
<android.accessibilityservice.AccessibilityServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.accessibilityservice.AccessibilityServiceInfo: int CAPABILITY_CAN_CONTROL_MAGNIFICATION>
<android.accessibilityservice.AccessibilityServiceInfo: int CAPABILITY_CAN_PERFORM_GESTURES>
<android.accessibilityservice.AccessibilityServiceInfo: int CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY>
<android.accessibilityservice.AccessibilityServiceInfo: int CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS>
<android.accessibilityservice.AccessibilityServiceInfo: int CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES>
<android.accessibilityservice.AccessibilityServiceInfo: int CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION>
<android.accessibilityservice.AccessibilityServiceInfo: int CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT>
<android.accessibilityservice.AccessibilityServiceInfo: int CAPABILITY_CAN_TAKE_SCREENSHOT>
<android.accessibilityservice.AccessibilityServiceInfo: android.os.Parcelable$Creator CREATOR>
<android.accessibilityservice.AccessibilityServiceInfo: int DEFAULT>
<android.accessibilityservice.AccessibilityServiceInfo: int FEEDBACK_ALL_MASK>
<android.accessibilityservice.AccessibilityServiceInfo: int FEEDBACK_AUDIBLE>
<android.accessibilityservice.AccessibilityServiceInfo: int FEEDBACK_BRAILLE>
<android.accessibilityservice.AccessibilityServiceInfo: int FEEDBACK_GENERIC>
<android.accessibilityservice.AccessibilityServiceInfo: int FEEDBACK_HAPTIC>
<android.accessibilityservice.AccessibilityServiceInfo: int FEEDBACK_SPOKEN>
<android.accessibilityservice.AccessibilityServiceInfo: int FEEDBACK_VISUAL>
<android.accessibilityservice.AccessibilityServiceInfo: int FLAG_ENABLE_ACCESSIBILITY_VOLUME>
<android.accessibilityservice.AccessibilityServiceInfo: int FLAG_INCLUDE_NOT_IMPORTANT_VIEWS>
<android.accessibilityservice.AccessibilityServiceInfo: int FLAG_INPUT_METHOD_EDITOR>
<android.accessibilityservice.AccessibilityServiceInfo: int FLAG_REPORT_VIEW_IDS>
<android.accessibilityservice.AccessibilityServiceInfo: int FLAG_REQUEST_2_FINGER_PASSTHROUGH>
<android.accessibilityservice.AccessibilityServiceInfo: int FLAG_REQUEST_ACCESSIBILITY_BUTTON>
<android.accessibilityservice.AccessibilityServiceInfo: int FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY>
<android.accessibilityservice.AccessibilityServiceInfo: int FLAG_REQUEST_FILTER_KEY_EVENTS>
<android.accessibilityservice.AccessibilityServiceInfo: int FLAG_REQUEST_FINGERPRINT_GESTURES>
<android.accessibilityservice.AccessibilityServiceInfo: int FLAG_REQUEST_MULTI_FINGER_GESTURES>
<android.accessibilityservice.AccessibilityServiceInfo: int FLAG_REQUEST_SHORTCUT_WARNING_DIALOG_SPOKEN_FEEDBACK>
<android.accessibilityservice.AccessibilityServiceInfo: int FLAG_REQUEST_TOUCH_EXPLORATION_MODE>
<android.accessibilityservice.AccessibilityServiceInfo: int FLAG_RETRIEVE_INTERACTIVE_WINDOWS>
<android.accessibilityservice.AccessibilityServiceInfo: int FLAG_SEND_MOTION_EVENTS>
<android.accessibilityservice.AccessibilityServiceInfo: int FLAG_SERVICE_HANDLES_DOUBLE_TAP>
<android.accessibilityservice.AccessibilityServiceInfo: int eventTypes>
<android.accessibilityservice.AccessibilityServiceInfo: int feedbackType>
<android.accessibilityservice.AccessibilityServiceInfo: int flags>
<android.accessibilityservice.AccessibilityServiceInfo: long notificationTimeout>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String[] packageNames>
android.accessibilityservice.FingerprintGestureController
<android.accessibilityservice.FingerprintGestureController: boolean isGestureDetectionAvailable()>
<android.accessibilityservice.FingerprintGestureController: void registerFingerprintGestureCallback(android.accessibilityservice.FingerprintGestureController$FingerprintGestureCallback,android.os.Handler)>
<android.accessibilityservice.FingerprintGestureController: void unregisterFingerprintGestureCallback(android.accessibilityservice.FingerprintGestureController$FingerprintGestureCallback)>
<android.accessibilityservice.FingerprintGestureController: int FINGERPRINT_GESTURE_SWIPE_DOWN>
<android.accessibilityservice.FingerprintGestureController: int FINGERPRINT_GESTURE_SWIPE_LEFT>
<android.accessibilityservice.FingerprintGestureController: int FINGERPRINT_GESTURE_SWIPE_RIGHT>
<android.accessibilityservice.FingerprintGestureController: int FINGERPRINT_GESTURE_SWIPE_UP>
android.accessibilityservice.FingerprintGestureController$FingerprintGestureCallback
<android.accessibilityservice.FingerprintGestureController$FingerprintGestureCallback: void <init>()>
<android.accessibilityservice.FingerprintGestureController$FingerprintGestureCallback: void onGestureDetected(int)>
<android.accessibilityservice.FingerprintGestureController$FingerprintGestureCallback: void onGestureDetectionAvailabilityChanged(boolean)>
android.accessibilityservice.GestureDescription
<android.accessibilityservice.GestureDescription: int getDisplayId()>
<android.accessibilityservice.GestureDescription: long getMaxGestureDuration()>
<android.accessibilityservice.GestureDescription: int getMaxStrokeCount()>
<android.accessibilityservice.GestureDescription: android.accessibilityservice.GestureDescription$StrokeDescription getStroke(int)>
<android.accessibilityservice.GestureDescription: int getStrokeCount()>
android.accessibilityservice.GestureDescription$Builder
<android.accessibilityservice.GestureDescription$Builder: void <init>()>
<android.accessibilityservice.GestureDescription$Builder: android.accessibilityservice.GestureDescription$Builder addStroke(android.accessibilityservice.GestureDescription$StrokeDescription)>
<android.accessibilityservice.GestureDescription$Builder: android.accessibilityservice.GestureDescription build()>
<android.accessibilityservice.GestureDescription$Builder: android.accessibilityservice.GestureDescription$Builder setDisplayId(int)>
android.accessibilityservice.GestureDescription$StrokeDescription
<android.accessibilityservice.GestureDescription$StrokeDescription: void <init>(android.graphics.Path,long,long)>
<android.accessibilityservice.GestureDescription$StrokeDescription: void <init>(android.graphics.Path,long,long,boolean)>
<android.accessibilityservice.GestureDescription$StrokeDescription: android.accessibilityservice.GestureDescription$StrokeDescription continueStroke(android.graphics.Path,long,long,boolean)>
<android.accessibilityservice.GestureDescription$StrokeDescription: long getDuration()>
<android.accessibilityservice.GestureDescription$StrokeDescription: android.graphics.Path getPath()>
<android.accessibilityservice.GestureDescription$StrokeDescription: long getStartTime()>
<android.accessibilityservice.GestureDescription$StrokeDescription: boolean willContinue()>
android.accessibilityservice.InputMethod
<android.accessibilityservice.InputMethod: void <init>(android.accessibilityservice.AccessibilityService)>
<android.accessibilityservice.InputMethod: android.accessibilityservice.InputMethod$AccessibilityInputConnection getCurrentInputConnection()>
<android.accessibilityservice.InputMethod: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>
<android.accessibilityservice.InputMethod: boolean getCurrentInputStarted()>
<android.accessibilityservice.InputMethod: void onFinishInput()>
<android.accessibilityservice.InputMethod: void onStartInput(android.view.inputmethod.EditorInfo,boolean)>
<android.accessibilityservice.InputMethod: void onUpdateSelection(int,int,int,int,int,int)>
android.accessibilityservice.InputMethod$AccessibilityInputConnection
<android.accessibilityservice.InputMethod$AccessibilityInputConnection: void clearMetaKeyStates(int)>
<android.accessibilityservice.InputMethod$AccessibilityInputConnection: void commitText(java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>
<android.accessibilityservice.InputMethod$AccessibilityInputConnection: void deleteSurroundingText(int,int)>
<android.accessibilityservice.InputMethod$AccessibilityInputConnection: int getCursorCapsMode(int)>
<android.accessibilityservice.InputMethod$AccessibilityInputConnection: android.view.inputmethod.SurroundingText getSurroundingText(int,int,int)>
<android.accessibilityservice.InputMethod$AccessibilityInputConnection: void performContextMenuAction(int)>
<android.accessibilityservice.InputMethod$AccessibilityInputConnection: void performEditorAction(int)>
<android.accessibilityservice.InputMethod$AccessibilityInputConnection: void sendKeyEvent(android.view.KeyEvent)>
<android.accessibilityservice.InputMethod$AccessibilityInputConnection: void setSelection(int,int)>
android.accessibilityservice.MagnificationConfig
<android.accessibilityservice.MagnificationConfig: int describeContents()>
<android.accessibilityservice.MagnificationConfig: float getCenterX()>
<android.accessibilityservice.MagnificationConfig: float getCenterY()>
<android.accessibilityservice.MagnificationConfig: int getMode()>
<android.accessibilityservice.MagnificationConfig: float getScale()>
<android.accessibilityservice.MagnificationConfig: void writeToParcel(android.os.Parcel,int)>
<android.accessibilityservice.MagnificationConfig: android.os.Parcelable$Creator CREATOR>
<android.accessibilityservice.MagnificationConfig: int MAGNIFICATION_MODE_DEFAULT>
<android.accessibilityservice.MagnificationConfig: int MAGNIFICATION_MODE_FULLSCREEN>
<android.accessibilityservice.MagnificationConfig: int MAGNIFICATION_MODE_WINDOW>
android.accessibilityservice.MagnificationConfig$Builder
<android.accessibilityservice.MagnificationConfig$Builder: void <init>()>
<android.accessibilityservice.MagnificationConfig$Builder: android.accessibilityservice.MagnificationConfig build()>
<android.accessibilityservice.MagnificationConfig$Builder: android.accessibilityservice.MagnificationConfig$Builder setCenterX(float)>
<android.accessibilityservice.MagnificationConfig$Builder: android.accessibilityservice.MagnificationConfig$Builder setCenterY(float)>
<android.accessibilityservice.MagnificationConfig$Builder: android.accessibilityservice.MagnificationConfig$Builder setMode(int)>
<android.accessibilityservice.MagnificationConfig$Builder: android.accessibilityservice.MagnificationConfig$Builder setScale(float)>
android.accessibilityservice.TouchInteractionController
<android.accessibilityservice.TouchInteractionController: int getDisplayId()>
<android.accessibilityservice.TouchInteractionController: int getMaxPointerCount()>
<android.accessibilityservice.TouchInteractionController: int getState()>
<android.accessibilityservice.TouchInteractionController: void performClick()>
<android.accessibilityservice.TouchInteractionController: void performLongClickAndStartDrag()>
<android.accessibilityservice.TouchInteractionController: void registerCallback(java.util.concurrent.Executor,android.accessibilityservice.TouchInteractionController$Callback)>
<android.accessibilityservice.TouchInteractionController: void requestDelegating()>
<android.accessibilityservice.TouchInteractionController: void requestDragging(int)>
<android.accessibilityservice.TouchInteractionController: void requestTouchExploration()>
<android.accessibilityservice.TouchInteractionController: java.lang.String stateToString(int)>
<android.accessibilityservice.TouchInteractionController: void unregisterAllCallbacks()>
<android.accessibilityservice.TouchInteractionController: boolean unregisterCallback(android.accessibilityservice.TouchInteractionController$Callback)>
<android.accessibilityservice.TouchInteractionController: int STATE_CLEAR>
<android.accessibilityservice.TouchInteractionController: int STATE_DELEGATING>
<android.accessibilityservice.TouchInteractionController: int STATE_DRAGGING>
<android.accessibilityservice.TouchInteractionController: int STATE_TOUCH_EXPLORING>
<android.accessibilityservice.TouchInteractionController: int STATE_TOUCH_INTERACTING>
android.accessibilityservice.TouchInteractionController$Callback
<android.accessibilityservice.TouchInteractionController$Callback: void onMotionEvent(android.view.MotionEvent)>
<android.accessibilityservice.TouchInteractionController$Callback: void onStateChanged(int)>
android.accounts.AbstractAccountAuthenticator
<android.accounts.AbstractAccountAuthenticator: void <init>(android.content.Context)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle addAccountFromCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle confirmCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle editProperties(android.accounts.AccountAuthenticatorResponse,java.lang.String)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle finishSession(android.accounts.AccountAuthenticatorResponse,java.lang.String,android.os.Bundle)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAccountCredentialsForCloning(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAccountRemovalAllowed(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.AbstractAccountAuthenticator: java.lang.String getAuthTokenLabel(java.lang.String)>
<android.accounts.AbstractAccountAuthenticator: android.os.IBinder getIBinder()>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle hasFeatures(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle isCredentialsUpdateSuggested(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle startAddAccountSession(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle startUpdateCredentialsSession(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle updateCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.AbstractAccountAuthenticator: java.lang.String KEY_CUSTOM_TOKEN_EXPIRY>
android.accounts.Account
<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>
<android.accounts.Account: void <init>(android.os.Parcel)>
<android.accounts.Account: int describeContents()>
<android.accounts.Account: void writeToParcel(android.os.Parcel,int)>
<android.accounts.Account: android.os.Parcelable$Creator CREATOR>
<android.accounts.Account: java.lang.String name>
<android.accounts.Account: java.lang.String type>
android.accounts.AccountAuthenticatorActivity
<android.accounts.AccountAuthenticatorActivity: void <init>()>
<android.accounts.AccountAuthenticatorActivity: void setAccountAuthenticatorResult(android.os.Bundle)>
android.accounts.AccountAuthenticatorResponse
<android.accounts.AccountAuthenticatorResponse: void <init>(android.os.Parcel)>
<android.accounts.AccountAuthenticatorResponse: int describeContents()>
<android.accounts.AccountAuthenticatorResponse: void onError(int,java.lang.String)>
<android.accounts.AccountAuthenticatorResponse: void onRequestContinued()>
<android.accounts.AccountAuthenticatorResponse: void onResult(android.os.Bundle)>
<android.accounts.AccountAuthenticatorResponse: void writeToParcel(android.os.Parcel,int)>
<android.accounts.AccountAuthenticatorResponse: android.os.Parcelable$Creator CREATOR>
android.accounts.AccountManager
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)>
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean,java.lang.String[])>
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
<android.accounts.AccountManager: void clearPassword(android.accounts.Account)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture finishSession(android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>
<android.accounts.AccountManager: int getAccountVisibility(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>
<android.accounts.AccountManager: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()>
<android.accounts.AccountManager: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)>
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)>
<android.accounts.AccountManager: java.lang.String getPreviousName(android.accounts.Account)>
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture isCredentialsUpdateSuggested(android.accounts.Account,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.ArrayList,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.List,java.lang.String[],java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
<android.accounts.AccountManager: boolean notifyAccountAuthenticated(android.accounts.Account)>
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: boolean removeAccountExplicitly(android.accounts.Account)>
<android.accounts.AccountManager: void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture renameAccount(android.accounts.Account,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture startAddAccountSession(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture startUpdateCredentialsSession(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String ACTION_ACCOUNT_REMOVED>
<android.accounts.AccountManager: java.lang.String ACTION_AUTHENTICATOR_INTENT>
<android.accounts.AccountManager: java.lang.String AUTHENTICATOR_ATTRIBUTES_NAME>
<android.accounts.AccountManager: java.lang.String AUTHENTICATOR_META_DATA_NAME>
<android.accounts.AccountManager: int ERROR_CODE_BAD_ARGUMENTS>
<android.accounts.AccountManager: int ERROR_CODE_BAD_AUTHENTICATION>
<android.accounts.AccountManager: int ERROR_CODE_BAD_REQUEST>
<android.accounts.AccountManager: int ERROR_CODE_CANCELED>
<android.accounts.AccountManager: int ERROR_CODE_INVALID_RESPONSE>
<android.accounts.AccountManager: int ERROR_CODE_NETWORK_ERROR>
<android.accounts.AccountManager: int ERROR_CODE_REMOTE_EXCEPTION>
<android.accounts.AccountManager: int ERROR_CODE_UNSUPPORTED_OPERATION>
<android.accounts.AccountManager: java.lang.String KEY_ACCOUNTS>
<android.accounts.AccountManager: java.lang.String KEY_ACCOUNT_AUTHENTICATOR_RESPONSE>
<android.accounts.AccountManager: java.lang.String KEY_ACCOUNT_MANAGER_RESPONSE>
<android.accounts.AccountManager: java.lang.String KEY_ACCOUNT_NAME>
<android.accounts.AccountManager: java.lang.String KEY_ACCOUNT_SESSION_BUNDLE>
<android.accounts.AccountManager: java.lang.String KEY_ACCOUNT_STATUS_TOKEN>
<android.accounts.AccountManager: java.lang.String KEY_ACCOUNT_TYPE>
<android.accounts.AccountManager: java.lang.String KEY_ANDROID_PACKAGE_NAME>
<android.accounts.AccountManager: java.lang.String KEY_AUTHENTICATOR_TYPES>
<android.accounts.AccountManager: java.lang.String KEY_AUTHTOKEN>
<android.accounts.AccountManager: java.lang.String KEY_AUTH_FAILED_MESSAGE>
<android.accounts.AccountManager: java.lang.String KEY_AUTH_TOKEN_LABEL>
<android.accounts.AccountManager: java.lang.String KEY_BOOLEAN_RESULT>
<android.accounts.AccountManager: java.lang.String KEY_CALLER_PID>
<android.accounts.AccountManager: java.lang.String KEY_CALLER_UID>
<android.accounts.AccountManager: java.lang.String KEY_ERROR_CODE>
<android.accounts.AccountManager: java.lang.String KEY_ERROR_MESSAGE>
<android.accounts.AccountManager: java.lang.String KEY_INTENT>
<android.accounts.AccountManager: java.lang.String KEY_LAST_AUTHENTICATED_TIME>
<android.accounts.AccountManager: java.lang.String KEY_PASSWORD>
<android.accounts.AccountManager: java.lang.String KEY_USERDATA>
<android.accounts.AccountManager: java.lang.String LOGIN_ACCOUNTS_CHANGED_ACTION>
<android.accounts.AccountManager: java.lang.String PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE>
<android.accounts.AccountManager: java.lang.String PACKAGE_NAME_KEY_LEGACY_VISIBLE>
<android.accounts.AccountManager: int VISIBILITY_NOT_VISIBLE>
<android.accounts.AccountManager: int VISIBILITY_UNDEFINED>
<android.accounts.AccountManager: int VISIBILITY_USER_MANAGED_NOT_VISIBLE>
<android.accounts.AccountManager: int VISIBILITY_USER_MANAGED_VISIBLE>
<android.accounts.AccountManager: int VISIBILITY_VISIBLE>
android.accounts.AccountManagerCallback
<android.accounts.AccountManagerCallback: void run(android.accounts.AccountManagerFuture)>
android.accounts.AccountManagerFuture
<android.accounts.AccountManagerFuture: boolean cancel(boolean)>
<android.accounts.AccountManagerFuture: java.lang.Object getResult()>
<android.accounts.AccountManagerFuture: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)>
<android.accounts.AccountManagerFuture: boolean isCancelled()>
<android.accounts.AccountManagerFuture: boolean isDone()>
android.accounts.AccountsException
<android.accounts.AccountsException: void <init>()>
<android.accounts.AccountsException: void <init>(java.lang.String)>
<android.accounts.AccountsException: void <init>(java.lang.String,java.lang.Throwable)>
<android.accounts.AccountsException: void <init>(java.lang.Throwable)>
android.accounts.AuthenticatorDescription
<android.accounts.AuthenticatorDescription: void <init>(java.lang.String,java.lang.String,int,int,int,int,boolean)>
<android.accounts.AuthenticatorDescription: void <init>(java.lang.String,java.lang.String,int,int,int,int)>
<android.accounts.AuthenticatorDescription: int describeContents()>
<android.accounts.AuthenticatorDescription: android.accounts.AuthenticatorDescription newKey(java.lang.String)>
<android.accounts.AuthenticatorDescription: void writeToParcel(android.os.Parcel,int)>
<android.accounts.AuthenticatorDescription: android.os.Parcelable$Creator CREATOR>
<android.accounts.AuthenticatorDescription: int accountPreferencesId>
<android.accounts.AuthenticatorDescription: boolean customTokens>
<android.accounts.AuthenticatorDescription: int iconId>
<android.accounts.AuthenticatorDescription: int labelId>
<android.accounts.AuthenticatorDescription: java.lang.String packageName>
<android.accounts.AuthenticatorDescription: int smallIconId>
<android.accounts.AuthenticatorDescription: java.lang.String type>
android.accounts.AuthenticatorException
<android.accounts.AuthenticatorException: void <init>()>
<android.accounts.AuthenticatorException: void <init>(java.lang.String)>
<android.accounts.AuthenticatorException: void <init>(java.lang.String,java.lang.Throwable)>
<android.accounts.AuthenticatorException: void <init>(java.lang.Throwable)>
android.accounts.NetworkErrorException
<android.accounts.NetworkErrorException: void <init>()>
<android.accounts.NetworkErrorException: void <init>(java.lang.String)>
<android.accounts.NetworkErrorException: void <init>(java.lang.String,java.lang.Throwable)>
<android.accounts.NetworkErrorException: void <init>(java.lang.Throwable)>
android.accounts.OnAccountsUpdateListener
<android.accounts.OnAccountsUpdateListener: void onAccountsUpdated(android.accounts.Account[])>
android.accounts.OperationCanceledException
<android.accounts.OperationCanceledException: void <init>()>
<android.accounts.OperationCanceledException: void <init>(java.lang.String)>
<android.accounts.OperationCanceledException: void <init>(java.lang.String,java.lang.Throwable)>
<android.accounts.OperationCanceledException: void <init>(java.lang.Throwable)>
android.animation.Animator
<android.animation.Animator: void <init>()>
<android.animation.Animator: void addListener(android.animation.Animator$AnimatorListener)>
<android.animation.Animator: void addPauseListener(android.animation.Animator$AnimatorPauseListener)>
<android.animation.Animator: void cancel()>
<android.animation.Animator: android.animation.Animator clone()>
<android.animation.Animator: void end()>
<android.animation.Animator: long getDuration()>
<android.animation.Animator: android.animation.TimeInterpolator getInterpolator()>
<android.animation.Animator: java.util.ArrayList getListeners()>
<android.animation.Animator: long getStartDelay()>
<android.animation.Animator: long getTotalDuration()>
<android.animation.Animator: boolean isPaused()>
<android.animation.Animator: boolean isRunning()>
<android.animation.Animator: boolean isStarted()>
<android.animation.Animator: void pause()>
<android.animation.Animator: void removeAllListeners()>
<android.animation.Animator: void removeListener(android.animation.Animator$AnimatorListener)>
<android.animation.Animator: void removePauseListener(android.animation.Animator$AnimatorPauseListener)>
<android.animation.Animator: void resume()>
<android.animation.Animator: android.animation.Animator setDuration(long)>
<android.animation.Animator: void setInterpolator(android.animation.TimeInterpolator)>
<android.animation.Animator: void setStartDelay(long)>
<android.animation.Animator: void setTarget(java.lang.Object)>
<android.animation.Animator: void setupEndValues()>
<android.animation.Animator: void setupStartValues()>
<android.animation.Animator: void start()>
<android.animation.Animator: long DURATION_INFINITE>
android.animation.Animator$AnimatorListener
<android.animation.Animator$AnimatorListener: void onAnimationCancel(android.animation.Animator)>
<android.animation.Animator$AnimatorListener: void onAnimationEnd(android.animation.Animator,boolean)>
<android.animation.Animator$AnimatorListener: void onAnimationEnd(android.animation.Animator)>
<android.animation.Animator$AnimatorListener: void onAnimationRepeat(android.animation.Animator)>
<android.animation.Animator$AnimatorListener: void onAnimationStart(android.animation.Animator,boolean)>
<android.animation.Animator$AnimatorListener: void onAnimationStart(android.animation.Animator)>
android.animation.Animator$AnimatorPauseListener
<android.animation.Animator$AnimatorPauseListener: void onAnimationPause(android.animation.Animator)>
<android.animation.Animator$AnimatorPauseListener: void onAnimationResume(android.animation.Animator)>
android.animation.AnimatorInflater
<android.animation.AnimatorInflater: void <init>()>
<android.animation.AnimatorInflater: android.animation.Animator loadAnimator(android.content.Context,int)>
<android.animation.AnimatorInflater: android.animation.StateListAnimator loadStateListAnimator(android.content.Context,int)>
android.animation.AnimatorListenerAdapter
<android.animation.AnimatorListenerAdapter: void <init>()>
<android.animation.AnimatorListenerAdapter: void onAnimationCancel(android.animation.Animator)>
<android.animation.AnimatorListenerAdapter: void onAnimationEnd(android.animation.Animator)>
<android.animation.AnimatorListenerAdapter: void onAnimationPause(android.animation.Animator)>
<android.animation.AnimatorListenerAdapter: void onAnimationRepeat(android.animation.Animator)>
<android.animation.AnimatorListenerAdapter: void onAnimationResume(android.animation.Animator)>
<android.animation.AnimatorListenerAdapter: void onAnimationStart(android.animation.Animator)>
android.animation.AnimatorSet
<android.animation.AnimatorSet: void <init>()>
<android.animation.AnimatorSet: android.animation.AnimatorSet clone()>
<android.animation.AnimatorSet: java.util.ArrayList getChildAnimations()>
<android.animation.AnimatorSet: long getCurrentPlayTime()>
<android.animation.AnimatorSet: long getDuration()>
<android.animation.AnimatorSet: long getStartDelay()>
<android.animation.AnimatorSet: boolean isRunning()>
<android.animation.AnimatorSet: android.animation.AnimatorSet$Builder play(android.animation.Animator)>
<android.animation.AnimatorSet: void playSequentially(android.animation.Animator[])>
<android.animation.AnimatorSet: void playSequentially(java.util.List)>
<android.animation.AnimatorSet: void playTogether(android.animation.Animator[])>
<android.animation.AnimatorSet: void playTogether(java.util.Collection)>
<android.animation.AnimatorSet: void reverse()>
<android.animation.AnimatorSet: void setCurrentPlayTime(long)>
<android.animation.AnimatorSet: android.animation.AnimatorSet setDuration(long)>
<android.animation.AnimatorSet: void setInterpolator(android.animation.TimeInterpolator)>
<android.animation.AnimatorSet: void setStartDelay(long)>
android.animation.AnimatorSet$Builder
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder after(android.animation.Animator)>
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder after(long)>
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder before(android.animation.Animator)>
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder with(android.animation.Animator)>
android.animation.ArgbEvaluator
<android.animation.ArgbEvaluator: void <init>()>
<android.animation.ArgbEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)>
android.animation.BidirectionalTypeConverter
<android.animation.BidirectionalTypeConverter: void <init>(java.lang.Class,java.lang.Class)>
<android.animation.BidirectionalTypeConverter: java.lang.Object convertBack(java.lang.Object)>
<android.animation.BidirectionalTypeConverter: android.animation.BidirectionalTypeConverter invert()>
android.animation.FloatArrayEvaluator
<android.animation.FloatArrayEvaluator: void <init>()>
<android.animation.FloatArrayEvaluator: void <init>(float[])>
<android.animation.FloatArrayEvaluator: float[] evaluate(float,float[],float[])>
android.animation.FloatEvaluator
<android.animation.FloatEvaluator: void <init>()>
<android.animation.FloatEvaluator: java.lang.Float evaluate(float,java.lang.Number,java.lang.Number)>
android.animation.IntArrayEvaluator
<android.animation.IntArrayEvaluator: void <init>()>
<android.animation.IntArrayEvaluator: void <init>(int[])>
<android.animation.IntArrayEvaluator: int[] evaluate(float,int[],int[])>
android.animation.IntEvaluator
<android.animation.IntEvaluator: void <init>()>
<android.animation.IntEvaluator: java.lang.Integer evaluate(float,java.lang.Integer,java.lang.Integer)>
android.animation.Keyframe
<android.animation.Keyframe: void <init>()>
<android.animation.Keyframe: android.animation.Keyframe clone()>
<android.animation.Keyframe: float getFraction()>
<android.animation.Keyframe: android.animation.TimeInterpolator getInterpolator()>
<android.animation.Keyframe: java.lang.Class getType()>
<android.animation.Keyframe: java.lang.Object getValue()>
<android.animation.Keyframe: boolean hasValue()>
<android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)>
<android.animation.Keyframe: android.animation.Keyframe ofFloat(float)>
<android.animation.Keyframe: android.animation.Keyframe ofInt(float,int)>
<android.animation.Keyframe: android.animation.Keyframe ofInt(float)>
<android.animation.Keyframe: android.animation.Keyframe ofObject(float,java.lang.Object)>
<android.animation.Keyframe: android.animation.Keyframe ofObject(float)>
<android.animation.Keyframe: void setFraction(float)>
<android.animation.Keyframe: void setInterpolator(android.animation.TimeInterpolator)>
<android.animation.Keyframe: void setValue(java.lang.Object)>
android.animation.LayoutTransition
<android.animation.LayoutTransition: void <init>()>
<android.animation.LayoutTransition: void addChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void addTransitionListener(android.animation.LayoutTransition$TransitionListener)>
<android.animation.LayoutTransition: void disableTransitionType(int)>
<android.animation.LayoutTransition: void enableTransitionType(int)>
<android.animation.LayoutTransition: android.animation.Animator getAnimator(int)>
<android.animation.LayoutTransition: long getDuration(int)>
<android.animation.LayoutTransition: android.animation.TimeInterpolator getInterpolator(int)>
<android.animation.LayoutTransition: long getStagger(int)>
<android.animation.LayoutTransition: long getStartDelay(int)>
<android.animation.LayoutTransition: java.util.List getTransitionListeners()>
<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View,int)>
<android.animation.LayoutTransition: boolean isChangingLayout()>
<android.animation.LayoutTransition: boolean isRunning()>
<android.animation.LayoutTransition: boolean isTransitionTypeEnabled(int)>
<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void removeTransitionListener(android.animation.LayoutTransition$TransitionListener)>
<android.animation.LayoutTransition: void setAnimateParentHierarchy(boolean)>
<android.animation.LayoutTransition: void setAnimator(int,android.animation.Animator)>
<android.animation.LayoutTransition: void setDuration(long)>
<android.animation.LayoutTransition: void setDuration(int,long)>
<android.animation.LayoutTransition: void setInterpolator(int,android.animation.TimeInterpolator)>
<android.animation.LayoutTransition: void setStagger(int,long)>
<android.animation.LayoutTransition: void setStartDelay(int,long)>
<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View,int)>
<android.animation.LayoutTransition: int APPEARING>
<android.animation.LayoutTransition: int CHANGE_APPEARING>
<android.animation.LayoutTransition: int CHANGE_DISAPPEARING>
<android.animation.LayoutTransition: int CHANGING>
<android.animation.LayoutTransition: int DISAPPEARING>
android.animation.LayoutTransition$TransitionListener
<android.animation.LayoutTransition$TransitionListener: void endTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)>
<android.animation.LayoutTransition$TransitionListener: void startTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)>
android.animation.ObjectAnimator
<android.animation.ObjectAnimator: void <init>()>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator clone()>
<android.animation.ObjectAnimator: java.lang.String getPropertyName()>
<android.animation.ObjectAnimator: java.lang.Object getTarget()>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofArgb(java.lang.Object,java.lang.String,int[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofArgb(java.lang.Object,android.util.Property,int[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,java.lang.String,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,android.util.Property,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,java.lang.String,int[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,java.lang.String,java.lang.String,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,android.util.Property,int[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,android.util.Property,android.util.Property,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofMultiFloat(java.lang.Object,java.lang.String,float[][])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofMultiFloat(java.lang.Object,java.lang.String,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofMultiFloat(java.lang.Object,java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofMultiInt(java.lang.Object,java.lang.String,int[][])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofMultiInt(java.lang.Object,java.lang.String,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofMultiInt(java.lang.Object,java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,java.lang.String,android.animation.TypeConverter,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,android.util.Property,android.animation.TypeEvaluator,java.lang.Object[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,android.util.Property,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,android.util.Property,android.animation.TypeConverter,android.graphics.Path)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object,android.animation.PropertyValuesHolder[])>
<android.animation.ObjectAnimator: void setAutoCancel(boolean)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>
<android.animation.ObjectAnimator: void setProperty(android.util.Property)>
<android.animation.ObjectAnimator: void setPropertyName(java.lang.String)>
android.animation.PointFEvaluator
<android.animation.PointFEvaluator: void <init>()>
<android.animation.PointFEvaluator: void <init>(android.graphics.PointF)>
<android.animation.PointFEvaluator: android.graphics.PointF evaluate(float,android.graphics.PointF,android.graphics.PointF)>
android.animation.PropertyValuesHolder
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder clone()>
<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(android.util.Property,float[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(android.util.Property,int[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(java.lang.String,android.animation.Keyframe[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(android.util.Property,android.animation.Keyframe[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,float[][])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.graphics.Path)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,android.animation.Keyframe[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,int[][])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.graphics.Path)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,android.animation.Keyframe[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeConverter,android.graphics.Path)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeEvaluator,java.lang.Object[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeConverter,android.graphics.Path)>
<android.animation.PropertyValuesHolder: void setConverter(android.animation.TypeConverter)>
<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)>
<android.animation.PropertyValuesHolder: void setFloatValues(float[])>
<android.animation.PropertyValuesHolder: void setIntValues(int[])>
<android.animation.PropertyValuesHolder: void setKeyframes(android.animation.Keyframe[])>
<android.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])>
<android.animation.PropertyValuesHolder: void setProperty(android.util.Property)>
<android.animation.PropertyValuesHolder: void setPropertyName(java.lang.String)>
android.animation.RectEvaluator
<android.animation.RectEvaluator: void <init>()>
<android.animation.RectEvaluator: void <init>(android.graphics.Rect)>
<android.animation.RectEvaluator: android.graphics.Rect evaluate(float,android.graphics.Rect,android.graphics.Rect)>
android.animation.StateListAnimator
<android.animation.StateListAnimator: void <init>()>
<android.animation.StateListAnimator: void addState(int[],android.animation.Animator)>
<android.animation.StateListAnimator: android.animation.StateListAnimator clone()>
<android.animation.StateListAnimator: void jumpToCurrentState()>
android.animation.TimeAnimator
<android.animation.TimeAnimator: void <init>()>
<android.animation.TimeAnimator: void setTimeListener(android.animation.TimeAnimator$TimeListener)>
android.animation.TimeAnimator$TimeListener
<android.animation.TimeAnimator$TimeListener: void onTimeUpdate(android.animation.TimeAnimator,long,long)>
android.animation.TimeInterpolator
<android.animation.TimeInterpolator: float getInterpolation(float)>
android.animation.TypeConverter
<android.animation.TypeConverter: void <init>(java.lang.Class,java.lang.Class)>
<android.animation.TypeConverter: java.lang.Object convert(java.lang.Object)>
android.animation.TypeEvaluator
<android.animation.TypeEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)>
android.animation.ValueAnimator
<android.animation.ValueAnimator: void <init>()>
<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>
<android.animation.ValueAnimator: boolean areAnimatorsEnabled()>
<android.animation.ValueAnimator: android.animation.ValueAnimator clone()>
<android.animation.ValueAnimator: float getAnimatedFraction()>
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue()>
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue(java.lang.String)>
<android.animation.ValueAnimator: long getCurrentPlayTime()>
<android.animation.ValueAnimator: long getDuration()>
<android.animation.ValueAnimator: float getDurationScale()>
<android.animation.ValueAnimator: long getFrameDelay()>
<android.animation.ValueAnimator: int getRepeatCount()>
<android.animation.ValueAnimator: int getRepeatMode()>
<android.animation.ValueAnimator: long getStartDelay()>
<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] getValues()>
<android.animation.ValueAnimator: boolean isRunning()>
<android.animation.ValueAnimator: android.animation.ValueAnimator ofArgb(int[])>
<android.animation.ValueAnimator: android.animation.ValueAnimator ofFloat(float[])>
<android.animation.ValueAnimator: android.animation.ValueAnimator ofInt(int[])>
<android.animation.ValueAnimator: android.animation.ValueAnimator ofObject(android.animation.TypeEvaluator,java.lang.Object[])>
<android.animation.ValueAnimator: android.animation.ValueAnimator ofPropertyValuesHolder(android.animation.PropertyValuesHolder[])>
<android.animation.ValueAnimator: boolean registerDurationScaleChangeListener(android.animation.ValueAnimator$DurationScaleChangeListener)>
<android.animation.ValueAnimator: void removeAllUpdateListeners()>
<android.animation.ValueAnimator: void removeUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>
<android.animation.ValueAnimator: void reverse()>
<android.animation.ValueAnimator: void setCurrentFraction(float)>
<android.animation.ValueAnimator: void setCurrentPlayTime(long)>
<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>
<android.animation.ValueAnimator: void setEvaluator(android.animation.TypeEvaluator)>
<android.animation.ValueAnimator: void setFloatValues(float[])>
<android.animation.ValueAnimator: void setFrameDelay(long)>
<android.animation.ValueAnimator: void setIntValues(int[])>
<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>
<android.animation.ValueAnimator: void setObjectValues(java.lang.Object[])>
<android.animation.ValueAnimator: void setRepeatCount(int)>
<android.animation.ValueAnimator: void setRepeatMode(int)>
<android.animation.ValueAnimator: void setStartDelay(long)>
<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>
<android.animation.ValueAnimator: boolean unregisterDurationScaleChangeListener(android.animation.ValueAnimator$DurationScaleChangeListener)>
<android.animation.ValueAnimator: int INFINITE>
<android.animation.ValueAnimator: int RESTART>
<android.animation.ValueAnimator: int REVERSE>
android.animation.ValueAnimator$AnimatorUpdateListener
<android.animation.ValueAnimator$AnimatorUpdateListener: void onAnimationUpdate(android.animation.ValueAnimator)>
android.animation.ValueAnimator$DurationScaleChangeListener
<android.animation.ValueAnimator$DurationScaleChangeListener: void onChanged(float)>
android.annotation.SuppressLint
<android.annotation.SuppressLint: java.lang.String[] value()>
android.annotation.TargetApi
<android.annotation.TargetApi: int value()>
android.app.ActionBar
<android.app.ActionBar: void <init>()>
<android.app.ActionBar: void addOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener)>
<android.app.ActionBar: void addTab(android.app.ActionBar$Tab)>
<android.app.ActionBar: void addTab(android.app.ActionBar$Tab,boolean)>
<android.app.ActionBar: void addTab(android.app.ActionBar$Tab,int)>
<android.app.ActionBar: void addTab(android.app.ActionBar$Tab,int,boolean)>
<android.app.ActionBar: android.view.View getCustomView()>
<android.app.ActionBar: int getDisplayOptions()>
<android.app.ActionBar: float getElevation()>
<android.app.ActionBar: int getHeight()>
<android.app.ActionBar: int getHideOffset()>
<android.app.ActionBar: int getNavigationItemCount()>
<android.app.ActionBar: int getNavigationMode()>
<android.app.ActionBar: int getSelectedNavigationIndex()>
<android.app.ActionBar: android.app.ActionBar$Tab getSelectedTab()>
<android.app.ActionBar: java.lang.CharSequence getSubtitle()>
<android.app.ActionBar: android.app.ActionBar$Tab getTabAt(int)>
<android.app.ActionBar: int getTabCount()>
<android.app.ActionBar: android.content.Context getThemedContext()>
<android.app.ActionBar: java.lang.CharSequence getTitle()>
<android.app.ActionBar: void hide()>
<android.app.ActionBar: boolean isHideOnContentScrollEnabled()>
<android.app.ActionBar: boolean isShowing()>
<android.app.ActionBar: android.app.ActionBar$Tab newTab()>
<android.app.ActionBar: void removeAllTabs()>
<android.app.ActionBar: void removeOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener)>
<android.app.ActionBar: void removeTab(android.app.ActionBar$Tab)>
<android.app.ActionBar: void removeTabAt(int)>
<android.app.ActionBar: void selectTab(android.app.ActionBar$Tab)>
<android.app.ActionBar: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.app.ActionBar: void setCustomView(android.view.View)>
<android.app.ActionBar: void setCustomView(android.view.View,android.app.ActionBar$LayoutParams)>
<android.app.ActionBar: void setCustomView(int)>
<android.app.ActionBar: void setDisplayHomeAsUpEnabled(boolean)>
<android.app.ActionBar: void setDisplayOptions(int)>
<android.app.ActionBar: void setDisplayOptions(int,int)>
<android.app.ActionBar: void setDisplayShowCustomEnabled(boolean)>
<android.app.ActionBar: void setDisplayShowHomeEnabled(boolean)>
<android.app.ActionBar: void setDisplayShowTitleEnabled(boolean)>
<android.app.ActionBar: void setDisplayUseLogoEnabled(boolean)>
<android.app.ActionBar: void setElevation(float)>
<android.app.ActionBar: void setHideOffset(int)>
<android.app.ActionBar: void setHideOnContentScrollEnabled(boolean)>
<android.app.ActionBar: void setHomeActionContentDescription(java.lang.CharSequence)>
<android.app.ActionBar: void setHomeActionContentDescription(int)>
<android.app.ActionBar: void setHomeAsUpIndicator(android.graphics.drawable.Drawable)>
<android.app.ActionBar: void setHomeAsUpIndicator(int)>
<android.app.ActionBar: void setHomeButtonEnabled(boolean)>
<android.app.ActionBar: void setIcon(int)>
<android.app.ActionBar: void setIcon(android.graphics.drawable.Drawable)>
<android.app.ActionBar: void setListNavigationCallbacks(android.widget.SpinnerAdapter,android.app.ActionBar$OnNavigationListener)>
<android.app.ActionBar: void setLogo(int)>
<android.app.ActionBar: void setLogo(android.graphics.drawable.Drawable)>
<android.app.ActionBar: void setNavigationMode(int)>
<android.app.ActionBar: void setSelectedNavigationItem(int)>
<android.app.ActionBar: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.app.ActionBar: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.app.ActionBar: void setSubtitle(java.lang.CharSequence)>
<android.app.ActionBar: void setSubtitle(int)>
<android.app.ActionBar: void setTitle(java.lang.CharSequence)>
<android.app.ActionBar: void setTitle(int)>
<android.app.ActionBar: void show()>
<android.app.ActionBar: int DISPLAY_HOME_AS_UP>
<android.app.ActionBar: int DISPLAY_SHOW_CUSTOM>
<android.app.ActionBar: int DISPLAY_SHOW_HOME>
<android.app.ActionBar: int DISPLAY_SHOW_TITLE>
<android.app.ActionBar: int DISPLAY_USE_LOGO>
<android.app.ActionBar: int NAVIGATION_MODE_LIST>
<android.app.ActionBar: int NAVIGATION_MODE_STANDARD>
<android.app.ActionBar: int NAVIGATION_MODE_TABS>
android.app.ActionBar$LayoutParams
<android.app.ActionBar$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.app.ActionBar$LayoutParams: void <init>(int,int)>
<android.app.ActionBar$LayoutParams: void <init>(int,int,int)>
<android.app.ActionBar$LayoutParams: void <init>(int)>
<android.app.ActionBar$LayoutParams: void <init>(android.app.ActionBar$LayoutParams)>
<android.app.ActionBar$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.app.ActionBar$LayoutParams: int gravity>
android.app.ActionBar$OnMenuVisibilityListener
<android.app.ActionBar$OnMenuVisibilityListener: void onMenuVisibilityChanged(boolean)>
android.app.ActionBar$OnNavigationListener
<android.app.ActionBar$OnNavigationListener: boolean onNavigationItemSelected(int,long)>
android.app.ActionBar$Tab
<android.app.ActionBar$Tab: void <init>()>
<android.app.ActionBar$Tab: java.lang.CharSequence getContentDescription()>
<android.app.ActionBar$Tab: android.view.View getCustomView()>
<android.app.ActionBar$Tab: android.graphics.drawable.Drawable getIcon()>
<android.app.ActionBar$Tab: int getPosition()>
<android.app.ActionBar$Tab: java.lang.Object getTag()>
<android.app.ActionBar$Tab: java.lang.CharSequence getText()>
<android.app.ActionBar$Tab: void select()>
<android.app.ActionBar$Tab: android.app.ActionBar$Tab setContentDescription(int)>
<android.app.ActionBar$Tab: android.app.ActionBar$Tab setContentDescription(java.lang.CharSequence)>
<android.app.ActionBar$Tab: android.app.ActionBar$Tab setCustomView(android.view.View)>
<android.app.ActionBar$Tab: android.app.ActionBar$Tab setCustomView(int)>
<android.app.ActionBar$Tab: android.app.ActionBar$Tab setIcon(android.graphics.drawable.Drawable)>
<android.app.ActionBar$Tab: android.app.ActionBar$Tab setIcon(int)>
<android.app.ActionBar$Tab: android.app.ActionBar$Tab setTabListener(android.app.ActionBar$TabListener)>
<android.app.ActionBar$Tab: android.app.ActionBar$Tab setTag(java.lang.Object)>
<android.app.ActionBar$Tab: android.app.ActionBar$Tab setText(java.lang.CharSequence)>
<android.app.ActionBar$Tab: android.app.ActionBar$Tab setText(int)>
<android.app.ActionBar$Tab: int INVALID_POSITION>
android.app.ActionBar$TabListener
<android.app.ActionBar$TabListener: void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)>
<android.app.ActionBar$TabListener: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)>
<android.app.ActionBar$TabListener: void onTabUnselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)>
android.app.Activity
<android.app.Activity: void <init>()>
<android.app.Activity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.app.Activity: void closeContextMenu()>
<android.app.Activity: void closeOptionsMenu()>
<android.app.Activity: android.app.PendingIntent createPendingResult(int,android.content.Intent,int)>
<android.app.Activity: void dismissDialog(int)>
<android.app.Activity: void dismissKeyboardShortcutsHelper()>
<android.app.Activity: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.app.Activity: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.app.Activity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.app.Activity: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.app.Activity: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.app.Activity: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.Activity: void enterPictureInPictureMode()>
<android.app.Activity: boolean enterPictureInPictureMode(android.app.PictureInPictureParams)>
<android.app.Activity: android.view.View findViewById(int)>
<android.app.Activity: void finish()>
<android.app.Activity: void finishActivity(int)>
<android.app.Activity: void finishActivityFromChild(android.app.Activity,int)>
<android.app.Activity: void finishAffinity()>
<android.app.Activity: void finishAfterTransition()>
<android.app.Activity: void finishAndRemoveTask()>
<android.app.Activity: void finishFromChild(android.app.Activity)>
<android.app.Activity: android.app.ActionBar getActionBar()>
<android.app.Activity: android.app.Application getApplication()>
<android.app.Activity: android.content.ComponentName getCallingActivity()>
<android.app.Activity: java.lang.String getCallingPackage()>
<android.app.Activity: int getChangingConfigurations()>
<android.app.Activity: android.content.ComponentName getComponentName()>
<android.app.Activity: android.transition.Scene getContentScene()>
<android.app.Activity: android.transition.TransitionManager getContentTransitionManager()>
<android.app.Activity: android.view.View getCurrentFocus()>
<android.app.Activity: android.app.FragmentManager getFragmentManager()>
<android.app.Activity: android.content.Intent getIntent()>
<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()>
<android.app.Activity: android.view.LayoutInflater getLayoutInflater()>
<android.app.Activity: android.app.LoaderManager getLoaderManager()>
<android.app.Activity: java.lang.String getLocalClassName()>
<android.app.Activity: int getMaxNumPictureInPictureActions()>
<android.app.Activity: android.media.session.MediaController getMediaController()>
<android.app.Activity: android.view.MenuInflater getMenuInflater()>
<android.app.Activity: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()>
<android.app.Activity: android.app.Activity getParent()>
<android.app.Activity: android.content.Intent getParentActivityIntent()>
<android.app.Activity: android.content.SharedPreferences getPreferences(int)>
<android.app.Activity: android.net.Uri getReferrer()>
<android.app.Activity: int getRequestedOrientation()>
<android.app.Activity: android.view.SearchEvent getSearchEvent()>
<android.app.Activity: android.window.SplashScreen getSplashScreen()>
<android.app.Activity: int getTaskId()>
<android.app.Activity: java.lang.CharSequence getTitle()>
<android.app.Activity: int getTitleColor()>
<android.app.Activity: android.app.VoiceInteractor getVoiceInteractor()>
<android.app.Activity: int getVolumeControlStream()>
<android.app.Activity: android.view.Window getWindow()>
<android.app.Activity: android.view.WindowManager getWindowManager()>
<android.app.Activity: boolean hasWindowFocus()>
<android.app.Activity: void invalidateOptionsMenu()>
<android.app.Activity: boolean isActivityTransitionRunning()>
<android.app.Activity: boolean isChangingConfigurations()>
<android.app.Activity: boolean isChild()>
<android.app.Activity: boolean isDestroyed()>
<android.app.Activity: boolean isFinishing()>
<android.app.Activity: boolean isImmersive()>
<android.app.Activity: boolean isInMultiWindowMode()>
<android.app.Activity: boolean isInPictureInPictureMode()>
<android.app.Activity: boolean isLaunchedFromBubble()>
<android.app.Activity: boolean isLocalVoiceInteractionSupported()>
<android.app.Activity: boolean isTaskRoot()>
<android.app.Activity: boolean isVoiceInteraction()>
<android.app.Activity: boolean isVoiceInteractionRoot()>
<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.app.Activity: boolean moveTaskToBack(boolean)>
<android.app.Activity: boolean navigateUpTo(android.content.Intent)>
<android.app.Activity: boolean navigateUpToFromChild(android.app.Activity,android.content.Intent)>
<android.app.Activity: void onActionModeFinished(android.view.ActionMode)>
<android.app.Activity: void onActionModeStarted(android.view.ActionMode)>
<android.app.Activity: void onActivityReenter(int,android.content.Intent)>
<android.app.Activity: void onActivityResult(int,int,android.content.Intent)>
<android.app.Activity: void onAttachFragment(android.app.Fragment)>
<android.app.Activity: void onAttachedToWindow()>
<android.app.Activity: void onBackPressed()>
<android.app.Activity: void onChildTitleChanged(android.app.Activity,java.lang.CharSequence)>
<android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Activity: void onContentChanged()>
<android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)>
<android.app.Activity: void onContextMenuClosed(android.view.Menu)>
<android.app.Activity: void onCreate(android.os.Bundle)>
<android.app.Activity: void onCreate(android.os.Bundle,android.os.PersistableBundle)>
<android.app.Activity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<android.app.Activity: java.lang.CharSequence onCreateDescription()>
<android.app.Activity: android.app.Dialog onCreateDialog(int)>
<android.app.Activity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>
<android.app.Activity: void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)>
<android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)>
<android.app.Activity: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.app.Activity: android.view.View onCreatePanelView(int)>
<android.app.Activity: boolean onCreateThumbnail(android.graphics.Bitmap,android.graphics.Canvas)>
<android.app.Activity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.app.Activity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.app.Activity: void onDestroy()>
<android.app.Activity: void onDetachedFromWindow()>
<android.app.Activity: void onEnterAnimationComplete()>
<android.app.Activity: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.app.Activity: void onGetDirectActions(android.os.CancellationSignal,java.util.function.Consumer)>
<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)>
<android.app.Activity: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.app.Activity: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.app.Activity: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.app.Activity: boolean onKeyUp(int,android.view.KeyEvent)>
<android.app.Activity: void onLocalVoiceInteractionStarted()>
<android.app.Activity: void onLocalVoiceInteractionStopped()>
<android.app.Activity: void onLowMemory()>
<android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.app.Activity: boolean onMenuOpened(int,android.view.Menu)>
<android.app.Activity: void onMultiWindowModeChanged(boolean,android.content.res.Configuration)>
<android.app.Activity: void onMultiWindowModeChanged(boolean)>
<android.app.Activity: boolean onNavigateUp()>
<android.app.Activity: boolean onNavigateUpFromChild(android.app.Activity)>
<android.app.Activity: void onNewIntent(android.content.Intent)>
<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.app.Activity: void onOptionsMenuClosed(android.view.Menu)>
<android.app.Activity: void onPanelClosed(int,android.view.Menu)>
<android.app.Activity: void onPause()>
<android.app.Activity: void onPerformDirectAction(java.lang.String,android.os.Bundle,android.os.CancellationSignal,java.util.function.Consumer)>
<android.app.Activity: void onPictureInPictureModeChanged(boolean,android.content.res.Configuration)>
<android.app.Activity: void onPictureInPictureModeChanged(boolean)>
<android.app.Activity: boolean onPictureInPictureRequested()>
<android.app.Activity: void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState)>
<android.app.Activity: void onPostCreate(android.os.Bundle)>
<android.app.Activity: void onPostCreate(android.os.Bundle,android.os.PersistableBundle)>
<android.app.Activity: void onPostResume()>
<android.app.Activity: void onPrepareDialog(int,android.app.Dialog)>
<android.app.Activity: void onPrepareDialog(int,android.app.Dialog,android.os.Bundle)>
<android.app.Activity: void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)>
<android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)>
<android.app.Activity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.app.Activity: void onProvideAssistContent(android.app.assist.AssistContent)>
<android.app.Activity: void onProvideAssistData(android.os.Bundle)>
<android.app.Activity: android.net.Uri onProvideReferrer()>
<android.app.Activity: void onRequestPermissionsResult(int,java.lang.String[],int[])>
<android.app.Activity: void onRestart()>
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle,android.os.PersistableBundle)>
<android.app.Activity: void onResume()>
<android.app.Activity: java.lang.Object onRetainNonConfigurationInstance()>
<android.app.Activity: void onSaveInstanceState(android.os.Bundle)>
<android.app.Activity: void onSaveInstanceState(android.os.Bundle,android.os.PersistableBundle)>
<android.app.Activity: boolean onSearchRequested(android.view.SearchEvent)>
<android.app.Activity: boolean onSearchRequested()>
<android.app.Activity: void onStart()>
<android.app.Activity: void onStateNotSaved()>
<android.app.Activity: void onStop()>
<android.app.Activity: void onTitleChanged(java.lang.CharSequence,int)>
<android.app.Activity: void onTopResumedActivityChanged(boolean)>
<android.app.Activity: boolean onTouchEvent(android.view.MotionEvent)>
<android.app.Activity: boolean onTrackballEvent(android.view.MotionEvent)>
<android.app.Activity: void onTrimMemory(int)>
<android.app.Activity: void onUserInteraction()>
<android.app.Activity: void onUserLeaveHint()>
<android.app.Activity: void onVisibleBehindCanceled()>
<android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>
<android.app.Activity: void onWindowFocusChanged(boolean)>
<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>
<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>
<android.app.Activity: void openContextMenu(android.view.View)>
<android.app.Activity: void openOptionsMenu()>
<android.app.Activity: void overridePendingTransition(int,int)>
<android.app.Activity: void overridePendingTransition(int,int,int)>
<android.app.Activity: void postponeEnterTransition()>
<android.app.Activity: void recreate()>
<android.app.Activity: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>
<android.app.Activity: void registerForContextMenu(android.view.View)>
<android.app.Activity: boolean releaseInstance()>
<android.app.Activity: void removeDialog(int)>
<android.app.Activity: void reportFullyDrawn()>
<android.app.Activity: android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent)>
<android.app.Activity: void requestPermissions(java.lang.String[],int)>
<android.app.Activity: void requestShowKeyboardShortcuts()>
<android.app.Activity: boolean requestVisibleBehind(boolean)>
<android.app.Activity: boolean requestWindowFeature(int)>
<android.app.Activity: android.view.View requireViewById(int)>
<android.app.Activity: void runOnUiThread(java.lang.Runnable)>
<android.app.Activity: void setActionBar(android.widget.Toolbar)>
<android.app.Activity: void setContentTransitionManager(android.transition.TransitionManager)>
<android.app.Activity: void setContentView(int)>
<android.app.Activity: void setContentView(android.view.View)>
<android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.app.Activity: void setDefaultKeyMode(int)>
<android.app.Activity: void setEnterSharedElementCallback(android.app.SharedElementCallback)>
<android.app.Activity: void setExitSharedElementCallback(android.app.SharedElementCallback)>
<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>
<android.app.Activity: void setFeatureDrawableAlpha(int,int)>
<android.app.Activity: void setFeatureDrawableResource(int,int)>
<android.app.Activity: void setFeatureDrawableUri(int,android.net.Uri)>
<android.app.Activity: void setFinishOnTouchOutside(boolean)>
<android.app.Activity: void setImmersive(boolean)>
<android.app.Activity: void setInheritShowWhenLocked(boolean)>
<android.app.Activity: void setIntent(android.content.Intent)>
<android.app.Activity: void setLocusContext(android.content.LocusId,android.os.Bundle)>
<android.app.Activity: void setMediaController(android.media.session.MediaController)>
<android.app.Activity: void setPictureInPictureParams(android.app.PictureInPictureParams)>
<android.app.Activity: void setProgress(int)>
<android.app.Activity: void setProgressBarIndeterminate(boolean)>
<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)>
<android.app.Activity: void setProgressBarVisibility(boolean)>
<android.app.Activity: void setRecentsScreenshotEnabled(boolean)>
<android.app.Activity: void setRequestedOrientation(int)>
<android.app.Activity: void setResult(int)>
<android.app.Activity: void setResult(int,android.content.Intent)>
<android.app.Activity: void setSecondaryProgress(int)>
<android.app.Activity: void setShouldDockBigOverlays(boolean)>
<android.app.Activity: void setShowWhenLocked(boolean)>
<android.app.Activity: void setTaskDescription(android.app.ActivityManager$TaskDescription)>
<android.app.Activity: void setTitle(java.lang.CharSequence)>
<android.app.Activity: void setTitle(int)>
<android.app.Activity: void setTitleColor(int)>
<android.app.Activity: boolean setTranslucent(boolean)>
<android.app.Activity: void setTurnScreenOn(boolean)>
<android.app.Activity: void setVisible(boolean)>
<android.app.Activity: void setVolumeControlStream(int)>
<android.app.Activity: void setVrModeEnabled(boolean,android.content.ComponentName)>
<android.app.Activity: boolean shouldDockBigOverlays()>
<android.app.Activity: boolean shouldShowRequestPermissionRationale(java.lang.String)>
<android.app.Activity: boolean shouldUpRecreateTask(android.content.Intent)>
<android.app.Activity: boolean showAssist(android.os.Bundle)>
<android.app.Activity: void showDialog(int)>
<android.app.Activity: boolean showDialog(int,android.os.Bundle)>
<android.app.Activity: void showLockTaskEscapeMessage()>
<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>
<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback,int)>
<android.app.Activity: void startActivityForResult(android.content.Intent,int)>
<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)>
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)>
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)>
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)>
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)>
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)>
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)>
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>
<android.app.Activity: void startLocalVoiceInteraction(android.os.Bundle)>
<android.app.Activity: void startLockTask()>
<android.app.Activity: void startManagingCursor(android.database.Cursor)>
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)>
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent,android.os.Bundle)>
<android.app.Activity: void startPostponedEnterTransition()>
<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)>
<android.app.Activity: void stopLocalVoiceInteraction()>
<android.app.Activity: void stopLockTask()>
<android.app.Activity: void stopManagingCursor(android.database.Cursor)>
<android.app.Activity: void takeKeyEvents(boolean)>
<android.app.Activity: void triggerSearch(java.lang.String,android.os.Bundle)>
<android.app.Activity: void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>
<android.app.Activity: void unregisterForContextMenu(android.view.View)>
<android.app.Activity: int DEFAULT_KEYS_DIALER>
<android.app.Activity: int DEFAULT_KEYS_DISABLE>
<android.app.Activity: int DEFAULT_KEYS_SEARCH_GLOBAL>
<android.app.Activity: int DEFAULT_KEYS_SEARCH_LOCAL>
<android.app.Activity: int DEFAULT_KEYS_SHORTCUT>
<android.app.Activity: int[] FOCUSED_STATE_SET>
<android.app.Activity: int RESULT_CANCELED>
<android.app.Activity: int RESULT_FIRST_USER>
<android.app.Activity: int RESULT_OK>
android.app.ActivityGroup
<android.app.ActivityGroup: void <init>()>
<android.app.ActivityGroup: void <init>(boolean)>
<android.app.ActivityGroup: android.app.Activity getCurrentActivity()>
<android.app.ActivityGroup: android.app.LocalActivityManager getLocalActivityManager()>
android.app.ActivityManager
<android.app.ActivityManager: int addAppTask(android.app.Activity,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
<android.app.ActivityManager: void appNotResponding(java.lang.String)>
<android.app.ActivityManager: boolean clearApplicationUserData()>
<android.app.ActivityManager: void clearWatchHeapLimit()>
<android.app.ActivityManager: void dumpPackageState(java.io.FileDescriptor,java.lang.String)>
<android.app.ActivityManager: android.util.Size getAppTaskThumbnailSize()>
<android.app.ActivityManager: java.util.List getAppTasks()>
<android.app.ActivityManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>
<android.app.ActivityManager: java.util.List getHistoricalProcessExitReasons(java.lang.String,int,int)>
<android.app.ActivityManager: int getLargeMemoryClass()>
<android.app.ActivityManager: int getLauncherLargeIconDensity()>
<android.app.ActivityManager: int getLauncherLargeIconSize()>
<android.app.ActivityManager: int getLockTaskModeState()>
<android.app.ActivityManager: int getMemoryClass()>
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>
<android.app.ActivityManager: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)>
<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>
<android.app.ActivityManager: java.util.List getProcessesInErrorState()>
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)>
<android.app.ActivityManager: java.util.List getRunningAppProcesses()>
<android.app.ActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>
<android.app.ActivityManager: java.util.List getRunningServices(int)>
<android.app.ActivityManager: java.util.List getRunningTasks(int)>
<android.app.ActivityManager: boolean isActivityStartAllowedOnDisplay(android.content.Context,int,android.content.Intent)>
<android.app.ActivityManager: boolean isBackgroundRestricted()>
<android.app.ActivityManager: boolean isInLockTaskMode()>
<android.app.ActivityManager: boolean isLowMemoryKillReportSupported()>
<android.app.ActivityManager: boolean isLowRamDevice()>
<android.app.ActivityManager: boolean isRunningInTestHarness()>
<android.app.ActivityManager: boolean isRunningInUserTestHarness()>
<android.app.ActivityManager: boolean isUserAMonkey()>
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>
<android.app.ActivityManager: void moveTaskToFront(int,int)>
<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)>
<android.app.ActivityManager: void restartPackage(java.lang.String)>
<android.app.ActivityManager: void setProcessStateSummary(byte[])>
<android.app.ActivityManager: void setVrThread(int)>
<android.app.ActivityManager: void setWatchHeapLimit(long)>
<android.app.ActivityManager: java.lang.String ACTION_REPORT_HEAP_LIMIT>
<android.app.ActivityManager: int LOCK_TASK_MODE_LOCKED>
<android.app.ActivityManager: int LOCK_TASK_MODE_NONE>
<android.app.ActivityManager: int LOCK_TASK_MODE_PINNED>
<android.app.ActivityManager: java.lang.String META_HOME_ALTERNATE>
<android.app.ActivityManager: int MOVE_TASK_NO_USER_ACTION>
<android.app.ActivityManager: int MOVE_TASK_WITH_HOME>
<android.app.ActivityManager: int RECENT_IGNORE_UNAVAILABLE>
<android.app.ActivityManager: int RECENT_WITH_EXCLUDED>
android.app.ActivityManager$AppTask
<android.app.ActivityManager$AppTask: void finishAndRemoveTask()>
<android.app.ActivityManager$AppTask: android.app.ActivityManager$RecentTaskInfo getTaskInfo()>
<android.app.ActivityManager$AppTask: void moveToFront()>
<android.app.ActivityManager$AppTask: void setExcludeFromRecents(boolean)>
<android.app.ActivityManager$AppTask: void startActivity(android.content.Context,android.content.Intent,android.os.Bundle)>
android.app.ActivityManager$MemoryInfo
<android.app.ActivityManager$MemoryInfo: void <init>()>
<android.app.ActivityManager$MemoryInfo: int describeContents()>
<android.app.ActivityManager$MemoryInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager$MemoryInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityManager$MemoryInfo: android.os.Parcelable$Creator CREATOR>
<android.app.ActivityManager$MemoryInfo: long availMem>
<android.app.ActivityManager$MemoryInfo: boolean lowMemory>
<android.app.ActivityManager$MemoryInfo: long threshold>
<android.app.ActivityManager$MemoryInfo: long totalMem>
android.app.ActivityManager$ProcessErrorStateInfo
<android.app.ActivityManager$ProcessErrorStateInfo: void <init>()>
<android.app.ActivityManager$ProcessErrorStateInfo: int describeContents()>
<android.app.ActivityManager$ProcessErrorStateInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager$ProcessErrorStateInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityManager$ProcessErrorStateInfo: int CRASHED>
<android.app.ActivityManager$ProcessErrorStateInfo: android.os.Parcelable$Creator CREATOR>
<android.app.ActivityManager$ProcessErrorStateInfo: int NOT_RESPONDING>
<android.app.ActivityManager$ProcessErrorStateInfo: int NO_ERROR>
<android.app.ActivityManager$ProcessErrorStateInfo: int condition>
<android.app.ActivityManager$ProcessErrorStateInfo: byte[] crashData>
<android.app.ActivityManager$ProcessErrorStateInfo: java.lang.String longMsg>
<android.app.ActivityManager$ProcessErrorStateInfo: int pid>
<android.app.ActivityManager$ProcessErrorStateInfo: java.lang.String processName>
<android.app.ActivityManager$ProcessErrorStateInfo: java.lang.String shortMsg>
<android.app.ActivityManager$ProcessErrorStateInfo: java.lang.String stackTrace>
<android.app.ActivityManager$ProcessErrorStateInfo: java.lang.String tag>
<android.app.ActivityManager$ProcessErrorStateInfo: int uid>
android.app.ActivityManager$RecentTaskInfo
<android.app.ActivityManager$RecentTaskInfo: void <init>()>
<android.app.ActivityManager$RecentTaskInfo: int describeContents()>
<android.app.ActivityManager$RecentTaskInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager$RecentTaskInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityManager$RecentTaskInfo: android.os.Parcelable$Creator CREATOR>
<android.app.ActivityManager$RecentTaskInfo: int affiliatedTaskId>
<android.app.ActivityManager$RecentTaskInfo: java.lang.CharSequence description>
<android.app.ActivityManager$RecentTaskInfo: int id>
<android.app.ActivityManager$RecentTaskInfo: int persistentId>
android.app.ActivityManager$RunningAppProcessInfo
<android.app.ActivityManager$RunningAppProcessInfo: void <init>()>
<android.app.ActivityManager$RunningAppProcessInfo: void <init>(java.lang.String,int,java.lang.String[])>
<android.app.ActivityManager$RunningAppProcessInfo: int describeContents()>
<android.app.ActivityManager$RunningAppProcessInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager$RunningAppProcessInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityManager$RunningAppProcessInfo: android.os.Parcelable$Creator CREATOR>
<android.app.ActivityManager$RunningAppProcessInfo: int IMPORTANCE_BACKGROUND>
<android.app.ActivityManager$RunningAppProcessInfo: int IMPORTANCE_CACHED>
<android.app.ActivityManager$RunningAppProcessInfo: int IMPORTANCE_CANT_SAVE_STATE>
<android.app.ActivityManager$RunningAppProcessInfo: int IMPORTANCE_EMPTY>
<android.app.ActivityManager$RunningAppProcessInfo: int IMPORTANCE_FOREGROUND>
<android.app.ActivityManager$RunningAppProcessInfo: int IMPORTANCE_FOREGROUND_SERVICE>
<android.app.ActivityManager$RunningAppProcessInfo: int IMPORTANCE_GONE>
<android.app.ActivityManager$RunningAppProcessInfo: int IMPORTANCE_PERCEPTIBLE>
<android.app.ActivityManager$RunningAppProcessInfo: int IMPORTANCE_PERCEPTIBLE_PRE_26>
<android.app.ActivityManager$RunningAppProcessInfo: int IMPORTANCE_SERVICE>
<android.app.ActivityManager$RunningAppProcessInfo: int IMPORTANCE_TOP_SLEEPING>
<android.app.ActivityManager$RunningAppProcessInfo: int IMPORTANCE_TOP_SLEEPING_PRE_28>
<android.app.ActivityManager$RunningAppProcessInfo: int IMPORTANCE_VISIBLE>
<android.app.ActivityManager$RunningAppProcessInfo: int REASON_PROVIDER_IN_USE>
<android.app.ActivityManager$RunningAppProcessInfo: int REASON_SERVICE_IN_USE>
<android.app.ActivityManager$RunningAppProcessInfo: int REASON_UNKNOWN>
<android.app.ActivityManager$RunningAppProcessInfo: int importance>
<android.app.ActivityManager$RunningAppProcessInfo: int importanceReasonCode>
<android.app.ActivityManager$RunningAppProcessInfo: android.content.ComponentName importanceReasonComponent>
<android.app.ActivityManager$RunningAppProcessInfo: int importanceReasonPid>
<android.app.ActivityManager$RunningAppProcessInfo: int lastTrimLevel>
<android.app.ActivityManager$RunningAppProcessInfo: int lru>
<android.app.ActivityManager$RunningAppProcessInfo: int pid>
<android.app.ActivityManager$RunningAppProcessInfo: java.lang.String[] pkgList>
<android.app.ActivityManager$RunningAppProcessInfo: java.lang.String processName>
<android.app.ActivityManager$RunningAppProcessInfo: int uid>
android.app.ActivityManager$RunningServiceInfo
<android.app.ActivityManager$RunningServiceInfo: void <init>()>
<android.app.ActivityManager$RunningServiceInfo: int describeContents()>
<android.app.ActivityManager$RunningServiceInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager$RunningServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityManager$RunningServiceInfo: android.os.Parcelable$Creator CREATOR>
<android.app.ActivityManager$RunningServiceInfo: int FLAG_FOREGROUND>
<android.app.ActivityManager$RunningServiceInfo: int FLAG_PERSISTENT_PROCESS>
<android.app.ActivityManager$RunningServiceInfo: int FLAG_STARTED>
<android.app.ActivityManager$RunningServiceInfo: int FLAG_SYSTEM_PROCESS>
<android.app.ActivityManager$RunningServiceInfo: long activeSince>
<android.app.ActivityManager$RunningServiceInfo: int clientCount>
<android.app.ActivityManager$RunningServiceInfo: int clientLabel>
<android.app.ActivityManager$RunningServiceInfo: java.lang.String clientPackage>
<android.app.ActivityManager$RunningServiceInfo: int crashCount>
<android.app.ActivityManager$RunningServiceInfo: int flags>
<android.app.ActivityManager$RunningServiceInfo: boolean foreground>
<android.app.ActivityManager$RunningServiceInfo: long lastActivityTime>
<android.app.ActivityManager$RunningServiceInfo: int pid>
<android.app.ActivityManager$RunningServiceInfo: java.lang.String process>
<android.app.ActivityManager$RunningServiceInfo: long restarting>
<android.app.ActivityManager$RunningServiceInfo: android.content.ComponentName service>
<android.app.ActivityManager$RunningServiceInfo: boolean started>
<android.app.ActivityManager$RunningServiceInfo: int uid>
android.app.ActivityManager$RunningTaskInfo
<android.app.ActivityManager$RunningTaskInfo: void <init>()>
<android.app.ActivityManager$RunningTaskInfo: int describeContents()>
<android.app.ActivityManager$RunningTaskInfo: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager$RunningTaskInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityManager$RunningTaskInfo: android.os.Parcelable$Creator CREATOR>
<android.app.ActivityManager$RunningTaskInfo: java.lang.CharSequence description>
<android.app.ActivityManager$RunningTaskInfo: int id>
<android.app.ActivityManager$RunningTaskInfo: int numRunning>
<android.app.ActivityManager$RunningTaskInfo: android.graphics.Bitmap thumbnail>
android.app.ActivityManager$TaskDescription
<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,int,int)>
<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,int)>
<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String)>
<android.app.ActivityManager$TaskDescription: void <init>()>
<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.Bitmap,int)>
<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.Bitmap)>
<android.app.ActivityManager$TaskDescription: void <init>(android.app.ActivityManager$TaskDescription)>
<android.app.ActivityManager$TaskDescription: int describeContents()>
<android.app.ActivityManager$TaskDescription: int getBackgroundColor()>
<android.app.ActivityManager$TaskDescription: android.graphics.Bitmap getIcon()>
<android.app.ActivityManager$TaskDescription: java.lang.String getLabel()>
<android.app.ActivityManager$TaskDescription: int getNavigationBarColor()>
<android.app.ActivityManager$TaskDescription: int getPrimaryColor()>
<android.app.ActivityManager$TaskDescription: int getStatusBarColor()>
<android.app.ActivityManager$TaskDescription: void readFromParcel(android.os.Parcel)>
<android.app.ActivityManager$TaskDescription: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityManager$TaskDescription: android.os.Parcelable$Creator CREATOR>
android.app.ActivityManager$TaskDescription$Builder
<android.app.ActivityManager$TaskDescription$Builder: void <init>()>
<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription build()>
<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setBackgroundColor(int)>
<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setIcon(int)>
<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setLabel(java.lang.String)>
<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setNavigationBarColor(int)>
<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setPrimaryColor(int)>
<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setStatusBarColor(int)>
android.app.ActivityOptions
<android.app.ActivityOptions: android.graphics.Rect getLaunchBounds()>
<android.app.ActivityOptions: int getLaunchDisplayId()>
<android.app.ActivityOptions: boolean getLockTaskMode()>
<android.app.ActivityOptions: int getSplashScreenStyle()>
<android.app.ActivityOptions: boolean isPendingIntentBackgroundActivityLaunchAllowed()>
<android.app.ActivityOptions: android.app.ActivityOptions makeBasic()>
<android.app.ActivityOptions: android.app.ActivityOptions makeClipRevealAnimation(android.view.View,int,int,int,int)>
<android.app.ActivityOptions: android.app.ActivityOptions makeCustomAnimation(android.content.Context,int,int)>
<android.app.ActivityOptions: android.app.ActivityOptions makeCustomAnimation(android.content.Context,int,int,int)>
<android.app.ActivityOptions: android.app.ActivityOptions makeLaunchIntoPip(android.app.PictureInPictureParams)>
<android.app.ActivityOptions: android.app.ActivityOptions makeScaleUpAnimation(android.view.View,int,int,int,int)>
<android.app.ActivityOptions: android.app.ActivityOptions makeSceneTransitionAnimation(android.app.Activity,android.view.View,java.lang.String)>
<android.app.ActivityOptions: android.app.ActivityOptions makeSceneTransitionAnimation(android.app.Activity,android.util.Pair[])>
<android.app.ActivityOptions: android.app.ActivityOptions makeTaskLaunchBehind()>
<android.app.ActivityOptions: android.app.ActivityOptions makeThumbnailScaleUpAnimation(android.view.View,android.graphics.Bitmap,int,int)>
<android.app.ActivityOptions: void requestUsageTimeReport(android.app.PendingIntent)>
<android.app.ActivityOptions: android.app.ActivityOptions setAppVerificationBundle(android.os.Bundle)>
<android.app.ActivityOptions: android.app.ActivityOptions setLaunchBounds(android.graphics.Rect)>
<android.app.ActivityOptions: android.app.ActivityOptions setLaunchDisplayId(int)>
<android.app.ActivityOptions: android.app.ActivityOptions setLockTaskEnabled(boolean)>
<android.app.ActivityOptions: void setPendingIntentBackgroundActivityLaunchAllowed(boolean)>
<android.app.ActivityOptions: android.app.ActivityOptions setSplashScreenStyle(int)>
<android.app.ActivityOptions: android.os.Bundle toBundle()>
<android.app.ActivityOptions: void update(android.app.ActivityOptions)>
<android.app.ActivityOptions: java.lang.String EXTRA_USAGE_TIME_REPORT>
<android.app.ActivityOptions: java.lang.String EXTRA_USAGE_TIME_REPORT_PACKAGES>
android.app.AlarmManager
<android.app.AlarmManager: boolean canScheduleExactAlarms()>
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>
<android.app.AlarmManager: void cancel(android.app.AlarmManager$OnAlarmListener)>
<android.app.AlarmManager: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock()>
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>
<android.app.AlarmManager: void set(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)>
<android.app.AlarmManager: void setAlarmClock(android.app.AlarmManager$AlarmClockInfo,android.app.PendingIntent)>
<android.app.AlarmManager: void setAndAllowWhileIdle(int,long,android.app.PendingIntent)>
<android.app.AlarmManager: void setExact(int,long,android.app.PendingIntent)>
<android.app.AlarmManager: void setExact(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)>
<android.app.AlarmManager: void setExactAndAllowWhileIdle(int,long,android.app.PendingIntent)>
<android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)>
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>
<android.app.AlarmManager: void setTime(long)>
<android.app.AlarmManager: void setTimeZone(java.lang.String)>
<android.app.AlarmManager: void setWindow(int,long,long,android.app.PendingIntent)>
<android.app.AlarmManager: void setWindow(int,long,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)>
<android.app.AlarmManager: java.lang.String ACTION_NEXT_ALARM_CLOCK_CHANGED>
<android.app.AlarmManager: java.lang.String ACTION_SCHEDULE_EXACT_ALARM_PERMISSION_STATE_CHANGED>
<android.app.AlarmManager: int ELAPSED_REALTIME>
<android.app.AlarmManager: int ELAPSED_REALTIME_WAKEUP>
<android.app.AlarmManager: long INTERVAL_DAY>
<android.app.AlarmManager: long INTERVAL_FIFTEEN_MINUTES>
<android.app.AlarmManager: long INTERVAL_HALF_DAY>
<android.app.AlarmManager: long INTERVAL_HALF_HOUR>
<android.app.AlarmManager: long INTERVAL_HOUR>
<android.app.AlarmManager: int RTC>
<android.app.AlarmManager: int RTC_WAKEUP>
android.app.AlarmManager$AlarmClockInfo
<android.app.AlarmManager$AlarmClockInfo: void <init>(long,android.app.PendingIntent)>
<android.app.AlarmManager$AlarmClockInfo: int describeContents()>
<android.app.AlarmManager$AlarmClockInfo: android.app.PendingIntent getShowIntent()>
<android.app.AlarmManager$AlarmClockInfo: long getTriggerTime()>
<android.app.AlarmManager$AlarmClockInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.AlarmManager$AlarmClockInfo: android.os.Parcelable$Creator CREATOR>
android.app.AlarmManager$OnAlarmListener
<android.app.AlarmManager$OnAlarmListener: void onAlarm()>
android.app.AlertDialog
<android.app.AlertDialog: void <init>(android.content.Context)>
<android.app.AlertDialog: void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)>
<android.app.AlertDialog: void <init>(android.content.Context,int)>
<android.app.AlertDialog: android.widget.Button getButton(int)>
<android.app.AlertDialog: android.widget.ListView getListView()>
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.os.Message)>
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.os.Message)>
<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.os.Message)>
<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.os.Message)>
<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog: void setCustomTitle(android.view.View)>
<android.app.AlertDialog: void setIcon(int)>
<android.app.AlertDialog: void setIcon(android.graphics.drawable.Drawable)>
<android.app.AlertDialog: void setIconAttribute(int)>
<android.app.AlertDialog: void setInverseBackgroundForced(boolean)>
<android.app.AlertDialog: void setMessage(java.lang.CharSequence)>
<android.app.AlertDialog: void setView(android.view.View)>
<android.app.AlertDialog: void setView(android.view.View,int,int,int,int)>
<android.app.AlertDialog: int THEME_DEVICE_DEFAULT_DARK>
<android.app.AlertDialog: int THEME_DEVICE_DEFAULT_LIGHT>
<android.app.AlertDialog: int THEME_HOLO_DARK>
<android.app.AlertDialog: int THEME_HOLO_LIGHT>
<android.app.AlertDialog: int THEME_TRADITIONAL>
android.app.AlertDialog$Builder
<android.app.AlertDialog$Builder: void <init>(android.content.Context)>
<android.app.AlertDialog$Builder: void <init>(android.content.Context,int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog create()>
<android.app.AlertDialog$Builder: android.content.Context getContext()>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCursor(android.database.Cursor,android.content.DialogInterface$OnClickListener,java.lang.String)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCustomTitle(android.view.View)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIconAttribute(int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setInverseBackgroundForced(boolean)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(java.lang.CharSequence[],android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(int,boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(android.database.Cursor,java.lang.String,java.lang.String,android.content.DialogInterface$OnMultiChoiceClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnDismissListener(android.content.DialogInterface$OnDismissListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.database.Cursor,int,java.lang.String,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(android.view.View)>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
android.app.AliasActivity
<android.app.AliasActivity: void <init>()>
android.app.AppComponentFactory
<android.app.AppComponentFactory: void <init>()>
<android.app.AppComponentFactory: android.app.Activity instantiateActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
<android.app.AppComponentFactory: android.app.Application instantiateApplication(java.lang.ClassLoader,java.lang.String)>
<android.app.AppComponentFactory: java.lang.ClassLoader instantiateClassLoader(java.lang.ClassLoader,android.content.pm.ApplicationInfo)>
<android.app.AppComponentFactory: android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String)>
<android.app.AppComponentFactory: android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
<android.app.AppComponentFactory: android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
android.app.AppOpsManager
<android.app.AppOpsManager: int checkOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int checkOpNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>
<android.app.AppOpsManager: void finishOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: void finishOp(java.lang.String,int,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: void finishProxyOp(java.lang.String,int,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: boolean isOpActive(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int noteProxyOp(java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int noteProxyOp(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String,int)>
<android.app.AppOpsManager: int noteProxyOpNoThrow(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: java.lang.String permissionToOp(java.lang.String)>
<android.app.AppOpsManager: void setOnOpNotedCallback(java.util.concurrent.Executor,android.app.AppOpsManager$OnOpNotedCallback)>
<android.app.AppOpsManager: int startOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int startOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int startOpNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int startOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int startProxyOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: int startProxyOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<android.app.AppOpsManager: void startWatchingActive(java.lang.String[],java.util.concurrent.Executor,android.app.AppOpsManager$OnOpActiveChangedListener)>
<android.app.AppOpsManager: void startWatchingMode(java.lang.String,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)>
<android.app.AppOpsManager: void startWatchingMode(java.lang.String,java.lang.String,int,android.app.AppOpsManager$OnOpChangedListener)>
<android.app.AppOpsManager: void stopWatchingActive(android.app.AppOpsManager$OnOpActiveChangedListener)>
<android.app.AppOpsManager: void stopWatchingMode(android.app.AppOpsManager$OnOpChangedListener)>
<android.app.AppOpsManager: int unsafeCheckOp(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int unsafeCheckOpNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int unsafeCheckOpRaw(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(java.lang.String,int,java.lang.String)>
<android.app.AppOpsManager: int MODE_ALLOWED>
<android.app.AppOpsManager: int MODE_DEFAULT>
<android.app.AppOpsManager: int MODE_ERRORED>
<android.app.AppOpsManager: int MODE_FOREGROUND>
<android.app.AppOpsManager: int MODE_IGNORED>
<android.app.AppOpsManager: java.lang.String OPSTR_ADD_VOICEMAIL>
<android.app.AppOpsManager: java.lang.String OPSTR_ANSWER_PHONE_CALLS>
<android.app.AppOpsManager: java.lang.String OPSTR_BODY_SENSORS>
<android.app.AppOpsManager: java.lang.String OPSTR_CALL_PHONE>
<android.app.AppOpsManager: java.lang.String OPSTR_CAMERA>
<android.app.AppOpsManager: java.lang.String OPSTR_COARSE_LOCATION>
<android.app.AppOpsManager: java.lang.String OPSTR_FINE_LOCATION>
<android.app.AppOpsManager: java.lang.String OPSTR_GET_USAGE_STATS>
<android.app.AppOpsManager: java.lang.String OPSTR_MOCK_LOCATION>
<android.app.AppOpsManager: java.lang.String OPSTR_MONITOR_HIGH_POWER_LOCATION>
<android.app.AppOpsManager: java.lang.String OPSTR_MONITOR_LOCATION>
<android.app.AppOpsManager: java.lang.String OPSTR_PICTURE_IN_PICTURE>
<android.app.AppOpsManager: java.lang.String OPSTR_PROCESS_OUTGOING_CALLS>
<android.app.AppOpsManager: java.lang.String OPSTR_READ_CALENDAR>
<android.app.AppOpsManager: java.lang.String OPSTR_READ_CALL_LOG>
<android.app.AppOpsManager: java.lang.String OPSTR_READ_CELL_BROADCASTS>
<android.app.AppOpsManager: java.lang.String OPSTR_READ_CONTACTS>
<android.app.AppOpsManager: java.lang.String OPSTR_READ_EXTERNAL_STORAGE>
<android.app.AppOpsManager: java.lang.String OPSTR_READ_PHONE_NUMBERS>
<android.app.AppOpsManager: java.lang.String OPSTR_READ_PHONE_STATE>
<android.app.AppOpsManager: java.lang.String OPSTR_READ_SMS>
<android.app.AppOpsManager: java.lang.String OPSTR_RECEIVE_MMS>
<android.app.AppOpsManager: java.lang.String OPSTR_RECEIVE_SMS>
<android.app.AppOpsManager: java.lang.String OPSTR_RECEIVE_WAP_PUSH>
<android.app.AppOpsManager: java.lang.String OPSTR_RECORD_AUDIO>
<android.app.AppOpsManager: java.lang.String OPSTR_SEND_SMS>
<android.app.AppOpsManager: java.lang.String OPSTR_SYSTEM_ALERT_WINDOW>
<android.app.AppOpsManager: java.lang.String OPSTR_USE_FINGERPRINT>
<android.app.AppOpsManager: java.lang.String OPSTR_USE_SIP>
<android.app.AppOpsManager: java.lang.String OPSTR_WRITE_CALENDAR>
<android.app.AppOpsManager: java.lang.String OPSTR_WRITE_CALL_LOG>
<android.app.AppOpsManager: java.lang.String OPSTR_WRITE_CONTACTS>
<android.app.AppOpsManager: java.lang.String OPSTR_WRITE_EXTERNAL_STORAGE>
<android.app.AppOpsManager: java.lang.String OPSTR_WRITE_SETTINGS>
<android.app.AppOpsManager: int WATCH_FOREGROUND_CHANGES>
android.app.AppOpsManager$OnOpActiveChangedListener
<android.app.AppOpsManager$OnOpActiveChangedListener: void onOpActiveChanged(java.lang.String,int,java.lang.String,boolean)>
android.app.AppOpsManager$OnOpChangedListener
<android.app.AppOpsManager$OnOpChangedListener: void onOpChanged(java.lang.String,java.lang.String)>
android.app.AppOpsManager$OnOpNotedCallback
<android.app.AppOpsManager$OnOpNotedCallback: void <init>()>
<android.app.AppOpsManager$OnOpNotedCallback: void onAsyncNoted(android.app.AsyncNotedAppOp)>
<android.app.AppOpsManager$OnOpNotedCallback: void onNoted(android.app.SyncNotedAppOp)>
<android.app.AppOpsManager$OnOpNotedCallback: void onSelfNoted(android.app.SyncNotedAppOp)>
android.app.Application
<android.app.Application: void <init>()>
<android.app.Application: java.lang.String getProcessName()>
<android.app.Application: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Application: void onCreate()>
<android.app.Application: void onLowMemory()>
<android.app.Application: void onTerminate()>
<android.app.Application: void onTrimMemory(int)>
<android.app.Application: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>
<android.app.Application: void registerOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener)>
<android.app.Application: void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>
<android.app.Application: void unregisterOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener)>
android.app.Application$ActivityLifecycleCallbacks
<android.app.Application$ActivityLifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityDestroyed(android.app.Activity)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPaused(android.app.Activity)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostDestroyed(android.app.Activity)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostPaused(android.app.Activity)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostResumed(android.app.Activity)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostSaveInstanceState(android.app.Activity,android.os.Bundle)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostStarted(android.app.Activity)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostStopped(android.app.Activity)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreCreated(android.app.Activity,android.os.Bundle)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPrePaused(android.app.Activity)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreResumed(android.app.Activity)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreSaveInstanceState(android.app.Activity,android.os.Bundle)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreStarted(android.app.Activity)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreStopped(android.app.Activity)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityResumed(android.app.Activity)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityStarted(android.app.Activity)>
<android.app.Application$ActivityLifecycleCallbacks: void onActivityStopped(android.app.Activity)>
android.app.Application$OnProvideAssistDataListener
<android.app.Application$OnProvideAssistDataListener: void onProvideAssistData(android.app.Activity,android.os.Bundle)>
android.app.ApplicationErrorReport
<android.app.ApplicationErrorReport: void <init>()>
<android.app.ApplicationErrorReport: int describeContents()>
<android.app.ApplicationErrorReport: void dump(android.util.Printer,java.lang.String)>
<android.app.ApplicationErrorReport: android.content.ComponentName getErrorReportReceiver(android.content.Context,java.lang.String,int)>
<android.app.ApplicationErrorReport: void readFromParcel(android.os.Parcel)>
<android.app.ApplicationErrorReport: void writeToParcel(android.os.Parcel,int)>
<android.app.ApplicationErrorReport: android.os.Parcelable$Creator CREATOR>
<android.app.ApplicationErrorReport: int TYPE_ANR>
<android.app.ApplicationErrorReport: int TYPE_BATTERY>
<android.app.ApplicationErrorReport: int TYPE_CRASH>
<android.app.ApplicationErrorReport: int TYPE_NONE>
<android.app.ApplicationErrorReport: int TYPE_RUNNING_SERVICE>
<android.app.ApplicationErrorReport: android.app.ApplicationErrorReport$AnrInfo anrInfo>
<android.app.ApplicationErrorReport: android.app.ApplicationErrorReport$BatteryInfo batteryInfo>
<android.app.ApplicationErrorReport: android.app.ApplicationErrorReport$CrashInfo crashInfo>
<android.app.ApplicationErrorReport: java.lang.String installerPackageName>
<android.app.ApplicationErrorReport: java.lang.String packageName>
<android.app.ApplicationErrorReport: java.lang.String processName>
<android.app.ApplicationErrorReport: android.app.ApplicationErrorReport$RunningServiceInfo runningServiceInfo>
<android.app.ApplicationErrorReport: boolean systemApp>
<android.app.ApplicationErrorReport: long time>
<android.app.ApplicationErrorReport: int type>
android.app.ApplicationErrorReport$AnrInfo
<android.app.ApplicationErrorReport$AnrInfo: void <init>()>
<android.app.ApplicationErrorReport$AnrInfo: void <init>(android.os.Parcel)>
<android.app.ApplicationErrorReport$AnrInfo: void dump(android.util.Printer,java.lang.String)>
<android.app.ApplicationErrorReport$AnrInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ApplicationErrorReport$AnrInfo: java.lang.String activity>
<android.app.ApplicationErrorReport$AnrInfo: java.lang.String cause>
<android.app.ApplicationErrorReport$AnrInfo: java.lang.String info>
android.app.ApplicationErrorReport$BatteryInfo
<android.app.ApplicationErrorReport$BatteryInfo: void <init>()>
<android.app.ApplicationErrorReport$BatteryInfo: void <init>(android.os.Parcel)>
<android.app.ApplicationErrorReport$BatteryInfo: void dump(android.util.Printer,java.lang.String)>
<android.app.ApplicationErrorReport$BatteryInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ApplicationErrorReport$BatteryInfo: java.lang.String checkinDetails>
<android.app.ApplicationErrorReport$BatteryInfo: long durationMicros>
<android.app.ApplicationErrorReport$BatteryInfo: java.lang.String usageDetails>
<android.app.ApplicationErrorReport$BatteryInfo: int usagePercent>
android.app.ApplicationErrorReport$CrashInfo
<android.app.ApplicationErrorReport$CrashInfo: void <init>()>
<android.app.ApplicationErrorReport$CrashInfo: void <init>(java.lang.Throwable)>
<android.app.ApplicationErrorReport$CrashInfo: void <init>(android.os.Parcel)>
<android.app.ApplicationErrorReport$CrashInfo: void dump(android.util.Printer,java.lang.String)>
<android.app.ApplicationErrorReport$CrashInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ApplicationErrorReport$CrashInfo: java.lang.String exceptionClassName>
<android.app.ApplicationErrorReport$CrashInfo: java.lang.String exceptionMessage>
<android.app.ApplicationErrorReport$CrashInfo: java.lang.String stackTrace>
<android.app.ApplicationErrorReport$CrashInfo: java.lang.String throwClassName>
<android.app.ApplicationErrorReport$CrashInfo: java.lang.String throwFileName>
<android.app.ApplicationErrorReport$CrashInfo: int throwLineNumber>
<android.app.ApplicationErrorReport$CrashInfo: java.lang.String throwMethodName>
android.app.ApplicationErrorReport$RunningServiceInfo
<android.app.ApplicationErrorReport$RunningServiceInfo: void <init>()>
<android.app.ApplicationErrorReport$RunningServiceInfo: void <init>(android.os.Parcel)>
<android.app.ApplicationErrorReport$RunningServiceInfo: void dump(android.util.Printer,java.lang.String)>
<android.app.ApplicationErrorReport$RunningServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ApplicationErrorReport$RunningServiceInfo: long durationMillis>
<android.app.ApplicationErrorReport$RunningServiceInfo: java.lang.String serviceDetails>
android.app.ApplicationExitInfo
<android.app.ApplicationExitInfo: int describeContents()>
<android.app.ApplicationExitInfo: int getDefiningUid()>
<android.app.ApplicationExitInfo: java.lang.String getDescription()>
<android.app.ApplicationExitInfo: int getImportance()>
<android.app.ApplicationExitInfo: int getPackageUid()>
<android.app.ApplicationExitInfo: int getPid()>
<android.app.ApplicationExitInfo: java.lang.String getProcessName()>
<android.app.ApplicationExitInfo: byte[] getProcessStateSummary()>
<android.app.ApplicationExitInfo: long getPss()>
<android.app.ApplicationExitInfo: int getRealUid()>
<android.app.ApplicationExitInfo: int getReason()>
<android.app.ApplicationExitInfo: long getRss()>
<android.app.ApplicationExitInfo: int getStatus()>
<android.app.ApplicationExitInfo: long getTimestamp()>
<android.app.ApplicationExitInfo: java.io.InputStream getTraceInputStream()>
<android.app.ApplicationExitInfo: android.os.UserHandle getUserHandle()>
<android.app.ApplicationExitInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.ApplicationExitInfo: android.os.Parcelable$Creator CREATOR>
<android.app.ApplicationExitInfo: int REASON_ANR>
<android.app.ApplicationExitInfo: int REASON_CRASH>
<android.app.ApplicationExitInfo: int REASON_CRASH_NATIVE>
<android.app.ApplicationExitInfo: int REASON_DEPENDENCY_DIED>
<android.app.ApplicationExitInfo: int REASON_EXCESSIVE_RESOURCE_USAGE>
<android.app.ApplicationExitInfo: int REASON_EXIT_SELF>
<android.app.ApplicationExitInfo: int REASON_FREEZER>
<android.app.ApplicationExitInfo: int REASON_INITIALIZATION_FAILURE>
<android.app.ApplicationExitInfo: int REASON_LOW_MEMORY>
<android.app.ApplicationExitInfo: int REASON_OTHER>
<android.app.ApplicationExitInfo: int REASON_PERMISSION_CHANGE>
<android.app.ApplicationExitInfo: int REASON_SIGNALED>
<android.app.ApplicationExitInfo: int REASON_UNKNOWN>
<android.app.ApplicationExitInfo: int REASON_USER_REQUESTED>
<android.app.ApplicationExitInfo: int REASON_USER_STOPPED>
android.app.AsyncNotedAppOp
<android.app.AsyncNotedAppOp: int describeContents()>
<android.app.AsyncNotedAppOp: java.lang.String getAttributionTag()>
<android.app.AsyncNotedAppOp: java.lang.String getMessage()>
<android.app.AsyncNotedAppOp: int getNotingUid()>
<android.app.AsyncNotedAppOp: java.lang.String getOp()>
<android.app.AsyncNotedAppOp: long getTime()>
<android.app.AsyncNotedAppOp: void writeToParcel(android.os.Parcel,int)>
<android.app.AsyncNotedAppOp: android.os.Parcelable$Creator CREATOR>
android.app.AuthenticationRequiredException
<android.app.AuthenticationRequiredException: void <init>(java.lang.Throwable,android.app.PendingIntent)>
<android.app.AuthenticationRequiredException: int describeContents()>
<android.app.AuthenticationRequiredException: android.app.PendingIntent getUserAction()>
<android.app.AuthenticationRequiredException: void writeToParcel(android.os.Parcel,int)>
<android.app.AuthenticationRequiredException: android.os.Parcelable$Creator CREATOR>
android.app.AutomaticZenRule
<android.app.AutomaticZenRule: void <init>(java.lang.String,android.content.ComponentName,android.net.Uri,int,boolean)>
<android.app.AutomaticZenRule: void <init>(java.lang.String,android.content.ComponentName,android.content.ComponentName,android.net.Uri,android.service.notification.ZenPolicy,int,boolean)>
<android.app.AutomaticZenRule: void <init>(android.os.Parcel)>
<android.app.AutomaticZenRule: int describeContents()>
<android.app.AutomaticZenRule: android.net.Uri getConditionId()>
<android.app.AutomaticZenRule: android.content.ComponentName getConfigurationActivity()>
<android.app.AutomaticZenRule: long getCreationTime()>
<android.app.AutomaticZenRule: int getInterruptionFilter()>
<android.app.AutomaticZenRule: java.lang.String getName()>
<android.app.AutomaticZenRule: android.content.ComponentName getOwner()>
<android.app.AutomaticZenRule: android.service.notification.ZenPolicy getZenPolicy()>
<android.app.AutomaticZenRule: boolean isEnabled()>
<android.app.AutomaticZenRule: void setConditionId(android.net.Uri)>
<android.app.AutomaticZenRule: void setConfigurationActivity(android.content.ComponentName)>
<android.app.AutomaticZenRule: void setEnabled(boolean)>
<android.app.AutomaticZenRule: void setInterruptionFilter(int)>
<android.app.AutomaticZenRule: void setName(java.lang.String)>
<android.app.AutomaticZenRule: void setZenPolicy(android.service.notification.ZenPolicy)>
<android.app.AutomaticZenRule: void writeToParcel(android.os.Parcel,int)>
<android.app.AutomaticZenRule: android.os.Parcelable$Creator CREATOR>
android.app.BackgroundServiceStartNotAllowedException
<android.app.BackgroundServiceStartNotAllowedException: void <init>(java.lang.String)>
<android.app.BackgroundServiceStartNotAllowedException: int describeContents()>
<android.app.BackgroundServiceStartNotAllowedException: void writeToParcel(android.os.Parcel,int)>
<android.app.BackgroundServiceStartNotAllowedException: android.os.Parcelable$Creator CREATOR>
android.app.DatePickerDialog
<android.app.DatePickerDialog: void <init>(android.content.Context)>
<android.app.DatePickerDialog: void <init>(android.content.Context,int)>
<android.app.DatePickerDialog: void <init>(android.content.Context,android.app.DatePickerDialog$OnDateSetListener,int,int,int)>
<android.app.DatePickerDialog: void <init>(android.content.Context,int,android.app.DatePickerDialog$OnDateSetListener,int,int,int)>
<android.app.DatePickerDialog: android.widget.DatePicker getDatePicker()>
<android.app.DatePickerDialog: void onClick(android.content.DialogInterface,int)>
<android.app.DatePickerDialog: void onDateChanged(android.widget.DatePicker,int,int,int)>
<android.app.DatePickerDialog: void setOnDateSetListener(android.app.DatePickerDialog$OnDateSetListener)>
<android.app.DatePickerDialog: void updateDate(int,int,int)>
android.app.DatePickerDialog$OnDateSetListener
<android.app.DatePickerDialog$OnDateSetListener: void onDateSet(android.widget.DatePicker,int,int,int)>
android.app.Dialog
<android.app.Dialog: void <init>(android.content.Context)>
<android.app.Dialog: void <init>(android.content.Context,int)>
<android.app.Dialog: void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)>
<android.app.Dialog: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.app.Dialog: void cancel()>
<android.app.Dialog: void closeOptionsMenu()>
<android.app.Dialog: void create()>
<android.app.Dialog: void dismiss()>
<android.app.Dialog: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.app.Dialog: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.app.Dialog: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.app.Dialog: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.app.Dialog: android.view.View findViewById(int)>
<android.app.Dialog: android.app.ActionBar getActionBar()>
<android.app.Dialog: android.content.Context getContext()>
<android.app.Dialog: android.view.View getCurrentFocus()>
<android.app.Dialog: android.view.LayoutInflater getLayoutInflater()>
<android.app.Dialog: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()>
<android.app.Dialog: android.app.Activity getOwnerActivity()>
<android.app.Dialog: android.view.SearchEvent getSearchEvent()>
<android.app.Dialog: int getVolumeControlStream()>
<android.app.Dialog: android.view.Window getWindow()>
<android.app.Dialog: void hide()>
<android.app.Dialog: void invalidateOptionsMenu()>
<android.app.Dialog: boolean isShowing()>
<android.app.Dialog: void onActionModeFinished(android.view.ActionMode)>
<android.app.Dialog: void onActionModeStarted(android.view.ActionMode)>
<android.app.Dialog: void onAttachedToWindow()>
<android.app.Dialog: void onBackPressed()>
<android.app.Dialog: void onContentChanged()>
<android.app.Dialog: boolean onContextItemSelected(android.view.MenuItem)>
<android.app.Dialog: void onContextMenuClosed(android.view.Menu)>
<android.app.Dialog: void onCreate(android.os.Bundle)>
<android.app.Dialog: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<android.app.Dialog: boolean onCreateOptionsMenu(android.view.Menu)>
<android.app.Dialog: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.app.Dialog: android.view.View onCreatePanelView(int)>
<android.app.Dialog: void onDetachedFromWindow()>
<android.app.Dialog: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean onKeyDown(int,android.view.KeyEvent)>
<android.app.Dialog: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.app.Dialog: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.app.Dialog: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.app.Dialog: boolean onKeyUp(int,android.view.KeyEvent)>
<android.app.Dialog: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.app.Dialog: boolean onMenuOpened(int,android.view.Menu)>
<android.app.Dialog: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.app.Dialog: void onOptionsMenuClosed(android.view.Menu)>
<android.app.Dialog: void onPanelClosed(int,android.view.Menu)>
<android.app.Dialog: boolean onPrepareOptionsMenu(android.view.Menu)>
<android.app.Dialog: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)>
<android.app.Dialog: android.os.Bundle onSaveInstanceState()>
<android.app.Dialog: boolean onSearchRequested(android.view.SearchEvent)>
<android.app.Dialog: boolean onSearchRequested()>
<android.app.Dialog: void onStart()>
<android.app.Dialog: void onStop()>
<android.app.Dialog: boolean onTouchEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean onTrackballEvent(android.view.MotionEvent)>
<android.app.Dialog: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>
<android.app.Dialog: void onWindowFocusChanged(boolean)>
<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>
<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>
<android.app.Dialog: void openContextMenu(android.view.View)>
<android.app.Dialog: void openOptionsMenu()>
<android.app.Dialog: void registerForContextMenu(android.view.View)>
<android.app.Dialog: boolean requestWindowFeature(int)>
<android.app.Dialog: android.view.View requireViewById(int)>
<android.app.Dialog: void setCancelMessage(android.os.Message)>
<android.app.Dialog: void setCancelable(boolean)>
<android.app.Dialog: void setCanceledOnTouchOutside(boolean)>
<android.app.Dialog: void setContentView(int)>
<android.app.Dialog: void setContentView(android.view.View)>
<android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.app.Dialog: void setDismissMessage(android.os.Message)>
<android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>
<android.app.Dialog: void setFeatureDrawableAlpha(int,int)>
<android.app.Dialog: void setFeatureDrawableResource(int,int)>
<android.app.Dialog: void setFeatureDrawableUri(int,android.net.Uri)>
<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)>
<android.app.Dialog: void setOnKeyListener(android.content.DialogInterface$OnKeyListener)>
<android.app.Dialog: void setOnShowListener(android.content.DialogInterface$OnShowListener)>
<android.app.Dialog: void setOwnerActivity(android.app.Activity)>
<android.app.Dialog: void setTitle(java.lang.CharSequence)>
<android.app.Dialog: void setTitle(int)>
<android.app.Dialog: void setVolumeControlStream(int)>
<android.app.Dialog: void show()>
<android.app.Dialog: void takeKeyEvents(boolean)>
<android.app.Dialog: void unregisterForContextMenu(android.view.View)>
android.app.DialogFragment
<android.app.DialogFragment: void <init>()>
<android.app.DialogFragment: void dismiss()>
<android.app.DialogFragment: void dismissAllowingStateLoss()>
<android.app.DialogFragment: android.app.Dialog getDialog()>
<android.app.DialogFragment: boolean getShowsDialog()>
<android.app.DialogFragment: int getTheme()>
<android.app.DialogFragment: boolean isCancelable()>
<android.app.DialogFragment: void onCancel(android.content.DialogInterface)>
<android.app.DialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<android.app.DialogFragment: void onDismiss(android.content.DialogInterface)>
<android.app.DialogFragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)>
<android.app.DialogFragment: void setCancelable(boolean)>
<android.app.DialogFragment: void setShowsDialog(boolean)>
<android.app.DialogFragment: void setStyle(int,int)>
<android.app.DialogFragment: void show(android.app.FragmentManager,java.lang.String)>
<android.app.DialogFragment: int show(android.app.FragmentTransaction,java.lang.String)>
<android.app.DialogFragment: int STYLE_NORMAL>
<android.app.DialogFragment: int STYLE_NO_FRAME>
<android.app.DialogFragment: int STYLE_NO_INPUT>
<android.app.DialogFragment: int STYLE_NO_TITLE>
android.app.DirectAction
<android.app.DirectAction: int describeContents()>
<android.app.DirectAction: android.os.Bundle getExtras()>
<android.app.DirectAction: java.lang.String getId()>
<android.app.DirectAction: android.content.LocusId getLocusId()>
<android.app.DirectAction: void writeToParcel(android.os.Parcel,int)>
<android.app.DirectAction: android.os.Parcelable$Creator CREATOR>
android.app.DirectAction$Builder
<android.app.DirectAction$Builder: void <init>(java.lang.String)>
<android.app.DirectAction$Builder: android.app.DirectAction build()>
<android.app.DirectAction$Builder: android.app.DirectAction$Builder setExtras(android.os.Bundle)>
<android.app.DirectAction$Builder: android.app.DirectAction$Builder setLocusId(android.content.LocusId)>
android.app.DownloadManager
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)>
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,android.net.Uri,android.net.Uri)>
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)>
<android.app.DownloadManager: java.lang.Long getMaxBytesOverMobile(android.content.Context)>
<android.app.DownloadManager: java.lang.String getMimeTypeForDownloadedFile(long)>
<android.app.DownloadManager: java.lang.Long getRecommendedMaxBytesOverMobile(android.content.Context)>
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)>
<android.app.DownloadManager: android.os.ParcelFileDescriptor openDownloadedFile(long)>
<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query)>
<android.app.DownloadManager: int remove(long[])>
<android.app.DownloadManager: java.lang.String ACTION_DOWNLOAD_COMPLETE>
<android.app.DownloadManager: java.lang.String ACTION_NOTIFICATION_CLICKED>
<android.app.DownloadManager: java.lang.String ACTION_VIEW_DOWNLOADS>
<android.app.DownloadManager: java.lang.String COLUMN_BYTES_DOWNLOADED_SO_FAR>
<android.app.DownloadManager: java.lang.String COLUMN_DESCRIPTION>
<android.app.DownloadManager: java.lang.String COLUMN_ID>
<android.app.DownloadManager: java.lang.String COLUMN_LAST_MODIFIED_TIMESTAMP>
<android.app.DownloadManager: java.lang.String COLUMN_LOCAL_FILENAME>
<android.app.DownloadManager: java.lang.String COLUMN_LOCAL_URI>
<android.app.DownloadManager: java.lang.String COLUMN_MEDIAPROVIDER_URI>
<android.app.DownloadManager: java.lang.String COLUMN_MEDIA_TYPE>
<android.app.DownloadManager: java.lang.String COLUMN_REASON>
<android.app.DownloadManager: java.lang.String COLUMN_STATUS>
<android.app.DownloadManager: java.lang.String COLUMN_TITLE>
<android.app.DownloadManager: java.lang.String COLUMN_TOTAL_SIZE_BYTES>
<android.app.DownloadManager: java.lang.String COLUMN_URI>
<android.app.DownloadManager: int ERROR_CANNOT_RESUME>
<android.app.DownloadManager: int ERROR_DEVICE_NOT_FOUND>
<android.app.DownloadManager: int ERROR_FILE_ALREADY_EXISTS>
<android.app.DownloadManager: int ERROR_FILE_ERROR>
<android.app.DownloadManager: int ERROR_HTTP_DATA_ERROR>
<android.app.DownloadManager: int ERROR_INSUFFICIENT_SPACE>
<android.app.DownloadManager: int ERROR_TOO_MANY_REDIRECTS>
<android.app.DownloadManager: int ERROR_UNHANDLED_HTTP_CODE>
<android.app.DownloadManager: int ERROR_UNKNOWN>
<android.app.DownloadManager: java.lang.String EXTRA_DOWNLOAD_ID>
<android.app.DownloadManager: java.lang.String EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS>
<android.app.DownloadManager: java.lang.String INTENT_EXTRAS_SORT_BY_SIZE>
<android.app.DownloadManager: int PAUSED_QUEUED_FOR_WIFI>
<android.app.DownloadManager: int PAUSED_UNKNOWN>
<android.app.DownloadManager: int PAUSED_WAITING_FOR_NETWORK>
<android.app.DownloadManager: int PAUSED_WAITING_TO_RETRY>
<android.app.DownloadManager: int STATUS_FAILED>
<android.app.DownloadManager: int STATUS_PAUSED>
<android.app.DownloadManager: int STATUS_PENDING>
<android.app.DownloadManager: int STATUS_RUNNING>
<android.app.DownloadManager: int STATUS_SUCCESSFUL>
android.app.DownloadManager$Query
<android.app.DownloadManager$Query: void <init>()>
<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterById(long[])>
<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterByStatus(int)>
android.app.DownloadManager$Request
<android.app.DownloadManager$Request: void <init>(android.net.Uri)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request addRequestHeader(java.lang.String,java.lang.String)>
<android.app.DownloadManager$Request: void allowScanningByMediaScanner()>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setAllowedNetworkTypes(int)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setAllowedOverMetered(boolean)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setAllowedOverRoaming(boolean)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDescription(java.lang.CharSequence)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDestinationInExternalFilesDir(android.content.Context,java.lang.String,java.lang.String)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDestinationInExternalPublicDir(java.lang.String,java.lang.String)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDestinationUri(android.net.Uri)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setMimeType(java.lang.String)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setNotificationVisibility(int)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setRequiresCharging(boolean)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setRequiresDeviceIdle(boolean)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setShowRunningNotification(boolean)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setTitle(java.lang.CharSequence)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setVisibleInDownloadsUi(boolean)>
<android.app.DownloadManager$Request: int NETWORK_MOBILE>
<android.app.DownloadManager$Request: int NETWORK_WIFI>
<android.app.DownloadManager$Request: int VISIBILITY_HIDDEN>
<android.app.DownloadManager$Request: int VISIBILITY_VISIBLE>
<android.app.DownloadManager$Request: int VISIBILITY_VISIBLE_NOTIFY_COMPLETED>
<android.app.DownloadManager$Request: int VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION>
android.app.ExpandableListActivity
<android.app.ExpandableListActivity: void <init>()>
<android.app.ExpandableListActivity: android.widget.ExpandableListAdapter getExpandableListAdapter()>
<android.app.ExpandableListActivity: android.widget.ExpandableListView getExpandableListView()>
<android.app.ExpandableListActivity: long getSelectedId()>
<android.app.ExpandableListActivity: long getSelectedPosition()>
<android.app.ExpandableListActivity: boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)>
<android.app.ExpandableListActivity: void onGroupCollapse(int)>
<android.app.ExpandableListActivity: void onGroupExpand(int)>
<android.app.ExpandableListActivity: void setListAdapter(android.widget.ExpandableListAdapter)>
<android.app.ExpandableListActivity: boolean setSelectedChild(int,int,boolean)>
<android.app.ExpandableListActivity: void setSelectedGroup(int)>
android.app.ForegroundServiceStartNotAllowedException
<android.app.ForegroundServiceStartNotAllowedException: void <init>(java.lang.String)>
<android.app.ForegroundServiceStartNotAllowedException: int describeContents()>
<android.app.ForegroundServiceStartNotAllowedException: void writeToParcel(android.os.Parcel,int)>
<android.app.ForegroundServiceStartNotAllowedException: android.os.Parcelable$Creator CREATOR>
android.app.Fragment
<android.app.Fragment: void <init>()>
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.Fragment: boolean equals(java.lang.Object)>
<android.app.Fragment: android.app.Activity getActivity()>
<android.app.Fragment: boolean getAllowEnterTransitionOverlap()>
<android.app.Fragment: boolean getAllowReturnTransitionOverlap()>
<android.app.Fragment: android.os.Bundle getArguments()>
<android.app.Fragment: android.app.FragmentManager getChildFragmentManager()>
<android.app.Fragment: android.content.Context getContext()>
<android.app.Fragment: android.transition.Transition getEnterTransition()>
<android.app.Fragment: android.transition.Transition getExitTransition()>
<android.app.Fragment: android.app.FragmentManager getFragmentManager()>
<android.app.Fragment: java.lang.Object getHost()>
<android.app.Fragment: int getId()>
<android.app.Fragment: android.view.LayoutInflater getLayoutInflater()>
<android.app.Fragment: android.app.LoaderManager getLoaderManager()>
<android.app.Fragment: android.app.Fragment getParentFragment()>
<android.app.Fragment: android.transition.Transition getReenterTransition()>
<android.app.Fragment: android.content.res.Resources getResources()>
<android.app.Fragment: boolean getRetainInstance()>
<android.app.Fragment: android.transition.Transition getReturnTransition()>
<android.app.Fragment: android.transition.Transition getSharedElementEnterTransition()>
<android.app.Fragment: android.transition.Transition getSharedElementReturnTransition()>
<android.app.Fragment: java.lang.String getString(int)>
<android.app.Fragment: java.lang.String getString(int,java.lang.Object[])>
<android.app.Fragment: java.lang.String getTag()>
<android.app.Fragment: android.app.Fragment getTargetFragment()>
<android.app.Fragment: int getTargetRequestCode()>
<android.app.Fragment: java.lang.CharSequence getText(int)>
<android.app.Fragment: boolean getUserVisibleHint()>
<android.app.Fragment: android.view.View getView()>
<android.app.Fragment: int hashCode()>
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String)>
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>
<android.app.Fragment: boolean isAdded()>
<android.app.Fragment: boolean isDetached()>
<android.app.Fragment: boolean isHidden()>
<android.app.Fragment: boolean isInLayout()>
<android.app.Fragment: boolean isRemoving()>
<android.app.Fragment: boolean isResumed()>
<android.app.Fragment: boolean isStateSaved()>
<android.app.Fragment: boolean isVisible()>
<android.app.Fragment: void onActivityCreated(android.os.Bundle)>
<android.app.Fragment: void onActivityResult(int,int,android.content.Intent)>
<android.app.Fragment: void onAttach(android.content.Context)>
<android.app.Fragment: void onAttach(android.app.Activity)>
<android.app.Fragment: void onAttachFragment(android.app.Fragment)>
<android.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Fragment: boolean onContextItemSelected(android.view.MenuItem)>
<android.app.Fragment: void onCreate(android.os.Bundle)>
<android.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)>
<android.app.Fragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<android.app.Fragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<android.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<android.app.Fragment: void onDestroy()>
<android.app.Fragment: void onDestroyOptionsMenu()>
<android.app.Fragment: void onDestroyView()>
<android.app.Fragment: void onDetach()>
<android.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)>
<android.app.Fragment: void onHiddenChanged(boolean)>
<android.app.Fragment: void onInflate(android.util.AttributeSet,android.os.Bundle)>
<android.app.Fragment: void onInflate(android.content.Context,android.util.AttributeSet,android.os.Bundle)>
<android.app.Fragment: void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)>
<android.app.Fragment: void onLowMemory()>
<android.app.Fragment: void onMultiWindowModeChanged(boolean,android.content.res.Configuration)>
<android.app.Fragment: void onMultiWindowModeChanged(boolean)>
<android.app.Fragment: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.app.Fragment: void onOptionsMenuClosed(android.view.Menu)>
<android.app.Fragment: void onPause()>
<android.app.Fragment: void onPictureInPictureModeChanged(boolean,android.content.res.Configuration)>
<android.app.Fragment: void onPictureInPictureModeChanged(boolean)>
<android.app.Fragment: void onPrepareOptionsMenu(android.view.Menu)>
<android.app.Fragment: void onRequestPermissionsResult(int,java.lang.String[],int[])>
<android.app.Fragment: void onResume()>
<android.app.Fragment: void onSaveInstanceState(android.os.Bundle)>
<android.app.Fragment: void onStart()>
<android.app.Fragment: void onStop()>
<android.app.Fragment: void onTrimMemory(int)>
<android.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)>
<android.app.Fragment: void onViewStateRestored(android.os.Bundle)>
<android.app.Fragment: void postponeEnterTransition()>
<android.app.Fragment: void registerForContextMenu(android.view.View)>
<android.app.Fragment: void requestPermissions(java.lang.String[],int)>
<android.app.Fragment: void setAllowEnterTransitionOverlap(boolean)>
<android.app.Fragment: void setAllowReturnTransitionOverlap(boolean)>
<android.app.Fragment: void setArguments(android.os.Bundle)>
<android.app.Fragment: void setEnterSharedElementCallback(android.app.SharedElementCallback)>
<android.app.Fragment: void setEnterTransition(android.transition.Transition)>
<android.app.Fragment: void setExitSharedElementCallback(android.app.SharedElementCallback)>
<android.app.Fragment: void setExitTransition(android.transition.Transition)>
<android.app.Fragment: void setHasOptionsMenu(boolean)>
<android.app.Fragment: void setInitialSavedState(android.app.Fragment$SavedState)>
<android.app.Fragment: void setMenuVisibility(boolean)>
<android.app.Fragment: void setReenterTransition(android.transition.Transition)>
<android.app.Fragment: void setRetainInstance(boolean)>
<android.app.Fragment: void setReturnTransition(android.transition.Transition)>
<android.app.Fragment: void setSharedElementEnterTransition(android.transition.Transition)>
<android.app.Fragment: void setSharedElementReturnTransition(android.transition.Transition)>
<android.app.Fragment: void setTargetFragment(android.app.Fragment,int)>
<android.app.Fragment: void setUserVisibleHint(boolean)>
<android.app.Fragment: boolean shouldShowRequestPermissionRationale(java.lang.String)>
<android.app.Fragment: void startActivity(android.content.Intent)>
<android.app.Fragment: void startActivity(android.content.Intent,android.os.Bundle)>
<android.app.Fragment: void startActivityForResult(android.content.Intent,int)>
<android.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>
<android.app.Fragment: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>
<android.app.Fragment: void startPostponedEnterTransition()>
<android.app.Fragment: void unregisterForContextMenu(android.view.View)>
android.app.Fragment$InstantiationException
<android.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)>
android.app.Fragment$SavedState
<android.app.Fragment$SavedState: int describeContents()>
<android.app.Fragment$SavedState: void writeToParcel(android.os.Parcel,int)>
<android.app.Fragment$SavedState: android.os.Parcelable$ClassLoaderCreator CREATOR>
android.app.FragmentBreadCrumbs
<android.app.FragmentBreadCrumbs: void <init>(android.content.Context)>
<android.app.FragmentBreadCrumbs: void <init>(android.content.Context,android.util.AttributeSet)>
<android.app.FragmentBreadCrumbs: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.app.FragmentBreadCrumbs: void onBackStackChanged()>
<android.app.FragmentBreadCrumbs: void setActivity(android.app.Activity)>
<android.app.FragmentBreadCrumbs: void setMaxVisible(int)>
<android.app.FragmentBreadCrumbs: void setOnBreadCrumbClickListener(android.app.FragmentBreadCrumbs$OnBreadCrumbClickListener)>
<android.app.FragmentBreadCrumbs: void setParentTitle(java.lang.CharSequence,java.lang.CharSequence,android.view.View$OnClickListener)>
<android.app.FragmentBreadCrumbs: void setTitle(java.lang.CharSequence,java.lang.CharSequence)>
android.app.FragmentBreadCrumbs$OnBreadCrumbClickListener
<android.app.FragmentBreadCrumbs$OnBreadCrumbClickListener: boolean onBreadCrumbClick(android.app.FragmentManager$BackStackEntry,int)>
android.app.FragmentContainer
<android.app.FragmentContainer: void <init>()>
<android.app.FragmentContainer: android.view.View onFindViewById(int)>
<android.app.FragmentContainer: boolean onHasView()>
android.app.FragmentController
<android.app.FragmentController: void attachHost(android.app.Fragment)>
<android.app.FragmentController: android.app.FragmentController createController(android.app.FragmentHostCallback)>
<android.app.FragmentController: void dispatchActivityCreated()>
<android.app.FragmentController: void dispatchConfigurationChanged(android.content.res.Configuration)>
<android.app.FragmentController: boolean dispatchContextItemSelected(android.view.MenuItem)>
<android.app.FragmentController: void dispatchCreate()>
<android.app.FragmentController: boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<android.app.FragmentController: void dispatchDestroy()>
<android.app.FragmentController: void dispatchDestroyView()>
<android.app.FragmentController: void dispatchLowMemory()>
<android.app.FragmentController: void dispatchMultiWindowModeChanged(boolean)>
<android.app.FragmentController: void dispatchMultiWindowModeChanged(boolean,android.content.res.Configuration)>
<android.app.FragmentController: boolean dispatchOptionsItemSelected(android.view.MenuItem)>
<android.app.FragmentController: void dispatchOptionsMenuClosed(android.view.Menu)>
<android.app.FragmentController: void dispatchPause()>
<android.app.FragmentController: void dispatchPictureInPictureModeChanged(boolean)>
<android.app.FragmentController: void dispatchPictureInPictureModeChanged(boolean,android.content.res.Configuration)>
<android.app.FragmentController: boolean dispatchPrepareOptionsMenu(android.view.Menu)>
<android.app.FragmentController: void dispatchResume()>
<android.app.FragmentController: void dispatchStart()>
<android.app.FragmentController: void dispatchStop()>
<android.app.FragmentController: void dispatchTrimMemory(int)>
<android.app.FragmentController: void doLoaderDestroy()>
<android.app.FragmentController: void doLoaderStart()>
<android.app.FragmentController: void doLoaderStop(boolean)>
<android.app.FragmentController: void dumpLoaders(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.FragmentController: boolean execPendingActions()>
<android.app.FragmentController: android.app.Fragment findFragmentByWho(java.lang.String)>
<android.app.FragmentController: android.app.FragmentManager getFragmentManager()>
<android.app.FragmentController: android.app.LoaderManager getLoaderManager()>
<android.app.FragmentController: void noteStateNotSaved()>
<android.app.FragmentController: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.app.FragmentController: void reportLoaderStart()>
<android.app.FragmentController: void restoreAllState(android.os.Parcelable,java.util.List)>
<android.app.FragmentController: void restoreAllState(android.os.Parcelable,android.app.FragmentManagerNonConfig)>
<android.app.FragmentController: void restoreLoaderNonConfig(android.util.ArrayMap)>
<android.app.FragmentController: android.util.ArrayMap retainLoaderNonConfig()>
<android.app.FragmentController: android.app.FragmentManagerNonConfig retainNestedNonConfig()>
<android.app.FragmentController: java.util.List retainNonConfig()>
<android.app.FragmentController: android.os.Parcelable saveAllState()>
android.app.FragmentHostCallback
<android.app.FragmentHostCallback: void <init>(android.content.Context,android.os.Handler,int)>
<android.app.FragmentHostCallback: void onAttachFragment(android.app.Fragment)>
<android.app.FragmentHostCallback: void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.FragmentHostCallback: android.view.View onFindViewById(int)>
<android.app.FragmentHostCallback: java.lang.Object onGetHost()>
<android.app.FragmentHostCallback: android.view.LayoutInflater onGetLayoutInflater()>
<android.app.FragmentHostCallback: int onGetWindowAnimations()>
<android.app.FragmentHostCallback: boolean onHasView()>
<android.app.FragmentHostCallback: boolean onHasWindowAnimations()>
<android.app.FragmentHostCallback: void onInvalidateOptionsMenu()>
<android.app.FragmentHostCallback: void onRequestPermissionsFromFragment(android.app.Fragment,java.lang.String[],int)>
<android.app.FragmentHostCallback: boolean onShouldSaveFragmentState(android.app.Fragment)>
<android.app.FragmentHostCallback: void onStartActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)>
<android.app.FragmentHostCallback: void onStartIntentSenderFromFragment(android.app.Fragment,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>
<android.app.FragmentHostCallback: boolean onUseFragmentManagerInflaterFactory()>
android.app.FragmentManager
<android.app.FragmentManager: void <init>()>
<android.app.FragmentManager: void addOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener)>
<android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()>
<android.app.FragmentManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.FragmentManager: void enableDebugLogging(boolean)>
<android.app.FragmentManager: boolean executePendingTransactions()>
<android.app.FragmentManager: android.app.Fragment findFragmentById(int)>
<android.app.FragmentManager: android.app.Fragment findFragmentByTag(java.lang.String)>
<android.app.FragmentManager: android.app.FragmentManager$BackStackEntry getBackStackEntryAt(int)>
<android.app.FragmentManager: int getBackStackEntryCount()>
<android.app.FragmentManager: android.app.Fragment getFragment(android.os.Bundle,java.lang.String)>
<android.app.FragmentManager: java.util.List getFragments()>
<android.app.FragmentManager: android.app.Fragment getPrimaryNavigationFragment()>
<android.app.FragmentManager: void invalidateOptionsMenu()>
<android.app.FragmentManager: boolean isDestroyed()>
<android.app.FragmentManager: boolean isStateSaved()>
<android.app.FragmentManager: void popBackStack()>
<android.app.FragmentManager: void popBackStack(java.lang.String,int)>
<android.app.FragmentManager: void popBackStack(int,int)>
<android.app.FragmentManager: boolean popBackStackImmediate()>
<android.app.FragmentManager: boolean popBackStackImmediate(java.lang.String,int)>
<android.app.FragmentManager: boolean popBackStackImmediate(int,int)>
<android.app.FragmentManager: void putFragment(android.os.Bundle,java.lang.String,android.app.Fragment)>
<android.app.FragmentManager: void registerFragmentLifecycleCallbacks(android.app.FragmentManager$FragmentLifecycleCallbacks,boolean)>
<android.app.FragmentManager: void removeOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener)>
<android.app.FragmentManager: android.app.Fragment$SavedState saveFragmentInstanceState(android.app.Fragment)>
<android.app.FragmentManager: void unregisterFragmentLifecycleCallbacks(android.app.FragmentManager$FragmentLifecycleCallbacks)>
<android.app.FragmentManager: int POP_BACK_STACK_INCLUSIVE>
android.app.FragmentManager$BackStackEntry
<android.app.FragmentManager$BackStackEntry: java.lang.CharSequence getBreadCrumbShortTitle()>
<android.app.FragmentManager$BackStackEntry: int getBreadCrumbShortTitleRes()>
<android.app.FragmentManager$BackStackEntry: java.lang.CharSequence getBreadCrumbTitle()>
<android.app.FragmentManager$BackStackEntry: int getBreadCrumbTitleRes()>
<android.app.FragmentManager$BackStackEntry: int getId()>
<android.app.FragmentManager$BackStackEntry: java.lang.String getName()>
android.app.FragmentManager$FragmentLifecycleCallbacks
<android.app.FragmentManager$FragmentLifecycleCallbacks: void <init>()>
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentActivityCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentAttached(android.app.FragmentManager,android.app.Fragment,android.content.Context)>
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDestroyed(android.app.FragmentManager,android.app.Fragment)>
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDetached(android.app.FragmentManager,android.app.Fragment)>
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPaused(android.app.FragmentManager,android.app.Fragment)>
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreAttached(android.app.FragmentManager,android.app.Fragment,android.content.Context)>
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentResumed(android.app.FragmentManager,android.app.Fragment)>
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentSaveInstanceState(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStarted(android.app.FragmentManager,android.app.Fragment)>
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStopped(android.app.FragmentManager,android.app.Fragment)>
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewCreated(android.app.FragmentManager,android.app.Fragment,android.view.View,android.os.Bundle)>
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewDestroyed(android.app.FragmentManager,android.app.Fragment)>
android.app.FragmentManager$OnBackStackChangedListener
<android.app.FragmentManager$OnBackStackChangedListener: void onBackStackChanged()>
android.app.FragmentManagerNonConfig
android.app.FragmentTransaction
<android.app.FragmentTransaction: void <init>()>
<android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)>
<android.app.FragmentTransaction: android.app.FragmentTransaction add(int,android.app.Fragment)>
<android.app.FragmentTransaction: android.app.FragmentTransaction add(int,android.app.Fragment,java.lang.String)>
<android.app.FragmentTransaction: android.app.FragmentTransaction addSharedElement(android.view.View,java.lang.String)>
<android.app.FragmentTransaction: android.app.FragmentTransaction addToBackStack(java.lang.String)>
<android.app.FragmentTransaction: android.app.FragmentTransaction attach(android.app.Fragment)>
<android.app.FragmentTransaction: int commit()>
<android.app.FragmentTransaction: int commitAllowingStateLoss()>
<android.app.FragmentTransaction: void commitNow()>
<android.app.FragmentTransaction: void commitNowAllowingStateLoss()>
<android.app.FragmentTransaction: android.app.FragmentTransaction detach(android.app.Fragment)>
<android.app.FragmentTransaction: android.app.FragmentTransaction disallowAddToBackStack()>
<android.app.FragmentTransaction: android.app.FragmentTransaction hide(android.app.Fragment)>
<android.app.FragmentTransaction: boolean isAddToBackStackAllowed()>
<android.app.FragmentTransaction: boolean isEmpty()>
<android.app.FragmentTransaction: android.app.FragmentTransaction remove(android.app.Fragment)>
<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment)>
<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment,java.lang.String)>
<android.app.FragmentTransaction: android.app.FragmentTransaction runOnCommit(java.lang.Runnable)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbShortTitle(int)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbTitle(int)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setCustomAnimations(int,int)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setCustomAnimations(int,int,int,int)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setPrimaryNavigationFragment(android.app.Fragment)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setReorderingAllowed(boolean)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setTransition(int)>
<android.app.FragmentTransaction: android.app.FragmentTransaction setTransitionStyle(int)>
<android.app.FragmentTransaction: android.app.FragmentTransaction show(android.app.Fragment)>
<android.app.FragmentTransaction: int TRANSIT_ENTER_MASK>
<android.app.FragmentTransaction: int TRANSIT_EXIT_MASK>
<android.app.FragmentTransaction: int TRANSIT_FRAGMENT_CLOSE>
<android.app.FragmentTransaction: int TRANSIT_FRAGMENT_FADE>
<android.app.FragmentTransaction: int TRANSIT_FRAGMENT_OPEN>
<android.app.FragmentTransaction: int TRANSIT_NONE>
<android.app.FragmentTransaction: int TRANSIT_UNSET>
android.app.GameManager
<android.app.GameManager: int getGameMode()>
<android.app.GameManager: void setGameState(android.app.GameState)>
<android.app.GameManager: int GAME_MODE_BATTERY>
<android.app.GameManager: int GAME_MODE_PERFORMANCE>
<android.app.GameManager: int GAME_MODE_STANDARD>
<android.app.GameManager: int GAME_MODE_UNSUPPORTED>
android.app.GameState
<android.app.GameState: void <init>(boolean,int)>
<android.app.GameState: void <init>(boolean,int,int,int)>
<android.app.GameState: int describeContents()>
<android.app.GameState: int getLabel()>
<android.app.GameState: int getMode()>
<android.app.GameState: int getQuality()>
<android.app.GameState: boolean isLoading()>
<android.app.GameState: void writeToParcel(android.os.Parcel,int)>
<android.app.GameState: android.os.Parcelable$Creator CREATOR>
<android.app.GameState: int MODE_CONTENT>
<android.app.GameState: int MODE_GAMEPLAY_INTERRUPTIBLE>
<android.app.GameState: int MODE_GAMEPLAY_UNINTERRUPTIBLE>
<android.app.GameState: int MODE_NONE>
<android.app.GameState: int MODE_UNKNOWN>
android.app.Instrumentation
<android.app.Instrumentation: void <init>()>
<android.app.Instrumentation: android.os.TestLooperManager acquireLooperManager(android.os.Looper)>
<android.app.Instrumentation: void addMonitor(android.app.Instrumentation$ActivityMonitor)>
<android.app.Instrumentation: android.app.Instrumentation$ActivityMonitor addMonitor(android.content.IntentFilter,android.app.Instrumentation$ActivityResult,boolean)>
<android.app.Instrumentation: android.app.Instrumentation$ActivityMonitor addMonitor(java.lang.String,android.app.Instrumentation$ActivityResult,boolean)>
<android.app.Instrumentation: void addResults(android.os.Bundle)>
<android.app.Instrumentation: void callActivityOnCreate(android.app.Activity,android.os.Bundle)>
<android.app.Instrumentation: void callActivityOnCreate(android.app.Activity,android.os.Bundle,android.os.PersistableBundle)>
<android.app.Instrumentation: void callActivityOnDestroy(android.app.Activity)>
<android.app.Instrumentation: void callActivityOnNewIntent(android.app.Activity,android.content.Intent)>
<android.app.Instrumentation: void callActivityOnPause(android.app.Activity)>
<android.app.Instrumentation: void callActivityOnPictureInPictureRequested(android.app.Activity)>
<android.app.Instrumentation: void callActivityOnPostCreate(android.app.Activity,android.os.Bundle)>
<android.app.Instrumentation: void callActivityOnPostCreate(android.app.Activity,android.os.Bundle,android.os.PersistableBundle)>
<android.app.Instrumentation: void callActivityOnRestart(android.app.Activity)>
<android.app.Instrumentation: void callActivityOnRestoreInstanceState(android.app.Activity,android.os.Bundle)>
<android.app.Instrumentation: void callActivityOnRestoreInstanceState(android.app.Activity,android.os.Bundle,android.os.PersistableBundle)>
<android.app.Instrumentation: void callActivityOnResume(android.app.Activity)>
<android.app.Instrumentation: void callActivityOnSaveInstanceState(android.app.Activity,android.os.Bundle)>
<android.app.Instrumentation: void callActivityOnSaveInstanceState(android.app.Activity,android.os.Bundle,android.os.PersistableBundle)>
<android.app.Instrumentation: void callActivityOnStart(android.app.Activity)>
<android.app.Instrumentation: void callActivityOnStop(android.app.Activity)>
<android.app.Instrumentation: void callActivityOnUserLeaving(android.app.Activity)>
<android.app.Instrumentation: void callApplicationOnCreate(android.app.Application)>
<android.app.Instrumentation: boolean checkMonitorHit(android.app.Instrumentation$ActivityMonitor,int)>
<android.app.Instrumentation: void endPerformanceSnapshot()>
<android.app.Instrumentation: void finish(int,android.os.Bundle)>
<android.app.Instrumentation: android.os.Bundle getAllocCounts()>
<android.app.Instrumentation: android.os.Bundle getBinderCounts()>
<android.app.Instrumentation: android.content.ComponentName getComponentName()>
<android.app.Instrumentation: android.content.Context getContext()>
<android.app.Instrumentation: java.lang.String getProcessName()>
<android.app.Instrumentation: android.content.Context getTargetContext()>
<android.app.Instrumentation: android.app.UiAutomation getUiAutomation()>
<android.app.Instrumentation: android.app.UiAutomation getUiAutomation(int)>
<android.app.Instrumentation: boolean invokeContextMenuAction(android.app.Activity,int,int)>
<android.app.Instrumentation: boolean invokeMenuActionSync(android.app.Activity,int,int)>
<android.app.Instrumentation: boolean isProfiling()>
<android.app.Instrumentation: android.app.Activity newActivity(java.lang.Class,android.content.Context,android.os.IBinder,android.app.Application,android.content.Intent,android.content.pm.ActivityInfo,java.lang.CharSequence,android.app.Activity,java.lang.String,java.lang.Object)>
<android.app.Instrumentation: android.app.Activity newActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
<android.app.Instrumentation: android.app.Application newApplication(java.lang.ClassLoader,java.lang.String,android.content.Context)>
<android.app.Instrumentation: android.app.Application newApplication(java.lang.Class,android.content.Context)>
<android.app.Instrumentation: void onCreate(android.os.Bundle)>
<android.app.Instrumentation: void onDestroy()>
<android.app.Instrumentation: boolean onException(java.lang.Object,java.lang.Throwable)>
<android.app.Instrumentation: void onStart()>
<android.app.Instrumentation: void removeMonitor(android.app.Instrumentation$ActivityMonitor)>
<android.app.Instrumentation: void resetInTouchMode()>
<android.app.Instrumentation: void runOnMainSync(java.lang.Runnable)>
<android.app.Instrumentation: void sendCharacterSync(int)>
<android.app.Instrumentation: void sendKeyDownUpSync(int)>
<android.app.Instrumentation: void sendKeySync(android.view.KeyEvent)>
<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>
<android.app.Instrumentation: void sendStatus(int,android.os.Bundle)>
<android.app.Instrumentation: void sendStringSync(java.lang.String)>
<android.app.Instrumentation: void sendTrackballEventSync(android.view.MotionEvent)>
<android.app.Instrumentation: void setAutomaticPerformanceSnapshots()>
<android.app.Instrumentation: void setInTouchMode(boolean)>
<android.app.Instrumentation: void start()>
<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent)>
<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent,android.os.Bundle)>
<android.app.Instrumentation: void startAllocCounting()>
<android.app.Instrumentation: void startPerformanceSnapshot()>
<android.app.Instrumentation: void startProfiling()>
<android.app.Instrumentation: void stopAllocCounting()>
<android.app.Instrumentation: void stopProfiling()>
<android.app.Instrumentation: void waitForIdle(java.lang.Runnable)>
<android.app.Instrumentation: void waitForIdleSync()>
<android.app.Instrumentation: android.app.Activity waitForMonitor(android.app.Instrumentation$ActivityMonitor)>
<android.app.Instrumentation: android.app.Activity waitForMonitorWithTimeout(android.app.Instrumentation$ActivityMonitor,long)>
<android.app.Instrumentation: java.lang.String REPORT_KEY_IDENTIFIER>
<android.app.Instrumentation: java.lang.String REPORT_KEY_STREAMRESULT>
android.app.Instrumentation$ActivityMonitor
<android.app.Instrumentation$ActivityMonitor: void <init>(android.content.IntentFilter,android.app.Instrumentation$ActivityResult,boolean)>
<android.app.Instrumentation$ActivityMonitor: void <init>(java.lang.String,android.app.Instrumentation$ActivityResult,boolean)>
<android.app.Instrumentation$ActivityMonitor: void <init>()>
<android.app.Instrumentation$ActivityMonitor: android.content.IntentFilter getFilter()>
<android.app.Instrumentation$ActivityMonitor: int getHits()>
<android.app.Instrumentation$ActivityMonitor: android.app.Activity getLastActivity()>
<android.app.Instrumentation$ActivityMonitor: android.app.Instrumentation$ActivityResult getResult()>
<android.app.Instrumentation$ActivityMonitor: boolean isBlocking()>
<android.app.Instrumentation$ActivityMonitor: android.app.Instrumentation$ActivityResult onStartActivity(android.content.Intent)>
<android.app.Instrumentation$ActivityMonitor: android.app.Activity waitForActivity()>
<android.app.Instrumentation$ActivityMonitor: android.app.Activity waitForActivityWithTimeout(long)>
android.app.Instrumentation$ActivityResult
<android.app.Instrumentation$ActivityResult: void <init>(int,android.content.Intent)>
<android.app.Instrumentation$ActivityResult: int getResultCode()>
<android.app.Instrumentation$ActivityResult: android.content.Intent getResultData()>
android.app.IntentService
<android.app.IntentService: void <init>(java.lang.String)>
<android.app.IntentService: android.os.IBinder onBind(android.content.Intent)>
<android.app.IntentService: void onHandleIntent(android.content.Intent)>
<android.app.IntentService: void onStart(android.content.Intent,int)>
<android.app.IntentService: void setIntentRedelivery(boolean)>
android.app.KeyguardManager
<android.app.KeyguardManager: void addKeyguardLockedStateListener(java.util.concurrent.Executor,android.app.KeyguardManager$KeyguardLockedStateListener)>
<android.app.KeyguardManager: android.content.Intent createConfirmDeviceCredentialIntent(java.lang.CharSequence,java.lang.CharSequence)>
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)>
<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>
<android.app.KeyguardManager: boolean isDeviceLocked()>
<android.app.KeyguardManager: boolean isDeviceSecure()>
<android.app.KeyguardManager: boolean isKeyguardLocked()>
<android.app.KeyguardManager: boolean isKeyguardSecure()>
<android.app.KeyguardManager: android.app.KeyguardManager$KeyguardLock newKeyguardLock(java.lang.String)>
<android.app.KeyguardManager: void removeKeyguardLockedStateListener(android.app.KeyguardManager$KeyguardLockedStateListener)>
<android.app.KeyguardManager: void requestDismissKeyguard(android.app.Activity,android.app.KeyguardManager$KeyguardDismissCallback)>
android.app.KeyguardManager$KeyguardDismissCallback
<android.app.KeyguardManager$KeyguardDismissCallback: void <init>()>
<android.app.KeyguardManager$KeyguardDismissCallback: void onDismissCancelled()>
<android.app.KeyguardManager$KeyguardDismissCallback: void onDismissError()>
<android.app.KeyguardManager$KeyguardDismissCallback: void onDismissSucceeded()>
android.app.KeyguardManager$KeyguardLock
<android.app.KeyguardManager$KeyguardLock: void disableKeyguard()>
<android.app.KeyguardManager$KeyguardLock: void reenableKeyguard()>
android.app.KeyguardManager$KeyguardLockedStateListener
<android.app.KeyguardManager$KeyguardLockedStateListener: void onKeyguardLockedStateChanged(boolean)>
android.app.KeyguardManager$OnKeyguardExitResult
<android.app.KeyguardManager$OnKeyguardExitResult: void onKeyguardExitResult(boolean)>
android.app.LauncherActivity
<android.app.LauncherActivity: void <init>()>
<android.app.LauncherActivity: android.content.Intent getTargetIntent()>
<android.app.LauncherActivity: android.content.Intent intentForPosition(int)>
<android.app.LauncherActivity: android.app.LauncherActivity$ListItem itemForPosition(int)>
<android.app.LauncherActivity: java.util.List makeListItems()>
<android.app.LauncherActivity: java.util.List onQueryPackageManager(android.content.Intent)>
<android.app.LauncherActivity: void onSetContentView()>
android.app.LauncherActivity$IconResizer
<android.app.LauncherActivity$IconResizer: void <init>(android.app.LauncherActivity)>
<android.app.LauncherActivity$IconResizer: android.graphics.drawable.Drawable createIconThumbnail(android.graphics.drawable.Drawable)>
android.app.LauncherActivity$ListItem
<android.app.LauncherActivity$ListItem: void <init>()>
<android.app.LauncherActivity$ListItem: java.lang.String className>
<android.app.LauncherActivity$ListItem: android.os.Bundle extras>
<android.app.LauncherActivity$ListItem: android.graphics.drawable.Drawable icon>
<android.app.LauncherActivity$ListItem: java.lang.CharSequence label>
<android.app.LauncherActivity$ListItem: java.lang.String packageName>
<android.app.LauncherActivity$ListItem: android.content.pm.ResolveInfo resolveInfo>
android.app.ListActivity
<android.app.ListActivity: void <init>()>
<android.app.ListActivity: android.widget.ListAdapter getListAdapter()>
<android.app.ListActivity: android.widget.ListView getListView()>
<android.app.ListActivity: long getSelectedItemId()>
<android.app.ListActivity: int getSelectedItemPosition()>
<android.app.ListActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)>
<android.app.ListActivity: void setListAdapter(android.widget.ListAdapter)>
<android.app.ListActivity: void setSelection(int)>
android.app.ListFragment
<android.app.ListFragment: void <init>()>
<android.app.ListFragment: android.widget.ListAdapter getListAdapter()>
<android.app.ListFragment: android.widget.ListView getListView()>
<android.app.ListFragment: long getSelectedItemId()>
<android.app.ListFragment: int getSelectedItemPosition()>
<android.app.ListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)>
<android.app.ListFragment: void setEmptyText(java.lang.CharSequence)>
<android.app.ListFragment: void setListAdapter(android.widget.ListAdapter)>
<android.app.ListFragment: void setListShown(boolean)>
<android.app.ListFragment: void setListShownNoAnimation(boolean)>
<android.app.ListFragment: void setSelection(int)>
android.app.LoaderManager
<android.app.LoaderManager: void <init>()>
<android.app.LoaderManager: void destroyLoader(int)>
<android.app.LoaderManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.LoaderManager: void enableDebugLogging(boolean)>
<android.app.LoaderManager: android.content.Loader getLoader(int)>
<android.app.LoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>
<android.app.LoaderManager: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>
android.app.LoaderManager$LoaderCallbacks
<android.app.LoaderManager$LoaderCallbacks: android.content.Loader onCreateLoader(int,android.os.Bundle)>
<android.app.LoaderManager$LoaderCallbacks: void onLoadFinished(android.content.Loader,java.lang.Object)>
<android.app.LoaderManager$LoaderCallbacks: void onLoaderReset(android.content.Loader)>
android.app.LocalActivityManager
<android.app.LocalActivityManager: void <init>(android.app.Activity,boolean)>
<android.app.LocalActivityManager: android.view.Window destroyActivity(java.lang.String,boolean)>
<android.app.LocalActivityManager: void dispatchCreate(android.os.Bundle)>
<android.app.LocalActivityManager: void dispatchDestroy(boolean)>
<android.app.LocalActivityManager: void dispatchPause(boolean)>
<android.app.LocalActivityManager: void dispatchResume()>
<android.app.LocalActivityManager: void dispatchStop()>
<android.app.LocalActivityManager: android.app.Activity getActivity(java.lang.String)>
<android.app.LocalActivityManager: android.app.Activity getCurrentActivity()>
<android.app.LocalActivityManager: java.lang.String getCurrentId()>
<android.app.LocalActivityManager: void removeAllActivities()>
<android.app.LocalActivityManager: android.os.Bundle saveInstanceState()>
<android.app.LocalActivityManager: android.view.Window startActivity(java.lang.String,android.content.Intent)>
android.app.LocaleConfig
<android.app.LocaleConfig: void <init>(android.content.Context)>
<android.app.LocaleConfig: int getStatus()>
<android.app.LocaleConfig: android.os.LocaleList getSupportedLocales()>
<android.app.LocaleConfig: int STATUS_NOT_SPECIFIED>
<android.app.LocaleConfig: int STATUS_PARSING_FAILED>
<android.app.LocaleConfig: int STATUS_SUCCESS>
<android.app.LocaleConfig: java.lang.String TAG_LOCALE>
<android.app.LocaleConfig: java.lang.String TAG_LOCALE_CONFIG>
android.app.LocaleManager
<android.app.LocaleManager: android.os.LocaleList getApplicationLocales()>
<android.app.LocaleManager: android.os.LocaleList getApplicationLocales(java.lang.String)>
<android.app.LocaleManager: android.os.LocaleList getSystemLocales()>
<android.app.LocaleManager: void setApplicationLocales(android.os.LocaleList)>
android.app.MediaRouteActionProvider
<android.app.MediaRouteActionProvider: void <init>(android.content.Context)>
<android.app.MediaRouteActionProvider: android.view.View onCreateActionView()>
<android.app.MediaRouteActionProvider: void setExtendedSettingsClickListener(android.view.View$OnClickListener)>
<android.app.MediaRouteActionProvider: void setRouteTypes(int)>
android.app.MediaRouteButton
<android.app.MediaRouteButton: void <init>(android.content.Context)>
<android.app.MediaRouteButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.app.MediaRouteButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.app.MediaRouteButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.app.MediaRouteButton: int getRouteTypes()>
<android.app.MediaRouteButton: void onAttachedToWindow()>
<android.app.MediaRouteButton: void onDetachedFromWindow()>
<android.app.MediaRouteButton: void setExtendedSettingsClickListener(android.view.View$OnClickListener)>
<android.app.MediaRouteButton: void setRouteTypes(int)>
<android.app.MediaRouteButton: void showDialog()>
android.app.NativeActivity
<android.app.NativeActivity: void <init>()>
<android.app.NativeActivity: void onGlobalLayout()>
<android.app.NativeActivity: void onInputQueueCreated(android.view.InputQueue)>
<android.app.NativeActivity: void onInputQueueDestroyed(android.view.InputQueue)>
<android.app.NativeActivity: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>
<android.app.NativeActivity: void surfaceCreated(android.view.SurfaceHolder)>
<android.app.NativeActivity: void surfaceDestroyed(android.view.SurfaceHolder)>
<android.app.NativeActivity: void surfaceRedrawNeeded(android.view.SurfaceHolder)>
<android.app.NativeActivity: java.lang.String META_DATA_FUNC_NAME>
<android.app.NativeActivity: java.lang.String META_DATA_LIB_NAME>
android.app.Notification
<android.app.Notification: void <init>()>
<android.app.Notification: void <init>(int,java.lang.CharSequence,long)>
<android.app.Notification: void <init>(android.os.Parcel)>
<android.app.Notification: android.app.Notification clone()>
<android.app.Notification: int describeContents()>
<android.app.Notification: android.util.Pair findRemoteInputActionPair(boolean)>
<android.app.Notification: boolean getAllowSystemGeneratedContextualActions()>
<android.app.Notification: int getBadgeIconType()>
<android.app.Notification: android.app.Notification$BubbleMetadata getBubbleMetadata()>
<android.app.Notification: java.lang.String getChannelId()>
<android.app.Notification: java.util.List getContextualActions()>
<android.app.Notification: java.lang.String getGroup()>
<android.app.Notification: int getGroupAlertBehavior()>
<android.app.Notification: android.graphics.drawable.Icon getLargeIcon()>
<android.app.Notification: android.content.LocusId getLocusId()>
<android.app.Notification: java.lang.CharSequence getSettingsText()>
<android.app.Notification: java.lang.String getShortcutId()>
<android.app.Notification: android.graphics.drawable.Icon getSmallIcon()>
<android.app.Notification: java.lang.String getSortKey()>
<android.app.Notification: long getTimeoutAfter()>
<android.app.Notification: boolean hasImage()>
<android.app.Notification: void writeToParcel(android.os.Parcel,int)>
<android.app.Notification: android.media.AudioAttributes AUDIO_ATTRIBUTES_DEFAULT>
<android.app.Notification: int BADGE_ICON_LARGE>
<android.app.Notification: int BADGE_ICON_NONE>
<android.app.Notification: int BADGE_ICON_SMALL>
<android.app.Notification: java.lang.String CATEGORY_ALARM>
<android.app.Notification: java.lang.String CATEGORY_CALL>
<android.app.Notification: java.lang.String CATEGORY_EMAIL>
<android.app.Notification: java.lang.String CATEGORY_ERROR>
<android.app.Notification: java.lang.String CATEGORY_EVENT>
<android.app.Notification: java.lang.String CATEGORY_LOCATION_SHARING>
<android.app.Notification: java.lang.String CATEGORY_MESSAGE>
<android.app.Notification: java.lang.String CATEGORY_MISSED_CALL>
<android.app.Notification: java.lang.String CATEGORY_NAVIGATION>
<android.app.Notification: java.lang.String CATEGORY_PROGRESS>
<android.app.Notification: java.lang.String CATEGORY_PROMO>
<android.app.Notification: java.lang.String CATEGORY_RECOMMENDATION>
<android.app.Notification: java.lang.String CATEGORY_REMINDER>
<android.app.Notification: java.lang.String CATEGORY_SERVICE>
<android.app.Notification: java.lang.String CATEGORY_SOCIAL>
<android.app.Notification: java.lang.String CATEGORY_STATUS>
<android.app.Notification: java.lang.String CATEGORY_STOPWATCH>
<android.app.Notification: java.lang.String CATEGORY_SYSTEM>
<android.app.Notification: java.lang.String CATEGORY_TRANSPORT>
<android.app.Notification: java.lang.String CATEGORY_WORKOUT>
<android.app.Notification: int COLOR_DEFAULT>
<android.app.Notification: android.os.Parcelable$Creator CREATOR>
<android.app.Notification: int DEFAULT_ALL>
<android.app.Notification: int DEFAULT_LIGHTS>
<android.app.Notification: int DEFAULT_SOUND>
<android.app.Notification: int DEFAULT_VIBRATE>
<android.app.Notification: java.lang.String EXTRA_ANSWER_COLOR>
<android.app.Notification: java.lang.String EXTRA_ANSWER_INTENT>
<android.app.Notification: java.lang.String EXTRA_AUDIO_CONTENTS_URI>
<android.app.Notification: java.lang.String EXTRA_BACKGROUND_IMAGE_URI>
<android.app.Notification: java.lang.String EXTRA_BIG_TEXT>
<android.app.Notification: java.lang.String EXTRA_CALL_IS_VIDEO>
<android.app.Notification: java.lang.String EXTRA_CALL_PERSON>
<android.app.Notification: java.lang.String EXTRA_CHANNEL_GROUP_ID>
<android.app.Notification: java.lang.String EXTRA_CHANNEL_ID>
<android.app.Notification: java.lang.String EXTRA_CHRONOMETER_COUNT_DOWN>
<android.app.Notification: java.lang.String EXTRA_COLORIZED>
<android.app.Notification: java.lang.String EXTRA_COMPACT_ACTIONS>
<android.app.Notification: java.lang.String EXTRA_CONVERSATION_TITLE>
<android.app.Notification: java.lang.String EXTRA_DECLINE_COLOR>
<android.app.Notification: java.lang.String EXTRA_DECLINE_INTENT>
<android.app.Notification: java.lang.String EXTRA_HANG_UP_INTENT>
<android.app.Notification: java.lang.String EXTRA_HISTORIC_MESSAGES>
<android.app.Notification: java.lang.String EXTRA_INFO_TEXT>
<android.app.Notification: java.lang.String EXTRA_IS_GROUP_CONVERSATION>
<android.app.Notification: java.lang.String EXTRA_LARGE_ICON>
<android.app.Notification: java.lang.String EXTRA_LARGE_ICON_BIG>
<android.app.Notification: java.lang.String EXTRA_MEDIA_SESSION>
<android.app.Notification: java.lang.String EXTRA_MESSAGES>
<android.app.Notification: java.lang.String EXTRA_MESSAGING_PERSON>
<android.app.Notification: java.lang.String EXTRA_NOTIFICATION_ID>
<android.app.Notification: java.lang.String EXTRA_NOTIFICATION_TAG>
<android.app.Notification: java.lang.String EXTRA_PEOPLE>
<android.app.Notification: java.lang.String EXTRA_PEOPLE_LIST>
<android.app.Notification: java.lang.String EXTRA_PICTURE>
<android.app.Notification: java.lang.String EXTRA_PICTURE_CONTENT_DESCRIPTION>
<android.app.Notification: java.lang.String EXTRA_PICTURE_ICON>
<android.app.Notification: java.lang.String EXTRA_PROGRESS>
<android.app.Notification: java.lang.String EXTRA_PROGRESS_INDETERMINATE>
<android.app.Notification: java.lang.String EXTRA_PROGRESS_MAX>
<android.app.Notification: java.lang.String EXTRA_REMOTE_INPUT_DRAFT>
<android.app.Notification: java.lang.String EXTRA_REMOTE_INPUT_HISTORY>
<android.app.Notification: java.lang.String EXTRA_SELF_DISPLAY_NAME>
<android.app.Notification: java.lang.String EXTRA_SHOW_BIG_PICTURE_WHEN_COLLAPSED>
<android.app.Notification: java.lang.String EXTRA_SHOW_CHRONOMETER>
<android.app.Notification: java.lang.String EXTRA_SHOW_WHEN>
<android.app.Notification: java.lang.String EXTRA_SMALL_ICON>
<android.app.Notification: java.lang.String EXTRA_SUB_TEXT>
<android.app.Notification: java.lang.String EXTRA_SUMMARY_TEXT>
<android.app.Notification: java.lang.String EXTRA_TEMPLATE>
<android.app.Notification: java.lang.String EXTRA_TEXT>
<android.app.Notification: java.lang.String EXTRA_TEXT_LINES>
<android.app.Notification: java.lang.String EXTRA_TITLE>
<android.app.Notification: java.lang.String EXTRA_TITLE_BIG>
<android.app.Notification: java.lang.String EXTRA_VERIFICATION_ICON>
<android.app.Notification: java.lang.String EXTRA_VERIFICATION_TEXT>
<android.app.Notification: int FLAG_AUTO_CANCEL>
<android.app.Notification: int FLAG_BUBBLE>
<android.app.Notification: int FLAG_FOREGROUND_SERVICE>
<android.app.Notification: int FLAG_GROUP_SUMMARY>
<android.app.Notification: int FLAG_HIGH_PRIORITY>
<android.app.Notification: int FLAG_INSISTENT>
<android.app.Notification: int FLAG_LOCAL_ONLY>
<android.app.Notification: int FLAG_NO_CLEAR>
<android.app.Notification: int FLAG_ONGOING_EVENT>
<android.app.Notification: int FLAG_ONLY_ALERT_ONCE>
<android.app.Notification: int FLAG_SHOW_LIGHTS>
<android.app.Notification: int FOREGROUND_SERVICE_DEFAULT>
<android.app.Notification: int FOREGROUND_SERVICE_DEFERRED>
<android.app.Notification: int FOREGROUND_SERVICE_IMMEDIATE>
<android.app.Notification: int GROUP_ALERT_ALL>
<android.app.Notification: int GROUP_ALERT_CHILDREN>
<android.app.Notification: int GROUP_ALERT_SUMMARY>
<android.app.Notification: java.lang.String INTENT_CATEGORY_NOTIFICATION_PREFERENCES>
<android.app.Notification: int PRIORITY_DEFAULT>
<android.app.Notification: int PRIORITY_HIGH>
<android.app.Notification: int PRIORITY_LOW>
<android.app.Notification: int PRIORITY_MAX>
<android.app.Notification: int PRIORITY_MIN>
<android.app.Notification: int STREAM_DEFAULT>
<android.app.Notification: int VISIBILITY_PRIVATE>
<android.app.Notification: int VISIBILITY_PUBLIC>
<android.app.Notification: int VISIBILITY_SECRET>
<android.app.Notification: android.app.Notification$Action[] actions>
<android.app.Notification: android.media.AudioAttributes audioAttributes>
<android.app.Notification: int audioStreamType>
<android.app.Notification: android.widget.RemoteViews bigContentView>
<android.app.Notification: java.lang.String category>
<android.app.Notification: int color>
<android.app.Notification: android.app.PendingIntent contentIntent>
<android.app.Notification: android.widget.RemoteViews contentView>
<android.app.Notification: int defaults>
<android.app.Notification: android.app.PendingIntent deleteIntent>
<android.app.Notification: android.os.Bundle extras>
<android.app.Notification: int flags>
<android.app.Notification: android.app.PendingIntent fullScreenIntent>
<android.app.Notification: android.widget.RemoteViews headsUpContentView>
<android.app.Notification: int icon>
<android.app.Notification: int iconLevel>
<android.app.Notification: android.graphics.Bitmap largeIcon>
<android.app.Notification: int ledARGB>
<android.app.Notification: int ledOffMS>
<android.app.Notification: int ledOnMS>
<android.app.Notification: int number>
<android.app.Notification: int priority>
<android.app.Notification: android.app.Notification publicVersion>
<android.app.Notification: android.net.Uri sound>
<android.app.Notification: java.lang.CharSequence tickerText>
<android.app.Notification: android.widget.RemoteViews tickerView>
<android.app.Notification: long[] vibrate>
<android.app.Notification: int visibility>
<android.app.Notification: long when>
android.app.Notification$Action
<android.app.Notification$Action: void <init>(int,java.lang.CharSequence,android.app.PendingIntent)>
<android.app.Notification$Action: android.app.Notification$Action clone()>
<android.app.Notification$Action: int describeContents()>
<android.app.Notification$Action: boolean getAllowGeneratedReplies()>
<android.app.Notification$Action: android.app.RemoteInput[] getDataOnlyRemoteInputs()>
<android.app.Notification$Action: android.os.Bundle getExtras()>
<android.app.Notification$Action: android.graphics.drawable.Icon getIcon()>
<android.app.Notification$Action: android.app.RemoteInput[] getRemoteInputs()>
<android.app.Notification$Action: int getSemanticAction()>
<android.app.Notification$Action: boolean isAuthenticationRequired()>
<android.app.Notification$Action: boolean isContextual()>
<android.app.Notification$Action: void writeToParcel(android.os.Parcel,int)>
<android.app.Notification$Action: android.os.Parcelable$Creator CREATOR>
<android.app.Notification$Action: int SEMANTIC_ACTION_ARCHIVE>
<android.app.Notification$Action: int SEMANTIC_ACTION_CALL>
<android.app.Notification$Action: int SEMANTIC_ACTION_DELETE>
<android.app.Notification$Action: int SEMANTIC_ACTION_MARK_AS_READ>
<android.app.Notification$Action: int SEMANTIC_ACTION_MARK_AS_UNREAD>
<android.app.Notification$Action: int SEMANTIC_ACTION_MUTE>
<android.app.Notification$Action: int SEMANTIC_ACTION_NONE>
<android.app.Notification$Action: int SEMANTIC_ACTION_REPLY>
<android.app.Notification$Action: int SEMANTIC_ACTION_THUMBS_DOWN>
<android.app.Notification$Action: int SEMANTIC_ACTION_THUMBS_UP>
<android.app.Notification$Action: int SEMANTIC_ACTION_UNMUTE>
<android.app.Notification$Action: android.app.PendingIntent actionIntent>
<android.app.Notification$Action: int icon>
<android.app.Notification$Action: java.lang.CharSequence title>
android.app.Notification$Action$Builder
<android.app.Notification$Action$Builder: void <init>(int,java.lang.CharSequence,android.app.PendingIntent)>
<android.app.Notification$Action$Builder: void <init>(android.graphics.drawable.Icon,java.lang.CharSequence,android.app.PendingIntent)>
<android.app.Notification$Action$Builder: void <init>(android.app.Notification$Action)>
<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder addExtras(android.os.Bundle)>
<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder addRemoteInput(android.app.RemoteInput)>
<android.app.Notification$Action$Builder: android.app.Notification$Action build()>
<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder extend(android.app.Notification$Action$Extender)>
<android.app.Notification$Action$Builder: android.os.Bundle getExtras()>
<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder setAllowGeneratedReplies(boolean)>
<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder setAuthenticationRequired(boolean)>
<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder setContextual(boolean)>
<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder setSemanticAction(int)>
android.app.Notification$Action$Extender
<android.app.Notification$Action$Extender: android.app.Notification$Action$Builder extend(android.app.Notification$Action$Builder)>
android.app.Notification$Action$WearableExtender
<android.app.Notification$Action$WearableExtender: void <init>()>
<android.app.Notification$Action$WearableExtender: void <init>(android.app.Notification$Action)>
<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender clone()>
<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$Builder extend(android.app.Notification$Action$Builder)>
<android.app.Notification$Action$WearableExtender: java.lang.CharSequence getCancelLabel()>
<android.app.Notification$Action$WearableExtender: java.lang.CharSequence getConfirmLabel()>
<android.app.Notification$Action$WearableExtender: boolean getHintDisplayActionInline()>
<android.app.Notification$Action$WearableExtender: boolean getHintLaunchesActivity()>
<android.app.Notification$Action$WearableExtender: java.lang.CharSequence getInProgressLabel()>
<android.app.Notification$Action$WearableExtender: boolean isAvailableOffline()>
<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setAvailableOffline(boolean)>
<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setCancelLabel(java.lang.CharSequence)>
<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setConfirmLabel(java.lang.CharSequence)>
<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setHintDisplayActionInline(boolean)>
<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setHintLaunchesActivity(boolean)>
<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setInProgressLabel(java.lang.CharSequence)>
android.app.Notification$BigPictureStyle
<android.app.Notification$BigPictureStyle: void <init>()>
<android.app.Notification$BigPictureStyle: void <init>(android.app.Notification$Builder)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigLargeIcon(android.graphics.Bitmap)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigLargeIcon(android.graphics.drawable.Icon)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigPicture(android.graphics.Bitmap)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigPicture(android.graphics.drawable.Icon)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setContentDescription(java.lang.CharSequence)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setSummaryText(java.lang.CharSequence)>
<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle showBigPictureWhenCollapsed(boolean)>
android.app.Notification$BigTextStyle
<android.app.Notification$BigTextStyle: void <init>()>
<android.app.Notification$BigTextStyle: void <init>(android.app.Notification$Builder)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setSummaryText(java.lang.CharSequence)>
android.app.Notification$BubbleMetadata
<android.app.Notification$BubbleMetadata: int describeContents()>
<android.app.Notification$BubbleMetadata: boolean getAutoExpandBubble()>
<android.app.Notification$BubbleMetadata: android.app.PendingIntent getDeleteIntent()>
<android.app.Notification$BubbleMetadata: int getDesiredHeight()>
<android.app.Notification$BubbleMetadata: int getDesiredHeightResId()>
<android.app.Notification$BubbleMetadata: android.graphics.drawable.Icon getIcon()>
<android.app.Notification$BubbleMetadata: android.app.PendingIntent getIntent()>
<android.app.Notification$BubbleMetadata: java.lang.String getShortcutId()>
<android.app.Notification$BubbleMetadata: boolean isBubbleSuppressable()>
<android.app.Notification$BubbleMetadata: boolean isBubbleSuppressed()>
<android.app.Notification$BubbleMetadata: boolean isNotificationSuppressed()>
<android.app.Notification$BubbleMetadata: void writeToParcel(android.os.Parcel,int)>
<android.app.Notification$BubbleMetadata: android.os.Parcelable$Creator CREATOR>
android.app.Notification$BubbleMetadata$Builder
<android.app.Notification$BubbleMetadata$Builder: void <init>()>
<android.app.Notification$BubbleMetadata$Builder: void <init>(java.lang.String)>
<android.app.Notification$BubbleMetadata$Builder: void <init>(android.app.PendingIntent,android.graphics.drawable.Icon)>
<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata build()>
<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setAutoExpandBubble(boolean)>
<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setDeleteIntent(android.app.PendingIntent)>
<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setDesiredHeight(int)>
<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setDesiredHeightResId(int)>
<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setIcon(android.graphics.drawable.Icon)>
<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setIntent(android.app.PendingIntent)>
<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setSuppressNotification(boolean)>
<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setSuppressableBubble(boolean)>
android.app.Notification$Builder
<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>
<android.app.Notification$Builder: void <init>(android.content.Context)>
<android.app.Notification$Builder: android.app.Notification$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)>
<android.app.Notification$Builder: android.app.Notification$Builder addAction(android.app.Notification$Action)>
<android.app.Notification$Builder: android.app.Notification$Builder addExtras(android.os.Bundle)>
<android.app.Notification$Builder: android.app.Notification$Builder addPerson(java.lang.String)>
<android.app.Notification$Builder: android.app.Notification$Builder addPerson(android.app.Person)>
<android.app.Notification$Builder: android.app.Notification build()>
<android.app.Notification$Builder: android.widget.RemoteViews createBigContentView()>
<android.app.Notification$Builder: android.widget.RemoteViews createContentView()>
<android.app.Notification$Builder: android.widget.RemoteViews createHeadsUpContentView()>
<android.app.Notification$Builder: android.app.Notification$Builder extend(android.app.Notification$Extender)>
<android.app.Notification$Builder: android.os.Bundle getExtras()>
<android.app.Notification$Builder: android.app.Notification getNotification()>
<android.app.Notification$Builder: android.app.Notification$Style getStyle()>
<android.app.Notification$Builder: android.app.Notification$Builder recoverBuilder(android.content.Context,android.app.Notification)>
<android.app.Notification$Builder: android.app.Notification$Builder setActions(android.app.Notification$Action[])>
<android.app.Notification$Builder: android.app.Notification$Builder setAllowSystemGeneratedContextualActions(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setAutoCancel(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setBadgeIconType(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setBubbleMetadata(android.app.Notification$BubbleMetadata)>
<android.app.Notification$Builder: android.app.Notification$Builder setCategory(java.lang.String)>
<android.app.Notification$Builder: android.app.Notification$Builder setChannelId(java.lang.String)>
<android.app.Notification$Builder: android.app.Notification$Builder setChronometerCountDown(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setColorized(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setContent(android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setContentInfo(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>
<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setCustomBigContentView(android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setCustomContentView(android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setCustomHeadsUpContentView(android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setDefaults(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)>
<android.app.Notification$Builder: android.app.Notification$Builder setExtras(android.os.Bundle)>
<android.app.Notification$Builder: android.app.Notification$Builder setFlag(int,boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setForegroundServiceBehavior(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setGroup(java.lang.String)>
<android.app.Notification$Builder: android.app.Notification$Builder setGroupAlertBehavior(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setGroupSummary(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.Bitmap)>
<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.drawable.Icon)>
<android.app.Notification$Builder: android.app.Notification$Builder setLights(int,int,int)>
<android.app.Notification$Builder: android.app.Notification$Builder setLocalOnly(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setLocusId(android.content.LocusId)>
<android.app.Notification$Builder: android.app.Notification$Builder setNumber(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setOnlyAlertOnce(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setPriority(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setProgress(int,int,boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setPublicVersion(android.app.Notification)>
<android.app.Notification$Builder: android.app.Notification$Builder setRemoteInputHistory(java.lang.CharSequence[])>
<android.app.Notification$Builder: android.app.Notification$Builder setSettingsText(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setShortcutId(java.lang.String)>
<android.app.Notification$Builder: android.app.Notification$Builder setShowWhen(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int,int)>
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(android.graphics.drawable.Icon)>
<android.app.Notification$Builder: android.app.Notification$Builder setSortKey(java.lang.String)>
<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri)>
<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri,int)>
<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri,android.media.AudioAttributes)>
<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)>
<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>
<android.app.Notification$Builder: android.app.Notification$Builder setTimeoutAfter(long)>
<android.app.Notification$Builder: android.app.Notification$Builder setUsesChronometer(boolean)>
<android.app.Notification$Builder: android.app.Notification$Builder setVibrate(long[])>
<android.app.Notification$Builder: android.app.Notification$Builder setVisibility(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>
android.app.Notification$CallStyle
<android.app.Notification$CallStyle: android.app.Notification$CallStyle forIncomingCall(android.app.Person,android.app.PendingIntent,android.app.PendingIntent)>
<android.app.Notification$CallStyle: android.app.Notification$CallStyle forOngoingCall(android.app.Person,android.app.PendingIntent)>
<android.app.Notification$CallStyle: android.app.Notification$CallStyle forScreeningCall(android.app.Person,android.app.PendingIntent,android.app.PendingIntent)>
<android.app.Notification$CallStyle: android.app.Notification$CallStyle setAnswerButtonColorHint(int)>
<android.app.Notification$CallStyle: android.app.Notification$CallStyle setDeclineButtonColorHint(int)>
<android.app.Notification$CallStyle: android.app.Notification$CallStyle setIsVideo(boolean)>
<android.app.Notification$CallStyle: android.app.Notification$CallStyle setVerificationIcon(android.graphics.drawable.Icon)>
<android.app.Notification$CallStyle: android.app.Notification$CallStyle setVerificationText(java.lang.CharSequence)>
android.app.Notification$CarExtender
<android.app.Notification$CarExtender: void <init>()>
<android.app.Notification$CarExtender: void <init>(android.app.Notification)>
<android.app.Notification$CarExtender: android.app.Notification$Builder extend(android.app.Notification$Builder)>
<android.app.Notification$CarExtender: int getColor()>
<android.app.Notification$CarExtender: android.graphics.Bitmap getLargeIcon()>
<android.app.Notification$CarExtender: android.app.Notification$CarExtender$UnreadConversation getUnreadConversation()>
<android.app.Notification$CarExtender: android.app.Notification$CarExtender setColor(int)>
<android.app.Notification$CarExtender: android.app.Notification$CarExtender setLargeIcon(android.graphics.Bitmap)>
<android.app.Notification$CarExtender: android.app.Notification$CarExtender setUnreadConversation(android.app.Notification$CarExtender$UnreadConversation)>
android.app.Notification$CarExtender$Builder
<android.app.Notification$CarExtender$Builder: void <init>(java.lang.String)>
<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$Builder addMessage(java.lang.String)>
<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$UnreadConversation build()>
<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$Builder setLatestTimestamp(long)>
<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$Builder setReadPendingIntent(android.app.PendingIntent)>
<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$Builder setReplyAction(android.app.PendingIntent,android.app.RemoteInput)>
android.app.Notification$CarExtender$UnreadConversation
<android.app.Notification$CarExtender$UnreadConversation: long getLatestTimestamp()>
<android.app.Notification$CarExtender$UnreadConversation: java.lang.String[] getMessages()>
<android.app.Notification$CarExtender$UnreadConversation: java.lang.String getParticipant()>
<android.app.Notification$CarExtender$UnreadConversation: java.lang.String[] getParticipants()>
<android.app.Notification$CarExtender$UnreadConversation: android.app.PendingIntent getReadPendingIntent()>
<android.app.Notification$CarExtender$UnreadConversation: android.app.RemoteInput getRemoteInput()>
<android.app.Notification$CarExtender$UnreadConversation: android.app.PendingIntent getReplyPendingIntent()>
android.app.Notification$DecoratedCustomViewStyle
<android.app.Notification$DecoratedCustomViewStyle: void <init>()>
android.app.Notification$DecoratedMediaCustomViewStyle
<android.app.Notification$DecoratedMediaCustomViewStyle: void <init>()>
android.app.Notification$Extender
<android.app.Notification$Extender: android.app.Notification$Builder extend(android.app.Notification$Builder)>
android.app.Notification$InboxStyle
<android.app.Notification$InboxStyle: void <init>()>
<android.app.Notification$InboxStyle: void <init>(android.app.Notification$Builder)>
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle addLine(java.lang.CharSequence)>
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setSummaryText(java.lang.CharSequence)>
android.app.Notification$MediaStyle
<android.app.Notification$MediaStyle: void <init>()>
<android.app.Notification$MediaStyle: void <init>(android.app.Notification$Builder)>
<android.app.Notification$MediaStyle: android.app.Notification$MediaStyle setMediaSession(android.media.session.MediaSession$Token)>
<android.app.Notification$MediaStyle: android.app.Notification$MediaStyle setShowActionsInCompactView(int[])>
android.app.Notification$MessagingStyle
<android.app.Notification$MessagingStyle: void <init>(java.lang.CharSequence)>
<android.app.Notification$MessagingStyle: void <init>(android.app.Person)>
<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addHistoricMessage(android.app.Notification$MessagingStyle$Message)>
<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addMessage(java.lang.CharSequence,long,java.lang.CharSequence)>
<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addMessage(java.lang.CharSequence,long,android.app.Person)>
<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addMessage(android.app.Notification$MessagingStyle$Message)>
<android.app.Notification$MessagingStyle: java.lang.CharSequence getConversationTitle()>
<android.app.Notification$MessagingStyle: java.util.List getHistoricMessages()>
<android.app.Notification$MessagingStyle: java.util.List getMessages()>
<android.app.Notification$MessagingStyle: android.app.Person getUser()>
<android.app.Notification$MessagingStyle: java.lang.CharSequence getUserDisplayName()>
<android.app.Notification$MessagingStyle: boolean isGroupConversation()>
<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle setConversationTitle(java.lang.CharSequence)>
<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle setGroupConversation(boolean)>
<android.app.Notification$MessagingStyle: int MAXIMUM_RETAINED_MESSAGES>
android.app.Notification$MessagingStyle$Message
<android.app.Notification$MessagingStyle$Message: void <init>(java.lang.CharSequence,long,java.lang.CharSequence)>
<android.app.Notification$MessagingStyle$Message: void <init>(java.lang.CharSequence,long,android.app.Person)>
<android.app.Notification$MessagingStyle$Message: java.lang.String getDataMimeType()>
<android.app.Notification$MessagingStyle$Message: android.net.Uri getDataUri()>
<android.app.Notification$MessagingStyle$Message: android.os.Bundle getExtras()>
<android.app.Notification$MessagingStyle$Message: java.util.List getMessagesFromBundleArray(android.os.Parcelable[])>
<android.app.Notification$MessagingStyle$Message: java.lang.CharSequence getSender()>
<android.app.Notification$MessagingStyle$Message: android.app.Person getSenderPerson()>
<android.app.Notification$MessagingStyle$Message: java.lang.CharSequence getText()>
<android.app.Notification$MessagingStyle$Message: long getTimestamp()>
<android.app.Notification$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message setData(java.lang.String,android.net.Uri)>
android.app.Notification$Style
<android.app.Notification$Style: void <init>()>
<android.app.Notification$Style: android.app.Notification build()>
<android.app.Notification$Style: void checkBuilder()>
<android.app.Notification$Style: android.widget.RemoteViews getStandardView(int)>
<android.app.Notification$Style: void internalSetBigContentTitle(java.lang.CharSequence)>
<android.app.Notification$Style: void internalSetSummaryText(java.lang.CharSequence)>
<android.app.Notification$Style: void setBuilder(android.app.Notification$Builder)>
<android.app.Notification$Style: android.app.Notification$Builder mBuilder>
android.app.Notification$WearableExtender
<android.app.Notification$WearableExtender: void <init>()>
<android.app.Notification$WearableExtender: void <init>(android.app.Notification)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender addAction(android.app.Notification$Action)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender addActions(java.util.List)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender addPage(android.app.Notification)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender addPages(java.util.List)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender clearActions()>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender clearPages()>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender clone()>
<android.app.Notification$WearableExtender: android.app.Notification$Builder extend(android.app.Notification$Builder)>
<android.app.Notification$WearableExtender: java.util.List getActions()>
<android.app.Notification$WearableExtender: android.graphics.Bitmap getBackground()>
<android.app.Notification$WearableExtender: java.lang.String getBridgeTag()>
<android.app.Notification$WearableExtender: int getContentAction()>
<android.app.Notification$WearableExtender: int getContentIcon()>
<android.app.Notification$WearableExtender: int getContentIconGravity()>
<android.app.Notification$WearableExtender: boolean getContentIntentAvailableOffline()>
<android.app.Notification$WearableExtender: int getCustomContentHeight()>
<android.app.Notification$WearableExtender: int getCustomSizePreset()>
<android.app.Notification$WearableExtender: java.lang.String getDismissalId()>
<android.app.Notification$WearableExtender: android.app.PendingIntent getDisplayIntent()>
<android.app.Notification$WearableExtender: int getGravity()>
<android.app.Notification$WearableExtender: boolean getHintAmbientBigPicture()>
<android.app.Notification$WearableExtender: boolean getHintAvoidBackgroundClipping()>
<android.app.Notification$WearableExtender: boolean getHintContentIntentLaunchesActivity()>
<android.app.Notification$WearableExtender: boolean getHintHideIcon()>
<android.app.Notification$WearableExtender: int getHintScreenTimeout()>
<android.app.Notification$WearableExtender: boolean getHintShowBackgroundOnly()>
<android.app.Notification$WearableExtender: java.util.List getPages()>
<android.app.Notification$WearableExtender: boolean getStartScrollBottom()>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setBackground(android.graphics.Bitmap)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setBridgeTag(java.lang.String)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setContentAction(int)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setContentIcon(int)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setContentIconGravity(int)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setContentIntentAvailableOffline(boolean)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setCustomContentHeight(int)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setCustomSizePreset(int)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setDismissalId(java.lang.String)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setDisplayIntent(android.app.PendingIntent)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setGravity(int)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintAmbientBigPicture(boolean)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintAvoidBackgroundClipping(boolean)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintContentIntentLaunchesActivity(boolean)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintHideIcon(boolean)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintScreenTimeout(int)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintShowBackgroundOnly(boolean)>
<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setStartScrollBottom(boolean)>
<android.app.Notification$WearableExtender: int SCREEN_TIMEOUT_LONG>
<android.app.Notification$WearableExtender: int SCREEN_TIMEOUT_SHORT>
<android.app.Notification$WearableExtender: int SIZE_DEFAULT>
<android.app.Notification$WearableExtender: int SIZE_FULL_SCREEN>
<android.app.Notification$WearableExtender: int SIZE_LARGE>
<android.app.Notification$WearableExtender: int SIZE_MEDIUM>
<android.app.Notification$WearableExtender: int SIZE_SMALL>
<android.app.Notification$WearableExtender: int SIZE_XSMALL>
<android.app.Notification$WearableExtender: int UNSET_ACTION_INDEX>
android.app.NotificationChannel
<android.app.NotificationChannel: void <init>(java.lang.String,java.lang.CharSequence,int)>
<android.app.NotificationChannel: boolean canBubble()>
<android.app.NotificationChannel: boolean canBypassDnd()>
<android.app.NotificationChannel: boolean canShowBadge()>
<android.app.NotificationChannel: int describeContents()>
<android.app.NotificationChannel: void enableLights(boolean)>
<android.app.NotificationChannel: void enableVibration(boolean)>
<android.app.NotificationChannel: android.media.AudioAttributes getAudioAttributes()>
<android.app.NotificationChannel: java.lang.String getConversationId()>
<android.app.NotificationChannel: java.lang.String getDescription()>
<android.app.NotificationChannel: java.lang.String getGroup()>
<android.app.NotificationChannel: java.lang.String getId()>
<android.app.NotificationChannel: int getImportance()>
<android.app.NotificationChannel: int getLightColor()>
<android.app.NotificationChannel: int getLockscreenVisibility()>
<android.app.NotificationChannel: java.lang.CharSequence getName()>
<android.app.NotificationChannel: java.lang.String getParentChannelId()>
<android.app.NotificationChannel: android.net.Uri getSound()>
<android.app.NotificationChannel: long[] getVibrationPattern()>
<android.app.NotificationChannel: boolean hasUserSetImportance()>
<android.app.NotificationChannel: boolean hasUserSetSound()>
<android.app.NotificationChannel: boolean isBlockable()>
<android.app.NotificationChannel: boolean isConversation()>
<android.app.NotificationChannel: boolean isDemoted()>
<android.app.NotificationChannel: boolean isImportantConversation()>
<android.app.NotificationChannel: void setAllowBubbles(boolean)>
<android.app.NotificationChannel: void setBlockable(boolean)>
<android.app.NotificationChannel: void setBypassDnd(boolean)>
<android.app.NotificationChannel: void setConversationId(java.lang.String,java.lang.String)>
<android.app.NotificationChannel: void setDescription(java.lang.String)>
<android.app.NotificationChannel: void setGroup(java.lang.String)>
<android.app.NotificationChannel: void setImportance(int)>
<android.app.NotificationChannel: void setLightColor(int)>
<android.app.NotificationChannel: void setLockscreenVisibility(int)>
<android.app.NotificationChannel: void setName(java.lang.CharSequence)>
<android.app.NotificationChannel: void setShowBadge(boolean)>
<android.app.NotificationChannel: void setSound(android.net.Uri,android.media.AudioAttributes)>
<android.app.NotificationChannel: void setVibrationPattern(long[])>
<android.app.NotificationChannel: boolean shouldShowLights()>
<android.app.NotificationChannel: boolean shouldVibrate()>
<android.app.NotificationChannel: void writeToParcel(android.os.Parcel,int)>
<android.app.NotificationChannel: android.os.Parcelable$Creator CREATOR>
<android.app.NotificationChannel: java.lang.String DEFAULT_CHANNEL_ID>
<android.app.NotificationChannel: java.lang.String EDIT_CONVERSATION>
<android.app.NotificationChannel: java.lang.String EDIT_IMPORTANCE>
<android.app.NotificationChannel: java.lang.String EDIT_LAUNCHER>
<android.app.NotificationChannel: java.lang.String EDIT_LOCKED_DEVICE>
<android.app.NotificationChannel: java.lang.String EDIT_SOUND>
<android.app.NotificationChannel: java.lang.String EDIT_VIBRATION>
<android.app.NotificationChannel: java.lang.String EDIT_ZEN>
android.app.NotificationChannelGroup
<android.app.NotificationChannelGroup: void <init>(java.lang.String,java.lang.CharSequence)>
<android.app.NotificationChannelGroup: android.app.NotificationChannelGroup clone()>
<android.app.NotificationChannelGroup: int describeContents()>
<android.app.NotificationChannelGroup: java.util.List getChannels()>
<android.app.NotificationChannelGroup: java.lang.String getDescription()>
<android.app.NotificationChannelGroup: java.lang.String getId()>
<android.app.NotificationChannelGroup: java.lang.CharSequence getName()>
<android.app.NotificationChannelGroup: boolean isBlocked()>
<android.app.NotificationChannelGroup: void setDescription(java.lang.String)>
<android.app.NotificationChannelGroup: void writeToParcel(android.os.Parcel,int)>
<android.app.NotificationChannelGroup: android.os.Parcelable$Creator CREATOR>
android.app.NotificationManager
<android.app.NotificationManager: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule)>
<android.app.NotificationManager: boolean areBubblesAllowed()>
<android.app.NotificationManager: boolean areBubblesEnabled()>
<android.app.NotificationManager: boolean areNotificationsEnabled()>
<android.app.NotificationManager: boolean areNotificationsPaused()>
<android.app.NotificationManager: boolean canNotifyAsPackage(java.lang.String)>
<android.app.NotificationManager: void cancel(int)>
<android.app.NotificationManager: void cancel(java.lang.String,int)>
<android.app.NotificationManager: void cancelAll()>
<android.app.NotificationManager: void cancelAsPackage(java.lang.String,java.lang.String,int)>
<android.app.NotificationManager: void createNotificationChannel(android.app.NotificationChannel)>
<android.app.NotificationManager: void createNotificationChannelGroup(android.app.NotificationChannelGroup)>
<android.app.NotificationManager: void createNotificationChannelGroups(java.util.List)>
<android.app.NotificationManager: void createNotificationChannels(java.util.List)>
<android.app.NotificationManager: void deleteNotificationChannel(java.lang.String)>
<android.app.NotificationManager: void deleteNotificationChannelGroup(java.lang.String)>
<android.app.NotificationManager: android.service.notification.StatusBarNotification[] getActiveNotifications()>
<android.app.NotificationManager: android.app.AutomaticZenRule getAutomaticZenRule(java.lang.String)>
<android.app.NotificationManager: java.util.Map getAutomaticZenRules()>
<android.app.NotificationManager: int getBubblePreference()>
<android.app.NotificationManager: android.app.NotificationManager$Policy getConsolidatedNotificationPolicy()>
<android.app.NotificationManager: int getCurrentInterruptionFilter()>
<android.app.NotificationManager: int getImportance()>
<android.app.NotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String)>
<android.app.NotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String,java.lang.String)>
<android.app.NotificationManager: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String)>
<android.app.NotificationManager: java.util.List getNotificationChannelGroups()>
<android.app.NotificationManager: java.util.List getNotificationChannels()>
<android.app.NotificationManager: java.lang.String getNotificationDelegate()>
<android.app.NotificationManager: android.app.NotificationManager$Policy getNotificationPolicy()>
<android.app.NotificationManager: boolean isNotificationListenerAccessGranted(android.content.ComponentName)>
<android.app.NotificationManager: boolean isNotificationPolicyAccessGranted()>
<android.app.NotificationManager: boolean matchesCallFilter(android.net.Uri)>
<android.app.NotificationManager: void notify(int,android.app.Notification)>
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>
<android.app.NotificationManager: void notifyAsPackage(java.lang.String,java.lang.String,int,android.app.Notification)>
<android.app.NotificationManager: boolean removeAutomaticZenRule(java.lang.String)>
<android.app.NotificationManager: void setAutomaticZenRuleState(java.lang.String,android.service.notification.Condition)>
<android.app.NotificationManager: void setInterruptionFilter(int)>
<android.app.NotificationManager: void setNotificationDelegate(java.lang.String)>
<android.app.NotificationManager: void setNotificationPolicy(android.app.NotificationManager$Policy)>
<android.app.NotificationManager: boolean shouldHideSilentStatusBarIcons()>
<android.app.NotificationManager: boolean updateAutomaticZenRule(java.lang.String,android.app.AutomaticZenRule)>
<android.app.NotificationManager: java.lang.String ACTION_APP_BLOCK_STATE_CHANGED>
<android.app.NotificationManager: java.lang.String ACTION_AUTOMATIC_ZEN_RULE>
<android.app.NotificationManager: java.lang.String ACTION_AUTOMATIC_ZEN_RULE_STATUS_CHANGED>
<android.app.NotificationManager: java.lang.String ACTION_INTERRUPTION_FILTER_CHANGED>
<android.app.NotificationManager: java.lang.String ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED>
<android.app.NotificationManager: java.lang.String ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED>
<android.app.NotificationManager: java.lang.String ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED>
<android.app.NotificationManager: java.lang.String ACTION_NOTIFICATION_POLICY_CHANGED>
<android.app.NotificationManager: int AUTOMATIC_RULE_STATUS_DISABLED>
<android.app.NotificationManager: int AUTOMATIC_RULE_STATUS_ENABLED>
<android.app.NotificationManager: int AUTOMATIC_RULE_STATUS_REMOVED>
<android.app.NotificationManager: int AUTOMATIC_RULE_STATUS_UNKNOWN>
<android.app.NotificationManager: int BUBBLE_PREFERENCE_ALL>
<android.app.NotificationManager: int BUBBLE_PREFERENCE_NONE>
<android.app.NotificationManager: int BUBBLE_PREFERENCE_SELECTED>
<android.app.NotificationManager: java.lang.String EXTRA_AUTOMATIC_RULE_ID>
<android.app.NotificationManager: java.lang.String EXTRA_AUTOMATIC_ZEN_RULE_ID>
<android.app.NotificationManager: java.lang.String EXTRA_AUTOMATIC_ZEN_RULE_STATUS>
<android.app.NotificationManager: java.lang.String EXTRA_BLOCKED_STATE>
<android.app.NotificationManager: java.lang.String EXTRA_NOTIFICATION_CHANNEL_GROUP_ID>
<android.app.NotificationManager: java.lang.String EXTRA_NOTIFICATION_CHANNEL_ID>
<android.app.NotificationManager: int IMPORTANCE_DEFAULT>
<android.app.NotificationManager: int IMPORTANCE_HIGH>
<android.app.NotificationManager: int IMPORTANCE_LOW>
<android.app.NotificationManager: int IMPORTANCE_MAX>
<android.app.NotificationManager: int IMPORTANCE_MIN>
<android.app.NotificationManager: int IMPORTANCE_NONE>
<android.app.NotificationManager: int IMPORTANCE_UNSPECIFIED>
<android.app.NotificationManager: int INTERRUPTION_FILTER_ALARMS>
<android.app.NotificationManager: int INTERRUPTION_FILTER_ALL>
<android.app.NotificationManager: int INTERRUPTION_FILTER_NONE>
<android.app.NotificationManager: int INTERRUPTION_FILTER_PRIORITY>
<android.app.NotificationManager: int INTERRUPTION_FILTER_UNKNOWN>
<android.app.NotificationManager: java.lang.String META_DATA_AUTOMATIC_RULE_TYPE>
<android.app.NotificationManager: java.lang.String META_DATA_RULE_INSTANCE_LIMIT>
android.app.NotificationManager$Policy
<android.app.NotificationManager$Policy: void <init>(int,int,int)>
<android.app.NotificationManager$Policy: void <init>(int,int,int,int)>
<android.app.NotificationManager$Policy: void <init>(int,int,int,int,int)>
<android.app.NotificationManager$Policy: int describeContents()>
<android.app.NotificationManager$Policy: java.lang.String priorityCategoriesToString(int)>
<android.app.NotificationManager$Policy: java.lang.String prioritySendersToString(int)>
<android.app.NotificationManager$Policy: java.lang.String suppressedEffectsToString(int)>
<android.app.NotificationManager$Policy: void writeToParcel(android.os.Parcel,int)>
<android.app.NotificationManager$Policy: int CONVERSATION_SENDERS_ANYONE>
<android.app.NotificationManager$Policy: int CONVERSATION_SENDERS_IMPORTANT>
<android.app.NotificationManager$Policy: int CONVERSATION_SENDERS_NONE>
<android.app.NotificationManager$Policy: android.os.Parcelable$Creator CREATOR>
<android.app.NotificationManager$Policy: int PRIORITY_CATEGORY_ALARMS>
<android.app.NotificationManager$Policy: int PRIORITY_CATEGORY_CALLS>
<android.app.NotificationManager$Policy: int PRIORITY_CATEGORY_CONVERSATIONS>
<android.app.NotificationManager$Policy: int PRIORITY_CATEGORY_EVENTS>
<android.app.NotificationManager$Policy: int PRIORITY_CATEGORY_MEDIA>
<android.app.NotificationManager$Policy: int PRIORITY_CATEGORY_MESSAGES>
<android.app.NotificationManager$Policy: int PRIORITY_CATEGORY_REMINDERS>
<android.app.NotificationManager$Policy: int PRIORITY_CATEGORY_REPEAT_CALLERS>
<android.app.NotificationManager$Policy: int PRIORITY_CATEGORY_SYSTEM>
<android.app.NotificationManager$Policy: int PRIORITY_SENDERS_ANY>
<android.app.NotificationManager$Policy: int PRIORITY_SENDERS_CONTACTS>
<android.app.NotificationManager$Policy: int PRIORITY_SENDERS_STARRED>
<android.app.NotificationManager$Policy: int SUPPRESSED_EFFECT_AMBIENT>
<android.app.NotificationManager$Policy: int SUPPRESSED_EFFECT_BADGE>
<android.app.NotificationManager$Policy: int SUPPRESSED_EFFECT_FULL_SCREEN_INTENT>
<android.app.NotificationManager$Policy: int SUPPRESSED_EFFECT_LIGHTS>
<android.app.NotificationManager$Policy: int SUPPRESSED_EFFECT_NOTIFICATION_LIST>
<android.app.NotificationManager$Policy: int SUPPRESSED_EFFECT_PEEK>
<android.app.NotificationManager$Policy: int SUPPRESSED_EFFECT_SCREEN_OFF>
<android.app.NotificationManager$Policy: int SUPPRESSED_EFFECT_SCREEN_ON>
<android.app.NotificationManager$Policy: int SUPPRESSED_EFFECT_STATUS_BAR>
<android.app.NotificationManager$Policy: int priorityCallSenders>
<android.app.NotificationManager$Policy: int priorityCategories>
<android.app.NotificationManager$Policy: int priorityConversationSenders>
<android.app.NotificationManager$Policy: int priorityMessageSenders>
<android.app.NotificationManager$Policy: int suppressedVisualEffects>
android.app.PendingIntent
<android.app.PendingIntent: void cancel()>
<android.app.PendingIntent: int describeContents()>
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)>
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: java.lang.String getCreatorPackage()>
<android.app.PendingIntent: int getCreatorUid()>
<android.app.PendingIntent: android.os.UserHandle getCreatorUserHandle()>
<android.app.PendingIntent: android.app.PendingIntent getForegroundService(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.content.IntentSender getIntentSender()>
<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: java.lang.String getTargetPackage()>
<android.app.PendingIntent: boolean isActivity()>
<android.app.PendingIntent: boolean isBroadcast()>
<android.app.PendingIntent: boolean isForegroundService()>
<android.app.PendingIntent: boolean isImmutable()>
<android.app.PendingIntent: boolean isService()>
<android.app.PendingIntent: android.app.PendingIntent readPendingIntentOrNullFromParcel(android.os.Parcel)>
<android.app.PendingIntent: void send()>
<android.app.PendingIntent: void send(int)>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>
<android.app.PendingIntent: void send(int,android.app.PendingIntent$OnFinished,android.os.Handler)>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String)>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String,android.os.Bundle)>
<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)>
<android.app.PendingIntent: void writeToParcel(android.os.Parcel,int)>
<android.app.PendingIntent: android.os.Parcelable$Creator CREATOR>
<android.app.PendingIntent: int FLAG_CANCEL_CURRENT>
<android.app.PendingIntent: int FLAG_IMMUTABLE>
<android.app.PendingIntent: int FLAG_MUTABLE>
<android.app.PendingIntent: int FLAG_NO_CREATE>
<android.app.PendingIntent: int FLAG_ONE_SHOT>
<android.app.PendingIntent: int FLAG_UPDATE_CURRENT>
android.app.PendingIntent$CanceledException
<android.app.PendingIntent$CanceledException: void <init>()>
<android.app.PendingIntent$CanceledException: void <init>(java.lang.String)>
<android.app.PendingIntent$CanceledException: void <init>(java.lang.Exception)>
android.app.PendingIntent$OnFinished
<android.app.PendingIntent$OnFinished: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)>
android.app.Person
<android.app.Person: int describeContents()>
<android.app.Person: android.graphics.drawable.Icon getIcon()>
<android.app.Person: java.lang.String getKey()>
<android.app.Person: java.lang.CharSequence getName()>
<android.app.Person: java.lang.String getUri()>
<android.app.Person: boolean isBot()>
<android.app.Person: boolean isImportant()>
<android.app.Person: android.app.Person$Builder toBuilder()>
<android.app.Person: void writeToParcel(android.os.Parcel,int)>
<android.app.Person: android.os.Parcelable$Creator CREATOR>
android.app.Person$Builder
<android.app.Person$Builder: void <init>()>
<android.app.Person$Builder: android.app.Person build()>
<android.app.Person$Builder: android.app.Person$Builder setBot(boolean)>
<android.app.Person$Builder: android.app.Person$Builder setIcon(android.graphics.drawable.Icon)>
<android.app.Person$Builder: android.app.Person$Builder setImportant(boolean)>
<android.app.Person$Builder: android.app.Person$Builder setKey(java.lang.String)>
<android.app.Person$Builder: android.app.Person$Builder setName(java.lang.CharSequence)>
<android.app.Person$Builder: android.app.Person$Builder setUri(java.lang.String)>
android.app.PictureInPictureParams
<android.app.PictureInPictureParams: int describeContents()>
<android.app.PictureInPictureParams: java.util.List getActions()>
<android.app.PictureInPictureParams: android.util.Rational getAspectRatio()>
<android.app.PictureInPictureParams: android.app.RemoteAction getCloseAction()>
<android.app.PictureInPictureParams: android.util.Rational getExpandedAspectRatio()>
<android.app.PictureInPictureParams: android.graphics.Rect getSourceRectHint()>
<android.app.PictureInPictureParams: java.lang.CharSequence getSubtitle()>
<android.app.PictureInPictureParams: java.lang.CharSequence getTitle()>
<android.app.PictureInPictureParams: boolean isAutoEnterEnabled()>
<android.app.PictureInPictureParams: boolean isSeamlessResizeEnabled()>
<android.app.PictureInPictureParams: void writeToParcel(android.os.Parcel,int)>
<android.app.PictureInPictureParams: android.os.Parcelable$Creator CREATOR>
android.app.PictureInPictureParams$Builder
<android.app.PictureInPictureParams$Builder: void <init>()>
<android.app.PictureInPictureParams$Builder: void <init>(android.app.PictureInPictureParams)>
<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams build()>
<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setActions(java.util.List)>
<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setAspectRatio(android.util.Rational)>
<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setAutoEnterEnabled(boolean)>
<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setCloseAction(android.app.RemoteAction)>
<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setExpandedAspectRatio(android.util.Rational)>
<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setSeamlessResizeEnabled(boolean)>
<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setSourceRectHint(android.graphics.Rect)>
<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setSubtitle(java.lang.CharSequence)>
<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setTitle(java.lang.CharSequence)>
android.app.PictureInPictureUiState
<android.app.PictureInPictureUiState: int describeContents()>
<android.app.PictureInPictureUiState: boolean isStashed()>
<android.app.PictureInPictureUiState: void writeToParcel(android.os.Parcel,int)>
<android.app.PictureInPictureUiState: android.os.Parcelable$Creator CREATOR>
android.app.Presentation
<android.app.Presentation: void <init>(android.content.Context,android.view.Display)>
<android.app.Presentation: void <init>(android.content.Context,android.view.Display,int)>
<android.app.Presentation: android.view.Display getDisplay()>
<android.app.Presentation: android.content.res.Resources getResources()>
<android.app.Presentation: void onDisplayChanged()>
<android.app.Presentation: void onDisplayRemoved()>
android.app.ProgressDialog
<android.app.ProgressDialog: void <init>(android.content.Context)>
<android.app.ProgressDialog: void <init>(android.content.Context,int)>
<android.app.ProgressDialog: int getMax()>
<android.app.ProgressDialog: int getProgress()>
<android.app.ProgressDialog: int getSecondaryProgress()>
<android.app.ProgressDialog: void incrementProgressBy(int)>
<android.app.ProgressDialog: void incrementSecondaryProgressBy(int)>
<android.app.ProgressDialog: boolean isIndeterminate()>
<android.app.ProgressDialog: void onStart()>
<android.app.ProgressDialog: void setIndeterminate(boolean)>
<android.app.ProgressDialog: void setIndeterminateDrawable(android.graphics.drawable.Drawable)>
<android.app.ProgressDialog: void setMax(int)>
<android.app.ProgressDialog: void setProgress(int)>
<android.app.ProgressDialog: void setProgressDrawable(android.graphics.drawable.Drawable)>
<android.app.ProgressDialog: void setProgressNumberFormat(java.lang.String)>
<android.app.ProgressDialog: void setProgressPercentFormat(java.text.NumberFormat)>
<android.app.ProgressDialog: void setProgressStyle(int)>
<android.app.ProgressDialog: void setSecondaryProgress(int)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)>
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean,android.content.DialogInterface$OnCancelListener)>
<android.app.ProgressDialog: int STYLE_HORIZONTAL>
<android.app.ProgressDialog: int STYLE_SPINNER>
android.app.RecoverableSecurityException
<android.app.RecoverableSecurityException: void <init>(java.lang.Throwable,java.lang.CharSequence,android.app.RemoteAction)>
<android.app.RecoverableSecurityException: int describeContents()>
<android.app.RecoverableSecurityException: android.app.RemoteAction getUserAction()>
<android.app.RecoverableSecurityException: java.lang.CharSequence getUserMessage()>
<android.app.RecoverableSecurityException: void writeToParcel(android.os.Parcel,int)>
<android.app.RecoverableSecurityException: android.os.Parcelable$Creator CREATOR>
android.app.RemoteAction
<android.app.RemoteAction: void <init>(android.graphics.drawable.Icon,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>
<android.app.RemoteAction: android.app.RemoteAction clone()>
<android.app.RemoteAction: int describeContents()>
<android.app.RemoteAction: void dump(java.lang.String,java.io.PrintWriter)>
<android.app.RemoteAction: android.app.PendingIntent getActionIntent()>
<android.app.RemoteAction: java.lang.CharSequence getContentDescription()>
<android.app.RemoteAction: android.graphics.drawable.Icon getIcon()>
<android.app.RemoteAction: java.lang.CharSequence getTitle()>
<android.app.RemoteAction: boolean isEnabled()>
<android.app.RemoteAction: void setEnabled(boolean)>
<android.app.RemoteAction: void setShouldShowIcon(boolean)>
<android.app.RemoteAction: boolean shouldShowIcon()>
<android.app.RemoteAction: void writeToParcel(android.os.Parcel,int)>
<android.app.RemoteAction: android.os.Parcelable$Creator CREATOR>
android.app.RemoteInput
<android.app.RemoteInput: void addDataResultToIntent(android.app.RemoteInput,android.content.Intent,java.util.Map)>
<android.app.RemoteInput: void addResultsToIntent(android.app.RemoteInput[],android.content.Intent,android.os.Bundle)>
<android.app.RemoteInput: int describeContents()>
<android.app.RemoteInput: boolean getAllowFreeFormInput()>
<android.app.RemoteInput: java.util.Set getAllowedDataTypes()>
<android.app.RemoteInput: java.lang.CharSequence[] getChoices()>
<android.app.RemoteInput: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)>
<android.app.RemoteInput: int getEditChoicesBeforeSending()>
<android.app.RemoteInput: android.os.Bundle getExtras()>
<android.app.RemoteInput: java.lang.CharSequence getLabel()>
<android.app.RemoteInput: java.lang.String getResultKey()>
<android.app.RemoteInput: android.os.Bundle getResultsFromIntent(android.content.Intent)>
<android.app.RemoteInput: int getResultsSource(android.content.Intent)>
<android.app.RemoteInput: boolean isDataOnly()>
<android.app.RemoteInput: void setResultsSource(android.content.Intent,int)>
<android.app.RemoteInput: void writeToParcel(android.os.Parcel,int)>
<android.app.RemoteInput: android.os.Parcelable$Creator CREATOR>
<android.app.RemoteInput: int EDIT_CHOICES_BEFORE_SENDING_AUTO>
<android.app.RemoteInput: int EDIT_CHOICES_BEFORE_SENDING_DISABLED>
<android.app.RemoteInput: int EDIT_CHOICES_BEFORE_SENDING_ENABLED>
<android.app.RemoteInput: java.lang.String EXTRA_RESULTS_DATA>
<android.app.RemoteInput: java.lang.String RESULTS_CLIP_LABEL>
<android.app.RemoteInput: int SOURCE_CHOICE>
<android.app.RemoteInput: int SOURCE_FREE_FORM_INPUT>
android.app.RemoteInput$Builder
<android.app.RemoteInput$Builder: void <init>(java.lang.String)>
<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder addExtras(android.os.Bundle)>
<android.app.RemoteInput$Builder: android.app.RemoteInput build()>
<android.app.RemoteInput$Builder: android.os.Bundle getExtras()>
<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setAllowDataType(java.lang.String,boolean)>
<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setAllowFreeFormInput(boolean)>
<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setChoices(java.lang.CharSequence[])>
<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setEditChoicesBeforeSending(int)>
<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setLabel(java.lang.CharSequence)>
android.app.SearchManager
<android.app.SearchManager: android.content.ComponentName getGlobalSearchActivity()>
<android.app.SearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>
<android.app.SearchManager: java.util.List getSearchablesInGlobalSearch()>
<android.app.SearchManager: void onCancel(android.content.DialogInterface)>
<android.app.SearchManager: void onDismiss(android.content.DialogInterface)>
<android.app.SearchManager: void setOnCancelListener(android.app.SearchManager$OnCancelListener)>
<android.app.SearchManager: void setOnDismissListener(android.app.SearchManager$OnDismissListener)>
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean)>
<android.app.SearchManager: void stopSearch()>
<android.app.SearchManager: void triggerSearch(java.lang.String,android.content.ComponentName,android.os.Bundle)>
<android.app.SearchManager: java.lang.String ACTION_KEY>
<android.app.SearchManager: java.lang.String ACTION_MSG>
<android.app.SearchManager: java.lang.String APP_DATA>
<android.app.SearchManager: java.lang.String CURSOR_EXTRA_KEY_IN_PROGRESS>
<android.app.SearchManager: java.lang.String EXTRA_DATA_KEY>
<android.app.SearchManager: java.lang.String EXTRA_NEW_SEARCH>
<android.app.SearchManager: java.lang.String EXTRA_SELECT_QUERY>
<android.app.SearchManager: java.lang.String EXTRA_WEB_SEARCH_PENDINGINTENT>
<android.app.SearchManager: int FLAG_QUERY_REFINEMENT>
<android.app.SearchManager: java.lang.String INTENT_ACTION_GLOBAL_SEARCH>
<android.app.SearchManager: java.lang.String INTENT_ACTION_SEARCHABLES_CHANGED>
<android.app.SearchManager: java.lang.String INTENT_ACTION_SEARCH_SETTINGS>
<android.app.SearchManager: java.lang.String INTENT_ACTION_SEARCH_SETTINGS_CHANGED>
<android.app.SearchManager: java.lang.String INTENT_ACTION_WEB_SEARCH_SETTINGS>
<android.app.SearchManager: java.lang.String INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED>
<android.app.SearchManager: char MENU_KEY>
<android.app.SearchManager: int MENU_KEYCODE>
<android.app.SearchManager: java.lang.String QUERY>
<android.app.SearchManager: java.lang.String SHORTCUT_MIME_TYPE>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_AUDIO_CHANNEL_CONFIG>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_CONTENT_TYPE>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_DURATION>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_FLAGS>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_FORMAT>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_ICON_1>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_ICON_2>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_INTENT_ACTION>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_INTENT_DATA>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_INTENT_DATA_ID>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_INTENT_EXTRA_DATA>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_IS_LIVE>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_LAST_ACCESS_HINT>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_PRODUCTION_YEAR>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_PURCHASE_PRICE>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_QUERY>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_RATING_SCORE>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_RATING_STYLE>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_RENTAL_PRICE>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_RESULT_CARD_IMAGE>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_SHORTCUT_ID>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_SPINNER_WHILE_REFRESHING>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_TEXT_1>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_TEXT_2>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_TEXT_2_URL>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_VIDEO_HEIGHT>
<android.app.SearchManager: java.lang.String SUGGEST_COLUMN_VIDEO_WIDTH>
<android.app.SearchManager: java.lang.String SUGGEST_MIME_TYPE>
<android.app.SearchManager: java.lang.String SUGGEST_NEVER_MAKE_SHORTCUT>
<android.app.SearchManager: java.lang.String SUGGEST_PARAMETER_LIMIT>
<android.app.SearchManager: java.lang.String SUGGEST_URI_PATH_QUERY>
<android.app.SearchManager: java.lang.String SUGGEST_URI_PATH_SHORTCUT>
<android.app.SearchManager: java.lang.String USER_QUERY>
android.app.SearchManager$OnCancelListener
<android.app.SearchManager$OnCancelListener: void onCancel()>
android.app.SearchManager$OnDismissListener
<android.app.SearchManager$OnDismissListener: void onDismiss()>
android.app.SearchableInfo
<android.app.SearchableInfo: boolean autoUrlDetect()>
<android.app.SearchableInfo: int describeContents()>
<android.app.SearchableInfo: int getHintId()>
<android.app.SearchableInfo: int getImeOptions()>
<android.app.SearchableInfo: int getInputType()>
<android.app.SearchableInfo: android.content.ComponentName getSearchActivity()>
<android.app.SearchableInfo: int getSettingsDescriptionId()>
<android.app.SearchableInfo: java.lang.String getSuggestAuthority()>
<android.app.SearchableInfo: java.lang.String getSuggestIntentAction()>
<android.app.SearchableInfo: java.lang.String getSuggestIntentData()>
<android.app.SearchableInfo: java.lang.String getSuggestPackage()>
<android.app.SearchableInfo: java.lang.String getSuggestPath()>
<android.app.SearchableInfo: java.lang.String getSuggestSelection()>
<android.app.SearchableInfo: int getSuggestThreshold()>
<android.app.SearchableInfo: int getVoiceLanguageId()>
<android.app.SearchableInfo: int getVoiceLanguageModeId()>
<android.app.SearchableInfo: int getVoiceMaxResults()>
<android.app.SearchableInfo: int getVoicePromptTextId()>
<android.app.SearchableInfo: boolean getVoiceSearchEnabled()>
<android.app.SearchableInfo: boolean getVoiceSearchLaunchRecognizer()>
<android.app.SearchableInfo: boolean getVoiceSearchLaunchWebSearch()>
<android.app.SearchableInfo: boolean queryAfterZeroResults()>
<android.app.SearchableInfo: boolean shouldIncludeInGlobalSearch()>
<android.app.SearchableInfo: boolean shouldRewriteQueryFromData()>
<android.app.SearchableInfo: boolean shouldRewriteQueryFromText()>
<android.app.SearchableInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.SearchableInfo: android.os.Parcelable$Creator CREATOR>
android.app.Service
<android.app.Service: void <init>()>
<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.Service: android.app.Application getApplication()>
<android.app.Service: int getForegroundServiceType()>
<android.app.Service: android.os.IBinder onBind(android.content.Intent)>
<android.app.Service: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Service: void onCreate()>
<android.app.Service: void onDestroy()>
<android.app.Service: void onLowMemory()>
<android.app.Service: void onRebind(android.content.Intent)>
<android.app.Service: void onStart(android.content.Intent,int)>
<android.app.Service: int onStartCommand(android.content.Intent,int,int)>
<android.app.Service: void onTaskRemoved(android.content.Intent)>
<android.app.Service: void onTrimMemory(int)>
<android.app.Service: boolean onUnbind(android.content.Intent)>
<android.app.Service: void startForeground(int,android.app.Notification)>
<android.app.Service: void startForeground(int,android.app.Notification,int)>
<android.app.Service: void stopForeground(boolean)>
<android.app.Service: void stopForeground(int)>
<android.app.Service: void stopSelf()>
<android.app.Service: void stopSelf(int)>
<android.app.Service: boolean stopSelfResult(int)>
<android.app.Service: int START_CONTINUATION_MASK>
<android.app.Service: int START_FLAG_REDELIVERY>
<android.app.Service: int START_FLAG_RETRY>
<android.app.Service: int START_NOT_STICKY>
<android.app.Service: int START_REDELIVER_INTENT>
<android.app.Service: int START_STICKY>
<android.app.Service: int START_STICKY_COMPATIBILITY>
<android.app.Service: int STOP_FOREGROUND_DETACH>
<android.app.Service: int STOP_FOREGROUND_LEGACY>
<android.app.Service: int STOP_FOREGROUND_REMOVE>
android.app.ServiceStartNotAllowedException
android.app.SharedElementCallback
<android.app.SharedElementCallback: void <init>()>
<android.app.SharedElementCallback: android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View,android.graphics.Matrix,android.graphics.RectF)>
<android.app.SharedElementCallback: android.view.View onCreateSnapshotView(android.content.Context,android.os.Parcelable)>
<android.app.SharedElementCallback: void onMapSharedElements(java.util.List,java.util.Map)>
<android.app.SharedElementCallback: void onRejectSharedElements(java.util.List)>
<android.app.SharedElementCallback: void onSharedElementEnd(java.util.List,java.util.List,java.util.List)>
<android.app.SharedElementCallback: void onSharedElementStart(java.util.List,java.util.List,java.util.List)>
<android.app.SharedElementCallback: void onSharedElementsArrived(java.util.List,java.util.List,android.app.SharedElementCallback$OnSharedElementsReadyListener)>
android.app.SharedElementCallback$OnSharedElementsReadyListener
<android.app.SharedElementCallback$OnSharedElementsReadyListener: void onSharedElementsReady()>
android.app.StatusBarManager
<android.app.StatusBarManager: void requestAddTileService(android.content.ComponentName,java.lang.CharSequence,android.graphics.drawable.Icon,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.app.StatusBarManager: int TILE_ADD_REQUEST_ERROR_APP_NOT_IN_FOREGROUND>
<android.app.StatusBarManager: int TILE_ADD_REQUEST_ERROR_BAD_COMPONENT>
<android.app.StatusBarManager: int TILE_ADD_REQUEST_ERROR_MISMATCHED_PACKAGE>
<android.app.StatusBarManager: int TILE_ADD_REQUEST_ERROR_NOT_CURRENT_USER>
<android.app.StatusBarManager: int TILE_ADD_REQUEST_ERROR_NO_STATUS_BAR_SERVICE>
<android.app.StatusBarManager: int TILE_ADD_REQUEST_ERROR_REQUEST_IN_PROGRESS>
<android.app.StatusBarManager: int TILE_ADD_REQUEST_RESULT_TILE_ADDED>
<android.app.StatusBarManager: int TILE_ADD_REQUEST_RESULT_TILE_ALREADY_ADDED>
<android.app.StatusBarManager: int TILE_ADD_REQUEST_RESULT_TILE_NOT_ADDED>
android.app.SyncNotedAppOp
<android.app.SyncNotedAppOp: void <init>(int,java.lang.String)>
<android.app.SyncNotedAppOp: int describeContents()>
<android.app.SyncNotedAppOp: java.lang.String getAttributionTag()>
<android.app.SyncNotedAppOp: java.lang.String getOp()>
<android.app.SyncNotedAppOp: void writeToParcel(android.os.Parcel,int)>
<android.app.SyncNotedAppOp: android.os.Parcelable$Creator CREATOR>
android.app.TabActivity
<android.app.TabActivity: void <init>()>
<android.app.TabActivity: android.widget.TabHost getTabHost()>
<android.app.TabActivity: android.widget.TabWidget getTabWidget()>
<android.app.TabActivity: void setDefaultTab(java.lang.String)>
<android.app.TabActivity: void setDefaultTab(int)>
android.app.TaskInfo
<android.app.TaskInfo: boolean isVisible()>
<android.app.TaskInfo: android.content.ComponentName baseActivity>
<android.app.TaskInfo: android.content.Intent baseIntent>
<android.app.TaskInfo: boolean isRunning>
<android.app.TaskInfo: int numActivities>
<android.app.TaskInfo: android.content.ComponentName origActivity>
<android.app.TaskInfo: android.app.ActivityManager$TaskDescription taskDescription>
<android.app.TaskInfo: int taskId>
<android.app.TaskInfo: android.content.ComponentName topActivity>
android.app.TaskStackBuilder
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntent(android.content.Intent)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntentWithParentStack(android.content.Intent)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.app.Activity)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(java.lang.Class)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.content.ComponentName)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder create(android.content.Context)>
<android.app.TaskStackBuilder: android.content.Intent editIntentAt(int)>
<android.app.TaskStackBuilder: int getIntentCount()>
<android.app.TaskStackBuilder: android.content.Intent[] getIntents()>
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)>
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)>
<android.app.TaskStackBuilder: void startActivities()>
<android.app.TaskStackBuilder: void startActivities(android.os.Bundle)>
android.app.TimePickerDialog
<android.app.TimePickerDialog: void <init>(android.content.Context,android.app.TimePickerDialog$OnTimeSetListener,int,int,boolean)>
<android.app.TimePickerDialog: void <init>(android.content.Context,int,android.app.TimePickerDialog$OnTimeSetListener,int,int,boolean)>
<android.app.TimePickerDialog: void onClick(android.content.DialogInterface,int)>
<android.app.TimePickerDialog: void onTimeChanged(android.widget.TimePicker,int,int)>
<android.app.TimePickerDialog: void updateTime(int,int)>
android.app.TimePickerDialog$OnTimeSetListener
<android.app.TimePickerDialog$OnTimeSetListener: void onTimeSet(android.widget.TimePicker,int,int)>
android.app.UiAutomation
<android.app.UiAutomation: void adoptShellPermissionIdentity()>
<android.app.UiAutomation: void adoptShellPermissionIdentity(java.lang.String[])>
<android.app.UiAutomation: void clearWindowAnimationFrameStats()>
<android.app.UiAutomation: boolean clearWindowContentFrameStats(int)>
<android.app.UiAutomation: void dropShellPermissionIdentity()>
<android.app.UiAutomation: android.view.accessibility.AccessibilityEvent executeAndWaitForEvent(java.lang.Runnable,android.app.UiAutomation$AccessibilityEventFilter,long)>
<android.app.UiAutomation: android.os.ParcelFileDescriptor executeShellCommand(java.lang.String)>
<android.app.UiAutomation: android.os.ParcelFileDescriptor[] executeShellCommandRw(java.lang.String)>
<android.app.UiAutomation: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>
<android.app.UiAutomation: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>
<android.app.UiAutomation: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>
<android.app.UiAutomation: android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()>
<android.app.UiAutomation: android.view.WindowContentFrameStats getWindowContentFrameStats(int)>
<android.app.UiAutomation: java.util.List getWindows()>
<android.app.UiAutomation: android.util.SparseArray getWindowsOnAllDisplays()>
<android.app.UiAutomation: void grantRuntimePermission(java.lang.String,java.lang.String)>
<android.app.UiAutomation: void grantRuntimePermissionAsUser(java.lang.String,java.lang.String,android.os.UserHandle)>
<android.app.UiAutomation: boolean injectInputEvent(android.view.InputEvent,boolean)>
<android.app.UiAutomation: boolean performGlobalAction(int)>
<android.app.UiAutomation: void revokeRuntimePermission(java.lang.String,java.lang.String)>
<android.app.UiAutomation: void revokeRuntimePermissionAsUser(java.lang.String,java.lang.String,android.os.UserHandle)>
<android.app.UiAutomation: void setAnimationScale(float)>
<android.app.UiAutomation: void setOnAccessibilityEventListener(android.app.UiAutomation$OnAccessibilityEventListener)>
<android.app.UiAutomation: boolean setRotation(int)>
<android.app.UiAutomation: void setRunAsMonkey(boolean)>
<android.app.UiAutomation: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>
<android.app.UiAutomation: android.graphics.Bitmap takeScreenshot()>
<android.app.UiAutomation: void waitForIdle(long,long)>
<android.app.UiAutomation: int FLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES>
<android.app.UiAutomation: int FLAG_DONT_USE_ACCESSIBILITY>
<android.app.UiAutomation: int ROTATION_FREEZE_0>
<android.app.UiAutomation: int ROTATION_FREEZE_180>
<android.app.UiAutomation: int ROTATION_FREEZE_270>
<android.app.UiAutomation: int ROTATION_FREEZE_90>
<android.app.UiAutomation: int ROTATION_FREEZE_CURRENT>
<android.app.UiAutomation: int ROTATION_UNFREEZE>
android.app.UiAutomation$AccessibilityEventFilter
<android.app.UiAutomation$AccessibilityEventFilter: boolean accept(android.view.accessibility.AccessibilityEvent)>
android.app.UiAutomation$OnAccessibilityEventListener
<android.app.UiAutomation$OnAccessibilityEventListener: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
android.app.UiModeManager
<android.app.UiModeManager: void disableCarMode(int)>
<android.app.UiModeManager: void enableCarMode(int)>
<android.app.UiModeManager: int getCurrentModeType()>
<android.app.UiModeManager: java.time.LocalTime getCustomNightModeEnd()>
<android.app.UiModeManager: java.time.LocalTime getCustomNightModeStart()>
<android.app.UiModeManager: int getNightMode()>
<android.app.UiModeManager: void setApplicationNightMode(int)>
<android.app.UiModeManager: void setCustomNightModeEnd(java.time.LocalTime)>
<android.app.UiModeManager: void setCustomNightModeStart(java.time.LocalTime)>
<android.app.UiModeManager: void setNightMode(int)>
<android.app.UiModeManager: java.lang.String ACTION_ENTER_CAR_MODE>
<android.app.UiModeManager: java.lang.String ACTION_ENTER_DESK_MODE>
<android.app.UiModeManager: java.lang.String ACTION_EXIT_CAR_MODE>
<android.app.UiModeManager: java.lang.String ACTION_EXIT_DESK_MODE>
<android.app.UiModeManager: int DISABLE_CAR_MODE_GO_HOME>
<android.app.UiModeManager: int ENABLE_CAR_MODE_ALLOW_SLEEP>
<android.app.UiModeManager: int ENABLE_CAR_MODE_GO_CAR_HOME>
<android.app.UiModeManager: int MODE_NIGHT_AUTO>
<android.app.UiModeManager: int MODE_NIGHT_CUSTOM>
<android.app.UiModeManager: int MODE_NIGHT_NO>
<android.app.UiModeManager: int MODE_NIGHT_YES>
android.app.VoiceInteractor
<android.app.VoiceInteractor: android.app.VoiceInteractor$Request getActiveRequest(java.lang.String)>
<android.app.VoiceInteractor: android.app.VoiceInteractor$Request[] getActiveRequests()>
<android.app.VoiceInteractor: java.lang.String getPackageName()>
<android.app.VoiceInteractor: boolean isDestroyed()>
<android.app.VoiceInteractor: void notifyDirectActionsChanged()>
<android.app.VoiceInteractor: boolean registerOnDestroyedCallback(java.util.concurrent.Executor,java.lang.Runnable)>
<android.app.VoiceInteractor: boolean submitRequest(android.app.VoiceInteractor$Request)>
<android.app.VoiceInteractor: boolean submitRequest(android.app.VoiceInteractor$Request,java.lang.String)>
<android.app.VoiceInteractor: boolean[] supportsCommands(java.lang.String[])>
<android.app.VoiceInteractor: boolean unregisterOnDestroyedCallback(java.lang.Runnable)>
android.app.VoiceInteractor$AbortVoiceRequest
<android.app.VoiceInteractor$AbortVoiceRequest: void <init>(android.app.VoiceInteractor$Prompt,android.os.Bundle)>
<android.app.VoiceInteractor$AbortVoiceRequest: void onAbortResult(android.os.Bundle)>
android.app.VoiceInteractor$CommandRequest
<android.app.VoiceInteractor$CommandRequest: void <init>(java.lang.String,android.os.Bundle)>
<android.app.VoiceInteractor$CommandRequest: void onCommandResult(boolean,android.os.Bundle)>
android.app.VoiceInteractor$CompleteVoiceRequest
<android.app.VoiceInteractor$CompleteVoiceRequest: void <init>(android.app.VoiceInteractor$Prompt,android.os.Bundle)>
<android.app.VoiceInteractor$CompleteVoiceRequest: void onCompleteResult(android.os.Bundle)>
android.app.VoiceInteractor$ConfirmationRequest
<android.app.VoiceInteractor$ConfirmationRequest: void <init>(android.app.VoiceInteractor$Prompt,android.os.Bundle)>
<android.app.VoiceInteractor$ConfirmationRequest: void onConfirmationResult(boolean,android.os.Bundle)>
android.app.VoiceInteractor$PickOptionRequest
<android.app.VoiceInteractor$PickOptionRequest: void <init>(android.app.VoiceInteractor$Prompt,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>
<android.app.VoiceInteractor$PickOptionRequest: void onPickOptionResult(boolean,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>
android.app.VoiceInteractor$PickOptionRequest$Option
<android.app.VoiceInteractor$PickOptionRequest$Option: void <init>(java.lang.CharSequence,int)>
<android.app.VoiceInteractor$PickOptionRequest$Option: android.app.VoiceInteractor$PickOptionRequest$Option addSynonym(java.lang.CharSequence)>
<android.app.VoiceInteractor$PickOptionRequest$Option: int countSynonyms()>
<android.app.VoiceInteractor$PickOptionRequest$Option: int describeContents()>
<android.app.VoiceInteractor$PickOptionRequest$Option: android.os.Bundle getExtras()>
<android.app.VoiceInteractor$PickOptionRequest$Option: int getIndex()>
<android.app.VoiceInteractor$PickOptionRequest$Option: java.lang.CharSequence getLabel()>
<android.app.VoiceInteractor$PickOptionRequest$Option: java.lang.CharSequence getSynonymAt(int)>
<android.app.VoiceInteractor$PickOptionRequest$Option: void setExtras(android.os.Bundle)>
<android.app.VoiceInteractor$PickOptionRequest$Option: void writeToParcel(android.os.Parcel,int)>
<android.app.VoiceInteractor$PickOptionRequest$Option: android.os.Parcelable$Creator CREATOR>
android.app.VoiceInteractor$Prompt
<android.app.VoiceInteractor$Prompt: void <init>(java.lang.CharSequence[],java.lang.CharSequence)>
<android.app.VoiceInteractor$Prompt: void <init>(java.lang.CharSequence)>
<android.app.VoiceInteractor$Prompt: int countVoicePrompts()>
<android.app.VoiceInteractor$Prompt: int describeContents()>
<android.app.VoiceInteractor$Prompt: java.lang.CharSequence getVisualPrompt()>
<android.app.VoiceInteractor$Prompt: java.lang.CharSequence getVoicePromptAt(int)>
<android.app.VoiceInteractor$Prompt: void writeToParcel(android.os.Parcel,int)>
<android.app.VoiceInteractor$Prompt: android.os.Parcelable$Creator CREATOR>
android.app.VoiceInteractor$Request
<android.app.VoiceInteractor$Request: void cancel()>
<android.app.VoiceInteractor$Request: android.app.Activity getActivity()>
<android.app.VoiceInteractor$Request: android.content.Context getContext()>
<android.app.VoiceInteractor$Request: java.lang.String getName()>
<android.app.VoiceInteractor$Request: void onAttached(android.app.Activity)>
<android.app.VoiceInteractor$Request: void onCancel()>
<android.app.VoiceInteractor$Request: void onDetached()>
android.app.WallpaperColors
<android.app.WallpaperColors: void <init>(android.os.Parcel)>
<android.app.WallpaperColors: void <init>(android.graphics.Color,android.graphics.Color,android.graphics.Color)>
<android.app.WallpaperColors: void <init>(android.graphics.Color,android.graphics.Color,android.graphics.Color,int)>
<android.app.WallpaperColors: int describeContents()>
<android.app.WallpaperColors: android.app.WallpaperColors fromBitmap(android.graphics.Bitmap)>
<android.app.WallpaperColors: android.app.WallpaperColors fromDrawable(android.graphics.drawable.Drawable)>
<android.app.WallpaperColors: int getColorHints()>
<android.app.WallpaperColors: android.graphics.Color getPrimaryColor()>
<android.app.WallpaperColors: android.graphics.Color getSecondaryColor()>
<android.app.WallpaperColors: android.graphics.Color getTertiaryColor()>
<android.app.WallpaperColors: void writeToParcel(android.os.Parcel,int)>
<android.app.WallpaperColors: android.os.Parcelable$Creator CREATOR>
<android.app.WallpaperColors: int HINT_SUPPORTS_DARK_TEXT>
<android.app.WallpaperColors: int HINT_SUPPORTS_DARK_THEME>
android.app.WallpaperInfo
<android.app.WallpaperInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>
<android.app.WallpaperInfo: int describeContents()>
<android.app.WallpaperInfo: void dump(android.util.Printer,java.lang.String)>
<android.app.WallpaperInfo: android.content.ComponentName getComponent()>
<android.app.WallpaperInfo: java.lang.String getPackageName()>
<android.app.WallpaperInfo: android.content.pm.ServiceInfo getServiceInfo()>
<android.app.WallpaperInfo: java.lang.String getServiceName()>
<android.app.WallpaperInfo: java.lang.String getSettingsActivity()>
<android.app.WallpaperInfo: android.net.Uri getSettingsSliceUri()>
<android.app.WallpaperInfo: boolean getShowMetadataInPreview()>
<android.app.WallpaperInfo: java.lang.CharSequence loadAuthor(android.content.pm.PackageManager)>
<android.app.WallpaperInfo: java.lang.CharSequence loadContextDescription(android.content.pm.PackageManager)>
<android.app.WallpaperInfo: android.net.Uri loadContextUri(android.content.pm.PackageManager)>
<android.app.WallpaperInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
<android.app.WallpaperInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.app.WallpaperInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.app.WallpaperInfo: android.graphics.drawable.Drawable loadThumbnail(android.content.pm.PackageManager)>
<android.app.WallpaperInfo: boolean shouldUseDefaultUnfoldTransition()>
<android.app.WallpaperInfo: boolean supportsMultipleDisplays()>
<android.app.WallpaperInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.WallpaperInfo: android.os.Parcelable$Creator CREATOR>
android.app.WallpaperManager
<android.app.WallpaperManager: void addOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener,android.os.Handler)>
<android.app.WallpaperManager: void clear()>
<android.app.WallpaperManager: void clear(int)>
<android.app.WallpaperManager: void clearWallpaper()>
<android.app.WallpaperManager: void clearWallpaperOffsets(android.os.IBinder)>
<android.app.WallpaperManager: void forgetLoadedWallpaper()>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable()>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int)>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float)>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float,int)>
<android.app.WallpaperManager: android.content.Intent getCropAndSetWallpaperIntent(android.net.Uri)>
<android.app.WallpaperManager: int getDesiredMinimumHeight()>
<android.app.WallpaperManager: int getDesiredMinimumWidth()>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getDrawable()>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getFastDrawable()>
<android.app.WallpaperManager: android.app.WallpaperManager getInstance(android.content.Context)>
<android.app.WallpaperManager: android.app.WallpaperColors getWallpaperColors(int)>
<android.app.WallpaperManager: android.os.ParcelFileDescriptor getWallpaperFile(int)>
<android.app.WallpaperManager: int getWallpaperId(int)>
<android.app.WallpaperManager: android.app.WallpaperInfo getWallpaperInfo()>
<android.app.WallpaperManager: boolean hasResourceWallpaper(int)>
<android.app.WallpaperManager: boolean isSetWallpaperAllowed()>
<android.app.WallpaperManager: boolean isWallpaperSupported()>
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekDrawable()>
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekFastDrawable()>
<android.app.WallpaperManager: void removeOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener)>
<android.app.WallpaperManager: void sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>
<android.app.WallpaperManager: int setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean)>
<android.app.WallpaperManager: int setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)>
<android.app.WallpaperManager: void setDisplayPadding(android.graphics.Rect)>
<android.app.WallpaperManager: void setResource(int)>
<android.app.WallpaperManager: int setResource(int,int)>
<android.app.WallpaperManager: void setStream(java.io.InputStream)>
<android.app.WallpaperManager: int setStream(java.io.InputStream,android.graphics.Rect,boolean)>
<android.app.WallpaperManager: int setStream(java.io.InputStream,android.graphics.Rect,boolean,int)>
<android.app.WallpaperManager: void setWallpaperOffsetSteps(float,float)>
<android.app.WallpaperManager: void setWallpaperOffsets(android.os.IBinder,float,float)>
<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)>
<android.app.WallpaperManager: java.lang.String ACTION_CHANGE_LIVE_WALLPAPER>
<android.app.WallpaperManager: java.lang.String ACTION_CROP_AND_SET_WALLPAPER>
<android.app.WallpaperManager: java.lang.String ACTION_LIVE_WALLPAPER_CHOOSER>
<android.app.WallpaperManager: java.lang.String COMMAND_DROP>
<android.app.WallpaperManager: java.lang.String COMMAND_SECONDARY_TAP>
<android.app.WallpaperManager: java.lang.String COMMAND_TAP>
<android.app.WallpaperManager: java.lang.String EXTRA_LIVE_WALLPAPER_COMPONENT>
<android.app.WallpaperManager: int FLAG_LOCK>
<android.app.WallpaperManager: int FLAG_SYSTEM>
<android.app.WallpaperManager: java.lang.String WALLPAPER_PREVIEW_META_DATA>
android.app.WallpaperManager$OnColorsChangedListener
<android.app.WallpaperManager$OnColorsChangedListener: void onColorsChanged(android.app.WallpaperColors,int)>
android.app.ZygotePreload
<android.app.ZygotePreload: void doPreload(android.content.pm.ApplicationInfo)>
android.app.admin.ConnectEvent
<android.app.admin.ConnectEvent: java.net.InetAddress getInetAddress()>
<android.app.admin.ConnectEvent: int getPort()>
<android.app.admin.ConnectEvent: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.ConnectEvent: android.os.Parcelable$Creator CREATOR>
android.app.admin.DelegatedAdminReceiver
<android.app.admin.DelegatedAdminReceiver: void <init>()>
<android.app.admin.DelegatedAdminReceiver: java.lang.String onChoosePrivateKeyAlias(android.content.Context,android.content.Intent,int,android.net.Uri,java.lang.String)>
<android.app.admin.DelegatedAdminReceiver: void onNetworkLogsAvailable(android.content.Context,android.content.Intent,long,int)>
<android.app.admin.DelegatedAdminReceiver: void onReceive(android.content.Context,android.content.Intent)>
<android.app.admin.DelegatedAdminReceiver: void onSecurityLogsAvailable(android.content.Context,android.content.Intent)>
android.app.admin.DeviceAdminInfo
<android.app.admin.DeviceAdminInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>
<android.app.admin.DeviceAdminInfo: int describeContents()>
<android.app.admin.DeviceAdminInfo: void dump(android.util.Printer,java.lang.String)>
<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()>
<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>
<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>
<android.app.admin.DeviceAdminInfo: java.lang.String getReceiverName()>
<android.app.admin.DeviceAdminInfo: java.lang.String getTagForPolicy(int)>
<android.app.admin.DeviceAdminInfo: boolean isVisible()>
<android.app.admin.DeviceAdminInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
<android.app.admin.DeviceAdminInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.app.admin.DeviceAdminInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.app.admin.DeviceAdminInfo: boolean supportsTransferOwnership()>
<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>
<android.app.admin.DeviceAdminInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.DeviceAdminInfo: android.os.Parcelable$Creator CREATOR>
<android.app.admin.DeviceAdminInfo: int USES_ENCRYPTED_STORAGE>
<android.app.admin.DeviceAdminInfo: int USES_POLICY_DISABLE_CAMERA>
<android.app.admin.DeviceAdminInfo: int USES_POLICY_DISABLE_KEYGUARD_FEATURES>
<android.app.admin.DeviceAdminInfo: int USES_POLICY_EXPIRE_PASSWORD>
<android.app.admin.DeviceAdminInfo: int USES_POLICY_FORCE_LOCK>
<android.app.admin.DeviceAdminInfo: int USES_POLICY_LIMIT_PASSWORD>
<android.app.admin.DeviceAdminInfo: int USES_POLICY_RESET_PASSWORD>
<android.app.admin.DeviceAdminInfo: int USES_POLICY_WATCH_LOGIN>
<android.app.admin.DeviceAdminInfo: int USES_POLICY_WIPE_DATA>
android.app.admin.DeviceAdminReceiver
<android.app.admin.DeviceAdminReceiver: void <init>()>
<android.app.admin.DeviceAdminReceiver: android.app.admin.DevicePolicyManager getManager(android.content.Context)>
<android.app.admin.DeviceAdminReceiver: android.content.ComponentName getWho(android.content.Context)>
<android.app.admin.DeviceAdminReceiver: void onBugreportFailed(android.content.Context,android.content.Intent,int)>
<android.app.admin.DeviceAdminReceiver: void onBugreportShared(android.content.Context,android.content.Intent,java.lang.String)>
<android.app.admin.DeviceAdminReceiver: void onBugreportSharingDeclined(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: java.lang.String onChoosePrivateKeyAlias(android.content.Context,android.content.Intent,int,android.net.Uri,java.lang.String)>
<android.app.admin.DeviceAdminReceiver: void onComplianceAcknowledgementRequired(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onDisabled(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onEnabled(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onLockTaskModeEntering(android.content.Context,android.content.Intent,java.lang.String)>
<android.app.admin.DeviceAdminReceiver: void onLockTaskModeExiting(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onNetworkLogsAvailable(android.content.Context,android.content.Intent,long,int)>
<android.app.admin.DeviceAdminReceiver: void onOperationSafetyStateChanged(android.content.Context,int,boolean)>
<android.app.admin.DeviceAdminReceiver: void onPasswordChanged(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onPasswordChanged(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onPasswordExpiring(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onPasswordExpiring(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onPasswordFailed(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onPasswordFailed(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onPasswordSucceeded(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onPasswordSucceeded(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onProfileProvisioningComplete(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onReadyForUserInitialization(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onReceive(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onSecurityLogsAvailable(android.content.Context,android.content.Intent)>
<android.app.admin.DeviceAdminReceiver: void onSystemUpdatePending(android.content.Context,android.content.Intent,long)>
<android.app.admin.DeviceAdminReceiver: void onTransferAffiliatedProfileOwnershipComplete(android.content.Context,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onTransferOwnershipComplete(android.content.Context,android.os.PersistableBundle)>
<android.app.admin.DeviceAdminReceiver: void onUserAdded(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onUserRemoved(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onUserStarted(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onUserStopped(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: void onUserSwitched(android.content.Context,android.content.Intent,android.os.UserHandle)>
<android.app.admin.DeviceAdminReceiver: java.lang.String ACTION_CHOOSE_PRIVATE_KEY_ALIAS>
<android.app.admin.DeviceAdminReceiver: java.lang.String ACTION_DEVICE_ADMIN_DISABLED>
<android.app.admin.DeviceAdminReceiver: java.lang.String ACTION_DEVICE_ADMIN_DISABLE_REQUESTED>
<android.app.admin.DeviceAdminReceiver: java.lang.String ACTION_DEVICE_ADMIN_ENABLED>
<android.app.admin.DeviceAdminReceiver: java.lang.String ACTION_LOCK_TASK_ENTERING>
<android.app.admin.DeviceAdminReceiver: java.lang.String ACTION_LOCK_TASK_EXITING>
<android.app.admin.DeviceAdminReceiver: java.lang.String ACTION_NETWORK_LOGS_AVAILABLE>
<android.app.admin.DeviceAdminReceiver: java.lang.String ACTION_PASSWORD_CHANGED>
<android.app.admin.DeviceAdminReceiver: java.lang.String ACTION_PASSWORD_EXPIRING>
<android.app.admin.DeviceAdminReceiver: java.lang.String ACTION_PASSWORD_FAILED>
<android.app.admin.DeviceAdminReceiver: java.lang.String ACTION_PASSWORD_SUCCEEDED>
<android.app.admin.DeviceAdminReceiver: java.lang.String ACTION_PROFILE_PROVISIONING_COMPLETE>
<android.app.admin.DeviceAdminReceiver: java.lang.String ACTION_SECURITY_LOGS_AVAILABLE>
<android.app.admin.DeviceAdminReceiver: int BUGREPORT_FAILURE_FAILED_COMPLETING>
<android.app.admin.DeviceAdminReceiver: int BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE>
<android.app.admin.DeviceAdminReceiver: java.lang.String DEVICE_ADMIN_META_DATA>
<android.app.admin.DeviceAdminReceiver: java.lang.String EXTRA_DISABLE_WARNING>
<android.app.admin.DeviceAdminReceiver: java.lang.String EXTRA_LOCK_TASK_PACKAGE>
<android.app.admin.DeviceAdminReceiver: java.lang.String EXTRA_TRANSFER_OWNERSHIP_ADMIN_EXTRAS_BUNDLE>
android.app.admin.DeviceAdminService
<android.app.admin.DeviceAdminService: void <init>()>
<android.app.admin.DeviceAdminService: android.os.IBinder onBind(android.content.Intent)>
android.app.admin.DevicePolicyManager
<android.app.admin.DevicePolicyManager: void acknowledgeDeviceCompliant()>
<android.app.admin.DevicePolicyManager: void addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)>
<android.app.admin.DevicePolicyManager: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>
<android.app.admin.DevicePolicyManager: void addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void addUserRestriction(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>
<android.app.admin.DevicePolicyManager: boolean canAdminGrantSensorsPermissions()>
<android.app.admin.DevicePolicyManager: boolean canUsbDataSignalingBeDisabled()>
<android.app.admin.DevicePolicyManager: void clearApplicationUserData(android.content.ComponentName,java.lang.String,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager$OnClearApplicationUserDataListener)>
<android.app.admin.DevicePolicyManager: void clearCrossProfileIntentFilters(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void clearDeviceOwnerApp(java.lang.String)>
<android.app.admin.DevicePolicyManager: void clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: void clearProfileOwner(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean clearResetPasswordToken(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void clearUserRestriction(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: android.content.Intent createAdminSupportIntent(java.lang.String)>
<android.app.admin.DevicePolicyManager: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>
<android.app.admin.DevicePolicyManager: void enableSystemApp(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: int enableSystemApp(android.content.ComponentName,android.content.Intent)>
<android.app.admin.DevicePolicyManager: android.security.AttestedKeyPair generateKeyPair(android.content.ComponentName,java.lang.String,android.security.keystore.KeyGenParameterSpec,int)>
<android.app.admin.DevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabled()>
<android.app.admin.DevicePolicyManager: java.util.List getActiveAdmins()>
<android.app.admin.DevicePolicyManager: java.util.Set getAffiliationIds(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.Set getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean getAutoTimeEnabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean getAutoTimeRequired()>
<android.app.admin.DevicePolicyManager: boolean getAutoTimeZoneEnabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean getBluetoothContactSharingDisabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.lang.String getCertInstallerPackage(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.Set getCrossProfileCalendarPackages(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.Set getCrossProfilePackages(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getCurrentFailedPasswordAttempts()>
<android.app.admin.DevicePolicyManager: java.util.List getDelegatePackages(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: java.util.List getDelegatedScopes(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getDeviceOwnerLockScreenInfo()>
<android.app.admin.DevicePolicyManager: java.lang.String getDevicePolicyManagementRoleHolderPackage()>
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getEndUserSessionMessage(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.lang.String getEnrollmentSpecificId()>
<android.app.admin.DevicePolicyManager: android.app.admin.FactoryResetProtectionPolicy getFactoryResetProtectionPolicy(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.lang.String getGlobalPrivateDnsHost(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getGlobalPrivateDnsMode(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getInstalledCaCerts(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getKeepUninstalledPackages(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.Map getKeyPairGrants(java.lang.String)>
<android.app.admin.DevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getLockTaskFeatures(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.lang.String[] getLockTaskPackages(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: long getManagedProfileMaximumTimeOff(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getMinimumRequiredWifiSecurityLevel()>
<android.app.admin.DevicePolicyManager: int getNearbyAppStreamingPolicy()>
<android.app.admin.DevicePolicyManager: int getNearbyNotificationStreamingPolicy()>
<android.app.admin.DevicePolicyManager: int getOrganizationColor(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getOrganizationName(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getOverrideApns(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: android.app.admin.DevicePolicyManager getParentProfileInstance(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPasswordComplexity()>
<android.app.admin.DevicePolicyManager: long getPasswordExpiration(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPasswordMaximumLength(int)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.app.admin.DevicePolicyManager: int getPermissionPolicy(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getPermittedInputMethods(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getPersonalAppsSuspendedReasons(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getPreferentialNetworkServiceConfigs()>
<android.app.admin.DevicePolicyManager: int getRequiredPasswordComplexity()>
<android.app.admin.DevicePolicyManager: long getRequiredStrongAuthTimeout(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: android.app.admin.DevicePolicyResourcesManager getResources()>
<android.app.admin.DevicePolicyManager: boolean getScreenCaptureDisabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getSecondaryUsers(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getShortSupportMessage(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getStartUserSessionMessage(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus()>
<android.app.admin.DevicePolicyManager: android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()>
<android.app.admin.DevicePolicyManager: android.os.PersistableBundle getTransferOwnershipBundle()>
<android.app.admin.DevicePolicyManager: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List getUserControlDisabledPackages(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: android.os.Bundle getUserRestrictions(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.lang.String getWifiMacAddress(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: android.app.admin.WifiSsidPolicy getWifiSsidPolicy()>
<android.app.admin.DevicePolicyManager: boolean grantKeyPairToApp(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean grantKeyPairToWifiAuth(java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean hasCaCertInstalled(android.content.ComponentName,byte[])>
<android.app.admin.DevicePolicyManager: boolean hasGrantedPolicy(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: boolean hasKeyPair(java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean hasLockdownAdminConfiguredNetworks(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean installCaCert(android.content.ComponentName,byte[])>
<android.app.admin.DevicePolicyManager: boolean installExistingPackage(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate[],java.lang.String,boolean)>
<android.app.admin.DevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate[],java.lang.String,int)>
<android.app.admin.DevicePolicyManager: void installSystemUpdate(android.content.ComponentName,android.net.Uri,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback)>
<android.app.admin.DevicePolicyManager: boolean isActivePasswordSufficient()>
<android.app.admin.DevicePolicyManager: boolean isActivePasswordSufficientForDeviceRequirement()>
<android.app.admin.DevicePolicyManager: boolean isAdminActive(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isAffiliatedUser()>
<android.app.admin.DevicePolicyManager: boolean isAlwaysOnVpnLockdownEnabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isApplicationHidden(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean isBackupServiceEnabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isCallerApplicationRestrictionsManagingPackage()>
<android.app.admin.DevicePolicyManager: boolean isCommonCriteriaModeEnabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isComplianceAcknowledgementRequired()>
<android.app.admin.DevicePolicyManager: boolean isDeviceIdAttestationSupported()>
<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerApp(java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean isEphemeralUser(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isKeyPairGrantedToWifiAuth(java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean isLockTaskPermitted(java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean isLogoutEnabled()>
<android.app.admin.DevicePolicyManager: boolean isManagedProfile(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isMasterVolumeMuted(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isNetworkLoggingEnabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isOrganizationOwnedDeviceWithManagedProfile()>
<android.app.admin.DevicePolicyManager: boolean isOverrideApnEnabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isPackageSuspended(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean isPreferentialNetworkServiceEnabled()>
<android.app.admin.DevicePolicyManager: boolean isProfileOwnerApp(java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean isProvisioningAllowed(java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean isResetPasswordTokenActive(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isSafeOperation(int)>
<android.app.admin.DevicePolicyManager: boolean isSecurityLoggingEnabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean isUninstallBlocked(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean isUniqueDeviceAttestationSupported()>
<android.app.admin.DevicePolicyManager: boolean isUsbDataSignalingEnabled()>
<android.app.admin.DevicePolicyManager: boolean isUsingUnifiedPassword(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List listForegroundAffiliatedUsers()>
<android.app.admin.DevicePolicyManager: void lockNow()>
<android.app.admin.DevicePolicyManager: void lockNow(int)>
<android.app.admin.DevicePolicyManager: int logoutUser(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void reboot(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void removeActiveAdmin(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean removeKeyPair(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean removeOverrideApn(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: boolean removeUser(android.content.ComponentName,android.os.UserHandle)>
<android.app.admin.DevicePolicyManager: boolean requestBugreport(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean resetPassword(java.lang.String,int)>
<android.app.admin.DevicePolicyManager: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
<android.app.admin.DevicePolicyManager: java.util.List retrieveNetworkLogs(android.content.ComponentName,long)>
<android.app.admin.DevicePolicyManager: java.util.List retrievePreRebootSecurityLogs(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: java.util.List retrieveSecurityLogs(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: boolean revokeKeyPairFromApp(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.app.admin.DevicePolicyManager: boolean revokeKeyPairFromWifiAuth(java.lang.String)>
<android.app.admin.DevicePolicyManager: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean)>
<android.app.admin.DevicePolicyManager: void setAffiliationIds(android.content.ComponentName,java.util.Set)>
<android.app.admin.DevicePolicyManager: void setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean)>
<android.app.admin.DevicePolicyManager: void setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.Set)>
<android.app.admin.DevicePolicyManager: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,boolean)>
<android.app.admin.DevicePolicyManager: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,android.os.Bundle)>
<android.app.admin.DevicePolicyManager: void setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setAutoTimeEnabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setAutoTimeRequired(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setAutoTimeZoneEnabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setBackupServiceEnabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setBluetoothContactSharingDisabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setCertInstallerPackage(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setCommonCriteriaModeEnabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setConfiguredNetworksLockdownState(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.Set)>
<android.app.admin.DevicePolicyManager: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setCrossProfilePackages(android.content.ComponentName,java.util.Set)>
<android.app.admin.DevicePolicyManager: void setDefaultSmsApplication(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>
<android.app.admin.DevicePolicyManager: void setDeviceOwnerLockScreenInfo(android.content.ComponentName,java.lang.CharSequence)>
<android.app.admin.DevicePolicyManager: void setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>
<android.app.admin.DevicePolicyManager: void setFactoryResetProtectionPolicy(android.content.ComponentName,android.app.admin.FactoryResetProtectionPolicy)>
<android.app.admin.DevicePolicyManager: int setGlobalPrivateDnsModeOpportunistic(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: int setGlobalPrivateDnsModeSpecifiedHost(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setKeepUninstalledPackages(android.content.ComponentName,java.util.List)>
<android.app.admin.DevicePolicyManager: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.util.List,boolean)>
<android.app.admin.DevicePolicyManager: boolean setKeyguardDisabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setKeyguardDisabledFeatures(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setLocationEnabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setLockTaskFeatures(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])>
<android.app.admin.DevicePolicyManager: void setLogoutEnabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)>
<android.app.admin.DevicePolicyManager: void setManagedProfileMaximumTimeOff(android.content.ComponentName,long)>
<android.app.admin.DevicePolicyManager: void setMasterVolumeMuted(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)>
<android.app.admin.DevicePolicyManager: java.util.List setMeteredDataDisabledPackages(android.content.ComponentName,java.util.List)>
<android.app.admin.DevicePolicyManager: void setMinimumRequiredWifiSecurityLevel(int)>
<android.app.admin.DevicePolicyManager: void setNearbyAppStreamingPolicy(int)>
<android.app.admin.DevicePolicyManager: void setNearbyNotificationStreamingPolicy(int)>
<android.app.admin.DevicePolicyManager: void setNetworkLoggingEnabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setOrganizationColor(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setOrganizationId(java.lang.String)>
<android.app.admin.DevicePolicyManager: void setOrganizationName(android.content.ComponentName,java.lang.CharSequence)>
<android.app.admin.DevicePolicyManager: void setOverrideApnsEnabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String[],boolean)>
<android.app.admin.DevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long)>
<android.app.admin.DevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: boolean setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,int)>
<android.app.admin.DevicePolicyManager: void setPermissionPolicy(android.content.ComponentName,int)>
<android.app.admin.DevicePolicyManager: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>
<android.app.admin.DevicePolicyManager: boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName,java.util.List)>
<android.app.admin.DevicePolicyManager: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>
<android.app.admin.DevicePolicyManager: void setPersonalAppsSuspended(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setPreferentialNetworkServiceConfigs(java.util.List)>
<android.app.admin.DevicePolicyManager: void setPreferentialNetworkServiceEnabled(boolean)>
<android.app.admin.DevicePolicyManager: void setProfileEnabled(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setProfileName(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)>
<android.app.admin.DevicePolicyManager: void setRequiredPasswordComplexity(int)>
<android.app.admin.DevicePolicyManager: void setRequiredStrongAuthTimeout(android.content.ComponentName,long)>
<android.app.admin.DevicePolicyManager: boolean setResetPasswordToken(android.content.ComponentName,byte[])>
<android.app.admin.DevicePolicyManager: void setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void setScreenCaptureDisabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setSecurityLoggingEnabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setShortSupportMessage(android.content.ComponentName,java.lang.CharSequence)>
<android.app.admin.DevicePolicyManager: void setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>
<android.app.admin.DevicePolicyManager: boolean setStatusBarDisabled(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)>
<android.app.admin.DevicePolicyManager: void setSystemSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)>
<android.app.admin.DevicePolicyManager: boolean setTime(android.content.ComponentName,long)>
<android.app.admin.DevicePolicyManager: boolean setTimeZone(android.content.ComponentName,java.lang.String)>
<android.app.admin.DevicePolicyManager: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>
<android.app.admin.DevicePolicyManager: void setUninstallBlocked(android.content.ComponentName,java.lang.String,boolean)>
<android.app.admin.DevicePolicyManager: void setUsbDataSignalingEnabled(boolean)>
<android.app.admin.DevicePolicyManager: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>
<android.app.admin.DevicePolicyManager: void setUserIcon(android.content.ComponentName,android.graphics.Bitmap)>
<android.app.admin.DevicePolicyManager: void setWifiSsidPolicy(android.app.admin.WifiSsidPolicy)>
<android.app.admin.DevicePolicyManager: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>
<android.app.admin.DevicePolicyManager: int stopUser(android.content.ComponentName,android.os.UserHandle)>
<android.app.admin.DevicePolicyManager: boolean switchUser(android.content.ComponentName,android.os.UserHandle)>
<android.app.admin.DevicePolicyManager: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>
<android.app.admin.DevicePolicyManager: void uninstallAllUserCaCerts(android.content.ComponentName)>
<android.app.admin.DevicePolicyManager: void uninstallCaCert(android.content.ComponentName,byte[])>
<android.app.admin.DevicePolicyManager: boolean updateOverrideApn(android.content.ComponentName,int,android.telephony.data.ApnSetting)>
<android.app.admin.DevicePolicyManager: void wipeData(int)>
<android.app.admin.DevicePolicyManager: void wipeData(int,java.lang.CharSequence)>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_ADD_DEVICE_ADMIN>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_ADMIN_POLICY_COMPLIANCE>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_CHECK_POLICY_COMPLIANCE>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_DEVICE_ADMIN_SERVICE>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_DEVICE_OWNER_CHANGED>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_DEVICE_POLICY_RESOURCE_UPDATED>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_GET_PROVISIONING_MODE>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_MANAGED_PROFILE_PROVISIONED>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_PROFILE_OWNER_CHANGED>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_PROVISIONING_SUCCESSFUL>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_PROVISION_MANAGED_DEVICE>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_PROVISION_MANAGED_PROFILE>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_SET_NEW_PARENT_PROFILE_PASSWORD>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_SET_NEW_PASSWORD>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_START_ENCRYPTION>
<android.app.admin.DevicePolicyManager: java.lang.String ACTION_SYSTEM_UPDATE_POLICY_CHANGED>
<android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_APP_RESTRICTIONS>
<android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_BLOCK_UNINSTALL>
<android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_CERT_INSTALL>
<android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_CERT_SELECTION>
<android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_ENABLE_SYSTEM_APP>
<android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_INSTALL_EXISTING_PACKAGE>
<android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_KEEP_UNINSTALLED_PACKAGES>
<android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_NETWORK_LOGGING>
<android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_PACKAGE_ACCESS>
<android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_PERMISSION_GRANT>
<android.app.admin.DevicePolicyManager: java.lang.String DELEGATION_SECURITY_LOGGING>
<android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_ACTIVATING>
<android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_ACTIVE>
<android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY>
<android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_ACTIVE_PER_USER>
<android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_INACTIVE>
<android.app.admin.DevicePolicyManager: int ENCRYPTION_STATUS_UNSUPPORTED>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_ADD_EXPLANATION>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_DELEGATION_SCOPES>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_DEVICE_ADMIN>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_DEVICE_PASSWORD_REQUIREMENT_ONLY>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PASSWORD_COMPLEXITY>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_ALLOWED_PROVISIONING_MODES>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_ALLOW_OFFLINE>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DISCLAIMERS>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DISCLAIMER_CONTENT>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_DISCLAIMER_HEADER>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_EMAIL_ADDRESS>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_IMEI>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_KEEP_SCREEN_ON>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_LOCALE>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_LOCAL_TIME>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_LOGO_URI>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_MAIN_COLOR>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_MODE>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_SENSORS_PERMISSION_GRANT_OPT_OUT>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_SERIAL_NUMBER>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_SHOULD_LAUNCH_RESULT_INTENT>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_SKIP_ENCRYPTION>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_SKIP_USER_CONSENT>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_TIME_ZONE>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_USE_MOBILE_DATA>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_DOMAIN>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_EAP_METHOD>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_HIDDEN>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_IDENTITY>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PAC_URL>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PASSWORD>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PHASE2_AUTH>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_BYPASS>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_HOST>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_PORT>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_SECURITY_TYPE>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_SSID>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_RESOURCE_IDS>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_RESOURCE_TYPE>
<android.app.admin.DevicePolicyManager: int EXTRA_RESOURCE_TYPE_DRAWABLE>
<android.app.admin.DevicePolicyManager: int EXTRA_RESOURCE_TYPE_STRING>
<android.app.admin.DevicePolicyManager: java.lang.String EXTRA_RESULT_LAUNCH_INTENT>
<android.app.admin.DevicePolicyManager: int FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY>
<android.app.admin.DevicePolicyManager: int FLAG_MANAGED_CAN_ACCESS_PARENT>
<android.app.admin.DevicePolicyManager: int FLAG_PARENT_CAN_ACCESS_MANAGED>
<android.app.admin.DevicePolicyManager: int ID_TYPE_BASE_INFO>
<android.app.admin.DevicePolicyManager: int ID_TYPE_IMEI>
<android.app.admin.DevicePolicyManager: int ID_TYPE_INDIVIDUAL_ATTESTATION>
<android.app.admin.DevicePolicyManager: int ID_TYPE_MEID>
<android.app.admin.DevicePolicyManager: int ID_TYPE_SERIAL>
<android.app.admin.DevicePolicyManager: int INSTALLKEY_REQUEST_CREDENTIALS_ACCESS>
<android.app.admin.DevicePolicyManager: int INSTALLKEY_SET_USER_SELECTABLE>
<android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_BIOMETRICS>
<android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_FACE>
<android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_FEATURES_ALL>
<android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_FEATURES_NONE>
<android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_FINGERPRINT>
<android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_IRIS>
<android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_REMOTE_INPUT>
<android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_SECURE_CAMERA>
<android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_SECURE_NOTIFICATIONS>
<android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_TRUST_AGENTS>
<android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS>
<android.app.admin.DevicePolicyManager: int KEYGUARD_DISABLE_WIDGETS_ALL>
<android.app.admin.DevicePolicyManager: int LEAVE_ALL_SYSTEM_APPS_ENABLED>
<android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_BLOCK_ACTIVITY_START_IN_TASK>
<android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_GLOBAL_ACTIONS>
<android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_HOME>
<android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_KEYGUARD>
<android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_NONE>
<android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_NOTIFICATIONS>
<android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_OVERVIEW>
<android.app.admin.DevicePolicyManager: int LOCK_TASK_FEATURE_SYSTEM_INFO>
<android.app.admin.DevicePolicyManager: int MAKE_USER_EPHEMERAL>
<android.app.admin.DevicePolicyManager: java.lang.String MIME_TYPE_PROVISIONING_NFC>
<android.app.admin.DevicePolicyManager: int NEARBY_STREAMING_DISABLED>
<android.app.admin.DevicePolicyManager: int NEARBY_STREAMING_ENABLED>
<android.app.admin.DevicePolicyManager: int NEARBY_STREAMING_NOT_CONTROLLED_BY_POLICY>
<android.app.admin.DevicePolicyManager: int NEARBY_STREAMING_SAME_MANAGED_ACCOUNT_ONLY>
<android.app.admin.DevicePolicyManager: int OPERATION_SAFETY_REASON_DRIVING_DISTRACTION>
<android.app.admin.DevicePolicyManager: int PASSWORD_COMPLEXITY_HIGH>
<android.app.admin.DevicePolicyManager: int PASSWORD_COMPLEXITY_LOW>
<android.app.admin.DevicePolicyManager: int PASSWORD_COMPLEXITY_MEDIUM>
<android.app.admin.DevicePolicyManager: int PASSWORD_COMPLEXITY_NONE>
<android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_ALPHABETIC>
<android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_ALPHANUMERIC>
<android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_BIOMETRIC_WEAK>
<android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_COMPLEX>
<android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_NUMERIC>
<android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_NUMERIC_COMPLEX>
<android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_SOMETHING>
<android.app.admin.DevicePolicyManager: int PASSWORD_QUALITY_UNSPECIFIED>
<android.app.admin.DevicePolicyManager: int PERMISSION_GRANT_STATE_DEFAULT>
<android.app.admin.DevicePolicyManager: int PERMISSION_GRANT_STATE_DENIED>
<android.app.admin.DevicePolicyManager: int PERMISSION_GRANT_STATE_GRANTED>
<android.app.admin.DevicePolicyManager: int PERMISSION_POLICY_AUTO_DENY>
<android.app.admin.DevicePolicyManager: int PERMISSION_POLICY_AUTO_GRANT>
<android.app.admin.DevicePolicyManager: int PERMISSION_POLICY_PROMPT>
<android.app.admin.DevicePolicyManager: int PERSONAL_APPS_NOT_SUSPENDED>
<android.app.admin.DevicePolicyManager: int PERSONAL_APPS_SUSPENDED_EXPLICITLY>
<android.app.admin.DevicePolicyManager: int PERSONAL_APPS_SUSPENDED_PROFILE_TIMEOUT>
<android.app.admin.DevicePolicyManager: java.lang.String POLICY_DISABLE_CAMERA>
<android.app.admin.DevicePolicyManager: java.lang.String POLICY_DISABLE_SCREEN_CAPTURE>
<android.app.admin.DevicePolicyManager: int PRIVATE_DNS_MODE_OFF>
<android.app.admin.DevicePolicyManager: int PRIVATE_DNS_MODE_OPPORTUNISTIC>
<android.app.admin.DevicePolicyManager: int PRIVATE_DNS_MODE_PROVIDER_HOSTNAME>
<android.app.admin.DevicePolicyManager: int PRIVATE_DNS_MODE_UNKNOWN>
<android.app.admin.DevicePolicyManager: int PRIVATE_DNS_SET_ERROR_FAILURE_SETTING>
<android.app.admin.DevicePolicyManager: int PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING>
<android.app.admin.DevicePolicyManager: int PRIVATE_DNS_SET_NO_ERROR>
<android.app.admin.DevicePolicyManager: int PROVISIONING_MODE_FULLY_MANAGED_DEVICE>
<android.app.admin.DevicePolicyManager: int PROVISIONING_MODE_MANAGED_PROFILE>
<android.app.admin.DevicePolicyManager: int PROVISIONING_MODE_MANAGED_PROFILE_ON_PERSONAL_DEVICE>
<android.app.admin.DevicePolicyManager: int RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT>
<android.app.admin.DevicePolicyManager: int RESET_PASSWORD_REQUIRE_ENTRY>
<android.app.admin.DevicePolicyManager: int SKIP_SETUP_WIZARD>
<android.app.admin.DevicePolicyManager: int WIFI_SECURITY_ENTERPRISE_192>
<android.app.admin.DevicePolicyManager: int WIFI_SECURITY_ENTERPRISE_EAP>
<android.app.admin.DevicePolicyManager: int WIFI_SECURITY_OPEN>
<android.app.admin.DevicePolicyManager: int WIFI_SECURITY_PERSONAL>
<android.app.admin.DevicePolicyManager: int WIPE_EUICC>
<android.app.admin.DevicePolicyManager: int WIPE_EXTERNAL_STORAGE>
<android.app.admin.DevicePolicyManager: int WIPE_RESET_PROTECTION_DATA>
<android.app.admin.DevicePolicyManager: int WIPE_SILENTLY>
android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback
<android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback: void <init>()>
<android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback: void onInstallUpdateError(int,java.lang.String)>
<android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback: int UPDATE_ERROR_BATTERY_LOW>
<android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback: int UPDATE_ERROR_FILE_NOT_FOUND>
<android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback: int UPDATE_ERROR_INCORRECT_OS_VERSION>
<android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback: int UPDATE_ERROR_UNKNOWN>
<android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback: int UPDATE_ERROR_UPDATE_FILE_INVALID>
android.app.admin.DevicePolicyManager$OnClearApplicationUserDataListener
<android.app.admin.DevicePolicyManager$OnClearApplicationUserDataListener: void onApplicationUserDataCleared(java.lang.String,boolean)>
android.app.admin.DevicePolicyResources
<android.app.admin.DevicePolicyResources: java.lang.String UNDEFINED>
android.app.admin.DevicePolicyResourcesManager
<android.app.admin.DevicePolicyResourcesManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,java.lang.String,java.util.function.Supplier)>
<android.app.admin.DevicePolicyResourcesManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,java.lang.String,java.lang.String,java.util.function.Supplier)>
<android.app.admin.DevicePolicyResourcesManager: android.graphics.drawable.Icon getDrawableAsIcon(java.lang.String,java.lang.String,java.lang.String,android.graphics.drawable.Icon)>
<android.app.admin.DevicePolicyResourcesManager: android.graphics.drawable.Icon getDrawableAsIcon(java.lang.String,java.lang.String,android.graphics.drawable.Icon)>
<android.app.admin.DevicePolicyResourcesManager: android.graphics.drawable.Drawable getDrawableForDensity(java.lang.String,java.lang.String,int,java.util.function.Supplier)>
<android.app.admin.DevicePolicyResourcesManager: android.graphics.drawable.Drawable getDrawableForDensity(java.lang.String,java.lang.String,java.lang.String,int,java.util.function.Supplier)>
<android.app.admin.DevicePolicyResourcesManager: java.lang.String getString(java.lang.String,java.util.function.Supplier)>
<android.app.admin.DevicePolicyResourcesManager: java.lang.String getString(java.lang.String,java.util.function.Supplier,java.lang.Object[])>
android.app.admin.DnsEvent
<android.app.admin.DnsEvent: java.lang.String getHostname()>
<android.app.admin.DnsEvent: java.util.List getInetAddresses()>
<android.app.admin.DnsEvent: int getTotalResolvedAddressCount()>
<android.app.admin.DnsEvent: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.DnsEvent: android.os.Parcelable$Creator CREATOR>
android.app.admin.FactoryResetProtectionPolicy
<android.app.admin.FactoryResetProtectionPolicy: int describeContents()>
<android.app.admin.FactoryResetProtectionPolicy: java.util.List getFactoryResetProtectionAccounts()>
<android.app.admin.FactoryResetProtectionPolicy: boolean isFactoryResetProtectionEnabled()>
<android.app.admin.FactoryResetProtectionPolicy: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.FactoryResetProtectionPolicy: android.os.Parcelable$Creator CREATOR>
android.app.admin.FactoryResetProtectionPolicy$Builder
<android.app.admin.FactoryResetProtectionPolicy$Builder: void <init>()>
<android.app.admin.FactoryResetProtectionPolicy$Builder: android.app.admin.FactoryResetProtectionPolicy build()>
<android.app.admin.FactoryResetProtectionPolicy$Builder: android.app.admin.FactoryResetProtectionPolicy$Builder setFactoryResetProtectionAccounts(java.util.List)>
<android.app.admin.FactoryResetProtectionPolicy$Builder: android.app.admin.FactoryResetProtectionPolicy$Builder setFactoryResetProtectionEnabled(boolean)>
android.app.admin.FreezePeriod
<android.app.admin.FreezePeriod: void <init>(java.time.MonthDay,java.time.MonthDay)>
<android.app.admin.FreezePeriod: java.time.MonthDay getEnd()>
<android.app.admin.FreezePeriod: java.time.MonthDay getStart()>
android.app.admin.NetworkEvent
<android.app.admin.NetworkEvent: int describeContents()>
<android.app.admin.NetworkEvent: long getId()>
<android.app.admin.NetworkEvent: java.lang.String getPackageName()>
<android.app.admin.NetworkEvent: long getTimestamp()>
<android.app.admin.NetworkEvent: android.os.Parcelable$Creator CREATOR>
android.app.admin.PreferentialNetworkServiceConfig
<android.app.admin.PreferentialNetworkServiceConfig: int describeContents()>
<android.app.admin.PreferentialNetworkServiceConfig: int[] getExcludedUids()>
<android.app.admin.PreferentialNetworkServiceConfig: int[] getIncludedUids()>
<android.app.admin.PreferentialNetworkServiceConfig: int getNetworkId()>
<android.app.admin.PreferentialNetworkServiceConfig: boolean isEnabled()>
<android.app.admin.PreferentialNetworkServiceConfig: boolean isFallbackToDefaultConnectionAllowed()>
<android.app.admin.PreferentialNetworkServiceConfig: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.PreferentialNetworkServiceConfig: android.os.Parcelable$Creator CREATOR>
<android.app.admin.PreferentialNetworkServiceConfig: int PREFERENTIAL_NETWORK_ID_1>
<android.app.admin.PreferentialNetworkServiceConfig: int PREFERENTIAL_NETWORK_ID_2>
<android.app.admin.PreferentialNetworkServiceConfig: int PREFERENTIAL_NETWORK_ID_3>
<android.app.admin.PreferentialNetworkServiceConfig: int PREFERENTIAL_NETWORK_ID_4>
<android.app.admin.PreferentialNetworkServiceConfig: int PREFERENTIAL_NETWORK_ID_5>
android.app.admin.PreferentialNetworkServiceConfig$Builder
<android.app.admin.PreferentialNetworkServiceConfig$Builder: void <init>()>
<android.app.admin.PreferentialNetworkServiceConfig$Builder: android.app.admin.PreferentialNetworkServiceConfig build()>
<android.app.admin.PreferentialNetworkServiceConfig$Builder: android.app.admin.PreferentialNetworkServiceConfig$Builder setEnabled(boolean)>
<android.app.admin.PreferentialNetworkServiceConfig$Builder: android.app.admin.PreferentialNetworkServiceConfig$Builder setExcludedUids(int[])>
<android.app.admin.PreferentialNetworkServiceConfig$Builder: android.app.admin.PreferentialNetworkServiceConfig$Builder setFallbackToDefaultConnectionAllowed(boolean)>
<android.app.admin.PreferentialNetworkServiceConfig$Builder: android.app.admin.PreferentialNetworkServiceConfig$Builder setIncludedUids(int[])>
<android.app.admin.PreferentialNetworkServiceConfig$Builder: android.app.admin.PreferentialNetworkServiceConfig$Builder setNetworkId(int)>
android.app.admin.SecurityLog
<android.app.admin.SecurityLog: void <init>()>
<android.app.admin.SecurityLog: int LEVEL_ERROR>
<android.app.admin.SecurityLog: int LEVEL_INFO>
<android.app.admin.SecurityLog: int LEVEL_WARNING>
<android.app.admin.SecurityLog: int TAG_ADB_SHELL_CMD>
<android.app.admin.SecurityLog: int TAG_ADB_SHELL_INTERACTIVE>
<android.app.admin.SecurityLog: int TAG_APP_PROCESS_START>
<android.app.admin.SecurityLog: int TAG_BLUETOOTH_CONNECTION>
<android.app.admin.SecurityLog: int TAG_BLUETOOTH_DISCONNECTION>
<android.app.admin.SecurityLog: int TAG_CAMERA_POLICY_SET>
<android.app.admin.SecurityLog: int TAG_CERT_AUTHORITY_INSTALLED>
<android.app.admin.SecurityLog: int TAG_CERT_AUTHORITY_REMOVED>
<android.app.admin.SecurityLog: int TAG_CERT_VALIDATION_FAILURE>
<android.app.admin.SecurityLog: int TAG_CRYPTO_SELF_TEST_COMPLETED>
<android.app.admin.SecurityLog: int TAG_KEYGUARD_DISABLED_FEATURES_SET>
<android.app.admin.SecurityLog: int TAG_KEYGUARD_DISMISSED>
<android.app.admin.SecurityLog: int TAG_KEYGUARD_DISMISS_AUTH_ATTEMPT>
<android.app.admin.SecurityLog: int TAG_KEYGUARD_SECURED>
<android.app.admin.SecurityLog: int TAG_KEY_DESTRUCTION>
<android.app.admin.SecurityLog: int TAG_KEY_GENERATED>
<android.app.admin.SecurityLog: int TAG_KEY_IMPORT>
<android.app.admin.SecurityLog: int TAG_KEY_INTEGRITY_VIOLATION>
<android.app.admin.SecurityLog: int TAG_LOGGING_STARTED>
<android.app.admin.SecurityLog: int TAG_LOGGING_STOPPED>
<android.app.admin.SecurityLog: int TAG_LOG_BUFFER_SIZE_CRITICAL>
<android.app.admin.SecurityLog: int TAG_MAX_PASSWORD_ATTEMPTS_SET>
<android.app.admin.SecurityLog: int TAG_MAX_SCREEN_LOCK_TIMEOUT_SET>
<android.app.admin.SecurityLog: int TAG_MEDIA_MOUNT>
<android.app.admin.SecurityLog: int TAG_MEDIA_UNMOUNT>
<android.app.admin.SecurityLog: int TAG_OS_SHUTDOWN>
<android.app.admin.SecurityLog: int TAG_OS_STARTUP>
<android.app.admin.SecurityLog: int TAG_PASSWORD_CHANGED>
<android.app.admin.SecurityLog: int TAG_PASSWORD_COMPLEXITY_REQUIRED>
<android.app.admin.SecurityLog: int TAG_PASSWORD_COMPLEXITY_SET>
<android.app.admin.SecurityLog: int TAG_PASSWORD_EXPIRATION_SET>
<android.app.admin.SecurityLog: int TAG_PASSWORD_HISTORY_LENGTH_SET>
<android.app.admin.SecurityLog: int TAG_REMOTE_LOCK>
<android.app.admin.SecurityLog: int TAG_SYNC_RECV_FILE>
<android.app.admin.SecurityLog: int TAG_SYNC_SEND_FILE>
<android.app.admin.SecurityLog: int TAG_USER_RESTRICTION_ADDED>
<android.app.admin.SecurityLog: int TAG_USER_RESTRICTION_REMOVED>
<android.app.admin.SecurityLog: int TAG_WIFI_CONNECTION>
<android.app.admin.SecurityLog: int TAG_WIFI_DISCONNECTION>
<android.app.admin.SecurityLog: int TAG_WIPE_FAILURE>
android.app.admin.SecurityLog$SecurityEvent
<android.app.admin.SecurityLog$SecurityEvent: int describeContents()>
<android.app.admin.SecurityLog$SecurityEvent: java.lang.Object getData()>
<android.app.admin.SecurityLog$SecurityEvent: long getId()>
<android.app.admin.SecurityLog$SecurityEvent: int getLogLevel()>
<android.app.admin.SecurityLog$SecurityEvent: int getTag()>
<android.app.admin.SecurityLog$SecurityEvent: long getTimeNanos()>
<android.app.admin.SecurityLog$SecurityEvent: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.SecurityLog$SecurityEvent: android.os.Parcelable$Creator CREATOR>
android.app.admin.SystemUpdateInfo
<android.app.admin.SystemUpdateInfo: int describeContents()>
<android.app.admin.SystemUpdateInfo: long getReceivedTime()>
<android.app.admin.SystemUpdateInfo: int getSecurityPatchState()>
<android.app.admin.SystemUpdateInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.SystemUpdateInfo: android.os.Parcelable$Creator CREATOR>
<android.app.admin.SystemUpdateInfo: int SECURITY_PATCH_STATE_FALSE>
<android.app.admin.SystemUpdateInfo: int SECURITY_PATCH_STATE_TRUE>
<android.app.admin.SystemUpdateInfo: int SECURITY_PATCH_STATE_UNKNOWN>
android.app.admin.SystemUpdatePolicy
<android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy createAutomaticInstallPolicy()>
<android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy createPostponeInstallPolicy()>
<android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy createWindowedInstallPolicy(int,int)>
<android.app.admin.SystemUpdatePolicy: int describeContents()>
<android.app.admin.SystemUpdatePolicy: java.util.List getFreezePeriods()>
<android.app.admin.SystemUpdatePolicy: int getInstallWindowEnd()>
<android.app.admin.SystemUpdatePolicy: int getInstallWindowStart()>
<android.app.admin.SystemUpdatePolicy: int getPolicyType()>
<android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy setFreezePeriods(java.util.List)>
<android.app.admin.SystemUpdatePolicy: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.SystemUpdatePolicy: android.os.Parcelable$Creator CREATOR>
<android.app.admin.SystemUpdatePolicy: int TYPE_INSTALL_AUTOMATIC>
<android.app.admin.SystemUpdatePolicy: int TYPE_INSTALL_WINDOWED>
<android.app.admin.SystemUpdatePolicy: int TYPE_POSTPONE>
android.app.admin.SystemUpdatePolicy$ValidationFailedException
<android.app.admin.SystemUpdatePolicy$ValidationFailedException: int describeContents()>
<android.app.admin.SystemUpdatePolicy$ValidationFailedException: int getErrorCode()>
<android.app.admin.SystemUpdatePolicy$ValidationFailedException: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.SystemUpdatePolicy$ValidationFailedException: android.os.Parcelable$Creator CREATOR>
<android.app.admin.SystemUpdatePolicy$ValidationFailedException: int ERROR_COMBINED_FREEZE_PERIOD_TOO_CLOSE>
<android.app.admin.SystemUpdatePolicy$ValidationFailedException: int ERROR_COMBINED_FREEZE_PERIOD_TOO_LONG>
<android.app.admin.SystemUpdatePolicy$ValidationFailedException: int ERROR_DUPLICATE_OR_OVERLAP>
<android.app.admin.SystemUpdatePolicy$ValidationFailedException: int ERROR_NEW_FREEZE_PERIOD_TOO_CLOSE>
<android.app.admin.SystemUpdatePolicy$ValidationFailedException: int ERROR_NEW_FREEZE_PERIOD_TOO_LONG>
<android.app.admin.SystemUpdatePolicy$ValidationFailedException: int ERROR_UNKNOWN>
android.app.admin.UnsafeStateException
<android.app.admin.UnsafeStateException: int describeContents()>
<android.app.admin.UnsafeStateException: java.util.List getReasons()>
<android.app.admin.UnsafeStateException: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.UnsafeStateException: android.os.Parcelable$Creator CREATOR>
android.app.admin.WifiSsidPolicy
<android.app.admin.WifiSsidPolicy: void <init>(int,java.util.Set)>
<android.app.admin.WifiSsidPolicy: int describeContents()>
<android.app.admin.WifiSsidPolicy: int getPolicyType()>
<android.app.admin.WifiSsidPolicy: java.util.Set getSsids()>
<android.app.admin.WifiSsidPolicy: void writeToParcel(android.os.Parcel,int)>
<android.app.admin.WifiSsidPolicy: android.os.Parcelable$Creator CREATOR>
<android.app.admin.WifiSsidPolicy: int WIFI_SSID_POLICY_TYPE_ALLOWLIST>
<android.app.admin.WifiSsidPolicy: int WIFI_SSID_POLICY_TYPE_DENYLIST>
android.app.assist.AssistContent
<android.app.assist.AssistContent: void <init>()>
<android.app.assist.AssistContent: int describeContents()>
<android.app.assist.AssistContent: android.content.ClipData getClipData()>
<android.app.assist.AssistContent: android.os.Bundle getExtras()>
<android.app.assist.AssistContent: android.content.Intent getIntent()>
<android.app.assist.AssistContent: java.lang.String getStructuredData()>
<android.app.assist.AssistContent: android.net.Uri getWebUri()>
<android.app.assist.AssistContent: boolean isAppProvidedIntent()>
<android.app.assist.AssistContent: boolean isAppProvidedWebUri()>
<android.app.assist.AssistContent: void setClipData(android.content.ClipData)>
<android.app.assist.AssistContent: void setIntent(android.content.Intent)>
<android.app.assist.AssistContent: void setStructuredData(java.lang.String)>
<android.app.assist.AssistContent: void setWebUri(android.net.Uri)>
<android.app.assist.AssistContent: void writeToParcel(android.os.Parcel,int)>
<android.app.assist.AssistContent: android.os.Parcelable$Creator CREATOR>
android.app.assist.AssistStructure
<android.app.assist.AssistStructure: void <init>()>
<android.app.assist.AssistStructure: int describeContents()>
<android.app.assist.AssistStructure: long getAcquisitionEndTime()>
<android.app.assist.AssistStructure: long getAcquisitionStartTime()>
<android.app.assist.AssistStructure: android.content.ComponentName getActivityComponent()>
<android.app.assist.AssistStructure: android.app.assist.AssistStructure$WindowNode getWindowNodeAt(int)>
<android.app.assist.AssistStructure: int getWindowNodeCount()>
<android.app.assist.AssistStructure: boolean isHomeActivity()>
<android.app.assist.AssistStructure: void writeToParcel(android.os.Parcel,int)>
<android.app.assist.AssistStructure: android.os.Parcelable$Creator CREATOR>
android.app.assist.AssistStructure$ViewNode
<android.app.assist.AssistStructure$ViewNode: float getAlpha()>
<android.app.assist.AssistStructure$ViewNode: java.lang.String[] getAutofillHints()>
<android.app.assist.AssistStructure$ViewNode: android.view.autofill.AutofillId getAutofillId()>
<android.app.assist.AssistStructure$ViewNode: java.lang.CharSequence[] getAutofillOptions()>
<android.app.assist.AssistStructure$ViewNode: int getAutofillType()>
<android.app.assist.AssistStructure$ViewNode: android.view.autofill.AutofillValue getAutofillValue()>
<android.app.assist.AssistStructure$ViewNode: android.app.assist.AssistStructure$ViewNode getChildAt(int)>
<android.app.assist.AssistStructure$ViewNode: int getChildCount()>
<android.app.assist.AssistStructure$ViewNode: java.lang.String getClassName()>
<android.app.assist.AssistStructure$ViewNode: java.lang.CharSequence getContentDescription()>
<android.app.assist.AssistStructure$ViewNode: float getElevation()>
<android.app.assist.AssistStructure$ViewNode: android.os.Bundle getExtras()>
<android.app.assist.AssistStructure$ViewNode: int getHeight()>
<android.app.assist.AssistStructure$ViewNode: java.lang.String getHint()>
<android.app.assist.AssistStructure$ViewNode: java.lang.String getHintIdEntry()>
<android.app.assist.AssistStructure$ViewNode: android.view.ViewStructure$HtmlInfo getHtmlInfo()>
<android.app.assist.AssistStructure$ViewNode: int getId()>
<android.app.assist.AssistStructure$ViewNode: java.lang.String getIdEntry()>
<android.app.assist.AssistStructure$ViewNode: java.lang.String getIdPackage()>
<android.app.assist.AssistStructure$ViewNode: java.lang.String getIdType()>
<android.app.assist.AssistStructure$ViewNode: int getImportantForAutofill()>
<android.app.assist.AssistStructure$ViewNode: int getInputType()>
<android.app.assist.AssistStructure$ViewNode: int getLeft()>
<android.app.assist.AssistStructure$ViewNode: android.os.LocaleList getLocaleList()>
<android.app.assist.AssistStructure$ViewNode: int getMaxTextEms()>
<android.app.assist.AssistStructure$ViewNode: int getMaxTextLength()>
<android.app.assist.AssistStructure$ViewNode: int getMinTextEms()>
<android.app.assist.AssistStructure$ViewNode: java.lang.String[] getReceiveContentMimeTypes()>
<android.app.assist.AssistStructure$ViewNode: int getScrollX()>
<android.app.assist.AssistStructure$ViewNode: int getScrollY()>
<android.app.assist.AssistStructure$ViewNode: java.lang.CharSequence getText()>
<android.app.assist.AssistStructure$ViewNode: int getTextBackgroundColor()>
<android.app.assist.AssistStructure$ViewNode: int getTextColor()>
<android.app.assist.AssistStructure$ViewNode: java.lang.String getTextIdEntry()>
<android.app.assist.AssistStructure$ViewNode: int[] getTextLineBaselines()>
<android.app.assist.AssistStructure$ViewNode: int[] getTextLineCharOffsets()>
<android.app.assist.AssistStructure$ViewNode: int getTextSelectionEnd()>
<android.app.assist.AssistStructure$ViewNode: int getTextSelectionStart()>
<android.app.assist.AssistStructure$ViewNode: float getTextSize()>
<android.app.assist.AssistStructure$ViewNode: int getTextStyle()>
<android.app.assist.AssistStructure$ViewNode: int getTop()>
<android.app.assist.AssistStructure$ViewNode: android.graphics.Matrix getTransformation()>
<android.app.assist.AssistStructure$ViewNode: int getVisibility()>
<android.app.assist.AssistStructure$ViewNode: java.lang.String getWebDomain()>
<android.app.assist.AssistStructure$ViewNode: java.lang.String getWebScheme()>
<android.app.assist.AssistStructure$ViewNode: int getWidth()>
<android.app.assist.AssistStructure$ViewNode: boolean isAccessibilityFocused()>
<android.app.assist.AssistStructure$ViewNode: boolean isActivated()>
<android.app.assist.AssistStructure$ViewNode: boolean isAssistBlocked()>
<android.app.assist.AssistStructure$ViewNode: boolean isCheckable()>
<android.app.assist.AssistStructure$ViewNode: boolean isChecked()>
<android.app.assist.AssistStructure$ViewNode: boolean isClickable()>
<android.app.assist.AssistStructure$ViewNode: boolean isContextClickable()>
<android.app.assist.AssistStructure$ViewNode: boolean isEnabled()>
<android.app.assist.AssistStructure$ViewNode: boolean isFocusable()>
<android.app.assist.AssistStructure$ViewNode: boolean isFocused()>
<android.app.assist.AssistStructure$ViewNode: boolean isLongClickable()>
<android.app.assist.AssistStructure$ViewNode: boolean isOpaque()>
<android.app.assist.AssistStructure$ViewNode: boolean isSelected()>
<android.app.assist.AssistStructure$ViewNode: int TEXT_COLOR_UNDEFINED>
<android.app.assist.AssistStructure$ViewNode: int TEXT_STYLE_BOLD>
<android.app.assist.AssistStructure$ViewNode: int TEXT_STYLE_ITALIC>
<android.app.assist.AssistStructure$ViewNode: int TEXT_STYLE_STRIKE_THRU>
<android.app.assist.AssistStructure$ViewNode: int TEXT_STYLE_UNDERLINE>
android.app.assist.AssistStructure$WindowNode
<android.app.assist.AssistStructure$WindowNode: int getDisplayId()>
<android.app.assist.AssistStructure$WindowNode: int getHeight()>
<android.app.assist.AssistStructure$WindowNode: int getLeft()>
<android.app.assist.AssistStructure$WindowNode: android.app.assist.AssistStructure$ViewNode getRootViewNode()>
<android.app.assist.AssistStructure$WindowNode: java.lang.CharSequence getTitle()>
<android.app.assist.AssistStructure$WindowNode: int getTop()>
<android.app.assist.AssistStructure$WindowNode: int getWidth()>
android.app.backup.BackupAgent
<android.app.backup.BackupAgent: void <init>()>
<android.app.backup.BackupAgent: void fullBackupFile(java.io.File,android.app.backup.FullBackupDataOutput)>
<android.app.backup.BackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.app.backup.BackupAgent: void onCreate()>
<android.app.backup.BackupAgent: void onDestroy()>
<android.app.backup.BackupAgent: void onFullBackup(android.app.backup.FullBackupDataOutput)>
<android.app.backup.BackupAgent: void onQuotaExceeded(long,long)>
<android.app.backup.BackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>
<android.app.backup.BackupAgent: void onRestore(android.app.backup.BackupDataInput,long,android.os.ParcelFileDescriptor)>
<android.app.backup.BackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,java.io.File,int,long,long)>
<android.app.backup.BackupAgent: void onRestoreFinished()>
<android.app.backup.BackupAgent: int FLAG_CLIENT_SIDE_ENCRYPTION_ENABLED>
<android.app.backup.BackupAgent: int FLAG_DEVICE_TO_DEVICE_TRANSFER>
<android.app.backup.BackupAgent: int TYPE_DIRECTORY>
<android.app.backup.BackupAgent: int TYPE_FILE>
android.app.backup.BackupAgentHelper
<android.app.backup.BackupAgentHelper: void <init>()>
<android.app.backup.BackupAgentHelper: void addHelper(java.lang.String,android.app.backup.BackupHelper)>
<android.app.backup.BackupAgentHelper: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.app.backup.BackupAgentHelper: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>
android.app.backup.BackupDataInput
<android.app.backup.BackupDataInput: int getDataSize()>
<android.app.backup.BackupDataInput: java.lang.String getKey()>
<android.app.backup.BackupDataInput: int readEntityData(byte[],int,int)>
<android.app.backup.BackupDataInput: boolean readNextHeader()>
<android.app.backup.BackupDataInput: void skipEntityData()>
android.app.backup.BackupDataInputStream
<android.app.backup.BackupDataInputStream: java.lang.String getKey()>
<android.app.backup.BackupDataInputStream: int read()>
<android.app.backup.BackupDataInputStream: int size()>
android.app.backup.BackupDataOutput
<android.app.backup.BackupDataOutput: long getQuota()>
<android.app.backup.BackupDataOutput: int getTransportFlags()>
<android.app.backup.BackupDataOutput: int writeEntityData(byte[],int)>
<android.app.backup.BackupDataOutput: int writeEntityHeader(java.lang.String,int)>
android.app.backup.BackupHelper
<android.app.backup.BackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.app.backup.BackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)>
<android.app.backup.BackupHelper: void writeNewStateDescription(android.os.ParcelFileDescriptor)>
android.app.backup.BackupManager
<android.app.backup.BackupManager: void <init>(android.content.Context)>
<android.app.backup.BackupManager: void dataChanged()>
<android.app.backup.BackupManager: void dataChanged(java.lang.String)>
<android.app.backup.BackupManager: android.os.UserHandle getUserForAncestralSerialNumber(long)>
<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver)>
android.app.backup.FileBackupHelper
<android.app.backup.FileBackupHelper: void <init>(android.content.Context,java.lang.String[])>
<android.app.backup.FileBackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.app.backup.FileBackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)>
<android.app.backup.FileBackupHelper: void writeNewStateDescription(android.os.ParcelFileDescriptor)>
android.app.backup.FullBackupDataOutput
<android.app.backup.FullBackupDataOutput: long getQuota()>
<android.app.backup.FullBackupDataOutput: int getTransportFlags()>
android.app.backup.RestoreObserver
<android.app.backup.RestoreObserver: void <init>()>
<android.app.backup.RestoreObserver: void onUpdate(int,java.lang.String)>
<android.app.backup.RestoreObserver: void restoreFinished(int)>
<android.app.backup.RestoreObserver: void restoreStarting(int)>
android.app.backup.SharedPreferencesBackupHelper
<android.app.backup.SharedPreferencesBackupHelper: void <init>(android.content.Context,java.lang.String[])>
<android.app.backup.SharedPreferencesBackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.app.backup.SharedPreferencesBackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)>
<android.app.backup.SharedPreferencesBackupHelper: void writeNewStateDescription(android.os.ParcelFileDescriptor)>
android.app.blob.BlobHandle
<android.app.blob.BlobHandle: android.app.blob.BlobHandle createWithSha256(byte[],java.lang.CharSequence,long,java.lang.String)>
<android.app.blob.BlobHandle: int describeContents()>
<android.app.blob.BlobHandle: long getExpiryTimeMillis()>
<android.app.blob.BlobHandle: java.lang.CharSequence getLabel()>
<android.app.blob.BlobHandle: byte[] getSha256Digest()>
<android.app.blob.BlobHandle: java.lang.String getTag()>
<android.app.blob.BlobHandle: void writeToParcel(android.os.Parcel,int)>
<android.app.blob.BlobHandle: android.os.Parcelable$Creator CREATOR>
android.app.blob.BlobStoreManager
<android.app.blob.BlobStoreManager: void abandonSession(long)>
<android.app.blob.BlobStoreManager: void acquireLease(android.app.blob.BlobHandle,int,long)>
<android.app.blob.BlobStoreManager: void acquireLease(android.app.blob.BlobHandle,java.lang.CharSequence,long)>
<android.app.blob.BlobStoreManager: void acquireLease(android.app.blob.BlobHandle,int)>
<android.app.blob.BlobStoreManager: void acquireLease(android.app.blob.BlobHandle,java.lang.CharSequence)>
<android.app.blob.BlobStoreManager: long createSession(android.app.blob.BlobHandle)>
<android.app.blob.BlobStoreManager: java.util.List getLeasedBlobs()>
<android.app.blob.BlobStoreManager: long getRemainingLeaseQuotaBytes()>
<android.app.blob.BlobStoreManager: android.os.ParcelFileDescriptor openBlob(android.app.blob.BlobHandle)>
<android.app.blob.BlobStoreManager: android.app.blob.BlobStoreManager$Session openSession(long)>
<android.app.blob.BlobStoreManager: void releaseLease(android.app.blob.BlobHandle)>
android.app.blob.BlobStoreManager$Session
<android.app.blob.BlobStoreManager$Session: void abandon()>
<android.app.blob.BlobStoreManager$Session: void allowPackageAccess(java.lang.String,byte[])>
<android.app.blob.BlobStoreManager$Session: void allowPublicAccess()>
<android.app.blob.BlobStoreManager$Session: void allowSameSignatureAccess()>
<android.app.blob.BlobStoreManager$Session: void close()>
<android.app.blob.BlobStoreManager$Session: void commit(java.util.concurrent.Executor,java.util.function.Consumer)>
<android.app.blob.BlobStoreManager$Session: long getSize()>
<android.app.blob.BlobStoreManager$Session: boolean isPackageAccessAllowed(java.lang.String,byte[])>
<android.app.blob.BlobStoreManager$Session: boolean isPublicAccessAllowed()>
<android.app.blob.BlobStoreManager$Session: boolean isSameSignatureAccessAllowed()>
<android.app.blob.BlobStoreManager$Session: android.os.ParcelFileDescriptor openRead()>
<android.app.blob.BlobStoreManager$Session: android.os.ParcelFileDescriptor openWrite(long,long)>
android.app.job.JobInfo
<android.app.job.JobInfo: int describeContents()>
<android.app.job.JobInfo: int getBackoffPolicy()>
<android.app.job.JobInfo: android.content.ClipData getClipData()>
<android.app.job.JobInfo: int getClipGrantFlags()>
<android.app.job.JobInfo: long getEstimatedNetworkDownloadBytes()>
<android.app.job.JobInfo: long getEstimatedNetworkUploadBytes()>
<android.app.job.JobInfo: android.os.PersistableBundle getExtras()>
<android.app.job.JobInfo: long getFlexMillis()>
<android.app.job.JobInfo: int getId()>
<android.app.job.JobInfo: long getInitialBackoffMillis()>
<android.app.job.JobInfo: long getIntervalMillis()>
<android.app.job.JobInfo: long getMaxExecutionDelayMillis()>
<android.app.job.JobInfo: long getMinFlexMillis()>
<android.app.job.JobInfo: long getMinLatencyMillis()>
<android.app.job.JobInfo: long getMinPeriodMillis()>
<android.app.job.JobInfo: long getMinimumNetworkChunkBytes()>
<android.app.job.JobInfo: int getNetworkType()>
<android.app.job.JobInfo: int getPriority()>
<android.app.job.JobInfo: android.net.NetworkRequest getRequiredNetwork()>
<android.app.job.JobInfo: android.content.ComponentName getService()>
<android.app.job.JobInfo: android.os.Bundle getTransientExtras()>
<android.app.job.JobInfo: long getTriggerContentMaxDelay()>
<android.app.job.JobInfo: long getTriggerContentUpdateDelay()>
<android.app.job.JobInfo: android.app.job.JobInfo$TriggerContentUri[] getTriggerContentUris()>
<android.app.job.JobInfo: boolean isExpedited()>
<android.app.job.JobInfo: boolean isImportantWhileForeground()>
<android.app.job.JobInfo: boolean isPeriodic()>
<android.app.job.JobInfo: boolean isPersisted()>
<android.app.job.JobInfo: boolean isPrefetch()>
<android.app.job.JobInfo: boolean isRequireBatteryNotLow()>
<android.app.job.JobInfo: boolean isRequireCharging()>
<android.app.job.JobInfo: boolean isRequireDeviceIdle()>
<android.app.job.JobInfo: boolean isRequireStorageNotLow()>
<android.app.job.JobInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.job.JobInfo: int BACKOFF_POLICY_EXPONENTIAL>
<android.app.job.JobInfo: int BACKOFF_POLICY_LINEAR>
<android.app.job.JobInfo: android.os.Parcelable$Creator CREATOR>
<android.app.job.JobInfo: long DEFAULT_INITIAL_BACKOFF_MILLIS>
<android.app.job.JobInfo: long MAX_BACKOFF_DELAY_MILLIS>
<android.app.job.JobInfo: int NETWORK_BYTES_UNKNOWN>
<android.app.job.JobInfo: int NETWORK_TYPE_ANY>
<android.app.job.JobInfo: int NETWORK_TYPE_CELLULAR>
<android.app.job.JobInfo: int NETWORK_TYPE_METERED>
<android.app.job.JobInfo: int NETWORK_TYPE_NONE>
<android.app.job.JobInfo: int NETWORK_TYPE_NOT_ROAMING>
<android.app.job.JobInfo: int NETWORK_TYPE_UNMETERED>
<android.app.job.JobInfo: int PRIORITY_DEFAULT>
<android.app.job.JobInfo: int PRIORITY_HIGH>
<android.app.job.JobInfo: int PRIORITY_LOW>
<android.app.job.JobInfo: int PRIORITY_MAX>
<android.app.job.JobInfo: int PRIORITY_MIN>
android.app.job.JobInfo$Builder
<android.app.job.JobInfo$Builder: void <init>(int,android.content.ComponentName)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder addTriggerContentUri(android.app.job.JobInfo$TriggerContentUri)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo build()>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setBackoffCriteria(long,int)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setClipData(android.content.ClipData,int)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setEstimatedNetworkBytes(long,long)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setExpedited(boolean)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setExtras(android.os.PersistableBundle)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setImportantWhileForeground(boolean)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setMinimumLatency(long)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setMinimumNetworkChunkBytes(long)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setOverrideDeadline(long)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setPeriodic(long)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setPeriodic(long,long)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setPersisted(boolean)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setPrefetch(boolean)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setPriority(int)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetwork(android.net.NetworkRequest)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetworkType(int)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresBatteryNotLow(boolean)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresCharging(boolean)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresDeviceIdle(boolean)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresStorageNotLow(boolean)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setTransientExtras(android.os.Bundle)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setTriggerContentMaxDelay(long)>
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setTriggerContentUpdateDelay(long)>
android.app.job.JobInfo$TriggerContentUri
<android.app.job.JobInfo$TriggerContentUri: void <init>(android.net.Uri,int)>
<android.app.job.JobInfo$TriggerContentUri: int describeContents()>
<android.app.job.JobInfo$TriggerContentUri: int getFlags()>
<android.app.job.JobInfo$TriggerContentUri: android.net.Uri getUri()>
<android.app.job.JobInfo$TriggerContentUri: void writeToParcel(android.os.Parcel,int)>
<android.app.job.JobInfo$TriggerContentUri: android.os.Parcelable$Creator CREATOR>
<android.app.job.JobInfo$TriggerContentUri: int FLAG_NOTIFY_FOR_DESCENDANTS>
android.app.job.JobParameters
<android.app.job.JobParameters: void completeWork(android.app.job.JobWorkItem)>
<android.app.job.JobParameters: android.app.job.JobWorkItem dequeueWork()>
<android.app.job.JobParameters: int describeContents()>
<android.app.job.JobParameters: android.content.ClipData getClipData()>
<android.app.job.JobParameters: int getClipGrantFlags()>
<android.app.job.JobParameters: android.os.PersistableBundle getExtras()>
<android.app.job.JobParameters: int getJobId()>
<android.app.job.JobParameters: android.net.Network getNetwork()>
<android.app.job.JobParameters: int getStopReason()>
<android.app.job.JobParameters: android.os.Bundle getTransientExtras()>
<android.app.job.JobParameters: java.lang.String[] getTriggeredContentAuthorities()>
<android.app.job.JobParameters: android.net.Uri[] getTriggeredContentUris()>
<android.app.job.JobParameters: boolean isExpeditedJob()>
<android.app.job.JobParameters: boolean isOverrideDeadlineExpired()>
<android.app.job.JobParameters: void writeToParcel(android.os.Parcel,int)>
<android.app.job.JobParameters: android.os.Parcelable$Creator CREATOR>
<android.app.job.JobParameters: int STOP_REASON_APP_STANDBY>
<android.app.job.JobParameters: int STOP_REASON_BACKGROUND_RESTRICTION>
<android.app.job.JobParameters: int STOP_REASON_CANCELLED_BY_APP>
<android.app.job.JobParameters: int STOP_REASON_CONSTRAINT_BATTERY_NOT_LOW>
<android.app.job.JobParameters: int STOP_REASON_CONSTRAINT_CHARGING>
<android.app.job.JobParameters: int STOP_REASON_CONSTRAINT_CONNECTIVITY>
<android.app.job.JobParameters: int STOP_REASON_CONSTRAINT_DEVICE_IDLE>
<android.app.job.JobParameters: int STOP_REASON_CONSTRAINT_STORAGE_NOT_LOW>
<android.app.job.JobParameters: int STOP_REASON_DEVICE_STATE>
<android.app.job.JobParameters: int STOP_REASON_ESTIMATED_APP_LAUNCH_TIME_CHANGED>
<android.app.job.JobParameters: int STOP_REASON_PREEMPT>
<android.app.job.JobParameters: int STOP_REASON_QUOTA>
<android.app.job.JobParameters: int STOP_REASON_SYSTEM_PROCESSING>
<android.app.job.JobParameters: int STOP_REASON_TIMEOUT>
<android.app.job.JobParameters: int STOP_REASON_UNDEFINED>
<android.app.job.JobParameters: int STOP_REASON_USER>
android.app.job.JobScheduler
<android.app.job.JobScheduler: void <init>()>
<android.app.job.JobScheduler: void cancel(int)>
<android.app.job.JobScheduler: void cancelAll()>
<android.app.job.JobScheduler: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
<android.app.job.JobScheduler: java.util.List getAllPendingJobs()>
<android.app.job.JobScheduler: android.app.job.JobInfo getPendingJob(int)>
<android.app.job.JobScheduler: int schedule(android.app.job.JobInfo)>
<android.app.job.JobScheduler: int RESULT_FAILURE>
<android.app.job.JobScheduler: int RESULT_SUCCESS>
android.app.job.JobService
<android.app.job.JobService: void <init>()>
<android.app.job.JobService: void jobFinished(android.app.job.JobParameters,boolean)>
<android.app.job.JobService: android.os.IBinder onBind(android.content.Intent)>
<android.app.job.JobService: boolean onStartJob(android.app.job.JobParameters)>
<android.app.job.JobService: boolean onStopJob(android.app.job.JobParameters)>
<android.app.job.JobService: java.lang.String PERMISSION_BIND>
android.app.job.JobServiceEngine
<android.app.job.JobServiceEngine: void <init>(android.app.Service)>
<android.app.job.JobServiceEngine: android.os.IBinder getBinder()>
<android.app.job.JobServiceEngine: void jobFinished(android.app.job.JobParameters,boolean)>
<android.app.job.JobServiceEngine: boolean onStartJob(android.app.job.JobParameters)>
<android.app.job.JobServiceEngine: boolean onStopJob(android.app.job.JobParameters)>
android.app.job.JobWorkItem
<android.app.job.JobWorkItem: void <init>(android.content.Intent)>
<android.app.job.JobWorkItem: void <init>(android.content.Intent,long,long)>
<android.app.job.JobWorkItem: void <init>(android.content.Intent,long,long,long)>
<android.app.job.JobWorkItem: int describeContents()>
<android.app.job.JobWorkItem: int getDeliveryCount()>
<android.app.job.JobWorkItem: long getEstimatedNetworkDownloadBytes()>
<android.app.job.JobWorkItem: long getEstimatedNetworkUploadBytes()>
<android.app.job.JobWorkItem: android.content.Intent getIntent()>
<android.app.job.JobWorkItem: long getMinimumNetworkChunkBytes()>
<android.app.job.JobWorkItem: void writeToParcel(android.os.Parcel,int)>
<android.app.job.JobWorkItem: android.os.Parcelable$Creator CREATOR>
android.app.people.ConversationStatus
<android.app.people.ConversationStatus: int describeContents()>
<android.app.people.ConversationStatus: int getActivity()>
<android.app.people.ConversationStatus: int getAvailability()>
<android.app.people.ConversationStatus: java.lang.CharSequence getDescription()>
<android.app.people.ConversationStatus: long getEndTimeMillis()>
<android.app.people.ConversationStatus: android.graphics.drawable.Icon getIcon()>
<android.app.people.ConversationStatus: java.lang.String getId()>
<android.app.people.ConversationStatus: long getStartTimeMillis()>
<android.app.people.ConversationStatus: void writeToParcel(android.os.Parcel,int)>
<android.app.people.ConversationStatus: int ACTIVITY_ANNIVERSARY>
<android.app.people.ConversationStatus: int ACTIVITY_AUDIO>
<android.app.people.ConversationStatus: int ACTIVITY_BIRTHDAY>
<android.app.people.ConversationStatus: int ACTIVITY_GAME>
<android.app.people.ConversationStatus: int ACTIVITY_LOCATION>
<android.app.people.ConversationStatus: int ACTIVITY_NEW_STORY>
<android.app.people.ConversationStatus: int ACTIVITY_OTHER>
<android.app.people.ConversationStatus: int ACTIVITY_UPCOMING_BIRTHDAY>
<android.app.people.ConversationStatus: int ACTIVITY_VIDEO>
<android.app.people.ConversationStatus: int AVAILABILITY_AVAILABLE>
<android.app.people.ConversationStatus: int AVAILABILITY_BUSY>
<android.app.people.ConversationStatus: int AVAILABILITY_OFFLINE>
<android.app.people.ConversationStatus: int AVAILABILITY_UNKNOWN>
<android.app.people.ConversationStatus: android.os.Parcelable$Creator CREATOR>
android.app.people.ConversationStatus$Builder
<android.app.people.ConversationStatus$Builder: void <init>(java.lang.String,int)>
<android.app.people.ConversationStatus$Builder: android.app.people.ConversationStatus build()>
<android.app.people.ConversationStatus$Builder: android.app.people.ConversationStatus$Builder setAvailability(int)>
<android.app.people.ConversationStatus$Builder: android.app.people.ConversationStatus$Builder setDescription(java.lang.CharSequence)>
<android.app.people.ConversationStatus$Builder: android.app.people.ConversationStatus$Builder setEndTimeMillis(long)>
<android.app.people.ConversationStatus$Builder: android.app.people.ConversationStatus$Builder setIcon(android.graphics.drawable.Icon)>
<android.app.people.ConversationStatus$Builder: android.app.people.ConversationStatus$Builder setStartTimeMillis(long)>
android.app.people.PeopleManager
<android.app.people.PeopleManager: void addOrUpdateStatus(java.lang.String,android.app.people.ConversationStatus)>
<android.app.people.PeopleManager: void clearStatus(java.lang.String,java.lang.String)>
<android.app.people.PeopleManager: void clearStatuses(java.lang.String)>
<android.app.people.PeopleManager: java.util.List getStatuses(java.lang.String)>
android.app.slice.Slice
<android.app.slice.Slice: void <init>(android.os.Parcel)>
<android.app.slice.Slice: int describeContents()>
<android.app.slice.Slice: java.util.List getHints()>
<android.app.slice.Slice: java.util.List getItems()>
<android.app.slice.Slice: android.app.slice.SliceSpec getSpec()>
<android.app.slice.Slice: android.net.Uri getUri()>
<android.app.slice.Slice: boolean isCallerNeeded()>
<android.app.slice.Slice: void writeToParcel(android.os.Parcel,int)>
<android.app.slice.Slice: android.os.Parcelable$Creator CREATOR>
<android.app.slice.Slice: java.lang.String EXTRA_RANGE_VALUE>
<android.app.slice.Slice: java.lang.String EXTRA_TOGGLE_STATE>
<android.app.slice.Slice: java.lang.String HINT_ACTIONS>
<android.app.slice.Slice: java.lang.String HINT_ERROR>
<android.app.slice.Slice: java.lang.String HINT_HORIZONTAL>
<android.app.slice.Slice: java.lang.String HINT_KEYWORDS>
<android.app.slice.Slice: java.lang.String HINT_LARGE>
<android.app.slice.Slice: java.lang.String HINT_LAST_UPDATED>
<android.app.slice.Slice: java.lang.String HINT_LIST>
<android.app.slice.Slice: java.lang.String HINT_LIST_ITEM>
<android.app.slice.Slice: java.lang.String HINT_NO_TINT>
<android.app.slice.Slice: java.lang.String HINT_PARTIAL>
<android.app.slice.Slice: java.lang.String HINT_PERMISSION_REQUEST>
<android.app.slice.Slice: java.lang.String HINT_SEE_MORE>
<android.app.slice.Slice: java.lang.String HINT_SELECTED>
<android.app.slice.Slice: java.lang.String HINT_SHORTCUT>
<android.app.slice.Slice: java.lang.String HINT_SUMMARY>
<android.app.slice.Slice: java.lang.String HINT_TITLE>
<android.app.slice.Slice: java.lang.String HINT_TTL>
<android.app.slice.Slice: java.lang.String SUBTYPE_COLOR>
<android.app.slice.Slice: java.lang.String SUBTYPE_CONTENT_DESCRIPTION>
<android.app.slice.Slice: java.lang.String SUBTYPE_LAYOUT_DIRECTION>
<android.app.slice.Slice: java.lang.String SUBTYPE_MAX>
<android.app.slice.Slice: java.lang.String SUBTYPE_MESSAGE>
<android.app.slice.Slice: java.lang.String SUBTYPE_MILLIS>
<android.app.slice.Slice: java.lang.String SUBTYPE_PRIORITY>
<android.app.slice.Slice: java.lang.String SUBTYPE_RANGE>
<android.app.slice.Slice: java.lang.String SUBTYPE_SOURCE>
<android.app.slice.Slice: java.lang.String SUBTYPE_TOGGLE>
<android.app.slice.Slice: java.lang.String SUBTYPE_VALUE>
android.app.slice.Slice$Builder
<android.app.slice.Slice$Builder: void <init>(android.net.Uri,android.app.slice.SliceSpec)>
<android.app.slice.Slice$Builder: void <init>(android.app.slice.Slice$Builder)>
<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addAction(android.app.PendingIntent,android.app.slice.Slice,java.lang.String)>
<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addBundle(android.os.Bundle,java.lang.String,java.util.List)>
<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addHints(java.util.List)>
<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addIcon(android.graphics.drawable.Icon,java.lang.String,java.util.List)>
<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addInt(int,java.lang.String,java.util.List)>
<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addLong(long,java.lang.String,java.util.List)>
<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addRemoteInput(android.app.RemoteInput,java.lang.String,java.util.List)>
<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addSubSlice(android.app.slice.Slice,java.lang.String)>
<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addText(java.lang.CharSequence,java.lang.String,java.util.List)>
<android.app.slice.Slice$Builder: android.app.slice.Slice build()>
<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder setCallerNeeded(boolean)>
android.app.slice.SliceItem
<android.app.slice.SliceItem: int describeContents()>
<android.app.slice.SliceItem: android.app.PendingIntent getAction()>
<android.app.slice.SliceItem: android.os.Bundle getBundle()>
<android.app.slice.SliceItem: java.lang.String getFormat()>
<android.app.slice.SliceItem: java.util.List getHints()>
<android.app.slice.SliceItem: android.graphics.drawable.Icon getIcon()>
<android.app.slice.SliceItem: int getInt()>
<android.app.slice.SliceItem: long getLong()>
<android.app.slice.SliceItem: android.app.RemoteInput getRemoteInput()>
<android.app.slice.SliceItem: android.app.slice.Slice getSlice()>
<android.app.slice.SliceItem: java.lang.String getSubType()>
<android.app.slice.SliceItem: java.lang.CharSequence getText()>
<android.app.slice.SliceItem: boolean hasHint(java.lang.String)>
<android.app.slice.SliceItem: void writeToParcel(android.os.Parcel,int)>
<android.app.slice.SliceItem: android.os.Parcelable$Creator CREATOR>
<android.app.slice.SliceItem: java.lang.String FORMAT_ACTION>
<android.app.slice.SliceItem: java.lang.String FORMAT_BUNDLE>
<android.app.slice.SliceItem: java.lang.String FORMAT_IMAGE>
<android.app.slice.SliceItem: java.lang.String FORMAT_INT>
<android.app.slice.SliceItem: java.lang.String FORMAT_LONG>
<android.app.slice.SliceItem: java.lang.String FORMAT_REMOTE_INPUT>
<android.app.slice.SliceItem: java.lang.String FORMAT_SLICE>
<android.app.slice.SliceItem: java.lang.String FORMAT_TEXT>
android.app.slice.SliceManager
<android.app.slice.SliceManager: android.app.slice.Slice bindSlice(android.net.Uri,java.util.Set)>
<android.app.slice.SliceManager: android.app.slice.Slice bindSlice(android.content.Intent,java.util.Set)>
<android.app.slice.SliceManager: int checkSlicePermission(android.net.Uri,int,int)>
<android.app.slice.SliceManager: java.util.List getPinnedSlices()>
<android.app.slice.SliceManager: java.util.Set getPinnedSpecs(android.net.Uri)>
<android.app.slice.SliceManager: java.util.Collection getSliceDescendants(android.net.Uri)>
<android.app.slice.SliceManager: void grantSlicePermission(java.lang.String,android.net.Uri)>
<android.app.slice.SliceManager: android.net.Uri mapIntentToUri(android.content.Intent)>
<android.app.slice.SliceManager: void pinSlice(android.net.Uri,java.util.Set)>
<android.app.slice.SliceManager: void revokeSlicePermission(java.lang.String,android.net.Uri)>
<android.app.slice.SliceManager: void unpinSlice(android.net.Uri)>
<android.app.slice.SliceManager: java.lang.String CATEGORY_SLICE>
<android.app.slice.SliceManager: java.lang.String SLICE_METADATA_KEY>
android.app.slice.SliceMetrics
<android.app.slice.SliceMetrics: void <init>(android.content.Context,android.net.Uri)>
<android.app.slice.SliceMetrics: void logHidden()>
<android.app.slice.SliceMetrics: void logTouch(int,android.net.Uri)>
<android.app.slice.SliceMetrics: void logVisible()>
android.app.slice.SliceProvider
<android.app.slice.SliceProvider: void <init>(java.lang.String[])>
<android.app.slice.SliceProvider: void <init>()>
<android.app.slice.SliceProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.app.slice.SliceProvider: java.lang.String getType(android.net.Uri)>
<android.app.slice.SliceProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.app.slice.SliceProvider: android.app.slice.Slice onBindSlice(android.net.Uri,java.util.Set)>
<android.app.slice.SliceProvider: android.app.PendingIntent onCreatePermissionRequest(android.net.Uri)>
<android.app.slice.SliceProvider: java.util.Collection onGetSliceDescendants(android.net.Uri)>
<android.app.slice.SliceProvider: android.net.Uri onMapIntentToUri(android.content.Intent)>
<android.app.slice.SliceProvider: void onSlicePinned(android.net.Uri)>
<android.app.slice.SliceProvider: void onSliceUnpinned(android.net.Uri)>
<android.app.slice.SliceProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.app.slice.SliceProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.app.slice.SliceProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>
<android.app.slice.SliceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.app.slice.SliceProvider: java.lang.String SLICE_TYPE>
android.app.slice.SliceSpec
<android.app.slice.SliceSpec: void <init>(java.lang.String,int)>
<android.app.slice.SliceSpec: boolean canRender(android.app.slice.SliceSpec)>
<android.app.slice.SliceSpec: int describeContents()>
<android.app.slice.SliceSpec: int getRevision()>
<android.app.slice.SliceSpec: java.lang.String getType()>
<android.app.slice.SliceSpec: void writeToParcel(android.os.Parcel,int)>
<android.app.slice.SliceSpec: android.os.Parcelable$Creator CREATOR>
android.app.usage.ConfigurationStats
<android.app.usage.ConfigurationStats: void <init>(android.app.usage.ConfigurationStats)>
<android.app.usage.ConfigurationStats: int describeContents()>
<android.app.usage.ConfigurationStats: int getActivationCount()>
<android.app.usage.ConfigurationStats: android.content.res.Configuration getConfiguration()>
<android.app.usage.ConfigurationStats: long getFirstTimeStamp()>
<android.app.usage.ConfigurationStats: long getLastTimeActive()>
<android.app.usage.ConfigurationStats: long getLastTimeStamp()>
<android.app.usage.ConfigurationStats: long getTotalTimeActive()>
<android.app.usage.ConfigurationStats: void writeToParcel(android.os.Parcel,int)>
<android.app.usage.ConfigurationStats: android.os.Parcelable$Creator CREATOR>
android.app.usage.EventStats
<android.app.usage.EventStats: void <init>(android.app.usage.EventStats)>
<android.app.usage.EventStats: void add(android.app.usage.EventStats)>
<android.app.usage.EventStats: int describeContents()>
<android.app.usage.EventStats: int getCount()>
<android.app.usage.EventStats: int getEventType()>
<android.app.usage.EventStats: long getFirstTimeStamp()>
<android.app.usage.EventStats: long getLastEventTime()>
<android.app.usage.EventStats: long getLastTimeStamp()>
<android.app.usage.EventStats: long getTotalTime()>
<android.app.usage.EventStats: void writeToParcel(android.os.Parcel,int)>
<android.app.usage.EventStats: android.os.Parcelable$Creator CREATOR>
android.app.usage.ExternalStorageStats
<android.app.usage.ExternalStorageStats: int describeContents()>
<android.app.usage.ExternalStorageStats: long getAppBytes()>
<android.app.usage.ExternalStorageStats: long getAudioBytes()>
<android.app.usage.ExternalStorageStats: long getImageBytes()>
<android.app.usage.ExternalStorageStats: long getTotalBytes()>
<android.app.usage.ExternalStorageStats: long getVideoBytes()>
<android.app.usage.ExternalStorageStats: void writeToParcel(android.os.Parcel,int)>
<android.app.usage.ExternalStorageStats: android.os.Parcelable$Creator CREATOR>
android.app.usage.StorageStats
<android.app.usage.StorageStats: int describeContents()>
<android.app.usage.StorageStats: long getAppBytes()>
<android.app.usage.StorageStats: long getCacheBytes()>
<android.app.usage.StorageStats: long getDataBytes()>
<android.app.usage.StorageStats: long getExternalCacheBytes()>
<android.app.usage.StorageStats: void writeToParcel(android.os.Parcel,int)>
<android.app.usage.StorageStats: android.os.Parcelable$Creator CREATOR>
android.app.usage.StorageStatsManager
<android.app.usage.StorageStatsManager: long getFreeBytes(java.util.UUID)>
<android.app.usage.StorageStatsManager: long getTotalBytes(java.util.UUID)>
<android.app.usage.StorageStatsManager: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.util.UUID,android.os.UserHandle)>
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForPackage(java.util.UUID,java.lang.String,android.os.UserHandle)>
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUid(java.util.UUID,int)>
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUser(java.util.UUID,android.os.UserHandle)>
android.app.usage.UsageEvents
<android.app.usage.UsageEvents: int describeContents()>
<android.app.usage.UsageEvents: boolean getNextEvent(android.app.usage.UsageEvents$Event)>
<android.app.usage.UsageEvents: boolean hasNextEvent()>
<android.app.usage.UsageEvents: void writeToParcel(android.os.Parcel,int)>
<android.app.usage.UsageEvents: android.os.Parcelable$Creator CREATOR>
android.app.usage.UsageEvents$Event
<android.app.usage.UsageEvents$Event: void <init>()>
<android.app.usage.UsageEvents$Event: int getAppStandbyBucket()>
<android.app.usage.UsageEvents$Event: java.lang.String getClassName()>
<android.app.usage.UsageEvents$Event: android.content.res.Configuration getConfiguration()>
<android.app.usage.UsageEvents$Event: int getEventType()>
<android.app.usage.UsageEvents$Event: java.lang.String getPackageName()>
<android.app.usage.UsageEvents$Event: java.lang.String getShortcutId()>
<android.app.usage.UsageEvents$Event: long getTimeStamp()>
<android.app.usage.UsageEvents$Event: int ACTIVITY_PAUSED>
<android.app.usage.UsageEvents$Event: int ACTIVITY_RESUMED>
<android.app.usage.UsageEvents$Event: int ACTIVITY_STOPPED>
<android.app.usage.UsageEvents$Event: int CONFIGURATION_CHANGE>
<android.app.usage.UsageEvents$Event: int DEVICE_SHUTDOWN>
<android.app.usage.UsageEvents$Event: int DEVICE_STARTUP>
<android.app.usage.UsageEvents$Event: int FOREGROUND_SERVICE_START>
<android.app.usage.UsageEvents$Event: int FOREGROUND_SERVICE_STOP>
<android.app.usage.UsageEvents$Event: int KEYGUARD_HIDDEN>
<android.app.usage.UsageEvents$Event: int KEYGUARD_SHOWN>
<android.app.usage.UsageEvents$Event: int MOVE_TO_BACKGROUND>
<android.app.usage.UsageEvents$Event: int MOVE_TO_FOREGROUND>
<android.app.usage.UsageEvents$Event: int NONE>
<android.app.usage.UsageEvents$Event: int SCREEN_INTERACTIVE>
<android.app.usage.UsageEvents$Event: int SCREEN_NON_INTERACTIVE>
<android.app.usage.UsageEvents$Event: int SHORTCUT_INVOCATION>
<android.app.usage.UsageEvents$Event: int STANDBY_BUCKET_CHANGED>
<android.app.usage.UsageEvents$Event: int USER_INTERACTION>
android.app.usage.UsageStats
<android.app.usage.UsageStats: void <init>(android.app.usage.UsageStats)>
<android.app.usage.UsageStats: void add(android.app.usage.UsageStats)>
<android.app.usage.UsageStats: int describeContents()>
<android.app.usage.UsageStats: long getFirstTimeStamp()>
<android.app.usage.UsageStats: long getLastTimeForegroundServiceUsed()>
<android.app.usage.UsageStats: long getLastTimeStamp()>
<android.app.usage.UsageStats: long getLastTimeUsed()>
<android.app.usage.UsageStats: long getLastTimeVisible()>
<android.app.usage.UsageStats: java.lang.String getPackageName()>
<android.app.usage.UsageStats: long getTotalTimeForegroundServiceUsed()>
<android.app.usage.UsageStats: long getTotalTimeInForeground()>
<android.app.usage.UsageStats: long getTotalTimeVisible()>
<android.app.usage.UsageStats: void writeToParcel(android.os.Parcel,int)>
<android.app.usage.UsageStats: android.os.Parcelable$Creator CREATOR>
android.app.usage.UsageStatsManager
<android.app.usage.UsageStatsManager: int getAppStandbyBucket()>
<android.app.usage.UsageStatsManager: boolean isAppInactive(java.lang.String)>
<android.app.usage.UsageStatsManager: java.util.Map queryAndAggregateUsageStats(long,long)>
<android.app.usage.UsageStatsManager: java.util.List queryConfigurations(int,long,long)>
<android.app.usage.UsageStatsManager: java.util.List queryEventStats(int,long,long)>
<android.app.usage.UsageStatsManager: android.app.usage.UsageEvents queryEvents(long,long)>
<android.app.usage.UsageStatsManager: android.app.usage.UsageEvents queryEventsForSelf(long,long)>
<android.app.usage.UsageStatsManager: java.util.List queryUsageStats(int,long,long)>
<android.app.usage.UsageStatsManager: int INTERVAL_BEST>
<android.app.usage.UsageStatsManager: int INTERVAL_DAILY>
<android.app.usage.UsageStatsManager: int INTERVAL_MONTHLY>
<android.app.usage.UsageStatsManager: int INTERVAL_WEEKLY>
<android.app.usage.UsageStatsManager: int INTERVAL_YEARLY>
<android.app.usage.UsageStatsManager: int STANDBY_BUCKET_ACTIVE>
<android.app.usage.UsageStatsManager: int STANDBY_BUCKET_FREQUENT>
<android.app.usage.UsageStatsManager: int STANDBY_BUCKET_RARE>
<android.app.usage.UsageStatsManager: int STANDBY_BUCKET_RESTRICTED>
<android.app.usage.UsageStatsManager: int STANDBY_BUCKET_WORKING_SET>
android.appwidget.AppWidgetHost
<android.appwidget.AppWidgetHost: void <init>(android.content.Context,int)>
<android.appwidget.AppWidgetHost: int allocateAppWidgetId()>
<android.appwidget.AppWidgetHost: void clearViews()>
<android.appwidget.AppWidgetHost: android.appwidget.AppWidgetHostView createView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)>
<android.appwidget.AppWidgetHost: void deleteAllHosts()>
<android.appwidget.AppWidgetHost: void deleteAppWidgetId(int)>
<android.appwidget.AppWidgetHost: void deleteHost()>
<android.appwidget.AppWidgetHost: int[] getAppWidgetIds()>
<android.appwidget.AppWidgetHost: void onAppWidgetRemoved(int)>
<android.appwidget.AppWidgetHost: android.appwidget.AppWidgetHostView onCreateView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)>
<android.appwidget.AppWidgetHost: void onProviderChanged(int,android.appwidget.AppWidgetProviderInfo)>
<android.appwidget.AppWidgetHost: void onProvidersChanged()>
<android.appwidget.AppWidgetHost: void startAppWidgetConfigureActivityForResult(android.app.Activity,int,int,int,android.os.Bundle)>
<android.appwidget.AppWidgetHost: void startListening()>
<android.appwidget.AppWidgetHost: void stopListening()>
android.appwidget.AppWidgetHostView
<android.appwidget.AppWidgetHostView: void <init>(android.content.Context)>
<android.appwidget.AppWidgetHostView: void <init>(android.content.Context,int,int)>
<android.appwidget.AppWidgetHostView: int getAppWidgetId()>
<android.appwidget.AppWidgetHostView: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo()>
<android.appwidget.AppWidgetHostView: android.graphics.Rect getDefaultPaddingForWidget(android.content.Context,android.content.ComponentName,android.graphics.Rect)>
<android.appwidget.AppWidgetHostView: android.view.View getDefaultView()>
<android.appwidget.AppWidgetHostView: android.view.View getErrorView()>
<android.appwidget.AppWidgetHostView: void prepareView(android.view.View)>
<android.appwidget.AppWidgetHostView: void resetColorResources()>
<android.appwidget.AppWidgetHostView: void setAppWidget(int,android.appwidget.AppWidgetProviderInfo)>
<android.appwidget.AppWidgetHostView: void setColorResources(android.util.SparseIntArray)>
<android.appwidget.AppWidgetHostView: void setExecutor(java.util.concurrent.Executor)>
<android.appwidget.AppWidgetHostView: void setOnLightBackground(boolean)>
<android.appwidget.AppWidgetHostView: void updateAppWidget(android.widget.RemoteViews)>
<android.appwidget.AppWidgetHostView: void updateAppWidgetOptions(android.os.Bundle)>
<android.appwidget.AppWidgetHostView: void updateAppWidgetSize(android.os.Bundle,int,int,int,int)>
<android.appwidget.AppWidgetHostView: void updateAppWidgetSize(android.os.Bundle,java.util.List)>
android.appwidget.AppWidgetManager
<android.appwidget.AppWidgetManager: boolean bindAppWidgetIdIfAllowed(int,android.content.ComponentName)>
<android.appwidget.AppWidgetManager: boolean bindAppWidgetIdIfAllowed(int,android.content.ComponentName,android.os.Bundle)>
<android.appwidget.AppWidgetManager: boolean bindAppWidgetIdIfAllowed(int,android.os.UserHandle,android.content.ComponentName,android.os.Bundle)>
<android.appwidget.AppWidgetManager: int[] getAppWidgetIds(android.content.ComponentName)>
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)>
<android.appwidget.AppWidgetManager: android.os.Bundle getAppWidgetOptions(int)>
<android.appwidget.AppWidgetManager: java.util.List getInstalledProviders()>
<android.appwidget.AppWidgetManager: java.util.List getInstalledProvidersForPackage(java.lang.String,android.os.UserHandle)>
<android.appwidget.AppWidgetManager: java.util.List getInstalledProvidersForProfile(android.os.UserHandle)>
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetManager getInstance(android.content.Context)>
<android.appwidget.AppWidgetManager: boolean isRequestPinAppWidgetSupported()>
<android.appwidget.AppWidgetManager: void notifyAppWidgetViewDataChanged(int[],int)>
<android.appwidget.AppWidgetManager: void notifyAppWidgetViewDataChanged(int,int)>
<android.appwidget.AppWidgetManager: void partiallyUpdateAppWidget(int[],android.widget.RemoteViews)>
<android.appwidget.AppWidgetManager: void partiallyUpdateAppWidget(int,android.widget.RemoteViews)>
<android.appwidget.AppWidgetManager: boolean requestPinAppWidget(android.content.ComponentName,android.os.Bundle,android.app.PendingIntent)>
<android.appwidget.AppWidgetManager: void updateAppWidget(int[],android.widget.RemoteViews)>
<android.appwidget.AppWidgetManager: void updateAppWidget(int,android.widget.RemoteViews)>
<android.appwidget.AppWidgetManager: void updateAppWidget(android.content.ComponentName,android.widget.RemoteViews)>
<android.appwidget.AppWidgetManager: void updateAppWidgetOptions(int,android.os.Bundle)>
<android.appwidget.AppWidgetManager: void updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)>
<android.appwidget.AppWidgetManager: java.lang.String ACTION_APPWIDGET_BIND>
<android.appwidget.AppWidgetManager: java.lang.String ACTION_APPWIDGET_CONFIGURE>
<android.appwidget.AppWidgetManager: java.lang.String ACTION_APPWIDGET_DELETED>
<android.appwidget.AppWidgetManager: java.lang.String ACTION_APPWIDGET_DISABLED>
<android.appwidget.AppWidgetManager: java.lang.String ACTION_APPWIDGET_ENABLED>
<android.appwidget.AppWidgetManager: java.lang.String ACTION_APPWIDGET_HOST_RESTORED>
<android.appwidget.AppWidgetManager: java.lang.String ACTION_APPWIDGET_OPTIONS_CHANGED>
<android.appwidget.AppWidgetManager: java.lang.String ACTION_APPWIDGET_PICK>
<android.appwidget.AppWidgetManager: java.lang.String ACTION_APPWIDGET_RESTORED>
<android.appwidget.AppWidgetManager: java.lang.String ACTION_APPWIDGET_UPDATE>
<android.appwidget.AppWidgetManager: java.lang.String EXTRA_APPWIDGET_ID>
<android.appwidget.AppWidgetManager: java.lang.String EXTRA_APPWIDGET_IDS>
<android.appwidget.AppWidgetManager: java.lang.String EXTRA_APPWIDGET_OLD_IDS>
<android.appwidget.AppWidgetManager: java.lang.String EXTRA_APPWIDGET_OPTIONS>
<android.appwidget.AppWidgetManager: java.lang.String EXTRA_APPWIDGET_PREVIEW>
<android.appwidget.AppWidgetManager: java.lang.String EXTRA_APPWIDGET_PROVIDER>
<android.appwidget.AppWidgetManager: java.lang.String EXTRA_APPWIDGET_PROVIDER_PROFILE>
<android.appwidget.AppWidgetManager: java.lang.String EXTRA_CUSTOM_EXTRAS>
<android.appwidget.AppWidgetManager: java.lang.String EXTRA_CUSTOM_INFO>
<android.appwidget.AppWidgetManager: java.lang.String EXTRA_HOST_ID>
<android.appwidget.AppWidgetManager: int INVALID_APPWIDGET_ID>
<android.appwidget.AppWidgetManager: java.lang.String META_DATA_APPWIDGET_PROVIDER>
<android.appwidget.AppWidgetManager: java.lang.String OPTION_APPWIDGET_HOST_CATEGORY>
<android.appwidget.AppWidgetManager: java.lang.String OPTION_APPWIDGET_MAX_HEIGHT>
<android.appwidget.AppWidgetManager: java.lang.String OPTION_APPWIDGET_MAX_WIDTH>
<android.appwidget.AppWidgetManager: java.lang.String OPTION_APPWIDGET_MIN_HEIGHT>
<android.appwidget.AppWidgetManager: java.lang.String OPTION_APPWIDGET_MIN_WIDTH>
<android.appwidget.AppWidgetManager: java.lang.String OPTION_APPWIDGET_RESTORE_COMPLETED>
<android.appwidget.AppWidgetManager: java.lang.String OPTION_APPWIDGET_SIZES>
android.appwidget.AppWidgetProvider
<android.appwidget.AppWidgetProvider: void <init>()>
<android.appwidget.AppWidgetProvider: void onAppWidgetOptionsChanged(android.content.Context,android.appwidget.AppWidgetManager,int,android.os.Bundle)>
<android.appwidget.AppWidgetProvider: void onDeleted(android.content.Context,int[])>
<android.appwidget.AppWidgetProvider: void onDisabled(android.content.Context)>
<android.appwidget.AppWidgetProvider: void onEnabled(android.content.Context)>
<android.appwidget.AppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)>
<android.appwidget.AppWidgetProvider: void onRestored(android.content.Context,int[],int[])>
<android.appwidget.AppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])>
android.appwidget.AppWidgetProviderInfo
<android.appwidget.AppWidgetProviderInfo: void <init>()>
<android.appwidget.AppWidgetProviderInfo: void <init>(android.os.Parcel)>
<android.appwidget.AppWidgetProviderInfo: android.appwidget.AppWidgetProviderInfo clone()>
<android.appwidget.AppWidgetProviderInfo: int describeContents()>
<android.appwidget.AppWidgetProviderInfo: android.content.pm.ActivityInfo getActivityInfo()>
<android.appwidget.AppWidgetProviderInfo: android.os.UserHandle getProfile()>
<android.appwidget.AppWidgetProviderInfo: java.lang.CharSequence loadDescription(android.content.Context)>
<android.appwidget.AppWidgetProviderInfo: android.graphics.drawable.Drawable loadIcon(android.content.Context,int)>
<android.appwidget.AppWidgetProviderInfo: java.lang.String loadLabel(android.content.pm.PackageManager)>
<android.appwidget.AppWidgetProviderInfo: android.graphics.drawable.Drawable loadPreviewImage(android.content.Context,int)>
<android.appwidget.AppWidgetProviderInfo: void writeToParcel(android.os.Parcel,int)>
<android.appwidget.AppWidgetProviderInfo: android.os.Parcelable$Creator CREATOR>
<android.appwidget.AppWidgetProviderInfo: int RESIZE_BOTH>
<android.appwidget.AppWidgetProviderInfo: int RESIZE_HORIZONTAL>
<android.appwidget.AppWidgetProviderInfo: int RESIZE_NONE>
<android.appwidget.AppWidgetProviderInfo: int RESIZE_VERTICAL>
<android.appwidget.AppWidgetProviderInfo: int WIDGET_CATEGORY_HOME_SCREEN>
<android.appwidget.AppWidgetProviderInfo: int WIDGET_CATEGORY_KEYGUARD>
<android.appwidget.AppWidgetProviderInfo: int WIDGET_CATEGORY_SEARCHBOX>
<android.appwidget.AppWidgetProviderInfo: int WIDGET_FEATURE_CONFIGURATION_OPTIONAL>
<android.appwidget.AppWidgetProviderInfo: int WIDGET_FEATURE_HIDE_FROM_PICKER>
<android.appwidget.AppWidgetProviderInfo: int WIDGET_FEATURE_RECONFIGURABLE>
<android.appwidget.AppWidgetProviderInfo: int autoAdvanceViewId>
<android.appwidget.AppWidgetProviderInfo: android.content.ComponentName configure>
<android.appwidget.AppWidgetProviderInfo: int descriptionRes>
<android.appwidget.AppWidgetProviderInfo: int icon>
<android.appwidget.AppWidgetProviderInfo: int initialKeyguardLayout>
<android.appwidget.AppWidgetProviderInfo: int initialLayout>
<android.appwidget.AppWidgetProviderInfo: java.lang.String label>
<android.appwidget.AppWidgetProviderInfo: int maxResizeHeight>
<android.appwidget.AppWidgetProviderInfo: int maxResizeWidth>
<android.appwidget.AppWidgetProviderInfo: int minHeight>
<android.appwidget.AppWidgetProviderInfo: int minResizeHeight>
<android.appwidget.AppWidgetProviderInfo: int minResizeWidth>
<android.appwidget.AppWidgetProviderInfo: int minWidth>
<android.appwidget.AppWidgetProviderInfo: int previewImage>
<android.appwidget.AppWidgetProviderInfo: int previewLayout>
<android.appwidget.AppWidgetProviderInfo: android.content.ComponentName provider>
<android.appwidget.AppWidgetProviderInfo: int resizeMode>
<android.appwidget.AppWidgetProviderInfo: int targetCellHeight>
<android.appwidget.AppWidgetProviderInfo: int targetCellWidth>
<android.appwidget.AppWidgetProviderInfo: int updatePeriodMillis>
<android.appwidget.AppWidgetProviderInfo: int widgetCategory>
<android.appwidget.AppWidgetProviderInfo: int widgetFeatures>
android.companion.AssociationInfo
<android.companion.AssociationInfo: int describeContents()>
<android.companion.AssociationInfo: android.net.MacAddress getDeviceMacAddress()>
<android.companion.AssociationInfo: java.lang.String getDeviceProfile()>
<android.companion.AssociationInfo: java.lang.CharSequence getDisplayName()>
<android.companion.AssociationInfo: int getId()>
<android.companion.AssociationInfo: void writeToParcel(android.os.Parcel,int)>
<android.companion.AssociationInfo: android.os.Parcelable$Creator CREATOR>
android.companion.AssociationRequest
<android.companion.AssociationRequest: int describeContents()>
<android.companion.AssociationRequest: java.lang.String getDeviceProfile()>
<android.companion.AssociationRequest: java.lang.CharSequence getDisplayName()>
<android.companion.AssociationRequest: boolean isForceConfirmation()>
<android.companion.AssociationRequest: boolean isSelfManaged()>
<android.companion.AssociationRequest: boolean isSingleDevice()>
<android.companion.AssociationRequest: void writeToParcel(android.os.Parcel,int)>
<android.companion.AssociationRequest: android.os.Parcelable$Creator CREATOR>
<android.companion.AssociationRequest: java.lang.String DEVICE_PROFILE_APP_STREAMING>
<android.companion.AssociationRequest: java.lang.String DEVICE_PROFILE_AUTOMOTIVE_PROJECTION>
<android.companion.AssociationRequest: java.lang.String DEVICE_PROFILE_COMPUTER>
<android.companion.AssociationRequest: java.lang.String DEVICE_PROFILE_WATCH>
android.companion.AssociationRequest$Builder
<android.companion.AssociationRequest$Builder: void <init>()>
<android.companion.AssociationRequest$Builder: android.companion.AssociationRequest$Builder addDeviceFilter(android.companion.DeviceFilter)>
<android.companion.AssociationRequest$Builder: android.companion.AssociationRequest build()>
<android.companion.AssociationRequest$Builder: android.companion.AssociationRequest$Builder setDeviceProfile(java.lang.String)>
<android.companion.AssociationRequest$Builder: android.companion.AssociationRequest$Builder setDisplayName(java.lang.CharSequence)>
<android.companion.AssociationRequest$Builder: android.companion.AssociationRequest$Builder setForceConfirmation(boolean)>
<android.companion.AssociationRequest$Builder: android.companion.AssociationRequest$Builder setSelfManaged(boolean)>
<android.companion.AssociationRequest$Builder: android.companion.AssociationRequest$Builder setSingleDevice(boolean)>
android.companion.BluetoothDeviceFilter
<android.companion.BluetoothDeviceFilter: int describeContents()>
<android.companion.BluetoothDeviceFilter: void writeToParcel(android.os.Parcel,int)>
<android.companion.BluetoothDeviceFilter: android.os.Parcelable$Creator CREATOR>
android.companion.BluetoothDeviceFilter$Builder
<android.companion.BluetoothDeviceFilter$Builder: void <init>()>
<android.companion.BluetoothDeviceFilter$Builder: android.companion.BluetoothDeviceFilter$Builder addServiceUuid(android.os.ParcelUuid,android.os.ParcelUuid)>
<android.companion.BluetoothDeviceFilter$Builder: android.companion.BluetoothDeviceFilter build()>
<android.companion.BluetoothDeviceFilter$Builder: android.companion.BluetoothDeviceFilter$Builder setAddress(java.lang.String)>
<android.companion.BluetoothDeviceFilter$Builder: android.companion.BluetoothDeviceFilter$Builder setNamePattern(java.util.regex.Pattern)>
android.companion.BluetoothLeDeviceFilter
<android.companion.BluetoothLeDeviceFilter: int describeContents()>
<android.companion.BluetoothLeDeviceFilter: int getRenamePrefixLengthLimit()>
<android.companion.BluetoothLeDeviceFilter: void writeToParcel(android.os.Parcel,int)>
<android.companion.BluetoothLeDeviceFilter: android.os.Parcelable$Creator CREATOR>
android.companion.BluetoothLeDeviceFilter$Builder
<android.companion.BluetoothLeDeviceFilter$Builder: void <init>()>
<android.companion.BluetoothLeDeviceFilter$Builder: android.companion.BluetoothLeDeviceFilter build()>
<android.companion.BluetoothLeDeviceFilter$Builder: android.companion.BluetoothLeDeviceFilter$Builder setNamePattern(java.util.regex.Pattern)>
<android.companion.BluetoothLeDeviceFilter$Builder: android.companion.BluetoothLeDeviceFilter$Builder setRawDataFilter(byte[],byte[])>
<android.companion.BluetoothLeDeviceFilter$Builder: android.companion.BluetoothLeDeviceFilter$Builder setRenameFromBytes(java.lang.String,java.lang.String,int,int,java.nio.ByteOrder)>
<android.companion.BluetoothLeDeviceFilter$Builder: android.companion.BluetoothLeDeviceFilter$Builder setRenameFromName(java.lang.String,java.lang.String,int,int)>
<android.companion.BluetoothLeDeviceFilter$Builder: android.companion.BluetoothLeDeviceFilter$Builder setScanFilter(android.bluetooth.le.ScanFilter)>
android.companion.CompanionDeviceManager
<android.companion.CompanionDeviceManager: void associate(android.companion.AssociationRequest,android.companion.CompanionDeviceManager$Callback,android.os.Handler)>
<android.companion.CompanionDeviceManager: void associate(android.companion.AssociationRequest,java.util.concurrent.Executor,android.companion.CompanionDeviceManager$Callback)>
<android.companion.CompanionDeviceManager: void disassociate(java.lang.String)>
<android.companion.CompanionDeviceManager: void disassociate(int)>
<android.companion.CompanionDeviceManager: java.util.List getAssociations()>
<android.companion.CompanionDeviceManager: java.util.List getMyAssociations()>
<android.companion.CompanionDeviceManager: boolean hasNotificationAccess(android.content.ComponentName)>
<android.companion.CompanionDeviceManager: void requestNotificationAccess(android.content.ComponentName)>
<android.companion.CompanionDeviceManager: void startObservingDevicePresence(java.lang.String)>
<android.companion.CompanionDeviceManager: void stopObservingDevicePresence(java.lang.String)>
<android.companion.CompanionDeviceManager: java.lang.String EXTRA_ASSOCIATION>
<android.companion.CompanionDeviceManager: java.lang.String EXTRA_DEVICE>
android.companion.CompanionDeviceManager$Callback
<android.companion.CompanionDeviceManager$Callback: void <init>()>
<android.companion.CompanionDeviceManager$Callback: void onAssociationCreated(android.companion.AssociationInfo)>
<android.companion.CompanionDeviceManager$Callback: void onAssociationPending(android.content.IntentSender)>
<android.companion.CompanionDeviceManager$Callback: void onDeviceFound(android.content.IntentSender)>
<android.companion.CompanionDeviceManager$Callback: void onFailure(java.lang.CharSequence)>
android.companion.CompanionDeviceService
<android.companion.CompanionDeviceService: void <init>()>
<android.companion.CompanionDeviceService: android.os.IBinder onBind(android.content.Intent)>
<android.companion.CompanionDeviceService: void onDeviceAppeared(java.lang.String)>
<android.companion.CompanionDeviceService: void onDeviceAppeared(android.companion.AssociationInfo)>
<android.companion.CompanionDeviceService: void onDeviceDisappeared(java.lang.String)>
<android.companion.CompanionDeviceService: void onDeviceDisappeared(android.companion.AssociationInfo)>
<android.companion.CompanionDeviceService: java.lang.String SERVICE_INTERFACE>
android.companion.DeviceFilter
android.companion.DeviceNotAssociatedException
android.companion.WifiDeviceFilter
<android.companion.WifiDeviceFilter: int describeContents()>
<android.companion.WifiDeviceFilter: void writeToParcel(android.os.Parcel,int)>
<android.companion.WifiDeviceFilter: android.os.Parcelable$Creator CREATOR>
android.companion.WifiDeviceFilter$Builder
<android.companion.WifiDeviceFilter$Builder: void <init>()>
<android.companion.WifiDeviceFilter$Builder: android.companion.WifiDeviceFilter build()>
<android.companion.WifiDeviceFilter$Builder: android.companion.WifiDeviceFilter$Builder setBssid(android.net.MacAddress)>
<android.companion.WifiDeviceFilter$Builder: android.companion.WifiDeviceFilter$Builder setBssidMask(android.net.MacAddress)>
<android.companion.WifiDeviceFilter$Builder: android.companion.WifiDeviceFilter$Builder setNamePattern(java.util.regex.Pattern)>
android.content.AbstractThreadedSyncAdapter
<android.content.AbstractThreadedSyncAdapter: void <init>(android.content.Context,boolean)>
<android.content.AbstractThreadedSyncAdapter: void <init>(android.content.Context,boolean,boolean)>
<android.content.AbstractThreadedSyncAdapter: android.content.Context getContext()>
<android.content.AbstractThreadedSyncAdapter: android.os.IBinder getSyncAdapterBinder()>
<android.content.AbstractThreadedSyncAdapter: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)>
<android.content.AbstractThreadedSyncAdapter: void onSecurityException(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.SyncResult)>
<android.content.AbstractThreadedSyncAdapter: void onSyncCanceled()>
<android.content.AbstractThreadedSyncAdapter: void onSyncCanceled(java.lang.Thread)>
<android.content.AbstractThreadedSyncAdapter: boolean onUnsyncableAccount()>
<android.content.AbstractThreadedSyncAdapter: int LOG_SYNC_DETAILS>
android.content.ActivityNotFoundException
<android.content.ActivityNotFoundException: void <init>()>
<android.content.ActivityNotFoundException: void <init>(java.lang.String)>
android.content.AsyncQueryHandler
<android.content.AsyncQueryHandler: void <init>(android.content.ContentResolver)>
<android.content.AsyncQueryHandler: void cancelOperation(int)>
<android.content.AsyncQueryHandler: android.os.Handler createHandler(android.os.Looper)>
<android.content.AsyncQueryHandler: void onDeleteComplete(int,java.lang.Object,int)>
<android.content.AsyncQueryHandler: void onInsertComplete(int,java.lang.Object,android.net.Uri)>
<android.content.AsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)>
<android.content.AsyncQueryHandler: void onUpdateComplete(int,java.lang.Object,int)>
<android.content.AsyncQueryHandler: void startDelete(int,java.lang.Object,android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.AsyncQueryHandler: void startInsert(int,java.lang.Object,android.net.Uri,android.content.ContentValues)>
<android.content.AsyncQueryHandler: void startQuery(int,java.lang.Object,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.AsyncQueryHandler: void startUpdate(int,java.lang.Object,android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
android.content.AsyncQueryHandler$WorkerArgs
<android.content.AsyncQueryHandler$WorkerArgs: void <init>()>
<android.content.AsyncQueryHandler$WorkerArgs: java.lang.Object cookie>
<android.content.AsyncQueryHandler$WorkerArgs: android.os.Handler handler>
<android.content.AsyncQueryHandler$WorkerArgs: java.lang.String orderBy>
<android.content.AsyncQueryHandler$WorkerArgs: java.lang.String[] projection>
<android.content.AsyncQueryHandler$WorkerArgs: java.lang.Object result>
<android.content.AsyncQueryHandler$WorkerArgs: java.lang.String selection>
<android.content.AsyncQueryHandler$WorkerArgs: java.lang.String[] selectionArgs>
<android.content.AsyncQueryHandler$WorkerArgs: android.net.Uri uri>
<android.content.AsyncQueryHandler$WorkerArgs: android.content.ContentValues values>
android.content.AsyncQueryHandler$WorkerHandler
<android.content.AsyncQueryHandler$WorkerHandler: void <init>(android.content.AsyncQueryHandler,android.os.Looper)>
android.content.AsyncTaskLoader
<android.content.AsyncTaskLoader: void <init>(android.content.Context)>
<android.content.AsyncTaskLoader: void cancelLoadInBackground()>
<android.content.AsyncTaskLoader: boolean isLoadInBackgroundCanceled()>
<android.content.AsyncTaskLoader: java.lang.Object loadInBackground()>
<android.content.AsyncTaskLoader: void onCanceled(java.lang.Object)>
<android.content.AsyncTaskLoader: java.lang.Object onLoadInBackground()>
<android.content.AsyncTaskLoader: void setUpdateThrottle(long)>
android.content.AttributionSource
<android.content.AttributionSource: boolean checkCallingUid()>
<android.content.AttributionSource: int describeContents()>
<android.content.AttributionSource: void enforceCallingUid()>
<android.content.AttributionSource: java.lang.String getAttributionTag()>
<android.content.AttributionSource: android.content.AttributionSource getNext()>
<android.content.AttributionSource: java.lang.String getPackageName()>
<android.content.AttributionSource: int getUid()>
<android.content.AttributionSource: boolean isTrusted(android.content.Context)>
<android.content.AttributionSource: android.content.AttributionSource myAttributionSource()>
<android.content.AttributionSource: void writeToParcel(android.os.Parcel,int)>
<android.content.AttributionSource: android.os.Parcelable$Creator CREATOR>
android.content.AttributionSource$Builder
<android.content.AttributionSource$Builder: void <init>(int)>
<android.content.AttributionSource$Builder: void <init>(android.content.AttributionSource)>
<android.content.AttributionSource$Builder: android.content.AttributionSource build()>
<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setAttributionTag(java.lang.String)>
<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setNext(android.content.AttributionSource)>
<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setPackageName(java.lang.String)>
android.content.BroadcastReceiver
<android.content.BroadcastReceiver: void <init>()>
<android.content.BroadcastReceiver: void abortBroadcast()>
<android.content.BroadcastReceiver: void clearAbortBroadcast()>
<android.content.BroadcastReceiver: boolean getAbortBroadcast()>
<android.content.BroadcastReceiver: boolean getDebugUnregister()>
<android.content.BroadcastReceiver: int getResultCode()>
<android.content.BroadcastReceiver: java.lang.String getResultData()>
<android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)>
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()>
<android.content.BroadcastReceiver: boolean isInitialStickyBroadcast()>
<android.content.BroadcastReceiver: boolean isOrderedBroadcast()>
<android.content.BroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>
<android.content.BroadcastReceiver: android.os.IBinder peekService(android.content.Context,android.content.Intent)>
<android.content.BroadcastReceiver: void setDebugUnregister(boolean)>
<android.content.BroadcastReceiver: void setOrderedHint(boolean)>
<android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)>
<android.content.BroadcastReceiver: void setResultCode(int)>
<android.content.BroadcastReceiver: void setResultData(java.lang.String)>
<android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)>
android.content.BroadcastReceiver$PendingResult
<android.content.BroadcastReceiver$PendingResult: void abortBroadcast()>
<android.content.BroadcastReceiver$PendingResult: void clearAbortBroadcast()>
<android.content.BroadcastReceiver$PendingResult: void finish()>
<android.content.BroadcastReceiver$PendingResult: boolean getAbortBroadcast()>
<android.content.BroadcastReceiver$PendingResult: int getResultCode()>
<android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()>
<android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)>
<android.content.BroadcastReceiver$PendingResult: void setResult(int,java.lang.String,android.os.Bundle)>
<android.content.BroadcastReceiver$PendingResult: void setResultCode(int)>
<android.content.BroadcastReceiver$PendingResult: void setResultData(java.lang.String)>
<android.content.BroadcastReceiver$PendingResult: void setResultExtras(android.os.Bundle)>
android.content.ClipData
<android.content.ClipData: void <init>(java.lang.CharSequence,java.lang.String[],android.content.ClipData$Item)>
<android.content.ClipData: void <init>(android.content.ClipDescription,android.content.ClipData$Item)>
<android.content.ClipData: void <init>(android.content.ClipData)>
<android.content.ClipData: void addItem(android.content.ClipData$Item)>
<android.content.ClipData: void addItem(android.content.ContentResolver,android.content.ClipData$Item)>
<android.content.ClipData: int describeContents()>
<android.content.ClipData: android.content.ClipDescription getDescription()>
<android.content.ClipData: android.content.ClipData$Item getItemAt(int)>
<android.content.ClipData: int getItemCount()>
<android.content.ClipData: android.content.ClipData newHtmlText(java.lang.CharSequence,java.lang.CharSequence,java.lang.String)>
<android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)>
<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)>
<android.content.ClipData: android.content.ClipData newRawUri(java.lang.CharSequence,android.net.Uri)>
<android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver,java.lang.CharSequence,android.net.Uri)>
<android.content.ClipData: void writeToParcel(android.os.Parcel,int)>
<android.content.ClipData: android.os.Parcelable$Creator CREATOR>
android.content.ClipData$Item
<android.content.ClipData$Item: void <init>(java.lang.CharSequence)>
<android.content.ClipData$Item: void <init>(java.lang.CharSequence,java.lang.String)>
<android.content.ClipData$Item: void <init>(android.content.Intent)>
<android.content.ClipData$Item: void <init>(android.net.Uri)>
<android.content.ClipData$Item: void <init>(java.lang.CharSequence,android.content.Intent,android.net.Uri)>
<android.content.ClipData$Item: void <init>(java.lang.CharSequence,java.lang.String,android.content.Intent,android.net.Uri)>
<android.content.ClipData$Item: java.lang.String coerceToHtmlText(android.content.Context)>
<android.content.ClipData$Item: java.lang.CharSequence coerceToStyledText(android.content.Context)>
<android.content.ClipData$Item: java.lang.CharSequence coerceToText(android.content.Context)>
<android.content.ClipData$Item: java.lang.String getHtmlText()>
<android.content.ClipData$Item: android.content.Intent getIntent()>
<android.content.ClipData$Item: java.lang.CharSequence getText()>
<android.content.ClipData$Item: android.view.textclassifier.TextLinks getTextLinks()>
<android.content.ClipData$Item: android.net.Uri getUri()>
android.content.ClipDescription
<android.content.ClipDescription: void <init>(java.lang.CharSequence,java.lang.String[])>
<android.content.ClipDescription: void <init>(android.content.ClipDescription)>
<android.content.ClipDescription: boolean compareMimeTypes(java.lang.String,java.lang.String)>
<android.content.ClipDescription: int describeContents()>
<android.content.ClipDescription: java.lang.String[] filterMimeTypes(java.lang.String)>
<android.content.ClipDescription: int getClassificationStatus()>
<android.content.ClipDescription: float getConfidenceScore(java.lang.String)>
<android.content.ClipDescription: android.os.PersistableBundle getExtras()>
<android.content.ClipDescription: java.lang.CharSequence getLabel()>
<android.content.ClipDescription: java.lang.String getMimeType(int)>
<android.content.ClipDescription: int getMimeTypeCount()>
<android.content.ClipDescription: long getTimestamp()>
<android.content.ClipDescription: boolean hasMimeType(java.lang.String)>
<android.content.ClipDescription: boolean isStyledText()>
<android.content.ClipDescription: void setExtras(android.os.PersistableBundle)>
<android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)>
<android.content.ClipDescription: int CLASSIFICATION_COMPLETE>
<android.content.ClipDescription: int CLASSIFICATION_NOT_COMPLETE>
<android.content.ClipDescription: int CLASSIFICATION_NOT_PERFORMED>
<android.content.ClipDescription: android.os.Parcelable$Creator CREATOR>
<android.content.ClipDescription: java.lang.String EXTRA_IS_SENSITIVE>
<android.content.ClipDescription: java.lang.String MIMETYPE_TEXT_HTML>
<android.content.ClipDescription: java.lang.String MIMETYPE_TEXT_INTENT>
<android.content.ClipDescription: java.lang.String MIMETYPE_TEXT_PLAIN>
<android.content.ClipDescription: java.lang.String MIMETYPE_TEXT_URILIST>
<android.content.ClipDescription: java.lang.String MIMETYPE_UNKNOWN>
android.content.ClipboardManager
<android.content.ClipboardManager: void addPrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener)>
<android.content.ClipboardManager: void clearPrimaryClip()>
<android.content.ClipboardManager: android.content.ClipData getPrimaryClip()>
<android.content.ClipboardManager: android.content.ClipDescription getPrimaryClipDescription()>
<android.content.ClipboardManager: java.lang.CharSequence getText()>
<android.content.ClipboardManager: boolean hasPrimaryClip()>
<android.content.ClipboardManager: boolean hasText()>
<android.content.ClipboardManager: void removePrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener)>
<android.content.ClipboardManager: void setPrimaryClip(android.content.ClipData)>
<android.content.ClipboardManager: void setText(java.lang.CharSequence)>
android.content.ClipboardManager$OnPrimaryClipChangedListener
<android.content.ClipboardManager$OnPrimaryClipChangedListener: void onPrimaryClipChanged()>
android.content.ComponentCallbacks
<android.content.ComponentCallbacks: void onConfigurationChanged(android.content.res.Configuration)>
<android.content.ComponentCallbacks: void onLowMemory()>
android.content.ComponentCallbacks2
<android.content.ComponentCallbacks2: void onTrimMemory(int)>
<android.content.ComponentCallbacks2: int TRIM_MEMORY_BACKGROUND>
<android.content.ComponentCallbacks2: int TRIM_MEMORY_COMPLETE>
<android.content.ComponentCallbacks2: int TRIM_MEMORY_MODERATE>
<android.content.ComponentCallbacks2: int TRIM_MEMORY_RUNNING_CRITICAL>
<android.content.ComponentCallbacks2: int TRIM_MEMORY_RUNNING_LOW>
<android.content.ComponentCallbacks2: int TRIM_MEMORY_RUNNING_MODERATE>
<android.content.ComponentCallbacks2: int TRIM_MEMORY_UI_HIDDEN>
android.content.ComponentName
<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>
<android.content.ComponentName: void <init>(android.content.Context,java.lang.String)>
<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>
<android.content.ComponentName: void <init>(android.os.Parcel)>
<android.content.ComponentName: android.content.ComponentName clone()>
<android.content.ComponentName: int compareTo(android.content.ComponentName)>
<android.content.ComponentName: android.content.ComponentName createRelative(java.lang.String,java.lang.String)>
<android.content.ComponentName: android.content.ComponentName createRelative(android.content.Context,java.lang.String)>
<android.content.ComponentName: int describeContents()>
<android.content.ComponentName: java.lang.String flattenToShortString()>
<android.content.ComponentName: java.lang.String flattenToString()>
<android.content.ComponentName: java.lang.String getClassName()>
<android.content.ComponentName: java.lang.String getPackageName()>
<android.content.ComponentName: java.lang.String getShortClassName()>
<android.content.ComponentName: android.content.ComponentName readFromParcel(android.os.Parcel)>
<android.content.ComponentName: java.lang.String toShortString()>
<android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>
<android.content.ComponentName: void writeToParcel(android.os.Parcel,int)>
<android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)>
<android.content.ComponentName: android.os.Parcelable$Creator CREATOR>
android.content.ContentProvider
<android.content.ContentProvider: void <init>()>
<android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>
<android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>
<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>
<android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.ContentProvider: android.net.Uri canonicalize(android.net.Uri)>
<android.content.ContentProvider: android.content.ContentProvider$CallingIdentity clearCallingIdentity()>
<android.content.ContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.ContentProvider: int delete(android.net.Uri,android.os.Bundle)>
<android.content.ContentProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.content.ContentProvider: android.content.AttributionSource getCallingAttributionSource()>
<android.content.ContentProvider: java.lang.String getCallingAttributionTag()>
<android.content.ContentProvider: java.lang.String getCallingPackage()>
<android.content.ContentProvider: java.lang.String getCallingPackageUnchecked()>
<android.content.ContentProvider: android.content.Context getContext()>
<android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()>
<android.content.ContentProvider: java.lang.String getReadPermission()>
<android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.content.ContentProvider: java.lang.String getType(android.net.Uri)>
<android.content.ContentProvider: java.lang.String getWritePermission()>
<android.content.ContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.content.ContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>
<android.content.ContentProvider: boolean isTemporary()>
<android.content.ContentProvider: void onCallingPackageChanged()>
<android.content.ContentProvider: void onConfigurationChanged(android.content.res.Configuration)>
<android.content.ContentProvider: boolean onCreate()>
<android.content.ContentProvider: void onLowMemory()>
<android.content.ContentProvider: void onTrimMemory(int)>
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFileHelper(android.net.Uri,java.lang.String)>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)>
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentProvider: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentProvider: android.content.Context requireContext()>
<android.content.ContentProvider: void restoreCallingIdentity(android.content.ContentProvider$CallingIdentity)>
<android.content.ContentProvider: void setPathPermissions(android.content.pm.PathPermission[])>
<android.content.ContentProvider: void setReadPermission(java.lang.String)>
<android.content.ContentProvider: void setWritePermission(java.lang.String)>
<android.content.ContentProvider: void shutdown()>
<android.content.ContentProvider: android.net.Uri uncanonicalize(android.net.Uri)>
<android.content.ContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.ContentProvider: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>
android.content.ContentProvider$CallingIdentity
android.content.ContentProvider$PipeDataWriter
<android.content.ContentProvider$PipeDataWriter: void writeDataToPipe(android.os.ParcelFileDescriptor,android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object)>
android.content.ContentProviderClient
<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>
<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>
<android.content.ContentProviderClient: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.ContentProviderClient: android.net.Uri canonicalize(android.net.Uri)>
<android.content.ContentProviderClient: void close()>
<android.content.ContentProviderClient: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.ContentProviderClient: int delete(android.net.Uri,android.os.Bundle)>
<android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()>
<android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)>
<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentProviderClient: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentProviderClient: boolean release()>
<android.content.ContentProviderClient: android.net.Uri uncanonicalize(android.net.Uri)>
<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>
android.content.ContentProviderOperation
<android.content.ContentProviderOperation: android.content.ContentProviderResult apply(android.content.ContentProvider,android.content.ContentProviderResult[],int)>
<android.content.ContentProviderOperation: int describeContents()>
<android.content.ContentProviderOperation: android.net.Uri getUri()>
<android.content.ContentProviderOperation: boolean isAssertQuery()>
<android.content.ContentProviderOperation: boolean isCall()>
<android.content.ContentProviderOperation: boolean isDelete()>
<android.content.ContentProviderOperation: boolean isExceptionAllowed()>
<android.content.ContentProviderOperation: boolean isInsert()>
<android.content.ContentProviderOperation: boolean isReadOperation()>
<android.content.ContentProviderOperation: boolean isUpdate()>
<android.content.ContentProviderOperation: boolean isWriteOperation()>
<android.content.ContentProviderOperation: boolean isYieldAllowed()>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newAssertQuery(android.net.Uri)>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newCall(android.net.Uri,java.lang.String,java.lang.String)>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newDelete(android.net.Uri)>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newInsert(android.net.Uri)>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newUpdate(android.net.Uri)>
<android.content.ContentProviderOperation: android.os.Bundle resolveExtrasBackReferences(android.content.ContentProviderResult[],int)>
<android.content.ContentProviderOperation: java.lang.String[] resolveSelectionArgsBackReferences(android.content.ContentProviderResult[],int)>
<android.content.ContentProviderOperation: android.content.ContentValues resolveValueBackReferences(android.content.ContentProviderResult[],int)>
<android.content.ContentProviderOperation: void writeToParcel(android.os.Parcel,int)>
<android.content.ContentProviderOperation: android.os.Parcelable$Creator CREATOR>
android.content.ContentProviderOperation$Builder
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation build()>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withExceptionAllowed(boolean)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withExpectedCount(int)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withExtra(java.lang.String,java.lang.Object)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withExtraBackReference(java.lang.String,int)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withExtraBackReference(java.lang.String,int,java.lang.String)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withExtras(android.os.Bundle)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withSelection(java.lang.String,java.lang.String[])>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withSelectionBackReference(int,int)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withSelectionBackReference(int,int,java.lang.String)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValue(java.lang.String,java.lang.Object)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValueBackReference(java.lang.String,int)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValueBackReference(java.lang.String,int,java.lang.String)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValueBackReferences(android.content.ContentValues)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValues(android.content.ContentValues)>
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withYieldAllowed(boolean)>
android.content.ContentProviderResult
<android.content.ContentProviderResult: void <init>(android.net.Uri)>
<android.content.ContentProviderResult: void <init>(int)>
<android.content.ContentProviderResult: void <init>(android.os.Bundle)>
<android.content.ContentProviderResult: void <init>(java.lang.Throwable)>
<android.content.ContentProviderResult: void <init>(android.os.Parcel)>
<android.content.ContentProviderResult: int describeContents()>
<android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)>
<android.content.ContentProviderResult: android.os.Parcelable$Creator CREATOR>
<android.content.ContentProviderResult: java.lang.Integer count>
<android.content.ContentProviderResult: java.lang.Throwable exception>
<android.content.ContentProviderResult: android.os.Bundle extras>
<android.content.ContentProviderResult: android.net.Uri uri>
android.content.ContentQueryMap
<android.content.ContentQueryMap: void <init>(android.database.Cursor,java.lang.String,boolean,android.os.Handler)>
<android.content.ContentQueryMap: void close()>
<android.content.ContentQueryMap: java.util.Map getRows()>
<android.content.ContentQueryMap: android.content.ContentValues getValues(java.lang.String)>
<android.content.ContentQueryMap: void requery()>
<android.content.ContentQueryMap: void setKeepUpdated(boolean)>
android.content.ContentResolver
<android.content.ContentResolver: void <init>(android.content.Context)>
<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)>
<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)>
<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri)>
<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(java.lang.String)>
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
<android.content.ContentResolver: java.lang.Object addStatusChangeListener(int,android.content.SyncStatusObserver)>
<android.content.ContentResolver: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>
<android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: void cancelSync(android.net.Uri)>
<android.content.ContentResolver: void cancelSync(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: void cancelSync(android.content.SyncRequest)>
<android.content.ContentResolver: android.net.Uri canonicalize(android.net.Uri)>
<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.ContentResolver: int delete(android.net.Uri,android.os.Bundle)>
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>
<android.content.ContentResolver: java.util.List getCurrentSyncs()>
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: boolean getMasterSyncAutomatically()>
<android.content.ContentResolver: java.util.List getOutgoingPersistedUriPermissions()>
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: java.util.List getPersistedUriPermissions()>
<android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()>
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: java.lang.String getType(android.net.Uri)>
<android.content.ContentResolver: android.content.ContentResolver$MimeTypeInfo getTypeInfo(java.lang.String)>
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: android.graphics.Bitmap loadThumbnail(android.net.Uri,android.util.Size,android.os.CancellationSignal)>
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,int)>
<android.content.ContentResolver: void notifyChange(java.util.Collection,android.database.ContentObserver,int)>
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentResolver: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>
<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>
<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)>
<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)>
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentResolver: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>
<android.content.ContentResolver: void releasePersistableUriPermission(android.net.Uri,int)>
<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: void removeStatusChangeListener(java.lang.Object)>
<android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: void requestSync(android.content.SyncRequest)>
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)>
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
<android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)>
<android.content.ContentResolver: void takePersistableUriPermission(android.net.Uri,int)>
<android.content.ContentResolver: android.net.Uri uncanonicalize(android.net.Uri)>
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>
<android.content.ContentResolver: void validateSyncExtrasBundle(android.os.Bundle)>
<android.content.ContentResolver: android.content.ContentResolver wrap(android.content.ContentProvider)>
<android.content.ContentResolver: android.content.ContentResolver wrap(android.content.ContentProviderClient)>
<android.content.ContentResolver: java.lang.String ANY_CURSOR_ITEM_TYPE>
<android.content.ContentResolver: java.lang.String CURSOR_DIR_BASE_TYPE>
<android.content.ContentResolver: java.lang.String CURSOR_ITEM_BASE_TYPE>
<android.content.ContentResolver: java.lang.String EXTRA_HONORED_ARGS>
<android.content.ContentResolver: java.lang.String EXTRA_REFRESH_SUPPORTED>
<android.content.ContentResolver: java.lang.String EXTRA_SIZE>
<android.content.ContentResolver: java.lang.String EXTRA_TOTAL_COUNT>
<android.content.ContentResolver: int NOTIFY_DELETE>
<android.content.ContentResolver: int NOTIFY_INSERT>
<android.content.ContentResolver: int NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS>
<android.content.ContentResolver: int NOTIFY_SYNC_TO_NETWORK>
<android.content.ContentResolver: int NOTIFY_UPDATE>
<android.content.ContentResolver: java.lang.String QUERY_ARG_GROUP_COLUMNS>
<android.content.ContentResolver: java.lang.String QUERY_ARG_LIMIT>
<android.content.ContentResolver: java.lang.String QUERY_ARG_OFFSET>
<android.content.ContentResolver: java.lang.String QUERY_ARG_SORT_COLLATION>
<android.content.ContentResolver: java.lang.String QUERY_ARG_SORT_COLUMNS>
<android.content.ContentResolver: java.lang.String QUERY_ARG_SORT_DIRECTION>
<android.content.ContentResolver: java.lang.String QUERY_ARG_SORT_LOCALE>
<android.content.ContentResolver: java.lang.String QUERY_ARG_SQL_GROUP_BY>
<android.content.ContentResolver: java.lang.String QUERY_ARG_SQL_HAVING>
<android.content.ContentResolver: java.lang.String QUERY_ARG_SQL_LIMIT>
<android.content.ContentResolver: java.lang.String QUERY_ARG_SQL_SELECTION>
<android.content.ContentResolver: java.lang.String QUERY_ARG_SQL_SELECTION_ARGS>
<android.content.ContentResolver: java.lang.String QUERY_ARG_SQL_SORT_ORDER>
<android.content.ContentResolver: int QUERY_SORT_DIRECTION_ASCENDING>
<android.content.ContentResolver: int QUERY_SORT_DIRECTION_DESCENDING>
<android.content.ContentResolver: java.lang.String SCHEME_ANDROID_RESOURCE>
<android.content.ContentResolver: java.lang.String SCHEME_CONTENT>
<android.content.ContentResolver: java.lang.String SCHEME_FILE>
<android.content.ContentResolver: java.lang.String SYNC_EXTRAS_ACCOUNT>
<android.content.ContentResolver: java.lang.String SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS>
<android.content.ContentResolver: java.lang.String SYNC_EXTRAS_DO_NOT_RETRY>
<android.content.ContentResolver: java.lang.String SYNC_EXTRAS_EXPEDITED>
<android.content.ContentResolver: java.lang.String SYNC_EXTRAS_FORCE>
<android.content.ContentResolver: java.lang.String SYNC_EXTRAS_IGNORE_BACKOFF>
<android.content.ContentResolver: java.lang.String SYNC_EXTRAS_IGNORE_SETTINGS>
<android.content.ContentResolver: java.lang.String SYNC_EXTRAS_INITIALIZE>
<android.content.ContentResolver: java.lang.String SYNC_EXTRAS_MANUAL>
<android.content.ContentResolver: java.lang.String SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS>
<android.content.ContentResolver: java.lang.String SYNC_EXTRAS_REQUIRE_CHARGING>
<android.content.ContentResolver: java.lang.String SYNC_EXTRAS_SCHEDULE_AS_EXPEDITED_JOB>
<android.content.ContentResolver: java.lang.String SYNC_EXTRAS_UPLOAD>
<android.content.ContentResolver: int SYNC_OBSERVER_TYPE_ACTIVE>
<android.content.ContentResolver: int SYNC_OBSERVER_TYPE_PENDING>
<android.content.ContentResolver: int SYNC_OBSERVER_TYPE_SETTINGS>
android.content.ContentResolver$MimeTypeInfo
<android.content.ContentResolver$MimeTypeInfo: java.lang.CharSequence getContentDescription()>
<android.content.ContentResolver$MimeTypeInfo: android.graphics.drawable.Icon getIcon()>
<android.content.ContentResolver$MimeTypeInfo: java.lang.CharSequence getLabel()>
android.content.ContentUris
<android.content.ContentUris: void <init>()>
<android.content.ContentUris: android.net.Uri$Builder appendId(android.net.Uri$Builder,long)>
<android.content.ContentUris: long parseId(android.net.Uri)>
<android.content.ContentUris: android.net.Uri removeId(android.net.Uri)>
<android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>
android.content.ContentValues
<android.content.ContentValues: void <init>()>
<android.content.ContentValues: void <init>(int)>
<android.content.ContentValues: void <init>(android.content.ContentValues)>
<android.content.ContentValues: void clear()>
<android.content.ContentValues: boolean containsKey(java.lang.String)>
<android.content.ContentValues: int describeContents()>
<android.content.ContentValues: java.lang.Object get(java.lang.String)>
<android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)>
<android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)>
<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)>
<android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)>
<android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)>
<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>
<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>
<android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)>
<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>
<android.content.ContentValues: boolean isEmpty()>
<android.content.ContentValues: java.util.Set keySet()>
<android.content.ContentValues: void put(java.lang.String,java.lang.String)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Short)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Float)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>
<android.content.ContentValues: void put(java.lang.String,byte[])>
<android.content.ContentValues: void putAll(android.content.ContentValues)>
<android.content.ContentValues: void putNull(java.lang.String)>
<android.content.ContentValues: void remove(java.lang.String)>
<android.content.ContentValues: int size()>
<android.content.ContentValues: java.util.Set valueSet()>
<android.content.ContentValues: void writeToParcel(android.os.Parcel,int)>
<android.content.ContentValues: android.os.Parcelable$Creator CREATOR>
<android.content.ContentValues: java.lang.String TAG>
android.content.Context
<android.content.Context: void <init>()>
<android.content.Context: boolean bindIsolatedService(android.content.Intent,int,java.lang.String,java.util.concurrent.Executor,android.content.ServiceConnection)>
<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<android.content.Context: boolean bindService(android.content.Intent,int,java.util.concurrent.Executor,android.content.ServiceConnection)>
<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>
<android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri,int)>
<android.content.Context: int[] checkCallingOrSelfUriPermissions(java.util.List,int)>
<android.content.Context: int checkCallingPermission(java.lang.String)>
<android.content.Context: int checkCallingUriPermission(android.net.Uri,int)>
<android.content.Context: int[] checkCallingUriPermissions(java.util.List,int)>
<android.content.Context: int checkPermission(java.lang.String,int,int)>
<android.content.Context: int checkSelfPermission(java.lang.String)>
<android.content.Context: int checkUriPermission(android.net.Uri,int,int,int)>
<android.content.Context: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>
<android.content.Context: int[] checkUriPermissions(java.util.List,int,int,int)>
<android.content.Context: void clearWallpaper()>
<android.content.Context: android.content.Context createAttributionContext(java.lang.String)>
<android.content.Context: android.content.Context createConfigurationContext(android.content.res.Configuration)>
<android.content.Context: android.content.Context createContext(android.content.ContextParams)>
<android.content.Context: android.content.Context createContextForSplit(java.lang.String)>
<android.content.Context: android.content.Context createDeviceProtectedStorageContext()>
<android.content.Context: android.content.Context createDisplayContext(android.view.Display)>
<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>
<android.content.Context: android.content.Context createWindowContext(int,android.os.Bundle)>
<android.content.Context: android.content.Context createWindowContext(android.view.Display,int,android.os.Bundle)>
<android.content.Context: java.lang.String[] databaseList()>
<android.content.Context: boolean deleteDatabase(java.lang.String)>
<android.content.Context: boolean deleteFile(java.lang.String)>
<android.content.Context: boolean deleteSharedPreferences(java.lang.String)>
<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>
<android.content.Context: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>
<android.content.Context: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.Context: void enforcePermission(java.lang.String,int,int,java.lang.String)>
<android.content.Context: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>
<android.content.Context: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>
<android.content.Context: java.lang.String[] fileList()>
<android.content.Context: android.content.Context getApplicationContext()>
<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.content.Context: android.content.res.AssetManager getAssets()>
<android.content.Context: android.content.AttributionSource getAttributionSource()>
<android.content.Context: java.lang.String getAttributionTag()>
<android.content.Context: java.io.File getCacheDir()>
<android.content.Context: java.lang.ClassLoader getClassLoader()>
<android.content.Context: java.io.File getCodeCacheDir()>
<android.content.Context: int getColor(int)>
<android.content.Context: android.content.res.ColorStateList getColorStateList(int)>
<android.content.Context: android.content.ContentResolver getContentResolver()>
<android.content.Context: java.io.File getDataDir()>
<android.content.Context: java.io.File getDatabasePath(java.lang.String)>
<android.content.Context: java.io.File getDir(java.lang.String,int)>
<android.content.Context: android.view.Display getDisplay()>
<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>
<android.content.Context: java.io.File getExternalCacheDir()>
<android.content.Context: java.io.File[] getExternalCacheDirs()>
<android.content.Context: java.io.File getExternalFilesDir(java.lang.String)>
<android.content.Context: java.io.File[] getExternalFilesDirs(java.lang.String)>
<android.content.Context: java.io.File[] getExternalMediaDirs()>
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>
<android.content.Context: java.io.File getFilesDir()>
<android.content.Context: java.util.concurrent.Executor getMainExecutor()>
<android.content.Context: android.os.Looper getMainLooper()>
<android.content.Context: java.io.File getNoBackupFilesDir()>
<android.content.Context: java.io.File getObbDir()>
<android.content.Context: java.io.File[] getObbDirs()>
<android.content.Context: java.lang.String getOpPackageName()>
<android.content.Context: java.lang.String getPackageCodePath()>
<android.content.Context: android.content.pm.PackageManager getPackageManager()>
<android.content.Context: java.lang.String getPackageName()>
<android.content.Context: java.lang.String getPackageResourcePath()>
<android.content.Context: android.content.ContextParams getParams()>
<android.content.Context: android.content.res.Resources getResources()>
<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
<android.content.Context: java.lang.String getString(int)>
<android.content.Context: java.lang.String getString(int,java.lang.Object[])>
<android.content.Context: java.lang.Object getSystemService(java.lang.String)>
<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>
<android.content.Context: java.lang.String getSystemServiceName(java.lang.Class)>
<android.content.Context: java.lang.CharSequence getText(int)>
<android.content.Context: android.content.res.Resources$Theme getTheme()>
<android.content.Context: android.graphics.drawable.Drawable getWallpaper()>
<android.content.Context: int getWallpaperDesiredMinimumHeight()>
<android.content.Context: int getWallpaperDesiredMinimumWidth()>
<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>
<android.content.Context: boolean isDeviceProtectedStorage()>
<android.content.Context: boolean isRestricted()>
<android.content.Context: boolean isUiContext()>
<android.content.Context: boolean moveDatabaseFrom(android.content.Context,java.lang.String)>
<android.content.Context: boolean moveSharedPreferencesFrom(android.content.Context,java.lang.String)>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int,int[])>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>
<android.content.Context: android.graphics.drawable.Drawable peekWallpaper()>
<android.content.Context: void registerComponentCallbacks(android.content.ComponentCallbacks)>
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,int)>
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)>
<android.content.Context: void removeStickyBroadcast(android.content.Intent)>
<android.content.Context: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.Context: void revokeSelfPermissionOnKill(java.lang.String)>
<android.content.Context: void revokeSelfPermissionsOnKill(java.util.Collection)>
<android.content.Context: void revokeUriPermission(android.net.Uri,int)>
<android.content.Context: void revokeUriPermission(java.lang.String,android.net.Uri,int)>
<android.content.Context: void sendBroadcast(android.content.Intent)>
<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>
<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>
<android.content.Context: void sendBroadcastWithMultiplePermissions(android.content.Intent,java.lang.String[])>
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.Context: void sendStickyBroadcast(android.content.Intent)>
<android.content.Context: void sendStickyBroadcast(android.content.Intent,android.os.Bundle)>
<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.Context: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.Context: void setTheme(int)>
<android.content.Context: void setWallpaper(android.graphics.Bitmap)>
<android.content.Context: void setWallpaper(java.io.InputStream)>
<android.content.Context: void startActivities(android.content.Intent[])>
<android.content.Context: void startActivities(android.content.Intent[],android.os.Bundle)>
<android.content.Context: void startActivity(android.content.Intent)>
<android.content.Context: void startActivity(android.content.Intent,android.os.Bundle)>
<android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>
<android.content.Context: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>
<android.content.Context: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>
<android.content.Context: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>
<android.content.Context: android.content.ComponentName startService(android.content.Intent)>
<android.content.Context: boolean stopService(android.content.Intent)>
<android.content.Context: void unbindService(android.content.ServiceConnection)>
<android.content.Context: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>
<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>
<android.content.Context: void updateServiceGroup(android.content.ServiceConnection,int,int)>
<android.content.Context: java.lang.String ACCESSIBILITY_SERVICE>
<android.content.Context: java.lang.String ACCOUNT_SERVICE>
<android.content.Context: java.lang.String ACTIVITY_SERVICE>
<android.content.Context: java.lang.String ALARM_SERVICE>
<android.content.Context: java.lang.String APPWIDGET_SERVICE>
<android.content.Context: java.lang.String APP_OPS_SERVICE>
<android.content.Context: java.lang.String APP_SEARCH_SERVICE>
<android.content.Context: java.lang.String AUDIO_SERVICE>
<android.content.Context: java.lang.String BATTERY_SERVICE>
<android.content.Context: int BIND_ABOVE_CLIENT>
<android.content.Context: int BIND_ADJUST_WITH_ACTIVITY>
<android.content.Context: int BIND_ALLOW_OOM_MANAGEMENT>
<android.content.Context: int BIND_AUTO_CREATE>
<android.content.Context: int BIND_DEBUG_UNBIND>
<android.content.Context: int BIND_EXTERNAL_SERVICE>
<android.content.Context: int BIND_IMPORTANT>
<android.content.Context: int BIND_INCLUDE_CAPABILITIES>
<android.content.Context: int BIND_NOT_FOREGROUND>
<android.content.Context: int BIND_NOT_PERCEPTIBLE>
<android.content.Context: int BIND_WAIVE_PRIORITY>
<android.content.Context: java.lang.String BIOMETRIC_SERVICE>
<android.content.Context: java.lang.String BLOB_STORE_SERVICE>
<android.content.Context: java.lang.String BLUETOOTH_SERVICE>
<android.content.Context: java.lang.String BUGREPORT_SERVICE>
<android.content.Context: java.lang.String CAMERA_SERVICE>
<android.content.Context: java.lang.String CAPTIONING_SERVICE>
<android.content.Context: java.lang.String CARRIER_CONFIG_SERVICE>
<android.content.Context: java.lang.String CLIPBOARD_SERVICE>
<android.content.Context: java.lang.String COMPANION_DEVICE_SERVICE>
<android.content.Context: java.lang.String CONNECTIVITY_DIAGNOSTICS_SERVICE>
<android.content.Context: java.lang.String CONNECTIVITY_SERVICE>
<android.content.Context: java.lang.String CONSUMER_IR_SERVICE>
<android.content.Context: int CONTEXT_IGNORE_SECURITY>
<android.content.Context: int CONTEXT_INCLUDE_CODE>
<android.content.Context: int CONTEXT_RESTRICTED>
<android.content.Context: java.lang.String CROSS_PROFILE_APPS_SERVICE>
<android.content.Context: java.lang.String DEVICE_POLICY_SERVICE>
<android.content.Context: java.lang.String DISPLAY_HASH_SERVICE>
<android.content.Context: java.lang.String DISPLAY_SERVICE>
<android.content.Context: java.lang.String DOMAIN_VERIFICATION_SERVICE>
<android.content.Context: java.lang.String DOWNLOAD_SERVICE>
<android.content.Context: java.lang.String DROPBOX_SERVICE>
<android.content.Context: java.lang.String EUICC_SERVICE>
<android.content.Context: java.lang.String FILE_INTEGRITY_SERVICE>
<android.content.Context: java.lang.String FINGERPRINT_SERVICE>
<android.content.Context: java.lang.String GAME_SERVICE>
<android.content.Context: java.lang.String HARDWARE_PROPERTIES_SERVICE>
<android.content.Context: java.lang.String INPUT_METHOD_SERVICE>
<android.content.Context: java.lang.String INPUT_SERVICE>
<android.content.Context: java.lang.String IPSEC_SERVICE>
<android.content.Context: java.lang.String JOB_SCHEDULER_SERVICE>
<android.content.Context: java.lang.String KEYGUARD_SERVICE>
<android.content.Context: java.lang.String LAUNCHER_APPS_SERVICE>
<android.content.Context: java.lang.String LAYOUT_INFLATER_SERVICE>
<android.content.Context: java.lang.String LOCALE_SERVICE>
<android.content.Context: java.lang.String LOCATION_SERVICE>
<android.content.Context: java.lang.String MEDIA_COMMUNICATION_SERVICE>
<android.content.Context: java.lang.String MEDIA_METRICS_SERVICE>
<android.content.Context: java.lang.String MEDIA_PROJECTION_SERVICE>
<android.content.Context: java.lang.String MEDIA_ROUTER_SERVICE>
<android.content.Context: java.lang.String MEDIA_SESSION_SERVICE>
<android.content.Context: java.lang.String MIDI_SERVICE>
<android.content.Context: int MODE_APPEND>
<android.content.Context: int MODE_ENABLE_WRITE_AHEAD_LOGGING>
<android.content.Context: int MODE_MULTI_PROCESS>
<android.content.Context: int MODE_NO_LOCALIZED_COLLATORS>
<android.content.Context: int MODE_PRIVATE>
<android.content.Context: int MODE_WORLD_READABLE>
<android.content.Context: int MODE_WORLD_WRITEABLE>
<android.content.Context: java.lang.String NETWORK_STATS_SERVICE>
<android.content.Context: java.lang.String NFC_SERVICE>
<android.content.Context: java.lang.String NOTIFICATION_SERVICE>
<android.content.Context: java.lang.String NSD_SERVICE>
<android.content.Context: java.lang.String PEOPLE_SERVICE>
<android.content.Context: java.lang.String PERFORMANCE_HINT_SERVICE>
<android.content.Context: java.lang.String POWER_SERVICE>
<android.content.Context: java.lang.String PRINT_SERVICE>
<android.content.Context: int RECEIVER_EXPORTED>
<android.content.Context: int RECEIVER_NOT_EXPORTED>
<android.content.Context: int RECEIVER_VISIBLE_TO_INSTANT_APPS>
<android.content.Context: java.lang.String RESTRICTIONS_SERVICE>
<android.content.Context: java.lang.String ROLE_SERVICE>
<android.content.Context: java.lang.String SEARCH_SERVICE>
<android.content.Context: java.lang.String SENSOR_SERVICE>
<android.content.Context: java.lang.String SHORTCUT_SERVICE>
<android.content.Context: java.lang.String STATUS_BAR_SERVICE>
<android.content.Context: java.lang.String STORAGE_SERVICE>
<android.content.Context: java.lang.String STORAGE_STATS_SERVICE>
<android.content.Context: java.lang.String SYSTEM_HEALTH_SERVICE>
<android.content.Context: java.lang.String TELECOM_SERVICE>
<android.content.Context: java.lang.String TELEPHONY_IMS_SERVICE>
<android.content.Context: java.lang.String TELEPHONY_SERVICE>
<android.content.Context: java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE>
<android.content.Context: java.lang.String TEXT_CLASSIFICATION_SERVICE>
<android.content.Context: java.lang.String TEXT_SERVICES_MANAGER_SERVICE>
<android.content.Context: java.lang.String TV_INPUT_SERVICE>
<android.content.Context: java.lang.String TV_INTERACTIVE_APP_SERVICE>
<android.content.Context: java.lang.String UI_MODE_SERVICE>
<android.content.Context: java.lang.String USAGE_STATS_SERVICE>
<android.content.Context: java.lang.String USB_SERVICE>
<android.content.Context: java.lang.String USER_SERVICE>
<android.content.Context: java.lang.String VIBRATOR_MANAGER_SERVICE>
<android.content.Context: java.lang.String VIBRATOR_SERVICE>
<android.content.Context: java.lang.String VPN_MANAGEMENT_SERVICE>
<android.content.Context: java.lang.String WALLPAPER_SERVICE>
<android.content.Context: java.lang.String WIFI_AWARE_SERVICE>
<android.content.Context: java.lang.String WIFI_P2P_SERVICE>
<android.content.Context: java.lang.String WIFI_RTT_RANGING_SERVICE>
<android.content.Context: java.lang.String WIFI_SERVICE>
<android.content.Context: java.lang.String WINDOW_SERVICE>
android.content.ContextParams
<android.content.ContextParams: java.lang.String getAttributionTag()>
<android.content.ContextParams: android.content.AttributionSource getNextAttributionSource()>
android.content.ContextParams$Builder
<android.content.ContextParams$Builder: void <init>()>
<android.content.ContextParams$Builder: void <init>(android.content.ContextParams)>
<android.content.ContextParams$Builder: android.content.ContextParams build()>
<android.content.ContextParams$Builder: android.content.ContextParams$Builder setAttributionTag(java.lang.String)>
<android.content.ContextParams$Builder: android.content.ContextParams$Builder setNextAttributionSource(android.content.AttributionSource)>
android.content.ContextWrapper
<android.content.ContextWrapper: void <init>(android.content.Context)>
<android.content.ContextWrapper: void attachBaseContext(android.content.Context)>
<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<android.content.ContextWrapper: int checkCallingOrSelfPermission(java.lang.String)>
<android.content.ContextWrapper: int checkCallingOrSelfUriPermission(android.net.Uri,int)>
<android.content.ContextWrapper: int checkCallingPermission(java.lang.String)>
<android.content.ContextWrapper: int checkCallingUriPermission(android.net.Uri,int)>
<android.content.ContextWrapper: int checkPermission(java.lang.String,int,int)>
<android.content.ContextWrapper: int checkSelfPermission(java.lang.String)>
<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,int,int,int)>
<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>
<android.content.ContextWrapper: void clearWallpaper()>
<android.content.ContextWrapper: android.content.Context createConfigurationContext(android.content.res.Configuration)>
<android.content.ContextWrapper: android.content.Context createContextForSplit(java.lang.String)>
<android.content.ContextWrapper: android.content.Context createDeviceProtectedStorageContext()>
<android.content.ContextWrapper: android.content.Context createDisplayContext(android.view.Display)>
<android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)>
<android.content.ContextWrapper: java.lang.String[] databaseList()>
<android.content.ContextWrapper: boolean deleteDatabase(java.lang.String)>
<android.content.ContextWrapper: boolean deleteFile(java.lang.String)>
<android.content.ContextWrapper: boolean deleteSharedPreferences(java.lang.String)>
<android.content.ContextWrapper: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>
<android.content.ContextWrapper: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.ContextWrapper: void enforceCallingPermission(java.lang.String,java.lang.String)>
<android.content.ContextWrapper: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.ContextWrapper: void enforcePermission(java.lang.String,int,int,java.lang.String)>
<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>
<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>
<android.content.ContextWrapper: java.lang.String[] fileList()>
<android.content.ContextWrapper: android.content.Context getApplicationContext()>
<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.content.ContextWrapper: android.content.res.AssetManager getAssets()>
<android.content.ContextWrapper: android.content.Context getBaseContext()>
<android.content.ContextWrapper: java.io.File getCacheDir()>
<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()>
<android.content.ContextWrapper: java.io.File getCodeCacheDir()>
<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>
<android.content.ContextWrapper: java.io.File getDataDir()>
<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)>
<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)>
<android.content.ContextWrapper: java.io.File getExternalCacheDir()>
<android.content.ContextWrapper: java.io.File[] getExternalCacheDirs()>
<android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)>
<android.content.ContextWrapper: java.io.File[] getExternalFilesDirs(java.lang.String)>
<android.content.ContextWrapper: java.io.File[] getExternalMediaDirs()>
<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)>
<android.content.ContextWrapper: java.io.File getFilesDir()>
<android.content.ContextWrapper: android.os.Looper getMainLooper()>
<android.content.ContextWrapper: java.io.File getNoBackupFilesDir()>
<android.content.ContextWrapper: java.io.File getObbDir()>
<android.content.ContextWrapper: java.io.File[] getObbDirs()>
<android.content.ContextWrapper: java.lang.String getPackageCodePath()>
<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>
<android.content.ContextWrapper: java.lang.String getPackageName()>
<android.content.ContextWrapper: java.lang.String getPackageResourcePath()>
<android.content.ContextWrapper: android.content.res.Resources getResources()>
<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
<android.content.ContextWrapper: java.lang.String getSystemServiceName(java.lang.Class)>
<android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()>
<android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()>
<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()>
<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>
<android.content.ContextWrapper: void grantUriPermission(java.lang.String,android.net.Uri,int)>
<android.content.ContextWrapper: boolean isDeviceProtectedStorage()>
<android.content.ContextWrapper: boolean moveDatabaseFrom(android.content.Context,java.lang.String)>
<android.content.ContextWrapper: boolean moveSharedPreferencesFrom(android.content.Context,java.lang.String)>
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>
<android.content.ContextWrapper: android.graphics.drawable.Drawable peekWallpaper()>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,int)>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)>
<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.ContextWrapper: void revokeUriPermission(android.net.Uri,int)>
<android.content.ContextWrapper: void revokeUriPermission(java.lang.String,android.net.Uri,int)>
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)>
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,int,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,java.lang.String,android.os.Bundle,android.os.Bundle)>
<android.content.ContextWrapper: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void setTheme(int)>
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>
<android.content.ContextWrapper: void startActivities(android.content.Intent[])>
<android.content.ContextWrapper: void startActivities(android.content.Intent[],android.os.Bundle)>
<android.content.ContextWrapper: void startActivity(android.content.Intent)>
<android.content.ContextWrapper: void startActivity(android.content.Intent,android.os.Bundle)>
<android.content.ContextWrapper: android.content.ComponentName startForegroundService(android.content.Intent)>
<android.content.ContextWrapper: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>
<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
<android.content.ContextWrapper: boolean stopService(android.content.Intent)>
<android.content.ContextWrapper: void unbindService(android.content.ServiceConnection)>
<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>
android.content.CursorLoader
<android.content.CursorLoader: void <init>(android.content.Context)>
<android.content.CursorLoader: void <init>(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.CursorLoader: void deliverResult(android.database.Cursor)>
<android.content.CursorLoader: java.lang.String[] getProjection()>
<android.content.CursorLoader: java.lang.String getSelection()>
<android.content.CursorLoader: java.lang.String[] getSelectionArgs()>
<android.content.CursorLoader: java.lang.String getSortOrder()>
<android.content.CursorLoader: android.net.Uri getUri()>
<android.content.CursorLoader: android.database.Cursor loadInBackground()>
<android.content.CursorLoader: void onCanceled(android.database.Cursor)>
<android.content.CursorLoader: void setProjection(java.lang.String[])>
<android.content.CursorLoader: void setSelection(java.lang.String)>
<android.content.CursorLoader: void setSelectionArgs(java.lang.String[])>
<android.content.CursorLoader: void setSortOrder(java.lang.String)>
<android.content.CursorLoader: void setUri(android.net.Uri)>
android.content.DialogInterface
<android.content.DialogInterface: void cancel()>
<android.content.DialogInterface: void dismiss()>
<android.content.DialogInterface: int BUTTON1>
<android.content.DialogInterface: int BUTTON2>
<android.content.DialogInterface: int BUTTON3>
<android.content.DialogInterface: int BUTTON_NEGATIVE>
<android.content.DialogInterface: int BUTTON_NEUTRAL>
<android.content.DialogInterface: int BUTTON_POSITIVE>
android.content.DialogInterface$OnCancelListener
<android.content.DialogInterface$OnCancelListener: void onCancel(android.content.DialogInterface)>
android.content.DialogInterface$OnClickListener
<android.content.DialogInterface$OnClickListener: void onClick(android.content.DialogInterface,int)>
android.content.DialogInterface$OnDismissListener
<android.content.DialogInterface$OnDismissListener: void onDismiss(android.content.DialogInterface)>
android.content.DialogInterface$OnKeyListener
<android.content.DialogInterface$OnKeyListener: boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent)>
android.content.DialogInterface$OnMultiChoiceClickListener
<android.content.DialogInterface$OnMultiChoiceClickListener: void onClick(android.content.DialogInterface,int,boolean)>
android.content.DialogInterface$OnShowListener
<android.content.DialogInterface$OnShowListener: void onShow(android.content.DialogInterface)>
android.content.Entity
<android.content.Entity: void <init>(android.content.ContentValues)>
<android.content.Entity: void addSubValue(android.net.Uri,android.content.ContentValues)>
<android.content.Entity: android.content.ContentValues getEntityValues()>
<android.content.Entity: java.util.ArrayList getSubValues()>
android.content.Entity$NamedContentValues
<android.content.Entity$NamedContentValues: void <init>(android.net.Uri,android.content.ContentValues)>
<android.content.Entity$NamedContentValues: android.net.Uri uri>
<android.content.Entity$NamedContentValues: android.content.ContentValues values>
android.content.EntityIterator
<android.content.EntityIterator: void close()>
<android.content.EntityIterator: void reset()>
android.content.Intent
<android.content.Intent: void <init>()>
<android.content.Intent: void <init>(android.content.Intent)>
<android.content.Intent: void <init>(java.lang.String)>
<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent addCategory(java.lang.String)>
<android.content.Intent: android.content.Intent addFlags(int)>
<android.content.Intent: java.lang.Object clone()>
<android.content.Intent: android.content.Intent cloneFilter()>
<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)>
<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence,android.content.IntentSender)>
<android.content.Intent: int describeContents()>
<android.content.Intent: int fillIn(android.content.Intent,int)>
<android.content.Intent: boolean filterEquals(android.content.Intent)>
<android.content.Intent: int filterHashCode()>
<android.content.Intent: java.lang.String getAction()>
<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)>
<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>
<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)>
<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)>
<android.content.Intent: byte getByteExtra(java.lang.String,byte)>
<android.content.Intent: java.util.Set getCategories()>
<android.content.Intent: char[] getCharArrayExtra(java.lang.String)>
<android.content.Intent: char getCharExtra(java.lang.String,char)>
<android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)>
<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)>
<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)>
<android.content.Intent: android.content.ClipData getClipData()>
<android.content.Intent: android.content.ComponentName getComponent()>
<android.content.Intent: android.net.Uri getData()>
<android.content.Intent: java.lang.String getDataString()>
<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)>
<android.content.Intent: double getDoubleExtra(java.lang.String,double)>
<android.content.Intent: android.os.Bundle getExtras()>
<android.content.Intent: int getFlags()>
<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)>
<android.content.Intent: float getFloatExtra(java.lang.String,float)>
<android.content.Intent: java.lang.String getIdentifier()>
<android.content.Intent: int[] getIntArrayExtra(java.lang.String)>
<android.content.Intent: int getIntExtra(java.lang.String,int)>
<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)>
<android.content.Intent: android.content.Intent getIntent(java.lang.String)>
<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)>
<android.content.Intent: long[] getLongArrayExtra(java.lang.String)>
<android.content.Intent: long getLongExtra(java.lang.String,long)>
<android.content.Intent: java.lang.String getPackage()>
<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)>
<android.content.Intent: java.lang.Object[] getParcelableArrayExtra(java.lang.String,java.lang.Class)>
<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)>
<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String,java.lang.Class)>
<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)>
<android.content.Intent: java.lang.Object getParcelableExtra(java.lang.String,java.lang.Class)>
<android.content.Intent: java.lang.String getScheme()>
<android.content.Intent: android.content.Intent getSelector()>
<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)>
<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String,java.lang.Class)>
<android.content.Intent: short[] getShortArrayExtra(java.lang.String)>
<android.content.Intent: short getShortExtra(java.lang.String,short)>
<android.content.Intent: android.graphics.Rect getSourceBounds()>
<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)>
<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)>
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>
<android.content.Intent: java.lang.String getType()>
<android.content.Intent: boolean hasCategory(java.lang.String)>
<android.content.Intent: boolean hasExtra(java.lang.String)>
<android.content.Intent: boolean hasFileDescriptors()>
<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)>
<android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)>
<android.content.Intent: java.lang.String normalizeMimeType(java.lang.String)>
<android.content.Intent: android.content.Intent parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.content.Intent: android.content.Intent parseUri(java.lang.String,int)>
<android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>
<android.content.Intent: android.content.Intent putExtras(android.content.Intent)>
<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>
<android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: void readFromParcel(android.os.Parcel)>
<android.content.Intent: void removeCategory(java.lang.String)>
<android.content.Intent: void removeExtra(java.lang.String)>
<android.content.Intent: void removeFlags(int)>
<android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)>
<android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)>
<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>
<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)>
<android.content.Intent: java.lang.String resolveType(android.content.Context)>
<android.content.Intent: java.lang.String resolveType(android.content.ContentResolver)>
<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>
<android.content.Intent: android.content.Intent setAction(java.lang.String)>
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>
<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>
<android.content.Intent: void setClipData(android.content.ClipData)>
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>
<android.content.Intent: android.content.Intent setData(android.net.Uri)>
<android.content.Intent: android.content.Intent setDataAndNormalize(android.net.Uri)>
<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>
<android.content.Intent: android.content.Intent setDataAndTypeAndNormalize(android.net.Uri,java.lang.String)>
<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)>
<android.content.Intent: android.content.Intent setFlags(int)>
<android.content.Intent: android.content.Intent setIdentifier(java.lang.String)>
<android.content.Intent: android.content.Intent setPackage(java.lang.String)>
<android.content.Intent: void setSelector(android.content.Intent)>
<android.content.Intent: void setSourceBounds(android.graphics.Rect)>
<android.content.Intent: android.content.Intent setType(java.lang.String)>
<android.content.Intent: android.content.Intent setTypeAndNormalize(java.lang.String)>
<android.content.Intent: java.lang.String toURI()>
<android.content.Intent: java.lang.String toUri(int)>
<android.content.Intent: void writeToParcel(android.os.Parcel,int)>
<android.content.Intent: java.lang.String ACTION_AIRPLANE_MODE_CHANGED>
<android.content.Intent: java.lang.String ACTION_ALL_APPS>
<android.content.Intent: java.lang.String ACTION_ANSWER>
<android.content.Intent: java.lang.String ACTION_APPLICATION_LOCALE_CHANGED>
<android.content.Intent: java.lang.String ACTION_APPLICATION_PREFERENCES>
<android.content.Intent: java.lang.String ACTION_APPLICATION_RESTRICTIONS_CHANGED>
<android.content.Intent: java.lang.String ACTION_APP_ERROR>
<android.content.Intent: java.lang.String ACTION_ASSIST>
<android.content.Intent: java.lang.String ACTION_ATTACH_DATA>
<android.content.Intent: java.lang.String ACTION_AUTO_REVOKE_PERMISSIONS>
<android.content.Intent: java.lang.String ACTION_BATTERY_CHANGED>
<android.content.Intent: java.lang.String ACTION_BATTERY_LOW>
<android.content.Intent: java.lang.String ACTION_BATTERY_OKAY>
<android.content.Intent: java.lang.String ACTION_BOOT_COMPLETED>
<android.content.Intent: java.lang.String ACTION_BUG_REPORT>
<android.content.Intent: java.lang.String ACTION_CALL>
<android.content.Intent: java.lang.String ACTION_CALL_BUTTON>
<android.content.Intent: java.lang.String ACTION_CAMERA_BUTTON>
<android.content.Intent: java.lang.String ACTION_CARRIER_SETUP>
<android.content.Intent: java.lang.String ACTION_CHOOSER>
<android.content.Intent: java.lang.String ACTION_CLOSE_SYSTEM_DIALOGS>
<android.content.Intent: java.lang.String ACTION_CONFIGURATION_CHANGED>
<android.content.Intent: java.lang.String ACTION_CREATE_DOCUMENT>
<android.content.Intent: java.lang.String ACTION_CREATE_REMINDER>
<android.content.Intent: java.lang.String ACTION_CREATE_SHORTCUT>
<android.content.Intent: java.lang.String ACTION_DATE_CHANGED>
<android.content.Intent: java.lang.String ACTION_DEFAULT>
<android.content.Intent: java.lang.String ACTION_DEFINE>
<android.content.Intent: java.lang.String ACTION_DELETE>
<android.content.Intent: java.lang.String ACTION_DEVICE_STORAGE_LOW>
<android.content.Intent: java.lang.String ACTION_DEVICE_STORAGE_OK>
<android.content.Intent: java.lang.String ACTION_DIAL>
<android.content.Intent: java.lang.String ACTION_DOCK_EVENT>
<android.content.Intent: java.lang.String ACTION_DREAMING_STARTED>
<android.content.Intent: java.lang.String ACTION_DREAMING_STOPPED>
<android.content.Intent: java.lang.String ACTION_EDIT>
<android.content.Intent: java.lang.String ACTION_EXTERNAL_APPLICATIONS_AVAILABLE>
<android.content.Intent: java.lang.String ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE>
<android.content.Intent: java.lang.String ACTION_FACTORY_TEST>
<android.content.Intent: java.lang.String ACTION_GET_CONTENT>
<android.content.Intent: java.lang.String ACTION_GET_RESTRICTION_ENTRIES>
<android.content.Intent: java.lang.String ACTION_GTALK_SERVICE_CONNECTED>
<android.content.Intent: java.lang.String ACTION_GTALK_SERVICE_DISCONNECTED>
<android.content.Intent: java.lang.String ACTION_HEADSET_PLUG>
<android.content.Intent: java.lang.String ACTION_INPUT_METHOD_CHANGED>
<android.content.Intent: java.lang.String ACTION_INSERT>
<android.content.Intent: java.lang.String ACTION_INSERT_OR_EDIT>
<android.content.Intent: java.lang.String ACTION_INSTALL_FAILURE>
<android.content.Intent: java.lang.String ACTION_INSTALL_PACKAGE>
<android.content.Intent: java.lang.String ACTION_LOCALE_CHANGED>
<android.content.Intent: java.lang.String ACTION_LOCKED_BOOT_COMPLETED>
<android.content.Intent: java.lang.String ACTION_MAIN>
<android.content.Intent: java.lang.String ACTION_MANAGED_PROFILE_ADDED>
<android.content.Intent: java.lang.String ACTION_MANAGED_PROFILE_AVAILABLE>
<android.content.Intent: java.lang.String ACTION_MANAGED_PROFILE_REMOVED>
<android.content.Intent: java.lang.String ACTION_MANAGED_PROFILE_UNAVAILABLE>
<android.content.Intent: java.lang.String ACTION_MANAGED_PROFILE_UNLOCKED>
<android.content.Intent: java.lang.String ACTION_MANAGE_NETWORK_USAGE>
<android.content.Intent: java.lang.String ACTION_MANAGE_PACKAGE_STORAGE>
<android.content.Intent: java.lang.String ACTION_MANAGE_UNUSED_APPS>
<android.content.Intent: java.lang.String ACTION_MEDIA_BAD_REMOVAL>
<android.content.Intent: java.lang.String ACTION_MEDIA_BUTTON>
<android.content.Intent: java.lang.String ACTION_MEDIA_CHECKING>
<android.content.Intent: java.lang.String ACTION_MEDIA_EJECT>
<android.content.Intent: java.lang.String ACTION_MEDIA_MOUNTED>
<android.content.Intent: java.lang.String ACTION_MEDIA_NOFS>
<android.content.Intent: java.lang.String ACTION_MEDIA_REMOVED>
<android.content.Intent: java.lang.String ACTION_MEDIA_SCANNER_FINISHED>
<android.content.Intent: java.lang.String ACTION_MEDIA_SCANNER_SCAN_FILE>
<android.content.Intent: java.lang.String ACTION_MEDIA_SCANNER_STARTED>
<android.content.Intent: java.lang.String ACTION_MEDIA_SHARED>
<android.content.Intent: java.lang.String ACTION_MEDIA_UNMOUNTABLE>
<android.content.Intent: java.lang.String ACTION_MEDIA_UNMOUNTED>
<android.content.Intent: java.lang.String ACTION_MY_PACKAGE_REPLACED>
<android.content.Intent: java.lang.String ACTION_MY_PACKAGE_SUSPENDED>
<android.content.Intent: java.lang.String ACTION_MY_PACKAGE_UNSUSPENDED>
<android.content.Intent: java.lang.String ACTION_NEW_OUTGOING_CALL>
<android.content.Intent: java.lang.String ACTION_OPEN_DOCUMENT>
<android.content.Intent: java.lang.String ACTION_OPEN_DOCUMENT_TREE>
<android.content.Intent: java.lang.String ACTION_PACKAGES_SUSPENDED>
<android.content.Intent: java.lang.String ACTION_PACKAGES_UNSUSPENDED>
<android.content.Intent: java.lang.String ACTION_PACKAGE_ADDED>
<android.content.Intent: java.lang.String ACTION_PACKAGE_CHANGED>
<android.content.Intent: java.lang.String ACTION_PACKAGE_DATA_CLEARED>
<android.content.Intent: java.lang.String ACTION_PACKAGE_FIRST_LAUNCH>
<android.content.Intent: java.lang.String ACTION_PACKAGE_FULLY_REMOVED>
<android.content.Intent: java.lang.String ACTION_PACKAGE_INSTALL>
<android.content.Intent: java.lang.String ACTION_PACKAGE_NEEDS_VERIFICATION>
<android.content.Intent: java.lang.String ACTION_PACKAGE_REMOVED>
<android.content.Intent: java.lang.String ACTION_PACKAGE_REPLACED>
<android.content.Intent: java.lang.String ACTION_PACKAGE_RESTARTED>
<android.content.Intent: java.lang.String ACTION_PACKAGE_VERIFIED>
<android.content.Intent: java.lang.String ACTION_PASTE>
<android.content.Intent: java.lang.String ACTION_PICK>
<android.content.Intent: java.lang.String ACTION_PICK_ACTIVITY>
<android.content.Intent: java.lang.String ACTION_POWER_CONNECTED>
<android.content.Intent: java.lang.String ACTION_POWER_DISCONNECTED>
<android.content.Intent: java.lang.String ACTION_POWER_USAGE_SUMMARY>
<android.content.Intent: java.lang.String ACTION_PROCESS_TEXT>
<android.content.Intent: java.lang.String ACTION_PROFILE_ACCESSIBLE>
<android.content.Intent: java.lang.String ACTION_PROFILE_INACCESSIBLE>
<android.content.Intent: java.lang.String ACTION_PROVIDER_CHANGED>
<android.content.Intent: java.lang.String ACTION_QUICK_CLOCK>
<android.content.Intent: java.lang.String ACTION_QUICK_VIEW>
<android.content.Intent: java.lang.String ACTION_REBOOT>
<android.content.Intent: java.lang.String ACTION_RUN>
<android.content.Intent: java.lang.String ACTION_SAFETY_CENTER>
<android.content.Intent: java.lang.String ACTION_SCREEN_OFF>
<android.content.Intent: java.lang.String ACTION_SCREEN_ON>
<android.content.Intent: java.lang.String ACTION_SEARCH>
<android.content.Intent: java.lang.String ACTION_SEARCH_LONG_PRESS>
<android.content.Intent: java.lang.String ACTION_SEND>
<android.content.Intent: java.lang.String ACTION_SENDTO>
<android.content.Intent: java.lang.String ACTION_SEND_MULTIPLE>
<android.content.Intent: java.lang.String ACTION_SET_WALLPAPER>
<android.content.Intent: java.lang.String ACTION_SHOW_APP_INFO>
<android.content.Intent: java.lang.String ACTION_SHOW_WORK_APPS>
<android.content.Intent: java.lang.String ACTION_SHUTDOWN>
<android.content.Intent: java.lang.String ACTION_SYNC>
<android.content.Intent: java.lang.String ACTION_SYSTEM_TUTORIAL>
<android.content.Intent: java.lang.String ACTION_TIMEZONE_CHANGED>
<android.content.Intent: java.lang.String ACTION_TIME_CHANGED>
<android.content.Intent: java.lang.String ACTION_TIME_TICK>
<android.content.Intent: java.lang.String ACTION_TRANSLATE>
<android.content.Intent: java.lang.String ACTION_UID_REMOVED>
<android.content.Intent: java.lang.String ACTION_UMS_CONNECTED>
<android.content.Intent: java.lang.String ACTION_UMS_DISCONNECTED>
<android.content.Intent: java.lang.String ACTION_UNINSTALL_PACKAGE>
<android.content.Intent: java.lang.String ACTION_USER_BACKGROUND>
<android.content.Intent: java.lang.String ACTION_USER_FOREGROUND>
<android.content.Intent: java.lang.String ACTION_USER_INITIALIZE>
<android.content.Intent: java.lang.String ACTION_USER_PRESENT>
<android.content.Intent: java.lang.String ACTION_USER_UNLOCKED>
<android.content.Intent: java.lang.String ACTION_VIEW>
<android.content.Intent: java.lang.String ACTION_VIEW_LOCUS>
<android.content.Intent: java.lang.String ACTION_VIEW_PERMISSION_USAGE>
<android.content.Intent: java.lang.String ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD>
<android.content.Intent: java.lang.String ACTION_VOICE_COMMAND>
<android.content.Intent: java.lang.String ACTION_WALLPAPER_CHANGED>
<android.content.Intent: java.lang.String ACTION_WEB_SEARCH>
<android.content.Intent: java.lang.String CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET>
<android.content.Intent: java.lang.String CATEGORY_ALTERNATIVE>
<android.content.Intent: java.lang.String CATEGORY_APP_BROWSER>
<android.content.Intent: java.lang.String CATEGORY_APP_CALCULATOR>
<android.content.Intent: java.lang.String CATEGORY_APP_CALENDAR>
<android.content.Intent: java.lang.String CATEGORY_APP_CONTACTS>
<android.content.Intent: java.lang.String CATEGORY_APP_EMAIL>
<android.content.Intent: java.lang.String CATEGORY_APP_FILES>
<android.content.Intent: java.lang.String CATEGORY_APP_FITNESS>
<android.content.Intent: java.lang.String CATEGORY_APP_GALLERY>
<android.content.Intent: java.lang.String CATEGORY_APP_MAPS>
<android.content.Intent: java.lang.String CATEGORY_APP_MARKET>
<android.content.Intent: java.lang.String CATEGORY_APP_MESSAGING>
<android.content.Intent: java.lang.String CATEGORY_APP_MUSIC>
<android.content.Intent: java.lang.String CATEGORY_APP_WEATHER>
<android.content.Intent: java.lang.String CATEGORY_BROWSABLE>
<android.content.Intent: java.lang.String CATEGORY_CAR_DOCK>
<android.content.Intent: java.lang.String CATEGORY_CAR_MODE>
<android.content.Intent: java.lang.String CATEGORY_DEFAULT>
<android.content.Intent: java.lang.String CATEGORY_DESK_DOCK>
<android.content.Intent: java.lang.String CATEGORY_DEVELOPMENT_PREFERENCE>
<android.content.Intent: java.lang.String CATEGORY_EMBED>
<android.content.Intent: java.lang.String CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST>
<android.content.Intent: java.lang.String CATEGORY_HE_DESK_DOCK>
<android.content.Intent: java.lang.String CATEGORY_HOME>
<android.content.Intent: java.lang.String CATEGORY_INFO>
<android.content.Intent: java.lang.String CATEGORY_LAUNCHER>
<android.content.Intent: java.lang.String CATEGORY_LEANBACK_LAUNCHER>
<android.content.Intent: java.lang.String CATEGORY_LE_DESK_DOCK>
<android.content.Intent: java.lang.String CATEGORY_MONKEY>
<android.content.Intent: java.lang.String CATEGORY_OPENABLE>
<android.content.Intent: java.lang.String CATEGORY_PREFERENCE>
<android.content.Intent: java.lang.String CATEGORY_SAMPLE_CODE>
<android.content.Intent: java.lang.String CATEGORY_SECONDARY_HOME>
<android.content.Intent: java.lang.String CATEGORY_SELECTED_ALTERNATIVE>
<android.content.Intent: java.lang.String CATEGORY_TAB>
<android.content.Intent: java.lang.String CATEGORY_TEST>
<android.content.Intent: java.lang.String CATEGORY_TYPED_OPENABLE>
<android.content.Intent: java.lang.String CATEGORY_UNIT_TEST>
<android.content.Intent: java.lang.String CATEGORY_VOICE>
<android.content.Intent: java.lang.String CATEGORY_VR_HOME>
<android.content.Intent: android.os.Parcelable$Creator CREATOR>
<android.content.Intent: java.lang.String EXTRA_ALARM_COUNT>
<android.content.Intent: java.lang.String EXTRA_ALLOW_MULTIPLE>
<android.content.Intent: java.lang.String EXTRA_ALLOW_REPLACE>
<android.content.Intent: java.lang.String EXTRA_ALTERNATE_INTENTS>
<android.content.Intent: java.lang.String EXTRA_ASSIST_CONTEXT>
<android.content.Intent: java.lang.String EXTRA_ASSIST_INPUT_DEVICE_ID>
<android.content.Intent: java.lang.String EXTRA_ASSIST_INPUT_HINT_KEYBOARD>
<android.content.Intent: java.lang.String EXTRA_ASSIST_PACKAGE>
<android.content.Intent: java.lang.String EXTRA_ASSIST_UID>
<android.content.Intent: java.lang.String EXTRA_ATTRIBUTION_TAGS>
<android.content.Intent: java.lang.String EXTRA_AUTO_LAUNCH_SINGLE_CHOICE>
<android.content.Intent: java.lang.String EXTRA_BCC>
<android.content.Intent: java.lang.String EXTRA_BUG_REPORT>
<android.content.Intent: java.lang.String EXTRA_CC>
<android.content.Intent: java.lang.String EXTRA_CHANGED_COMPONENT_NAME>
<android.content.Intent: java.lang.String EXTRA_CHANGED_COMPONENT_NAME_LIST>
<android.content.Intent: java.lang.String EXTRA_CHANGED_PACKAGE_LIST>
<android.content.Intent: java.lang.String EXTRA_CHANGED_UID_LIST>
<android.content.Intent: java.lang.String EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER>
<android.content.Intent: java.lang.String EXTRA_CHOOSER_TARGETS>
<android.content.Intent: java.lang.String EXTRA_CHOSEN_COMPONENT>
<android.content.Intent: java.lang.String EXTRA_CHOSEN_COMPONENT_INTENT_SENDER>
<android.content.Intent: java.lang.String EXTRA_COMPONENT_NAME>
<android.content.Intent: java.lang.String EXTRA_CONTENT_ANNOTATIONS>
<android.content.Intent: java.lang.String EXTRA_CONTENT_QUERY>
<android.content.Intent: java.lang.String EXTRA_DATA_REMOVED>
<android.content.Intent: java.lang.String EXTRA_DOCK_STATE>
<android.content.Intent: int EXTRA_DOCK_STATE_CAR>
<android.content.Intent: int EXTRA_DOCK_STATE_DESK>
<android.content.Intent: int EXTRA_DOCK_STATE_HE_DESK>
<android.content.Intent: int EXTRA_DOCK_STATE_LE_DESK>
<android.content.Intent: int EXTRA_DOCK_STATE_UNDOCKED>
<android.content.Intent: java.lang.String EXTRA_DONT_KILL_APP>
<android.content.Intent: java.lang.String EXTRA_DURATION_MILLIS>
<android.content.Intent: java.lang.String EXTRA_EMAIL>
<android.content.Intent: java.lang.String EXTRA_END_TIME>
<android.content.Intent: java.lang.String EXTRA_EXCLUDE_COMPONENTS>
<android.content.Intent: java.lang.String EXTRA_FROM_STORAGE>
<android.content.Intent: java.lang.String EXTRA_HTML_TEXT>
<android.content.Intent: java.lang.String EXTRA_INDEX>
<android.content.Intent: java.lang.String EXTRA_INITIAL_INTENTS>
<android.content.Intent: java.lang.String EXTRA_INSTALLER_PACKAGE_NAME>
<android.content.Intent: java.lang.String EXTRA_INTENT>
<android.content.Intent: java.lang.String EXTRA_KEY_EVENT>
<android.content.Intent: java.lang.String EXTRA_LOCALE_LIST>
<android.content.Intent: java.lang.String EXTRA_LOCAL_ONLY>
<android.content.Intent: java.lang.String EXTRA_LOCUS_ID>
<android.content.Intent: java.lang.String EXTRA_MIME_TYPES>
<android.content.Intent: java.lang.String EXTRA_NOT_UNKNOWN_SOURCE>
<android.content.Intent: java.lang.String EXTRA_ORIGINATING_URI>
<android.content.Intent: java.lang.String EXTRA_PACKAGE_NAME>
<android.content.Intent: java.lang.String EXTRA_PERMISSION_GROUP_NAME>
<android.content.Intent: java.lang.String EXTRA_PHONE_NUMBER>
<android.content.Intent: java.lang.String EXTRA_PROCESS_TEXT>
<android.content.Intent: java.lang.String EXTRA_PROCESS_TEXT_READONLY>
<android.content.Intent: java.lang.String EXTRA_QUICK_VIEW_FEATURES>
<android.content.Intent: java.lang.String EXTRA_QUIET_MODE>
<android.content.Intent: java.lang.String EXTRA_REFERRER>
<android.content.Intent: java.lang.String EXTRA_REFERRER_NAME>
<android.content.Intent: java.lang.String EXTRA_REMOTE_INTENT_TOKEN>
<android.content.Intent: java.lang.String EXTRA_REPLACEMENT_EXTRAS>
<android.content.Intent: java.lang.String EXTRA_REPLACING>
<android.content.Intent: java.lang.String EXTRA_RESTRICTIONS_BUNDLE>
<android.content.Intent: java.lang.String EXTRA_RESTRICTIONS_INTENT>
<android.content.Intent: java.lang.String EXTRA_RESTRICTIONS_LIST>
<android.content.Intent: java.lang.String EXTRA_RESULT_RECEIVER>
<android.content.Intent: java.lang.String EXTRA_RETURN_RESULT>
<android.content.Intent: java.lang.String EXTRA_SHORTCUT_ICON>
<android.content.Intent: java.lang.String EXTRA_SHORTCUT_ICON_RESOURCE>
<android.content.Intent: java.lang.String EXTRA_SHORTCUT_ID>
<android.content.Intent: java.lang.String EXTRA_SHORTCUT_INTENT>
<android.content.Intent: java.lang.String EXTRA_SHORTCUT_NAME>
<android.content.Intent: java.lang.String EXTRA_SHUTDOWN_USERSPACE_ONLY>
<android.content.Intent: java.lang.String EXTRA_SPLIT_NAME>
<android.content.Intent: java.lang.String EXTRA_START_TIME>
<android.content.Intent: java.lang.String EXTRA_STREAM>
<android.content.Intent: java.lang.String EXTRA_SUBJECT>
<android.content.Intent: java.lang.String EXTRA_SUSPENDED_PACKAGE_EXTRAS>
<android.content.Intent: java.lang.String EXTRA_TEMPLATE>
<android.content.Intent: java.lang.String EXTRA_TEXT>
<android.content.Intent: java.lang.String EXTRA_TIME>
<android.content.Intent: java.lang.String EXTRA_TIMEZONE>
<android.content.Intent: java.lang.String EXTRA_TITLE>
<android.content.Intent: java.lang.String EXTRA_UID>
<android.content.Intent: java.lang.String EXTRA_USER>
<android.content.Intent: java.lang.String EXTRA_USER_INITIATED>
<android.content.Intent: int FILL_IN_ACTION>
<android.content.Intent: int FILL_IN_CATEGORIES>
<android.content.Intent: int FILL_IN_CLIP_DATA>
<android.content.Intent: int FILL_IN_COMPONENT>
<android.content.Intent: int FILL_IN_DATA>
<android.content.Intent: int FILL_IN_IDENTIFIER>
<android.content.Intent: int FILL_IN_PACKAGE>
<android.content.Intent: int FILL_IN_SELECTOR>
<android.content.Intent: int FILL_IN_SOURCE_BOUNDS>
<android.content.Intent: int FLAG_ACTIVITY_BROUGHT_TO_FRONT>
<android.content.Intent: int FLAG_ACTIVITY_CLEAR_TASK>
<android.content.Intent: int FLAG_ACTIVITY_CLEAR_TOP>
<android.content.Intent: int FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET>
<android.content.Intent: int FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS>
<android.content.Intent: int FLAG_ACTIVITY_FORWARD_RESULT>
<android.content.Intent: int FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY>
<android.content.Intent: int FLAG_ACTIVITY_LAUNCH_ADJACENT>
<android.content.Intent: int FLAG_ACTIVITY_MATCH_EXTERNAL>
<android.content.Intent: int FLAG_ACTIVITY_MULTIPLE_TASK>
<android.content.Intent: int FLAG_ACTIVITY_NEW_DOCUMENT>
<android.content.Intent: int FLAG_ACTIVITY_NEW_TASK>
<android.content.Intent: int FLAG_ACTIVITY_NO_ANIMATION>
<android.content.Intent: int FLAG_ACTIVITY_NO_HISTORY>
<android.content.Intent: int FLAG_ACTIVITY_NO_USER_ACTION>
<android.content.Intent: int FLAG_ACTIVITY_PREVIOUS_IS_TOP>
<android.content.Intent: int FLAG_ACTIVITY_REORDER_TO_FRONT>
<android.content.Intent: int FLAG_ACTIVITY_REQUIRE_DEFAULT>
<android.content.Intent: int FLAG_ACTIVITY_REQUIRE_NON_BROWSER>
<android.content.Intent: int FLAG_ACTIVITY_RESET_TASK_IF_NEEDED>
<android.content.Intent: int FLAG_ACTIVITY_RETAIN_IN_RECENTS>
<android.content.Intent: int FLAG_ACTIVITY_SINGLE_TOP>
<android.content.Intent: int FLAG_ACTIVITY_TASK_ON_HOME>
<android.content.Intent: int FLAG_DEBUG_LOG_RESOLUTION>
<android.content.Intent: int FLAG_DIRECT_BOOT_AUTO>
<android.content.Intent: int FLAG_EXCLUDE_STOPPED_PACKAGES>
<android.content.Intent: int FLAG_FROM_BACKGROUND>
<android.content.Intent: int FLAG_GRANT_PERSISTABLE_URI_PERMISSION>
<android.content.Intent: int FLAG_GRANT_PREFIX_URI_PERMISSION>
<android.content.Intent: int FLAG_GRANT_READ_URI_PERMISSION>
<android.content.Intent: int FLAG_GRANT_WRITE_URI_PERMISSION>
<android.content.Intent: int FLAG_INCLUDE_STOPPED_PACKAGES>
<android.content.Intent: int FLAG_RECEIVER_FOREGROUND>
<android.content.Intent: int FLAG_RECEIVER_NO_ABORT>
<android.content.Intent: int FLAG_RECEIVER_REGISTERED_ONLY>
<android.content.Intent: int FLAG_RECEIVER_REPLACE_PENDING>
<android.content.Intent: int FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS>
<android.content.Intent: java.lang.String METADATA_DOCK_HOME>
<android.content.Intent: int URI_ALLOW_UNSAFE>
<android.content.Intent: int URI_ANDROID_APP_SCHEME>
<android.content.Intent: int URI_INTENT_SCHEME>
android.content.Intent$FilterComparison
<android.content.Intent$FilterComparison: void <init>(android.content.Intent)>
<android.content.Intent$FilterComparison: android.content.Intent getIntent()>
android.content.Intent$ShortcutIconResource
<android.content.Intent$ShortcutIconResource: void <init>()>
<android.content.Intent$ShortcutIconResource: int describeContents()>
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>
<android.content.Intent$ShortcutIconResource: void writeToParcel(android.os.Parcel,int)>
<android.content.Intent$ShortcutIconResource: android.os.Parcelable$Creator CREATOR>
<android.content.Intent$ShortcutIconResource: java.lang.String packageName>
<android.content.Intent$ShortcutIconResource: java.lang.String resourceName>
android.content.IntentFilter
<android.content.IntentFilter: void <init>()>
<android.content.IntentFilter: void <init>(java.lang.String)>
<android.content.IntentFilter: void <init>(java.lang.String,java.lang.String)>
<android.content.IntentFilter: void <init>(android.content.IntentFilter)>
<android.content.IntentFilter: java.util.Iterator actionsIterator()>
<android.content.IntentFilter: void addAction(java.lang.String)>
<android.content.IntentFilter: void addCategory(java.lang.String)>
<android.content.IntentFilter: void addDataAuthority(java.lang.String,java.lang.String)>
<android.content.IntentFilter: void addDataPath(java.lang.String,int)>
<android.content.IntentFilter: void addDataScheme(java.lang.String)>
<android.content.IntentFilter: void addDataSchemeSpecificPart(java.lang.String,int)>
<android.content.IntentFilter: void addDataType(java.lang.String)>
<android.content.IntentFilter: java.util.function.Predicate asPredicate()>
<android.content.IntentFilter: java.util.function.Predicate asPredicateWithTypeResolution(android.content.ContentResolver)>
<android.content.IntentFilter: java.util.Iterator authoritiesIterator()>
<android.content.IntentFilter: java.util.Iterator categoriesIterator()>
<android.content.IntentFilter: int countActions()>
<android.content.IntentFilter: int countCategories()>
<android.content.IntentFilter: int countDataAuthorities()>
<android.content.IntentFilter: int countDataPaths()>
<android.content.IntentFilter: int countDataSchemeSpecificParts()>
<android.content.IntentFilter: int countDataSchemes()>
<android.content.IntentFilter: int countDataTypes()>
<android.content.IntentFilter: android.content.IntentFilter create(java.lang.String,java.lang.String)>
<android.content.IntentFilter: int describeContents()>
<android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)>
<android.content.IntentFilter: java.lang.String getAction(int)>
<android.content.IntentFilter: java.lang.String getCategory(int)>
<android.content.IntentFilter: android.content.IntentFilter$AuthorityEntry getDataAuthority(int)>
<android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)>
<android.content.IntentFilter: java.lang.String getDataScheme(int)>
<android.content.IntentFilter: android.os.PatternMatcher getDataSchemeSpecificPart(int)>
<android.content.IntentFilter: java.lang.String getDataType(int)>
<android.content.IntentFilter: int getPriority()>
<android.content.IntentFilter: boolean hasAction(java.lang.String)>
<android.content.IntentFilter: boolean hasCategory(java.lang.String)>
<android.content.IntentFilter: boolean hasDataAuthority(android.net.Uri)>
<android.content.IntentFilter: boolean hasDataPath(java.lang.String)>
<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)>
<android.content.IntentFilter: boolean hasDataSchemeSpecificPart(java.lang.String)>
<android.content.IntentFilter: boolean hasDataType(java.lang.String)>
<android.content.IntentFilter: int match(android.content.ContentResolver,android.content.Intent,boolean,java.lang.String)>
<android.content.IntentFilter: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)>
<android.content.IntentFilter: boolean matchAction(java.lang.String)>
<android.content.IntentFilter: java.lang.String matchCategories(java.util.Set)>
<android.content.IntentFilter: int matchData(java.lang.String,java.lang.String,android.net.Uri)>
<android.content.IntentFilter: int matchDataAuthority(android.net.Uri)>
<android.content.IntentFilter: java.util.Iterator pathsIterator()>
<android.content.IntentFilter: void readFromXml(org.xmlpull.v1.XmlPullParser)>
<android.content.IntentFilter: java.util.Iterator schemeSpecificPartsIterator()>
<android.content.IntentFilter: java.util.Iterator schemesIterator()>
<android.content.IntentFilter: void setPriority(int)>
<android.content.IntentFilter: java.util.Iterator typesIterator()>
<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)>
<android.content.IntentFilter: void writeToXml(org.xmlpull.v1.XmlSerializer)>
<android.content.IntentFilter: android.os.Parcelable$Creator CREATOR>
<android.content.IntentFilter: int MATCH_ADJUSTMENT_MASK>
<android.content.IntentFilter: int MATCH_ADJUSTMENT_NORMAL>
<android.content.IntentFilter: int MATCH_CATEGORY_EMPTY>
<android.content.IntentFilter: int MATCH_CATEGORY_HOST>
<android.content.IntentFilter: int MATCH_CATEGORY_MASK>
<android.content.IntentFilter: int MATCH_CATEGORY_PATH>
<android.content.IntentFilter: int MATCH_CATEGORY_PORT>
<android.content.IntentFilter: int MATCH_CATEGORY_SCHEME>
<android.content.IntentFilter: int MATCH_CATEGORY_SCHEME_SPECIFIC_PART>
<android.content.IntentFilter: int MATCH_CATEGORY_TYPE>
<android.content.IntentFilter: int NO_MATCH_ACTION>
<android.content.IntentFilter: int NO_MATCH_CATEGORY>
<android.content.IntentFilter: int NO_MATCH_DATA>
<android.content.IntentFilter: int NO_MATCH_TYPE>
<android.content.IntentFilter: int SYSTEM_HIGH_PRIORITY>
<android.content.IntentFilter: int SYSTEM_LOW_PRIORITY>
android.content.IntentFilter$AuthorityEntry
<android.content.IntentFilter$AuthorityEntry: void <init>(java.lang.String,java.lang.String)>
<android.content.IntentFilter$AuthorityEntry: java.lang.String getHost()>
<android.content.IntentFilter$AuthorityEntry: int getPort()>
<android.content.IntentFilter$AuthorityEntry: int match(android.net.Uri)>
android.content.IntentFilter$MalformedMimeTypeException
<android.content.IntentFilter$MalformedMimeTypeException: void <init>()>
<android.content.IntentFilter$MalformedMimeTypeException: void <init>(java.lang.String)>
android.content.IntentSender
<android.content.IntentSender: int describeContents()>
<android.content.IntentSender: java.lang.String getCreatorPackage()>
<android.content.IntentSender: int getCreatorUid()>
<android.content.IntentSender: android.os.UserHandle getCreatorUserHandle()>
<android.content.IntentSender: java.lang.String getTargetPackage()>
<android.content.IntentSender: android.content.IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel)>
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)>
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler,java.lang.String)>
<android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)>
<android.content.IntentSender: void writeToParcel(android.os.Parcel,int)>
<android.content.IntentSender: android.os.Parcelable$Creator CREATOR>
android.content.IntentSender$OnFinished
<android.content.IntentSender$OnFinished: void onSendFinished(android.content.IntentSender,android.content.Intent,int,java.lang.String,android.os.Bundle)>
android.content.IntentSender$SendIntentException
<android.content.IntentSender$SendIntentException: void <init>()>
<android.content.IntentSender$SendIntentException: void <init>(java.lang.String)>
<android.content.IntentSender$SendIntentException: void <init>(java.lang.Exception)>
android.content.Loader
<android.content.Loader: void <init>(android.content.Context)>
<android.content.Loader: void abandon()>
<android.content.Loader: boolean cancelLoad()>
<android.content.Loader: void commitContentChanged()>
<android.content.Loader: java.lang.String dataToString(java.lang.Object)>
<android.content.Loader: void deliverCancellation()>
<android.content.Loader: void deliverResult(java.lang.Object)>
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.content.Loader: void forceLoad()>
<android.content.Loader: android.content.Context getContext()>
<android.content.Loader: int getId()>
<android.content.Loader: boolean isAbandoned()>
<android.content.Loader: boolean isReset()>
<android.content.Loader: boolean isStarted()>
<android.content.Loader: void onAbandon()>
<android.content.Loader: boolean onCancelLoad()>
<android.content.Loader: void onContentChanged()>
<android.content.Loader: void onForceLoad()>
<android.content.Loader: void onReset()>
<android.content.Loader: void onStartLoading()>
<android.content.Loader: void onStopLoading()>
<android.content.Loader: void registerListener(int,android.content.Loader$OnLoadCompleteListener)>
<android.content.Loader: void registerOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener)>
<android.content.Loader: void reset()>
<android.content.Loader: void rollbackContentChanged()>
<android.content.Loader: void startLoading()>
<android.content.Loader: void stopLoading()>
<android.content.Loader: boolean takeContentChanged()>
<android.content.Loader: void unregisterListener(android.content.Loader$OnLoadCompleteListener)>
<android.content.Loader: void unregisterOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener)>
android.content.Loader$ForceLoadContentObserver
<android.content.Loader$ForceLoadContentObserver: void <init>(android.content.Loader)>
android.content.Loader$OnLoadCanceledListener
<android.content.Loader$OnLoadCanceledListener: void onLoadCanceled(android.content.Loader)>
android.content.Loader$OnLoadCompleteListener
<android.content.Loader$OnLoadCompleteListener: void onLoadComplete(android.content.Loader,java.lang.Object)>
android.content.LocusId
<android.content.LocusId: void <init>(java.lang.String)>
<android.content.LocusId: int describeContents()>
<android.content.LocusId: java.lang.String getId()>
<android.content.LocusId: void writeToParcel(android.os.Parcel,int)>
<android.content.LocusId: android.os.Parcelable$Creator CREATOR>
android.content.MutableContextWrapper
<android.content.MutableContextWrapper: void <init>(android.content.Context)>
<android.content.MutableContextWrapper: void setBaseContext(android.content.Context)>
android.content.OperationApplicationException
<android.content.OperationApplicationException: void <init>()>
<android.content.OperationApplicationException: void <init>(java.lang.String)>
<android.content.OperationApplicationException: void <init>(java.lang.String,java.lang.Throwable)>
<android.content.OperationApplicationException: void <init>(java.lang.Throwable)>
<android.content.OperationApplicationException: void <init>(int)>
<android.content.OperationApplicationException: void <init>(java.lang.String,int)>
<android.content.OperationApplicationException: int getNumSuccessfulYieldPoints()>
android.content.PeriodicSync
<android.content.PeriodicSync: void <init>(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
<android.content.PeriodicSync: int describeContents()>
<android.content.PeriodicSync: void writeToParcel(android.os.Parcel,int)>
<android.content.PeriodicSync: android.os.Parcelable$Creator CREATOR>
<android.content.PeriodicSync: android.accounts.Account account>
<android.content.PeriodicSync: java.lang.String authority>
<android.content.PeriodicSync: android.os.Bundle extras>
<android.content.PeriodicSync: long period>
android.content.QuickViewConstants
<android.content.QuickViewConstants: java.lang.String FEATURE_DELETE>
<android.content.QuickViewConstants: java.lang.String FEATURE_DOWNLOAD>
<android.content.QuickViewConstants: java.lang.String FEATURE_EDIT>
<android.content.QuickViewConstants: java.lang.String FEATURE_PRINT>
<android.content.QuickViewConstants: java.lang.String FEATURE_SEND>
<android.content.QuickViewConstants: java.lang.String FEATURE_VIEW>
android.content.ReceiverCallNotAllowedException
<android.content.ReceiverCallNotAllowedException: void <init>(java.lang.String)>
android.content.RestrictionEntry
<android.content.RestrictionEntry: void <init>(int,java.lang.String)>
<android.content.RestrictionEntry: void <init>(java.lang.String,java.lang.String)>
<android.content.RestrictionEntry: void <init>(java.lang.String,boolean)>
<android.content.RestrictionEntry: void <init>(java.lang.String,java.lang.String[])>
<android.content.RestrictionEntry: void <init>(java.lang.String,int)>
<android.content.RestrictionEntry: void <init>(android.os.Parcel)>
<android.content.RestrictionEntry: android.content.RestrictionEntry createBundleArrayEntry(java.lang.String,android.content.RestrictionEntry[])>
<android.content.RestrictionEntry: android.content.RestrictionEntry createBundleEntry(java.lang.String,android.content.RestrictionEntry[])>
<android.content.RestrictionEntry: int describeContents()>
<android.content.RestrictionEntry: java.lang.String[] getAllSelectedStrings()>
<android.content.RestrictionEntry: java.lang.String[] getChoiceEntries()>
<android.content.RestrictionEntry: java.lang.String[] getChoiceValues()>
<android.content.RestrictionEntry: java.lang.String getDescription()>
<android.content.RestrictionEntry: int getIntValue()>
<android.content.RestrictionEntry: java.lang.String getKey()>
<android.content.RestrictionEntry: android.content.RestrictionEntry[] getRestrictions()>
<android.content.RestrictionEntry: boolean getSelectedState()>
<android.content.RestrictionEntry: java.lang.String getSelectedString()>
<android.content.RestrictionEntry: java.lang.String getTitle()>
<android.content.RestrictionEntry: int getType()>
<android.content.RestrictionEntry: void setAllSelectedStrings(java.lang.String[])>
<android.content.RestrictionEntry: void setChoiceEntries(java.lang.String[])>
<android.content.RestrictionEntry: void setChoiceEntries(android.content.Context,int)>
<android.content.RestrictionEntry: void setChoiceValues(java.lang.String[])>
<android.content.RestrictionEntry: void setChoiceValues(android.content.Context,int)>
<android.content.RestrictionEntry: void setDescription(java.lang.String)>
<android.content.RestrictionEntry: void setIntValue(int)>
<android.content.RestrictionEntry: void setRestrictions(android.content.RestrictionEntry[])>
<android.content.RestrictionEntry: void setSelectedState(boolean)>
<android.content.RestrictionEntry: void setSelectedString(java.lang.String)>
<android.content.RestrictionEntry: void setTitle(java.lang.String)>
<android.content.RestrictionEntry: void setType(int)>
<android.content.RestrictionEntry: void writeToParcel(android.os.Parcel,int)>
<android.content.RestrictionEntry: android.os.Parcelable$Creator CREATOR>
<android.content.RestrictionEntry: int TYPE_BOOLEAN>
<android.content.RestrictionEntry: int TYPE_BUNDLE>
<android.content.RestrictionEntry: int TYPE_BUNDLE_ARRAY>
<android.content.RestrictionEntry: int TYPE_CHOICE>
<android.content.RestrictionEntry: int TYPE_INTEGER>
<android.content.RestrictionEntry: int TYPE_MULTI_SELECT>
<android.content.RestrictionEntry: int TYPE_NULL>
<android.content.RestrictionEntry: int TYPE_STRING>
android.content.RestrictionsManager
<android.content.RestrictionsManager: android.os.Bundle convertRestrictionsToBundle(java.util.List)>
<android.content.RestrictionsManager: android.content.Intent createLocalApprovalIntent()>
<android.content.RestrictionsManager: android.os.Bundle getApplicationRestrictions()>
<android.content.RestrictionsManager: java.util.List getManifestRestrictions(java.lang.String)>
<android.content.RestrictionsManager: boolean hasRestrictionsProvider()>
<android.content.RestrictionsManager: void notifyPermissionResponse(java.lang.String,android.os.PersistableBundle)>
<android.content.RestrictionsManager: void requestPermission(java.lang.String,java.lang.String,android.os.PersistableBundle)>
<android.content.RestrictionsManager: java.lang.String ACTION_PERMISSION_RESPONSE_RECEIVED>
<android.content.RestrictionsManager: java.lang.String ACTION_REQUEST_LOCAL_APPROVAL>
<android.content.RestrictionsManager: java.lang.String ACTION_REQUEST_PERMISSION>
<android.content.RestrictionsManager: java.lang.String EXTRA_PACKAGE_NAME>
<android.content.RestrictionsManager: java.lang.String EXTRA_REQUEST_BUNDLE>
<android.content.RestrictionsManager: java.lang.String EXTRA_REQUEST_ID>
<android.content.RestrictionsManager: java.lang.String EXTRA_REQUEST_TYPE>
<android.content.RestrictionsManager: java.lang.String EXTRA_RESPONSE_BUNDLE>
<android.content.RestrictionsManager: java.lang.String META_DATA_APP_RESTRICTIONS>
<android.content.RestrictionsManager: java.lang.String REQUEST_KEY_APPROVE_LABEL>
<android.content.RestrictionsManager: java.lang.String REQUEST_KEY_DATA>
<android.content.RestrictionsManager: java.lang.String REQUEST_KEY_DENY_LABEL>
<android.content.RestrictionsManager: java.lang.String REQUEST_KEY_ICON>
<android.content.RestrictionsManager: java.lang.String REQUEST_KEY_ID>
<android.content.RestrictionsManager: java.lang.String REQUEST_KEY_MESSAGE>
<android.content.RestrictionsManager: java.lang.String REQUEST_KEY_NEW_REQUEST>
<android.content.RestrictionsManager: java.lang.String REQUEST_KEY_TITLE>
<android.content.RestrictionsManager: java.lang.String REQUEST_TYPE_APPROVAL>
<android.content.RestrictionsManager: java.lang.String RESPONSE_KEY_ERROR_CODE>
<android.content.RestrictionsManager: java.lang.String RESPONSE_KEY_MESSAGE>
<android.content.RestrictionsManager: java.lang.String RESPONSE_KEY_RESPONSE_TIMESTAMP>
<android.content.RestrictionsManager: java.lang.String RESPONSE_KEY_RESULT>
<android.content.RestrictionsManager: int RESULT_APPROVED>
<android.content.RestrictionsManager: int RESULT_DENIED>
<android.content.RestrictionsManager: int RESULT_ERROR>
<android.content.RestrictionsManager: int RESULT_ERROR_BAD_REQUEST>
<android.content.RestrictionsManager: int RESULT_ERROR_INTERNAL>
<android.content.RestrictionsManager: int RESULT_ERROR_NETWORK>
<android.content.RestrictionsManager: int RESULT_NO_RESPONSE>
<android.content.RestrictionsManager: int RESULT_UNKNOWN_REQUEST>
android.content.SearchRecentSuggestionsProvider
<android.content.SearchRecentSuggestionsProvider: void <init>()>
<android.content.SearchRecentSuggestionsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.SearchRecentSuggestionsProvider: java.lang.String getType(android.net.Uri)>
<android.content.SearchRecentSuggestionsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.content.SearchRecentSuggestionsProvider: boolean onCreate()>
<android.content.SearchRecentSuggestionsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.SearchRecentSuggestionsProvider: void setupSuggestions(java.lang.String,int)>
<android.content.SearchRecentSuggestionsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.SearchRecentSuggestionsProvider: int DATABASE_MODE_2LINES>
<android.content.SearchRecentSuggestionsProvider: int DATABASE_MODE_QUERIES>
android.content.ServiceConnection
<android.content.ServiceConnection: void onBindingDied(android.content.ComponentName)>
<android.content.ServiceConnection: void onNullBinding(android.content.ComponentName)>
<android.content.ServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.content.ServiceConnection: void onServiceDisconnected(android.content.ComponentName)>
android.content.SharedPreferences
<android.content.SharedPreferences: boolean contains(java.lang.String)>
<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>
<android.content.SharedPreferences: java.util.Map getAll()>
<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>
<android.content.SharedPreferences: float getFloat(java.lang.String,float)>
<android.content.SharedPreferences: int getInt(java.lang.String,int)>
<android.content.SharedPreferences: long getLong(java.lang.String,long)>
<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>
<android.content.SharedPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)>
<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>
<android.content.SharedPreferences: void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>
android.content.SharedPreferences$Editor
<android.content.SharedPreferences$Editor: void apply()>
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor clear()>
<android.content.SharedPreferences$Editor: boolean commit()>
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)>
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>
android.content.SharedPreferences$OnSharedPreferenceChangeListener
<android.content.SharedPreferences$OnSharedPreferenceChangeListener: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)>
android.content.SyncAdapterType
<android.content.SyncAdapterType: void <init>(java.lang.String,java.lang.String,boolean,boolean)>
<android.content.SyncAdapterType: void <init>(android.os.Parcel)>
<android.content.SyncAdapterType: boolean allowParallelSyncs()>
<android.content.SyncAdapterType: int describeContents()>
<android.content.SyncAdapterType: java.lang.String getSettingsActivity()>
<android.content.SyncAdapterType: boolean isAlwaysSyncable()>
<android.content.SyncAdapterType: boolean isUserVisible()>
<android.content.SyncAdapterType: android.content.SyncAdapterType newKey(java.lang.String,java.lang.String)>
<android.content.SyncAdapterType: boolean supportsUploading()>
<android.content.SyncAdapterType: void writeToParcel(android.os.Parcel,int)>
<android.content.SyncAdapterType: android.os.Parcelable$Creator CREATOR>
<android.content.SyncAdapterType: java.lang.String accountType>
<android.content.SyncAdapterType: java.lang.String authority>
<android.content.SyncAdapterType: boolean isKey>
android.content.SyncContext
<android.content.SyncContext: android.os.IBinder getSyncContextBinder()>
<android.content.SyncContext: void onFinished(android.content.SyncResult)>
android.content.SyncInfo
<android.content.SyncInfo: int describeContents()>
<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.SyncInfo: android.accounts.Account account>
<android.content.SyncInfo: java.lang.String authority>
<android.content.SyncInfo: long startTime>
android.content.SyncRequest
<android.content.SyncRequest: int describeContents()>
<android.content.SyncRequest: void writeToParcel(android.os.Parcel,int)>
<android.content.SyncRequest: android.os.Parcelable$Creator CREATOR>
android.content.SyncRequest$Builder
<android.content.SyncRequest$Builder: void <init>()>
<android.content.SyncRequest$Builder: android.content.SyncRequest build()>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setDisallowMetered(boolean)>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setExpedited(boolean)>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setExtras(android.os.Bundle)>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setIgnoreBackoff(boolean)>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setIgnoreSettings(boolean)>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setManual(boolean)>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setNoRetry(boolean)>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setRequiresCharging(boolean)>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setScheduleAsExpeditedJob(boolean)>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setSyncAdapter(android.accounts.Account,java.lang.String)>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder syncOnce()>
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder syncPeriodic(long,long)>
android.content.SyncResult
<android.content.SyncResult: void <init>()>
<android.content.SyncResult: void clear()>
<android.content.SyncResult: int describeContents()>
<android.content.SyncResult: boolean hasError()>
<android.content.SyncResult: boolean hasHardError()>
<android.content.SyncResult: boolean hasSoftError()>
<android.content.SyncResult: boolean madeSomeProgress()>
<android.content.SyncResult: java.lang.String toDebugString()>
<android.content.SyncResult: void writeToParcel(android.os.Parcel,int)>
<android.content.SyncResult: android.content.SyncResult ALREADY_IN_PROGRESS>
<android.content.SyncResult: android.os.Parcelable$Creator CREATOR>
<android.content.SyncResult: boolean databaseError>
<android.content.SyncResult: long delayUntil>
<android.content.SyncResult: boolean fullSyncRequested>
<android.content.SyncResult: boolean moreRecordsToGet>
<android.content.SyncResult: boolean partialSyncUnavailable>
<android.content.SyncResult: android.content.SyncStats stats>
<android.content.SyncResult: boolean syncAlreadyInProgress>
<android.content.SyncResult: boolean tooManyDeletions>
<android.content.SyncResult: boolean tooManyRetries>
android.content.SyncStats
<android.content.SyncStats: void <init>()>
<android.content.SyncStats: void <init>(android.os.Parcel)>
<android.content.SyncStats: void clear()>
<android.content.SyncStats: int describeContents()>
<android.content.SyncStats: void writeToParcel(android.os.Parcel,int)>
<android.content.SyncStats: android.os.Parcelable$Creator CREATOR>
<android.content.SyncStats: long numAuthExceptions>
<android.content.SyncStats: long numConflictDetectedExceptions>
<android.content.SyncStats: long numDeletes>
<android.content.SyncStats: long numEntries>
<android.content.SyncStats: long numInserts>
<android.content.SyncStats: long numIoExceptions>
<android.content.SyncStats: long numParseExceptions>
<android.content.SyncStats: long numSkippedEntries>
<android.content.SyncStats: long numUpdates>
android.content.SyncStatusObserver
<android.content.SyncStatusObserver: void onStatusChanged(int)>
android.content.UriMatcher
<android.content.UriMatcher: void <init>(int)>
<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>
<android.content.UriMatcher: int match(android.net.Uri)>
<android.content.UriMatcher: int NO_MATCH>
android.content.UriPermission
<android.content.UriPermission: int describeContents()>
<android.content.UriPermission: long getPersistedTime()>
<android.content.UriPermission: android.net.Uri getUri()>
<android.content.UriPermission: boolean isReadPermission()>
<android.content.UriPermission: boolean isWritePermission()>
<android.content.UriPermission: void writeToParcel(android.os.Parcel,int)>
<android.content.UriPermission: android.os.Parcelable$Creator CREATOR>
<android.content.UriPermission: long INVALID_TIME>
android.content.pm.ActivityInfo
<android.content.pm.ActivityInfo: void <init>()>
<android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)>
<android.content.pm.ActivityInfo: int describeContents()>
<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ActivityInfo: java.util.Set getKnownActivityEmbeddingCerts()>
<android.content.pm.ActivityInfo: int getThemeResource()>
<android.content.pm.ActivityInfo: int COLOR_MODE_DEFAULT>
<android.content.pm.ActivityInfo: int COLOR_MODE_HDR>
<android.content.pm.ActivityInfo: int COLOR_MODE_WIDE_COLOR_GAMUT>
<android.content.pm.ActivityInfo: int CONFIG_COLOR_MODE>
<android.content.pm.ActivityInfo: int CONFIG_DENSITY>
<android.content.pm.ActivityInfo: int CONFIG_FONT_SCALE>
<android.content.pm.ActivityInfo: int CONFIG_FONT_WEIGHT_ADJUSTMENT>
<android.content.pm.ActivityInfo: int CONFIG_KEYBOARD>
<android.content.pm.ActivityInfo: int CONFIG_KEYBOARD_HIDDEN>
<android.content.pm.ActivityInfo: int CONFIG_LAYOUT_DIRECTION>
<android.content.pm.ActivityInfo: int CONFIG_LOCALE>
<android.content.pm.ActivityInfo: int CONFIG_MCC>
<android.content.pm.ActivityInfo: int CONFIG_MNC>
<android.content.pm.ActivityInfo: int CONFIG_NAVIGATION>
<android.content.pm.ActivityInfo: int CONFIG_ORIENTATION>
<android.content.pm.ActivityInfo: int CONFIG_SCREEN_LAYOUT>
<android.content.pm.ActivityInfo: int CONFIG_SCREEN_SIZE>
<android.content.pm.ActivityInfo: int CONFIG_SMALLEST_SCREEN_SIZE>
<android.content.pm.ActivityInfo: int CONFIG_TOUCHSCREEN>
<android.content.pm.ActivityInfo: int CONFIG_UI_MODE>
<android.content.pm.ActivityInfo: android.os.Parcelable$Creator CREATOR>
<android.content.pm.ActivityInfo: int DOCUMENT_LAUNCH_ALWAYS>
<android.content.pm.ActivityInfo: int DOCUMENT_LAUNCH_INTO_EXISTING>
<android.content.pm.ActivityInfo: int DOCUMENT_LAUNCH_NEVER>
<android.content.pm.ActivityInfo: int DOCUMENT_LAUNCH_NONE>
<android.content.pm.ActivityInfo: int FLAG_ALLOW_TASK_REPARENTING>
<android.content.pm.ActivityInfo: int FLAG_ALLOW_UNTRUSTED_ACTIVITY_EMBEDDING>
<android.content.pm.ActivityInfo: int FLAG_ALWAYS_RETAIN_TASK_STATE>
<android.content.pm.ActivityInfo: int FLAG_AUTO_REMOVE_FROM_RECENTS>
<android.content.pm.ActivityInfo: int FLAG_CLEAR_TASK_ON_LAUNCH>
<android.content.pm.ActivityInfo: int FLAG_ENABLE_VR_MODE>
<android.content.pm.ActivityInfo: int FLAG_EXCLUDE_FROM_RECENTS>
<android.content.pm.ActivityInfo: int FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS>
<android.content.pm.ActivityInfo: int FLAG_FINISH_ON_TASK_LAUNCH>
<android.content.pm.ActivityInfo: int FLAG_HARDWARE_ACCELERATED>
<android.content.pm.ActivityInfo: int FLAG_IMMERSIVE>
<android.content.pm.ActivityInfo: int FLAG_MULTIPROCESS>
<android.content.pm.ActivityInfo: int FLAG_NO_HISTORY>
<android.content.pm.ActivityInfo: int FLAG_PREFER_MINIMAL_POST_PROCESSING>
<android.content.pm.ActivityInfo: int FLAG_RELINQUISH_TASK_IDENTITY>
<android.content.pm.ActivityInfo: int FLAG_RESUME_WHILE_PAUSING>
<android.content.pm.ActivityInfo: int FLAG_SINGLE_USER>
<android.content.pm.ActivityInfo: int FLAG_STATE_NOT_NEEDED>
<android.content.pm.ActivityInfo: int LAUNCH_MULTIPLE>
<android.content.pm.ActivityInfo: int LAUNCH_SINGLE_INSTANCE>
<android.content.pm.ActivityInfo: int LAUNCH_SINGLE_INSTANCE_PER_TASK>
<android.content.pm.ActivityInfo: int LAUNCH_SINGLE_TASK>
<android.content.pm.ActivityInfo: int LAUNCH_SINGLE_TOP>
<android.content.pm.ActivityInfo: int PERSIST_ACROSS_REBOOTS>
<android.content.pm.ActivityInfo: int PERSIST_NEVER>
<android.content.pm.ActivityInfo: int PERSIST_ROOT_ONLY>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_BEHIND>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_FULL_SENSOR>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_FULL_USER>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_LANDSCAPE>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_LOCKED>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_NOSENSOR>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_PORTRAIT>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_REVERSE_LANDSCAPE>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_REVERSE_PORTRAIT>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_SENSOR>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_SENSOR_LANDSCAPE>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_SENSOR_PORTRAIT>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_UNSPECIFIED>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_USER>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_USER_LANDSCAPE>
<android.content.pm.ActivityInfo: int SCREEN_ORIENTATION_USER_PORTRAIT>
<android.content.pm.ActivityInfo: int UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW>
<android.content.pm.ActivityInfo: int colorMode>
<android.content.pm.ActivityInfo: int configChanges>
<android.content.pm.ActivityInfo: int documentLaunchMode>
<android.content.pm.ActivityInfo: int flags>
<android.content.pm.ActivityInfo: int launchMode>
<android.content.pm.ActivityInfo: int maxRecents>
<android.content.pm.ActivityInfo: java.lang.String parentActivityName>
<android.content.pm.ActivityInfo: java.lang.String permission>
<android.content.pm.ActivityInfo: int persistableMode>
<android.content.pm.ActivityInfo: int screenOrientation>
<android.content.pm.ActivityInfo: int softInputMode>
<android.content.pm.ActivityInfo: java.lang.String targetActivity>
<android.content.pm.ActivityInfo: java.lang.String taskAffinity>
<android.content.pm.ActivityInfo: int theme>
<android.content.pm.ActivityInfo: int uiOptions>
<android.content.pm.ActivityInfo: android.content.pm.ActivityInfo$WindowLayout windowLayout>
android.content.pm.ActivityInfo$WindowLayout
<android.content.pm.ActivityInfo$WindowLayout: void <init>(int,float,int,float,int,int,int)>
<android.content.pm.ActivityInfo$WindowLayout: int gravity>
<android.content.pm.ActivityInfo$WindowLayout: int height>
<android.content.pm.ActivityInfo$WindowLayout: float heightFraction>
<android.content.pm.ActivityInfo$WindowLayout: int minHeight>
<android.content.pm.ActivityInfo$WindowLayout: int minWidth>
<android.content.pm.ActivityInfo$WindowLayout: int width>
<android.content.pm.ActivityInfo$WindowLayout: float widthFraction>
android.content.pm.ApkChecksum
<android.content.pm.ApkChecksum: int describeContents()>
<android.content.pm.ApkChecksum: java.security.cert.Certificate getInstallerCertificate()>
<android.content.pm.ApkChecksum: java.lang.String getInstallerPackageName()>
<android.content.pm.ApkChecksum: java.lang.String getSplitName()>
<android.content.pm.ApkChecksum: int getType()>
<android.content.pm.ApkChecksum: byte[] getValue()>
<android.content.pm.ApkChecksum: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ApkChecksum: android.os.Parcelable$Creator CREATOR>
android.content.pm.ApplicationInfo
<android.content.pm.ApplicationInfo: void <init>()>
<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>
<android.content.pm.ApplicationInfo: boolean areAttributionsUserVisible()>
<android.content.pm.ApplicationInfo: int describeContents()>
<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ApplicationInfo: java.lang.CharSequence getCategoryTitle(android.content.Context,int)>
<android.content.pm.ApplicationInfo: int getGwpAsanMode()>
<android.content.pm.ApplicationInfo: java.util.Set getKnownActivityEmbeddingCerts()>
<android.content.pm.ApplicationInfo: int getMemtagMode()>
<android.content.pm.ApplicationInfo: int getNativeHeapZeroInitialized()>
<android.content.pm.ApplicationInfo: int getRequestRawExternalStorageAccess()>
<android.content.pm.ApplicationInfo: boolean isProfileable()>
<android.content.pm.ApplicationInfo: boolean isProfileableByShell()>
<android.content.pm.ApplicationInfo: boolean isResourceOverlay()>
<android.content.pm.ApplicationInfo: boolean isVirtualPreload()>
<android.content.pm.ApplicationInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
<android.content.pm.ApplicationInfo: int CATEGORY_ACCESSIBILITY>
<android.content.pm.ApplicationInfo: int CATEGORY_AUDIO>
<android.content.pm.ApplicationInfo: int CATEGORY_GAME>
<android.content.pm.ApplicationInfo: int CATEGORY_IMAGE>
<android.content.pm.ApplicationInfo: int CATEGORY_MAPS>
<android.content.pm.ApplicationInfo: int CATEGORY_NEWS>
<android.content.pm.ApplicationInfo: int CATEGORY_PRODUCTIVITY>
<android.content.pm.ApplicationInfo: int CATEGORY_SOCIAL>
<android.content.pm.ApplicationInfo: int CATEGORY_UNDEFINED>
<android.content.pm.ApplicationInfo: int CATEGORY_VIDEO>
<android.content.pm.ApplicationInfo: android.os.Parcelable$Creator CREATOR>
<android.content.pm.ApplicationInfo: int FLAG_ALLOW_BACKUP>
<android.content.pm.ApplicationInfo: int FLAG_ALLOW_CLEAR_USER_DATA>
<android.content.pm.ApplicationInfo: int FLAG_ALLOW_TASK_REPARENTING>
<android.content.pm.ApplicationInfo: int FLAG_DEBUGGABLE>
<android.content.pm.ApplicationInfo: int FLAG_EXTERNAL_STORAGE>
<android.content.pm.ApplicationInfo: int FLAG_EXTRACT_NATIVE_LIBS>
<android.content.pm.ApplicationInfo: int FLAG_FACTORY_TEST>
<android.content.pm.ApplicationInfo: int FLAG_FULL_BACKUP_ONLY>
<android.content.pm.ApplicationInfo: int FLAG_HARDWARE_ACCELERATED>
<android.content.pm.ApplicationInfo: int FLAG_HAS_CODE>
<android.content.pm.ApplicationInfo: int FLAG_INSTALLED>
<android.content.pm.ApplicationInfo: int FLAG_IS_DATA_ONLY>
<android.content.pm.ApplicationInfo: int FLAG_IS_GAME>
<android.content.pm.ApplicationInfo: int FLAG_KILL_AFTER_RESTORE>
<android.content.pm.ApplicationInfo: int FLAG_LARGE_HEAP>
<android.content.pm.ApplicationInfo: int FLAG_MULTIARCH>
<android.content.pm.ApplicationInfo: int FLAG_PERSISTENT>
<android.content.pm.ApplicationInfo: int FLAG_RESIZEABLE_FOR_SCREENS>
<android.content.pm.ApplicationInfo: int FLAG_RESTORE_ANY_VERSION>
<android.content.pm.ApplicationInfo: int FLAG_STOPPED>
<android.content.pm.ApplicationInfo: int FLAG_SUPPORTS_LARGE_SCREENS>
<android.content.pm.ApplicationInfo: int FLAG_SUPPORTS_NORMAL_SCREENS>
<android.content.pm.ApplicationInfo: int FLAG_SUPPORTS_RTL>
<android.content.pm.ApplicationInfo: int FLAG_SUPPORTS_SCREEN_DENSITIES>
<android.content.pm.ApplicationInfo: int FLAG_SUPPORTS_SMALL_SCREENS>
<android.content.pm.ApplicationInfo: int FLAG_SUPPORTS_XLARGE_SCREENS>
<android.content.pm.ApplicationInfo: int FLAG_SUSPENDED>
<android.content.pm.ApplicationInfo: int FLAG_SYSTEM>
<android.content.pm.ApplicationInfo: int FLAG_TEST_ONLY>
<android.content.pm.ApplicationInfo: int FLAG_UPDATED_SYSTEM_APP>
<android.content.pm.ApplicationInfo: int FLAG_USES_CLEARTEXT_TRAFFIC>
<android.content.pm.ApplicationInfo: int FLAG_VM_SAFE_MODE>
<android.content.pm.ApplicationInfo: int GWP_ASAN_ALWAYS>
<android.content.pm.ApplicationInfo: int GWP_ASAN_DEFAULT>
<android.content.pm.ApplicationInfo: int GWP_ASAN_NEVER>
<android.content.pm.ApplicationInfo: int MEMTAG_ASYNC>
<android.content.pm.ApplicationInfo: int MEMTAG_DEFAULT>
<android.content.pm.ApplicationInfo: int MEMTAG_OFF>
<android.content.pm.ApplicationInfo: int MEMTAG_SYNC>
<android.content.pm.ApplicationInfo: int RAW_EXTERNAL_STORAGE_ACCESS_DEFAULT>
<android.content.pm.ApplicationInfo: int RAW_EXTERNAL_STORAGE_ACCESS_NOT_REQUESTED>
<android.content.pm.ApplicationInfo: int RAW_EXTERNAL_STORAGE_ACCESS_REQUESTED>
<android.content.pm.ApplicationInfo: int ZEROINIT_DEFAULT>
<android.content.pm.ApplicationInfo: int ZEROINIT_DISABLED>
<android.content.pm.ApplicationInfo: int ZEROINIT_ENABLED>
<android.content.pm.ApplicationInfo: java.lang.String appComponentFactory>
<android.content.pm.ApplicationInfo: java.lang.String backupAgentName>
<android.content.pm.ApplicationInfo: int category>
<android.content.pm.ApplicationInfo: java.lang.String className>
<android.content.pm.ApplicationInfo: int compatibleWidthLimitDp>
<android.content.pm.ApplicationInfo: int compileSdkVersion>
<android.content.pm.ApplicationInfo: java.lang.String compileSdkVersionCodename>
<android.content.pm.ApplicationInfo: java.lang.String dataDir>
<android.content.pm.ApplicationInfo: int descriptionRes>
<android.content.pm.ApplicationInfo: java.lang.String deviceProtectedDataDir>
<android.content.pm.ApplicationInfo: boolean enabled>
<android.content.pm.ApplicationInfo: int flags>
<android.content.pm.ApplicationInfo: int largestWidthLimitDp>
<android.content.pm.ApplicationInfo: java.lang.String manageSpaceActivityName>
<android.content.pm.ApplicationInfo: int minSdkVersion>
<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir>
<android.content.pm.ApplicationInfo: java.lang.String permission>
<android.content.pm.ApplicationInfo: java.lang.String processName>
<android.content.pm.ApplicationInfo: java.lang.String publicSourceDir>
<android.content.pm.ApplicationInfo: int requiresSmallestWidthDp>
<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>
<android.content.pm.ApplicationInfo: java.lang.String sourceDir>
<android.content.pm.ApplicationInfo: java.lang.String[] splitNames>
<android.content.pm.ApplicationInfo: java.lang.String[] splitPublicSourceDirs>
<android.content.pm.ApplicationInfo: java.lang.String[] splitSourceDirs>
<android.content.pm.ApplicationInfo: java.util.UUID storageUuid>
<android.content.pm.ApplicationInfo: int targetSdkVersion>
<android.content.pm.ApplicationInfo: java.lang.String taskAffinity>
<android.content.pm.ApplicationInfo: int theme>
<android.content.pm.ApplicationInfo: int uiOptions>
<android.content.pm.ApplicationInfo: int uid>
android.content.pm.ApplicationInfo$DisplayNameComparator
<android.content.pm.ApplicationInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>
<android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)>
android.content.pm.Attribution
<android.content.pm.Attribution: int describeContents()>
<android.content.pm.Attribution: int getLabel()>
<android.content.pm.Attribution: java.lang.String getTag()>
<android.content.pm.Attribution: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.Attribution: android.os.Parcelable$Creator CREATOR>
android.content.pm.Capability
<android.content.pm.Capability: int describeContents()>
<android.content.pm.Capability: java.lang.String getName()>
<android.content.pm.Capability: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.Capability: android.os.Parcelable$Creator CREATOR>
android.content.pm.Capability$Builder
<android.content.pm.Capability$Builder: void <init>(java.lang.String)>
<android.content.pm.Capability$Builder: android.content.pm.Capability build()>
android.content.pm.CapabilityParams
<android.content.pm.CapabilityParams: int describeContents()>
<android.content.pm.CapabilityParams: java.util.List getAliases()>
<android.content.pm.CapabilityParams: java.lang.String getName()>
<android.content.pm.CapabilityParams: java.lang.String getValue()>
<android.content.pm.CapabilityParams: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.CapabilityParams: android.os.Parcelable$Creator CREATOR>
android.content.pm.CapabilityParams$Builder
<android.content.pm.CapabilityParams$Builder: void <init>(java.lang.String,java.lang.String)>
<android.content.pm.CapabilityParams$Builder: android.content.pm.CapabilityParams$Builder addAlias(java.lang.String)>
<android.content.pm.CapabilityParams$Builder: android.content.pm.CapabilityParams build()>
android.content.pm.ChangedPackages
<android.content.pm.ChangedPackages: void <init>(int,java.util.List)>
<android.content.pm.ChangedPackages: int describeContents()>
<android.content.pm.ChangedPackages: java.util.List getPackageNames()>
<android.content.pm.ChangedPackages: int getSequenceNumber()>
<android.content.pm.ChangedPackages: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ChangedPackages: android.os.Parcelable$Creator CREATOR>
android.content.pm.Checksum
<android.content.pm.Checksum: void <init>(int,byte[])>
<android.content.pm.Checksum: int describeContents()>
<android.content.pm.Checksum: int getType()>
<android.content.pm.Checksum: byte[] getValue()>
<android.content.pm.Checksum: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.Checksum: android.os.Parcelable$Creator CREATOR>
<android.content.pm.Checksum: int TYPE_PARTIAL_MERKLE_ROOT_1M_SHA256>
<android.content.pm.Checksum: int TYPE_PARTIAL_MERKLE_ROOT_1M_SHA512>
<android.content.pm.Checksum: int TYPE_WHOLE_MD5>
<android.content.pm.Checksum: int TYPE_WHOLE_MERKLE_ROOT_4K_SHA256>
<android.content.pm.Checksum: int TYPE_WHOLE_SHA1>
<android.content.pm.Checksum: int TYPE_WHOLE_SHA256>
<android.content.pm.Checksum: int TYPE_WHOLE_SHA512>
android.content.pm.ComponentInfo
<android.content.pm.ComponentInfo: void <init>()>
<android.content.pm.ComponentInfo: void <init>(android.content.pm.ComponentInfo)>
<android.content.pm.ComponentInfo: void <init>(android.os.Parcel)>
<android.content.pm.ComponentInfo: int getBannerResource()>
<android.content.pm.ComponentInfo: int getIconResource()>
<android.content.pm.ComponentInfo: int getLogoResource()>
<android.content.pm.ComponentInfo: boolean isEnabled()>
<android.content.pm.ComponentInfo: android.content.pm.ApplicationInfo applicationInfo>
<android.content.pm.ComponentInfo: java.lang.String[] attributionTags>
<android.content.pm.ComponentInfo: int descriptionRes>
<android.content.pm.ComponentInfo: boolean directBootAware>
<android.content.pm.ComponentInfo: boolean enabled>
<android.content.pm.ComponentInfo: boolean exported>
<android.content.pm.ComponentInfo: java.lang.String processName>
<android.content.pm.ComponentInfo: java.lang.String splitName>
android.content.pm.ConfigurationInfo
<android.content.pm.ConfigurationInfo: void <init>()>
<android.content.pm.ConfigurationInfo: void <init>(android.content.pm.ConfigurationInfo)>
<android.content.pm.ConfigurationInfo: int describeContents()>
<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()>
<android.content.pm.ConfigurationInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ConfigurationInfo: android.os.Parcelable$Creator CREATOR>
<android.content.pm.ConfigurationInfo: int GL_ES_VERSION_UNDEFINED>
<android.content.pm.ConfigurationInfo: int INPUT_FEATURE_FIVE_WAY_NAV>
<android.content.pm.ConfigurationInfo: int INPUT_FEATURE_HARD_KEYBOARD>
<android.content.pm.ConfigurationInfo: int reqGlEsVersion>
<android.content.pm.ConfigurationInfo: int reqInputFeatures>
<android.content.pm.ConfigurationInfo: int reqKeyboardType>
<android.content.pm.ConfigurationInfo: int reqNavigation>
<android.content.pm.ConfigurationInfo: int reqTouchScreen>
android.content.pm.CrossProfileApps
<android.content.pm.CrossProfileApps: boolean canInteractAcrossProfiles()>
<android.content.pm.CrossProfileApps: boolean canRequestInteractAcrossProfiles()>
<android.content.pm.CrossProfileApps: android.content.Intent createRequestInteractAcrossProfilesIntent()>
<android.content.pm.CrossProfileApps: android.graphics.drawable.Drawable getProfileSwitchingIconDrawable(android.os.UserHandle)>
<android.content.pm.CrossProfileApps: java.lang.CharSequence getProfileSwitchingLabel(android.os.UserHandle)>
<android.content.pm.CrossProfileApps: java.util.List getTargetUserProfiles()>
<android.content.pm.CrossProfileApps: void startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity)>
<android.content.pm.CrossProfileApps: void startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity,android.os.Bundle)>
<android.content.pm.CrossProfileApps: void startMainActivity(android.content.ComponentName,android.os.UserHandle)>
<android.content.pm.CrossProfileApps: void startMainActivity(android.content.ComponentName,android.os.UserHandle,android.app.Activity,android.os.Bundle)>
<android.content.pm.CrossProfileApps: java.lang.String ACTION_CAN_INTERACT_ACROSS_PROFILES_CHANGED>
android.content.pm.FeatureGroupInfo
<android.content.pm.FeatureGroupInfo: void <init>()>
<android.content.pm.FeatureGroupInfo: void <init>(android.content.pm.FeatureGroupInfo)>
<android.content.pm.FeatureGroupInfo: int describeContents()>
<android.content.pm.FeatureGroupInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.FeatureGroupInfo: android.os.Parcelable$Creator CREATOR>
<android.content.pm.FeatureGroupInfo: android.content.pm.FeatureInfo[] features>
android.content.pm.FeatureInfo
<android.content.pm.FeatureInfo: void <init>()>
<android.content.pm.FeatureInfo: void <init>(android.content.pm.FeatureInfo)>
<android.content.pm.FeatureInfo: int describeContents()>
<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()>
<android.content.pm.FeatureInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.FeatureInfo: android.os.Parcelable$Creator CREATOR>
<android.content.pm.FeatureInfo: int FLAG_REQUIRED>
<android.content.pm.FeatureInfo: int GL_ES_VERSION_UNDEFINED>
<android.content.pm.FeatureInfo: int flags>
<android.content.pm.FeatureInfo: java.lang.String name>
<android.content.pm.FeatureInfo: int reqGlEsVersion>
<android.content.pm.FeatureInfo: int version>
android.content.pm.InstallSourceInfo
<android.content.pm.InstallSourceInfo: int describeContents()>
<android.content.pm.InstallSourceInfo: java.lang.String getInitiatingPackageName()>
<android.content.pm.InstallSourceInfo: android.content.pm.SigningInfo getInitiatingPackageSigningInfo()>
<android.content.pm.InstallSourceInfo: java.lang.String getInstallingPackageName()>
<android.content.pm.InstallSourceInfo: java.lang.String getOriginatingPackageName()>
<android.content.pm.InstallSourceInfo: int getPackageSource()>
<android.content.pm.InstallSourceInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.InstallSourceInfo: android.os.Parcelable$Creator CREATOR>
android.content.pm.InstrumentationInfo
<android.content.pm.InstrumentationInfo: void <init>()>
<android.content.pm.InstrumentationInfo: void <init>(android.content.pm.InstrumentationInfo)>
<android.content.pm.InstrumentationInfo: int describeContents()>
<android.content.pm.InstrumentationInfo: android.os.Parcelable$Creator CREATOR>
<android.content.pm.InstrumentationInfo: java.lang.String dataDir>
<android.content.pm.InstrumentationInfo: boolean functionalTest>
<android.content.pm.InstrumentationInfo: boolean handleProfiling>
<android.content.pm.InstrumentationInfo: java.lang.String publicSourceDir>
<android.content.pm.InstrumentationInfo: java.lang.String sourceDir>
<android.content.pm.InstrumentationInfo: java.lang.String[] splitNames>
<android.content.pm.InstrumentationInfo: java.lang.String[] splitPublicSourceDirs>
<android.content.pm.InstrumentationInfo: java.lang.String[] splitSourceDirs>
<android.content.pm.InstrumentationInfo: java.lang.String targetPackage>
<android.content.pm.InstrumentationInfo: java.lang.String targetProcesses>
android.content.pm.LabeledIntent
<android.content.pm.LabeledIntent: void <init>(android.content.Intent,java.lang.String,int,int)>
<android.content.pm.LabeledIntent: void <init>(android.content.Intent,java.lang.String,java.lang.CharSequence,int)>
<android.content.pm.LabeledIntent: void <init>(java.lang.String,int,int)>
<android.content.pm.LabeledIntent: void <init>(java.lang.String,java.lang.CharSequence,int)>
<android.content.pm.LabeledIntent: int getIconResource()>
<android.content.pm.LabeledIntent: int getLabelResource()>
<android.content.pm.LabeledIntent: java.lang.CharSequence getNonLocalizedLabel()>
<android.content.pm.LabeledIntent: java.lang.String getSourcePackage()>
<android.content.pm.LabeledIntent: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.content.pm.LabeledIntent: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.content.pm.LabeledIntent: android.os.Parcelable$Creator CREATOR>
android.content.pm.LauncherActivityInfo
<android.content.pm.LauncherActivityInfo: android.content.pm.ActivityInfo getActivityInfo()>
<android.content.pm.LauncherActivityInfo: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.content.pm.LauncherActivityInfo: android.graphics.drawable.Drawable getBadgedIcon(int)>
<android.content.pm.LauncherActivityInfo: android.content.ComponentName getComponentName()>
<android.content.pm.LauncherActivityInfo: long getFirstInstallTime()>
<android.content.pm.LauncherActivityInfo: android.graphics.drawable.Drawable getIcon(int)>
<android.content.pm.LauncherActivityInfo: java.lang.CharSequence getLabel()>
<android.content.pm.LauncherActivityInfo: float getLoadingProgress()>
<android.content.pm.LauncherActivityInfo: java.lang.String getName()>
<android.content.pm.LauncherActivityInfo: android.os.UserHandle getUser()>
android.content.pm.LauncherApps
<android.content.pm.LauncherApps: java.util.List getActivityList(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps: java.util.List getAllPackageInstallerSessions()>
<android.content.pm.LauncherApps: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,android.os.UserHandle)>
<android.content.pm.LauncherApps: android.content.pm.LauncherApps$PinItemRequest getPinItemRequest(android.content.Intent)>
<android.content.pm.LauncherApps: java.util.List getProfiles()>
<android.content.pm.LauncherApps: android.graphics.drawable.Drawable getShortcutBadgedIconDrawable(android.content.pm.ShortcutInfo,int)>
<android.content.pm.LauncherApps: android.content.IntentSender getShortcutConfigActivityIntent(android.content.pm.LauncherActivityInfo)>
<android.content.pm.LauncherApps: java.util.List getShortcutConfigActivityList(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps: android.graphics.drawable.Drawable getShortcutIconDrawable(android.content.pm.ShortcutInfo,int)>
<android.content.pm.LauncherApps: android.app.PendingIntent getShortcutIntent(java.lang.String,java.lang.String,android.os.Bundle,android.os.UserHandle)>
<android.content.pm.LauncherApps: java.util.List getShortcuts(android.content.pm.LauncherApps$ShortcutQuery,android.os.UserHandle)>
<android.content.pm.LauncherApps: android.os.Bundle getSuspendedPackageLauncherExtras(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps: boolean hasShortcutHostPermission()>
<android.content.pm.LauncherApps: boolean isActivityEnabled(android.content.ComponentName,android.os.UserHandle)>
<android.content.pm.LauncherApps: boolean isPackageEnabled(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps: void pinShortcuts(java.lang.String,java.util.List,android.os.UserHandle)>
<android.content.pm.LauncherApps: void registerCallback(android.content.pm.LauncherApps$Callback)>
<android.content.pm.LauncherApps: void registerCallback(android.content.pm.LauncherApps$Callback,android.os.Handler)>
<android.content.pm.LauncherApps: void registerPackageInstallerSessionCallback(java.util.concurrent.Executor,android.content.pm.PackageInstaller$SessionCallback)>
<android.content.pm.LauncherApps: android.content.pm.LauncherActivityInfo resolveActivity(android.content.Intent,android.os.UserHandle)>
<android.content.pm.LauncherApps: boolean shouldHideFromSuggestions(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps: void startAppDetailsActivity(android.content.ComponentName,android.os.UserHandle,android.graphics.Rect,android.os.Bundle)>
<android.content.pm.LauncherApps: void startMainActivity(android.content.ComponentName,android.os.UserHandle,android.graphics.Rect,android.os.Bundle)>
<android.content.pm.LauncherApps: void startPackageInstallerSessionDetailsActivity(android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle)>
<android.content.pm.LauncherApps: void startShortcut(java.lang.String,java.lang.String,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
<android.content.pm.LauncherApps: void startShortcut(android.content.pm.ShortcutInfo,android.graphics.Rect,android.os.Bundle)>
<android.content.pm.LauncherApps: void unregisterCallback(android.content.pm.LauncherApps$Callback)>
<android.content.pm.LauncherApps: void unregisterPackageInstallerSessionCallback(android.content.pm.PackageInstaller$SessionCallback)>
<android.content.pm.LauncherApps: java.lang.String ACTION_CONFIRM_PIN_APPWIDGET>
<android.content.pm.LauncherApps: java.lang.String ACTION_CONFIRM_PIN_SHORTCUT>
<android.content.pm.LauncherApps: java.lang.String EXTRA_PIN_ITEM_REQUEST>
android.content.pm.LauncherApps$Callback
<android.content.pm.LauncherApps$Callback: void <init>()>
<android.content.pm.LauncherApps$Callback: void onPackageAdded(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps$Callback: void onPackageChanged(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps$Callback: void onPackageLoadingProgressChanged(java.lang.String,android.os.UserHandle,float)>
<android.content.pm.LauncherApps$Callback: void onPackageRemoved(java.lang.String,android.os.UserHandle)>
<android.content.pm.LauncherApps$Callback: void onPackagesAvailable(java.lang.String[],android.os.UserHandle,boolean)>
<android.content.pm.LauncherApps$Callback: void onPackagesSuspended(java.lang.String[],android.os.UserHandle)>
<android.content.pm.LauncherApps$Callback: void onPackagesSuspended(java.lang.String[],android.os.UserHandle,android.os.Bundle)>
<android.content.pm.LauncherApps$Callback: void onPackagesUnavailable(java.lang.String[],android.os.UserHandle,boolean)>
<android.content.pm.LauncherApps$Callback: void onPackagesUnsuspended(java.lang.String[],android.os.UserHandle)>
<android.content.pm.LauncherApps$Callback: void onShortcutsChanged(java.lang.String,java.util.List,android.os.UserHandle)>
android.content.pm.LauncherApps$PinItemRequest
<android.content.pm.LauncherApps$PinItemRequest: boolean accept(android.os.Bundle)>
<android.content.pm.LauncherApps$PinItemRequest: boolean accept()>
<android.content.pm.LauncherApps$PinItemRequest: int describeContents()>
<android.content.pm.LauncherApps$PinItemRequest: android.appwidget.AppWidgetProviderInfo getAppWidgetProviderInfo(android.content.Context)>
<android.content.pm.LauncherApps$PinItemRequest: android.os.Bundle getExtras()>
<android.content.pm.LauncherApps$PinItemRequest: int getRequestType()>
<android.content.pm.LauncherApps$PinItemRequest: android.content.pm.ShortcutInfo getShortcutInfo()>
<android.content.pm.LauncherApps$PinItemRequest: boolean isValid()>
<android.content.pm.LauncherApps$PinItemRequest: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.LauncherApps$PinItemRequest: android.os.Parcelable$Creator CREATOR>
<android.content.pm.LauncherApps$PinItemRequest: int REQUEST_TYPE_APPWIDGET>
<android.content.pm.LauncherApps$PinItemRequest: int REQUEST_TYPE_SHORTCUT>
android.content.pm.LauncherApps$ShortcutQuery
<android.content.pm.LauncherApps$ShortcutQuery: void <init>()>
<android.content.pm.LauncherApps$ShortcutQuery: android.content.pm.LauncherApps$ShortcutQuery setActivity(android.content.ComponentName)>
<android.content.pm.LauncherApps$ShortcutQuery: android.content.pm.LauncherApps$ShortcutQuery setChangedSince(long)>
<android.content.pm.LauncherApps$ShortcutQuery: android.content.pm.LauncherApps$ShortcutQuery setLocusIds(java.util.List)>
<android.content.pm.LauncherApps$ShortcutQuery: android.content.pm.LauncherApps$ShortcutQuery setPackage(java.lang.String)>
<android.content.pm.LauncherApps$ShortcutQuery: android.content.pm.LauncherApps$ShortcutQuery setQueryFlags(int)>
<android.content.pm.LauncherApps$ShortcutQuery: android.content.pm.LauncherApps$ShortcutQuery setShortcutIds(java.util.List)>
<android.content.pm.LauncherApps$ShortcutQuery: int FLAG_GET_KEY_FIELDS_ONLY>
<android.content.pm.LauncherApps$ShortcutQuery: int FLAG_MATCH_CACHED>
<android.content.pm.LauncherApps$ShortcutQuery: int FLAG_MATCH_DYNAMIC>
<android.content.pm.LauncherApps$ShortcutQuery: int FLAG_MATCH_MANIFEST>
<android.content.pm.LauncherApps$ShortcutQuery: int FLAG_MATCH_PINNED>
<android.content.pm.LauncherApps$ShortcutQuery: int FLAG_MATCH_PINNED_BY_ANY_LAUNCHER>
android.content.pm.ModuleInfo
<android.content.pm.ModuleInfo: int describeContents()>
<android.content.pm.ModuleInfo: java.lang.CharSequence getName()>
<android.content.pm.ModuleInfo: java.lang.String getPackageName()>
<android.content.pm.ModuleInfo: boolean isHidden()>
<android.content.pm.ModuleInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ModuleInfo: android.os.Parcelable$Creator CREATOR>
android.content.pm.PackageInfo
<android.content.pm.PackageInfo: void <init>()>
<android.content.pm.PackageInfo: int describeContents()>
<android.content.pm.PackageInfo: long getLongVersionCode()>
<android.content.pm.PackageInfo: void setLongVersionCode(long)>
<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageInfo: android.os.Parcelable$Creator CREATOR>
<android.content.pm.PackageInfo: int INSTALL_LOCATION_AUTO>
<android.content.pm.PackageInfo: int INSTALL_LOCATION_INTERNAL_ONLY>
<android.content.pm.PackageInfo: int INSTALL_LOCATION_PREFER_EXTERNAL>
<android.content.pm.PackageInfo: int REQUESTED_PERMISSION_GRANTED>
<android.content.pm.PackageInfo: int REQUESTED_PERMISSION_NEVER_FOR_LOCATION>
<android.content.pm.PackageInfo: android.content.pm.ActivityInfo[] activities>
<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>
<android.content.pm.PackageInfo: android.content.pm.Attribution[] attributions>
<android.content.pm.PackageInfo: int baseRevisionCode>
<android.content.pm.PackageInfo: android.content.pm.ConfigurationInfo[] configPreferences>
<android.content.pm.PackageInfo: android.content.pm.FeatureGroupInfo[] featureGroups>
<android.content.pm.PackageInfo: long firstInstallTime>
<android.content.pm.PackageInfo: int[] gids>
<android.content.pm.PackageInfo: int installLocation>
<android.content.pm.PackageInfo: android.content.pm.InstrumentationInfo[] instrumentation>
<android.content.pm.PackageInfo: boolean isApex>
<android.content.pm.PackageInfo: long lastUpdateTime>
<android.content.pm.PackageInfo: java.lang.String packageName>
<android.content.pm.PackageInfo: android.content.pm.PermissionInfo[] permissions>
<android.content.pm.PackageInfo: android.content.pm.ProviderInfo[] providers>
<android.content.pm.PackageInfo: android.content.pm.ActivityInfo[] receivers>
<android.content.pm.PackageInfo: android.content.pm.FeatureInfo[] reqFeatures>
<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>
<android.content.pm.PackageInfo: int[] requestedPermissionsFlags>
<android.content.pm.PackageInfo: android.content.pm.ServiceInfo[] services>
<android.content.pm.PackageInfo: java.lang.String sharedUserId>
<android.content.pm.PackageInfo: int sharedUserLabel>
<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>
<android.content.pm.PackageInfo: android.content.pm.SigningInfo signingInfo>
<android.content.pm.PackageInfo: java.lang.String[] splitNames>
<android.content.pm.PackageInfo: int[] splitRevisionCodes>
<android.content.pm.PackageInfo: int versionCode>
<android.content.pm.PackageInfo: java.lang.String versionName>
android.content.pm.PackageInstaller
<android.content.pm.PackageInstaller: void abandonSession(int)>
<android.content.pm.PackageInstaller: int createSession(android.content.pm.PackageInstaller$SessionParams)>
<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getActiveStagedSession()>
<android.content.pm.PackageInstaller: java.util.List getActiveStagedSessions()>
<android.content.pm.PackageInstaller: java.util.List getAllSessions()>
<android.content.pm.PackageInstaller: java.util.List getMySessions()>
<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)>
<android.content.pm.PackageInstaller: java.util.List getStagedSessions()>
<android.content.pm.PackageInstaller: void installExistingPackage(java.lang.String,int,android.content.IntentSender)>
<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$Session openSession(int)>
<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback)>
<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback,android.os.Handler)>
<android.content.pm.PackageInstaller: void uninstall(java.lang.String,android.content.IntentSender)>
<android.content.pm.PackageInstaller: void uninstall(android.content.pm.VersionedPackage,android.content.IntentSender)>
<android.content.pm.PackageInstaller: void uninstallExistingPackage(java.lang.String,android.content.IntentSender)>
<android.content.pm.PackageInstaller: void unregisterSessionCallback(android.content.pm.PackageInstaller$SessionCallback)>
<android.content.pm.PackageInstaller: void updateSessionAppIcon(int,android.graphics.Bitmap)>
<android.content.pm.PackageInstaller: void updateSessionAppLabel(int,java.lang.CharSequence)>
<android.content.pm.PackageInstaller: java.lang.String ACTION_SESSION_COMMITTED>
<android.content.pm.PackageInstaller: java.lang.String ACTION_SESSION_DETAILS>
<android.content.pm.PackageInstaller: java.lang.String ACTION_SESSION_UPDATED>
<android.content.pm.PackageInstaller: java.lang.String EXTRA_OTHER_PACKAGE_NAME>
<android.content.pm.PackageInstaller: java.lang.String EXTRA_PACKAGE_NAME>
<android.content.pm.PackageInstaller: java.lang.String EXTRA_SESSION>
<android.content.pm.PackageInstaller: java.lang.String EXTRA_SESSION_ID>
<android.content.pm.PackageInstaller: java.lang.String EXTRA_STATUS>
<android.content.pm.PackageInstaller: java.lang.String EXTRA_STATUS_MESSAGE>
<android.content.pm.PackageInstaller: java.lang.String EXTRA_STORAGE_PATH>
<android.content.pm.PackageInstaller: int PACKAGE_SOURCE_DOWNLOADED_FILE>
<android.content.pm.PackageInstaller: int PACKAGE_SOURCE_LOCAL_FILE>
<android.content.pm.PackageInstaller: int PACKAGE_SOURCE_OTHER>
<android.content.pm.PackageInstaller: int PACKAGE_SOURCE_STORE>
<android.content.pm.PackageInstaller: int PACKAGE_SOURCE_UNSPECIFIED>
<android.content.pm.PackageInstaller: int STATUS_FAILURE>
<android.content.pm.PackageInstaller: int STATUS_FAILURE_ABORTED>
<android.content.pm.PackageInstaller: int STATUS_FAILURE_BLOCKED>
<android.content.pm.PackageInstaller: int STATUS_FAILURE_CONFLICT>
<android.content.pm.PackageInstaller: int STATUS_FAILURE_INCOMPATIBLE>
<android.content.pm.PackageInstaller: int STATUS_FAILURE_INVALID>
<android.content.pm.PackageInstaller: int STATUS_FAILURE_STORAGE>
<android.content.pm.PackageInstaller: int STATUS_PENDING_USER_ACTION>
<android.content.pm.PackageInstaller: int STATUS_SUCCESS>
android.content.pm.PackageInstaller$Session
<android.content.pm.PackageInstaller$Session: void abandon()>
<android.content.pm.PackageInstaller$Session: void addChildSessionId(int)>
<android.content.pm.PackageInstaller$Session: void close()>
<android.content.pm.PackageInstaller$Session: void commit(android.content.IntentSender)>
<android.content.pm.PackageInstaller$Session: void fsync(java.io.OutputStream)>
<android.content.pm.PackageInstaller$Session: int[] getChildSessionIds()>
<android.content.pm.PackageInstaller$Session: java.lang.String[] getNames()>
<android.content.pm.PackageInstaller$Session: int getParentSessionId()>
<android.content.pm.PackageInstaller$Session: boolean isMultiPackage()>
<android.content.pm.PackageInstaller$Session: boolean isStaged()>
<android.content.pm.PackageInstaller$Session: java.io.InputStream openRead(java.lang.String)>
<android.content.pm.PackageInstaller$Session: java.io.OutputStream openWrite(java.lang.String,long,long)>
<android.content.pm.PackageInstaller$Session: void removeChildSessionId(int)>
<android.content.pm.PackageInstaller$Session: void removeSplit(java.lang.String)>
<android.content.pm.PackageInstaller$Session: void requestChecksums(java.lang.String,int,java.util.List,java.util.concurrent.Executor,android.content.pm.PackageManager$OnChecksumsReadyListener)>
<android.content.pm.PackageInstaller$Session: void setChecksums(java.lang.String,java.util.List,byte[])>
<android.content.pm.PackageInstaller$Session: void setStagingProgress(float)>
<android.content.pm.PackageInstaller$Session: void transfer(java.lang.String)>
android.content.pm.PackageInstaller$SessionCallback
<android.content.pm.PackageInstaller$SessionCallback: void <init>()>
<android.content.pm.PackageInstaller$SessionCallback: void onActiveChanged(int,boolean)>
<android.content.pm.PackageInstaller$SessionCallback: void onBadgingChanged(int)>
<android.content.pm.PackageInstaller$SessionCallback: void onCreated(int)>
<android.content.pm.PackageInstaller$SessionCallback: void onFinished(int,boolean)>
<android.content.pm.PackageInstaller$SessionCallback: void onProgressChanged(int,float)>
android.content.pm.PackageInstaller$SessionInfo
<android.content.pm.PackageInstaller$SessionInfo: android.content.Intent createDetailsIntent()>
<android.content.pm.PackageInstaller$SessionInfo: int describeContents()>
<android.content.pm.PackageInstaller$SessionInfo: android.graphics.Bitmap getAppIcon()>
<android.content.pm.PackageInstaller$SessionInfo: java.lang.CharSequence getAppLabel()>
<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getAppPackageName()>
<android.content.pm.PackageInstaller$SessionInfo: int[] getChildSessionIds()>
<android.content.pm.PackageInstaller$SessionInfo: long getCreatedMillis()>
<android.content.pm.PackageInstaller$SessionInfo: int getInstallLocation()>
<android.content.pm.PackageInstaller$SessionInfo: int getInstallReason()>
<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getInstallerAttributionTag()>
<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getInstallerPackageName()>
<android.content.pm.PackageInstaller$SessionInfo: int getMode()>
<android.content.pm.PackageInstaller$SessionInfo: int getOriginatingUid()>
<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri getOriginatingUri()>
<android.content.pm.PackageInstaller$SessionInfo: int getPackageSource()>
<android.content.pm.PackageInstaller$SessionInfo: int getParentSessionId()>
<android.content.pm.PackageInstaller$SessionInfo: float getProgress()>
<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri getReferrerUri()>
<android.content.pm.PackageInstaller$SessionInfo: int getRequireUserAction()>
<android.content.pm.PackageInstaller$SessionInfo: int getSessionId()>
<android.content.pm.PackageInstaller$SessionInfo: long getSize()>
<android.content.pm.PackageInstaller$SessionInfo: int getStagedSessionErrorCode()>
<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getStagedSessionErrorMessage()>
<android.content.pm.PackageInstaller$SessionInfo: long getUpdatedMillis()>
<android.content.pm.PackageInstaller$SessionInfo: android.os.UserHandle getUser()>
<android.content.pm.PackageInstaller$SessionInfo: boolean hasParentSessionId()>
<android.content.pm.PackageInstaller$SessionInfo: boolean isActive()>
<android.content.pm.PackageInstaller$SessionInfo: boolean isCommitted()>
<android.content.pm.PackageInstaller$SessionInfo: boolean isMultiPackage()>
<android.content.pm.PackageInstaller$SessionInfo: boolean isSealed()>
<android.content.pm.PackageInstaller$SessionInfo: boolean isStaged()>
<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionActive()>
<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionApplied()>
<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionFailed()>
<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionReady()>
<android.content.pm.PackageInstaller$SessionInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageInstaller$SessionInfo: android.os.Parcelable$Creator CREATOR>
<android.content.pm.PackageInstaller$SessionInfo: int INVALID_ID>
<android.content.pm.PackageInstaller$SessionInfo: int SESSION_ACTIVATION_FAILED>
<android.content.pm.PackageInstaller$SessionInfo: int SESSION_CONFLICT>
<android.content.pm.PackageInstaller$SessionInfo: int SESSION_NO_ERROR>
<android.content.pm.PackageInstaller$SessionInfo: int SESSION_UNKNOWN_ERROR>
<android.content.pm.PackageInstaller$SessionInfo: int SESSION_VERIFICATION_FAILED>
<android.content.pm.PackageInstaller$SessionInfo: int STAGED_SESSION_ACTIVATION_FAILED>
<android.content.pm.PackageInstaller$SessionInfo: int STAGED_SESSION_CONFLICT>
<android.content.pm.PackageInstaller$SessionInfo: int STAGED_SESSION_NO_ERROR>
<android.content.pm.PackageInstaller$SessionInfo: int STAGED_SESSION_UNKNOWN>
<android.content.pm.PackageInstaller$SessionInfo: int STAGED_SESSION_VERIFICATION_FAILED>
android.content.pm.PackageInstaller$SessionParams
<android.content.pm.PackageInstaller$SessionParams: void <init>(int)>
<android.content.pm.PackageInstaller$SessionParams: int describeContents()>
<android.content.pm.PackageInstaller$SessionParams: void setAppIcon(android.graphics.Bitmap)>
<android.content.pm.PackageInstaller$SessionParams: void setAppLabel(java.lang.CharSequence)>
<android.content.pm.PackageInstaller$SessionParams: void setAppPackageName(java.lang.String)>
<android.content.pm.PackageInstaller$SessionParams: void setAutoRevokePermissionsMode(boolean)>
<android.content.pm.PackageInstaller$SessionParams: void setInstallLocation(int)>
<android.content.pm.PackageInstaller$SessionParams: void setInstallReason(int)>
<android.content.pm.PackageInstaller$SessionParams: void setInstallScenario(int)>
<android.content.pm.PackageInstaller$SessionParams: void setMultiPackage()>
<android.content.pm.PackageInstaller$SessionParams: void setOriginatingUid(int)>
<android.content.pm.PackageInstaller$SessionParams: void setOriginatingUri(android.net.Uri)>
<android.content.pm.PackageInstaller$SessionParams: void setPackageSource(int)>
<android.content.pm.PackageInstaller$SessionParams: void setReferrerUri(android.net.Uri)>
<android.content.pm.PackageInstaller$SessionParams: void setRequireUserAction(int)>
<android.content.pm.PackageInstaller$SessionParams: void setSize(long)>
<android.content.pm.PackageInstaller$SessionParams: void setWhitelistedRestrictedPermissions(java.util.Set)>
<android.content.pm.PackageInstaller$SessionParams: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageInstaller$SessionParams: android.os.Parcelable$Creator CREATOR>
<android.content.pm.PackageInstaller$SessionParams: int MODE_FULL_INSTALL>
<android.content.pm.PackageInstaller$SessionParams: int MODE_INHERIT_EXISTING>
<android.content.pm.PackageInstaller$SessionParams: java.util.Set RESTRICTED_PERMISSIONS_ALL>
<android.content.pm.PackageInstaller$SessionParams: int USER_ACTION_NOT_REQUIRED>
<android.content.pm.PackageInstaller$SessionParams: int USER_ACTION_REQUIRED>
<android.content.pm.PackageInstaller$SessionParams: int USER_ACTION_UNSPECIFIED>
android.content.pm.PackageItemInfo
<android.content.pm.PackageItemInfo: void <init>()>
<android.content.pm.PackageItemInfo: void <init>(android.content.pm.PackageItemInfo)>
<android.content.pm.PackageItemInfo: void <init>(android.os.Parcel)>
<android.content.pm.PackageItemInfo: void dumpBack(android.util.Printer,java.lang.String)>
<android.content.pm.PackageItemInfo: void dumpFront(android.util.Printer,java.lang.String)>
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadBanner(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadUnbadgedIcon(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)>
<android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageItemInfo: int banner>
<android.content.pm.PackageItemInfo: int icon>
<android.content.pm.PackageItemInfo: int labelRes>
<android.content.pm.PackageItemInfo: int logo>
<android.content.pm.PackageItemInfo: android.os.Bundle metaData>
<android.content.pm.PackageItemInfo: java.lang.String name>
<android.content.pm.PackageItemInfo: java.lang.CharSequence nonLocalizedLabel>
<android.content.pm.PackageItemInfo: java.lang.String packageName>
android.content.pm.PackageItemInfo$DisplayNameComparator
<android.content.pm.PackageItemInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)>
android.content.pm.PackageManager
<android.content.pm.PackageManager: void <init>()>
<android.content.pm.PackageManager: void addPackageToPreferred(java.lang.String)>
<android.content.pm.PackageManager: boolean addPermission(android.content.pm.PermissionInfo)>
<android.content.pm.PackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)>
<android.content.pm.PackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>
<android.content.pm.PackageManager: boolean addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)>
<android.content.pm.PackageManager: boolean canPackageQuery(java.lang.String,java.lang.String)>
<android.content.pm.PackageManager: boolean canRequestPackageInstalls()>
<android.content.pm.PackageManager: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>
<android.content.pm.PackageManager: int checkSignatures(java.lang.String,java.lang.String)>
<android.content.pm.PackageManager: int checkSignatures(int,int)>
<android.content.pm.PackageManager: void clearInstantAppCookie()>
<android.content.pm.PackageManager: void clearPackagePreferredActivities(java.lang.String)>
<android.content.pm.PackageManager: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>
<android.content.pm.PackageManager: void extendVerificationTimeout(int,int,long)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityBanner(android.content.ComponentName)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityBanner(android.content.Intent)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)>
<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>
<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)>
<android.content.pm.PackageManager: java.util.List getAllPermissionGroups(int)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationBanner(java.lang.String)>
<android.content.pm.PackageManager: int getApplicationEnabledSetting(java.lang.String)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>
<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,android.content.pm.PackageManager$ApplicationInfoFlags)>
<android.content.pm.PackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)>
<android.content.pm.PackageManager: java.lang.CharSequence getBackgroundPermissionOptionLabel()>
<android.content.pm.PackageManager: android.content.pm.ChangedPackages getChangedPackages(int)>
<android.content.pm.PackageManager: int getComponentEnabledSetting(android.content.ComponentName)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: void getGroupOfPlatformPermission(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.content.pm.PackageManager: android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)>
<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>
<android.content.pm.PackageManager: java.util.List getInstalledApplications(android.content.pm.PackageManager$ApplicationInfoFlags)>
<android.content.pm.PackageManager: java.util.List getInstalledModules(int)>
<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)>
<android.content.pm.PackageManager: java.util.List getInstalledPackages(android.content.pm.PackageManager$PackageInfoFlags)>
<android.content.pm.PackageManager: java.lang.String getInstallerPackageName(java.lang.String)>
<android.content.pm.PackageManager: byte[] getInstantAppCookie()>
<android.content.pm.PackageManager: int getInstantAppCookieMaxBytes()>
<android.content.pm.PackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
<android.content.pm.PackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)>
<android.content.pm.PackageManager: android.content.IntentSender getLaunchIntentSenderForPackage(java.lang.String)>
<android.content.pm.PackageManager: android.content.Intent getLeanbackLaunchIntentForPackage(java.lang.String)>
<android.content.pm.PackageManager: java.util.Set getMimeGroup(java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)>
<android.content.pm.PackageManager: java.lang.String getNameForUid(int)>
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)>
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>
<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String)>
<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String,int)>
<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage,int)>
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage,android.content.pm.PackageManager$PackageInfoFlags)>
<android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>
<android.content.pm.PackageManager: int getPackageUid(java.lang.String,int)>
<android.content.pm.PackageManager: int getPackageUid(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>
<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>
<android.content.pm.PackageManager: java.util.List getPackagesHoldingPermissions(java.lang.String[],int)>
<android.content.pm.PackageManager: java.util.List getPackagesHoldingPermissions(java.lang.String[],android.content.pm.PackageManager$PackageInfoFlags)>
<android.content.pm.PackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
<android.content.pm.PackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>
<android.content.pm.PackageManager: void getPlatformPermissionsForGroup(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.content.pm.PackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
<android.content.pm.PackageManager: java.util.List getPreferredPackages(int)>
<android.content.pm.PackageManager: android.content.pm.PackageManager$Property getProperty(java.lang.String,java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.PackageManager$Property getProperty(java.lang.String,android.content.ComponentName)>
<android.content.pm.PackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)>
<android.content.pm.PackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>
<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>
<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>
<android.content.pm.PackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)>
<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo,android.content.res.Configuration)>
<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>
<android.content.pm.PackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>
<android.content.pm.PackageManager: java.util.List getSharedLibraries(int)>
<android.content.pm.PackageManager: java.util.List getSharedLibraries(android.content.pm.PackageManager$PackageInfoFlags)>
<android.content.pm.PackageManager: android.os.Bundle getSuspendedPackageAppExtras()>
<android.content.pm.PackageManager: boolean getSyntheticAppDetailsActivityEnabled(java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>
<android.content.pm.PackageManager: java.lang.String[] getSystemSharedLibraryNames()>
<android.content.pm.PackageManager: int getTargetSdkVersion(java.lang.String)>
<android.content.pm.PackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable,android.os.UserHandle,android.graphics.Rect,int)>
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getUserBadgedIcon(android.graphics.drawable.Drawable,android.os.UserHandle)>
<android.content.pm.PackageManager: java.lang.CharSequence getUserBadgedLabel(java.lang.CharSequence,android.os.UserHandle)>
<android.content.pm.PackageManager: java.util.Set getWhitelistedRestrictedPermissions(java.lang.String,int)>
<android.content.pm.PackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)>
<android.content.pm.PackageManager: boolean hasSigningCertificate(java.lang.String,byte[],int)>
<android.content.pm.PackageManager: boolean hasSigningCertificate(int,byte[],int)>
<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>
<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String,int)>
<android.content.pm.PackageManager: boolean isAutoRevokeWhitelisted(java.lang.String)>
<android.content.pm.PackageManager: boolean isAutoRevokeWhitelisted()>
<android.content.pm.PackageManager: boolean isDefaultApplicationIcon(android.graphics.drawable.Drawable)>
<android.content.pm.PackageManager: boolean isDeviceUpgrading()>
<android.content.pm.PackageManager: boolean isInstantApp()>
<android.content.pm.PackageManager: boolean isInstantApp(java.lang.String)>
<android.content.pm.PackageManager: boolean isPackageSuspended(java.lang.String)>
<android.content.pm.PackageManager: boolean isPackageSuspended()>
<android.content.pm.PackageManager: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String)>
<android.content.pm.PackageManager: boolean isSafeMode()>
<android.content.pm.PackageManager: java.util.List queryActivityProperty(java.lang.String)>
<android.content.pm.PackageManager: java.util.List queryApplicationProperty(java.lang.String)>
<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>
<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>
<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int)>
<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,android.content.pm.PackageManager$ComponentInfoFlags)>
<android.content.pm.PackageManager: java.util.List queryInstrumentation(java.lang.String,int)>
<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>
<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>
<android.content.pm.PackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)>
<android.content.pm.PackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,java.util.List,android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>
<android.content.pm.PackageManager: java.util.List queryIntentContentProviders(android.content.Intent,int)>
<android.content.pm.PackageManager: java.util.List queryIntentContentProviders(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>
<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)>
<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>
<android.content.pm.PackageManager: java.util.List queryPermissionsByGroup(java.lang.String,int)>
<android.content.pm.PackageManager: java.util.List queryProviderProperty(java.lang.String)>
<android.content.pm.PackageManager: java.util.List queryReceiverProperty(java.lang.String)>
<android.content.pm.PackageManager: java.util.List queryServiceProperty(java.lang.String)>
<android.content.pm.PackageManager: void removePackageFromPreferred(java.lang.String)>
<android.content.pm.PackageManager: void removePermission(java.lang.String)>
<android.content.pm.PackageManager: boolean removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)>
<android.content.pm.PackageManager: void requestChecksums(java.lang.String,boolean,int,java.util.List,android.content.pm.PackageManager$OnChecksumsReadyListener)>
<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>
<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>
<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>
<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,android.content.pm.PackageManager$ComponentInfoFlags)>
<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>
<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>
<android.content.pm.PackageManager: void setApplicationCategoryHint(java.lang.String,int)>
<android.content.pm.PackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)>
<android.content.pm.PackageManager: boolean setAutoRevokeWhitelisted(java.lang.String,boolean)>
<android.content.pm.PackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)>
<android.content.pm.PackageManager: void setComponentEnabledSettings(java.util.List)>
<android.content.pm.PackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)>
<android.content.pm.PackageManager: void setMimeGroup(java.lang.String,java.util.Set)>
<android.content.pm.PackageManager: void updateInstantAppCookie(byte[])>
<android.content.pm.PackageManager: void verifyPendingInstall(int,int)>
<android.content.pm.PackageManager: int CERT_INPUT_RAW_X509>
<android.content.pm.PackageManager: int CERT_INPUT_SHA256>
<android.content.pm.PackageManager: int COMPONENT_ENABLED_STATE_DEFAULT>
<android.content.pm.PackageManager: int COMPONENT_ENABLED_STATE_DISABLED>
<android.content.pm.PackageManager: int COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED>
<android.content.pm.PackageManager: int COMPONENT_ENABLED_STATE_DISABLED_USER>
<android.content.pm.PackageManager: int COMPONENT_ENABLED_STATE_ENABLED>
<android.content.pm.PackageManager: int DONT_KILL_APP>
<android.content.pm.PackageManager: java.lang.String EXTRA_VERIFICATION_ID>
<android.content.pm.PackageManager: java.lang.String EXTRA_VERIFICATION_RESULT>
<android.content.pm.PackageManager: java.lang.String FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS>
<android.content.pm.PackageManager: java.lang.String FEATURE_APP_WIDGETS>
<android.content.pm.PackageManager: java.lang.String FEATURE_AUDIO_LOW_LATENCY>
<android.content.pm.PackageManager: java.lang.String FEATURE_AUDIO_OUTPUT>
<android.content.pm.PackageManager: java.lang.String FEATURE_AUDIO_PRO>
<android.content.pm.PackageManager: java.lang.String FEATURE_AUTOFILL>
<android.content.pm.PackageManager: java.lang.String FEATURE_AUTOMOTIVE>
<android.content.pm.PackageManager: java.lang.String FEATURE_BACKUP>
<android.content.pm.PackageManager: java.lang.String FEATURE_BLUETOOTH>
<android.content.pm.PackageManager: java.lang.String FEATURE_BLUETOOTH_LE>
<android.content.pm.PackageManager: java.lang.String FEATURE_CAMERA>
<android.content.pm.PackageManager: java.lang.String FEATURE_CAMERA_ANY>
<android.content.pm.PackageManager: java.lang.String FEATURE_CAMERA_AR>
<android.content.pm.PackageManager: java.lang.String FEATURE_CAMERA_AUTOFOCUS>
<android.content.pm.PackageManager: java.lang.String FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING>
<android.content.pm.PackageManager: java.lang.String FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR>
<android.content.pm.PackageManager: java.lang.String FEATURE_CAMERA_CAPABILITY_RAW>
<android.content.pm.PackageManager: java.lang.String FEATURE_CAMERA_CONCURRENT>
<android.content.pm.PackageManager: java.lang.String FEATURE_CAMERA_EXTERNAL>
<android.content.pm.PackageManager: java.lang.String FEATURE_CAMERA_FLASH>
<android.content.pm.PackageManager: java.lang.String FEATURE_CAMERA_FRONT>
<android.content.pm.PackageManager: java.lang.String FEATURE_CAMERA_LEVEL_FULL>
<android.content.pm.PackageManager: java.lang.String FEATURE_CANT_SAVE_STATE>
<android.content.pm.PackageManager: java.lang.String FEATURE_COMPANION_DEVICE_SETUP>
<android.content.pm.PackageManager: java.lang.String FEATURE_CONNECTION_SERVICE>
<android.content.pm.PackageManager: java.lang.String FEATURE_CONSUMER_IR>
<android.content.pm.PackageManager: java.lang.String FEATURE_CONTROLS>
<android.content.pm.PackageManager: java.lang.String FEATURE_DEVICE_ADMIN>
<android.content.pm.PackageManager: java.lang.String FEATURE_EMBEDDED>
<android.content.pm.PackageManager: java.lang.String FEATURE_ETHERNET>
<android.content.pm.PackageManager: java.lang.String FEATURE_EXPANDED_PICTURE_IN_PICTURE>
<android.content.pm.PackageManager: java.lang.String FEATURE_FACE>
<android.content.pm.PackageManager: java.lang.String FEATURE_FAKETOUCH>
<android.content.pm.PackageManager: java.lang.String FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT>
<android.content.pm.PackageManager: java.lang.String FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND>
<android.content.pm.PackageManager: java.lang.String FEATURE_FINGERPRINT>
<android.content.pm.PackageManager: java.lang.String FEATURE_FREEFORM_WINDOW_MANAGEMENT>
<android.content.pm.PackageManager: java.lang.String FEATURE_GAMEPAD>
<android.content.pm.PackageManager: java.lang.String FEATURE_HARDWARE_KEYSTORE>
<android.content.pm.PackageManager: java.lang.String FEATURE_HIFI_SENSORS>
<android.content.pm.PackageManager: java.lang.String FEATURE_HOME_SCREEN>
<android.content.pm.PackageManager: java.lang.String FEATURE_IDENTITY_CREDENTIAL_HARDWARE>
<android.content.pm.PackageManager: java.lang.String FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS>
<android.content.pm.PackageManager: java.lang.String FEATURE_INPUT_METHODS>
<android.content.pm.PackageManager: java.lang.String FEATURE_IPSEC_TUNNELS>
<android.content.pm.PackageManager: java.lang.String FEATURE_IRIS>
<android.content.pm.PackageManager: java.lang.String FEATURE_KEYSTORE_APP_ATTEST_KEY>
<android.content.pm.PackageManager: java.lang.String FEATURE_KEYSTORE_LIMITED_USE_KEY>
<android.content.pm.PackageManager: java.lang.String FEATURE_KEYSTORE_SINGLE_USE_KEY>
<android.content.pm.PackageManager: java.lang.String FEATURE_LEANBACK>
<android.content.pm.PackageManager: java.lang.String FEATURE_LEANBACK_ONLY>
<android.content.pm.PackageManager: java.lang.String FEATURE_LIVE_TV>
<android.content.pm.PackageManager: java.lang.String FEATURE_LIVE_WALLPAPER>
<android.content.pm.PackageManager: java.lang.String FEATURE_LOCATION>
<android.content.pm.PackageManager: java.lang.String FEATURE_LOCATION_GPS>
<android.content.pm.PackageManager: java.lang.String FEATURE_LOCATION_NETWORK>
<android.content.pm.PackageManager: java.lang.String FEATURE_MANAGED_USERS>
<android.content.pm.PackageManager: java.lang.String FEATURE_MICROPHONE>
<android.content.pm.PackageManager: java.lang.String FEATURE_MIDI>
<android.content.pm.PackageManager: java.lang.String FEATURE_NFC>
<android.content.pm.PackageManager: java.lang.String FEATURE_NFC_BEAM>
<android.content.pm.PackageManager: java.lang.String FEATURE_NFC_HOST_CARD_EMULATION>
<android.content.pm.PackageManager: java.lang.String FEATURE_NFC_HOST_CARD_EMULATION_NFCF>
<android.content.pm.PackageManager: java.lang.String FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE>
<android.content.pm.PackageManager: java.lang.String FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC>
<android.content.pm.PackageManager: java.lang.String FEATURE_OPENGLES_DEQP_LEVEL>
<android.content.pm.PackageManager: java.lang.String FEATURE_OPENGLES_EXTENSION_PACK>
<android.content.pm.PackageManager: java.lang.String FEATURE_PC>
<android.content.pm.PackageManager: java.lang.String FEATURE_PICTURE_IN_PICTURE>
<android.content.pm.PackageManager: java.lang.String FEATURE_PRINTING>
<android.content.pm.PackageManager: java.lang.String FEATURE_RAM_LOW>
<android.content.pm.PackageManager: java.lang.String FEATURE_RAM_NORMAL>
<android.content.pm.PackageManager: java.lang.String FEATURE_SCREEN_LANDSCAPE>
<android.content.pm.PackageManager: java.lang.String FEATURE_SCREEN_PORTRAIT>
<android.content.pm.PackageManager: java.lang.String FEATURE_SECURELY_REMOVES_USERS>
<android.content.pm.PackageManager: java.lang.String FEATURE_SECURE_LOCK_SCREEN>
<android.content.pm.PackageManager: java.lang.String FEATURE_SECURITY_MODEL_COMPATIBLE>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_ACCELEROMETER>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_AMBIENT_TEMPERATURE>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_BAROMETER>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_COMPASS>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_GYROSCOPE>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_HEADING>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_HEART_RATE>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_HEART_RATE_ECG>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_HINGE_ANGLE>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_LIGHT>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_PROXIMITY>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_RELATIVE_HUMIDITY>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_STEP_COUNTER>
<android.content.pm.PackageManager: java.lang.String FEATURE_SENSOR_STEP_DETECTOR>
<android.content.pm.PackageManager: java.lang.String FEATURE_SE_OMAPI_ESE>
<android.content.pm.PackageManager: java.lang.String FEATURE_SE_OMAPI_SD>
<android.content.pm.PackageManager: java.lang.String FEATURE_SE_OMAPI_UICC>
<android.content.pm.PackageManager: java.lang.String FEATURE_SIP>
<android.content.pm.PackageManager: java.lang.String FEATURE_SIP_VOIP>
<android.content.pm.PackageManager: java.lang.String FEATURE_STRONGBOX_KEYSTORE>
<android.content.pm.PackageManager: java.lang.String FEATURE_TELECOM>
<android.content.pm.PackageManager: java.lang.String FEATURE_TELEPHONY>
<android.content.pm.PackageManager: java.lang.String FEATURE_TELEPHONY_CALLING>
<android.content.pm.PackageManager: java.lang.String FEATURE_TELEPHONY_CDMA>
<android.content.pm.PackageManager: java.lang.String FEATURE_TELEPHONY_DATA>
<android.content.pm.PackageManager: java.lang.String FEATURE_TELEPHONY_EUICC>
<android.content.pm.PackageManager: java.lang.String FEATURE_TELEPHONY_EUICC_MEP>
<android.content.pm.PackageManager: java.lang.String FEATURE_TELEPHONY_GSM>
<android.content.pm.PackageManager: java.lang.String FEATURE_TELEPHONY_IMS>
<android.content.pm.PackageManager: java.lang.String FEATURE_TELEPHONY_MBMS>
<android.content.pm.PackageManager: java.lang.String FEATURE_TELEPHONY_MESSAGING>
<android.content.pm.PackageManager: java.lang.String FEATURE_TELEPHONY_RADIO_ACCESS>
<android.content.pm.PackageManager: java.lang.String FEATURE_TELEPHONY_SUBSCRIPTION>
<android.content.pm.PackageManager: java.lang.String FEATURE_TELEVISION>
<android.content.pm.PackageManager: java.lang.String FEATURE_TOUCHSCREEN>
<android.content.pm.PackageManager: java.lang.String FEATURE_TOUCHSCREEN_MULTITOUCH>
<android.content.pm.PackageManager: java.lang.String FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT>
<android.content.pm.PackageManager: java.lang.String FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND>
<android.content.pm.PackageManager: java.lang.String FEATURE_USB_ACCESSORY>
<android.content.pm.PackageManager: java.lang.String FEATURE_USB_HOST>
<android.content.pm.PackageManager: java.lang.String FEATURE_VERIFIED_BOOT>
<android.content.pm.PackageManager: java.lang.String FEATURE_VR_HEADTRACKING>
<android.content.pm.PackageManager: java.lang.String FEATURE_VR_MODE>
<android.content.pm.PackageManager: java.lang.String FEATURE_VR_MODE_HIGH_PERFORMANCE>
<android.content.pm.PackageManager: java.lang.String FEATURE_VULKAN_DEQP_LEVEL>
<android.content.pm.PackageManager: java.lang.String FEATURE_VULKAN_HARDWARE_COMPUTE>
<android.content.pm.PackageManager: java.lang.String FEATURE_VULKAN_HARDWARE_LEVEL>
<android.content.pm.PackageManager: java.lang.String FEATURE_VULKAN_HARDWARE_VERSION>
<android.content.pm.PackageManager: java.lang.String FEATURE_WATCH>
<android.content.pm.PackageManager: java.lang.String FEATURE_WEBVIEW>
<android.content.pm.PackageManager: java.lang.String FEATURE_WIFI>
<android.content.pm.PackageManager: java.lang.String FEATURE_WIFI_AWARE>
<android.content.pm.PackageManager: java.lang.String FEATURE_WIFI_DIRECT>
<android.content.pm.PackageManager: java.lang.String FEATURE_WIFI_PASSPOINT>
<android.content.pm.PackageManager: java.lang.String FEATURE_WIFI_RTT>
<android.content.pm.PackageManager: java.lang.String FEATURE_WINDOW_MAGNIFICATION>
<android.content.pm.PackageManager: int FLAG_PERMISSION_WHITELIST_INSTALLER>
<android.content.pm.PackageManager: int FLAG_PERMISSION_WHITELIST_SYSTEM>
<android.content.pm.PackageManager: int FLAG_PERMISSION_WHITELIST_UPGRADE>
<android.content.pm.PackageManager: int GET_ACTIVITIES>
<android.content.pm.PackageManager: int GET_ATTRIBUTIONS>
<android.content.pm.PackageManager: int GET_CONFIGURATIONS>
<android.content.pm.PackageManager: int GET_DISABLED_COMPONENTS>
<android.content.pm.PackageManager: int GET_DISABLED_UNTIL_USED_COMPONENTS>
<android.content.pm.PackageManager: int GET_GIDS>
<android.content.pm.PackageManager: int GET_INSTRUMENTATION>
<android.content.pm.PackageManager: int GET_INTENT_FILTERS>
<android.content.pm.PackageManager: int GET_META_DATA>
<android.content.pm.PackageManager: int GET_PERMISSIONS>
<android.content.pm.PackageManager: int GET_PROVIDERS>
<android.content.pm.PackageManager: int GET_RECEIVERS>
<android.content.pm.PackageManager: int GET_RESOLVED_FILTER>
<android.content.pm.PackageManager: int GET_SERVICES>
<android.content.pm.PackageManager: int GET_SHARED_LIBRARY_FILES>
<android.content.pm.PackageManager: int GET_SIGNATURES>
<android.content.pm.PackageManager: int GET_SIGNING_CERTIFICATES>
<android.content.pm.PackageManager: int GET_UNINSTALLED_PACKAGES>
<android.content.pm.PackageManager: int GET_URI_PERMISSION_PATTERNS>
<android.content.pm.PackageManager: int INSTALL_REASON_DEVICE_RESTORE>
<android.content.pm.PackageManager: int INSTALL_REASON_DEVICE_SETUP>
<android.content.pm.PackageManager: int INSTALL_REASON_POLICY>
<android.content.pm.PackageManager: int INSTALL_REASON_UNKNOWN>
<android.content.pm.PackageManager: int INSTALL_REASON_USER>
<android.content.pm.PackageManager: int INSTALL_SCENARIO_BULK>
<android.content.pm.PackageManager: int INSTALL_SCENARIO_BULK_SECONDARY>
<android.content.pm.PackageManager: int INSTALL_SCENARIO_DEFAULT>
<android.content.pm.PackageManager: int INSTALL_SCENARIO_FAST>
<android.content.pm.PackageManager: int MATCH_ALL>
<android.content.pm.PackageManager: int MATCH_APEX>
<android.content.pm.PackageManager: int MATCH_DEFAULT_ONLY>
<android.content.pm.PackageManager: int MATCH_DIRECT_BOOT_AUTO>
<android.content.pm.PackageManager: int MATCH_DIRECT_BOOT_AWARE>
<android.content.pm.PackageManager: int MATCH_DIRECT_BOOT_UNAWARE>
<android.content.pm.PackageManager: int MATCH_DISABLED_COMPONENTS>
<android.content.pm.PackageManager: int MATCH_DISABLED_UNTIL_USED_COMPONENTS>
<android.content.pm.PackageManager: int MATCH_SYSTEM_ONLY>
<android.content.pm.PackageManager: int MATCH_UNINSTALLED_PACKAGES>
<android.content.pm.PackageManager: long MAXIMUM_VERIFICATION_TIMEOUT>
<android.content.pm.PackageManager: int PERMISSION_DENIED>
<android.content.pm.PackageManager: int PERMISSION_GRANTED>
<android.content.pm.PackageManager: java.lang.String PROPERTY_MEDIA_CAPABILITIES>
<android.content.pm.PackageManager: int SIGNATURE_FIRST_NOT_SIGNED>
<android.content.pm.PackageManager: int SIGNATURE_MATCH>
<android.content.pm.PackageManager: int SIGNATURE_NEITHER_SIGNED>
<android.content.pm.PackageManager: int SIGNATURE_NO_MATCH>
<android.content.pm.PackageManager: int SIGNATURE_SECOND_NOT_SIGNED>
<android.content.pm.PackageManager: int SIGNATURE_UNKNOWN_PACKAGE>
<android.content.pm.PackageManager: int SYNCHRONOUS>
<android.content.pm.PackageManager: java.util.List TRUST_ALL>
<android.content.pm.PackageManager: java.util.List TRUST_NONE>
<android.content.pm.PackageManager: int VERIFICATION_ALLOW>
<android.content.pm.PackageManager: int VERIFICATION_REJECT>
<android.content.pm.PackageManager: int VERSION_CODE_HIGHEST>
android.content.pm.PackageManager$ApplicationInfoFlags
<android.content.pm.PackageManager$ApplicationInfoFlags: long getValue()>
<android.content.pm.PackageManager$ApplicationInfoFlags: android.content.pm.PackageManager$ApplicationInfoFlags of(long)>
android.content.pm.PackageManager$ComponentEnabledSetting
<android.content.pm.PackageManager$ComponentEnabledSetting: void <init>(android.content.ComponentName,int,int)>
<android.content.pm.PackageManager$ComponentEnabledSetting: int describeContents()>
<android.content.pm.PackageManager$ComponentEnabledSetting: android.content.ComponentName getComponentName()>
<android.content.pm.PackageManager$ComponentEnabledSetting: int getEnabledFlags()>
<android.content.pm.PackageManager$ComponentEnabledSetting: int getEnabledState()>
<android.content.pm.PackageManager$ComponentEnabledSetting: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageManager$ComponentEnabledSetting: android.os.Parcelable$Creator CREATOR>
android.content.pm.PackageManager$ComponentInfoFlags
<android.content.pm.PackageManager$ComponentInfoFlags: long getValue()>
<android.content.pm.PackageManager$ComponentInfoFlags: android.content.pm.PackageManager$ComponentInfoFlags of(long)>
android.content.pm.PackageManager$NameNotFoundException
<android.content.pm.PackageManager$NameNotFoundException: void <init>()>
<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>
android.content.pm.PackageManager$OnChecksumsReadyListener
<android.content.pm.PackageManager$OnChecksumsReadyListener: void onChecksumsReady(java.util.List)>
android.content.pm.PackageManager$PackageInfoFlags
<android.content.pm.PackageManager$PackageInfoFlags: long getValue()>
<android.content.pm.PackageManager$PackageInfoFlags: android.content.pm.PackageManager$PackageInfoFlags of(long)>
android.content.pm.PackageManager$Property
<android.content.pm.PackageManager$Property: int describeContents()>
<android.content.pm.PackageManager$Property: boolean getBoolean()>
<android.content.pm.PackageManager$Property: java.lang.String getClassName()>
<android.content.pm.PackageManager$Property: float getFloat()>
<android.content.pm.PackageManager$Property: int getInteger()>
<android.content.pm.PackageManager$Property: java.lang.String getName()>
<android.content.pm.PackageManager$Property: java.lang.String getPackageName()>
<android.content.pm.PackageManager$Property: int getResourceId()>
<android.content.pm.PackageManager$Property: java.lang.String getString()>
<android.content.pm.PackageManager$Property: boolean isBoolean()>
<android.content.pm.PackageManager$Property: boolean isFloat()>
<android.content.pm.PackageManager$Property: boolean isInteger()>
<android.content.pm.PackageManager$Property: boolean isResourceId()>
<android.content.pm.PackageManager$Property: boolean isString()>
<android.content.pm.PackageManager$Property: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageManager$Property: android.os.Parcelable$Creator CREATOR>
android.content.pm.PackageManager$ResolveInfoFlags
<android.content.pm.PackageManager$ResolveInfoFlags: long getValue()>
<android.content.pm.PackageManager$ResolveInfoFlags: android.content.pm.PackageManager$ResolveInfoFlags of(long)>
android.content.pm.PackageStats
<android.content.pm.PackageStats: void <init>(java.lang.String)>
<android.content.pm.PackageStats: void <init>(android.os.Parcel)>
<android.content.pm.PackageStats: void <init>(android.content.pm.PackageStats)>
<android.content.pm.PackageStats: int describeContents()>
<android.content.pm.PackageStats: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageStats: android.os.Parcelable$Creator CREATOR>
<android.content.pm.PackageStats: long cacheSize>
<android.content.pm.PackageStats: long codeSize>
<android.content.pm.PackageStats: long dataSize>
<android.content.pm.PackageStats: long externalCacheSize>
<android.content.pm.PackageStats: long externalCodeSize>
<android.content.pm.PackageStats: long externalDataSize>
<android.content.pm.PackageStats: long externalMediaSize>
<android.content.pm.PackageStats: long externalObbSize>
<android.content.pm.PackageStats: java.lang.String packageName>
android.content.pm.PathPermission
<android.content.pm.PathPermission: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
<android.content.pm.PathPermission: void <init>(android.os.Parcel)>
<android.content.pm.PathPermission: java.lang.String getReadPermission()>
<android.content.pm.PathPermission: java.lang.String getWritePermission()>
<android.content.pm.PathPermission: android.os.Parcelable$Creator CREATOR>
android.content.pm.PermissionGroupInfo
<android.content.pm.PermissionGroupInfo: void <init>()>
<android.content.pm.PermissionGroupInfo: void <init>(android.content.pm.PermissionGroupInfo)>
<android.content.pm.PermissionGroupInfo: int describeContents()>
<android.content.pm.PermissionGroupInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
<android.content.pm.PermissionGroupInfo: android.os.Parcelable$Creator CREATOR>
<android.content.pm.PermissionGroupInfo: int FLAG_PERSONAL_INFO>
<android.content.pm.PermissionGroupInfo: int descriptionRes>
<android.content.pm.PermissionGroupInfo: int flags>
<android.content.pm.PermissionGroupInfo: java.lang.CharSequence nonLocalizedDescription>
<android.content.pm.PermissionGroupInfo: int priority>
android.content.pm.PermissionInfo
<android.content.pm.PermissionInfo: void <init>()>
<android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)>
<android.content.pm.PermissionInfo: int describeContents()>
<android.content.pm.PermissionInfo: int getProtection()>
<android.content.pm.PermissionInfo: int getProtectionFlags()>
<android.content.pm.PermissionInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
<android.content.pm.PermissionInfo: android.os.Parcelable$Creator CREATOR>
<android.content.pm.PermissionInfo: int FLAG_COSTS_MONEY>
<android.content.pm.PermissionInfo: int FLAG_HARD_RESTRICTED>
<android.content.pm.PermissionInfo: int FLAG_IMMUTABLY_RESTRICTED>
<android.content.pm.PermissionInfo: int FLAG_INSTALLED>
<android.content.pm.PermissionInfo: int FLAG_SOFT_RESTRICTED>
<android.content.pm.PermissionInfo: int PROTECTION_DANGEROUS>
<android.content.pm.PermissionInfo: int PROTECTION_FLAG_APPOP>
<android.content.pm.PermissionInfo: int PROTECTION_FLAG_DEVELOPMENT>
<android.content.pm.PermissionInfo: int PROTECTION_FLAG_INSTALLER>
<android.content.pm.PermissionInfo: int PROTECTION_FLAG_INSTANT>
<android.content.pm.PermissionInfo: int PROTECTION_FLAG_PRE23>
<android.content.pm.PermissionInfo: int PROTECTION_FLAG_PREINSTALLED>
<android.content.pm.PermissionInfo: int PROTECTION_FLAG_PRIVILEGED>
<android.content.pm.PermissionInfo: int PROTECTION_FLAG_RUNTIME_ONLY>
<android.content.pm.PermissionInfo: int PROTECTION_FLAG_SETUP>
<android.content.pm.PermissionInfo: int PROTECTION_FLAG_SYSTEM>
<android.content.pm.PermissionInfo: int PROTECTION_FLAG_VERIFIER>
<android.content.pm.PermissionInfo: int PROTECTION_INTERNAL>
<android.content.pm.PermissionInfo: int PROTECTION_MASK_BASE>
<android.content.pm.PermissionInfo: int PROTECTION_MASK_FLAGS>
<android.content.pm.PermissionInfo: int PROTECTION_NORMAL>
<android.content.pm.PermissionInfo: int PROTECTION_SIGNATURE>
<android.content.pm.PermissionInfo: int PROTECTION_SIGNATURE_OR_SYSTEM>
<android.content.pm.PermissionInfo: int descriptionRes>
<android.content.pm.PermissionInfo: int flags>
<android.content.pm.PermissionInfo: java.lang.String group>
<android.content.pm.PermissionInfo: java.lang.CharSequence nonLocalizedDescription>
<android.content.pm.PermissionInfo: int protectionLevel>
android.content.pm.ProviderInfo
<android.content.pm.ProviderInfo: void <init>()>
<android.content.pm.ProviderInfo: void <init>(android.content.pm.ProviderInfo)>
<android.content.pm.ProviderInfo: int describeContents()>
<android.content.pm.ProviderInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ProviderInfo: android.os.Parcelable$Creator CREATOR>
<android.content.pm.ProviderInfo: int FLAG_SINGLE_USER>
<android.content.pm.ProviderInfo: java.lang.String authority>
<android.content.pm.ProviderInfo: int flags>
<android.content.pm.ProviderInfo: boolean forceUriPermissions>
<android.content.pm.ProviderInfo: boolean grantUriPermissions>
<android.content.pm.ProviderInfo: int initOrder>
<android.content.pm.ProviderInfo: boolean isSyncable>
<android.content.pm.ProviderInfo: boolean multiprocess>
<android.content.pm.ProviderInfo: android.content.pm.PathPermission[] pathPermissions>
<android.content.pm.ProviderInfo: java.lang.String readPermission>
<android.content.pm.ProviderInfo: android.os.PatternMatcher[] uriPermissionPatterns>
<android.content.pm.ProviderInfo: java.lang.String writePermission>
android.content.pm.ResolveInfo
<android.content.pm.ResolveInfo: void <init>()>
<android.content.pm.ResolveInfo: void <init>(android.content.pm.ResolveInfo)>
<android.content.pm.ResolveInfo: int describeContents()>
<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ResolveInfo: int getIconResource()>
<android.content.pm.ResolveInfo: boolean isCrossProfileIntentForwarderActivity()>
<android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ResolveInfo: android.os.Parcelable$Creator CREATOR>
<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>
<android.content.pm.ResolveInfo: android.content.IntentFilter filter>
<android.content.pm.ResolveInfo: int icon>
<android.content.pm.ResolveInfo: boolean isDefault>
<android.content.pm.ResolveInfo: boolean isInstantAppAvailable>
<android.content.pm.ResolveInfo: int labelRes>
<android.content.pm.ResolveInfo: int match>
<android.content.pm.ResolveInfo: java.lang.CharSequence nonLocalizedLabel>
<android.content.pm.ResolveInfo: int preferredOrder>
<android.content.pm.ResolveInfo: int priority>
<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>
<android.content.pm.ResolveInfo: java.lang.String resolvePackageName>
<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>
<android.content.pm.ResolveInfo: int specificIndex>
android.content.pm.ResolveInfo$DisplayNameComparator
<android.content.pm.ResolveInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>
<android.content.pm.ResolveInfo$DisplayNameComparator: int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)>
android.content.pm.ServiceInfo
<android.content.pm.ServiceInfo: void <init>()>
<android.content.pm.ServiceInfo: void <init>(android.content.pm.ServiceInfo)>
<android.content.pm.ServiceInfo: int describeContents()>
<android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ServiceInfo: int getForegroundServiceType()>
<android.content.pm.ServiceInfo: android.os.Parcelable$Creator CREATOR>
<android.content.pm.ServiceInfo: int FLAG_EXTERNAL_SERVICE>
<android.content.pm.ServiceInfo: int FLAG_ISOLATED_PROCESS>
<android.content.pm.ServiceInfo: int FLAG_SINGLE_USER>
<android.content.pm.ServiceInfo: int FLAG_STOP_WITH_TASK>
<android.content.pm.ServiceInfo: int FLAG_USE_APP_ZYGOTE>
<android.content.pm.ServiceInfo: int FOREGROUND_SERVICE_TYPE_CAMERA>
<android.content.pm.ServiceInfo: int FOREGROUND_SERVICE_TYPE_CONNECTED_DEVICE>
<android.content.pm.ServiceInfo: int FOREGROUND_SERVICE_TYPE_DATA_SYNC>
<android.content.pm.ServiceInfo: int FOREGROUND_SERVICE_TYPE_LOCATION>
<android.content.pm.ServiceInfo: int FOREGROUND_SERVICE_TYPE_MANIFEST>
<android.content.pm.ServiceInfo: int FOREGROUND_SERVICE_TYPE_MEDIA_PLAYBACK>
<android.content.pm.ServiceInfo: int FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION>
<android.content.pm.ServiceInfo: int FOREGROUND_SERVICE_TYPE_MICROPHONE>
<android.content.pm.ServiceInfo: int FOREGROUND_SERVICE_TYPE_NONE>
<android.content.pm.ServiceInfo: int FOREGROUND_SERVICE_TYPE_PHONE_CALL>
<android.content.pm.ServiceInfo: int flags>
<android.content.pm.ServiceInfo: java.lang.String permission>
android.content.pm.SharedLibraryInfo
<android.content.pm.SharedLibraryInfo: int describeContents()>
<android.content.pm.SharedLibraryInfo: android.content.pm.VersionedPackage getDeclaringPackage()>
<android.content.pm.SharedLibraryInfo: java.util.List getDependentPackages()>
<android.content.pm.SharedLibraryInfo: long getLongVersion()>
<android.content.pm.SharedLibraryInfo: java.lang.String getName()>
<android.content.pm.SharedLibraryInfo: int getType()>
<android.content.pm.SharedLibraryInfo: int getVersion()>
<android.content.pm.SharedLibraryInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.SharedLibraryInfo: android.os.Parcelable$Creator CREATOR>
<android.content.pm.SharedLibraryInfo: int TYPE_BUILTIN>
<android.content.pm.SharedLibraryInfo: int TYPE_DYNAMIC>
<android.content.pm.SharedLibraryInfo: int TYPE_SDK_PACKAGE>
<android.content.pm.SharedLibraryInfo: int TYPE_STATIC>
<android.content.pm.SharedLibraryInfo: int VERSION_UNDEFINED>
android.content.pm.ShortcutInfo
<android.content.pm.ShortcutInfo: android.content.pm.ShortcutInfo createFromGenericDocument(android.content.Context,android.app.appsearch.GenericDocument)>
<android.content.pm.ShortcutInfo: int describeContents()>
<android.content.pm.ShortcutInfo: android.content.ComponentName getActivity()>
<android.content.pm.ShortcutInfo: java.util.List getCapabilities()>
<android.content.pm.ShortcutInfo: java.util.List getCapabilityParams(android.content.pm.Capability)>
<android.content.pm.ShortcutInfo: java.util.Set getCategories()>
<android.content.pm.ShortcutInfo: java.lang.CharSequence getDisabledMessage()>
<android.content.pm.ShortcutInfo: int getDisabledReason()>
<android.content.pm.ShortcutInfo: int getExcludedFromSurfaces()>
<android.content.pm.ShortcutInfo: android.os.PersistableBundle getExtras()>
<android.content.pm.ShortcutInfo: java.lang.String getId()>
<android.content.pm.ShortcutInfo: android.content.Intent getIntent()>
<android.content.pm.ShortcutInfo: android.content.Intent[] getIntents()>
<android.content.pm.ShortcutInfo: long getLastChangedTimestamp()>
<android.content.pm.ShortcutInfo: android.content.LocusId getLocusId()>
<android.content.pm.ShortcutInfo: java.lang.CharSequence getLongLabel()>
<android.content.pm.ShortcutInfo: java.lang.String getPackage()>
<android.content.pm.ShortcutInfo: int getRank()>
<android.content.pm.ShortcutInfo: java.lang.CharSequence getShortLabel()>
<android.content.pm.ShortcutInfo: android.os.UserHandle getUserHandle()>
<android.content.pm.ShortcutInfo: boolean hasKeyFieldsOnly()>
<android.content.pm.ShortcutInfo: boolean isCached()>
<android.content.pm.ShortcutInfo: boolean isDeclaredInManifest()>
<android.content.pm.ShortcutInfo: boolean isDynamic()>
<android.content.pm.ShortcutInfo: boolean isEnabled()>
<android.content.pm.ShortcutInfo: boolean isExcludedFromSurfaces(int)>
<android.content.pm.ShortcutInfo: boolean isImmutable()>
<android.content.pm.ShortcutInfo: boolean isPinned()>
<android.content.pm.ShortcutInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ShortcutInfo: android.os.Parcelable$Creator CREATOR>
<android.content.pm.ShortcutInfo: int DISABLED_REASON_APP_CHANGED>
<android.content.pm.ShortcutInfo: int DISABLED_REASON_BACKUP_NOT_SUPPORTED>
<android.content.pm.ShortcutInfo: int DISABLED_REASON_BY_APP>
<android.content.pm.ShortcutInfo: int DISABLED_REASON_NOT_DISABLED>
<android.content.pm.ShortcutInfo: int DISABLED_REASON_OTHER_RESTORE_ISSUE>
<android.content.pm.ShortcutInfo: int DISABLED_REASON_SIGNATURE_MISMATCH>
<android.content.pm.ShortcutInfo: int DISABLED_REASON_UNKNOWN>
<android.content.pm.ShortcutInfo: int DISABLED_REASON_VERSION_LOWER>
<android.content.pm.ShortcutInfo: java.lang.String SHORTCUT_CATEGORY_CONVERSATION>
<android.content.pm.ShortcutInfo: int SURFACE_LAUNCHER>
android.content.pm.ShortcutInfo$Builder
<android.content.pm.ShortcutInfo$Builder: void <init>(android.content.Context,java.lang.String)>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder addCapabilityBinding(android.content.pm.Capability,android.content.pm.CapabilityParams)>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo build()>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setActivity(android.content.ComponentName)>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setCategories(java.util.Set)>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setDisabledMessage(java.lang.CharSequence)>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setExcludedFromSurfaces(int)>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setExtras(android.os.PersistableBundle)>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setIcon(android.graphics.drawable.Icon)>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setIntent(android.content.Intent)>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setIntents(android.content.Intent[])>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setLocusId(android.content.LocusId)>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setLongLabel(java.lang.CharSequence)>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setLongLived(boolean)>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setPerson(android.app.Person)>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setPersons(android.app.Person[])>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setRank(int)>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setShortLabel(java.lang.CharSequence)>
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setStartingTheme(int)>
android.content.pm.ShortcutManager
<android.content.pm.ShortcutManager: boolean addDynamicShortcuts(java.util.List)>
<android.content.pm.ShortcutManager: android.content.Intent createShortcutResultIntent(android.content.pm.ShortcutInfo)>
<android.content.pm.ShortcutManager: void disableShortcuts(java.util.List)>
<android.content.pm.ShortcutManager: void disableShortcuts(java.util.List,java.lang.CharSequence)>
<android.content.pm.ShortcutManager: void enableShortcuts(java.util.List)>
<android.content.pm.ShortcutManager: java.util.List getDynamicShortcuts()>
<android.content.pm.ShortcutManager: int getIconMaxHeight()>
<android.content.pm.ShortcutManager: int getIconMaxWidth()>
<android.content.pm.ShortcutManager: java.util.List getManifestShortcuts()>
<android.content.pm.ShortcutManager: int getMaxShortcutCountPerActivity()>
<android.content.pm.ShortcutManager: java.util.List getPinnedShortcuts()>
<android.content.pm.ShortcutManager: java.util.List getShortcuts(int)>
<android.content.pm.ShortcutManager: boolean isRateLimitingActive()>
<android.content.pm.ShortcutManager: boolean isRequestPinShortcutSupported()>
<android.content.pm.ShortcutManager: void pushDynamicShortcut(android.content.pm.ShortcutInfo)>
<android.content.pm.ShortcutManager: void removeAllDynamicShortcuts()>
<android.content.pm.ShortcutManager: void removeDynamicShortcuts(java.util.List)>
<android.content.pm.ShortcutManager: void removeLongLivedShortcuts(java.util.List)>
<android.content.pm.ShortcutManager: void reportShortcutUsed(java.lang.String)>
<android.content.pm.ShortcutManager: boolean requestPinShortcut(android.content.pm.ShortcutInfo,android.content.IntentSender)>
<android.content.pm.ShortcutManager: boolean setDynamicShortcuts(java.util.List)>
<android.content.pm.ShortcutManager: boolean updateShortcuts(java.util.List)>
<android.content.pm.ShortcutManager: int FLAG_MATCH_CACHED>
<android.content.pm.ShortcutManager: int FLAG_MATCH_DYNAMIC>
<android.content.pm.ShortcutManager: int FLAG_MATCH_MANIFEST>
<android.content.pm.ShortcutManager: int FLAG_MATCH_PINNED>
android.content.pm.Signature
<android.content.pm.Signature: void <init>(byte[])>
<android.content.pm.Signature: void <init>(java.lang.String)>
<android.content.pm.Signature: int describeContents()>
<android.content.pm.Signature: byte[] toByteArray()>
<android.content.pm.Signature: char[] toChars()>
<android.content.pm.Signature: char[] toChars(char[],int[])>
<android.content.pm.Signature: java.lang.String toCharsString()>
<android.content.pm.Signature: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.Signature: android.os.Parcelable$Creator CREATOR>
android.content.pm.SigningInfo
<android.content.pm.SigningInfo: void <init>()>
<android.content.pm.SigningInfo: void <init>(android.content.pm.SigningInfo)>
<android.content.pm.SigningInfo: int describeContents()>
<android.content.pm.SigningInfo: android.content.pm.Signature[] getApkContentsSigners()>
<android.content.pm.SigningInfo: android.content.pm.Signature[] getSigningCertificateHistory()>
<android.content.pm.SigningInfo: boolean hasMultipleSigners()>
<android.content.pm.SigningInfo: boolean hasPastSigningCertificates()>
<android.content.pm.SigningInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.SigningInfo: android.os.Parcelable$Creator CREATOR>
android.content.pm.VersionedPackage
<android.content.pm.VersionedPackage: void <init>(java.lang.String,int)>
<android.content.pm.VersionedPackage: void <init>(java.lang.String,long)>
<android.content.pm.VersionedPackage: int describeContents()>
<android.content.pm.VersionedPackage: long getLongVersionCode()>
<android.content.pm.VersionedPackage: java.lang.String getPackageName()>
<android.content.pm.VersionedPackage: int getVersionCode()>
<android.content.pm.VersionedPackage: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.VersionedPackage: android.os.Parcelable$Creator CREATOR>
android.content.pm.verify.domain.DomainVerificationManager
<android.content.pm.verify.domain.DomainVerificationManager: android.content.pm.verify.domain.DomainVerificationUserState getDomainVerificationUserState(java.lang.String)>
android.content.pm.verify.domain.DomainVerificationUserState
<android.content.pm.verify.domain.DomainVerificationUserState: int describeContents()>
<android.content.pm.verify.domain.DomainVerificationUserState: java.util.Map getHostToStateMap()>
<android.content.pm.verify.domain.DomainVerificationUserState: java.lang.String getPackageName()>
<android.content.pm.verify.domain.DomainVerificationUserState: android.os.UserHandle getUser()>
<android.content.pm.verify.domain.DomainVerificationUserState: boolean isLinkHandlingAllowed()>
<android.content.pm.verify.domain.DomainVerificationUserState: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.verify.domain.DomainVerificationUserState: android.os.Parcelable$Creator CREATOR>
<android.content.pm.verify.domain.DomainVerificationUserState: int DOMAIN_STATE_NONE>
<android.content.pm.verify.domain.DomainVerificationUserState: int DOMAIN_STATE_SELECTED>
<android.content.pm.verify.domain.DomainVerificationUserState: int DOMAIN_STATE_VERIFIED>
android.content.res.AssetFileDescriptor
<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>
<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long,android.os.Bundle)>
<android.content.res.AssetFileDescriptor: void close()>
<android.content.res.AssetFileDescriptor: java.io.FileInputStream createInputStream()>
<android.content.res.AssetFileDescriptor: java.io.FileOutputStream createOutputStream()>
<android.content.res.AssetFileDescriptor: int describeContents()>
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>
<android.content.res.AssetFileDescriptor: android.os.Bundle getExtras()>
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<android.content.res.AssetFileDescriptor: long getLength()>
<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()>
<android.content.res.AssetFileDescriptor: long getStartOffset()>
<android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)>
<android.content.res.AssetFileDescriptor: android.os.Parcelable$Creator CREATOR>
<android.content.res.AssetFileDescriptor: long UNKNOWN_LENGTH>
android.content.res.AssetFileDescriptor$AutoCloseInputStream
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void <init>(android.content.res.AssetFileDescriptor)>
android.content.res.AssetFileDescriptor$AutoCloseOutputStream
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void <init>(android.content.res.AssetFileDescriptor)>
android.content.res.AssetManager
<android.content.res.AssetManager: void close()>
<android.content.res.AssetManager: java.lang.String[] getLocales()>
<android.content.res.AssetManager: java.lang.String[] list(java.lang.String)>
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)>
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)>
<android.content.res.AssetManager: int ACCESS_BUFFER>
<android.content.res.AssetManager: int ACCESS_RANDOM>
<android.content.res.AssetManager: int ACCESS_STREAMING>
<android.content.res.AssetManager: int ACCESS_UNKNOWN>
android.content.res.AssetManager$AssetInputStream
<android.content.res.AssetManager$AssetInputStream: int read()>
android.content.res.ColorStateList
<android.content.res.ColorStateList: void <init>(int[][],int[])>
<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>
<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>
<android.content.res.ColorStateList: int describeContents()>
<android.content.res.ColorStateList: int getChangingConfigurations()>
<android.content.res.ColorStateList: int getColorForState(int[],int)>
<android.content.res.ColorStateList: int getDefaultColor()>
<android.content.res.ColorStateList: boolean isOpaque()>
<android.content.res.ColorStateList: boolean isStateful()>
<android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>
<android.content.res.ColorStateList: android.content.res.ColorStateList withAlpha(int)>
<android.content.res.ColorStateList: android.content.res.ColorStateList withLStar(float)>
<android.content.res.ColorStateList: void writeToParcel(android.os.Parcel,int)>
<android.content.res.ColorStateList: android.os.Parcelable$Creator CREATOR>
android.content.res.Configuration
<android.content.res.Configuration: void <init>()>
<android.content.res.Configuration: void <init>(android.content.res.Configuration)>
<android.content.res.Configuration: int compareTo(android.content.res.Configuration)>
<android.content.res.Configuration: int describeContents()>
<android.content.res.Configuration: int diff(android.content.res.Configuration)>
<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>
<android.content.res.Configuration: android.content.res.Configuration generateDelta(android.content.res.Configuration,android.content.res.Configuration)>
<android.content.res.Configuration: int getLayoutDirection()>
<android.content.res.Configuration: android.os.LocaleList getLocales()>
<android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)>
<android.content.res.Configuration: boolean isNightModeActive()>
<android.content.res.Configuration: boolean isScreenHdr()>
<android.content.res.Configuration: boolean isScreenRound()>
<android.content.res.Configuration: boolean isScreenWideColorGamut()>
<android.content.res.Configuration: boolean needNewResources(int,int)>
<android.content.res.Configuration: void readFromParcel(android.os.Parcel)>
<android.content.res.Configuration: void setLayoutDirection(java.util.Locale)>
<android.content.res.Configuration: void setLocale(java.util.Locale)>
<android.content.res.Configuration: void setLocales(android.os.LocaleList)>
<android.content.res.Configuration: void setTo(android.content.res.Configuration)>
<android.content.res.Configuration: void setToDefaults()>
<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>
<android.content.res.Configuration: void writeToParcel(android.os.Parcel,int)>
<android.content.res.Configuration: int COLOR_MODE_HDR_MASK>
<android.content.res.Configuration: int COLOR_MODE_HDR_NO>
<android.content.res.Configuration: int COLOR_MODE_HDR_SHIFT>
<android.content.res.Configuration: int COLOR_MODE_HDR_UNDEFINED>
<android.content.res.Configuration: int COLOR_MODE_HDR_YES>
<android.content.res.Configuration: int COLOR_MODE_UNDEFINED>
<android.content.res.Configuration: int COLOR_MODE_WIDE_COLOR_GAMUT_MASK>
<android.content.res.Configuration: int COLOR_MODE_WIDE_COLOR_GAMUT_NO>
<android.content.res.Configuration: int COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED>
<android.content.res.Configuration: int COLOR_MODE_WIDE_COLOR_GAMUT_YES>
<android.content.res.Configuration: android.os.Parcelable$Creator CREATOR>
<android.content.res.Configuration: int DENSITY_DPI_UNDEFINED>
<android.content.res.Configuration: int FONT_WEIGHT_ADJUSTMENT_UNDEFINED>
<android.content.res.Configuration: int HARDKEYBOARDHIDDEN_NO>
<android.content.res.Configuration: int HARDKEYBOARDHIDDEN_UNDEFINED>
<android.content.res.Configuration: int HARDKEYBOARDHIDDEN_YES>
<android.content.res.Configuration: int KEYBOARDHIDDEN_NO>
<android.content.res.Configuration: int KEYBOARDHIDDEN_UNDEFINED>
<android.content.res.Configuration: int KEYBOARDHIDDEN_YES>
<android.content.res.Configuration: int KEYBOARD_12KEY>
<android.content.res.Configuration: int KEYBOARD_NOKEYS>
<android.content.res.Configuration: int KEYBOARD_QWERTY>
<android.content.res.Configuration: int KEYBOARD_UNDEFINED>
<android.content.res.Configuration: int MNC_ZERO>
<android.content.res.Configuration: int NAVIGATIONHIDDEN_NO>
<android.content.res.Configuration: int NAVIGATIONHIDDEN_UNDEFINED>
<android.content.res.Configuration: int NAVIGATIONHIDDEN_YES>
<android.content.res.Configuration: int NAVIGATION_DPAD>
<android.content.res.Configuration: int NAVIGATION_NONAV>
<android.content.res.Configuration: int NAVIGATION_TRACKBALL>
<android.content.res.Configuration: int NAVIGATION_UNDEFINED>
<android.content.res.Configuration: int NAVIGATION_WHEEL>
<android.content.res.Configuration: int ORIENTATION_LANDSCAPE>
<android.content.res.Configuration: int ORIENTATION_PORTRAIT>
<android.content.res.Configuration: int ORIENTATION_SQUARE>
<android.content.res.Configuration: int ORIENTATION_UNDEFINED>
<android.content.res.Configuration: int SCREENLAYOUT_LAYOUTDIR_LTR>
<android.content.res.Configuration: int SCREENLAYOUT_LAYOUTDIR_MASK>
<android.content.res.Configuration: int SCREENLAYOUT_LAYOUTDIR_RTL>
<android.content.res.Configuration: int SCREENLAYOUT_LAYOUTDIR_SHIFT>
<android.content.res.Configuration: int SCREENLAYOUT_LAYOUTDIR_UNDEFINED>
<android.content.res.Configuration: int SCREENLAYOUT_LONG_MASK>
<android.content.res.Configuration: int SCREENLAYOUT_LONG_NO>
<android.content.res.Configuration: int SCREENLAYOUT_LONG_UNDEFINED>
<android.content.res.Configuration: int SCREENLAYOUT_LONG_YES>
<android.content.res.Configuration: int SCREENLAYOUT_ROUND_MASK>
<android.content.res.Configuration: int SCREENLAYOUT_ROUND_NO>
<android.content.res.Configuration: int SCREENLAYOUT_ROUND_UNDEFINED>
<android.content.res.Configuration: int SCREENLAYOUT_ROUND_YES>
<android.content.res.Configuration: int SCREENLAYOUT_SIZE_LARGE>
<android.content.res.Configuration: int SCREENLAYOUT_SIZE_MASK>
<android.content.res.Configuration: int SCREENLAYOUT_SIZE_NORMAL>
<android.content.res.Configuration: int SCREENLAYOUT_SIZE_SMALL>
<android.content.res.Configuration: int SCREENLAYOUT_SIZE_UNDEFINED>
<android.content.res.Configuration: int SCREENLAYOUT_SIZE_XLARGE>
<android.content.res.Configuration: int SCREENLAYOUT_UNDEFINED>
<android.content.res.Configuration: int SCREEN_HEIGHT_DP_UNDEFINED>
<android.content.res.Configuration: int SCREEN_WIDTH_DP_UNDEFINED>
<android.content.res.Configuration: int SMALLEST_SCREEN_WIDTH_DP_UNDEFINED>
<android.content.res.Configuration: int TOUCHSCREEN_FINGER>
<android.content.res.Configuration: int TOUCHSCREEN_NOTOUCH>
<android.content.res.Configuration: int TOUCHSCREEN_STYLUS>
<android.content.res.Configuration: int TOUCHSCREEN_UNDEFINED>
<android.content.res.Configuration: int UI_MODE_NIGHT_MASK>
<android.content.res.Configuration: int UI_MODE_NIGHT_NO>
<android.content.res.Configuration: int UI_MODE_NIGHT_UNDEFINED>
<android.content.res.Configuration: int UI_MODE_NIGHT_YES>
<android.content.res.Configuration: int UI_MODE_TYPE_APPLIANCE>
<android.content.res.Configuration: int UI_MODE_TYPE_CAR>
<android.content.res.Configuration: int UI_MODE_TYPE_DESK>
<android.content.res.Configuration: int UI_MODE_TYPE_MASK>
<android.content.res.Configuration: int UI_MODE_TYPE_NORMAL>
<android.content.res.Configuration: int UI_MODE_TYPE_TELEVISION>
<android.content.res.Configuration: int UI_MODE_TYPE_UNDEFINED>
<android.content.res.Configuration: int UI_MODE_TYPE_VR_HEADSET>
<android.content.res.Configuration: int UI_MODE_TYPE_WATCH>
<android.content.res.Configuration: int colorMode>
<android.content.res.Configuration: int densityDpi>
<android.content.res.Configuration: float fontScale>
<android.content.res.Configuration: int fontWeightAdjustment>
<android.content.res.Configuration: int hardKeyboardHidden>
<android.content.res.Configuration: int keyboard>
<android.content.res.Configuration: int keyboardHidden>
<android.content.res.Configuration: java.util.Locale locale>
<android.content.res.Configuration: int mcc>
<android.content.res.Configuration: int mnc>
<android.content.res.Configuration: int navigation>
<android.content.res.Configuration: int navigationHidden>
<android.content.res.Configuration: int orientation>
<android.content.res.Configuration: int screenHeightDp>
<android.content.res.Configuration: int screenLayout>
<android.content.res.Configuration: int screenWidthDp>
<android.content.res.Configuration: int smallestScreenWidthDp>
<android.content.res.Configuration: int touchscreen>
<android.content.res.Configuration: int uiMode>
android.content.res.ObbInfo
<android.content.res.ObbInfo: int describeContents()>
<android.content.res.ObbInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.res.ObbInfo: android.os.Parcelable$Creator CREATOR>
<android.content.res.ObbInfo: int OBB_OVERLAY>
<android.content.res.ObbInfo: java.lang.String filename>
<android.content.res.ObbInfo: int flags>
<android.content.res.ObbInfo: java.lang.String packageName>
<android.content.res.ObbInfo: int version>
android.content.res.ObbScanner
<android.content.res.ObbScanner: android.content.res.ObbInfo getObbInfo(java.lang.String)>
android.content.res.Resources
<android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)>
<android.content.res.Resources: void addLoaders(android.content.res.loader.ResourcesLoader[])>
<android.content.res.Resources: void finishPreloading()>
<android.content.res.Resources: void flushLayoutCache()>
<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)>
<android.content.res.Resources: android.content.res.AssetManager getAssets()>
<android.content.res.Resources: int getAttributeSetSourceResId(android.util.AttributeSet)>
<android.content.res.Resources: boolean getBoolean(int)>
<android.content.res.Resources: int getColor(int)>
<android.content.res.Resources: int getColor(int,android.content.res.Resources$Theme)>
<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)>
<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int,android.content.res.Resources$Theme)>
<android.content.res.Resources: android.content.res.Configuration getConfiguration()>
<android.content.res.Resources: float getDimension(int)>
<android.content.res.Resources: int getDimensionPixelOffset(int)>
<android.content.res.Resources: int getDimensionPixelSize(int)>
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int,android.content.res.Resources$Theme)>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int,android.content.res.Resources$Theme)>
<android.content.res.Resources: float getFloat(int)>
<android.content.res.Resources: android.graphics.Typeface getFont(int)>
<android.content.res.Resources: float getFraction(int,int,int)>
<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>
<android.content.res.Resources: int[] getIntArray(int)>
<android.content.res.Resources: int getInteger(int)>
<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)>
<android.content.res.Resources: android.graphics.Movie getMovie(int)>
<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])>
<android.content.res.Resources: java.lang.String getQuantityString(int,int)>
<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)>
<android.content.res.Resources: java.lang.String getResourceEntryName(int)>
<android.content.res.Resources: java.lang.String getResourceName(int)>
<android.content.res.Resources: java.lang.String getResourcePackageName(int)>
<android.content.res.Resources: java.lang.String getResourceTypeName(int)>
<android.content.res.Resources: java.lang.String getString(int)>
<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>
<android.content.res.Resources: java.lang.String[] getStringArray(int)>
<android.content.res.Resources: android.content.res.Resources getSystem()>
<android.content.res.Resources: java.lang.CharSequence getText(int)>
<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)>
<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)>
<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>
<android.content.res.Resources: void getValue(java.lang.String,android.util.TypedValue,boolean)>
<android.content.res.Resources: void getValueForDensity(int,int,android.util.TypedValue,boolean)>
<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>
<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>
<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>
<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>
<android.content.res.Resources: java.io.InputStream openRawResource(int)>
<android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)>
<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)>
<android.content.res.Resources: void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)>
<android.content.res.Resources: void parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle)>
<android.content.res.Resources: void removeLoaders(android.content.res.loader.ResourcesLoader[])>
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>
<android.content.res.Resources: int ID_NULL>
android.content.res.Resources$NotFoundException
<android.content.res.Resources$NotFoundException: void <init>()>
<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>
<android.content.res.Resources$NotFoundException: void <init>(java.lang.String,java.lang.Exception)>
android.content.res.Resources$Theme
<android.content.res.Resources$Theme: void applyStyle(int,boolean)>
<android.content.res.Resources$Theme: void dump(int,java.lang.String,java.lang.String)>
<android.content.res.Resources$Theme: int[] getAttributeResolutionStack(int,int,int)>
<android.content.res.Resources$Theme: int getChangingConfigurations()>
<android.content.res.Resources$Theme: android.graphics.drawable.Drawable getDrawable(int)>
<android.content.res.Resources$Theme: int getExplicitStyle(android.util.AttributeSet)>
<android.content.res.Resources$Theme: android.content.res.Resources getResources()>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int,int[])>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>
<android.content.res.Resources$Theme: void rebase()>
<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>
<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>
android.content.res.TypedArray
<android.content.res.TypedArray: void close()>
<android.content.res.TypedArray: boolean getBoolean(int,boolean)>
<android.content.res.TypedArray: int getChangingConfigurations()>
<android.content.res.TypedArray: int getColor(int,int)>
<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>
<android.content.res.TypedArray: float getDimension(int,float)>
<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>
<android.content.res.TypedArray: float getFloat(int,float)>
<android.content.res.TypedArray: android.graphics.Typeface getFont(int)>
<android.content.res.TypedArray: float getFraction(int,int,int,float)>
<android.content.res.TypedArray: int getIndex(int)>
<android.content.res.TypedArray: int getIndexCount()>
<android.content.res.TypedArray: int getInt(int,int)>
<android.content.res.TypedArray: int getInteger(int,int)>
<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)>
<android.content.res.TypedArray: int getLayoutDimension(int,int)>
<android.content.res.TypedArray: java.lang.String getNonResourceString(int)>
<android.content.res.TypedArray: java.lang.String getPositionDescription()>
<android.content.res.TypedArray: int getResourceId(int,int)>
<android.content.res.TypedArray: android.content.res.Resources getResources()>
<android.content.res.TypedArray: int getSourceResourceId(int,int)>
<android.content.res.TypedArray: java.lang.String getString(int)>
<android.content.res.TypedArray: java.lang.CharSequence getText(int)>
<android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)>
<android.content.res.TypedArray: int getType(int)>
<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>
<android.content.res.TypedArray: boolean hasValue(int)>
<android.content.res.TypedArray: boolean hasValueOrEmpty(int)>
<android.content.res.TypedArray: int length()>
<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>
<android.content.res.TypedArray: void recycle()>
android.content.res.XmlResourceParser
<android.content.res.XmlResourceParser: void close()>
android.content.res.loader.AssetsProvider
<android.content.res.loader.AssetsProvider: android.content.res.AssetFileDescriptor loadAssetFd(java.lang.String,int)>
android.content.res.loader.ResourcesLoader
<android.content.res.loader.ResourcesLoader: void <init>()>
<android.content.res.loader.ResourcesLoader: void addProvider(android.content.res.loader.ResourcesProvider)>
<android.content.res.loader.ResourcesLoader: void clearProviders()>
<android.content.res.loader.ResourcesLoader: java.util.List getProviders()>
<android.content.res.loader.ResourcesLoader: void removeProvider(android.content.res.loader.ResourcesProvider)>
<android.content.res.loader.ResourcesLoader: void setProviders(java.util.List)>
android.content.res.loader.ResourcesProvider
<android.content.res.loader.ResourcesProvider: void close()>
<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider empty(android.content.res.loader.AssetsProvider)>
<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromApk(android.os.ParcelFileDescriptor)>
<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromApk(android.os.ParcelFileDescriptor,android.content.res.loader.AssetsProvider)>
<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromDirectory(java.lang.String,android.content.res.loader.AssetsProvider)>
<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromSplit(android.content.Context,java.lang.String)>
<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromTable(android.os.ParcelFileDescriptor,android.content.res.loader.AssetsProvider)>
android.database.AbstractCursor
<android.database.AbstractCursor: void <init>()>
<android.database.AbstractCursor: void checkPosition()>
<android.database.AbstractCursor: void close()>
<android.database.AbstractCursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)>
<android.database.AbstractCursor: void deactivate()>
<android.database.AbstractCursor: void fillWindow(int,android.database.CursorWindow)>
<android.database.AbstractCursor: void finalize()>
<android.database.AbstractCursor: byte[] getBlob(int)>
<android.database.AbstractCursor: int getColumnCount()>
<android.database.AbstractCursor: int getColumnIndex(java.lang.String)>
<android.database.AbstractCursor: int getColumnIndexOrThrow(java.lang.String)>
<android.database.AbstractCursor: java.lang.String getColumnName(int)>
<android.database.AbstractCursor: android.os.Bundle getExtras()>
<android.database.AbstractCursor: android.net.Uri getNotificationUri()>
<android.database.AbstractCursor: int getPosition()>
<android.database.AbstractCursor: int getType(int)>
<android.database.AbstractCursor: java.lang.Object getUpdatedField(int)>
<android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()>
<android.database.AbstractCursor: android.database.CursorWindow getWindow()>
<android.database.AbstractCursor: boolean isAfterLast()>
<android.database.AbstractCursor: boolean isBeforeFirst()>
<android.database.AbstractCursor: boolean isClosed()>
<android.database.AbstractCursor: boolean isFieldUpdated(int)>
<android.database.AbstractCursor: boolean isFirst()>
<android.database.AbstractCursor: boolean isLast()>
<android.database.AbstractCursor: boolean move(int)>
<android.database.AbstractCursor: boolean moveToFirst()>
<android.database.AbstractCursor: boolean moveToLast()>
<android.database.AbstractCursor: boolean moveToNext()>
<android.database.AbstractCursor: boolean moveToPosition(int)>
<android.database.AbstractCursor: boolean moveToPrevious()>
<android.database.AbstractCursor: void onChange(boolean)>
<android.database.AbstractCursor: boolean onMove(int,int)>
<android.database.AbstractCursor: void registerContentObserver(android.database.ContentObserver)>
<android.database.AbstractCursor: void registerDataSetObserver(android.database.DataSetObserver)>
<android.database.AbstractCursor: boolean requery()>
<android.database.AbstractCursor: android.os.Bundle respond(android.os.Bundle)>
<android.database.AbstractCursor: void setExtras(android.os.Bundle)>
<android.database.AbstractCursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>
<android.database.AbstractCursor: void unregisterContentObserver(android.database.ContentObserver)>
<android.database.AbstractCursor: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.database.AbstractCursor: boolean mClosed>
<android.database.AbstractCursor: android.content.ContentResolver mContentResolver>
<android.database.AbstractCursor: int mPos>
android.database.AbstractCursor$SelfContentObserver
<android.database.AbstractCursor$SelfContentObserver: void <init>(android.database.AbstractCursor)>
android.database.AbstractWindowedCursor
<android.database.AbstractWindowedCursor: void <init>()>
<android.database.AbstractWindowedCursor: double getDouble(int)>
<android.database.AbstractWindowedCursor: float getFloat(int)>
<android.database.AbstractWindowedCursor: int getInt(int)>
<android.database.AbstractWindowedCursor: long getLong(int)>
<android.database.AbstractWindowedCursor: short getShort(int)>
<android.database.AbstractWindowedCursor: java.lang.String getString(int)>
<android.database.AbstractWindowedCursor: boolean hasWindow()>
<android.database.AbstractWindowedCursor: boolean isBlob(int)>
<android.database.AbstractWindowedCursor: boolean isFloat(int)>
<android.database.AbstractWindowedCursor: boolean isLong(int)>
<android.database.AbstractWindowedCursor: boolean isNull(int)>
<android.database.AbstractWindowedCursor: boolean isString(int)>
<android.database.AbstractWindowedCursor: void setWindow(android.database.CursorWindow)>
<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>
android.database.CharArrayBuffer
<android.database.CharArrayBuffer: void <init>(int)>
<android.database.CharArrayBuffer: void <init>(char[])>
<android.database.CharArrayBuffer: char[] data>
<android.database.CharArrayBuffer: int sizeCopied>
android.database.ContentObservable
<android.database.ContentObservable: void <init>()>
<android.database.ContentObservable: void dispatchChange(boolean)>
<android.database.ContentObservable: void dispatchChange(boolean,android.net.Uri)>
<android.database.ContentObservable: void notifyChange(boolean)>
<android.database.ContentObservable: void registerObserver(android.database.ContentObserver)>
android.database.ContentObserver
<android.database.ContentObserver: void <init>(android.os.Handler)>
<android.database.ContentObserver: boolean deliverSelfNotifications()>
<android.database.ContentObserver: void dispatchChange(boolean)>
<android.database.ContentObserver: void dispatchChange(boolean,android.net.Uri)>
<android.database.ContentObserver: void dispatchChange(boolean,android.net.Uri,int)>
<android.database.ContentObserver: void dispatchChange(boolean,java.util.Collection,int)>
<android.database.ContentObserver: void onChange(boolean)>
<android.database.ContentObserver: void onChange(boolean,android.net.Uri)>
<android.database.ContentObserver: void onChange(boolean,android.net.Uri,int)>
<android.database.ContentObserver: void onChange(boolean,java.util.Collection,int)>
android.database.CrossProcessCursor
<android.database.CrossProcessCursor: void fillWindow(int,android.database.CursorWindow)>
<android.database.CrossProcessCursor: android.database.CursorWindow getWindow()>
<android.database.CrossProcessCursor: boolean onMove(int,int)>
android.database.CrossProcessCursorWrapper
<android.database.CrossProcessCursorWrapper: void <init>(android.database.Cursor)>
<android.database.CrossProcessCursorWrapper: void fillWindow(int,android.database.CursorWindow)>
<android.database.CrossProcessCursorWrapper: android.database.CursorWindow getWindow()>
<android.database.CrossProcessCursorWrapper: boolean onMove(int,int)>
android.database.Cursor
<android.database.Cursor: void close()>
<android.database.Cursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)>
<android.database.Cursor: void deactivate()>
<android.database.Cursor: byte[] getBlob(int)>
<android.database.Cursor: int getColumnCount()>
<android.database.Cursor: int getColumnIndex(java.lang.String)>
<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>
<android.database.Cursor: java.lang.String getColumnName(int)>
<android.database.Cursor: java.lang.String[] getColumnNames()>
<android.database.Cursor: int getCount()>
<android.database.Cursor: double getDouble(int)>
<android.database.Cursor: android.os.Bundle getExtras()>
<android.database.Cursor: float getFloat(int)>
<android.database.Cursor: int getInt(int)>
<android.database.Cursor: long getLong(int)>
<android.database.Cursor: android.net.Uri getNotificationUri()>
<android.database.Cursor: java.util.List getNotificationUris()>
<android.database.Cursor: int getPosition()>
<android.database.Cursor: short getShort(int)>
<android.database.Cursor: java.lang.String getString(int)>
<android.database.Cursor: int getType(int)>
<android.database.Cursor: boolean getWantsAllOnMoveCalls()>
<android.database.Cursor: boolean isAfterLast()>
<android.database.Cursor: boolean isBeforeFirst()>
<android.database.Cursor: boolean isClosed()>
<android.database.Cursor: boolean isFirst()>
<android.database.Cursor: boolean isLast()>
<android.database.Cursor: boolean isNull(int)>
<android.database.Cursor: boolean move(int)>
<android.database.Cursor: boolean moveToFirst()>
<android.database.Cursor: boolean moveToLast()>
<android.database.Cursor: boolean moveToNext()>
<android.database.Cursor: boolean moveToPosition(int)>
<android.database.Cursor: boolean moveToPrevious()>
<android.database.Cursor: void registerContentObserver(android.database.ContentObserver)>
<android.database.Cursor: void registerDataSetObserver(android.database.DataSetObserver)>
<android.database.Cursor: boolean requery()>
<android.database.Cursor: android.os.Bundle respond(android.os.Bundle)>
<android.database.Cursor: void setExtras(android.os.Bundle)>
<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>
<android.database.Cursor: void setNotificationUris(android.content.ContentResolver,java.util.List)>
<android.database.Cursor: void unregisterContentObserver(android.database.ContentObserver)>
<android.database.Cursor: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.database.Cursor: int FIELD_TYPE_BLOB>
<android.database.Cursor: int FIELD_TYPE_FLOAT>
<android.database.Cursor: int FIELD_TYPE_INTEGER>
<android.database.Cursor: int FIELD_TYPE_NULL>
<android.database.Cursor: int FIELD_TYPE_STRING>
android.database.CursorIndexOutOfBoundsException
<android.database.CursorIndexOutOfBoundsException: void <init>(int,int)>
<android.database.CursorIndexOutOfBoundsException: void <init>(java.lang.String)>
android.database.CursorJoiner
<android.database.CursorJoiner: void <init>(android.database.Cursor,java.lang.String[],android.database.Cursor,java.lang.String[])>
<android.database.CursorJoiner: boolean hasNext()>
<android.database.CursorJoiner: java.util.Iterator iterator()>
<android.database.CursorJoiner: android.database.CursorJoiner$Result next()>
android.database.CursorJoiner$Result
<android.database.CursorJoiner$Result: android.database.CursorJoiner$Result BOTH>
<android.database.CursorJoiner$Result: android.database.CursorJoiner$Result LEFT>
<android.database.CursorJoiner$Result: android.database.CursorJoiner$Result RIGHT>
android.database.CursorWindow
<android.database.CursorWindow: void <init>(java.lang.String)>
<android.database.CursorWindow: void <init>(java.lang.String,long)>
<android.database.CursorWindow: void <init>(boolean)>
<android.database.CursorWindow: boolean allocRow()>
<android.database.CursorWindow: void clear()>
<android.database.CursorWindow: void copyStringToBuffer(int,int,android.database.CharArrayBuffer)>
<android.database.CursorWindow: int describeContents()>
<android.database.CursorWindow: void freeLastRow()>
<android.database.CursorWindow: byte[] getBlob(int,int)>
<android.database.CursorWindow: double getDouble(int,int)>
<android.database.CursorWindow: float getFloat(int,int)>
<android.database.CursorWindow: int getInt(int,int)>
<android.database.CursorWindow: long getLong(int,int)>
<android.database.CursorWindow: int getNumRows()>
<android.database.CursorWindow: short getShort(int,int)>
<android.database.CursorWindow: int getStartPosition()>
<android.database.CursorWindow: java.lang.String getString(int,int)>
<android.database.CursorWindow: int getType(int,int)>
<android.database.CursorWindow: boolean isBlob(int,int)>
<android.database.CursorWindow: boolean isFloat(int,int)>
<android.database.CursorWindow: boolean isLong(int,int)>
<android.database.CursorWindow: boolean isNull(int,int)>
<android.database.CursorWindow: boolean isString(int,int)>
<android.database.CursorWindow: android.database.CursorWindow newFromParcel(android.os.Parcel)>
<android.database.CursorWindow: void onAllReferencesReleased()>
<android.database.CursorWindow: boolean putBlob(byte[],int,int)>
<android.database.CursorWindow: boolean putDouble(double,int,int)>
<android.database.CursorWindow: boolean putLong(long,int,int)>
<android.database.CursorWindow: boolean putNull(int,int)>
<android.database.CursorWindow: boolean putString(java.lang.String,int,int)>
<android.database.CursorWindow: boolean setNumColumns(int)>
<android.database.CursorWindow: void setStartPosition(int)>
<android.database.CursorWindow: void writeToParcel(android.os.Parcel,int)>
<android.database.CursorWindow: android.os.Parcelable$Creator CREATOR>
android.database.CursorWindowAllocationException
<android.database.CursorWindowAllocationException: void <init>(java.lang.String)>
android.database.CursorWrapper
<android.database.CursorWrapper: void <init>(android.database.Cursor)>
<android.database.CursorWrapper: void close()>
<android.database.CursorWrapper: void copyStringToBuffer(int,android.database.CharArrayBuffer)>
<android.database.CursorWrapper: void deactivate()>
<android.database.CursorWrapper: byte[] getBlob(int)>
<android.database.CursorWrapper: int getColumnCount()>
<android.database.CursorWrapper: int getColumnIndex(java.lang.String)>
<android.database.CursorWrapper: int getColumnIndexOrThrow(java.lang.String)>
<android.database.CursorWrapper: java.lang.String getColumnName(int)>
<android.database.CursorWrapper: java.lang.String[] getColumnNames()>
<android.database.CursorWrapper: int getCount()>
<android.database.CursorWrapper: double getDouble(int)>
<android.database.CursorWrapper: android.os.Bundle getExtras()>
<android.database.CursorWrapper: float getFloat(int)>
<android.database.CursorWrapper: int getInt(int)>
<android.database.CursorWrapper: long getLong(int)>
<android.database.CursorWrapper: android.net.Uri getNotificationUri()>
<android.database.CursorWrapper: int getPosition()>
<android.database.CursorWrapper: short getShort(int)>
<android.database.CursorWrapper: java.lang.String getString(int)>
<android.database.CursorWrapper: int getType(int)>
<android.database.CursorWrapper: boolean getWantsAllOnMoveCalls()>
<android.database.CursorWrapper: android.database.Cursor getWrappedCursor()>
<android.database.CursorWrapper: boolean isAfterLast()>
<android.database.CursorWrapper: boolean isBeforeFirst()>
<android.database.CursorWrapper: boolean isClosed()>
<android.database.CursorWrapper: boolean isFirst()>
<android.database.CursorWrapper: boolean isLast()>
<android.database.CursorWrapper: boolean isNull(int)>
<android.database.CursorWrapper: boolean move(int)>
<android.database.CursorWrapper: boolean moveToFirst()>
<android.database.CursorWrapper: boolean moveToLast()>
<android.database.CursorWrapper: boolean moveToNext()>
<android.database.CursorWrapper: boolean moveToPosition(int)>
<android.database.CursorWrapper: boolean moveToPrevious()>
<android.database.CursorWrapper: void registerContentObserver(android.database.ContentObserver)>
<android.database.CursorWrapper: void registerDataSetObserver(android.database.DataSetObserver)>
<android.database.CursorWrapper: boolean requery()>
<android.database.CursorWrapper: android.os.Bundle respond(android.os.Bundle)>
<android.database.CursorWrapper: void setExtras(android.os.Bundle)>
<android.database.CursorWrapper: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>
<android.database.CursorWrapper: void unregisterContentObserver(android.database.ContentObserver)>
<android.database.CursorWrapper: void unregisterDataSetObserver(android.database.DataSetObserver)>
android.database.DataSetObservable
<android.database.DataSetObservable: void <init>()>
<android.database.DataSetObservable: void notifyChanged()>
<android.database.DataSetObservable: void notifyInvalidated()>
android.database.DataSetObserver
<android.database.DataSetObserver: void <init>()>
<android.database.DataSetObserver: void onChanged()>
<android.database.DataSetObserver: void onInvalidated()>
android.database.DatabaseErrorHandler
<android.database.DatabaseErrorHandler: void onCorruption(android.database.sqlite.SQLiteDatabase)>
android.database.DatabaseUtils
<android.database.DatabaseUtils: void <init>()>
<android.database.DatabaseUtils: void appendEscapedSQLString(java.lang.StringBuilder,java.lang.String)>
<android.database.DatabaseUtils: java.lang.String[] appendSelectionArgs(java.lang.String[],java.lang.String[])>
<android.database.DatabaseUtils: void appendValueToSql(java.lang.StringBuilder,java.lang.Object)>
<android.database.DatabaseUtils: void bindObjectToProgram(android.database.sqlite.SQLiteProgram,int,java.lang.Object)>
<android.database.DatabaseUtils: android.os.ParcelFileDescriptor blobFileDescriptorForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>
<android.database.DatabaseUtils: android.os.ParcelFileDescriptor blobFileDescriptorForQuery(android.database.sqlite.SQLiteStatement,java.lang.String[])>
<android.database.DatabaseUtils: java.lang.String concatenateWhere(java.lang.String,java.lang.String)>
<android.database.DatabaseUtils: void createDbFromSqlStatements(android.content.Context,java.lang.String,int,java.lang.String)>
<android.database.DatabaseUtils: void cursorDoubleToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorDoubleToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorDoubleToCursorValues(android.database.Cursor,java.lang.String,android.content.ContentValues)>
<android.database.DatabaseUtils: void cursorFloatToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorIntToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)>
<android.database.DatabaseUtils: void cursorIntToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorIntToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorLongToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)>
<android.database.DatabaseUtils: void cursorLongToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorLongToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorRowToContentValues(android.database.Cursor,android.content.ContentValues)>
<android.database.DatabaseUtils: void cursorShortToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorStringToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)>
<android.database.DatabaseUtils: void cursorStringToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorStringToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)>
<android.database.DatabaseUtils: void cursorStringToInsertHelper(android.database.Cursor,java.lang.String,android.database.DatabaseUtils$InsertHelper,int)>
<android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor)>
<android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.io.PrintStream)>
<android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.lang.StringBuilder)>
<android.database.DatabaseUtils: java.lang.String dumpCurrentRowToString(android.database.Cursor)>
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor)>
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.io.PrintStream)>
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.lang.StringBuilder)>
<android.database.DatabaseUtils: java.lang.String dumpCursorToString(android.database.Cursor)>
<android.database.DatabaseUtils: java.lang.String getCollationKey(java.lang.String)>
<android.database.DatabaseUtils: java.lang.String getHexCollationKey(java.lang.String)>
<android.database.DatabaseUtils: int getSqlStatementType(java.lang.String)>
<android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>
<android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteStatement,java.lang.String[])>
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String)>
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)>
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String[])>
<android.database.DatabaseUtils: void readExceptionFromParcel(android.os.Parcel)>
<android.database.DatabaseUtils: void readExceptionWithFileNotFoundExceptionFromParcel(android.os.Parcel)>
<android.database.DatabaseUtils: void readExceptionWithOperationApplicationExceptionFromParcel(android.os.Parcel)>
<android.database.DatabaseUtils: java.lang.String sqlEscapeString(java.lang.String)>
<android.database.DatabaseUtils: java.lang.String stringForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>
<android.database.DatabaseUtils: java.lang.String stringForQuery(android.database.sqlite.SQLiteStatement,java.lang.String[])>
<android.database.DatabaseUtils: void writeExceptionToParcel(android.os.Parcel,java.lang.Exception)>
<android.database.DatabaseUtils: int STATEMENT_ABORT>
<android.database.DatabaseUtils: int STATEMENT_ATTACH>
<android.database.DatabaseUtils: int STATEMENT_BEGIN>
<android.database.DatabaseUtils: int STATEMENT_COMMIT>
<android.database.DatabaseUtils: int STATEMENT_DDL>
<android.database.DatabaseUtils: int STATEMENT_OTHER>
<android.database.DatabaseUtils: int STATEMENT_PRAGMA>
<android.database.DatabaseUtils: int STATEMENT_SELECT>
<android.database.DatabaseUtils: int STATEMENT_UNPREPARED>
<android.database.DatabaseUtils: int STATEMENT_UPDATE>
android.database.DatabaseUtils$InsertHelper
<android.database.DatabaseUtils$InsertHelper: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String)>
<android.database.DatabaseUtils$InsertHelper: void bind(int,double)>
<android.database.DatabaseUtils$InsertHelper: void bind(int,float)>
<android.database.DatabaseUtils$InsertHelper: void bind(int,long)>
<android.database.DatabaseUtils$InsertHelper: void bind(int,int)>
<android.database.DatabaseUtils$InsertHelper: void bind(int,boolean)>
<android.database.DatabaseUtils$InsertHelper: void bind(int,byte[])>
<android.database.DatabaseUtils$InsertHelper: void bind(int,java.lang.String)>
<android.database.DatabaseUtils$InsertHelper: void bindNull(int)>
<android.database.DatabaseUtils$InsertHelper: void close()>
<android.database.DatabaseUtils$InsertHelper: long execute()>
<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)>
<android.database.DatabaseUtils$InsertHelper: long insert(android.content.ContentValues)>
<android.database.DatabaseUtils$InsertHelper: void prepareForInsert()>
<android.database.DatabaseUtils$InsertHelper: void prepareForReplace()>
<android.database.DatabaseUtils$InsertHelper: long replace(android.content.ContentValues)>
android.database.DefaultDatabaseErrorHandler
<android.database.DefaultDatabaseErrorHandler: void <init>()>
<android.database.DefaultDatabaseErrorHandler: void onCorruption(android.database.sqlite.SQLiteDatabase)>
android.database.MatrixCursor
<android.database.MatrixCursor: void <init>(java.lang.String[],int)>
<android.database.MatrixCursor: void <init>(java.lang.String[])>
<android.database.MatrixCursor: void addRow(java.lang.Object[])>
<android.database.MatrixCursor: void addRow(java.lang.Iterable)>
<android.database.MatrixCursor: java.lang.String[] getColumnNames()>
<android.database.MatrixCursor: int getCount()>
<android.database.MatrixCursor: double getDouble(int)>
<android.database.MatrixCursor: float getFloat(int)>
<android.database.MatrixCursor: int getInt(int)>
<android.database.MatrixCursor: long getLong(int)>
<android.database.MatrixCursor: short getShort(int)>
<android.database.MatrixCursor: java.lang.String getString(int)>
<android.database.MatrixCursor: boolean isNull(int)>
<android.database.MatrixCursor: android.database.MatrixCursor$RowBuilder newRow()>
android.database.MatrixCursor$RowBuilder
<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)>
<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.String,java.lang.Object)>
android.database.MergeCursor
<android.database.MergeCursor: void <init>(android.database.Cursor[])>
<android.database.MergeCursor: java.lang.String[] getColumnNames()>
<android.database.MergeCursor: int getCount()>
<android.database.MergeCursor: double getDouble(int)>
<android.database.MergeCursor: float getFloat(int)>
<android.database.MergeCursor: int getInt(int)>
<android.database.MergeCursor: long getLong(int)>
<android.database.MergeCursor: short getShort(int)>
<android.database.MergeCursor: java.lang.String getString(int)>
<android.database.MergeCursor: boolean isNull(int)>
android.database.Observable
<android.database.Observable: void <init>()>
<android.database.Observable: void registerObserver(java.lang.Object)>
<android.database.Observable: void unregisterAll()>
<android.database.Observable: void unregisterObserver(java.lang.Object)>
<android.database.Observable: java.util.ArrayList mObservers>
android.database.SQLException
<android.database.SQLException: void <init>()>
<android.database.SQLException: void <init>(java.lang.String)>
<android.database.SQLException: void <init>(java.lang.String,java.lang.Throwable)>
android.database.StaleDataException
<android.database.StaleDataException: void <init>()>
<android.database.StaleDataException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteAbortException
<android.database.sqlite.SQLiteAbortException: void <init>()>
<android.database.sqlite.SQLiteAbortException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteAccessPermException
<android.database.sqlite.SQLiteAccessPermException: void <init>()>
<android.database.sqlite.SQLiteAccessPermException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException
<android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException: void <init>()>
<android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteBlobTooBigException
<android.database.sqlite.SQLiteBlobTooBigException: void <init>()>
<android.database.sqlite.SQLiteBlobTooBigException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteCantOpenDatabaseException
<android.database.sqlite.SQLiteCantOpenDatabaseException: void <init>()>
<android.database.sqlite.SQLiteCantOpenDatabaseException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteClosable
<android.database.sqlite.SQLiteClosable: void <init>()>
<android.database.sqlite.SQLiteClosable: void acquireReference()>
<android.database.sqlite.SQLiteClosable: void close()>
<android.database.sqlite.SQLiteClosable: void onAllReferencesReleased()>
<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()>
<android.database.sqlite.SQLiteClosable: void releaseReference()>
<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()>
android.database.sqlite.SQLiteConstraintException
<android.database.sqlite.SQLiteConstraintException: void <init>()>
<android.database.sqlite.SQLiteConstraintException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteCursor
<android.database.sqlite.SQLiteCursor: void <init>(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>
<android.database.sqlite.SQLiteCursor: void <init>(android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>
<android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()>
<android.database.sqlite.SQLiteCursor: int getCount()>
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()>
<android.database.sqlite.SQLiteCursor: void setFillWindowForwardOnly(boolean)>
<android.database.sqlite.SQLiteCursor: void setSelectionArguments(java.lang.String[])>
android.database.sqlite.SQLiteCursorDriver
<android.database.sqlite.SQLiteCursorDriver: void cursorClosed()>
<android.database.sqlite.SQLiteCursorDriver: void cursorDeactivated()>
<android.database.sqlite.SQLiteCursorDriver: void cursorRequeried(android.database.Cursor)>
<android.database.sqlite.SQLiteCursorDriver: android.database.Cursor query(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String[])>
<android.database.sqlite.SQLiteCursorDriver: void setBindArguments(java.lang.String[])>
android.database.sqlite.SQLiteDatabase
<android.database.sqlite.SQLiteDatabase: void beginTransaction()>
<android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()>
<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)>
<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase createInMemory(android.database.sqlite.SQLiteDatabase$OpenParams)>
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)>
<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()>
<android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()>
<android.database.sqlite.SQLiteDatabase: void endTransaction()>
<android.database.sqlite.SQLiteDatabase: void execPerConnectionSQL(java.lang.String,java.lang.Object[])>
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>
<android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()>
<android.database.sqlite.SQLiteDatabase: long getPageSize()>
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()>
<android.database.sqlite.SQLiteDatabase: int getVersion()>
<android.database.sqlite.SQLiteDatabase: boolean inTransaction()>
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>
<android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()>
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()>
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()>
<android.database.sqlite.SQLiteDatabase: boolean isOpen()>
<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>
<android.database.sqlite.SQLiteDatabase: boolean isWriteAheadLoggingEnabled()>
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)>
<android.database.sqlite.SQLiteDatabase: void onAllReferencesReleased()>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$OpenParams)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: int releaseMemory()>
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: void setCustomAggregateFunction(java.lang.String,java.util.function.BinaryOperator)>
<android.database.sqlite.SQLiteDatabase: void setCustomScalarFunction(java.lang.String,java.util.function.UnaryOperator)>
<android.database.sqlite.SQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)>
<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)>
<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>
<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)>
<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)>
<android.database.sqlite.SQLiteDatabase: void setPageSize(long)>
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>
<android.database.sqlite.SQLiteDatabase: void setVersion(int)>
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)>
<android.database.sqlite.SQLiteDatabase: void validateSql(java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()>
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()>
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)>
<android.database.sqlite.SQLiteDatabase: int CONFLICT_ABORT>
<android.database.sqlite.SQLiteDatabase: int CONFLICT_FAIL>
<android.database.sqlite.SQLiteDatabase: int CONFLICT_IGNORE>
<android.database.sqlite.SQLiteDatabase: int CONFLICT_NONE>
<android.database.sqlite.SQLiteDatabase: int CONFLICT_REPLACE>
<android.database.sqlite.SQLiteDatabase: int CONFLICT_ROLLBACK>
<android.database.sqlite.SQLiteDatabase: int CREATE_IF_NECESSARY>
<android.database.sqlite.SQLiteDatabase: int ENABLE_WRITE_AHEAD_LOGGING>
<android.database.sqlite.SQLiteDatabase: java.lang.String JOURNAL_MODE_DELETE>
<android.database.sqlite.SQLiteDatabase: java.lang.String JOURNAL_MODE_MEMORY>
<android.database.sqlite.SQLiteDatabase: java.lang.String JOURNAL_MODE_OFF>
<android.database.sqlite.SQLiteDatabase: java.lang.String JOURNAL_MODE_PERSIST>
<android.database.sqlite.SQLiteDatabase: java.lang.String JOURNAL_MODE_TRUNCATE>
<android.database.sqlite.SQLiteDatabase: java.lang.String JOURNAL_MODE_WAL>
<android.database.sqlite.SQLiteDatabase: int MAX_SQL_CACHE_SIZE>
<android.database.sqlite.SQLiteDatabase: int NO_LOCALIZED_COLLATORS>
<android.database.sqlite.SQLiteDatabase: int OPEN_READONLY>
<android.database.sqlite.SQLiteDatabase: int OPEN_READWRITE>
<android.database.sqlite.SQLiteDatabase: int SQLITE_MAX_LIKE_PATTERN_LENGTH>
<android.database.sqlite.SQLiteDatabase: java.lang.String SYNC_MODE_EXTRA>
<android.database.sqlite.SQLiteDatabase: java.lang.String SYNC_MODE_FULL>
<android.database.sqlite.SQLiteDatabase: java.lang.String SYNC_MODE_NORMAL>
<android.database.sqlite.SQLiteDatabase: java.lang.String SYNC_MODE_OFF>
android.database.sqlite.SQLiteDatabase$CursorFactory
<android.database.sqlite.SQLiteDatabase$CursorFactory: android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>
android.database.sqlite.SQLiteDatabase$OpenParams
<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.sqlite.SQLiteDatabase$CursorFactory getCursorFactory()>
<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.DatabaseErrorHandler getErrorHandler()>
<android.database.sqlite.SQLiteDatabase$OpenParams: long getIdleConnectionTimeout()>
<android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String getJournalMode()>
<android.database.sqlite.SQLiteDatabase$OpenParams: int getLookasideSlotCount()>
<android.database.sqlite.SQLiteDatabase$OpenParams: int getLookasideSlotSize()>
<android.database.sqlite.SQLiteDatabase$OpenParams: int getOpenFlags()>
<android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String getSynchronousMode()>
android.database.sqlite.SQLiteDatabase$OpenParams$Builder
<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: void <init>()>
<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: void <init>(android.database.sqlite.SQLiteDatabase$OpenParams)>
<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder addOpenFlags(int)>
<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams build()>
<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder removeOpenFlags(int)>
<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setErrorHandler(android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setIdleConnectionTimeout(long)>
<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setJournalMode(java.lang.String)>
<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setLookasideConfig(int,int)>
<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setOpenFlags(int)>
<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setSynchronousMode(java.lang.String)>
android.database.sqlite.SQLiteDatabaseCorruptException
<android.database.sqlite.SQLiteDatabaseCorruptException: void <init>()>
<android.database.sqlite.SQLiteDatabaseCorruptException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteDatabaseLockedException
<android.database.sqlite.SQLiteDatabaseLockedException: void <init>()>
<android.database.sqlite.SQLiteDatabaseLockedException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteDatatypeMismatchException
<android.database.sqlite.SQLiteDatatypeMismatchException: void <init>()>
<android.database.sqlite.SQLiteDatatypeMismatchException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteDiskIOException
<android.database.sqlite.SQLiteDiskIOException: void <init>()>
<android.database.sqlite.SQLiteDiskIOException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteDoneException
<android.database.sqlite.SQLiteDoneException: void <init>()>
<android.database.sqlite.SQLiteDoneException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteException
<android.database.sqlite.SQLiteException: void <init>()>
<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>
<android.database.sqlite.SQLiteException: void <init>(java.lang.String,java.lang.Throwable)>
android.database.sqlite.SQLiteFullException
<android.database.sqlite.SQLiteFullException: void <init>()>
<android.database.sqlite.SQLiteFullException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteMisuseException
<android.database.sqlite.SQLiteMisuseException: void <init>()>
<android.database.sqlite.SQLiteMisuseException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteOpenHelper
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,int,android.database.sqlite.SQLiteDatabase$OpenParams)>
<android.database.sqlite.SQLiteOpenHelper: void close()>
<android.database.sqlite.SQLiteOpenHelper: java.lang.String getDatabaseName()>
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<android.database.sqlite.SQLiteOpenHelper: void onConfigure(android.database.sqlite.SQLiteDatabase)>
<android.database.sqlite.SQLiteOpenHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>
<android.database.sqlite.SQLiteOpenHelper: void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int)>
<android.database.sqlite.SQLiteOpenHelper: void onOpen(android.database.sqlite.SQLiteDatabase)>
<android.database.sqlite.SQLiteOpenHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>
<android.database.sqlite.SQLiteOpenHelper: void setIdleConnectionTimeout(long)>
<android.database.sqlite.SQLiteOpenHelper: void setLookasideConfig(int,int)>
<android.database.sqlite.SQLiteOpenHelper: void setOpenParams(android.database.sqlite.SQLiteDatabase$OpenParams)>
<android.database.sqlite.SQLiteOpenHelper: void setWriteAheadLoggingEnabled(boolean)>
android.database.sqlite.SQLiteOutOfMemoryException
<android.database.sqlite.SQLiteOutOfMemoryException: void <init>()>
<android.database.sqlite.SQLiteOutOfMemoryException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteProgram
<android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])>
<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])>
<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)>
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>
<android.database.sqlite.SQLiteProgram: void bindNull(int)>
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>
<android.database.sqlite.SQLiteProgram: void clearBindings()>
<android.database.sqlite.SQLiteProgram: int getUniqueId()>
<android.database.sqlite.SQLiteProgram: void onAllReferencesReleased()>
android.database.sqlite.SQLiteQuery
android.database.sqlite.SQLiteQueryBuilder
<android.database.sqlite.SQLiteQueryBuilder: void <init>()>
<android.database.sqlite.SQLiteQueryBuilder: void appendColumns(java.lang.StringBuilder,java.lang.String[])>
<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)>
<android.database.sqlite.SQLiteQueryBuilder: void appendWhereEscapeString(java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: void appendWhereStandalone(java.lang.CharSequence)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionQuery(java.lang.String[],java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: int delete(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteQueryBuilder: android.database.sqlite.SQLiteDatabase$CursorFactory getCursorFactory()>
<android.database.sqlite.SQLiteQueryBuilder: java.util.Collection getProjectionGreylist()>
<android.database.sqlite.SQLiteQueryBuilder: java.util.Map getProjectionMap()>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String getTables()>
<android.database.sqlite.SQLiteQueryBuilder: long insert(android.database.sqlite.SQLiteDatabase,android.content.ContentValues)>
<android.database.sqlite.SQLiteQueryBuilder: boolean isDistinct()>
<android.database.sqlite.SQLiteQueryBuilder: boolean isStrict()>
<android.database.sqlite.SQLiteQueryBuilder: boolean isStrictColumns()>
<android.database.sqlite.SQLiteQueryBuilder: boolean isStrictGrammar()>
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteQueryBuilder: void setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.database.sqlite.SQLiteQueryBuilder: void setDistinct(boolean)>
<android.database.sqlite.SQLiteQueryBuilder: void setProjectionGreylist(java.util.Collection)>
<android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map)>
<android.database.sqlite.SQLiteQueryBuilder: void setStrict(boolean)>
<android.database.sqlite.SQLiteQueryBuilder: void setStrictColumns(boolean)>
<android.database.sqlite.SQLiteQueryBuilder: void setStrictGrammar(boolean)>
<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: int update(android.database.sqlite.SQLiteDatabase,android.content.ContentValues,java.lang.String,java.lang.String[])>
android.database.sqlite.SQLiteReadOnlyDatabaseException
<android.database.sqlite.SQLiteReadOnlyDatabaseException: void <init>()>
<android.database.sqlite.SQLiteReadOnlyDatabaseException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteStatement
<android.database.sqlite.SQLiteStatement: void execute()>
<android.database.sqlite.SQLiteStatement: long executeInsert()>
<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>
<android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()>
<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>
<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()>
android.database.sqlite.SQLiteTableLockedException
<android.database.sqlite.SQLiteTableLockedException: void <init>()>
<android.database.sqlite.SQLiteTableLockedException: void <init>(java.lang.String)>
android.database.sqlite.SQLiteTransactionListener
<android.database.sqlite.SQLiteTransactionListener: void onBegin()>
<android.database.sqlite.SQLiteTransactionListener: void onCommit()>
<android.database.sqlite.SQLiteTransactionListener: void onRollback()>
android.drm.DrmConvertedStatus
<android.drm.DrmConvertedStatus: void <init>(int,byte[],int)>
<android.drm.DrmConvertedStatus: int STATUS_ERROR>
<android.drm.DrmConvertedStatus: int STATUS_INPUTDATA_ERROR>
<android.drm.DrmConvertedStatus: int STATUS_OK>
<android.drm.DrmConvertedStatus: byte[] convertedData>
<android.drm.DrmConvertedStatus: int offset>
<android.drm.DrmConvertedStatus: int statusCode>
android.drm.DrmErrorEvent
<android.drm.DrmErrorEvent: void <init>(int,int,java.lang.String)>
<android.drm.DrmErrorEvent: void <init>(int,int,java.lang.String,java.util.HashMap)>
<android.drm.DrmErrorEvent: int TYPE_ACQUIRE_DRM_INFO_FAILED>
<android.drm.DrmErrorEvent: int TYPE_NOT_SUPPORTED>
<android.drm.DrmErrorEvent: int TYPE_NO_INTERNET_CONNECTION>
<android.drm.DrmErrorEvent: int TYPE_OUT_OF_MEMORY>
<android.drm.DrmErrorEvent: int TYPE_PROCESS_DRM_INFO_FAILED>
<android.drm.DrmErrorEvent: int TYPE_REMOVE_ALL_RIGHTS_FAILED>
<android.drm.DrmErrorEvent: int TYPE_RIGHTS_NOT_INSTALLED>
<android.drm.DrmErrorEvent: int TYPE_RIGHTS_RENEWAL_NOT_ALLOWED>
android.drm.DrmEvent
<android.drm.DrmEvent: void <init>(int,int,java.lang.String,java.util.HashMap)>
<android.drm.DrmEvent: void <init>(int,int,java.lang.String)>
<android.drm.DrmEvent: java.lang.Object getAttribute(java.lang.String)>
<android.drm.DrmEvent: java.lang.String getMessage()>
<android.drm.DrmEvent: int getType()>
<android.drm.DrmEvent: int getUniqueId()>
<android.drm.DrmEvent: java.lang.String DRM_INFO_OBJECT>
<android.drm.DrmEvent: java.lang.String DRM_INFO_STATUS_OBJECT>
<android.drm.DrmEvent: int TYPE_ALL_RIGHTS_REMOVED>
<android.drm.DrmEvent: int TYPE_DRM_INFO_PROCESSED>
android.drm.DrmInfo
<android.drm.DrmInfo: void <init>(int,byte[],java.lang.String)>
<android.drm.DrmInfo: void <init>(int,java.lang.String,java.lang.String)>
<android.drm.DrmInfo: java.lang.Object get(java.lang.String)>
<android.drm.DrmInfo: byte[] getData()>
<android.drm.DrmInfo: int getInfoType()>
<android.drm.DrmInfo: java.lang.String getMimeType()>
<android.drm.DrmInfo: java.util.Iterator iterator()>
<android.drm.DrmInfo: java.util.Iterator keyIterator()>
<android.drm.DrmInfo: void put(java.lang.String,java.lang.Object)>
android.drm.DrmInfoEvent
<android.drm.DrmInfoEvent: void <init>(int,int,java.lang.String)>
<android.drm.DrmInfoEvent: void <init>(int,int,java.lang.String,java.util.HashMap)>
<android.drm.DrmInfoEvent: int TYPE_ACCOUNT_ALREADY_REGISTERED>
<android.drm.DrmInfoEvent: int TYPE_ALREADY_REGISTERED_BY_ANOTHER_ACCOUNT>
<android.drm.DrmInfoEvent: int TYPE_REMOVE_RIGHTS>
<android.drm.DrmInfoEvent: int TYPE_RIGHTS_INSTALLED>
<android.drm.DrmInfoEvent: int TYPE_RIGHTS_REMOVED>
<android.drm.DrmInfoEvent: int TYPE_WAIT_FOR_RIGHTS>
android.drm.DrmInfoRequest
<android.drm.DrmInfoRequest: void <init>(int,java.lang.String)>
<android.drm.DrmInfoRequest: java.lang.Object get(java.lang.String)>
<android.drm.DrmInfoRequest: int getInfoType()>
<android.drm.DrmInfoRequest: java.lang.String getMimeType()>
<android.drm.DrmInfoRequest: java.util.Iterator iterator()>
<android.drm.DrmInfoRequest: java.util.Iterator keyIterator()>
<android.drm.DrmInfoRequest: void put(java.lang.String,java.lang.Object)>
<android.drm.DrmInfoRequest: java.lang.String ACCOUNT_ID>
<android.drm.DrmInfoRequest: java.lang.String SUBSCRIPTION_ID>
<android.drm.DrmInfoRequest: int TYPE_REGISTRATION_INFO>
<android.drm.DrmInfoRequest: int TYPE_RIGHTS_ACQUISITION_INFO>
<android.drm.DrmInfoRequest: int TYPE_RIGHTS_ACQUISITION_PROGRESS_INFO>
<android.drm.DrmInfoRequest: int TYPE_UNREGISTRATION_INFO>
android.drm.DrmInfoStatus
<android.drm.DrmInfoStatus: void <init>(int,int,android.drm.ProcessedData,java.lang.String)>
<android.drm.DrmInfoStatus: int STATUS_ERROR>
<android.drm.DrmInfoStatus: int STATUS_OK>
<android.drm.DrmInfoStatus: android.drm.ProcessedData data>
<android.drm.DrmInfoStatus: int infoType>
<android.drm.DrmInfoStatus: java.lang.String mimeType>
<android.drm.DrmInfoStatus: int statusCode>
android.drm.DrmManagerClient
<android.drm.DrmManagerClient: void <init>(android.content.Context)>
<android.drm.DrmManagerClient: android.drm.DrmInfo acquireDrmInfo(android.drm.DrmInfoRequest)>
<android.drm.DrmManagerClient: int acquireRights(android.drm.DrmInfoRequest)>
<android.drm.DrmManagerClient: boolean canHandle(java.lang.String,java.lang.String)>
<android.drm.DrmManagerClient: boolean canHandle(android.net.Uri,java.lang.String)>
<android.drm.DrmManagerClient: int checkRightsStatus(java.lang.String)>
<android.drm.DrmManagerClient: int checkRightsStatus(android.net.Uri)>
<android.drm.DrmManagerClient: int checkRightsStatus(java.lang.String,int)>
<android.drm.DrmManagerClient: int checkRightsStatus(android.net.Uri,int)>
<android.drm.DrmManagerClient: void close()>
<android.drm.DrmManagerClient: android.drm.DrmConvertedStatus closeConvertSession(int)>
<android.drm.DrmManagerClient: android.drm.DrmConvertedStatus convertData(int,byte[])>
<android.drm.DrmManagerClient: java.lang.String[] getAvailableDrmEngines()>
<android.drm.DrmManagerClient: java.util.Collection getAvailableDrmSupportInfo()>
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(java.lang.String,int)>
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(android.net.Uri,int)>
<android.drm.DrmManagerClient: int getDrmObjectType(java.lang.String,java.lang.String)>
<android.drm.DrmManagerClient: int getDrmObjectType(android.net.Uri,java.lang.String)>
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(java.lang.String)>
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(android.net.Uri)>
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(java.lang.String)>
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(android.net.Uri)>
<android.drm.DrmManagerClient: int openConvertSession(java.lang.String)>
<android.drm.DrmManagerClient: int processDrmInfo(android.drm.DrmInfo)>
<android.drm.DrmManagerClient: void release()>
<android.drm.DrmManagerClient: int removeAllRights()>
<android.drm.DrmManagerClient: int removeRights(java.lang.String)>
<android.drm.DrmManagerClient: int removeRights(android.net.Uri)>
<android.drm.DrmManagerClient: int saveRights(android.drm.DrmRights,java.lang.String,java.lang.String)>
<android.drm.DrmManagerClient: void setOnErrorListener(android.drm.DrmManagerClient$OnErrorListener)>
<android.drm.DrmManagerClient: void setOnEventListener(android.drm.DrmManagerClient$OnEventListener)>
<android.drm.DrmManagerClient: void setOnInfoListener(android.drm.DrmManagerClient$OnInfoListener)>
<android.drm.DrmManagerClient: int ERROR_NONE>
<android.drm.DrmManagerClient: int ERROR_UNKNOWN>
android.drm.DrmManagerClient$OnErrorListener
<android.drm.DrmManagerClient$OnErrorListener: void onError(android.drm.DrmManagerClient,android.drm.DrmErrorEvent)>
android.drm.DrmManagerClient$OnEventListener
<android.drm.DrmManagerClient$OnEventListener: void onEvent(android.drm.DrmManagerClient,android.drm.DrmEvent)>
android.drm.DrmManagerClient$OnInfoListener
<android.drm.DrmManagerClient$OnInfoListener: void onInfo(android.drm.DrmManagerClient,android.drm.DrmInfoEvent)>
android.drm.DrmRights
<android.drm.DrmRights: void <init>(java.lang.String,java.lang.String)>
<android.drm.DrmRights: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<android.drm.DrmRights: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.drm.DrmRights: void <init>(java.io.File,java.lang.String)>
<android.drm.DrmRights: void <init>(android.drm.ProcessedData,java.lang.String)>
<android.drm.DrmRights: java.lang.String getAccountId()>
<android.drm.DrmRights: byte[] getData()>
<android.drm.DrmRights: java.lang.String getMimeType()>
<android.drm.DrmRights: java.lang.String getSubscriptionId()>
android.drm.DrmStore
<android.drm.DrmStore: void <init>()>
android.drm.DrmStore$Action
<android.drm.DrmStore$Action: void <init>()>
<android.drm.DrmStore$Action: int DEFAULT>
<android.drm.DrmStore$Action: int DISPLAY>
<android.drm.DrmStore$Action: int EXECUTE>
<android.drm.DrmStore$Action: int OUTPUT>
<android.drm.DrmStore$Action: int PLAY>
<android.drm.DrmStore$Action: int PREVIEW>
<android.drm.DrmStore$Action: int RINGTONE>
<android.drm.DrmStore$Action: int TRANSFER>
android.drm.DrmStore$ConstraintsColumns
<android.drm.DrmStore$ConstraintsColumns: java.lang.String EXTENDED_METADATA>
<android.drm.DrmStore$ConstraintsColumns: java.lang.String LICENSE_AVAILABLE_TIME>
<android.drm.DrmStore$ConstraintsColumns: java.lang.String LICENSE_EXPIRY_TIME>
<android.drm.DrmStore$ConstraintsColumns: java.lang.String LICENSE_START_TIME>
<android.drm.DrmStore$ConstraintsColumns: java.lang.String MAX_REPEAT_COUNT>
<android.drm.DrmStore$ConstraintsColumns: java.lang.String REMAINING_REPEAT_COUNT>
android.drm.DrmStore$DrmObjectType
<android.drm.DrmStore$DrmObjectType: void <init>()>
<android.drm.DrmStore$DrmObjectType: int CONTENT>
<android.drm.DrmStore$DrmObjectType: int RIGHTS_OBJECT>
<android.drm.DrmStore$DrmObjectType: int TRIGGER_OBJECT>
<android.drm.DrmStore$DrmObjectType: int UNKNOWN>
android.drm.DrmStore$Playback
<android.drm.DrmStore$Playback: void <init>()>
<android.drm.DrmStore$Playback: int PAUSE>
<android.drm.DrmStore$Playback: int RESUME>
<android.drm.DrmStore$Playback: int START>
<android.drm.DrmStore$Playback: int STOP>
android.drm.DrmStore$RightsStatus
<android.drm.DrmStore$RightsStatus: void <init>()>
<android.drm.DrmStore$RightsStatus: int RIGHTS_EXPIRED>
<android.drm.DrmStore$RightsStatus: int RIGHTS_INVALID>
<android.drm.DrmStore$RightsStatus: int RIGHTS_NOT_ACQUIRED>
<android.drm.DrmStore$RightsStatus: int RIGHTS_VALID>
android.drm.DrmSupportInfo
<android.drm.DrmSupportInfo: void <init>()>
<android.drm.DrmSupportInfo: void addFileSuffix(java.lang.String)>
<android.drm.DrmSupportInfo: void addMimeType(java.lang.String)>
<android.drm.DrmSupportInfo: java.lang.String getDescriprition()>
<android.drm.DrmSupportInfo: java.lang.String getDescription()>
<android.drm.DrmSupportInfo: java.util.Iterator getFileSuffixIterator()>
<android.drm.DrmSupportInfo: java.util.Iterator getMimeTypeIterator()>
<android.drm.DrmSupportInfo: void setDescription(java.lang.String)>
android.drm.DrmUtils
<android.drm.DrmUtils: void <init>()>
<android.drm.DrmUtils: android.drm.DrmUtils$ExtendedMetadataParser getExtendedMetadataParser(byte[])>
android.drm.DrmUtils$ExtendedMetadataParser
<android.drm.DrmUtils$ExtendedMetadataParser: java.lang.String get(java.lang.String)>
<android.drm.DrmUtils$ExtendedMetadataParser: java.util.Iterator iterator()>
<android.drm.DrmUtils$ExtendedMetadataParser: java.util.Iterator keyIterator()>
android.drm.ProcessedData
<android.drm.ProcessedData: java.lang.String getAccountId()>
<android.drm.ProcessedData: byte[] getData()>
<android.drm.ProcessedData: java.lang.String getSubscriptionId()>
android.gesture.Gesture
<android.gesture.Gesture: void <init>()>
<android.gesture.Gesture: void addStroke(android.gesture.GestureStroke)>
<android.gesture.Gesture: java.lang.Object clone()>
<android.gesture.Gesture: int describeContents()>
<android.gesture.Gesture: android.graphics.RectF getBoundingBox()>
<android.gesture.Gesture: long getID()>
<android.gesture.Gesture: float getLength()>
<android.gesture.Gesture: java.util.ArrayList getStrokes()>
<android.gesture.Gesture: int getStrokesCount()>
<android.gesture.Gesture: android.graphics.Bitmap toBitmap(int,int,int,int,int)>
<android.gesture.Gesture: android.graphics.Bitmap toBitmap(int,int,int,int)>
<android.gesture.Gesture: android.graphics.Path toPath()>
<android.gesture.Gesture: android.graphics.Path toPath(android.graphics.Path)>
<android.gesture.Gesture: android.graphics.Path toPath(int,int,int,int)>
<android.gesture.Gesture: android.graphics.Path toPath(android.graphics.Path,int,int,int,int)>
<android.gesture.Gesture: void writeToParcel(android.os.Parcel,int)>
<android.gesture.Gesture: android.os.Parcelable$Creator CREATOR>
android.gesture.GestureLibraries
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromFile(java.lang.String)>
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromFile(java.io.File)>
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromFileDescriptor(android.os.ParcelFileDescriptor)>
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromPrivateFile(android.content.Context,java.lang.String)>
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromRawResource(android.content.Context,int)>
android.gesture.GestureLibrary
<android.gesture.GestureLibrary: void <init>()>
<android.gesture.GestureLibrary: void addGesture(java.lang.String,android.gesture.Gesture)>
<android.gesture.GestureLibrary: java.util.Set getGestureEntries()>
<android.gesture.GestureLibrary: java.util.ArrayList getGestures(java.lang.String)>
<android.gesture.GestureLibrary: int getOrientationStyle()>
<android.gesture.GestureLibrary: int getSequenceType()>
<android.gesture.GestureLibrary: boolean isReadOnly()>
<android.gesture.GestureLibrary: boolean load()>
<android.gesture.GestureLibrary: java.util.ArrayList recognize(android.gesture.Gesture)>
<android.gesture.GestureLibrary: void removeEntry(java.lang.String)>
<android.gesture.GestureLibrary: void removeGesture(java.lang.String,android.gesture.Gesture)>
<android.gesture.GestureLibrary: boolean save()>
<android.gesture.GestureLibrary: void setOrientationStyle(int)>
<android.gesture.GestureLibrary: void setSequenceType(int)>
<android.gesture.GestureLibrary: android.gesture.GestureStore mStore>
android.gesture.GestureOverlayView
<android.gesture.GestureOverlayView: void <init>(android.content.Context)>
<android.gesture.GestureOverlayView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.gesture.GestureOverlayView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.gesture.GestureOverlayView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.gesture.GestureOverlayView: void addOnGestureListener(android.gesture.GestureOverlayView$OnGestureListener)>
<android.gesture.GestureOverlayView: void addOnGesturePerformedListener(android.gesture.GestureOverlayView$OnGesturePerformedListener)>
<android.gesture.GestureOverlayView: void addOnGesturingListener(android.gesture.GestureOverlayView$OnGesturingListener)>
<android.gesture.GestureOverlayView: void cancelClearAnimation()>
<android.gesture.GestureOverlayView: void cancelGesture()>
<android.gesture.GestureOverlayView: void clear(boolean)>
<android.gesture.GestureOverlayView: java.util.ArrayList getCurrentStroke()>
<android.gesture.GestureOverlayView: long getFadeOffset()>
<android.gesture.GestureOverlayView: android.gesture.Gesture getGesture()>
<android.gesture.GestureOverlayView: int getGestureColor()>
<android.gesture.GestureOverlayView: android.graphics.Path getGesturePath()>
<android.gesture.GestureOverlayView: android.graphics.Path getGesturePath(android.graphics.Path)>
<android.gesture.GestureOverlayView: float getGestureStrokeAngleThreshold()>
<android.gesture.GestureOverlayView: float getGestureStrokeLengthThreshold()>
<android.gesture.GestureOverlayView: float getGestureStrokeSquarenessTreshold()>
<android.gesture.GestureOverlayView: int getGestureStrokeType()>
<android.gesture.GestureOverlayView: float getGestureStrokeWidth()>
<android.gesture.GestureOverlayView: int getOrientation()>
<android.gesture.GestureOverlayView: int getUncertainGestureColor()>
<android.gesture.GestureOverlayView: boolean isEventsInterceptionEnabled()>
<android.gesture.GestureOverlayView: boolean isFadeEnabled()>
<android.gesture.GestureOverlayView: boolean isGestureVisible()>
<android.gesture.GestureOverlayView: boolean isGesturing()>
<android.gesture.GestureOverlayView: void removeAllOnGestureListeners()>
<android.gesture.GestureOverlayView: void removeAllOnGesturePerformedListeners()>
<android.gesture.GestureOverlayView: void removeAllOnGesturingListeners()>
<android.gesture.GestureOverlayView: void removeOnGestureListener(android.gesture.GestureOverlayView$OnGestureListener)>
<android.gesture.GestureOverlayView: void removeOnGesturePerformedListener(android.gesture.GestureOverlayView$OnGesturePerformedListener)>
<android.gesture.GestureOverlayView: void removeOnGesturingListener(android.gesture.GestureOverlayView$OnGesturingListener)>
<android.gesture.GestureOverlayView: void setEventsInterceptionEnabled(boolean)>
<android.gesture.GestureOverlayView: void setFadeEnabled(boolean)>
<android.gesture.GestureOverlayView: void setFadeOffset(long)>
<android.gesture.GestureOverlayView: void setGesture(android.gesture.Gesture)>
<android.gesture.GestureOverlayView: void setGestureColor(int)>
<android.gesture.GestureOverlayView: void setGestureStrokeAngleThreshold(float)>
<android.gesture.GestureOverlayView: void setGestureStrokeLengthThreshold(float)>
<android.gesture.GestureOverlayView: void setGestureStrokeSquarenessTreshold(float)>
<android.gesture.GestureOverlayView: void setGestureStrokeType(int)>
<android.gesture.GestureOverlayView: void setGestureStrokeWidth(float)>
<android.gesture.GestureOverlayView: void setGestureVisible(boolean)>
<android.gesture.GestureOverlayView: void setOrientation(int)>
<android.gesture.GestureOverlayView: void setUncertainGestureColor(int)>
<android.gesture.GestureOverlayView: int GESTURE_STROKE_TYPE_MULTIPLE>
<android.gesture.GestureOverlayView: int GESTURE_STROKE_TYPE_SINGLE>
<android.gesture.GestureOverlayView: int ORIENTATION_HORIZONTAL>
<android.gesture.GestureOverlayView: int ORIENTATION_VERTICAL>
android.gesture.GestureOverlayView$OnGestureListener
<android.gesture.GestureOverlayView$OnGestureListener: void onGesture(android.gesture.GestureOverlayView,android.view.MotionEvent)>
<android.gesture.GestureOverlayView$OnGestureListener: void onGestureCancelled(android.gesture.GestureOverlayView,android.view.MotionEvent)>
<android.gesture.GestureOverlayView$OnGestureListener: void onGestureEnded(android.gesture.GestureOverlayView,android.view.MotionEvent)>
<android.gesture.GestureOverlayView$OnGestureListener: void onGestureStarted(android.gesture.GestureOverlayView,android.view.MotionEvent)>
android.gesture.GestureOverlayView$OnGesturePerformedListener
<android.gesture.GestureOverlayView$OnGesturePerformedListener: void onGesturePerformed(android.gesture.GestureOverlayView,android.gesture.Gesture)>
android.gesture.GestureOverlayView$OnGesturingListener
<android.gesture.GestureOverlayView$OnGesturingListener: void onGesturingEnded(android.gesture.GestureOverlayView)>
<android.gesture.GestureOverlayView$OnGesturingListener: void onGesturingStarted(android.gesture.GestureOverlayView)>
android.gesture.GesturePoint
<android.gesture.GesturePoint: void <init>(float,float,long)>
<android.gesture.GesturePoint: java.lang.Object clone()>
<android.gesture.GesturePoint: long timestamp>
<android.gesture.GesturePoint: float x>
<android.gesture.GesturePoint: float y>
android.gesture.GestureStore
<android.gesture.GestureStore: void <init>()>
<android.gesture.GestureStore: void addGesture(java.lang.String,android.gesture.Gesture)>
<android.gesture.GestureStore: java.util.Set getGestureEntries()>
<android.gesture.GestureStore: java.util.ArrayList getGestures(java.lang.String)>
<android.gesture.GestureStore: int getOrientationStyle()>
<android.gesture.GestureStore: int getSequenceType()>
<android.gesture.GestureStore: boolean hasChanged()>
<android.gesture.GestureStore: void load(java.io.InputStream)>
<android.gesture.GestureStore: void load(java.io.InputStream,boolean)>
<android.gesture.GestureStore: java.util.ArrayList recognize(android.gesture.Gesture)>
<android.gesture.GestureStore: void removeEntry(java.lang.String)>
<android.gesture.GestureStore: void removeGesture(java.lang.String,android.gesture.Gesture)>
<android.gesture.GestureStore: void save(java.io.OutputStream)>
<android.gesture.GestureStore: void save(java.io.OutputStream,boolean)>
<android.gesture.GestureStore: void setOrientationStyle(int)>
<android.gesture.GestureStore: void setSequenceType(int)>
<android.gesture.GestureStore: int ORIENTATION_INVARIANT>
<android.gesture.GestureStore: int ORIENTATION_SENSITIVE>
<android.gesture.GestureStore: int SEQUENCE_INVARIANT>
<android.gesture.GestureStore: int SEQUENCE_SENSITIVE>
android.gesture.GestureStroke
<android.gesture.GestureStroke: void <init>(java.util.ArrayList)>
<android.gesture.GestureStroke: void clearPath()>
<android.gesture.GestureStroke: java.lang.Object clone()>
<android.gesture.GestureStroke: android.gesture.OrientedBoundingBox computeOrientedBoundingBox()>
<android.gesture.GestureStroke: android.graphics.Path getPath()>
<android.gesture.GestureStroke: android.graphics.Path toPath(float,float,int)>
<android.gesture.GestureStroke: android.graphics.RectF boundingBox>
<android.gesture.GestureStroke: float length>
<android.gesture.GestureStroke: float[] points>
android.gesture.GestureUtils
<android.gesture.GestureUtils: android.gesture.OrientedBoundingBox computeOrientedBoundingBox(java.util.ArrayList)>
<android.gesture.GestureUtils: android.gesture.OrientedBoundingBox computeOrientedBoundingBox(float[])>
<android.gesture.GestureUtils: float[] spatialSampling(android.gesture.Gesture,int)>
<android.gesture.GestureUtils: float[] spatialSampling(android.gesture.Gesture,int,boolean)>
<android.gesture.GestureUtils: float[] temporalSampling(android.gesture.GestureStroke,int)>
android.gesture.OrientedBoundingBox
<android.gesture.OrientedBoundingBox: float centerX>
<android.gesture.OrientedBoundingBox: float centerY>
<android.gesture.OrientedBoundingBox: float height>
<android.gesture.OrientedBoundingBox: float orientation>
<android.gesture.OrientedBoundingBox: float squareness>
<android.gesture.OrientedBoundingBox: float width>
android.gesture.Prediction
<android.gesture.Prediction: java.lang.String name>
<android.gesture.Prediction: double score>
android.graphics.Bitmap
<android.graphics.Bitmap: android.graphics.Bitmap asShared()>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>
<android.graphics.Bitmap: void copyPixelsFromBuffer(java.nio.Buffer)>
<android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture,int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>
<android.graphics.Bitmap: int describeContents()>
<android.graphics.Bitmap: void eraseColor(int)>
<android.graphics.Bitmap: void eraseColor(long)>
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha()>
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])>
<android.graphics.Bitmap: int getAllocationByteCount()>
<android.graphics.Bitmap: int getByteCount()>
<android.graphics.Bitmap: android.graphics.Color getColor(int,int)>
<android.graphics.Bitmap: android.graphics.ColorSpace getColorSpace()>
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>
<android.graphics.Bitmap: int getDensity()>
<android.graphics.Bitmap: int getGenerationId()>
<android.graphics.Bitmap: android.hardware.HardwareBuffer getHardwareBuffer()>
<android.graphics.Bitmap: int getHeight()>
<android.graphics.Bitmap: byte[] getNinePatchChunk()>
<android.graphics.Bitmap: int getPixel(int,int)>
<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>
<android.graphics.Bitmap: int getRowBytes()>
<android.graphics.Bitmap: int getScaledHeight(android.graphics.Canvas)>
<android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)>
<android.graphics.Bitmap: int getScaledHeight(int)>
<android.graphics.Bitmap: int getScaledWidth(android.graphics.Canvas)>
<android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)>
<android.graphics.Bitmap: int getScaledWidth(int)>
<android.graphics.Bitmap: int getWidth()>
<android.graphics.Bitmap: boolean hasAlpha()>
<android.graphics.Bitmap: boolean hasMipMap()>
<android.graphics.Bitmap: boolean isMutable()>
<android.graphics.Bitmap: boolean isPremultiplied()>
<android.graphics.Bitmap: boolean isRecycled()>
<android.graphics.Bitmap: void prepareToDraw()>
<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: void recycle()>
<android.graphics.Bitmap: boolean sameAs(android.graphics.Bitmap)>
<android.graphics.Bitmap: void setColorSpace(android.graphics.ColorSpace)>
<android.graphics.Bitmap: void setConfig(android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: void setDensity(int)>
<android.graphics.Bitmap: void setHasAlpha(boolean)>
<android.graphics.Bitmap: void setHasMipMap(boolean)>
<android.graphics.Bitmap: void setHeight(int)>
<android.graphics.Bitmap: void setPixel(int,int,int)>
<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)>
<android.graphics.Bitmap: void setPremultiplied(boolean)>
<android.graphics.Bitmap: void setWidth(int)>
<android.graphics.Bitmap: android.graphics.Bitmap wrapHardwareBuffer(android.hardware.HardwareBuffer,android.graphics.ColorSpace)>
<android.graphics.Bitmap: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Bitmap: android.os.Parcelable$Creator CREATOR>
<android.graphics.Bitmap: int DENSITY_NONE>
android.graphics.Bitmap$CompressFormat
<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat JPEG>
<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>
<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat WEBP>
<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat WEBP_LOSSLESS>
<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat WEBP_LOSSY>
android.graphics.Bitmap$Config
<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ALPHA_8>
<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_4444>
<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>
<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config HARDWARE>
<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGBA_1010102>
<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGBA_F16>
<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>
android.graphics.BitmapFactory
<android.graphics.BitmapFactory: void <init>()>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
android.graphics.BitmapFactory$Options
<android.graphics.BitmapFactory$Options: void <init>()>
<android.graphics.BitmapFactory$Options: void requestCancelDecode()>
<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap>
<android.graphics.BitmapFactory$Options: int inDensity>
<android.graphics.BitmapFactory$Options: boolean inDither>
<android.graphics.BitmapFactory$Options: boolean inInputShareable>
<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds>
<android.graphics.BitmapFactory$Options: boolean inMutable>
<android.graphics.BitmapFactory$Options: boolean inPreferQualityOverSpeed>
<android.graphics.BitmapFactory$Options: android.graphics.ColorSpace inPreferredColorSpace>
<android.graphics.BitmapFactory$Options: android.graphics.Bitmap$Config inPreferredConfig>
<android.graphics.BitmapFactory$Options: boolean inPremultiplied>
<android.graphics.BitmapFactory$Options: boolean inPurgeable>
<android.graphics.BitmapFactory$Options: int inSampleSize>
<android.graphics.BitmapFactory$Options: boolean inScaled>
<android.graphics.BitmapFactory$Options: int inScreenDensity>
<android.graphics.BitmapFactory$Options: int inTargetDensity>
<android.graphics.BitmapFactory$Options: byte[] inTempStorage>
<android.graphics.BitmapFactory$Options: boolean mCancel>
<android.graphics.BitmapFactory$Options: android.graphics.ColorSpace outColorSpace>
<android.graphics.BitmapFactory$Options: android.graphics.Bitmap$Config outConfig>
<android.graphics.BitmapFactory$Options: int outHeight>
<android.graphics.BitmapFactory$Options: java.lang.String outMimeType>
<android.graphics.BitmapFactory$Options: int outWidth>
android.graphics.BitmapRegionDecoder
<android.graphics.BitmapRegionDecoder: android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapRegionDecoder: int getHeight()>
<android.graphics.BitmapRegionDecoder: int getWidth()>
<android.graphics.BitmapRegionDecoder: boolean isRecycled()>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(byte[],int,int,boolean)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(byte[],int,int)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.FileDescriptor,boolean)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(android.os.ParcelFileDescriptor)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.InputStream,boolean)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.InputStream)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.lang.String,boolean)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.lang.String)>
<android.graphics.BitmapRegionDecoder: void recycle()>
android.graphics.BitmapShader
<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>
<android.graphics.BitmapShader: int getFilterMode()>
<android.graphics.BitmapShader: void setFilterMode(int)>
<android.graphics.BitmapShader: int FILTER_MODE_DEFAULT>
<android.graphics.BitmapShader: int FILTER_MODE_LINEAR>
<android.graphics.BitmapShader: int FILTER_MODE_NEAREST>
android.graphics.BlendMode
<android.graphics.BlendMode: android.graphics.BlendMode CLEAR>
<android.graphics.BlendMode: android.graphics.BlendMode COLOR>
<android.graphics.BlendMode: android.graphics.BlendMode COLOR_BURN>
<android.graphics.BlendMode: android.graphics.BlendMode COLOR_DODGE>
<android.graphics.BlendMode: android.graphics.BlendMode DARKEN>
<android.graphics.BlendMode: android.graphics.BlendMode DIFFERENCE>
<android.graphics.BlendMode: android.graphics.BlendMode DST>
<android.graphics.BlendMode: android.graphics.BlendMode DST_ATOP>
<android.graphics.BlendMode: android.graphics.BlendMode DST_IN>
<android.graphics.BlendMode: android.graphics.BlendMode DST_OUT>
<android.graphics.BlendMode: android.graphics.BlendMode DST_OVER>
<android.graphics.BlendMode: android.graphics.BlendMode EXCLUSION>
<android.graphics.BlendMode: android.graphics.BlendMode HARD_LIGHT>
<android.graphics.BlendMode: android.graphics.BlendMode HUE>
<android.graphics.BlendMode: android.graphics.BlendMode LIGHTEN>
<android.graphics.BlendMode: android.graphics.BlendMode LUMINOSITY>
<android.graphics.BlendMode: android.graphics.BlendMode MODULATE>
<android.graphics.BlendMode: android.graphics.BlendMode MULTIPLY>
<android.graphics.BlendMode: android.graphics.BlendMode OVERLAY>
<android.graphics.BlendMode: android.graphics.BlendMode PLUS>
<android.graphics.BlendMode: android.graphics.BlendMode SATURATION>
<android.graphics.BlendMode: android.graphics.BlendMode SCREEN>
<android.graphics.BlendMode: android.graphics.BlendMode SOFT_LIGHT>
<android.graphics.BlendMode: android.graphics.BlendMode SRC>
<android.graphics.BlendMode: android.graphics.BlendMode SRC_ATOP>
<android.graphics.BlendMode: android.graphics.BlendMode SRC_IN>
<android.graphics.BlendMode: android.graphics.BlendMode SRC_OUT>
<android.graphics.BlendMode: android.graphics.BlendMode SRC_OVER>
<android.graphics.BlendMode: android.graphics.BlendMode XOR>
android.graphics.BlendModeColorFilter
<android.graphics.BlendModeColorFilter: void <init>(int,android.graphics.BlendMode)>
<android.graphics.BlendModeColorFilter: int getColor()>
<android.graphics.BlendModeColorFilter: android.graphics.BlendMode getMode()>
android.graphics.BlurMaskFilter
<android.graphics.BlurMaskFilter: void <init>(float,android.graphics.BlurMaskFilter$Blur)>
android.graphics.BlurMaskFilter$Blur
<android.graphics.BlurMaskFilter$Blur: android.graphics.BlurMaskFilter$Blur INNER>
<android.graphics.BlurMaskFilter$Blur: android.graphics.BlurMaskFilter$Blur NORMAL>
<android.graphics.BlurMaskFilter$Blur: android.graphics.BlurMaskFilter$Blur OUTER>
<android.graphics.BlurMaskFilter$Blur: android.graphics.BlurMaskFilter$Blur SOLID>
android.graphics.Camera
<android.graphics.Camera: void <init>()>
<android.graphics.Camera: void applyToCanvas(android.graphics.Canvas)>
<android.graphics.Camera: float dotWithNormal(float,float,float)>
<android.graphics.Camera: float getLocationX()>
<android.graphics.Camera: float getLocationY()>
<android.graphics.Camera: float getLocationZ()>
<android.graphics.Camera: void getMatrix(android.graphics.Matrix)>
<android.graphics.Camera: void restore()>
<android.graphics.Camera: void rotate(float,float,float)>
<android.graphics.Camera: void rotateX(float)>
<android.graphics.Camera: void rotateY(float)>
<android.graphics.Camera: void rotateZ(float)>
<android.graphics.Camera: void save()>
<android.graphics.Camera: void setLocation(float,float,float)>
<android.graphics.Camera: void translate(float,float,float)>
android.graphics.Canvas
<android.graphics.Canvas: void <init>()>
<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>
<android.graphics.Canvas: boolean clipOutPath(android.graphics.Path)>
<android.graphics.Canvas: boolean clipOutRect(android.graphics.RectF)>
<android.graphics.Canvas: boolean clipOutRect(android.graphics.Rect)>
<android.graphics.Canvas: boolean clipOutRect(float,float,float,float)>
<android.graphics.Canvas: boolean clipOutRect(int,int,int,int)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path)>
<android.graphics.Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipRect(android.graphics.RectF)>
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>
<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipRect(float,float,float,float)>
<android.graphics.Canvas: boolean clipRect(int,int,int,int)>
<android.graphics.Canvas: void concat(android.graphics.Matrix)>
<android.graphics.Canvas: void disableZ()>
<android.graphics.Canvas: void drawARGB(int,int,int,int)>
<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawArc(float,float,float,float,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>
<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawColor(int)>
<android.graphics.Canvas: void drawColor(long)>
<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>
<android.graphics.Canvas: void drawColor(int,android.graphics.BlendMode)>
<android.graphics.Canvas: void drawColor(long,android.graphics.BlendMode)>
<android.graphics.Canvas: void drawDoubleRoundRect(android.graphics.RectF,float,float,android.graphics.RectF,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawDoubleRoundRect(android.graphics.RectF,float[],android.graphics.RectF,float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawGlyphs(int[],int,float[],int,int,android.graphics.fonts.Font,android.graphics.Paint)>
<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawLines(float[],int,int,android.graphics.Paint)>
<android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawOval(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPaint(android.graphics.Paint)>
<android.graphics.Canvas: void drawPatch(android.graphics.NinePatch,android.graphics.Rect,android.graphics.Paint)>
<android.graphics.Canvas: void drawPatch(android.graphics.NinePatch,android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)>
<android.graphics.Canvas: void drawPoint(float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>
<android.graphics.Canvas: void drawPoints(float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawRGB(int,int,int)>
<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>
<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawRenderNode(android.graphics.RenderNode)>
<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawTextRun(android.graphics.text.MeasuredText,int,int,int,int,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>
<android.graphics.Canvas: void enableZ()>
<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)>
<android.graphics.Canvas: android.graphics.Rect getClipBounds()>
<android.graphics.Canvas: int getDensity()>
<android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()>
<android.graphics.Canvas: int getHeight()>
<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)>
<android.graphics.Canvas: android.graphics.Matrix getMatrix()>
<android.graphics.Canvas: int getMaximumBitmapHeight()>
<android.graphics.Canvas: int getMaximumBitmapWidth()>
<android.graphics.Canvas: int getSaveCount()>
<android.graphics.Canvas: int getWidth()>
<android.graphics.Canvas: boolean isHardwareAccelerated()>
<android.graphics.Canvas: boolean isOpaque()>
<android.graphics.Canvas: boolean quickReject(android.graphics.RectF,android.graphics.Canvas$EdgeType)>
<android.graphics.Canvas: boolean quickReject(android.graphics.RectF)>
<android.graphics.Canvas: boolean quickReject(android.graphics.Path,android.graphics.Canvas$EdgeType)>
<android.graphics.Canvas: boolean quickReject(android.graphics.Path)>
<android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas$EdgeType)>
<android.graphics.Canvas: boolean quickReject(float,float,float,float)>
<android.graphics.Canvas: void restore()>
<android.graphics.Canvas: void restoreToCount(int)>
<android.graphics.Canvas: void rotate(float)>
<android.graphics.Canvas: void rotate(float,float,float)>
<android.graphics.Canvas: int save()>
<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)>
<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>
<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)>
<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int)>
<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>
<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int)>
<android.graphics.Canvas: void scale(float,float)>
<android.graphics.Canvas: void scale(float,float,float,float)>
<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>
<android.graphics.Canvas: void setDensity(int)>
<android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)>
<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)>
<android.graphics.Canvas: void skew(float,float)>
<android.graphics.Canvas: void translate(float,float)>
<android.graphics.Canvas: int ALL_SAVE_FLAG>
android.graphics.Canvas$EdgeType
<android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType AA>
<android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType BW>
android.graphics.Canvas$VertexMode
<android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode TRIANGLES>
<android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode TRIANGLE_FAN>
<android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode TRIANGLE_STRIP>
android.graphics.Color
<android.graphics.Color: void <init>()>
<android.graphics.Color: int HSVToColor(float[])>
<android.graphics.Color: int HSVToColor(int,float[])>
<android.graphics.Color: void RGBToHSV(int,int,int,float[])>
<android.graphics.Color: float alpha()>
<android.graphics.Color: float alpha(long)>
<android.graphics.Color: int alpha(int)>
<android.graphics.Color: int argb(int,int,int,int)>
<android.graphics.Color: int argb(float,float,float,float)>
<android.graphics.Color: float blue()>
<android.graphics.Color: float blue(long)>
<android.graphics.Color: int blue(int)>
<android.graphics.Color: android.graphics.ColorSpace colorSpace(long)>
<android.graphics.Color: void colorToHSV(int,float[])>
<android.graphics.Color: android.graphics.Color convert(android.graphics.ColorSpace)>
<android.graphics.Color: long convert(int,android.graphics.ColorSpace)>
<android.graphics.Color: long convert(long,android.graphics.ColorSpace)>
<android.graphics.Color: long convert(float,float,float,float,android.graphics.ColorSpace,android.graphics.ColorSpace)>
<android.graphics.Color: long convert(long,android.graphics.ColorSpace$Connector)>
<android.graphics.Color: long convert(float,float,float,float,android.graphics.ColorSpace$Connector)>
<android.graphics.Color: android.graphics.ColorSpace getColorSpace()>
<android.graphics.Color: float getComponent(int)>
<android.graphics.Color: int getComponentCount()>
<android.graphics.Color: float[] getComponents()>
<android.graphics.Color: float[] getComponents(float[])>
<android.graphics.Color: android.graphics.ColorSpace$Model getModel()>
<android.graphics.Color: float green()>
<android.graphics.Color: float green(long)>
<android.graphics.Color: int green(int)>
<android.graphics.Color: boolean isInColorSpace(long,android.graphics.ColorSpace)>
<android.graphics.Color: boolean isSrgb()>
<android.graphics.Color: boolean isSrgb(long)>
<android.graphics.Color: boolean isWideGamut()>
<android.graphics.Color: boolean isWideGamut(long)>
<android.graphics.Color: float luminance()>
<android.graphics.Color: float luminance(long)>
<android.graphics.Color: float luminance(int)>
<android.graphics.Color: long pack()>
<android.graphics.Color: long pack(int)>
<android.graphics.Color: long pack(float,float,float)>
<android.graphics.Color: long pack(float,float,float,float)>
<android.graphics.Color: long pack(float,float,float,float,android.graphics.ColorSpace)>
<android.graphics.Color: int parseColor(java.lang.String)>
<android.graphics.Color: float red()>
<android.graphics.Color: float red(long)>
<android.graphics.Color: int red(int)>
<android.graphics.Color: int rgb(int,int,int)>
<android.graphics.Color: int rgb(float,float,float)>
<android.graphics.Color: int toArgb()>
<android.graphics.Color: int toArgb(long)>
<android.graphics.Color: android.graphics.Color valueOf(int)>
<android.graphics.Color: android.graphics.Color valueOf(long)>
<android.graphics.Color: android.graphics.Color valueOf(float,float,float)>
<android.graphics.Color: android.graphics.Color valueOf(float,float,float,float)>
<android.graphics.Color: android.graphics.Color valueOf(float,float,float,float,android.graphics.ColorSpace)>
<android.graphics.Color: android.graphics.Color valueOf(float[],android.graphics.ColorSpace)>
<android.graphics.Color: int BLACK>
<android.graphics.Color: int BLUE>
<android.graphics.Color: int CYAN>
<android.graphics.Color: int DKGRAY>
<android.graphics.Color: int GRAY>
<android.graphics.Color: int GREEN>
<android.graphics.Color: int LTGRAY>
<android.graphics.Color: int MAGENTA>
<android.graphics.Color: int RED>
<android.graphics.Color: int TRANSPARENT>
<android.graphics.Color: int WHITE>
<android.graphics.Color: int YELLOW>
android.graphics.ColorFilter
<android.graphics.ColorFilter: void <init>()>
android.graphics.ColorMatrixColorFilter
<android.graphics.ColorMatrixColorFilter: void <init>(android.graphics.ColorMatrix)>
<android.graphics.ColorMatrixColorFilter: void <init>(float[])>
<android.graphics.ColorMatrixColorFilter: void getColorMatrix(android.graphics.ColorMatrix)>
android.graphics.ColorSpace
<android.graphics.ColorSpace: android.graphics.ColorSpace adapt(android.graphics.ColorSpace,float[])>
<android.graphics.ColorSpace: android.graphics.ColorSpace adapt(android.graphics.ColorSpace,float[],android.graphics.ColorSpace$Adaptation)>
<android.graphics.ColorSpace: float[] cctToXyz(int)>
<android.graphics.ColorSpace: float[] chromaticAdaptation(android.graphics.ColorSpace$Adaptation,float[],float[])>
<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace)>
<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace,android.graphics.ColorSpace$RenderIntent)>
<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace)>
<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace$RenderIntent)>
<android.graphics.ColorSpace: float[] fromXyz(float,float,float)>
<android.graphics.ColorSpace: float[] fromXyz(float[])>
<android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>
<android.graphics.ColorSpace: int getComponentCount()>
<android.graphics.ColorSpace: int getDataSpace()>
<android.graphics.ColorSpace: android.graphics.ColorSpace getFromDataSpace(int)>
<android.graphics.ColorSpace: int getId()>
<android.graphics.ColorSpace: float getMaxValue(int)>
<android.graphics.ColorSpace: float getMinValue(int)>
<android.graphics.ColorSpace: android.graphics.ColorSpace$Model getModel()>
<android.graphics.ColorSpace: java.lang.String getName()>
<android.graphics.ColorSpace: boolean isSrgb()>
<android.graphics.ColorSpace: boolean isWideGamut()>
<android.graphics.ColorSpace: android.graphics.ColorSpace match(float[],android.graphics.ColorSpace$Rgb$TransferParameters)>
<android.graphics.ColorSpace: float[] toXyz(float,float,float)>
<android.graphics.ColorSpace: float[] toXyz(float[])>
<android.graphics.ColorSpace: float[] ILLUMINANT_A>
<android.graphics.ColorSpace: float[] ILLUMINANT_B>
<android.graphics.ColorSpace: float[] ILLUMINANT_C>
<android.graphics.ColorSpace: float[] ILLUMINANT_D50>
<android.graphics.ColorSpace: float[] ILLUMINANT_D55>
<android.graphics.ColorSpace: float[] ILLUMINANT_D60>
<android.graphics.ColorSpace: float[] ILLUMINANT_D65>
<android.graphics.ColorSpace: float[] ILLUMINANT_D75>
<android.graphics.ColorSpace: float[] ILLUMINANT_E>
<android.graphics.ColorSpace: int MAX_ID>
<android.graphics.ColorSpace: int MIN_ID>
android.graphics.ColorSpace$Adaptation
<android.graphics.ColorSpace$Adaptation: android.graphics.ColorSpace$Adaptation BRADFORD>
<android.graphics.ColorSpace$Adaptation: android.graphics.ColorSpace$Adaptation CIECAT02>
<android.graphics.ColorSpace$Adaptation: android.graphics.ColorSpace$Adaptation VON_KRIES>
android.graphics.ColorSpace$Connector
<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace getDestination()>
<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace$RenderIntent getRenderIntent()>
<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace getSource()>
<android.graphics.ColorSpace$Connector: float[] transform(float,float,float)>
<android.graphics.ColorSpace$Connector: float[] transform(float[])>
android.graphics.ColorSpace$Model
<android.graphics.ColorSpace$Model: int getComponentCount()>
<android.graphics.ColorSpace$Model: android.graphics.ColorSpace$Model CMYK>
<android.graphics.ColorSpace$Model: android.graphics.ColorSpace$Model LAB>
<android.graphics.ColorSpace$Model: android.graphics.ColorSpace$Model RGB>
<android.graphics.ColorSpace$Model: android.graphics.ColorSpace$Model XYZ>
android.graphics.ColorSpace$Named
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named ACES>
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named ACESCG>
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named ADOBE_RGB>
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named BT2020>
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named BT709>
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named CIE_LAB>
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named CIE_XYZ>
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named DCI_P3>
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named DISPLAY_P3>
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named EXTENDED_SRGB>
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named LINEAR_EXTENDED_SRGB>
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named LINEAR_SRGB>
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named NTSC_1953>
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named PRO_PHOTO_RGB>
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named SMPTE_C>
<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named SRGB>
android.graphics.ColorSpace$RenderIntent
<android.graphics.ColorSpace$RenderIntent: android.graphics.ColorSpace$RenderIntent ABSOLUTE>
<android.graphics.ColorSpace$RenderIntent: android.graphics.ColorSpace$RenderIntent PERCEPTUAL>
<android.graphics.ColorSpace$RenderIntent: android.graphics.ColorSpace$RenderIntent RELATIVE>
<android.graphics.ColorSpace$RenderIntent: android.graphics.ColorSpace$RenderIntent SATURATION>
android.graphics.ColorSpace$Rgb
<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator)>
<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator,float,float)>
<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],android.graphics.ColorSpace$Rgb$TransferParameters)>
<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],android.graphics.ColorSpace$Rgb$TransferParameters)>
<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],double)>
<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],double)>
<android.graphics.ColorSpace$Rgb: float[] fromLinear(float,float,float)>
<android.graphics.ColorSpace$Rgb: float[] fromLinear(float[])>
<android.graphics.ColorSpace$Rgb: float[] fromXyz(float[])>
<android.graphics.ColorSpace$Rgb: java.util.function.DoubleUnaryOperator getEotf()>
<android.graphics.ColorSpace$Rgb: float[] getInverseTransform(float[])>
<android.graphics.ColorSpace$Rgb: float[] getInverseTransform()>
<android.graphics.ColorSpace$Rgb: float getMaxValue(int)>
<android.graphics.ColorSpace$Rgb: float getMinValue(int)>
<android.graphics.ColorSpace$Rgb: java.util.function.DoubleUnaryOperator getOetf()>
<android.graphics.ColorSpace$Rgb: float[] getPrimaries(float[])>
<android.graphics.ColorSpace$Rgb: float[] getPrimaries()>
<android.graphics.ColorSpace$Rgb: android.graphics.ColorSpace$Rgb$TransferParameters getTransferParameters()>
<android.graphics.ColorSpace$Rgb: float[] getTransform(float[])>
<android.graphics.ColorSpace$Rgb: float[] getTransform()>
<android.graphics.ColorSpace$Rgb: float[] getWhitePoint(float[])>
<android.graphics.ColorSpace$Rgb: float[] getWhitePoint()>
<android.graphics.ColorSpace$Rgb: boolean isWideGamut()>
<android.graphics.ColorSpace$Rgb: float[] toLinear(float,float,float)>
<android.graphics.ColorSpace$Rgb: float[] toLinear(float[])>
<android.graphics.ColorSpace$Rgb: float[] toXyz(float[])>
android.graphics.ColorSpace$Rgb$TransferParameters
<android.graphics.ColorSpace$Rgb$TransferParameters: void <init>(double,double,double,double,double)>
<android.graphics.ColorSpace$Rgb$TransferParameters: void <init>(double,double,double,double,double,double,double)>
<android.graphics.ColorSpace$Rgb$TransferParameters: double a>
<android.graphics.ColorSpace$Rgb$TransferParameters: double b>
<android.graphics.ColorSpace$Rgb$TransferParameters: double c>
<android.graphics.ColorSpace$Rgb$TransferParameters: double d>
<android.graphics.ColorSpace$Rgb$TransferParameters: double e>
<android.graphics.ColorSpace$Rgb$TransferParameters: double f>
<android.graphics.ColorSpace$Rgb$TransferParameters: double g>
android.graphics.ComposePathEffect
<android.graphics.ComposePathEffect: void <init>(android.graphics.PathEffect,android.graphics.PathEffect)>
android.graphics.ComposeShader
<android.graphics.ComposeShader: void <init>(android.graphics.Shader,android.graphics.Shader,android.graphics.Xfermode)>
<android.graphics.ComposeShader: void <init>(android.graphics.Shader,android.graphics.Shader,android.graphics.PorterDuff$Mode)>
<android.graphics.ComposeShader: void <init>(android.graphics.Shader,android.graphics.Shader,android.graphics.BlendMode)>
android.graphics.CornerPathEffect
<android.graphics.CornerPathEffect: void <init>(float)>
android.graphics.DashPathEffect
<android.graphics.DashPathEffect: void <init>(float[],float)>
android.graphics.DiscretePathEffect
<android.graphics.DiscretePathEffect: void <init>(float,float)>
android.graphics.DrawFilter
<android.graphics.DrawFilter: void <init>()>
android.graphics.EmbossMaskFilter
<android.graphics.EmbossMaskFilter: void <init>(float[],float,float,float)>
android.graphics.HardwareRenderer
<android.graphics.HardwareRenderer: void <init>()>
<android.graphics.HardwareRenderer: void clearContent()>
<android.graphics.HardwareRenderer: android.graphics.HardwareRenderer$FrameRenderRequest createRenderRequest()>
<android.graphics.HardwareRenderer: void destroy()>
<android.graphics.HardwareRenderer: boolean isDrawingEnabled()>
<android.graphics.HardwareRenderer: boolean isOpaque()>
<android.graphics.HardwareRenderer: void notifyFramePending()>
<android.graphics.HardwareRenderer: void setContentRoot(android.graphics.RenderNode)>
<android.graphics.HardwareRenderer: void setDrawingEnabled(boolean)>
<android.graphics.HardwareRenderer: void setLightSourceAlpha(float,float)>
<android.graphics.HardwareRenderer: void setLightSourceGeometry(float,float,float,float)>
<android.graphics.HardwareRenderer: void setName(java.lang.String)>
<android.graphics.HardwareRenderer: void setOpaque(boolean)>
<android.graphics.HardwareRenderer: void setSurface(android.view.Surface)>
<android.graphics.HardwareRenderer: void start()>
<android.graphics.HardwareRenderer: void stop()>
<android.graphics.HardwareRenderer: int SYNC_CONTEXT_IS_STOPPED>
<android.graphics.HardwareRenderer: int SYNC_FRAME_DROPPED>
<android.graphics.HardwareRenderer: int SYNC_LOST_SURFACE_REWARD_IF_FOUND>
<android.graphics.HardwareRenderer: int SYNC_OK>
<android.graphics.HardwareRenderer: int SYNC_REDRAW_REQUESTED>
android.graphics.HardwareRenderer$FrameRenderRequest
<android.graphics.HardwareRenderer$FrameRenderRequest: android.graphics.HardwareRenderer$FrameRenderRequest setFrameCommitCallback(java.util.concurrent.Executor,java.lang.Runnable)>
<android.graphics.HardwareRenderer$FrameRenderRequest: android.graphics.HardwareRenderer$FrameRenderRequest setVsyncTime(long)>
<android.graphics.HardwareRenderer$FrameRenderRequest: android.graphics.HardwareRenderer$FrameRenderRequest setWaitForPresent(boolean)>
<android.graphics.HardwareRenderer$FrameRenderRequest: int syncAndDraw()>
android.graphics.ImageDecoder
<android.graphics.ImageDecoder: void close()>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(android.content.res.Resources,int)>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(android.content.ContentResolver,android.net.Uri)>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(android.content.res.AssetManager,java.lang.String)>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(byte[],int,int)>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(byte[])>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(java.nio.ByteBuffer)>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(java.io.File)>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(java.util.concurrent.Callable)>
<android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>
<android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder$Source)>
<android.graphics.ImageDecoder: android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>
<android.graphics.ImageDecoder: android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder$Source)>
<android.graphics.ImageDecoder: int getAllocator()>
<android.graphics.ImageDecoder: android.graphics.Rect getCrop()>
<android.graphics.ImageDecoder: int getMemorySizePolicy()>
<android.graphics.ImageDecoder: android.graphics.ImageDecoder$OnPartialImageListener getOnPartialImageListener()>
<android.graphics.ImageDecoder: android.graphics.PostProcessor getPostProcessor()>
<android.graphics.ImageDecoder: boolean isDecodeAsAlphaMaskEnabled()>
<android.graphics.ImageDecoder: boolean isMimeTypeSupported(java.lang.String)>
<android.graphics.ImageDecoder: boolean isMutableRequired()>
<android.graphics.ImageDecoder: boolean isUnpremultipliedRequired()>
<android.graphics.ImageDecoder: void setAllocator(int)>
<android.graphics.ImageDecoder: void setCrop(android.graphics.Rect)>
<android.graphics.ImageDecoder: void setDecodeAsAlphaMaskEnabled(boolean)>
<android.graphics.ImageDecoder: void setMemorySizePolicy(int)>
<android.graphics.ImageDecoder: void setMutableRequired(boolean)>
<android.graphics.ImageDecoder: void setOnPartialImageListener(android.graphics.ImageDecoder$OnPartialImageListener)>
<android.graphics.ImageDecoder: void setPostProcessor(android.graphics.PostProcessor)>
<android.graphics.ImageDecoder: void setTargetColorSpace(android.graphics.ColorSpace)>
<android.graphics.ImageDecoder: void setTargetSampleSize(int)>
<android.graphics.ImageDecoder: void setTargetSize(int,int)>
<android.graphics.ImageDecoder: void setUnpremultipliedRequired(boolean)>
<android.graphics.ImageDecoder: int ALLOCATOR_DEFAULT>
<android.graphics.ImageDecoder: int ALLOCATOR_HARDWARE>
<android.graphics.ImageDecoder: int ALLOCATOR_SHARED_MEMORY>
<android.graphics.ImageDecoder: int ALLOCATOR_SOFTWARE>
<android.graphics.ImageDecoder: int MEMORY_POLICY_DEFAULT>
<android.graphics.ImageDecoder: int MEMORY_POLICY_LOW_RAM>
android.graphics.ImageDecoder$DecodeException
<android.graphics.ImageDecoder$DecodeException: int getError()>
<android.graphics.ImageDecoder$DecodeException: android.graphics.ImageDecoder$Source getSource()>
<android.graphics.ImageDecoder$DecodeException: int SOURCE_EXCEPTION>
<android.graphics.ImageDecoder$DecodeException: int SOURCE_INCOMPLETE>
<android.graphics.ImageDecoder$DecodeException: int SOURCE_MALFORMED_DATA>
android.graphics.ImageDecoder$ImageInfo
<android.graphics.ImageDecoder$ImageInfo: android.graphics.ColorSpace getColorSpace()>
<android.graphics.ImageDecoder$ImageInfo: java.lang.String getMimeType()>
<android.graphics.ImageDecoder$ImageInfo: android.util.Size getSize()>
<android.graphics.ImageDecoder$ImageInfo: boolean isAnimated()>
android.graphics.ImageDecoder$OnHeaderDecodedListener
<android.graphics.ImageDecoder$OnHeaderDecodedListener: void onHeaderDecoded(android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)>
android.graphics.ImageDecoder$OnPartialImageListener
<android.graphics.ImageDecoder$OnPartialImageListener: boolean onPartialImage(android.graphics.ImageDecoder$DecodeException)>
android.graphics.ImageDecoder$Source
android.graphics.ImageFormat
<android.graphics.ImageFormat: void <init>()>
<android.graphics.ImageFormat: int getBitsPerPixel(int)>
<android.graphics.ImageFormat: int DEPTH16>
<android.graphics.ImageFormat: int DEPTH_JPEG>
<android.graphics.ImageFormat: int DEPTH_POINT_CLOUD>
<android.graphics.ImageFormat: int FLEX_RGBA_8888>
<android.graphics.ImageFormat: int FLEX_RGB_888>
<android.graphics.ImageFormat: int HEIC>
<android.graphics.ImageFormat: int JPEG>
<android.graphics.ImageFormat: int NV16>
<android.graphics.ImageFormat: int NV21>
<android.graphics.ImageFormat: int PRIVATE>
<android.graphics.ImageFormat: int RAW10>
<android.graphics.ImageFormat: int RAW12>
<android.graphics.ImageFormat: int RAW_PRIVATE>
<android.graphics.ImageFormat: int RAW_SENSOR>
<android.graphics.ImageFormat: int RGB_565>
<android.graphics.ImageFormat: int UNKNOWN>
<android.graphics.ImageFormat: int Y8>
<android.graphics.ImageFormat: int YCBCR_P010>
<android.graphics.ImageFormat: int YUV_420_888>
<android.graphics.ImageFormat: int YUV_422_888>
<android.graphics.ImageFormat: int YUV_444_888>
<android.graphics.ImageFormat: int YUY2>
<android.graphics.ImageFormat: int YV12>
android.graphics.Insets
<android.graphics.Insets: android.graphics.Insets add(android.graphics.Insets,android.graphics.Insets)>
<android.graphics.Insets: int describeContents()>
<android.graphics.Insets: android.graphics.Insets max(android.graphics.Insets,android.graphics.Insets)>
<android.graphics.Insets: android.graphics.Insets min(android.graphics.Insets,android.graphics.Insets)>
<android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>
<android.graphics.Insets: android.graphics.Insets of(android.graphics.Rect)>
<android.graphics.Insets: android.graphics.Insets subtract(android.graphics.Insets,android.graphics.Insets)>
<android.graphics.Insets: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Insets: android.os.Parcelable$Creator CREATOR>
<android.graphics.Insets: android.graphics.Insets NONE>
<android.graphics.Insets: int bottom>
<android.graphics.Insets: int left>
<android.graphics.Insets: int right>
<android.graphics.Insets: int top>
android.graphics.Interpolator
<android.graphics.Interpolator: void <init>(int)>
<android.graphics.Interpolator: void <init>(int,int)>
<android.graphics.Interpolator: int getKeyFrameCount()>
<android.graphics.Interpolator: int getValueCount()>
<android.graphics.Interpolator: void reset(int)>
<android.graphics.Interpolator: void reset(int,int)>
<android.graphics.Interpolator: void setKeyFrame(int,int,float[])>
<android.graphics.Interpolator: void setKeyFrame(int,int,float[],float[])>
<android.graphics.Interpolator: void setRepeatMirror(float,boolean)>
<android.graphics.Interpolator: android.graphics.Interpolator$Result timeToValues(float[])>
<android.graphics.Interpolator: android.graphics.Interpolator$Result timeToValues(int,float[])>
android.graphics.Interpolator$Result
<android.graphics.Interpolator$Result: android.graphics.Interpolator$Result FREEZE_END>
<android.graphics.Interpolator$Result: android.graphics.Interpolator$Result FREEZE_START>
<android.graphics.Interpolator$Result: android.graphics.Interpolator$Result NORMAL>
android.graphics.LightingColorFilter
<android.graphics.LightingColorFilter: void <init>(int,int)>
<android.graphics.LightingColorFilter: int getColorAdd()>
<android.graphics.LightingColorFilter: int getColorMultiply()>
android.graphics.LinearGradient
<android.graphics.LinearGradient: void <init>(float,float,float,float,int[],float[],android.graphics.Shader$TileMode)>
<android.graphics.LinearGradient: void <init>(float,float,float,float,long[],float[],android.graphics.Shader$TileMode)>
<android.graphics.LinearGradient: void <init>(float,float,float,float,int,int,android.graphics.Shader$TileMode)>
<android.graphics.LinearGradient: void <init>(float,float,float,float,long,long,android.graphics.Shader$TileMode)>
android.graphics.MaskFilter
<android.graphics.MaskFilter: void <init>()>
android.graphics.Matrix
<android.graphics.Matrix: void <init>()>
<android.graphics.Matrix: void <init>(android.graphics.Matrix)>
<android.graphics.Matrix: void dump(java.io.PrintWriter)>
<android.graphics.Matrix: void getValues(float[])>
<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>
<android.graphics.Matrix: boolean isAffine()>
<android.graphics.Matrix: boolean isIdentity()>
<android.graphics.Matrix: void mapPoints(float[],int,float[],int,int)>
<android.graphics.Matrix: void mapPoints(float[],float[])>
<android.graphics.Matrix: void mapPoints(float[])>
<android.graphics.Matrix: float mapRadius(float)>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>
<android.graphics.Matrix: void mapVectors(float[],int,float[],int,int)>
<android.graphics.Matrix: void mapVectors(float[],float[])>
<android.graphics.Matrix: void mapVectors(float[])>
<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>
<android.graphics.Matrix: boolean postRotate(float,float,float)>
<android.graphics.Matrix: boolean postRotate(float)>
<android.graphics.Matrix: boolean postScale(float,float,float,float)>
<android.graphics.Matrix: boolean postScale(float,float)>
<android.graphics.Matrix: boolean postSkew(float,float,float,float)>
<android.graphics.Matrix: boolean postSkew(float,float)>
<android.graphics.Matrix: boolean postTranslate(float,float)>
<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>
<android.graphics.Matrix: boolean preRotate(float,float,float)>
<android.graphics.Matrix: boolean preRotate(float)>
<android.graphics.Matrix: boolean preScale(float,float,float,float)>
<android.graphics.Matrix: boolean preScale(float,float)>
<android.graphics.Matrix: boolean preSkew(float,float,float,float)>
<android.graphics.Matrix: boolean preSkew(float,float)>
<android.graphics.Matrix: boolean preTranslate(float,float)>
<android.graphics.Matrix: boolean rectStaysRect()>
<android.graphics.Matrix: void reset()>
<android.graphics.Matrix: void set(android.graphics.Matrix)>
<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)>
<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)>
<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>
<android.graphics.Matrix: void setRotate(float,float,float)>
<android.graphics.Matrix: void setRotate(float)>
<android.graphics.Matrix: void setScale(float,float,float,float)>
<android.graphics.Matrix: void setScale(float,float)>
<android.graphics.Matrix: void setSinCos(float,float,float,float)>
<android.graphics.Matrix: void setSinCos(float,float)>
<android.graphics.Matrix: void setSkew(float,float,float,float)>
<android.graphics.Matrix: void setSkew(float,float)>
<android.graphics.Matrix: void setTranslate(float,float)>
<android.graphics.Matrix: void setValues(float[])>
<android.graphics.Matrix: java.lang.String toShortString()>
<android.graphics.Matrix: android.graphics.Matrix IDENTITY_MATRIX>
<android.graphics.Matrix: int MPERSP_0>
<android.graphics.Matrix: int MPERSP_1>
<android.graphics.Matrix: int MPERSP_2>
<android.graphics.Matrix: int MSCALE_X>
<android.graphics.Matrix: int MSCALE_Y>
<android.graphics.Matrix: int MSKEW_X>
<android.graphics.Matrix: int MSKEW_Y>
<android.graphics.Matrix: int MTRANS_X>
<android.graphics.Matrix: int MTRANS_Y>
android.graphics.Matrix$ScaleToFit
<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit CENTER>
<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit END>
<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit FILL>
<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit START>
android.graphics.Movie
<android.graphics.Movie: android.graphics.Movie decodeByteArray(byte[],int,int)>
<android.graphics.Movie: android.graphics.Movie decodeFile(java.lang.String)>
<android.graphics.Movie: android.graphics.Movie decodeStream(java.io.InputStream)>
<android.graphics.Movie: void draw(android.graphics.Canvas,float,float,android.graphics.Paint)>
<android.graphics.Movie: void draw(android.graphics.Canvas,float,float)>
<android.graphics.Movie: int duration()>
<android.graphics.Movie: int height()>
<android.graphics.Movie: boolean isOpaque()>
<android.graphics.Movie: boolean setTime(int)>
<android.graphics.Movie: int width()>
android.graphics.NinePatch
<android.graphics.NinePatch: void <init>(android.graphics.Bitmap,byte[])>
<android.graphics.NinePatch: void <init>(android.graphics.Bitmap,byte[],java.lang.String)>
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.RectF)>
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect)>
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect,android.graphics.Paint)>
<android.graphics.NinePatch: android.graphics.Bitmap getBitmap()>
<android.graphics.NinePatch: int getDensity()>
<android.graphics.NinePatch: int getHeight()>
<android.graphics.NinePatch: java.lang.String getName()>
<android.graphics.NinePatch: android.graphics.Paint getPaint()>
<android.graphics.NinePatch: android.graphics.Region getTransparentRegion(android.graphics.Rect)>
<android.graphics.NinePatch: int getWidth()>
<android.graphics.NinePatch: boolean hasAlpha()>
<android.graphics.NinePatch: boolean isNinePatchChunk(byte[])>
<android.graphics.NinePatch: void setPaint(android.graphics.Paint)>
android.graphics.Outline
<android.graphics.Outline: void <init>()>
<android.graphics.Outline: void <init>(android.graphics.Outline)>
<android.graphics.Outline: boolean canClip()>
<android.graphics.Outline: float getAlpha()>
<android.graphics.Outline: float getRadius()>
<android.graphics.Outline: boolean getRect(android.graphics.Rect)>
<android.graphics.Outline: boolean isEmpty()>
<android.graphics.Outline: void offset(int,int)>
<android.graphics.Outline: void set(android.graphics.Outline)>
<android.graphics.Outline: void setAlpha(float)>
<android.graphics.Outline: void setConvexPath(android.graphics.Path)>
<android.graphics.Outline: void setEmpty()>
<android.graphics.Outline: void setOval(int,int,int,int)>
<android.graphics.Outline: void setOval(android.graphics.Rect)>
<android.graphics.Outline: void setPath(android.graphics.Path)>
<android.graphics.Outline: void setRect(int,int,int,int)>
<android.graphics.Outline: void setRect(android.graphics.Rect)>
<android.graphics.Outline: void setRoundRect(int,int,int,int,float)>
<android.graphics.Outline: void setRoundRect(android.graphics.Rect,float)>
android.graphics.Paint
<android.graphics.Paint: void <init>()>
<android.graphics.Paint: void <init>(int)>
<android.graphics.Paint: void <init>(android.graphics.Paint)>
<android.graphics.Paint: float ascent()>
<android.graphics.Paint: int breakText(char[],int,int,float,float[])>
<android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])>
<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])>
<android.graphics.Paint: void clearShadowLayer()>
<android.graphics.Paint: float descent()>
<android.graphics.Paint: boolean equalsForTextMeasurement(android.graphics.Paint)>
<android.graphics.Paint: int getAlpha()>
<android.graphics.Paint: android.graphics.BlendMode getBlendMode()>
<android.graphics.Paint: int getColor()>
<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>
<android.graphics.Paint: long getColorLong()>
<android.graphics.Paint: int getEndHyphenEdit()>
<android.graphics.Paint: boolean getFillPath(android.graphics.Path,android.graphics.Path)>
<android.graphics.Paint: int getFlags()>
<android.graphics.Paint: java.lang.String getFontFeatureSettings()>
<android.graphics.Paint: float getFontMetrics(android.graphics.Paint$FontMetrics)>
<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()>
<android.graphics.Paint: void getFontMetricsInt(java.lang.CharSequence,int,int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>
<android.graphics.Paint: void getFontMetricsInt(char[],int,int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>
<android.graphics.Paint: int getFontMetricsInt(android.graphics.Paint$FontMetricsInt)>
<android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()>
<android.graphics.Paint: float getFontSpacing()>
<android.graphics.Paint: java.lang.String getFontVariationSettings()>
<android.graphics.Paint: int getHinting()>
<android.graphics.Paint: float getLetterSpacing()>
<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()>
<android.graphics.Paint: int getOffsetForAdvance(char[],int,int,int,int,boolean,float)>
<android.graphics.Paint: int getOffsetForAdvance(java.lang.CharSequence,int,int,int,int,boolean,float)>
<android.graphics.Paint: android.graphics.PathEffect getPathEffect()>
<android.graphics.Paint: float getRunAdvance(char[],int,int,int,int,boolean,int)>
<android.graphics.Paint: float getRunAdvance(java.lang.CharSequence,int,int,int,int,boolean,int)>
<android.graphics.Paint: android.graphics.Shader getShader()>
<android.graphics.Paint: int getShadowLayerColor()>
<android.graphics.Paint: long getShadowLayerColorLong()>
<android.graphics.Paint: float getShadowLayerDx()>
<android.graphics.Paint: float getShadowLayerDy()>
<android.graphics.Paint: float getShadowLayerRadius()>
<android.graphics.Paint: int getStartHyphenEdit()>
<android.graphics.Paint: float getStrikeThruPosition()>
<android.graphics.Paint: float getStrikeThruThickness()>
<android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()>
<android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()>
<android.graphics.Paint: float getStrokeMiter()>
<android.graphics.Paint: float getStrokeWidth()>
<android.graphics.Paint: android.graphics.Paint$Style getStyle()>
<android.graphics.Paint: android.graphics.Paint$Align getTextAlign()>
<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)>
<android.graphics.Paint: void getTextBounds(java.lang.CharSequence,int,int,android.graphics.Rect)>
<android.graphics.Paint: void getTextBounds(char[],int,int,android.graphics.Rect)>
<android.graphics.Paint: java.util.Locale getTextLocale()>
<android.graphics.Paint: android.os.LocaleList getTextLocales()>
<android.graphics.Paint: void getTextPath(char[],int,int,float,float,android.graphics.Path)>
<android.graphics.Paint: void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)>
<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,boolean,float[],int)>
<android.graphics.Paint: int getTextRunCursor(char[],int,int,boolean,int,int)>
<android.graphics.Paint: int getTextRunCursor(java.lang.CharSequence,int,int,boolean,int,int)>
<android.graphics.Paint: float getTextScaleX()>
<android.graphics.Paint: float getTextSize()>
<android.graphics.Paint: float getTextSkewX()>
<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>
<android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])>
<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>
<android.graphics.Paint: int getTextWidths(java.lang.String,float[])>
<android.graphics.Paint: android.graphics.Typeface getTypeface()>
<android.graphics.Paint: float getUnderlinePosition()>
<android.graphics.Paint: float getUnderlineThickness()>
<android.graphics.Paint: float getWordSpacing()>
<android.graphics.Paint: android.graphics.Xfermode getXfermode()>
<android.graphics.Paint: boolean hasGlyph(java.lang.String)>
<android.graphics.Paint: boolean isAntiAlias()>
<android.graphics.Paint: boolean isDither()>
<android.graphics.Paint: boolean isElegantTextHeight()>
<android.graphics.Paint: boolean isFakeBoldText()>
<android.graphics.Paint: boolean isFilterBitmap()>
<android.graphics.Paint: boolean isLinearText()>
<android.graphics.Paint: boolean isStrikeThruText()>
<android.graphics.Paint: boolean isSubpixelText()>
<android.graphics.Paint: boolean isUnderlineText()>
<android.graphics.Paint: float measureText(char[],int,int)>
<android.graphics.Paint: float measureText(java.lang.String,int,int)>
<android.graphics.Paint: float measureText(java.lang.String)>
<android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)>
<android.graphics.Paint: void reset()>
<android.graphics.Paint: void set(android.graphics.Paint)>
<android.graphics.Paint: void setARGB(int,int,int,int)>
<android.graphics.Paint: void setAlpha(int)>
<android.graphics.Paint: void setAntiAlias(boolean)>
<android.graphics.Paint: void setBlendMode(android.graphics.BlendMode)>
<android.graphics.Paint: void setColor(int)>
<android.graphics.Paint: void setColor(long)>
<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>
<android.graphics.Paint: void setDither(boolean)>
<android.graphics.Paint: void setElegantTextHeight(boolean)>
<android.graphics.Paint: void setEndHyphenEdit(int)>
<android.graphics.Paint: void setFakeBoldText(boolean)>
<android.graphics.Paint: void setFilterBitmap(boolean)>
<android.graphics.Paint: void setFlags(int)>
<android.graphics.Paint: void setFontFeatureSettings(java.lang.String)>
<android.graphics.Paint: boolean setFontVariationSettings(java.lang.String)>
<android.graphics.Paint: void setHinting(int)>
<android.graphics.Paint: void setLetterSpacing(float)>
<android.graphics.Paint: void setLinearText(boolean)>
<android.graphics.Paint: android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)>
<android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)>
<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>
<android.graphics.Paint: void setShadowLayer(float,float,float,long)>
<android.graphics.Paint: void setStartHyphenEdit(int)>
<android.graphics.Paint: void setStrikeThruText(boolean)>
<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>
<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>
<android.graphics.Paint: void setStrokeMiter(float)>
<android.graphics.Paint: void setStrokeWidth(float)>
<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>
<android.graphics.Paint: void setSubpixelText(boolean)>
<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)>
<android.graphics.Paint: void setTextLocale(java.util.Locale)>
<android.graphics.Paint: void setTextLocales(android.os.LocaleList)>
<android.graphics.Paint: void setTextScaleX(float)>
<android.graphics.Paint: void setTextSize(float)>
<android.graphics.Paint: void setTextSkewX(float)>
<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>
<android.graphics.Paint: void setUnderlineText(boolean)>
<android.graphics.Paint: void setWordSpacing(float)>
<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>
<android.graphics.Paint: int ANTI_ALIAS_FLAG>
<android.graphics.Paint: int CURSOR_AFTER>
<android.graphics.Paint: int CURSOR_AT>
<android.graphics.Paint: int CURSOR_AT_OR_AFTER>
<android.graphics.Paint: int CURSOR_AT_OR_BEFORE>
<android.graphics.Paint: int CURSOR_BEFORE>
<android.graphics.Paint: int DEV_KERN_TEXT_FLAG>
<android.graphics.Paint: int DITHER_FLAG>
<android.graphics.Paint: int EMBEDDED_BITMAP_TEXT_FLAG>
<android.graphics.Paint: int END_HYPHEN_EDIT_INSERT_ARMENIAN_HYPHEN>
<android.graphics.Paint: int END_HYPHEN_EDIT_INSERT_HYPHEN>
<android.graphics.Paint: int END_HYPHEN_EDIT_INSERT_MAQAF>
<android.graphics.Paint: int END_HYPHEN_EDIT_INSERT_UCAS_HYPHEN>
<android.graphics.Paint: int END_HYPHEN_EDIT_INSERT_ZWJ_AND_HYPHEN>
<android.graphics.Paint: int END_HYPHEN_EDIT_NO_EDIT>
<android.graphics.Paint: int END_HYPHEN_EDIT_REPLACE_WITH_HYPHEN>
<android.graphics.Paint: int FAKE_BOLD_TEXT_FLAG>
<android.graphics.Paint: int FILTER_BITMAP_FLAG>
<android.graphics.Paint: int HINTING_OFF>
<android.graphics.Paint: int HINTING_ON>
<android.graphics.Paint: int LINEAR_TEXT_FLAG>
<android.graphics.Paint: int START_HYPHEN_EDIT_INSERT_HYPHEN>
<android.graphics.Paint: int START_HYPHEN_EDIT_INSERT_ZWJ>
<android.graphics.Paint: int START_HYPHEN_EDIT_NO_EDIT>
<android.graphics.Paint: int STRIKE_THRU_TEXT_FLAG>
<android.graphics.Paint: int SUBPIXEL_TEXT_FLAG>
<android.graphics.Paint: int UNDERLINE_TEXT_FLAG>
android.graphics.Paint$Align
<android.graphics.Paint$Align: android.graphics.Paint$Align CENTER>
<android.graphics.Paint$Align: android.graphics.Paint$Align LEFT>
<android.graphics.Paint$Align: android.graphics.Paint$Align RIGHT>
android.graphics.Paint$Cap
<android.graphics.Paint$Cap: android.graphics.Paint$Cap BUTT>
<android.graphics.Paint$Cap: android.graphics.Paint$Cap ROUND>
<android.graphics.Paint$Cap: android.graphics.Paint$Cap SQUARE>
android.graphics.Paint$FontMetrics
<android.graphics.Paint$FontMetrics: void <init>()>
<android.graphics.Paint$FontMetrics: float ascent>
<android.graphics.Paint$FontMetrics: float bottom>
<android.graphics.Paint$FontMetrics: float descent>
<android.graphics.Paint$FontMetrics: float leading>
<android.graphics.Paint$FontMetrics: float top>
android.graphics.Paint$FontMetricsInt
<android.graphics.Paint$FontMetricsInt: void <init>()>
<android.graphics.Paint$FontMetricsInt: int ascent>
<android.graphics.Paint$FontMetricsInt: int bottom>
<android.graphics.Paint$FontMetricsInt: int descent>
<android.graphics.Paint$FontMetricsInt: int leading>
<android.graphics.Paint$FontMetricsInt: int top>
android.graphics.Paint$Join
<android.graphics.Paint$Join: android.graphics.Paint$Join BEVEL>
<android.graphics.Paint$Join: android.graphics.Paint$Join MITER>
<android.graphics.Paint$Join: android.graphics.Paint$Join ROUND>
android.graphics.Paint$Style
<android.graphics.Paint$Style: android.graphics.Paint$Style FILL>
<android.graphics.Paint$Style: android.graphics.Paint$Style FILL_AND_STROKE>
<android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>
android.graphics.PaintFlagsDrawFilter
<android.graphics.PaintFlagsDrawFilter: void <init>(int,int)>
android.graphics.ParcelableColorSpace
<android.graphics.ParcelableColorSpace: void <init>(android.graphics.ColorSpace)>
<android.graphics.ParcelableColorSpace: int describeContents()>
<android.graphics.ParcelableColorSpace: android.graphics.ColorSpace getColorSpace()>
<android.graphics.ParcelableColorSpace: boolean isParcelable(android.graphics.ColorSpace)>
<android.graphics.ParcelableColorSpace: void writeToParcel(android.os.Parcel,int)>
<android.graphics.ParcelableColorSpace: android.os.Parcelable$Creator CREATOR>
android.graphics.Path
<android.graphics.Path: void <init>()>
<android.graphics.Path: void <init>(android.graphics.Path)>
<android.graphics.Path: void addArc(android.graphics.RectF,float,float)>
<android.graphics.Path: void addArc(float,float,float,float,float,float)>
<android.graphics.Path: void addCircle(float,float,float,android.graphics.Path$Direction)>
<android.graphics.Path: void addOval(android.graphics.RectF,android.graphics.Path$Direction)>
<android.graphics.Path: void addOval(float,float,float,float,android.graphics.Path$Direction)>
<android.graphics.Path: void addPath(android.graphics.Path,float,float)>
<android.graphics.Path: void addPath(android.graphics.Path)>
<android.graphics.Path: void addPath(android.graphics.Path,android.graphics.Matrix)>
<android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path$Direction)>
<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float,float,android.graphics.Path$Direction)>
<android.graphics.Path: void addRoundRect(float,float,float,float,float,float,android.graphics.Path$Direction)>
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float[],android.graphics.Path$Direction)>
<android.graphics.Path: void addRoundRect(float,float,float,float,float[],android.graphics.Path$Direction)>
<android.graphics.Path: float[] approximate(float)>
<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)>
<android.graphics.Path: void arcTo(android.graphics.RectF,float,float)>
<android.graphics.Path: void arcTo(float,float,float,float,float,float,boolean)>
<android.graphics.Path: void close()>
<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>
<android.graphics.Path: void cubicTo(float,float,float,float,float,float)>
<android.graphics.Path: android.graphics.Path$FillType getFillType()>
<android.graphics.Path: void incReserve(int)>
<android.graphics.Path: boolean isConvex()>
<android.graphics.Path: boolean isEmpty()>
<android.graphics.Path: boolean isInverseFillType()>
<android.graphics.Path: boolean isRect(android.graphics.RectF)>
<android.graphics.Path: void lineTo(float,float)>
<android.graphics.Path: void moveTo(float,float)>
<android.graphics.Path: void offset(float,float,android.graphics.Path)>
<android.graphics.Path: void offset(float,float)>
<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path$Op)>
<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path,android.graphics.Path$Op)>
<android.graphics.Path: void quadTo(float,float,float,float)>
<android.graphics.Path: void rCubicTo(float,float,float,float,float,float)>
<android.graphics.Path: void rLineTo(float,float)>
<android.graphics.Path: void rMoveTo(float,float)>
<android.graphics.Path: void rQuadTo(float,float,float,float)>
<android.graphics.Path: void reset()>
<android.graphics.Path: void rewind()>
<android.graphics.Path: void set(android.graphics.Path)>
<android.graphics.Path: void setFillType(android.graphics.Path$FillType)>
<android.graphics.Path: void setLastPoint(float,float)>
<android.graphics.Path: void toggleInverseFillType()>
<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)>
<android.graphics.Path: void transform(android.graphics.Matrix)>
android.graphics.Path$Direction
<android.graphics.Path$Direction: android.graphics.Path$Direction CCW>
<android.graphics.Path$Direction: android.graphics.Path$Direction CW>
android.graphics.Path$FillType
<android.graphics.Path$FillType: android.graphics.Path$FillType EVEN_ODD>
<android.graphics.Path$FillType: android.graphics.Path$FillType INVERSE_EVEN_ODD>
<android.graphics.Path$FillType: android.graphics.Path$FillType INVERSE_WINDING>
<android.graphics.Path$FillType: android.graphics.Path$FillType WINDING>
android.graphics.Path$Op
<android.graphics.Path$Op: android.graphics.Path$Op DIFFERENCE>
<android.graphics.Path$Op: android.graphics.Path$Op INTERSECT>
<android.graphics.Path$Op: android.graphics.Path$Op REVERSE_DIFFERENCE>
<android.graphics.Path$Op: android.graphics.Path$Op UNION>
<android.graphics.Path$Op: android.graphics.Path$Op XOR>
android.graphics.PathDashPathEffect
<android.graphics.PathDashPathEffect: void <init>(android.graphics.Path,float,float,android.graphics.PathDashPathEffect$Style)>
android.graphics.PathDashPathEffect$Style
<android.graphics.PathDashPathEffect$Style: android.graphics.PathDashPathEffect$Style MORPH>
<android.graphics.PathDashPathEffect$Style: android.graphics.PathDashPathEffect$Style ROTATE>
<android.graphics.PathDashPathEffect$Style: android.graphics.PathDashPathEffect$Style TRANSLATE>
android.graphics.PathEffect
<android.graphics.PathEffect: void <init>()>
android.graphics.PathMeasure
<android.graphics.PathMeasure: void <init>()>
<android.graphics.PathMeasure: void <init>(android.graphics.Path,boolean)>
<android.graphics.PathMeasure: float getLength()>
<android.graphics.PathMeasure: boolean getMatrix(float,android.graphics.Matrix,int)>
<android.graphics.PathMeasure: boolean getPosTan(float,float[],float[])>
<android.graphics.PathMeasure: boolean getSegment(float,float,android.graphics.Path,boolean)>
<android.graphics.PathMeasure: boolean isClosed()>
<android.graphics.PathMeasure: boolean nextContour()>
<android.graphics.PathMeasure: void setPath(android.graphics.Path,boolean)>
<android.graphics.PathMeasure: int POSITION_MATRIX_FLAG>
<android.graphics.PathMeasure: int TANGENT_MATRIX_FLAG>
android.graphics.Picture
<android.graphics.Picture: void <init>()>
<android.graphics.Picture: void <init>(android.graphics.Picture)>
<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)>
<android.graphics.Picture: void draw(android.graphics.Canvas)>
<android.graphics.Picture: void endRecording()>
<android.graphics.Picture: int getHeight()>
<android.graphics.Picture: int getWidth()>
<android.graphics.Picture: boolean requiresHardwareAcceleration()>
android.graphics.PixelFormat
<android.graphics.PixelFormat: void <init>()>
<android.graphics.PixelFormat: boolean formatHasAlpha(int)>
<android.graphics.PixelFormat: void getPixelFormatInfo(int,android.graphics.PixelFormat)>
<android.graphics.PixelFormat: int A_8>
<android.graphics.PixelFormat: int JPEG>
<android.graphics.PixelFormat: int LA_88>
<android.graphics.PixelFormat: int L_8>
<android.graphics.PixelFormat: int OPAQUE>
<android.graphics.PixelFormat: int RGBA_1010102>
<android.graphics.PixelFormat: int RGBA_4444>
<android.graphics.PixelFormat: int RGBA_5551>
<android.graphics.PixelFormat: int RGBA_8888>
<android.graphics.PixelFormat: int RGBA_F16>
<android.graphics.PixelFormat: int RGBX_8888>
<android.graphics.PixelFormat: int RGB_332>
<android.graphics.PixelFormat: int RGB_565>
<android.graphics.PixelFormat: int RGB_888>
<android.graphics.PixelFormat: int TRANSLUCENT>
<android.graphics.PixelFormat: int TRANSPARENT>
<android.graphics.PixelFormat: int UNKNOWN>
<android.graphics.PixelFormat: int YCbCr_420_SP>
<android.graphics.PixelFormat: int YCbCr_422_I>
<android.graphics.PixelFormat: int YCbCr_422_SP>
<android.graphics.PixelFormat: int bitsPerPixel>
<android.graphics.PixelFormat: int bytesPerPixel>
android.graphics.Point
<android.graphics.Point: void <init>()>
<android.graphics.Point: void <init>(int,int)>
<android.graphics.Point: void <init>(android.graphics.Point)>
<android.graphics.Point: int describeContents()>
<android.graphics.Point: boolean equals(int,int)>
<android.graphics.Point: void negate()>
<android.graphics.Point: void offset(int,int)>
<android.graphics.Point: void readFromParcel(android.os.Parcel)>
<android.graphics.Point: void set(int,int)>
<android.graphics.Point: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Point: android.os.Parcelable$Creator CREATOR>
<android.graphics.Point: int x>
<android.graphics.Point: int y>
android.graphics.PointF
<android.graphics.PointF: void <init>()>
<android.graphics.PointF: void <init>(float,float)>
<android.graphics.PointF: void <init>(android.graphics.Point)>
<android.graphics.PointF: void <init>(android.graphics.PointF)>
<android.graphics.PointF: int describeContents()>
<android.graphics.PointF: boolean equals(float,float)>
<android.graphics.PointF: float length()>
<android.graphics.PointF: float length(float,float)>
<android.graphics.PointF: void negate()>
<android.graphics.PointF: void offset(float,float)>
<android.graphics.PointF: void readFromParcel(android.os.Parcel)>
<android.graphics.PointF: void set(float,float)>
<android.graphics.PointF: void set(android.graphics.PointF)>
<android.graphics.PointF: void writeToParcel(android.os.Parcel,int)>
<android.graphics.PointF: android.os.Parcelable$Creator CREATOR>
<android.graphics.PointF: float x>
<android.graphics.PointF: float y>
android.graphics.PorterDuff
<android.graphics.PorterDuff: void <init>()>
android.graphics.PorterDuff$Mode
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode ADD>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode CLEAR>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode DARKEN>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode DST>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode DST_ATOP>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode DST_IN>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode DST_OUT>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode DST_OVER>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode LIGHTEN>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode MULTIPLY>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode OVERLAY>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SCREEN>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_ATOP>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_OUT>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_OVER>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode XOR>
android.graphics.PorterDuffColorFilter
<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)>
android.graphics.PorterDuffXfermode
<android.graphics.PorterDuffXfermode: void <init>(android.graphics.PorterDuff$Mode)>
android.graphics.PostProcessor
<android.graphics.PostProcessor: int onPostProcess(android.graphics.Canvas)>
android.graphics.RadialGradient
<android.graphics.RadialGradient: void <init>(float,float,float,int[],float[],android.graphics.Shader$TileMode)>
<android.graphics.RadialGradient: void <init>(float,float,float,long[],float[],android.graphics.Shader$TileMode)>
<android.graphics.RadialGradient: void <init>(float,float,float,float,float,float,long[],float[],android.graphics.Shader$TileMode)>
<android.graphics.RadialGradient: void <init>(float,float,float,int,int,android.graphics.Shader$TileMode)>
<android.graphics.RadialGradient: void <init>(float,float,float,long,long,android.graphics.Shader$TileMode)>
android.graphics.RecordingCanvas
android.graphics.Rect
<android.graphics.Rect: void <init>()>
<android.graphics.Rect: void <init>(int,int,int,int)>
<android.graphics.Rect: void <init>(android.graphics.Rect)>
<android.graphics.Rect: int centerX()>
<android.graphics.Rect: int centerY()>
<android.graphics.Rect: boolean contains(int,int)>
<android.graphics.Rect: boolean contains(int,int,int,int)>
<android.graphics.Rect: boolean contains(android.graphics.Rect)>
<android.graphics.Rect: int describeContents()>
<android.graphics.Rect: float exactCenterX()>
<android.graphics.Rect: float exactCenterY()>
<android.graphics.Rect: java.lang.String flattenToString()>
<android.graphics.Rect: int height()>
<android.graphics.Rect: void inset(int,int)>
<android.graphics.Rect: void inset(android.graphics.Insets)>
<android.graphics.Rect: void inset(int,int,int,int)>
<android.graphics.Rect: boolean intersect(int,int,int,int)>
<android.graphics.Rect: boolean intersect(android.graphics.Rect)>
<android.graphics.Rect: boolean intersects(int,int,int,int)>
<android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>
<android.graphics.Rect: boolean isEmpty()>
<android.graphics.Rect: void offset(int,int)>
<android.graphics.Rect: void offsetTo(int,int)>
<android.graphics.Rect: void readFromParcel(android.os.Parcel)>
<android.graphics.Rect: void set(int,int,int,int)>
<android.graphics.Rect: void set(android.graphics.Rect)>
<android.graphics.Rect: void setEmpty()>
<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)>
<android.graphics.Rect: void sort()>
<android.graphics.Rect: java.lang.String toShortString()>
<android.graphics.Rect: android.graphics.Rect unflattenFromString(java.lang.String)>
<android.graphics.Rect: void union(int,int,int,int)>
<android.graphics.Rect: void union(android.graphics.Rect)>
<android.graphics.Rect: void union(int,int)>
<android.graphics.Rect: int width()>
<android.graphics.Rect: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Rect: android.os.Parcelable$Creator CREATOR>
<android.graphics.Rect: int bottom>
<android.graphics.Rect: int left>
<android.graphics.Rect: int right>
<android.graphics.Rect: int top>
android.graphics.RectF
<android.graphics.RectF: void <init>()>
<android.graphics.RectF: void <init>(float,float,float,float)>
<android.graphics.RectF: void <init>(android.graphics.RectF)>
<android.graphics.RectF: void <init>(android.graphics.Rect)>
<android.graphics.RectF: float centerX()>
<android.graphics.RectF: float centerY()>
<android.graphics.RectF: boolean contains(float,float)>
<android.graphics.RectF: boolean contains(float,float,float,float)>
<android.graphics.RectF: boolean contains(android.graphics.RectF)>
<android.graphics.RectF: int describeContents()>
<android.graphics.RectF: float height()>
<android.graphics.RectF: void inset(float,float)>
<android.graphics.RectF: boolean intersect(float,float,float,float)>
<android.graphics.RectF: boolean intersect(android.graphics.RectF)>
<android.graphics.RectF: boolean intersects(float,float,float,float)>
<android.graphics.RectF: boolean intersects(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.RectF: boolean isEmpty()>
<android.graphics.RectF: void offset(float,float)>
<android.graphics.RectF: void offsetTo(float,float)>
<android.graphics.RectF: void readFromParcel(android.os.Parcel)>
<android.graphics.RectF: void round(android.graphics.Rect)>
<android.graphics.RectF: void roundOut(android.graphics.Rect)>
<android.graphics.RectF: void set(float,float,float,float)>
<android.graphics.RectF: void set(android.graphics.RectF)>
<android.graphics.RectF: void set(android.graphics.Rect)>
<android.graphics.RectF: void setEmpty()>
<android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.RectF: void sort()>
<android.graphics.RectF: java.lang.String toShortString()>
<android.graphics.RectF: void union(float,float,float,float)>
<android.graphics.RectF: void union(android.graphics.RectF)>
<android.graphics.RectF: void union(float,float)>
<android.graphics.RectF: float width()>
<android.graphics.RectF: void writeToParcel(android.os.Parcel,int)>
<android.graphics.RectF: android.os.Parcelable$Creator CREATOR>
<android.graphics.RectF: float bottom>
<android.graphics.RectF: float left>
<android.graphics.RectF: float right>
<android.graphics.RectF: float top>
android.graphics.Region
<android.graphics.Region: void <init>()>
<android.graphics.Region: void <init>(android.graphics.Region)>
<android.graphics.Region: void <init>(android.graphics.Rect)>
<android.graphics.Region: void <init>(int,int,int,int)>
<android.graphics.Region: boolean contains(int,int)>
<android.graphics.Region: int describeContents()>
<android.graphics.Region: android.graphics.Path getBoundaryPath()>
<android.graphics.Region: boolean getBoundaryPath(android.graphics.Path)>
<android.graphics.Region: android.graphics.Rect getBounds()>
<android.graphics.Region: boolean getBounds(android.graphics.Rect)>
<android.graphics.Region: boolean isComplex()>
<android.graphics.Region: boolean isEmpty()>
<android.graphics.Region: boolean isRect()>
<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>
<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>
<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>
<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)>
<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)>
<android.graphics.Region: boolean quickContains(android.graphics.Rect)>
<android.graphics.Region: boolean quickContains(int,int,int,int)>
<android.graphics.Region: boolean quickReject(android.graphics.Rect)>
<android.graphics.Region: boolean quickReject(int,int,int,int)>
<android.graphics.Region: boolean quickReject(android.graphics.Region)>
<android.graphics.Region: boolean set(android.graphics.Region)>
<android.graphics.Region: boolean set(android.graphics.Rect)>
<android.graphics.Region: boolean set(int,int,int,int)>
<android.graphics.Region: void setEmpty()>
<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)>
<android.graphics.Region: void translate(int,int)>
<android.graphics.Region: void translate(int,int,android.graphics.Region)>
<android.graphics.Region: boolean union(android.graphics.Rect)>
<android.graphics.Region: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Region: android.os.Parcelable$Creator CREATOR>
android.graphics.Region$Op
<android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>
<android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>
<android.graphics.Region$Op: android.graphics.Region$Op REPLACE>
<android.graphics.Region$Op: android.graphics.Region$Op REVERSE_DIFFERENCE>
<android.graphics.Region$Op: android.graphics.Region$Op UNION>
<android.graphics.Region$Op: android.graphics.Region$Op XOR>
android.graphics.RegionIterator
<android.graphics.RegionIterator: void <init>(android.graphics.Region)>
<android.graphics.RegionIterator: boolean next(android.graphics.Rect)>
android.graphics.RenderEffect
<android.graphics.RenderEffect: android.graphics.RenderEffect createBitmapEffect(android.graphics.Bitmap)>
<android.graphics.RenderEffect: android.graphics.RenderEffect createBitmapEffect(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect)>
<android.graphics.RenderEffect: android.graphics.RenderEffect createBlendModeEffect(android.graphics.RenderEffect,android.graphics.RenderEffect,android.graphics.BlendMode)>
<android.graphics.RenderEffect: android.graphics.RenderEffect createBlurEffect(float,float,android.graphics.RenderEffect,android.graphics.Shader$TileMode)>
<android.graphics.RenderEffect: android.graphics.RenderEffect createBlurEffect(float,float,android.graphics.Shader$TileMode)>
<android.graphics.RenderEffect: android.graphics.RenderEffect createChainEffect(android.graphics.RenderEffect,android.graphics.RenderEffect)>
<android.graphics.RenderEffect: android.graphics.RenderEffect createColorFilterEffect(android.graphics.ColorFilter,android.graphics.RenderEffect)>
<android.graphics.RenderEffect: android.graphics.RenderEffect createColorFilterEffect(android.graphics.ColorFilter)>
<android.graphics.RenderEffect: android.graphics.RenderEffect createOffsetEffect(float,float)>
<android.graphics.RenderEffect: android.graphics.RenderEffect createOffsetEffect(float,float,android.graphics.RenderEffect)>
<android.graphics.RenderEffect: android.graphics.RenderEffect createRuntimeShaderEffect(android.graphics.RuntimeShader,java.lang.String)>
<android.graphics.RenderEffect: android.graphics.RenderEffect createShaderEffect(android.graphics.Shader)>
android.graphics.RenderNode
<android.graphics.RenderNode: void <init>(java.lang.String)>
<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording(int,int)>
<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording()>
<android.graphics.RenderNode: long computeApproximateMemoryUsage()>
<android.graphics.RenderNode: void discardDisplayList()>
<android.graphics.RenderNode: void endRecording()>
<android.graphics.RenderNode: float getAlpha()>
<android.graphics.RenderNode: int getAmbientShadowColor()>
<android.graphics.RenderNode: int getBottom()>
<android.graphics.RenderNode: float getCameraDistance()>
<android.graphics.RenderNode: boolean getClipToBounds()>
<android.graphics.RenderNode: boolean getClipToOutline()>
<android.graphics.RenderNode: float getElevation()>
<android.graphics.RenderNode: int getHeight()>
<android.graphics.RenderNode: void getInverseMatrix(android.graphics.Matrix)>
<android.graphics.RenderNode: int getLeft()>
<android.graphics.RenderNode: void getMatrix(android.graphics.Matrix)>
<android.graphics.RenderNode: float getPivotX()>
<android.graphics.RenderNode: float getPivotY()>
<android.graphics.RenderNode: int getRight()>
<android.graphics.RenderNode: float getRotationX()>
<android.graphics.RenderNode: float getRotationY()>
<android.graphics.RenderNode: float getRotationZ()>
<android.graphics.RenderNode: float getScaleX()>
<android.graphics.RenderNode: float getScaleY()>
<android.graphics.RenderNode: int getSpotShadowColor()>
<android.graphics.RenderNode: int getTop()>
<android.graphics.RenderNode: float getTranslationX()>
<android.graphics.RenderNode: float getTranslationY()>
<android.graphics.RenderNode: float getTranslationZ()>
<android.graphics.RenderNode: long getUniqueId()>
<android.graphics.RenderNode: boolean getUseCompositingLayer()>
<android.graphics.RenderNode: int getWidth()>
<android.graphics.RenderNode: boolean hasDisplayList()>
<android.graphics.RenderNode: boolean hasIdentityMatrix()>
<android.graphics.RenderNode: boolean hasOverlappingRendering()>
<android.graphics.RenderNode: boolean hasShadow()>
<android.graphics.RenderNode: boolean isForceDarkAllowed()>
<android.graphics.RenderNode: boolean isPivotExplicitlySet()>
<android.graphics.RenderNode: boolean offsetLeftAndRight(int)>
<android.graphics.RenderNode: boolean offsetTopAndBottom(int)>
<android.graphics.RenderNode: boolean resetPivot()>
<android.graphics.RenderNode: boolean setAlpha(float)>
<android.graphics.RenderNode: boolean setAmbientShadowColor(int)>
<android.graphics.RenderNode: boolean setCameraDistance(float)>
<android.graphics.RenderNode: boolean setClipRect(android.graphics.Rect)>
<android.graphics.RenderNode: boolean setClipToBounds(boolean)>
<android.graphics.RenderNode: boolean setClipToOutline(boolean)>
<android.graphics.RenderNode: boolean setElevation(float)>
<android.graphics.RenderNode: boolean setForceDarkAllowed(boolean)>
<android.graphics.RenderNode: boolean setHasOverlappingRendering(boolean)>
<android.graphics.RenderNode: boolean setOutline(android.graphics.Outline)>
<android.graphics.RenderNode: boolean setPivotX(float)>
<android.graphics.RenderNode: boolean setPivotY(float)>
<android.graphics.RenderNode: boolean setPosition(int,int,int,int)>
<android.graphics.RenderNode: boolean setPosition(android.graphics.Rect)>
<android.graphics.RenderNode: boolean setProjectBackwards(boolean)>
<android.graphics.RenderNode: boolean setProjectionReceiver(boolean)>
<android.graphics.RenderNode: boolean setRenderEffect(android.graphics.RenderEffect)>
<android.graphics.RenderNode: boolean setRotationX(float)>
<android.graphics.RenderNode: boolean setRotationY(float)>
<android.graphics.RenderNode: boolean setRotationZ(float)>
<android.graphics.RenderNode: boolean setScaleX(float)>
<android.graphics.RenderNode: boolean setScaleY(float)>
<android.graphics.RenderNode: boolean setSpotShadowColor(int)>
<android.graphics.RenderNode: boolean setTranslationX(float)>
<android.graphics.RenderNode: boolean setTranslationY(float)>
<android.graphics.RenderNode: boolean setTranslationZ(float)>
<android.graphics.RenderNode: boolean setUseCompositingLayer(boolean,android.graphics.Paint)>
android.graphics.RuntimeShader
<android.graphics.RuntimeShader: void <init>(java.lang.String)>
<android.graphics.RuntimeShader: void setColorUniform(java.lang.String,int)>
<android.graphics.RuntimeShader: void setColorUniform(java.lang.String,long)>
<android.graphics.RuntimeShader: void setColorUniform(java.lang.String,android.graphics.Color)>
<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float)>
<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float,float)>
<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float,float,float)>
<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float,float,float,float)>
<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float[])>
<android.graphics.RuntimeShader: void setInputBuffer(java.lang.String,android.graphics.BitmapShader)>
<android.graphics.RuntimeShader: void setInputShader(java.lang.String,android.graphics.Shader)>
<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int)>
<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int,int)>
<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int,int,int)>
<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int,int,int,int)>
<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int[])>
android.graphics.Shader
<android.graphics.Shader: void <init>()>
<android.graphics.Shader: boolean getLocalMatrix(android.graphics.Matrix)>
<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>
android.graphics.Shader$TileMode
<android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>
<android.graphics.Shader$TileMode: android.graphics.Shader$TileMode DECAL>
<android.graphics.Shader$TileMode: android.graphics.Shader$TileMode MIRROR>
<android.graphics.Shader$TileMode: android.graphics.Shader$TileMode REPEAT>
android.graphics.SumPathEffect
<android.graphics.SumPathEffect: void <init>(android.graphics.PathEffect,android.graphics.PathEffect)>
android.graphics.SurfaceTexture
<android.graphics.SurfaceTexture: void <init>(int)>
<android.graphics.SurfaceTexture: void <init>(int,boolean)>
<android.graphics.SurfaceTexture: void <init>(boolean)>
<android.graphics.SurfaceTexture: void attachToGLContext(int)>
<android.graphics.SurfaceTexture: void detachFromGLContext()>
<android.graphics.SurfaceTexture: int getDataSpace()>
<android.graphics.SurfaceTexture: long getTimestamp()>
<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>
<android.graphics.SurfaceTexture: boolean isReleased()>
<android.graphics.SurfaceTexture: void release()>
<android.graphics.SurfaceTexture: void releaseTexImage()>
<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>
<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>
<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener,android.os.Handler)>
<android.graphics.SurfaceTexture: void updateTexImage()>
android.graphics.SurfaceTexture$OnFrameAvailableListener
<android.graphics.SurfaceTexture$OnFrameAvailableListener: void onFrameAvailable(android.graphics.SurfaceTexture)>
android.graphics.SurfaceTexture$OutOfResourcesException
<android.graphics.SurfaceTexture$OutOfResourcesException: void <init>()>
<android.graphics.SurfaceTexture$OutOfResourcesException: void <init>(java.lang.String)>
android.graphics.SweepGradient
<android.graphics.SweepGradient: void <init>(float,float,int[],float[])>
<android.graphics.SweepGradient: void <init>(float,float,long[],float[])>
<android.graphics.SweepGradient: void <init>(float,float,int,int)>
<android.graphics.SweepGradient: void <init>(float,float,long,long)>
android.graphics.Typeface
<android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>
<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)>
<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int,boolean)>
<android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)>
<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.io.File)>
<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>
<android.graphics.Typeface: android.graphics.Typeface defaultFromStyle(int)>
<android.graphics.Typeface: int getStyle()>
<android.graphics.Typeface: int getWeight()>
<android.graphics.Typeface: boolean isBold()>
<android.graphics.Typeface: boolean isItalic()>
<android.graphics.Typeface: int BOLD>
<android.graphics.Typeface: int BOLD_ITALIC>
<android.graphics.Typeface: android.graphics.Typeface DEFAULT>
<android.graphics.Typeface: android.graphics.Typeface DEFAULT_BOLD>
<android.graphics.Typeface: int ITALIC>
<android.graphics.Typeface: android.graphics.Typeface MONOSPACE>
<android.graphics.Typeface: int NORMAL>
<android.graphics.Typeface: android.graphics.Typeface SANS_SERIF>
<android.graphics.Typeface: android.graphics.Typeface SERIF>
android.graphics.Typeface$Builder
<android.graphics.Typeface$Builder: void <init>(java.io.File)>
<android.graphics.Typeface$Builder: void <init>(java.io.FileDescriptor)>
<android.graphics.Typeface$Builder: void <init>(java.lang.String)>
<android.graphics.Typeface$Builder: void <init>(android.content.res.AssetManager,java.lang.String)>
<android.graphics.Typeface$Builder: android.graphics.Typeface build()>
<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setFallback(java.lang.String)>
<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setFontVariationSettings(java.lang.String)>
<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>
<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setItalic(boolean)>
<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setTtcIndex(int)>
<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setWeight(int)>
android.graphics.Typeface$CustomFallbackBuilder
<android.graphics.Typeface$CustomFallbackBuilder: void <init>(android.graphics.fonts.FontFamily)>
<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder addCustomFallback(android.graphics.fonts.FontFamily)>
<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface build()>
<android.graphics.Typeface$CustomFallbackBuilder: int getMaxCustomFallbackCount()>
<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)>
<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder setSystemFallback(java.lang.String)>
android.graphics.Xfermode
<android.graphics.Xfermode: void <init>()>
android.graphics.YuvImage
<android.graphics.YuvImage: void <init>(byte[],int,int,int,int[])>
<android.graphics.YuvImage: boolean compressToJpeg(android.graphics.Rect,int,java.io.OutputStream)>
<android.graphics.YuvImage: int getHeight()>
<android.graphics.YuvImage: int[] getStrides()>
<android.graphics.YuvImage: int getWidth()>
<android.graphics.YuvImage: byte[] getYuvData()>
<android.graphics.YuvImage: int getYuvFormat()>
android.graphics.drawable.AdaptiveIconDrawable
<android.graphics.drawable.AdaptiveIconDrawable: void <init>(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.graphics.drawable.AdaptiveIconDrawable: void <init>(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.graphics.drawable.AdaptiveIconDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.Drawable getBackground()>
<android.graphics.drawable.AdaptiveIconDrawable: float getExtraInsetFraction()>
<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.Drawable getForeground()>
<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path getIconMask()>
<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.Drawable getMonochrome()>
<android.graphics.drawable.AdaptiveIconDrawable: int getOpacity()>
<android.graphics.drawable.AdaptiveIconDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.AdaptiveIconDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.graphics.drawable.AdaptiveIconDrawable: void setAlpha(int)>
<android.graphics.drawable.AdaptiveIconDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.AdaptiveIconDrawable: void setDither(boolean)>
<android.graphics.drawable.AdaptiveIconDrawable: void setOpacity(int)>
<android.graphics.drawable.AdaptiveIconDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
android.graphics.drawable.Animatable
<android.graphics.drawable.Animatable: boolean isRunning()>
<android.graphics.drawable.Animatable: void start()>
<android.graphics.drawable.Animatable: void stop()>
android.graphics.drawable.Animatable2
<android.graphics.drawable.Animatable2: void clearAnimationCallbacks()>
<android.graphics.drawable.Animatable2: void registerAnimationCallback(android.graphics.drawable.Animatable2$AnimationCallback)>
<android.graphics.drawable.Animatable2: boolean unregisterAnimationCallback(android.graphics.drawable.Animatable2$AnimationCallback)>
android.graphics.drawable.Animatable2$AnimationCallback
<android.graphics.drawable.Animatable2$AnimationCallback: void <init>()>
<android.graphics.drawable.Animatable2$AnimationCallback: void onAnimationEnd(android.graphics.drawable.Drawable)>
<android.graphics.drawable.Animatable2$AnimationCallback: void onAnimationStart(android.graphics.drawable.Drawable)>
android.graphics.drawable.AnimatedImageDrawable
<android.graphics.drawable.AnimatedImageDrawable: void <init>()>
<android.graphics.drawable.AnimatedImageDrawable: void clearAnimationCallbacks()>
<android.graphics.drawable.AnimatedImageDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.AnimatedImageDrawable: int getOpacity()>
<android.graphics.drawable.AnimatedImageDrawable: int getRepeatCount()>
<android.graphics.drawable.AnimatedImageDrawable: boolean isAutoMirrored()>
<android.graphics.drawable.AnimatedImageDrawable: boolean isRunning()>
<android.graphics.drawable.AnimatedImageDrawable: void registerAnimationCallback(android.graphics.drawable.Animatable2$AnimationCallback)>
<android.graphics.drawable.AnimatedImageDrawable: void setAlpha(int)>
<android.graphics.drawable.AnimatedImageDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.AnimatedImageDrawable: void setRepeatCount(int)>
<android.graphics.drawable.AnimatedImageDrawable: void start()>
<android.graphics.drawable.AnimatedImageDrawable: void stop()>
<android.graphics.drawable.AnimatedImageDrawable: boolean unregisterAnimationCallback(android.graphics.drawable.Animatable2$AnimationCallback)>
<android.graphics.drawable.AnimatedImageDrawable: int REPEAT_INFINITE>
android.graphics.drawable.AnimatedStateListDrawable
<android.graphics.drawable.AnimatedStateListDrawable: void <init>()>
<android.graphics.drawable.AnimatedStateListDrawable: void addState(int[],android.graphics.drawable.Drawable,int)>
<android.graphics.drawable.AnimatedStateListDrawable: void addTransition(int,int,android.graphics.drawable.Drawable,boolean)>
android.graphics.drawable.AnimatedVectorDrawable
<android.graphics.drawable.AnimatedVectorDrawable: void <init>()>
<android.graphics.drawable.AnimatedVectorDrawable: void clearAnimationCallbacks()>
<android.graphics.drawable.AnimatedVectorDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.AnimatedVectorDrawable: int getOpacity()>
<android.graphics.drawable.AnimatedVectorDrawable: boolean isRunning()>
<android.graphics.drawable.AnimatedVectorDrawable: void registerAnimationCallback(android.graphics.drawable.Animatable2$AnimationCallback)>
<android.graphics.drawable.AnimatedVectorDrawable: void reset()>
<android.graphics.drawable.AnimatedVectorDrawable: void setAlpha(int)>
<android.graphics.drawable.AnimatedVectorDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.AnimatedVectorDrawable: void start()>
<android.graphics.drawable.AnimatedVectorDrawable: void stop()>
<android.graphics.drawable.AnimatedVectorDrawable: boolean unregisterAnimationCallback(android.graphics.drawable.Animatable2$AnimationCallback)>
android.graphics.drawable.AnimationDrawable
<android.graphics.drawable.AnimationDrawable: void <init>()>
<android.graphics.drawable.AnimationDrawable: void addFrame(android.graphics.drawable.Drawable,int)>
<android.graphics.drawable.AnimationDrawable: int getDuration(int)>
<android.graphics.drawable.AnimationDrawable: android.graphics.drawable.Drawable getFrame(int)>
<android.graphics.drawable.AnimationDrawable: int getNumberOfFrames()>
<android.graphics.drawable.AnimationDrawable: boolean isOneShot()>
<android.graphics.drawable.AnimationDrawable: boolean isRunning()>
<android.graphics.drawable.AnimationDrawable: void run()>
<android.graphics.drawable.AnimationDrawable: void setOneShot(boolean)>
<android.graphics.drawable.AnimationDrawable: void start()>
<android.graphics.drawable.AnimationDrawable: void stop()>
android.graphics.drawable.BitmapDrawable
<android.graphics.drawable.BitmapDrawable: void <init>()>
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources)>
<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.Bitmap)>
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>
<android.graphics.drawable.BitmapDrawable: void <init>(java.lang.String)>
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.lang.String)>
<android.graphics.drawable.BitmapDrawable: void <init>(java.io.InputStream)>
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.io.InputStream)>
<android.graphics.drawable.BitmapDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>
<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.graphics.drawable.BitmapDrawable: int getGravity()>
<android.graphics.drawable.BitmapDrawable: int getOpacity()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Paint getPaint()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeX()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeY()>
<android.graphics.drawable.BitmapDrawable: boolean hasAntiAlias()>
<android.graphics.drawable.BitmapDrawable: boolean hasMipMap()>
<android.graphics.drawable.BitmapDrawable: boolean isAutoMirrored()>
<android.graphics.drawable.BitmapDrawable: void setAlpha(int)>
<android.graphics.drawable.BitmapDrawable: void setAntiAlias(boolean)>
<android.graphics.drawable.BitmapDrawable: void setBitmap(android.graphics.Bitmap)>
<android.graphics.drawable.BitmapDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.BitmapDrawable: void setDither(boolean)>
<android.graphics.drawable.BitmapDrawable: void setGravity(int)>
<android.graphics.drawable.BitmapDrawable: void setMipMap(boolean)>
<android.graphics.drawable.BitmapDrawable: void setTargetDensity(android.graphics.Canvas)>
<android.graphics.drawable.BitmapDrawable: void setTargetDensity(android.util.DisplayMetrics)>
<android.graphics.drawable.BitmapDrawable: void setTargetDensity(int)>
<android.graphics.drawable.BitmapDrawable: void setTileModeX(android.graphics.Shader$TileMode)>
<android.graphics.drawable.BitmapDrawable: void setTileModeXY(android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>
<android.graphics.drawable.BitmapDrawable: void setTileModeY(android.graphics.Shader$TileMode)>
android.graphics.drawable.ClipDrawable
<android.graphics.drawable.ClipDrawable: void <init>(android.graphics.drawable.Drawable,int,int)>
<android.graphics.drawable.ClipDrawable: int HORIZONTAL>
<android.graphics.drawable.ClipDrawable: int VERTICAL>
android.graphics.drawable.ColorDrawable
<android.graphics.drawable.ColorDrawable: void <init>()>
<android.graphics.drawable.ColorDrawable: void <init>(int)>
<android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.ColorDrawable: int getColor()>
<android.graphics.drawable.ColorDrawable: int getOpacity()>
<android.graphics.drawable.ColorDrawable: void setAlpha(int)>
<android.graphics.drawable.ColorDrawable: void setColor(int)>
<android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)>
android.graphics.drawable.ColorStateListDrawable
<android.graphics.drawable.ColorStateListDrawable: void <init>()>
<android.graphics.drawable.ColorStateListDrawable: void <init>(android.content.res.ColorStateList)>
<android.graphics.drawable.ColorStateListDrawable: void clearAlpha()>
<android.graphics.drawable.ColorStateListDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.ColorStateListDrawable: android.content.res.ColorStateList getColorStateList()>
<android.graphics.drawable.ColorStateListDrawable: int getOpacity()>
<android.graphics.drawable.ColorStateListDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.ColorStateListDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.graphics.drawable.ColorStateListDrawable: void setAlpha(int)>
<android.graphics.drawable.ColorStateListDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.ColorStateListDrawable: void setColorStateList(android.content.res.ColorStateList)>
<android.graphics.drawable.ColorStateListDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
android.graphics.drawable.Drawable
<android.graphics.drawable.Drawable: void <init>()>
<android.graphics.drawable.Drawable: void applyTheme(android.content.res.Resources$Theme)>
<android.graphics.drawable.Drawable: boolean canApplyTheme()>
<android.graphics.drawable.Drawable: void clearColorFilter()>
<android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)>
<android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromPath(java.lang.String)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>
<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.Drawable: int getAlpha()>
<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>
<android.graphics.drawable.Drawable: int getChangingConfigurations()>
<android.graphics.drawable.Drawable: android.graphics.ColorFilter getColorFilter()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>
<android.graphics.drawable.Drawable: android.graphics.Rect getDirtyBounds()>
<android.graphics.drawable.Drawable: void getHotspotBounds(android.graphics.Rect)>
<android.graphics.drawable.Drawable: int getIntrinsicHeight()>
<android.graphics.drawable.Drawable: int getIntrinsicWidth()>
<android.graphics.drawable.Drawable: int getLayoutDirection()>
<android.graphics.drawable.Drawable: int getLevel()>
<android.graphics.drawable.Drawable: int getMinimumHeight()>
<android.graphics.drawable.Drawable: int getMinimumWidth()>
<android.graphics.drawable.Drawable: int getOpacity()>
<android.graphics.drawable.Drawable: android.graphics.Insets getOpticalInsets()>
<android.graphics.drawable.Drawable: void getOutline(android.graphics.Outline)>
<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>
<android.graphics.drawable.Drawable: int[] getState()>
<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>
<android.graphics.drawable.Drawable: boolean hasFocusStateSpecified()>
<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>
<android.graphics.drawable.Drawable: void invalidateSelf()>
<android.graphics.drawable.Drawable: boolean isAutoMirrored()>
<android.graphics.drawable.Drawable: boolean isFilterBitmap()>
<android.graphics.drawable.Drawable: boolean isProjected()>
<android.graphics.drawable.Drawable: boolean isStateful()>
<android.graphics.drawable.Drawable: boolean isVisible()>
<android.graphics.drawable.Drawable: void jumpToCurrentState()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>
<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)>
<android.graphics.drawable.Drawable: boolean onLayoutDirectionChanged(int)>
<android.graphics.drawable.Drawable: boolean onLevelChange(int)>
<android.graphics.drawable.Drawable: boolean onStateChange(int[])>
<android.graphics.drawable.Drawable: int resolveOpacity(int,int)>
<android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)>
<android.graphics.drawable.Drawable: void setAlpha(int)>
<android.graphics.drawable.Drawable: void setAutoMirrored(boolean)>
<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>
<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>
<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>
<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>
<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff$Mode)>
<android.graphics.drawable.Drawable: void setDither(boolean)>
<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>
<android.graphics.drawable.Drawable: void setHotspot(float,float)>
<android.graphics.drawable.Drawable: void setHotspotBounds(int,int,int,int)>
<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>
<android.graphics.drawable.Drawable: boolean setLevel(int)>
<android.graphics.drawable.Drawable: boolean setState(int[])>
<android.graphics.drawable.Drawable: void setTint(int)>
<android.graphics.drawable.Drawable: void setTintBlendMode(android.graphics.BlendMode)>
<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>
<android.graphics.drawable.Drawable: void setTintMode(android.graphics.PorterDuff$Mode)>
<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>
<android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)>
android.graphics.drawable.Drawable$Callback
<android.graphics.drawable.Drawable$Callback: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.Drawable$Callback: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.graphics.drawable.Drawable$Callback: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
android.graphics.drawable.Drawable$ConstantState
<android.graphics.drawable.Drawable$ConstantState: void <init>()>
<android.graphics.drawable.Drawable$ConstantState: boolean canApplyTheme()>
<android.graphics.drawable.Drawable$ConstantState: int getChangingConfigurations()>
<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable()>
<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>
<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources,android.content.res.Resources$Theme)>
android.graphics.drawable.DrawableContainer
<android.graphics.drawable.DrawableContainer: void <init>()>
<android.graphics.drawable.DrawableContainer: void draw(android.graphics.Canvas)>
<android.graphics.drawable.DrawableContainer: int getOpacity()>
<android.graphics.drawable.DrawableContainer: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.DrawableContainer: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.graphics.drawable.DrawableContainer: boolean selectDrawable(int)>
<android.graphics.drawable.DrawableContainer: void setAlpha(int)>
<android.graphics.drawable.DrawableContainer: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.DrawableContainer: void setConstantState(android.graphics.drawable.DrawableContainer$DrawableContainerState)>
<android.graphics.drawable.DrawableContainer: void setDither(boolean)>
<android.graphics.drawable.DrawableContainer: void setEnterFadeDuration(int)>
<android.graphics.drawable.DrawableContainer: void setExitFadeDuration(int)>
<android.graphics.drawable.DrawableContainer: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
android.graphics.drawable.DrawableContainer$DrawableContainerState
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int addChild(android.graphics.drawable.Drawable)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean canConstantState()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void computeConstantSize()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getChangingConfigurations()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable getChild(int)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getChildCount()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable[] getChildren()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantHeight()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantMinimumHeight()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantMinimumWidth()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.Rect getConstantPadding()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantWidth()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getEnterFadeDuration()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getExitFadeDuration()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getOpacity()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void growArray(int,int)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean isConstantSize()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean isStateful()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setConstantSize(boolean)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setEnterFadeDuration(int)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setExitFadeDuration(int)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setVariablePadding(boolean)>
android.graphics.drawable.DrawableWrapper
<android.graphics.drawable.DrawableWrapper: void <init>(android.graphics.drawable.Drawable)>
<android.graphics.drawable.DrawableWrapper: void draw(android.graphics.Canvas)>
<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable getDrawable()>
<android.graphics.drawable.DrawableWrapper: int getOpacity()>
<android.graphics.drawable.DrawableWrapper: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.DrawableWrapper: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.graphics.drawable.DrawableWrapper: void setAlpha(int)>
<android.graphics.drawable.DrawableWrapper: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.DrawableWrapper: void setDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.DrawableWrapper: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
android.graphics.drawable.GradientDrawable
<android.graphics.drawable.GradientDrawable: void <init>()>
<android.graphics.drawable.GradientDrawable: void <init>(android.graphics.drawable.GradientDrawable$Orientation,int[])>
<android.graphics.drawable.GradientDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.GradientDrawable: android.content.res.ColorStateList getColor()>
<android.graphics.drawable.GradientDrawable: int[] getColors()>
<android.graphics.drawable.GradientDrawable: float[] getCornerRadii()>
<android.graphics.drawable.GradientDrawable: float getCornerRadius()>
<android.graphics.drawable.GradientDrawable: float getGradientCenterX()>
<android.graphics.drawable.GradientDrawable: float getGradientCenterY()>
<android.graphics.drawable.GradientDrawable: float getGradientRadius()>
<android.graphics.drawable.GradientDrawable: int getGradientType()>
<android.graphics.drawable.GradientDrawable: int getInnerRadius()>
<android.graphics.drawable.GradientDrawable: float getInnerRadiusRatio()>
<android.graphics.drawable.GradientDrawable: int getOpacity()>
<android.graphics.drawable.GradientDrawable: android.graphics.drawable.GradientDrawable$Orientation getOrientation()>
<android.graphics.drawable.GradientDrawable: int getShape()>
<android.graphics.drawable.GradientDrawable: int getThickness()>
<android.graphics.drawable.GradientDrawable: float getThicknessRatio()>
<android.graphics.drawable.GradientDrawable: boolean getUseLevel()>
<android.graphics.drawable.GradientDrawable: void setAlpha(int)>
<android.graphics.drawable.GradientDrawable: void setColor(int)>
<android.graphics.drawable.GradientDrawable: void setColor(android.content.res.ColorStateList)>
<android.graphics.drawable.GradientDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.GradientDrawable: void setColors(int[])>
<android.graphics.drawable.GradientDrawable: void setColors(int[],float[])>
<android.graphics.drawable.GradientDrawable: void setCornerRadii(float[])>
<android.graphics.drawable.GradientDrawable: void setCornerRadius(float)>
<android.graphics.drawable.GradientDrawable: void setDither(boolean)>
<android.graphics.drawable.GradientDrawable: void setGradientCenter(float,float)>
<android.graphics.drawable.GradientDrawable: void setGradientRadius(float)>
<android.graphics.drawable.GradientDrawable: void setGradientType(int)>
<android.graphics.drawable.GradientDrawable: void setInnerRadius(int)>
<android.graphics.drawable.GradientDrawable: void setInnerRadiusRatio(float)>
<android.graphics.drawable.GradientDrawable: void setOrientation(android.graphics.drawable.GradientDrawable$Orientation)>
<android.graphics.drawable.GradientDrawable: void setPadding(int,int,int,int)>
<android.graphics.drawable.GradientDrawable: void setShape(int)>
<android.graphics.drawable.GradientDrawable: void setSize(int,int)>
<android.graphics.drawable.GradientDrawable: void setStroke(int,int)>
<android.graphics.drawable.GradientDrawable: void setStroke(int,android.content.res.ColorStateList)>
<android.graphics.drawable.GradientDrawable: void setStroke(int,int,float,float)>
<android.graphics.drawable.GradientDrawable: void setStroke(int,android.content.res.ColorStateList,float,float)>
<android.graphics.drawable.GradientDrawable: void setThickness(int)>
<android.graphics.drawable.GradientDrawable: void setThicknessRatio(float)>
<android.graphics.drawable.GradientDrawable: void setUseLevel(boolean)>
<android.graphics.drawable.GradientDrawable: int LINE>
<android.graphics.drawable.GradientDrawable: int LINEAR_GRADIENT>
<android.graphics.drawable.GradientDrawable: int OVAL>
<android.graphics.drawable.GradientDrawable: int RADIAL_GRADIENT>
<android.graphics.drawable.GradientDrawable: int RECTANGLE>
<android.graphics.drawable.GradientDrawable: int RING>
<android.graphics.drawable.GradientDrawable: int SWEEP_GRADIENT>
android.graphics.drawable.GradientDrawable$Orientation
<android.graphics.drawable.GradientDrawable$Orientation: android.graphics.drawable.GradientDrawable$Orientation BL_TR>
<android.graphics.drawable.GradientDrawable$Orientation: android.graphics.drawable.GradientDrawable$Orientation BOTTOM_TOP>
<android.graphics.drawable.GradientDrawable$Orientation: android.graphics.drawable.GradientDrawable$Orientation BR_TL>
<android.graphics.drawable.GradientDrawable$Orientation: android.graphics.drawable.GradientDrawable$Orientation LEFT_RIGHT>
<android.graphics.drawable.GradientDrawable$Orientation: android.graphics.drawable.GradientDrawable$Orientation RIGHT_LEFT>
<android.graphics.drawable.GradientDrawable$Orientation: android.graphics.drawable.GradientDrawable$Orientation TL_BR>
<android.graphics.drawable.GradientDrawable$Orientation: android.graphics.drawable.GradientDrawable$Orientation TOP_BOTTOM>
<android.graphics.drawable.GradientDrawable$Orientation: android.graphics.drawable.GradientDrawable$Orientation TR_BL>
android.graphics.drawable.Icon
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(java.lang.String)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithBitmap(android.graphics.Bitmap)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithContentUri(java.lang.String)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithContentUri(android.net.Uri)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithData(byte[],int,int)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithFilePath(java.lang.String)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(android.content.Context,int)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(java.lang.String,int)>
<android.graphics.drawable.Icon: int describeContents()>
<android.graphics.drawable.Icon: int getResId()>
<android.graphics.drawable.Icon: java.lang.String getResPackage()>
<android.graphics.drawable.Icon: int getType()>
<android.graphics.drawable.Icon: android.net.Uri getUri()>
<android.graphics.drawable.Icon: android.graphics.drawable.Drawable loadDrawable(android.content.Context)>
<android.graphics.drawable.Icon: void loadDrawableAsync(android.content.Context,android.os.Message)>
<android.graphics.drawable.Icon: void loadDrawableAsync(android.content.Context,android.graphics.drawable.Icon$OnDrawableLoadedListener,android.os.Handler)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTint(int)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintBlendMode(android.graphics.BlendMode)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintList(android.content.res.ColorStateList)>
<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintMode(android.graphics.PorterDuff$Mode)>
<android.graphics.drawable.Icon: void writeToParcel(android.os.Parcel,int)>
<android.graphics.drawable.Icon: android.os.Parcelable$Creator CREATOR>
<android.graphics.drawable.Icon: int TYPE_ADAPTIVE_BITMAP>
<android.graphics.drawable.Icon: int TYPE_BITMAP>
<android.graphics.drawable.Icon: int TYPE_DATA>
<android.graphics.drawable.Icon: int TYPE_RESOURCE>
<android.graphics.drawable.Icon: int TYPE_URI>
<android.graphics.drawable.Icon: int TYPE_URI_ADAPTIVE_BITMAP>
android.graphics.drawable.Icon$OnDrawableLoadedListener
<android.graphics.drawable.Icon$OnDrawableLoadedListener: void onDrawableLoaded(android.graphics.drawable.Drawable)>
android.graphics.drawable.InsetDrawable
<android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,int)>
<android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,float)>
<android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,int,int,int,int)>
<android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,float,float,float,float)>
android.graphics.drawable.LayerDrawable
<android.graphics.drawable.LayerDrawable: void <init>(android.graphics.drawable.Drawable[])>
<android.graphics.drawable.LayerDrawable: int addLayer(android.graphics.drawable.Drawable)>
<android.graphics.drawable.LayerDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable findDrawableByLayerId(int)>
<android.graphics.drawable.LayerDrawable: int findIndexByLayerId(int)>
<android.graphics.drawable.LayerDrawable: int getBottomPadding()>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable getDrawable(int)>
<android.graphics.drawable.LayerDrawable: int getEndPadding()>
<android.graphics.drawable.LayerDrawable: int getId(int)>
<android.graphics.drawable.LayerDrawable: int getLayerGravity(int)>
<android.graphics.drawable.LayerDrawable: int getLayerHeight(int)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetBottom(int)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetEnd(int)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetLeft(int)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetRight(int)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetStart(int)>
<android.graphics.drawable.LayerDrawable: int getLayerInsetTop(int)>
<android.graphics.drawable.LayerDrawable: int getLayerWidth(int)>
<android.graphics.drawable.LayerDrawable: int getLeftPadding()>
<android.graphics.drawable.LayerDrawable: int getNumberOfLayers()>
<android.graphics.drawable.LayerDrawable: int getOpacity()>
<android.graphics.drawable.LayerDrawable: int getPaddingMode()>
<android.graphics.drawable.LayerDrawable: int getRightPadding()>
<android.graphics.drawable.LayerDrawable: int getStartPadding()>
<android.graphics.drawable.LayerDrawable: int getTopPadding()>
<android.graphics.drawable.LayerDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.LayerDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.graphics.drawable.LayerDrawable: void setAlpha(int)>
<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.LayerDrawable: void setDither(boolean)>
<android.graphics.drawable.LayerDrawable: void setDrawable(int,android.graphics.drawable.Drawable)>
<android.graphics.drawable.LayerDrawable: boolean setDrawableByLayerId(int,android.graphics.drawable.Drawable)>
<android.graphics.drawable.LayerDrawable: void setId(int,int)>
<android.graphics.drawable.LayerDrawable: void setLayerGravity(int,int)>
<android.graphics.drawable.LayerDrawable: void setLayerHeight(int,int)>
<android.graphics.drawable.LayerDrawable: void setLayerInset(int,int,int,int,int)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetBottom(int,int)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetEnd(int,int)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetLeft(int,int)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetRelative(int,int,int,int,int)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetRight(int,int)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetStart(int,int)>
<android.graphics.drawable.LayerDrawable: void setLayerInsetTop(int,int)>
<android.graphics.drawable.LayerDrawable: void setLayerSize(int,int,int)>
<android.graphics.drawable.LayerDrawable: void setLayerWidth(int,int)>
<android.graphics.drawable.LayerDrawable: void setOpacity(int)>
<android.graphics.drawable.LayerDrawable: void setPadding(int,int,int,int)>
<android.graphics.drawable.LayerDrawable: void setPaddingMode(int)>
<android.graphics.drawable.LayerDrawable: void setPaddingRelative(int,int,int,int)>
<android.graphics.drawable.LayerDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.graphics.drawable.LayerDrawable: int INSET_UNDEFINED>
<android.graphics.drawable.LayerDrawable: int PADDING_MODE_NEST>
<android.graphics.drawable.LayerDrawable: int PADDING_MODE_STACK>
android.graphics.drawable.LevelListDrawable
<android.graphics.drawable.LevelListDrawable: void <init>()>
<android.graphics.drawable.LevelListDrawable: void addLevel(int,int,android.graphics.drawable.Drawable)>
android.graphics.drawable.NinePatchDrawable
<android.graphics.drawable.NinePatchDrawable: void <init>(android.graphics.Bitmap,byte[],android.graphics.Rect,java.lang.String)>
<android.graphics.drawable.NinePatchDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap,byte[],android.graphics.Rect,java.lang.String)>
<android.graphics.drawable.NinePatchDrawable: void <init>(android.graphics.NinePatch)>
<android.graphics.drawable.NinePatchDrawable: void <init>(android.content.res.Resources,android.graphics.NinePatch)>
<android.graphics.drawable.NinePatchDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.NinePatchDrawable: int getOpacity()>
<android.graphics.drawable.NinePatchDrawable: android.graphics.Paint getPaint()>
<android.graphics.drawable.NinePatchDrawable: void setAlpha(int)>
<android.graphics.drawable.NinePatchDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.NinePatchDrawable: void setDither(boolean)>
<android.graphics.drawable.NinePatchDrawable: void setTargetDensity(android.graphics.Canvas)>
<android.graphics.drawable.NinePatchDrawable: void setTargetDensity(android.util.DisplayMetrics)>
<android.graphics.drawable.NinePatchDrawable: void setTargetDensity(int)>
android.graphics.drawable.PaintDrawable
<android.graphics.drawable.PaintDrawable: void <init>()>
<android.graphics.drawable.PaintDrawable: void <init>(int)>
<android.graphics.drawable.PaintDrawable: void setCornerRadii(float[])>
<android.graphics.drawable.PaintDrawable: void setCornerRadius(float)>
android.graphics.drawable.PictureDrawable
<android.graphics.drawable.PictureDrawable: void <init>(android.graphics.Picture)>
<android.graphics.drawable.PictureDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.PictureDrawable: int getOpacity()>
<android.graphics.drawable.PictureDrawable: android.graphics.Picture getPicture()>
<android.graphics.drawable.PictureDrawable: void setAlpha(int)>
<android.graphics.drawable.PictureDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.PictureDrawable: void setPicture(android.graphics.Picture)>
android.graphics.drawable.RippleDrawable
<android.graphics.drawable.RippleDrawable: void <init>(android.content.res.ColorStateList,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.graphics.drawable.RippleDrawable: android.content.res.ColorStateList getEffectColor()>
<android.graphics.drawable.RippleDrawable: int getRadius()>
<android.graphics.drawable.RippleDrawable: void setColor(android.content.res.ColorStateList)>
<android.graphics.drawable.RippleDrawable: void setEffectColor(android.content.res.ColorStateList)>
<android.graphics.drawable.RippleDrawable: void setRadius(int)>
<android.graphics.drawable.RippleDrawable: int RADIUS_AUTO>
android.graphics.drawable.RotateDrawable
<android.graphics.drawable.RotateDrawable: void <init>()>
<android.graphics.drawable.RotateDrawable: float getFromDegrees()>
<android.graphics.drawable.RotateDrawable: float getPivotX()>
<android.graphics.drawable.RotateDrawable: float getPivotY()>
<android.graphics.drawable.RotateDrawable: float getToDegrees()>
<android.graphics.drawable.RotateDrawable: boolean isPivotXRelative()>
<android.graphics.drawable.RotateDrawable: boolean isPivotYRelative()>
<android.graphics.drawable.RotateDrawable: void setFromDegrees(float)>
<android.graphics.drawable.RotateDrawable: void setPivotX(float)>
<android.graphics.drawable.RotateDrawable: void setPivotXRelative(boolean)>
<android.graphics.drawable.RotateDrawable: void setPivotY(float)>
<android.graphics.drawable.RotateDrawable: void setPivotYRelative(boolean)>
<android.graphics.drawable.RotateDrawable: void setToDegrees(float)>
android.graphics.drawable.ScaleDrawable
<android.graphics.drawable.ScaleDrawable: void <init>(android.graphics.drawable.Drawable,int,float,float)>
android.graphics.drawable.ShapeDrawable
<android.graphics.drawable.ShapeDrawable: void <init>()>
<android.graphics.drawable.ShapeDrawable: void <init>(android.graphics.drawable.shapes.Shape)>
<android.graphics.drawable.ShapeDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.ShapeDrawable: int getOpacity()>
<android.graphics.drawable.ShapeDrawable: android.graphics.Paint getPaint()>
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.ShapeDrawable$ShaderFactory getShaderFactory()>
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.shapes.Shape getShape()>
<android.graphics.drawable.ShapeDrawable: boolean inflateTag(java.lang.String,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.graphics.drawable.ShapeDrawable: void onDraw(android.graphics.drawable.shapes.Shape,android.graphics.Canvas,android.graphics.Paint)>
<android.graphics.drawable.ShapeDrawable: void setAlpha(int)>
<android.graphics.drawable.ShapeDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.drawable.ShapeDrawable: void setDither(boolean)>
<android.graphics.drawable.ShapeDrawable: void setIntrinsicHeight(int)>
<android.graphics.drawable.ShapeDrawable: void setIntrinsicWidth(int)>
<android.graphics.drawable.ShapeDrawable: void setPadding(int,int,int,int)>
<android.graphics.drawable.ShapeDrawable: void setPadding(android.graphics.Rect)>
<android.graphics.drawable.ShapeDrawable: void setShaderFactory(android.graphics.drawable.ShapeDrawable$ShaderFactory)>
<android.graphics.drawable.ShapeDrawable: void setShape(android.graphics.drawable.shapes.Shape)>
android.graphics.drawable.ShapeDrawable$ShaderFactory
<android.graphics.drawable.ShapeDrawable$ShaderFactory: void <init>()>
<android.graphics.drawable.ShapeDrawable$ShaderFactory: android.graphics.Shader resize(int,int)>
android.graphics.drawable.StateListDrawable
<android.graphics.drawable.StateListDrawable: void <init>()>
<android.graphics.drawable.StateListDrawable: void addState(int[],android.graphics.drawable.Drawable)>
<android.graphics.drawable.StateListDrawable: int findStateDrawableIndex(int[])>
<android.graphics.drawable.StateListDrawable: int getStateCount()>
<android.graphics.drawable.StateListDrawable: android.graphics.drawable.Drawable getStateDrawable(int)>
<android.graphics.drawable.StateListDrawable: int[] getStateSet(int)>
android.graphics.drawable.TransitionDrawable
<android.graphics.drawable.TransitionDrawable: void <init>(android.graphics.drawable.Drawable[])>
<android.graphics.drawable.TransitionDrawable: boolean isCrossFadeEnabled()>
<android.graphics.drawable.TransitionDrawable: void resetTransition()>
<android.graphics.drawable.TransitionDrawable: void reverseTransition(int)>
<android.graphics.drawable.TransitionDrawable: void setCrossFadeEnabled(boolean)>
<android.graphics.drawable.TransitionDrawable: void startTransition(int)>
android.graphics.drawable.VectorDrawable
<android.graphics.drawable.VectorDrawable: void <init>()>
<android.graphics.drawable.VectorDrawable: void draw(android.graphics.Canvas)>
<android.graphics.drawable.VectorDrawable: int getOpacity()>
<android.graphics.drawable.VectorDrawable: void setAlpha(int)>
<android.graphics.drawable.VectorDrawable: void setColorFilter(android.graphics.ColorFilter)>
android.graphics.drawable.shapes.ArcShape
<android.graphics.drawable.shapes.ArcShape: void <init>(float,float)>
<android.graphics.drawable.shapes.ArcShape: android.graphics.drawable.shapes.ArcShape clone()>
<android.graphics.drawable.shapes.ArcShape: float getStartAngle()>
<android.graphics.drawable.shapes.ArcShape: float getSweepAngle()>
android.graphics.drawable.shapes.OvalShape
<android.graphics.drawable.shapes.OvalShape: void <init>()>
<android.graphics.drawable.shapes.OvalShape: android.graphics.drawable.shapes.OvalShape clone()>
android.graphics.drawable.shapes.PathShape
<android.graphics.drawable.shapes.PathShape: void <init>(android.graphics.Path,float,float)>
<android.graphics.drawable.shapes.PathShape: android.graphics.drawable.shapes.PathShape clone()>
<android.graphics.drawable.shapes.PathShape: void draw(android.graphics.Canvas,android.graphics.Paint)>
android.graphics.drawable.shapes.RectShape
<android.graphics.drawable.shapes.RectShape: void <init>()>
<android.graphics.drawable.shapes.RectShape: android.graphics.drawable.shapes.RectShape clone()>
<android.graphics.drawable.shapes.RectShape: void draw(android.graphics.Canvas,android.graphics.Paint)>
<android.graphics.drawable.shapes.RectShape: android.graphics.RectF rect()>
android.graphics.drawable.shapes.RoundRectShape
<android.graphics.drawable.shapes.RoundRectShape: void <init>(float[],android.graphics.RectF,float[])>
<android.graphics.drawable.shapes.RoundRectShape: android.graphics.drawable.shapes.RoundRectShape clone()>
android.graphics.drawable.shapes.Shape
<android.graphics.drawable.shapes.Shape: void <init>()>
<android.graphics.drawable.shapes.Shape: android.graphics.drawable.shapes.Shape clone()>
<android.graphics.drawable.shapes.Shape: void draw(android.graphics.Canvas,android.graphics.Paint)>
<android.graphics.drawable.shapes.Shape: float getHeight()>
<android.graphics.drawable.shapes.Shape: void getOutline(android.graphics.Outline)>
<android.graphics.drawable.shapes.Shape: float getWidth()>
<android.graphics.drawable.shapes.Shape: boolean hasAlpha()>
<android.graphics.drawable.shapes.Shape: void onResize(float,float)>
<android.graphics.drawable.shapes.Shape: void resize(float,float)>
android.graphics.fonts.Font
<android.graphics.fonts.Font: android.graphics.fonts.FontVariationAxis[] getAxes()>
<android.graphics.fonts.Font: java.nio.ByteBuffer getBuffer()>
<android.graphics.fonts.Font: java.io.File getFile()>
<android.graphics.fonts.Font: float getGlyphBounds(int,android.graphics.Paint,android.graphics.RectF)>
<android.graphics.fonts.Font: android.os.LocaleList getLocaleList()>
<android.graphics.fonts.Font: void getMetrics(android.graphics.Paint,android.graphics.Paint$FontMetrics)>
<android.graphics.fonts.Font: int getSourceIdentifier()>
<android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()>
<android.graphics.fonts.Font: int getTtcIndex()>
android.graphics.fonts.Font$Builder
<android.graphics.fonts.Font$Builder: void <init>(java.nio.ByteBuffer)>
<android.graphics.fonts.Font$Builder: void <init>(java.io.File)>
<android.graphics.fonts.Font$Builder: void <init>(android.os.ParcelFileDescriptor)>
<android.graphics.fonts.Font$Builder: void <init>(android.os.ParcelFileDescriptor,long,long)>
<android.graphics.fonts.Font$Builder: void <init>(android.content.res.AssetManager,java.lang.String)>
<android.graphics.fonts.Font$Builder: void <init>(android.content.res.Resources,int)>
<android.graphics.fonts.Font$Builder: void <init>(android.graphics.fonts.Font)>
<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font build()>
<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setFontVariationSettings(java.lang.String)>
<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>
<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setSlant(int)>
<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setTtcIndex(int)>
<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setWeight(int)>
android.graphics.fonts.FontFamily
<android.graphics.fonts.FontFamily: android.graphics.fonts.Font getFont(int)>
<android.graphics.fonts.FontFamily: int getSize()>
android.graphics.fonts.FontFamily$Builder
<android.graphics.fonts.FontFamily$Builder: void <init>(android.graphics.fonts.Font)>
<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily$Builder addFont(android.graphics.fonts.Font)>
<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily build()>
android.graphics.fonts.FontStyle
<android.graphics.fonts.FontStyle: void <init>()>
<android.graphics.fonts.FontStyle: void <init>(int,int)>
<android.graphics.fonts.FontStyle: int getSlant()>
<android.graphics.fonts.FontStyle: int getWeight()>
<android.graphics.fonts.FontStyle: int FONT_SLANT_ITALIC>
<android.graphics.fonts.FontStyle: int FONT_SLANT_UPRIGHT>
<android.graphics.fonts.FontStyle: int FONT_WEIGHT_BLACK>
<android.graphics.fonts.FontStyle: int FONT_WEIGHT_BOLD>
<android.graphics.fonts.FontStyle: int FONT_WEIGHT_EXTRA_BOLD>
<android.graphics.fonts.FontStyle: int FONT_WEIGHT_EXTRA_LIGHT>
<android.graphics.fonts.FontStyle: int FONT_WEIGHT_LIGHT>
<android.graphics.fonts.FontStyle: int FONT_WEIGHT_MAX>
<android.graphics.fonts.FontStyle: int FONT_WEIGHT_MEDIUM>
<android.graphics.fonts.FontStyle: int FONT_WEIGHT_MIN>
<android.graphics.fonts.FontStyle: int FONT_WEIGHT_NORMAL>
<android.graphics.fonts.FontStyle: int FONT_WEIGHT_SEMI_BOLD>
<android.graphics.fonts.FontStyle: int FONT_WEIGHT_THIN>
android.graphics.fonts.FontVariationAxis
<android.graphics.fonts.FontVariationAxis: void <init>(java.lang.String,float)>
<android.graphics.fonts.FontVariationAxis: android.graphics.fonts.FontVariationAxis[] fromFontVariationSettings(java.lang.String)>
<android.graphics.fonts.FontVariationAxis: float getStyleValue()>
<android.graphics.fonts.FontVariationAxis: java.lang.String getTag()>
<android.graphics.fonts.FontVariationAxis: java.lang.String toFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>
android.graphics.fonts.SystemFonts
<android.graphics.fonts.SystemFonts: java.util.Set getAvailableFonts()>
android.graphics.pdf.PdfDocument
<android.graphics.pdf.PdfDocument: void <init>()>
<android.graphics.pdf.PdfDocument: void close()>
<android.graphics.pdf.PdfDocument: void finishPage(android.graphics.pdf.PdfDocument$Page)>
<android.graphics.pdf.PdfDocument: java.util.List getPages()>
<android.graphics.pdf.PdfDocument: android.graphics.pdf.PdfDocument$Page startPage(android.graphics.pdf.PdfDocument$PageInfo)>
<android.graphics.pdf.PdfDocument: void writeTo(java.io.OutputStream)>
android.graphics.pdf.PdfDocument$Page
<android.graphics.pdf.PdfDocument$Page: android.graphics.Canvas getCanvas()>
<android.graphics.pdf.PdfDocument$Page: android.graphics.pdf.PdfDocument$PageInfo getInfo()>
android.graphics.pdf.PdfDocument$PageInfo
<android.graphics.pdf.PdfDocument$PageInfo: android.graphics.Rect getContentRect()>
<android.graphics.pdf.PdfDocument$PageInfo: int getPageHeight()>
<android.graphics.pdf.PdfDocument$PageInfo: int getPageNumber()>
<android.graphics.pdf.PdfDocument$PageInfo: int getPageWidth()>
android.graphics.pdf.PdfDocument$PageInfo$Builder
<android.graphics.pdf.PdfDocument$PageInfo$Builder: void <init>(int,int,int)>
<android.graphics.pdf.PdfDocument$PageInfo$Builder: android.graphics.pdf.PdfDocument$PageInfo create()>
<android.graphics.pdf.PdfDocument$PageInfo$Builder: android.graphics.pdf.PdfDocument$PageInfo$Builder setContentRect(android.graphics.Rect)>
android.graphics.pdf.PdfRenderer
<android.graphics.pdf.PdfRenderer: void <init>(android.os.ParcelFileDescriptor)>
<android.graphics.pdf.PdfRenderer: void close()>
<android.graphics.pdf.PdfRenderer: int getPageCount()>
<android.graphics.pdf.PdfRenderer: android.graphics.pdf.PdfRenderer$Page openPage(int)>
<android.graphics.pdf.PdfRenderer: boolean shouldScaleForPrinting()>
android.graphics.pdf.PdfRenderer$Page
<android.graphics.pdf.PdfRenderer$Page: void close()>
<android.graphics.pdf.PdfRenderer$Page: int getHeight()>
<android.graphics.pdf.PdfRenderer$Page: int getIndex()>
<android.graphics.pdf.PdfRenderer$Page: int getWidth()>
<android.graphics.pdf.PdfRenderer$Page: void render(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Matrix,int)>
<android.graphics.pdf.PdfRenderer$Page: int RENDER_MODE_FOR_DISPLAY>
<android.graphics.pdf.PdfRenderer$Page: int RENDER_MODE_FOR_PRINT>
android.graphics.text.LineBreakConfig
<android.graphics.text.LineBreakConfig: int getLineBreakStyle()>
<android.graphics.text.LineBreakConfig: int getLineBreakWordStyle()>
<android.graphics.text.LineBreakConfig: int LINE_BREAK_STYLE_LOOSE>
<android.graphics.text.LineBreakConfig: int LINE_BREAK_STYLE_NONE>
<android.graphics.text.LineBreakConfig: int LINE_BREAK_STYLE_NORMAL>
<android.graphics.text.LineBreakConfig: int LINE_BREAK_STYLE_STRICT>
<android.graphics.text.LineBreakConfig: int LINE_BREAK_WORD_STYLE_NONE>
<android.graphics.text.LineBreakConfig: int LINE_BREAK_WORD_STYLE_PHRASE>
android.graphics.text.LineBreakConfig$Builder
<android.graphics.text.LineBreakConfig$Builder: void <init>()>
<android.graphics.text.LineBreakConfig$Builder: android.graphics.text.LineBreakConfig build()>
<android.graphics.text.LineBreakConfig$Builder: android.graphics.text.LineBreakConfig$Builder setLineBreakStyle(int)>
<android.graphics.text.LineBreakConfig$Builder: android.graphics.text.LineBreakConfig$Builder setLineBreakWordStyle(int)>
android.graphics.text.LineBreaker
<android.graphics.text.LineBreaker: android.graphics.text.LineBreaker$Result computeLineBreaks(android.graphics.text.MeasuredText,android.graphics.text.LineBreaker$ParagraphConstraints,int)>
<android.graphics.text.LineBreaker: int BREAK_STRATEGY_BALANCED>
<android.graphics.text.LineBreaker: int BREAK_STRATEGY_HIGH_QUALITY>
<android.graphics.text.LineBreaker: int BREAK_STRATEGY_SIMPLE>
<android.graphics.text.LineBreaker: int HYPHENATION_FREQUENCY_FULL>
<android.graphics.text.LineBreaker: int HYPHENATION_FREQUENCY_NONE>
<android.graphics.text.LineBreaker: int HYPHENATION_FREQUENCY_NORMAL>
<android.graphics.text.LineBreaker: int JUSTIFICATION_MODE_INTER_WORD>
<android.graphics.text.LineBreaker: int JUSTIFICATION_MODE_NONE>
android.graphics.text.LineBreaker$Builder
<android.graphics.text.LineBreaker$Builder: void <init>()>
<android.graphics.text.LineBreaker$Builder: android.graphics.text.LineBreaker build()>
<android.graphics.text.LineBreaker$Builder: android.graphics.text.LineBreaker$Builder setBreakStrategy(int)>
<android.graphics.text.LineBreaker$Builder: android.graphics.text.LineBreaker$Builder setHyphenationFrequency(int)>
<android.graphics.text.LineBreaker$Builder: android.graphics.text.LineBreaker$Builder setIndents(int[])>
<android.graphics.text.LineBreaker$Builder: android.graphics.text.LineBreaker$Builder setJustificationMode(int)>
android.graphics.text.LineBreaker$ParagraphConstraints
<android.graphics.text.LineBreaker$ParagraphConstraints: void <init>()>
<android.graphics.text.LineBreaker$ParagraphConstraints: float getDefaultTabStop()>
<android.graphics.text.LineBreaker$ParagraphConstraints: float getFirstWidth()>
<android.graphics.text.LineBreaker$ParagraphConstraints: int getFirstWidthLineCount()>
<android.graphics.text.LineBreaker$ParagraphConstraints: float[] getTabStops()>
<android.graphics.text.LineBreaker$ParagraphConstraints: float getWidth()>
<android.graphics.text.LineBreaker$ParagraphConstraints: void setIndent(float,int)>
<android.graphics.text.LineBreaker$ParagraphConstraints: void setTabStops(float[],float)>
<android.graphics.text.LineBreaker$ParagraphConstraints: void setWidth(float)>
android.graphics.text.LineBreaker$Result
<android.graphics.text.LineBreaker$Result: int getEndLineHyphenEdit(int)>
<android.graphics.text.LineBreaker$Result: float getLineAscent(int)>
<android.graphics.text.LineBreaker$Result: int getLineBreakOffset(int)>
<android.graphics.text.LineBreaker$Result: int getLineCount()>
<android.graphics.text.LineBreaker$Result: float getLineDescent(int)>
<android.graphics.text.LineBreaker$Result: float getLineWidth(int)>
<android.graphics.text.LineBreaker$Result: int getStartLineHyphenEdit(int)>
<android.graphics.text.LineBreaker$Result: boolean hasLineTab(int)>
android.graphics.text.MeasuredText
<android.graphics.text.MeasuredText: void getBounds(int,int,android.graphics.Rect)>
<android.graphics.text.MeasuredText: float getCharWidthAt(int)>
<android.graphics.text.MeasuredText: void getFontMetricsInt(int,int,android.graphics.Paint$FontMetricsInt)>
<android.graphics.text.MeasuredText: float getWidth(int,int)>
android.graphics.text.MeasuredText$Builder
<android.graphics.text.MeasuredText$Builder: void <init>(char[])>
<android.graphics.text.MeasuredText$Builder: void <init>(android.graphics.text.MeasuredText)>
<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder appendReplacementRun(android.graphics.Paint,int,float)>
<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder appendStyleRun(android.graphics.Paint,int,boolean)>
<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder appendStyleRun(android.graphics.Paint,android.graphics.text.LineBreakConfig,int,boolean)>
<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText build()>
<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder setComputeHyphenation(boolean)>
<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder setComputeHyphenation(int)>
<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder setComputeLayout(boolean)>
<android.graphics.text.MeasuredText$Builder: int HYPHENATION_MODE_FAST>
<android.graphics.text.MeasuredText$Builder: int HYPHENATION_MODE_NONE>
<android.graphics.text.MeasuredText$Builder: int HYPHENATION_MODE_NORMAL>
android.graphics.text.PositionedGlyphs
<android.graphics.text.PositionedGlyphs: float getAdvance()>
<android.graphics.text.PositionedGlyphs: float getAscent()>
<android.graphics.text.PositionedGlyphs: float getDescent()>
<android.graphics.text.PositionedGlyphs: android.graphics.fonts.Font getFont(int)>
<android.graphics.text.PositionedGlyphs: int getGlyphId(int)>
<android.graphics.text.PositionedGlyphs: float getGlyphX(int)>
<android.graphics.text.PositionedGlyphs: float getGlyphY(int)>
<android.graphics.text.PositionedGlyphs: float getOffsetX()>
<android.graphics.text.PositionedGlyphs: float getOffsetY()>
<android.graphics.text.PositionedGlyphs: int glyphCount()>
android.graphics.text.TextRunShaper
<android.graphics.text.TextRunShaper: android.graphics.text.PositionedGlyphs shapeTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>
<android.graphics.text.TextRunShaper: android.graphics.text.PositionedGlyphs shapeTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)>
android.hardware.BatteryState
<android.hardware.BatteryState: void <init>()>
<android.hardware.BatteryState: float getCapacity()>
<android.hardware.BatteryState: int getStatus()>
<android.hardware.BatteryState: boolean isPresent()>
<android.hardware.BatteryState: int STATUS_CHARGING>
<android.hardware.BatteryState: int STATUS_DISCHARGING>
<android.hardware.BatteryState: int STATUS_FULL>
<android.hardware.BatteryState: int STATUS_NOT_CHARGING>
<android.hardware.BatteryState: int STATUS_UNKNOWN>
android.hardware.Camera
<android.hardware.Camera: void addCallbackBuffer(byte[])>
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>
<android.hardware.Camera: void cancelAutoFocus()>
<android.hardware.Camera: boolean enableShutterSound(boolean)>
<android.hardware.Camera: void finalize()>
<android.hardware.Camera: void getCameraInfo(int,android.hardware.Camera$CameraInfo)>
<android.hardware.Camera: int getNumberOfCameras()>
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>
<android.hardware.Camera: void lock()>
<android.hardware.Camera: android.hardware.Camera open(int)>
<android.hardware.Camera: android.hardware.Camera open()>
<android.hardware.Camera: void reconnect()>
<android.hardware.Camera: void release()>
<android.hardware.Camera: void setAutoFocusMoveCallback(android.hardware.Camera$AutoFocusMoveCallback)>
<android.hardware.Camera: void setDisplayOrientation(int)>
<android.hardware.Camera: void setErrorCallback(android.hardware.Camera$ErrorCallback)>
<android.hardware.Camera: void setFaceDetectionListener(android.hardware.Camera$FaceDetectionListener)>
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>
<android.hardware.Camera: void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)>
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>
<android.hardware.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)>
<android.hardware.Camera: void setZoomChangeListener(android.hardware.Camera$OnZoomChangeListener)>
<android.hardware.Camera: void startFaceDetection()>
<android.hardware.Camera: void startPreview()>
<android.hardware.Camera: void startSmoothZoom(int)>
<android.hardware.Camera: void stopFaceDetection()>
<android.hardware.Camera: void stopPreview()>
<android.hardware.Camera: void stopSmoothZoom()>
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>
<android.hardware.Camera: void unlock()>
<android.hardware.Camera: java.lang.String ACTION_NEW_PICTURE>
<android.hardware.Camera: java.lang.String ACTION_NEW_VIDEO>
<android.hardware.Camera: int CAMERA_ERROR_EVICTED>
<android.hardware.Camera: int CAMERA_ERROR_SERVER_DIED>
<android.hardware.Camera: int CAMERA_ERROR_UNKNOWN>
android.hardware.Camera$Area
<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>
<android.hardware.Camera$Area: android.graphics.Rect rect>
<android.hardware.Camera$Area: int weight>
android.hardware.Camera$AutoFocusCallback
<android.hardware.Camera$AutoFocusCallback: void onAutoFocus(boolean,android.hardware.Camera)>
android.hardware.Camera$AutoFocusMoveCallback
<android.hardware.Camera$AutoFocusMoveCallback: void onAutoFocusMoving(boolean,android.hardware.Camera)>
android.hardware.Camera$CameraInfo
<android.hardware.Camera$CameraInfo: void <init>()>
<android.hardware.Camera$CameraInfo: int CAMERA_FACING_BACK>
<android.hardware.Camera$CameraInfo: int CAMERA_FACING_FRONT>
<android.hardware.Camera$CameraInfo: boolean canDisableShutterSound>
<android.hardware.Camera$CameraInfo: int facing>
<android.hardware.Camera$CameraInfo: int orientation>
android.hardware.Camera$ErrorCallback
<android.hardware.Camera$ErrorCallback: void onError(int,android.hardware.Camera)>
android.hardware.Camera$Face
<android.hardware.Camera$Face: void <init>()>
<android.hardware.Camera$Face: int id>
<android.hardware.Camera$Face: android.graphics.Point leftEye>
<android.hardware.Camera$Face: android.graphics.Point mouth>
<android.hardware.Camera$Face: android.graphics.Rect rect>
<android.hardware.Camera$Face: android.graphics.Point rightEye>
<android.hardware.Camera$Face: int score>
android.hardware.Camera$FaceDetectionListener
<android.hardware.Camera$FaceDetectionListener: void onFaceDetection(android.hardware.Camera$Face[],android.hardware.Camera)>
android.hardware.Camera$OnZoomChangeListener
<android.hardware.Camera$OnZoomChangeListener: void onZoomChange(int,boolean,android.hardware.Camera)>
android.hardware.Camera$Parameters
<android.hardware.Camera$Parameters: java.lang.String flatten()>
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>
<android.hardware.Camera$Parameters: java.lang.String getAntibanding()>
<android.hardware.Camera$Parameters: boolean getAutoExposureLock()>
<android.hardware.Camera$Parameters: boolean getAutoWhiteBalanceLock()>
<android.hardware.Camera$Parameters: java.lang.String getColorEffect()>
<android.hardware.Camera$Parameters: int getExposureCompensation()>
<android.hardware.Camera$Parameters: float getExposureCompensationStep()>
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>
<android.hardware.Camera$Parameters: float getFocalLength()>
<android.hardware.Camera$Parameters: java.util.List getFocusAreas()>
<android.hardware.Camera$Parameters: void getFocusDistances(float[])>
<android.hardware.Camera$Parameters: java.lang.String getFocusMode()>
<android.hardware.Camera$Parameters: float getHorizontalViewAngle()>
<android.hardware.Camera$Parameters: int getInt(java.lang.String)>
<android.hardware.Camera$Parameters: int getJpegQuality()>
<android.hardware.Camera$Parameters: int getJpegThumbnailQuality()>
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getJpegThumbnailSize()>
<android.hardware.Camera$Parameters: int getMaxExposureCompensation()>
<android.hardware.Camera$Parameters: int getMaxNumDetectedFaces()>
<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()>
<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()>
<android.hardware.Camera$Parameters: int getMaxZoom()>
<android.hardware.Camera$Parameters: java.util.List getMeteringAreas()>
<android.hardware.Camera$Parameters: int getMinExposureCompensation()>
<android.hardware.Camera$Parameters: int getPictureFormat()>
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPictureSize()>
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreferredPreviewSizeForVideo()>
<android.hardware.Camera$Parameters: int getPreviewFormat()>
<android.hardware.Camera$Parameters: void getPreviewFpsRange(int[])>
<android.hardware.Camera$Parameters: int getPreviewFrameRate()>
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>
<android.hardware.Camera$Parameters: java.lang.String getSceneMode()>
<android.hardware.Camera$Parameters: java.util.List getSupportedAntibanding()>
<android.hardware.Camera$Parameters: java.util.List getSupportedColorEffects()>
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>
<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()>
<android.hardware.Camera$Parameters: java.util.List getSupportedJpegThumbnailSizes()>
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureFormats()>
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFormats()>
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()>
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFrameRates()>
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>
<android.hardware.Camera$Parameters: java.util.List getSupportedSceneModes()>
<android.hardware.Camera$Parameters: java.util.List getSupportedVideoSizes()>
<android.hardware.Camera$Parameters: java.util.List getSupportedWhiteBalance()>
<android.hardware.Camera$Parameters: float getVerticalViewAngle()>
<android.hardware.Camera$Parameters: boolean getVideoStabilization()>
<android.hardware.Camera$Parameters: java.lang.String getWhiteBalance()>
<android.hardware.Camera$Parameters: int getZoom()>
<android.hardware.Camera$Parameters: java.util.List getZoomRatios()>
<android.hardware.Camera$Parameters: boolean isAutoExposureLockSupported()>
<android.hardware.Camera$Parameters: boolean isAutoWhiteBalanceLockSupported()>
<android.hardware.Camera$Parameters: boolean isSmoothZoomSupported()>
<android.hardware.Camera$Parameters: boolean isVideoSnapshotSupported()>
<android.hardware.Camera$Parameters: boolean isVideoStabilizationSupported()>
<android.hardware.Camera$Parameters: boolean isZoomSupported()>
<android.hardware.Camera$Parameters: void remove(java.lang.String)>
<android.hardware.Camera$Parameters: void removeGpsData()>
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>
<android.hardware.Camera$Parameters: void set(java.lang.String,int)>
<android.hardware.Camera$Parameters: void setAntibanding(java.lang.String)>
<android.hardware.Camera$Parameters: void setAutoExposureLock(boolean)>
<android.hardware.Camera$Parameters: void setAutoWhiteBalanceLock(boolean)>
<android.hardware.Camera$Parameters: void setColorEffect(java.lang.String)>
<android.hardware.Camera$Parameters: void setExposureCompensation(int)>
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>
<android.hardware.Camera$Parameters: void setFocusAreas(java.util.List)>
<android.hardware.Camera$Parameters: void setFocusMode(java.lang.String)>
<android.hardware.Camera$Parameters: void setGpsAltitude(double)>
<android.hardware.Camera$Parameters: void setGpsLatitude(double)>
<android.hardware.Camera$Parameters: void setGpsLongitude(double)>
<android.hardware.Camera$Parameters: void setGpsProcessingMethod(java.lang.String)>
<android.hardware.Camera$Parameters: void setGpsTimestamp(long)>
<android.hardware.Camera$Parameters: void setJpegQuality(int)>
<android.hardware.Camera$Parameters: void setJpegThumbnailQuality(int)>
<android.hardware.Camera$Parameters: void setJpegThumbnailSize(int,int)>
<android.hardware.Camera$Parameters: void setMeteringAreas(java.util.List)>
<android.hardware.Camera$Parameters: void setPictureFormat(int)>
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>
<android.hardware.Camera$Parameters: void setPreviewFormat(int)>
<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)>
<android.hardware.Camera$Parameters: void setPreviewFrameRate(int)>
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>
<android.hardware.Camera$Parameters: void setRecordingHint(boolean)>
<android.hardware.Camera$Parameters: void setRotation(int)>
<android.hardware.Camera$Parameters: void setSceneMode(java.lang.String)>
<android.hardware.Camera$Parameters: void setVideoStabilization(boolean)>
<android.hardware.Camera$Parameters: void setWhiteBalance(java.lang.String)>
<android.hardware.Camera$Parameters: void setZoom(int)>
<android.hardware.Camera$Parameters: void unflatten(java.lang.String)>
<android.hardware.Camera$Parameters: java.lang.String ANTIBANDING_50HZ>
<android.hardware.Camera$Parameters: java.lang.String ANTIBANDING_60HZ>
<android.hardware.Camera$Parameters: java.lang.String ANTIBANDING_AUTO>
<android.hardware.Camera$Parameters: java.lang.String ANTIBANDING_OFF>
<android.hardware.Camera$Parameters: java.lang.String EFFECT_AQUA>
<android.hardware.Camera$Parameters: java.lang.String EFFECT_BLACKBOARD>
<android.hardware.Camera$Parameters: java.lang.String EFFECT_MONO>
<android.hardware.Camera$Parameters: java.lang.String EFFECT_NEGATIVE>
<android.hardware.Camera$Parameters: java.lang.String EFFECT_NONE>
<android.hardware.Camera$Parameters: java.lang.String EFFECT_POSTERIZE>
<android.hardware.Camera$Parameters: java.lang.String EFFECT_SEPIA>
<android.hardware.Camera$Parameters: java.lang.String EFFECT_SOLARIZE>
<android.hardware.Camera$Parameters: java.lang.String EFFECT_WHITEBOARD>
<android.hardware.Camera$Parameters: java.lang.String FLASH_MODE_AUTO>
<android.hardware.Camera$Parameters: java.lang.String FLASH_MODE_OFF>
<android.hardware.Camera$Parameters: java.lang.String FLASH_MODE_ON>
<android.hardware.Camera$Parameters: java.lang.String FLASH_MODE_RED_EYE>
<android.hardware.Camera$Parameters: java.lang.String FLASH_MODE_TORCH>
<android.hardware.Camera$Parameters: int FOCUS_DISTANCE_FAR_INDEX>
<android.hardware.Camera$Parameters: int FOCUS_DISTANCE_NEAR_INDEX>
<android.hardware.Camera$Parameters: int FOCUS_DISTANCE_OPTIMAL_INDEX>
<android.hardware.Camera$Parameters: java.lang.String FOCUS_MODE_AUTO>
<android.hardware.Camera$Parameters: java.lang.String FOCUS_MODE_CONTINUOUS_PICTURE>
<android.hardware.Camera$Parameters: java.lang.String FOCUS_MODE_CONTINUOUS_VIDEO>
<android.hardware.Camera$Parameters: java.lang.String FOCUS_MODE_EDOF>
<android.hardware.Camera$Parameters: java.lang.String FOCUS_MODE_FIXED>
<android.hardware.Camera$Parameters: java.lang.String FOCUS_MODE_INFINITY>
<android.hardware.Camera$Parameters: java.lang.String FOCUS_MODE_MACRO>
<android.hardware.Camera$Parameters: int PREVIEW_FPS_MAX_INDEX>
<android.hardware.Camera$Parameters: int PREVIEW_FPS_MIN_INDEX>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_ACTION>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_AUTO>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_BARCODE>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_BEACH>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_CANDLELIGHT>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_FIREWORKS>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_HDR>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_LANDSCAPE>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_NIGHT>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_NIGHT_PORTRAIT>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_PARTY>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_PORTRAIT>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_SNOW>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_SPORTS>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_STEADYPHOTO>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_SUNSET>
<android.hardware.Camera$Parameters: java.lang.String SCENE_MODE_THEATRE>
<android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_AUTO>
<android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_CLOUDY_DAYLIGHT>
<android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_DAYLIGHT>
<android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_FLUORESCENT>
<android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_INCANDESCENT>
<android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_SHADE>
<android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_TWILIGHT>
<android.hardware.Camera$Parameters: java.lang.String WHITE_BALANCE_WARM_FLUORESCENT>
android.hardware.Camera$PictureCallback
<android.hardware.Camera$PictureCallback: void onPictureTaken(byte[],android.hardware.Camera)>
android.hardware.Camera$PreviewCallback
<android.hardware.Camera$PreviewCallback: void onPreviewFrame(byte[],android.hardware.Camera)>
android.hardware.Camera$ShutterCallback
<android.hardware.Camera$ShutterCallback: void onShutter()>
android.hardware.Camera$Size
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>
<android.hardware.Camera$Size: int height>
<android.hardware.Camera$Size: int width>
android.hardware.ConsumerIrManager
<android.hardware.ConsumerIrManager: android.hardware.ConsumerIrManager$CarrierFrequencyRange[] getCarrierFrequencies()>
<android.hardware.ConsumerIrManager: boolean hasIrEmitter()>
<android.hardware.ConsumerIrManager: void transmit(int,int[])>
android.hardware.ConsumerIrManager$CarrierFrequencyRange
<android.hardware.ConsumerIrManager$CarrierFrequencyRange: void <init>(android.hardware.ConsumerIrManager,int,int)>
<android.hardware.ConsumerIrManager$CarrierFrequencyRange: int getMaxFrequency()>
<android.hardware.ConsumerIrManager$CarrierFrequencyRange: int getMinFrequency()>
android.hardware.DataSpace
<android.hardware.DataSpace: int getRange(int)>
<android.hardware.DataSpace: int getStandard(int)>
<android.hardware.DataSpace: int getTransfer(int)>
<android.hardware.DataSpace: int pack(int,int,int)>
<android.hardware.DataSpace: int DATASPACE_ADOBE_RGB>
<android.hardware.DataSpace: int DATASPACE_BT2020>
<android.hardware.DataSpace: int DATASPACE_BT2020_PQ>
<android.hardware.DataSpace: int DATASPACE_BT601_525>
<android.hardware.DataSpace: int DATASPACE_BT601_625>
<android.hardware.DataSpace: int DATASPACE_BT709>
<android.hardware.DataSpace: int DATASPACE_DCI_P3>
<android.hardware.DataSpace: int DATASPACE_DISPLAY_P3>
<android.hardware.DataSpace: int DATASPACE_JFIF>
<android.hardware.DataSpace: int DATASPACE_SCRGB>
<android.hardware.DataSpace: int DATASPACE_SCRGB_LINEAR>
<android.hardware.DataSpace: int DATASPACE_SRGB>
<android.hardware.DataSpace: int DATASPACE_SRGB_LINEAR>
<android.hardware.DataSpace: int DATASPACE_UNKNOWN>
<android.hardware.DataSpace: int RANGE_EXTENDED>
<android.hardware.DataSpace: int RANGE_FULL>
<android.hardware.DataSpace: int RANGE_LIMITED>
<android.hardware.DataSpace: int RANGE_UNSPECIFIED>
<android.hardware.DataSpace: int STANDARD_ADOBE_RGB>
<android.hardware.DataSpace: int STANDARD_BT2020>
<android.hardware.DataSpace: int STANDARD_BT2020_CONSTANT_LUMINANCE>
<android.hardware.DataSpace: int STANDARD_BT470M>
<android.hardware.DataSpace: int STANDARD_BT601_525>
<android.hardware.DataSpace: int STANDARD_BT601_525_UNADJUSTED>
<android.hardware.DataSpace: int STANDARD_BT601_625>
<android.hardware.DataSpace: int STANDARD_BT601_625_UNADJUSTED>
<android.hardware.DataSpace: int STANDARD_BT709>
<android.hardware.DataSpace: int STANDARD_DCI_P3>
<android.hardware.DataSpace: int STANDARD_FILM>
<android.hardware.DataSpace: int STANDARD_UNSPECIFIED>
<android.hardware.DataSpace: int TRANSFER_GAMMA2_2>
<android.hardware.DataSpace: int TRANSFER_GAMMA2_6>
<android.hardware.DataSpace: int TRANSFER_GAMMA2_8>
<android.hardware.DataSpace: int TRANSFER_HLG>
<android.hardware.DataSpace: int TRANSFER_LINEAR>
<android.hardware.DataSpace: int TRANSFER_SMPTE_170M>
<android.hardware.DataSpace: int TRANSFER_SRGB>
<android.hardware.DataSpace: int TRANSFER_ST2084>
<android.hardware.DataSpace: int TRANSFER_UNSPECIFIED>
android.hardware.GeomagneticField
<android.hardware.GeomagneticField: void <init>(float,float,float,long)>
<android.hardware.GeomagneticField: float getDeclination()>
<android.hardware.GeomagneticField: float getFieldStrength()>
<android.hardware.GeomagneticField: float getHorizontalStrength()>
<android.hardware.GeomagneticField: float getInclination()>
<android.hardware.GeomagneticField: float getX()>
<android.hardware.GeomagneticField: float getY()>
<android.hardware.GeomagneticField: float getZ()>
android.hardware.HardwareBuffer
<android.hardware.HardwareBuffer: void close()>
<android.hardware.HardwareBuffer: android.hardware.HardwareBuffer create(int,int,int,int,long)>
<android.hardware.HardwareBuffer: int describeContents()>
<android.hardware.HardwareBuffer: int getFormat()>
<android.hardware.HardwareBuffer: int getHeight()>
<android.hardware.HardwareBuffer: int getLayers()>
<android.hardware.HardwareBuffer: long getUsage()>
<android.hardware.HardwareBuffer: int getWidth()>
<android.hardware.HardwareBuffer: boolean isClosed()>
<android.hardware.HardwareBuffer: boolean isSupported(int,int,int,int,long)>
<android.hardware.HardwareBuffer: void writeToParcel(android.os.Parcel,int)>
<android.hardware.HardwareBuffer: int BLOB>
<android.hardware.HardwareBuffer: android.os.Parcelable$Creator CREATOR>
<android.hardware.HardwareBuffer: int DS_24UI8>
<android.hardware.HardwareBuffer: int DS_FP32UI8>
<android.hardware.HardwareBuffer: int D_16>
<android.hardware.HardwareBuffer: int D_24>
<android.hardware.HardwareBuffer: int D_FP32>
<android.hardware.HardwareBuffer: int RGBA_1010102>
<android.hardware.HardwareBuffer: int RGBA_8888>
<android.hardware.HardwareBuffer: int RGBA_FP16>
<android.hardware.HardwareBuffer: int RGBX_8888>
<android.hardware.HardwareBuffer: int RGB_565>
<android.hardware.HardwareBuffer: int RGB_888>
<android.hardware.HardwareBuffer: int S_UI8>
<android.hardware.HardwareBuffer: long USAGE_COMPOSER_OVERLAY>
<android.hardware.HardwareBuffer: long USAGE_CPU_READ_OFTEN>
<android.hardware.HardwareBuffer: long USAGE_CPU_READ_RARELY>
<android.hardware.HardwareBuffer: long USAGE_CPU_WRITE_OFTEN>
<android.hardware.HardwareBuffer: long USAGE_CPU_WRITE_RARELY>
<android.hardware.HardwareBuffer: long USAGE_FRONT_BUFFER>
<android.hardware.HardwareBuffer: long USAGE_GPU_COLOR_OUTPUT>
<android.hardware.HardwareBuffer: long USAGE_GPU_CUBE_MAP>
<android.hardware.HardwareBuffer: long USAGE_GPU_DATA_BUFFER>
<android.hardware.HardwareBuffer: long USAGE_GPU_MIPMAP_COMPLETE>
<android.hardware.HardwareBuffer: long USAGE_GPU_SAMPLED_IMAGE>
<android.hardware.HardwareBuffer: long USAGE_PROTECTED_CONTENT>
<android.hardware.HardwareBuffer: long USAGE_SENSOR_DIRECT_DATA>
<android.hardware.HardwareBuffer: long USAGE_VIDEO_ENCODE>
<android.hardware.HardwareBuffer: int YCBCR_420_888>
<android.hardware.HardwareBuffer: int YCBCR_P010>
android.hardware.Sensor
<android.hardware.Sensor: int getFifoMaxEventCount()>
<android.hardware.Sensor: int getFifoReservedEventCount()>
<android.hardware.Sensor: int getHighestDirectReportRateLevel()>
<android.hardware.Sensor: int getId()>
<android.hardware.Sensor: int getMaxDelay()>
<android.hardware.Sensor: float getMaximumRange()>
<android.hardware.Sensor: int getMinDelay()>
<android.hardware.Sensor: java.lang.String getName()>
<android.hardware.Sensor: float getPower()>
<android.hardware.Sensor: int getReportingMode()>
<android.hardware.Sensor: float getResolution()>
<android.hardware.Sensor: java.lang.String getStringType()>
<android.hardware.Sensor: int getType()>
<android.hardware.Sensor: java.lang.String getVendor()>
<android.hardware.Sensor: int getVersion()>
<android.hardware.Sensor: boolean isAdditionalInfoSupported()>
<android.hardware.Sensor: boolean isDirectChannelTypeSupported(int)>
<android.hardware.Sensor: boolean isDynamicSensor()>
<android.hardware.Sensor: boolean isWakeUpSensor()>
<android.hardware.Sensor: int REPORTING_MODE_CONTINUOUS>
<android.hardware.Sensor: int REPORTING_MODE_ONE_SHOT>
<android.hardware.Sensor: int REPORTING_MODE_ON_CHANGE>
<android.hardware.Sensor: int REPORTING_MODE_SPECIAL_TRIGGER>
<android.hardware.Sensor: java.lang.String STRING_TYPE_ACCELEROMETER>
<android.hardware.Sensor: java.lang.String STRING_TYPE_ACCELEROMETER_LIMITED_AXES>
<android.hardware.Sensor: java.lang.String STRING_TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED>
<android.hardware.Sensor: java.lang.String STRING_TYPE_ACCELEROMETER_UNCALIBRATED>
<android.hardware.Sensor: java.lang.String STRING_TYPE_AMBIENT_TEMPERATURE>
<android.hardware.Sensor: java.lang.String STRING_TYPE_GAME_ROTATION_VECTOR>
<android.hardware.Sensor: java.lang.String STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR>
<android.hardware.Sensor: java.lang.String STRING_TYPE_GRAVITY>
<android.hardware.Sensor: java.lang.String STRING_TYPE_GYROSCOPE>
<android.hardware.Sensor: java.lang.String STRING_TYPE_GYROSCOPE_LIMITED_AXES>
<android.hardware.Sensor: java.lang.String STRING_TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATED>
<android.hardware.Sensor: java.lang.String STRING_TYPE_GYROSCOPE_UNCALIBRATED>
<android.hardware.Sensor: java.lang.String STRING_TYPE_HEADING>
<android.hardware.Sensor: java.lang.String STRING_TYPE_HEAD_TRACKER>
<android.hardware.Sensor: java.lang.String STRING_TYPE_HEART_BEAT>
<android.hardware.Sensor: java.lang.String STRING_TYPE_HEART_RATE>
<android.hardware.Sensor: java.lang.String STRING_TYPE_HINGE_ANGLE>
<android.hardware.Sensor: java.lang.String STRING_TYPE_LIGHT>
<android.hardware.Sensor: java.lang.String STRING_TYPE_LINEAR_ACCELERATION>
<android.hardware.Sensor: java.lang.String STRING_TYPE_LOW_LATENCY_OFFBODY_DETECT>
<android.hardware.Sensor: java.lang.String STRING_TYPE_MAGNETIC_FIELD>
<android.hardware.Sensor: java.lang.String STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED>
<android.hardware.Sensor: java.lang.String STRING_TYPE_MOTION_DETECT>
<android.hardware.Sensor: java.lang.String STRING_TYPE_ORIENTATION>
<android.hardware.Sensor: java.lang.String STRING_TYPE_POSE_6DOF>
<android.hardware.Sensor: java.lang.String STRING_TYPE_PRESSURE>
<android.hardware.Sensor: java.lang.String STRING_TYPE_PROXIMITY>
<android.hardware.Sensor: java.lang.String STRING_TYPE_RELATIVE_HUMIDITY>
<android.hardware.Sensor: java.lang.String STRING_TYPE_ROTATION_VECTOR>
<android.hardware.Sensor: java.lang.String STRING_TYPE_SIGNIFICANT_MOTION>
<android.hardware.Sensor: java.lang.String STRING_TYPE_STATIONARY_DETECT>
<android.hardware.Sensor: java.lang.String STRING_TYPE_STEP_COUNTER>
<android.hardware.Sensor: java.lang.String STRING_TYPE_STEP_DETECTOR>
<android.hardware.Sensor: java.lang.String STRING_TYPE_TEMPERATURE>
<android.hardware.Sensor: int TYPE_ACCELEROMETER>
<android.hardware.Sensor: int TYPE_ACCELEROMETER_LIMITED_AXES>
<android.hardware.Sensor: int TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED>
<android.hardware.Sensor: int TYPE_ACCELEROMETER_UNCALIBRATED>
<android.hardware.Sensor: int TYPE_ALL>
<android.hardware.Sensor: int TYPE_AMBIENT_TEMPERATURE>
<android.hardware.Sensor: int TYPE_DEVICE_PRIVATE_BASE>
<android.hardware.Sensor: int TYPE_GAME_ROTATION_VECTOR>
<android.hardware.Sensor: int TYPE_GEOMAGNETIC_ROTATION_VECTOR>
<android.hardware.Sensor: int TYPE_GRAVITY>
<android.hardware.Sensor: int TYPE_GYROSCOPE>
<android.hardware.Sensor: int TYPE_GYROSCOPE_LIMITED_AXES>
<android.hardware.Sensor: int TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATED>
<android.hardware.Sensor: int TYPE_GYROSCOPE_UNCALIBRATED>
<android.hardware.Sensor: int TYPE_HEADING>
<android.hardware.Sensor: int TYPE_HEAD_TRACKER>
<android.hardware.Sensor: int TYPE_HEART_BEAT>
<android.hardware.Sensor: int TYPE_HEART_RATE>
<android.hardware.Sensor: int TYPE_HINGE_ANGLE>
<android.hardware.Sensor: int TYPE_LIGHT>
<android.hardware.Sensor: int TYPE_LINEAR_ACCELERATION>
<android.hardware.Sensor: int TYPE_LOW_LATENCY_OFFBODY_DETECT>
<android.hardware.Sensor: int TYPE_MAGNETIC_FIELD>
<android.hardware.Sensor: int TYPE_MAGNETIC_FIELD_UNCALIBRATED>
<android.hardware.Sensor: int TYPE_MOTION_DETECT>
<android.hardware.Sensor: int TYPE_ORIENTATION>
<android.hardware.Sensor: int TYPE_POSE_6DOF>
<android.hardware.Sensor: int TYPE_PRESSURE>
<android.hardware.Sensor: int TYPE_PROXIMITY>
<android.hardware.Sensor: int TYPE_RELATIVE_HUMIDITY>
<android.hardware.Sensor: int TYPE_ROTATION_VECTOR>
<android.hardware.Sensor: int TYPE_SIGNIFICANT_MOTION>
<android.hardware.Sensor: int TYPE_STATIONARY_DETECT>
<android.hardware.Sensor: int TYPE_STEP_COUNTER>
<android.hardware.Sensor: int TYPE_STEP_DETECTOR>
<android.hardware.Sensor: int TYPE_TEMPERATURE>
android.hardware.SensorAdditionalInfo
<android.hardware.SensorAdditionalInfo: int TYPE_FRAME_BEGIN>
<android.hardware.SensorAdditionalInfo: int TYPE_FRAME_END>
<android.hardware.SensorAdditionalInfo: int TYPE_INTERNAL_TEMPERATURE>
<android.hardware.SensorAdditionalInfo: int TYPE_SAMPLING>
<android.hardware.SensorAdditionalInfo: int TYPE_SENSOR_PLACEMENT>
<android.hardware.SensorAdditionalInfo: int TYPE_UNTRACKED_DELAY>
<android.hardware.SensorAdditionalInfo: int TYPE_VEC3_CALIBRATION>
<android.hardware.SensorAdditionalInfo: float[] floatValues>
<android.hardware.SensorAdditionalInfo: int[] intValues>
<android.hardware.SensorAdditionalInfo: android.hardware.Sensor sensor>
<android.hardware.SensorAdditionalInfo: int serial>
<android.hardware.SensorAdditionalInfo: int type>
android.hardware.SensorDirectChannel
<android.hardware.SensorDirectChannel: void close()>
<android.hardware.SensorDirectChannel: int configure(android.hardware.Sensor,int)>
<android.hardware.SensorDirectChannel: boolean isOpen()>
<android.hardware.SensorDirectChannel: int RATE_FAST>
<android.hardware.SensorDirectChannel: int RATE_NORMAL>
<android.hardware.SensorDirectChannel: int RATE_STOP>
<android.hardware.SensorDirectChannel: int RATE_VERY_FAST>
<android.hardware.SensorDirectChannel: int TYPE_HARDWARE_BUFFER>
<android.hardware.SensorDirectChannel: int TYPE_MEMORY_FILE>
android.hardware.SensorEvent
<android.hardware.SensorEvent: int accuracy>
<android.hardware.SensorEvent: boolean firstEventAfterDiscontinuity>
<android.hardware.SensorEvent: android.hardware.Sensor sensor>
<android.hardware.SensorEvent: long timestamp>
<android.hardware.SensorEvent: float[] values>
android.hardware.SensorEventCallback
<android.hardware.SensorEventCallback: void <init>()>
<android.hardware.SensorEventCallback: void onAccuracyChanged(android.hardware.Sensor,int)>
<android.hardware.SensorEventCallback: void onFlushCompleted(android.hardware.Sensor)>
<android.hardware.SensorEventCallback: void onSensorAdditionalInfo(android.hardware.SensorAdditionalInfo)>
<android.hardware.SensorEventCallback: void onSensorChanged(android.hardware.SensorEvent)>
android.hardware.SensorEventListener
<android.hardware.SensorEventListener: void onAccuracyChanged(android.hardware.Sensor,int)>
<android.hardware.SensorEventListener: void onSensorChanged(android.hardware.SensorEvent)>
android.hardware.SensorEventListener2
<android.hardware.SensorEventListener2: void onFlushCompleted(android.hardware.Sensor)>
android.hardware.SensorListener
<android.hardware.SensorListener: void onAccuracyChanged(int,int)>
<android.hardware.SensorListener: void onSensorChanged(int,float[])>
android.hardware.SensorManager
<android.hardware.SensorManager: boolean cancelTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>
<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.os.MemoryFile)>
<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.hardware.HardwareBuffer)>
<android.hardware.SensorManager: boolean flush(android.hardware.SensorEventListener)>
<android.hardware.SensorManager: float getAltitude(float,float)>
<android.hardware.SensorManager: void getAngleChange(float[],float[],float[])>
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int,boolean)>
<android.hardware.SensorManager: java.util.List getDynamicSensorList(int)>
<android.hardware.SensorManager: float getInclination(float[])>
<android.hardware.SensorManager: float[] getOrientation(float[],float[])>
<android.hardware.SensorManager: void getQuaternionFromVector(float[],float[])>
<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])>
<android.hardware.SensorManager: void getRotationMatrixFromVector(float[],float[])>
<android.hardware.SensorManager: java.util.List getSensorList(int)>
<android.hardware.SensorManager: int getSensors()>
<android.hardware.SensorManager: boolean isDynamicSensorDiscoverySupported()>
<android.hardware.SensorManager: void registerDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback)>
<android.hardware.SensorManager: void registerDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback,android.os.Handler)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,int)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,int,android.os.Handler)>
<android.hardware.SensorManager: boolean remapCoordinateSystem(float[],int,int,float[])>
<android.hardware.SensorManager: boolean requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>
<android.hardware.SensorManager: void unregisterDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback)>
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener)>
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener,int)>
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>
<android.hardware.SensorManager: int AXIS_MINUS_X>
<android.hardware.SensorManager: int AXIS_MINUS_Y>
<android.hardware.SensorManager: int AXIS_MINUS_Z>
<android.hardware.SensorManager: int AXIS_X>
<android.hardware.SensorManager: int AXIS_Y>
<android.hardware.SensorManager: int AXIS_Z>
<android.hardware.SensorManager: int DATA_X>
<android.hardware.SensorManager: int DATA_Y>
<android.hardware.SensorManager: int DATA_Z>
<android.hardware.SensorManager: float GRAVITY_DEATH_STAR_I>
<android.hardware.SensorManager: float GRAVITY_EARTH>
<android.hardware.SensorManager: float GRAVITY_JUPITER>
<android.hardware.SensorManager: float GRAVITY_MARS>
<android.hardware.SensorManager: float GRAVITY_MERCURY>
<android.hardware.SensorManager: float GRAVITY_MOON>
<android.hardware.SensorManager: float GRAVITY_NEPTUNE>
<android.hardware.SensorManager: float GRAVITY_PLUTO>
<android.hardware.SensorManager: float GRAVITY_SATURN>
<android.hardware.SensorManager: float GRAVITY_SUN>
<android.hardware.SensorManager: float GRAVITY_THE_ISLAND>
<android.hardware.SensorManager: float GRAVITY_URANUS>
<android.hardware.SensorManager: float GRAVITY_VENUS>
<android.hardware.SensorManager: float LIGHT_CLOUDY>
<android.hardware.SensorManager: float LIGHT_FULLMOON>
<android.hardware.SensorManager: float LIGHT_NO_MOON>
<android.hardware.SensorManager: float LIGHT_OVERCAST>
<android.hardware.SensorManager: float LIGHT_SHADE>
<android.hardware.SensorManager: float LIGHT_SUNLIGHT>
<android.hardware.SensorManager: float LIGHT_SUNLIGHT_MAX>
<android.hardware.SensorManager: float LIGHT_SUNRISE>
<android.hardware.SensorManager: float MAGNETIC_FIELD_EARTH_MAX>
<android.hardware.SensorManager: float MAGNETIC_FIELD_EARTH_MIN>
<android.hardware.SensorManager: float PRESSURE_STANDARD_ATMOSPHERE>
<android.hardware.SensorManager: int RAW_DATA_INDEX>
<android.hardware.SensorManager: int RAW_DATA_X>
<android.hardware.SensorManager: int RAW_DATA_Y>
<android.hardware.SensorManager: int RAW_DATA_Z>
<android.hardware.SensorManager: int SENSOR_ACCELEROMETER>
<android.hardware.SensorManager: int SENSOR_ALL>
<android.hardware.SensorManager: int SENSOR_DELAY_FASTEST>
<android.hardware.SensorManager: int SENSOR_DELAY_GAME>
<android.hardware.SensorManager: int SENSOR_DELAY_NORMAL>
<android.hardware.SensorManager: int SENSOR_DELAY_UI>
<android.hardware.SensorManager: int SENSOR_LIGHT>
<android.hardware.SensorManager: int SENSOR_MAGNETIC_FIELD>
<android.hardware.SensorManager: int SENSOR_MAX>
<android.hardware.SensorManager: int SENSOR_MIN>
<android.hardware.SensorManager: int SENSOR_ORIENTATION>
<android.hardware.SensorManager: int SENSOR_ORIENTATION_RAW>
<android.hardware.SensorManager: int SENSOR_PROXIMITY>
<android.hardware.SensorManager: int SENSOR_STATUS_ACCURACY_HIGH>
<android.hardware.SensorManager: int SENSOR_STATUS_ACCURACY_LOW>
<android.hardware.SensorManager: int SENSOR_STATUS_ACCURACY_MEDIUM>
<android.hardware.SensorManager: int SENSOR_STATUS_NO_CONTACT>
<android.hardware.SensorManager: int SENSOR_STATUS_UNRELIABLE>
<android.hardware.SensorManager: int SENSOR_TEMPERATURE>
<android.hardware.SensorManager: int SENSOR_TRICORDER>
<android.hardware.SensorManager: float STANDARD_GRAVITY>
android.hardware.SensorManager$DynamicSensorCallback
<android.hardware.SensorManager$DynamicSensorCallback: void <init>()>
<android.hardware.SensorManager$DynamicSensorCallback: void onDynamicSensorConnected(android.hardware.Sensor)>
<android.hardware.SensorManager$DynamicSensorCallback: void onDynamicSensorDisconnected(android.hardware.Sensor)>
android.hardware.SensorPrivacyManager
<android.hardware.SensorPrivacyManager: boolean supportsSensorToggle(int)>
<android.hardware.SensorPrivacyManager: boolean supportsSensorToggle(int,int)>
<android.hardware.SensorPrivacyManager: int TOGGLE_TYPE_HARDWARE>
<android.hardware.SensorPrivacyManager: int TOGGLE_TYPE_SOFTWARE>
android.hardware.SensorPrivacyManager$Sensors
<android.hardware.SensorPrivacyManager$Sensors: int CAMERA>
<android.hardware.SensorPrivacyManager$Sensors: int MICROPHONE>
android.hardware.SyncFence
<android.hardware.SyncFence: boolean await(java.time.Duration)>
<android.hardware.SyncFence: boolean awaitForever()>
<android.hardware.SyncFence: void close()>
<android.hardware.SyncFence: int describeContents()>
<android.hardware.SyncFence: long getSignalTime()>
<android.hardware.SyncFence: boolean isValid()>
<android.hardware.SyncFence: void writeToParcel(android.os.Parcel,int)>
<android.hardware.SyncFence: android.os.Parcelable$Creator CREATOR>
<android.hardware.SyncFence: long SIGNAL_TIME_INVALID>
<android.hardware.SyncFence: long SIGNAL_TIME_PENDING>
android.hardware.TriggerEvent
<android.hardware.TriggerEvent: android.hardware.Sensor sensor>
<android.hardware.TriggerEvent: long timestamp>
<android.hardware.TriggerEvent: float[] values>
android.hardware.TriggerEventListener
<android.hardware.TriggerEventListener: void <init>()>
<android.hardware.TriggerEventListener: void onTrigger(android.hardware.TriggerEvent)>
android.hardware.biometrics.BiometricManager
<android.hardware.biometrics.BiometricManager: int canAuthenticate()>
<android.hardware.biometrics.BiometricManager: int canAuthenticate(int)>
<android.hardware.biometrics.BiometricManager: android.hardware.biometrics.BiometricManager$Strings getStrings(int)>
<android.hardware.biometrics.BiometricManager: int BIOMETRIC_ERROR_HW_UNAVAILABLE>
<android.hardware.biometrics.BiometricManager: int BIOMETRIC_ERROR_NONE_ENROLLED>
<android.hardware.biometrics.BiometricManager: int BIOMETRIC_ERROR_NO_HARDWARE>
<android.hardware.biometrics.BiometricManager: int BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED>
<android.hardware.biometrics.BiometricManager: int BIOMETRIC_SUCCESS>
android.hardware.biometrics.BiometricManager$Authenticators
<android.hardware.biometrics.BiometricManager$Authenticators: int BIOMETRIC_STRONG>
<android.hardware.biometrics.BiometricManager$Authenticators: int BIOMETRIC_WEAK>
<android.hardware.biometrics.BiometricManager$Authenticators: int DEVICE_CREDENTIAL>
android.hardware.biometrics.BiometricManager$Strings
<android.hardware.biometrics.BiometricManager$Strings: java.lang.CharSequence getButtonLabel()>
<android.hardware.biometrics.BiometricManager$Strings: java.lang.CharSequence getPromptMessage()>
<android.hardware.biometrics.BiometricManager$Strings: java.lang.CharSequence getSettingName()>
android.hardware.biometrics.BiometricPrompt
<android.hardware.biometrics.BiometricPrompt: void authenticate(android.hardware.biometrics.BiometricPrompt$CryptoObject,android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback)>
<android.hardware.biometrics.BiometricPrompt: void authenticate(android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt$AuthenticationCallback)>
<android.hardware.biometrics.BiometricPrompt: int getAllowedAuthenticators()>
<android.hardware.biometrics.BiometricPrompt: java.lang.CharSequence getDescription()>
<android.hardware.biometrics.BiometricPrompt: java.lang.CharSequence getNegativeButtonText()>
<android.hardware.biometrics.BiometricPrompt: java.lang.CharSequence getSubtitle()>
<android.hardware.biometrics.BiometricPrompt: java.lang.CharSequence getTitle()>
<android.hardware.biometrics.BiometricPrompt: boolean isConfirmationRequired()>
<android.hardware.biometrics.BiometricPrompt: int AUTHENTICATION_RESULT_TYPE_BIOMETRIC>
<android.hardware.biometrics.BiometricPrompt: int AUTHENTICATION_RESULT_TYPE_DEVICE_CREDENTIAL>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ACQUIRED_GOOD>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ACQUIRED_IMAGER_DIRTY>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ACQUIRED_INSUFFICIENT>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ACQUIRED_PARTIAL>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ACQUIRED_TOO_FAST>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ACQUIRED_TOO_SLOW>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ERROR_CANCELED>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ERROR_HW_NOT_PRESENT>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ERROR_HW_UNAVAILABLE>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ERROR_LOCKOUT>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ERROR_LOCKOUT_PERMANENT>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ERROR_NO_BIOMETRICS>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ERROR_NO_DEVICE_CREDENTIAL>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ERROR_NO_SPACE>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ERROR_TIMEOUT>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ERROR_UNABLE_TO_PROCESS>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ERROR_USER_CANCELED>
<android.hardware.biometrics.BiometricPrompt: int BIOMETRIC_ERROR_VENDOR>
android.hardware.biometrics.BiometricPrompt$AuthenticationCallback
<android.hardware.biometrics.BiometricPrompt$AuthenticationCallback: void <init>()>
<android.hardware.biometrics.BiometricPrompt$AuthenticationCallback: void onAuthenticationError(int,java.lang.CharSequence)>
<android.hardware.biometrics.BiometricPrompt$AuthenticationCallback: void onAuthenticationFailed()>
<android.hardware.biometrics.BiometricPrompt$AuthenticationCallback: void onAuthenticationHelp(int,java.lang.CharSequence)>
<android.hardware.biometrics.BiometricPrompt$AuthenticationCallback: void onAuthenticationSucceeded(android.hardware.biometrics.BiometricPrompt$AuthenticationResult)>
android.hardware.biometrics.BiometricPrompt$AuthenticationResult
<android.hardware.biometrics.BiometricPrompt$AuthenticationResult: int getAuthenticationType()>
<android.hardware.biometrics.BiometricPrompt$AuthenticationResult: android.hardware.biometrics.BiometricPrompt$CryptoObject getCryptoObject()>
android.hardware.biometrics.BiometricPrompt$Builder
<android.hardware.biometrics.BiometricPrompt$Builder: void <init>(android.content.Context)>
<android.hardware.biometrics.BiometricPrompt$Builder: android.hardware.biometrics.BiometricPrompt build()>
<android.hardware.biometrics.BiometricPrompt$Builder: android.hardware.biometrics.BiometricPrompt$Builder setAllowedAuthenticators(int)>
<android.hardware.biometrics.BiometricPrompt$Builder: android.hardware.biometrics.BiometricPrompt$Builder setConfirmationRequired(boolean)>
<android.hardware.biometrics.BiometricPrompt$Builder: android.hardware.biometrics.BiometricPrompt$Builder setDescription(java.lang.CharSequence)>
<android.hardware.biometrics.BiometricPrompt$Builder: android.hardware.biometrics.BiometricPrompt$Builder setDeviceCredentialAllowed(boolean)>
<android.hardware.biometrics.BiometricPrompt$Builder: android.hardware.biometrics.BiometricPrompt$Builder setNegativeButton(java.lang.CharSequence,java.util.concurrent.Executor,android.content.DialogInterface$OnClickListener)>
<android.hardware.biometrics.BiometricPrompt$Builder: android.hardware.biometrics.BiometricPrompt$Builder setSubtitle(java.lang.CharSequence)>
<android.hardware.biometrics.BiometricPrompt$Builder: android.hardware.biometrics.BiometricPrompt$Builder setTitle(java.lang.CharSequence)>
android.hardware.biometrics.BiometricPrompt$CryptoObject
<android.hardware.biometrics.BiometricPrompt$CryptoObject: void <init>(java.security.Signature)>
<android.hardware.biometrics.BiometricPrompt$CryptoObject: void <init>(javax.crypto.Cipher)>
<android.hardware.biometrics.BiometricPrompt$CryptoObject: void <init>(javax.crypto.Mac)>
<android.hardware.biometrics.BiometricPrompt$CryptoObject: void <init>(android.security.identity.IdentityCredential)>
<android.hardware.biometrics.BiometricPrompt$CryptoObject: void <init>(android.security.identity.PresentationSession)>
<android.hardware.biometrics.BiometricPrompt$CryptoObject: javax.crypto.Cipher getCipher()>
<android.hardware.biometrics.BiometricPrompt$CryptoObject: android.security.identity.IdentityCredential getIdentityCredential()>
<android.hardware.biometrics.BiometricPrompt$CryptoObject: javax.crypto.Mac getMac()>
<android.hardware.biometrics.BiometricPrompt$CryptoObject: android.security.identity.PresentationSession getPresentationSession()>
<android.hardware.biometrics.BiometricPrompt$CryptoObject: java.security.Signature getSignature()>
android.hardware.camera2.CameraAccessException
<android.hardware.camera2.CameraAccessException: void <init>(int)>
<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String)>
<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String,java.lang.Throwable)>
<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.Throwable)>
<android.hardware.camera2.CameraAccessException: int getReason()>
<android.hardware.camera2.CameraAccessException: int CAMERA_DISABLED>
<android.hardware.camera2.CameraAccessException: int CAMERA_DISCONNECTED>
<android.hardware.camera2.CameraAccessException: int CAMERA_ERROR>
<android.hardware.camera2.CameraAccessException: int CAMERA_IN_USE>
<android.hardware.camera2.CameraAccessException: int MAX_CAMERAS_IN_USE>
android.hardware.camera2.CameraCaptureSession
<android.hardware.camera2.CameraCaptureSession: void <init>()>
<android.hardware.camera2.CameraCaptureSession: void abortCaptures()>
<android.hardware.camera2.CameraCaptureSession: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>
<android.hardware.camera2.CameraCaptureSession: int captureBurst(java.util.List,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>
<android.hardware.camera2.CameraCaptureSession: int captureBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>
<android.hardware.camera2.CameraCaptureSession: int captureSingleRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>
<android.hardware.camera2.CameraCaptureSession: void close()>
<android.hardware.camera2.CameraCaptureSession: void finalizeOutputConfigurations(java.util.List)>
<android.hardware.camera2.CameraCaptureSession: android.hardware.camera2.CameraDevice getDevice()>
<android.hardware.camera2.CameraCaptureSession: android.view.Surface getInputSurface()>
<android.hardware.camera2.CameraCaptureSession: boolean isReprocessable()>
<android.hardware.camera2.CameraCaptureSession: void prepare(android.view.Surface)>
<android.hardware.camera2.CameraCaptureSession: int setRepeatingBurst(java.util.List,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>
<android.hardware.camera2.CameraCaptureSession: int setRepeatingBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>
<android.hardware.camera2.CameraCaptureSession: int setRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>
<android.hardware.camera2.CameraCaptureSession: int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>
<android.hardware.camera2.CameraCaptureSession: void stopRepeating()>
<android.hardware.camera2.CameraCaptureSession: boolean supportsOfflineProcessing(android.view.Surface)>
<android.hardware.camera2.CameraCaptureSession: android.hardware.camera2.CameraOfflineSession switchToOffline(java.util.Collection,java.util.concurrent.Executor,android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback)>
<android.hardware.camera2.CameraCaptureSession: void updateOutputConfiguration(android.hardware.camera2.params.OutputConfiguration)>
android.hardware.camera2.CameraCaptureSession$CaptureCallback
<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void <init>()>
<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureBufferLost(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.view.Surface,long)>
<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.TotalCaptureResult)>
<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureFailed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure)>
<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureProgressed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureResult)>
<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureSequenceAborted(android.hardware.camera2.CameraCaptureSession,int)>
<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureSequenceCompleted(android.hardware.camera2.CameraCaptureSession,int,long)>
<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureStarted(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,long,long)>
android.hardware.camera2.CameraCaptureSession$StateCallback
<android.hardware.camera2.CameraCaptureSession$StateCallback: void <init>()>
<android.hardware.camera2.CameraCaptureSession$StateCallback: void onActive(android.hardware.camera2.CameraCaptureSession)>
<android.hardware.camera2.CameraCaptureSession$StateCallback: void onCaptureQueueEmpty(android.hardware.camera2.CameraCaptureSession)>
<android.hardware.camera2.CameraCaptureSession$StateCallback: void onClosed(android.hardware.camera2.CameraCaptureSession)>
<android.hardware.camera2.CameraCaptureSession$StateCallback: void onConfigureFailed(android.hardware.camera2.CameraCaptureSession)>
<android.hardware.camera2.CameraCaptureSession$StateCallback: void onConfigured(android.hardware.camera2.CameraCaptureSession)>
<android.hardware.camera2.CameraCaptureSession$StateCallback: void onReady(android.hardware.camera2.CameraCaptureSession)>
<android.hardware.camera2.CameraCaptureSession$StateCallback: void onSurfacePrepared(android.hardware.camera2.CameraCaptureSession,android.view.Surface)>
android.hardware.camera2.CameraCharacteristics
<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableCaptureRequestKeys()>
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableCaptureResultKeys()>
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailablePhysicalCameraRequestKeys()>
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableSessionKeys()>
<android.hardware.camera2.CameraCharacteristics: java.util.List getKeys()>
<android.hardware.camera2.CameraCharacteristics: java.util.List getKeysNeedingPermission()>
<android.hardware.camera2.CameraCharacteristics: java.util.Set getPhysicalCameraIds()>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.params.RecommendedStreamConfigurationMap getRecommendedStreamConfigurationMap(int)>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key AUTOMOTIVE_LENS_FACING>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key AUTOMOTIVE_LOCATION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key COLOR_CORRECTION_AVAILABLE_ABERRATION_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_ANTIBANDING_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_COMPENSATION_RANGE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_COMPENSATION_STEP>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_LOCK_AVAILABLE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AF_AVAILABLE_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_EFFECTS>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_CAPABILITIES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_SCENE_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AWB_AVAILABLE_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_AWB_LOCK_AVAILABLE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS_AE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS_AF>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS_AWB>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_POST_RAW_SENSITIVITY_BOOST_RANGE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_ZOOM_RATIO_RANGE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key DEPTH_DEPTH_IS_EXCLUSIVE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key DISTORTION_CORRECTION_AVAILABLE_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key EDGE_AVAILABLE_EDGE_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key FLASH_INFO_AVAILABLE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key FLASH_INFO_STRENGTH_DEFAULT_LEVEL>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key FLASH_INFO_STRENGTH_MAXIMUM_LEVEL>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key HOT_PIXEL_AVAILABLE_HOT_PIXEL_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key INFO_DEVICE_STATE_SENSOR_ORIENTATION_MAP>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key INFO_SUPPORTED_HARDWARE_LEVEL>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key INFO_VERSION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key JPEG_AVAILABLE_THUMBNAIL_SIZES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_DISTORTION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_DISTORTION_MAXIMUM_RESOLUTION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_FACING>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_AVAILABLE_APERTURES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_AVAILABLE_FILTER_DENSITIES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_AVAILABLE_FOCAL_LENGTHS>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_AVAILABLE_OPTICAL_STABILIZATION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_FOCUS_DISTANCE_CALIBRATION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_HYPERFOCAL_DISTANCE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_MINIMUM_FOCUS_DISTANCE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INTRINSIC_CALIBRATION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_INTRINSIC_CALIBRATION_MAXIMUM_RESOLUTION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_POSE_REFERENCE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_POSE_ROTATION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_POSE_TRANSLATION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_RADIAL_DISTORTION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REPROCESS_MAX_CAPTURE_STALL>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_CAPABILITIES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_DYNAMIC_RANGE_PROFILES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_INPUT_STREAMS>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_PROC>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_PROC_STALLING>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_RAW>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_PARTIAL_RESULT_COUNT>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_PIPELINE_MAX_DEPTH>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key REQUEST_RECOMMENDED_TEN_BIT_DYNAMIC_RANGE_PROFILE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_MAX_DIGITAL_ZOOM>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_ROTATE_AND_CROP_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_STREAM_USE_CASES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_CROPPING_TYPE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_DEFAULT_SECURE_IMAGE_SIZE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_MANDATORY_CONCURRENT_STREAM_COMBINATIONS>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_MANDATORY_MAXIMUM_RESOLUTION_STREAM_COMBINATIONS>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_MANDATORY_PREVIEW_STABILIZATION_OUTPUT_STREAM_COMBINATIONS>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_MANDATORY_STREAM_COMBINATIONS>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_MANDATORY_TEN_BIT_OUTPUT_STREAM_COMBINATIONS>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_MANDATORY_USE_CASE_STREAM_COMBINATIONS>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAP>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP_MAXIMUM_RESOLUTION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_AVAILABLE_TEST_PATTERN_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_BLACK_LEVEL_PATTERN>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_CALIBRATION_TRANSFORM1>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_CALIBRATION_TRANSFORM2>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_COLOR_TRANSFORM1>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_COLOR_TRANSFORM2>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_FORWARD_MATRIX1>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_FORWARD_MATRIX2>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_BINNING_FACTOR>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_COLOR_FILTER_ARRANGEMENT>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_EXPOSURE_TIME_RANGE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_LENS_SHADING_APPLIED>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_MAX_FRAME_DURATION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PHYSICAL_SIZE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PIXEL_ARRAY_SIZE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PIXEL_ARRAY_SIZE_MAXIMUM_RESOLUTION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_SENSITIVITY_RANGE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_TIMESTAMP_SOURCE>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_WHITE_LEVEL>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_MAX_ANALOG_SENSITIVITY>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_OPTICAL_BLACK_REGIONS>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_ORIENTATION>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_REFERENCE_ILLUMINANT1>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_REFERENCE_ILLUMINANT2>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SHADING_AVAILABLE_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_AVAILABLE_LENS_SHADING_MAP_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_AVAILABLE_OIS_DATA_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_MAX_FACE_COUNT>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SYNC_MAX_LATENCY>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key TONEMAP_AVAILABLE_TONE_MAP_MODES>
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key TONEMAP_MAX_CURVE_POINTS>
android.hardware.camera2.CameraCharacteristics$Key
<android.hardware.camera2.CameraCharacteristics$Key: void <init>(java.lang.String,java.lang.Class)>
<android.hardware.camera2.CameraCharacteristics$Key: java.lang.String getName()>
android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession
<android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession: void <init>()>
<android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession: java.util.List createHighSpeedRequestList(android.hardware.camera2.CaptureRequest)>
android.hardware.camera2.CameraDevice
<android.hardware.camera2.CameraDevice: void close()>
<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int)>
<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int,java.util.Set)>
<android.hardware.camera2.CameraDevice: void createCaptureSession(java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>
<android.hardware.camera2.CameraDevice: void createCaptureSession(android.hardware.camera2.params.SessionConfiguration)>
<android.hardware.camera2.CameraDevice: void createCaptureSessionByOutputConfigurations(java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>
<android.hardware.camera2.CameraDevice: void createConstrainedHighSpeedCaptureSession(java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>
<android.hardware.camera2.CameraDevice: void createExtensionSession(android.hardware.camera2.params.ExtensionSessionConfiguration)>
<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createReprocessCaptureRequest(android.hardware.camera2.TotalCaptureResult)>
<android.hardware.camera2.CameraDevice: void createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>
<android.hardware.camera2.CameraDevice: void createReprocessableCaptureSessionByConfigurations(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>
<android.hardware.camera2.CameraDevice: int getCameraAudioRestriction()>
<android.hardware.camera2.CameraDevice: java.lang.String getId()>
<android.hardware.camera2.CameraDevice: boolean isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration)>
<android.hardware.camera2.CameraDevice: void setCameraAudioRestriction(int)>
<android.hardware.camera2.CameraDevice: int AUDIO_RESTRICTION_NONE>
<android.hardware.camera2.CameraDevice: int AUDIO_RESTRICTION_VIBRATION>
<android.hardware.camera2.CameraDevice: int AUDIO_RESTRICTION_VIBRATION_SOUND>
<android.hardware.camera2.CameraDevice: int TEMPLATE_MANUAL>
<android.hardware.camera2.CameraDevice: int TEMPLATE_PREVIEW>
<android.hardware.camera2.CameraDevice: int TEMPLATE_RECORD>
<android.hardware.camera2.CameraDevice: int TEMPLATE_STILL_CAPTURE>
<android.hardware.camera2.CameraDevice: int TEMPLATE_VIDEO_SNAPSHOT>
<android.hardware.camera2.CameraDevice: int TEMPLATE_ZERO_SHUTTER_LAG>
android.hardware.camera2.CameraDevice$StateCallback
<android.hardware.camera2.CameraDevice$StateCallback: void <init>()>
<android.hardware.camera2.CameraDevice$StateCallback: void onClosed(android.hardware.camera2.CameraDevice)>
<android.hardware.camera2.CameraDevice$StateCallback: void onDisconnected(android.hardware.camera2.CameraDevice)>
<android.hardware.camera2.CameraDevice$StateCallback: void onError(android.hardware.camera2.CameraDevice,int)>
<android.hardware.camera2.CameraDevice$StateCallback: void onOpened(android.hardware.camera2.CameraDevice)>
<android.hardware.camera2.CameraDevice$StateCallback: int ERROR_CAMERA_DEVICE>
<android.hardware.camera2.CameraDevice$StateCallback: int ERROR_CAMERA_DISABLED>
<android.hardware.camera2.CameraDevice$StateCallback: int ERROR_CAMERA_IN_USE>
<android.hardware.camera2.CameraDevice$StateCallback: int ERROR_CAMERA_SERVICE>
<android.hardware.camera2.CameraDevice$StateCallback: int ERROR_MAX_CAMERAS_IN_USE>
android.hardware.camera2.CameraExtensionCharacteristics
<android.hardware.camera2.CameraExtensionCharacteristics: java.util.Set getAvailableCaptureRequestKeys(int)>
<android.hardware.camera2.CameraExtensionCharacteristics: java.util.Set getAvailableCaptureResultKeys(int)>
<android.hardware.camera2.CameraExtensionCharacteristics: android.util.Range getEstimatedCaptureLatencyRangeMillis(int,android.util.Size,int)>
<android.hardware.camera2.CameraExtensionCharacteristics: java.util.List getExtensionSupportedSizes(int,java.lang.Class)>
<android.hardware.camera2.CameraExtensionCharacteristics: java.util.List getExtensionSupportedSizes(int,int)>
<android.hardware.camera2.CameraExtensionCharacteristics: java.util.List getSupportedExtensions()>
<android.hardware.camera2.CameraExtensionCharacteristics: int EXTENSION_AUTOMATIC>
<android.hardware.camera2.CameraExtensionCharacteristics: int EXTENSION_BEAUTY>
<android.hardware.camera2.CameraExtensionCharacteristics: int EXTENSION_BOKEH>
<android.hardware.camera2.CameraExtensionCharacteristics: int EXTENSION_FACE_RETOUCH>
<android.hardware.camera2.CameraExtensionCharacteristics: int EXTENSION_HDR>
<android.hardware.camera2.CameraExtensionCharacteristics: int EXTENSION_NIGHT>
android.hardware.camera2.CameraExtensionSession
<android.hardware.camera2.CameraExtensionSession: int capture(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback)>
<android.hardware.camera2.CameraExtensionSession: void close()>
<android.hardware.camera2.CameraExtensionSession: android.hardware.camera2.CameraDevice getDevice()>
<android.hardware.camera2.CameraExtensionSession: int setRepeatingRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback)>
<android.hardware.camera2.CameraExtensionSession: void stopRepeating()>
android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback
<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void <init>()>
<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureFailed(android.hardware.camera2.CameraExtensionSession,android.hardware.camera2.CaptureRequest)>
<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureProcessStarted(android.hardware.camera2.CameraExtensionSession,android.hardware.camera2.CaptureRequest)>
<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureResultAvailable(android.hardware.camera2.CameraExtensionSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.TotalCaptureResult)>
<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureSequenceAborted(android.hardware.camera2.CameraExtensionSession,int)>
<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureSequenceCompleted(android.hardware.camera2.CameraExtensionSession,int)>
<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureStarted(android.hardware.camera2.CameraExtensionSession,android.hardware.camera2.CaptureRequest,long)>
android.hardware.camera2.CameraExtensionSession$StateCallback
<android.hardware.camera2.CameraExtensionSession$StateCallback: void <init>()>
<android.hardware.camera2.CameraExtensionSession$StateCallback: void onClosed(android.hardware.camera2.CameraExtensionSession)>
<android.hardware.camera2.CameraExtensionSession$StateCallback: void onConfigureFailed(android.hardware.camera2.CameraExtensionSession)>
<android.hardware.camera2.CameraExtensionSession$StateCallback: void onConfigured(android.hardware.camera2.CameraExtensionSession)>
android.hardware.camera2.CameraManager
<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)>
<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraExtensionCharacteristics getCameraExtensionCharacteristics(java.lang.String)>
<android.hardware.camera2.CameraManager: java.lang.String[] getCameraIdList()>
<android.hardware.camera2.CameraManager: java.util.Set getConcurrentCameraIds()>
<android.hardware.camera2.CameraManager: int getTorchStrengthLevel(java.lang.String)>
<android.hardware.camera2.CameraManager: boolean isConcurrentSessionConfigurationSupported(java.util.Map)>
<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)>
<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice$StateCallback)>
<android.hardware.camera2.CameraManager: void registerAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback,android.os.Handler)>
<android.hardware.camera2.CameraManager: void registerAvailabilityCallback(java.util.concurrent.Executor,android.hardware.camera2.CameraManager$AvailabilityCallback)>
<android.hardware.camera2.CameraManager: void registerTorchCallback(android.hardware.camera2.CameraManager$TorchCallback,android.os.Handler)>
<android.hardware.camera2.CameraManager: void registerTorchCallback(java.util.concurrent.Executor,android.hardware.camera2.CameraManager$TorchCallback)>
<android.hardware.camera2.CameraManager: void setTorchMode(java.lang.String,boolean)>
<android.hardware.camera2.CameraManager: void turnOnTorchWithStrengthLevel(java.lang.String,int)>
<android.hardware.camera2.CameraManager: void unregisterAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback)>
<android.hardware.camera2.CameraManager: void unregisterTorchCallback(android.hardware.camera2.CameraManager$TorchCallback)>
android.hardware.camera2.CameraManager$AvailabilityCallback
<android.hardware.camera2.CameraManager$AvailabilityCallback: void <init>()>
<android.hardware.camera2.CameraManager$AvailabilityCallback: void onCameraAccessPrioritiesChanged()>
<android.hardware.camera2.CameraManager$AvailabilityCallback: void onCameraAvailable(java.lang.String)>
<android.hardware.camera2.CameraManager$AvailabilityCallback: void onCameraUnavailable(java.lang.String)>
<android.hardware.camera2.CameraManager$AvailabilityCallback: void onPhysicalCameraAvailable(java.lang.String,java.lang.String)>
<android.hardware.camera2.CameraManager$AvailabilityCallback: void onPhysicalCameraUnavailable(java.lang.String,java.lang.String)>
android.hardware.camera2.CameraManager$TorchCallback
<android.hardware.camera2.CameraManager$TorchCallback: void <init>()>
<android.hardware.camera2.CameraManager$TorchCallback: void onTorchModeChanged(java.lang.String,boolean)>
<android.hardware.camera2.CameraManager$TorchCallback: void onTorchModeUnavailable(java.lang.String)>
<android.hardware.camera2.CameraManager$TorchCallback: void onTorchStrengthLevelChanged(java.lang.String,int)>
android.hardware.camera2.CameraMetadata
<android.hardware.camera2.CameraMetadata: java.util.List getKeys()>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONT>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFT>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHER>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LENS_FACING_EXTERIOR_REAR>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHT>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LENS_FACING_INTERIOR_OTHER>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTER>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFT>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHT>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTER>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFT>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHT>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTER>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFT>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHT>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LOCATION_EXTERIOR_FRONT>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LOCATION_EXTERIOR_LEFT>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LOCATION_EXTERIOR_OTHER>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LOCATION_EXTERIOR_REAR>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LOCATION_EXTERIOR_RIGHT>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LOCATION_EXTRA_FRONT>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LOCATION_EXTRA_LEFT>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LOCATION_EXTRA_OTHER>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LOCATION_EXTRA_REAR>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LOCATION_EXTRA_RIGHT>
<android.hardware.camera2.CameraMetadata: int AUTOMOTIVE_LOCATION_INTERIOR>
<android.hardware.camera2.CameraMetadata: int COLOR_CORRECTION_ABERRATION_MODE_FAST>
<android.hardware.camera2.CameraMetadata: int COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITY>
<android.hardware.camera2.CameraMetadata: int COLOR_CORRECTION_ABERRATION_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int COLOR_CORRECTION_MODE_FAST>
<android.hardware.camera2.CameraMetadata: int COLOR_CORRECTION_MODE_HIGH_QUALITY>
<android.hardware.camera2.CameraMetadata: int COLOR_CORRECTION_MODE_TRANSFORM_MATRIX>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_ANTIBANDING_MODE_50HZ>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_ANTIBANDING_MODE_60HZ>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_ANTIBANDING_MODE_AUTO>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_ANTIBANDING_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_MODE_ON>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_MODE_ON_ALWAYS_FLASH>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_MODE_ON_AUTO_FLASH>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_MODE_ON_EXTERNAL_FLASH>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_PRECAPTURE_TRIGGER_CANCEL>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_PRECAPTURE_TRIGGER_IDLE>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_PRECAPTURE_TRIGGER_START>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_STATE_CONVERGED>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_STATE_FLASH_REQUIRED>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_STATE_INACTIVE>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_STATE_LOCKED>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_STATE_PRECAPTURE>
<android.hardware.camera2.CameraMetadata: int CONTROL_AE_STATE_SEARCHING>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_MODE_AUTO>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_MODE_CONTINUOUS_PICTURE>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_MODE_CONTINUOUS_VIDEO>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_MODE_EDOF>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_MODE_MACRO>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_SCENE_CHANGE_DETECTED>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_SCENE_CHANGE_NOT_DETECTED>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_STATE_ACTIVE_SCAN>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_STATE_FOCUSED_LOCKED>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_STATE_INACTIVE>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_STATE_NOT_FOCUSED_LOCKED>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_STATE_PASSIVE_FOCUSED>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_STATE_PASSIVE_SCAN>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_STATE_PASSIVE_UNFOCUSED>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_TRIGGER_CANCEL>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_TRIGGER_IDLE>
<android.hardware.camera2.CameraMetadata: int CONTROL_AF_TRIGGER_START>
<android.hardware.camera2.CameraMetadata: int CONTROL_AWB_MODE_AUTO>
<android.hardware.camera2.CameraMetadata: int CONTROL_AWB_MODE_CLOUDY_DAYLIGHT>
<android.hardware.camera2.CameraMetadata: int CONTROL_AWB_MODE_DAYLIGHT>
<android.hardware.camera2.CameraMetadata: int CONTROL_AWB_MODE_FLUORESCENT>
<android.hardware.camera2.CameraMetadata: int CONTROL_AWB_MODE_INCANDESCENT>
<android.hardware.camera2.CameraMetadata: int CONTROL_AWB_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int CONTROL_AWB_MODE_SHADE>
<android.hardware.camera2.CameraMetadata: int CONTROL_AWB_MODE_TWILIGHT>
<android.hardware.camera2.CameraMetadata: int CONTROL_AWB_MODE_WARM_FLUORESCENT>
<android.hardware.camera2.CameraMetadata: int CONTROL_AWB_STATE_CONVERGED>
<android.hardware.camera2.CameraMetadata: int CONTROL_AWB_STATE_INACTIVE>
<android.hardware.camera2.CameraMetadata: int CONTROL_AWB_STATE_LOCKED>
<android.hardware.camera2.CameraMetadata: int CONTROL_AWB_STATE_SEARCHING>
<android.hardware.camera2.CameraMetadata: int CONTROL_CAPTURE_INTENT_CUSTOM>
<android.hardware.camera2.CameraMetadata: int CONTROL_CAPTURE_INTENT_MANUAL>
<android.hardware.camera2.CameraMetadata: int CONTROL_CAPTURE_INTENT_MOTION_TRACKING>
<android.hardware.camera2.CameraMetadata: int CONTROL_CAPTURE_INTENT_PREVIEW>
<android.hardware.camera2.CameraMetadata: int CONTROL_CAPTURE_INTENT_STILL_CAPTURE>
<android.hardware.camera2.CameraMetadata: int CONTROL_CAPTURE_INTENT_VIDEO_RECORD>
<android.hardware.camera2.CameraMetadata: int CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOT>
<android.hardware.camera2.CameraMetadata: int CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG>
<android.hardware.camera2.CameraMetadata: int CONTROL_EFFECT_MODE_AQUA>
<android.hardware.camera2.CameraMetadata: int CONTROL_EFFECT_MODE_BLACKBOARD>
<android.hardware.camera2.CameraMetadata: int CONTROL_EFFECT_MODE_MONO>
<android.hardware.camera2.CameraMetadata: int CONTROL_EFFECT_MODE_NEGATIVE>
<android.hardware.camera2.CameraMetadata: int CONTROL_EFFECT_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int CONTROL_EFFECT_MODE_POSTERIZE>
<android.hardware.camera2.CameraMetadata: int CONTROL_EFFECT_MODE_SEPIA>
<android.hardware.camera2.CameraMetadata: int CONTROL_EFFECT_MODE_SOLARIZE>
<android.hardware.camera2.CameraMetadata: int CONTROL_EFFECT_MODE_WHITEBOARD>
<android.hardware.camera2.CameraMetadata: int CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUS>
<android.hardware.camera2.CameraMetadata: int CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTURE>
<android.hardware.camera2.CameraMetadata: int CONTROL_EXTENDED_SCENE_MODE_DISABLED>
<android.hardware.camera2.CameraMetadata: int CONTROL_MODE_AUTO>
<android.hardware.camera2.CameraMetadata: int CONTROL_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int CONTROL_MODE_OFF_KEEP_STATE>
<android.hardware.camera2.CameraMetadata: int CONTROL_MODE_USE_EXTENDED_SCENE_MODE>
<android.hardware.camera2.CameraMetadata: int CONTROL_MODE_USE_SCENE_MODE>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_ACTION>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_BARCODE>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_BEACH>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_CANDLELIGHT>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_DISABLED>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_FACE_PRIORITY>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_FIREWORKS>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_HDR>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_HIGH_SPEED_VIDEO>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_LANDSCAPE>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_NIGHT>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_NIGHT_PORTRAIT>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_PARTY>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_PORTRAIT>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_SNOW>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_SPORTS>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_STEADYPHOTO>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_SUNSET>
<android.hardware.camera2.CameraMetadata: int CONTROL_SCENE_MODE_THEATRE>
<android.hardware.camera2.CameraMetadata: int CONTROL_VIDEO_STABILIZATION_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int CONTROL_VIDEO_STABILIZATION_MODE_ON>
<android.hardware.camera2.CameraMetadata: int CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATION>
<android.hardware.camera2.CameraMetadata: int DISTORTION_CORRECTION_MODE_FAST>
<android.hardware.camera2.CameraMetadata: int DISTORTION_CORRECTION_MODE_HIGH_QUALITY>
<android.hardware.camera2.CameraMetadata: int DISTORTION_CORRECTION_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int EDGE_MODE_FAST>
<android.hardware.camera2.CameraMetadata: int EDGE_MODE_HIGH_QUALITY>
<android.hardware.camera2.CameraMetadata: int EDGE_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int EDGE_MODE_ZERO_SHUTTER_LAG>
<android.hardware.camera2.CameraMetadata: int FLASH_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int FLASH_MODE_SINGLE>
<android.hardware.camera2.CameraMetadata: int FLASH_MODE_TORCH>
<android.hardware.camera2.CameraMetadata: int FLASH_STATE_CHARGING>
<android.hardware.camera2.CameraMetadata: int FLASH_STATE_FIRED>
<android.hardware.camera2.CameraMetadata: int FLASH_STATE_PARTIAL>
<android.hardware.camera2.CameraMetadata: int FLASH_STATE_READY>
<android.hardware.camera2.CameraMetadata: int FLASH_STATE_UNAVAILABLE>
<android.hardware.camera2.CameraMetadata: int HOT_PIXEL_MODE_FAST>
<android.hardware.camera2.CameraMetadata: int HOT_PIXEL_MODE_HIGH_QUALITY>
<android.hardware.camera2.CameraMetadata: int HOT_PIXEL_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int INFO_SUPPORTED_HARDWARE_LEVEL_3>
<android.hardware.camera2.CameraMetadata: int INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL>
<android.hardware.camera2.CameraMetadata: int INFO_SUPPORTED_HARDWARE_LEVEL_FULL>
<android.hardware.camera2.CameraMetadata: int INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY>
<android.hardware.camera2.CameraMetadata: int INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED>
<android.hardware.camera2.CameraMetadata: int LENS_FACING_BACK>
<android.hardware.camera2.CameraMetadata: int LENS_FACING_EXTERNAL>
<android.hardware.camera2.CameraMetadata: int LENS_FACING_FRONT>
<android.hardware.camera2.CameraMetadata: int LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATE>
<android.hardware.camera2.CameraMetadata: int LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATED>
<android.hardware.camera2.CameraMetadata: int LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATED>
<android.hardware.camera2.CameraMetadata: int LENS_OPTICAL_STABILIZATION_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int LENS_OPTICAL_STABILIZATION_MODE_ON>
<android.hardware.camera2.CameraMetadata: int LENS_POSE_REFERENCE_AUTOMOTIVE>
<android.hardware.camera2.CameraMetadata: int LENS_POSE_REFERENCE_GYROSCOPE>
<android.hardware.camera2.CameraMetadata: int LENS_POSE_REFERENCE_PRIMARY_CAMERA>
<android.hardware.camera2.CameraMetadata: int LENS_POSE_REFERENCE_UNDEFINED>
<android.hardware.camera2.CameraMetadata: int LENS_STATE_MOVING>
<android.hardware.camera2.CameraMetadata: int LENS_STATE_STATIONARY>
<android.hardware.camera2.CameraMetadata: int LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATE>
<android.hardware.camera2.CameraMetadata: int LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATED>
<android.hardware.camera2.CameraMetadata: int NOISE_REDUCTION_MODE_FAST>
<android.hardware.camera2.CameraMetadata: int NOISE_REDUCTION_MODE_HIGH_QUALITY>
<android.hardware.camera2.CameraMetadata: int NOISE_REDUCTION_MODE_MINIMAL>
<android.hardware.camera2.CameraMetadata: int NOISE_REDUCTION_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAG>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BIT>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKING>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSING>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_RAW>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGS>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSING>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATA>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASE>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERA>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSOR>
<android.hardware.camera2.CameraMetadata: int REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING>
<android.hardware.camera2.CameraMetadata: int SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULT>
<android.hardware.camera2.CameraMetadata: int SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW>
<android.hardware.camera2.CameraMetadata: int SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILL>
<android.hardware.camera2.CameraMetadata: int SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTURE>
<android.hardware.camera2.CameraMetadata: int SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALL>
<android.hardware.camera2.CameraMetadata: int SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORD>
<android.hardware.camera2.CameraMetadata: int SCALER_CROPPING_TYPE_CENTER_ONLY>
<android.hardware.camera2.CameraMetadata: int SCALER_CROPPING_TYPE_FREEFORM>
<android.hardware.camera2.CameraMetadata: int SCALER_ROTATE_AND_CROP_180>
<android.hardware.camera2.CameraMetadata: int SCALER_ROTATE_AND_CROP_270>
<android.hardware.camera2.CameraMetadata: int SCALER_ROTATE_AND_CROP_90>
<android.hardware.camera2.CameraMetadata: int SCALER_ROTATE_AND_CROP_AUTO>
<android.hardware.camera2.CameraMetadata: int SCALER_ROTATE_AND_CROP_NONE>
<android.hardware.camera2.CameraMetadata: int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGR>
<android.hardware.camera2.CameraMetadata: int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRG>
<android.hardware.camera2.CameraMetadata: int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBG>
<android.hardware.camera2.CameraMetadata: int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONO>
<android.hardware.camera2.CameraMetadata: int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIR>
<android.hardware.camera2.CameraMetadata: int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGB>
<android.hardware.camera2.CameraMetadata: int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGB>
<android.hardware.camera2.CameraMetadata: int SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME>
<android.hardware.camera2.CameraMetadata: int SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWN>
<android.hardware.camera2.CameraMetadata: int SENSOR_PIXEL_MODE_DEFAULT>
<android.hardware.camera2.CameraMetadata: int SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTION>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHER>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENT>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_D50>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_D55>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_D65>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_D75>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENT>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENT>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHER>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_FLASH>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENT>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTEN>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_SHADE>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_STANDARD_A>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_STANDARD_B>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_STANDARD_C>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_TUNGSTEN>
<android.hardware.camera2.CameraMetadata: int SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENT>
<android.hardware.camera2.CameraMetadata: int SENSOR_TEST_PATTERN_MODE_COLOR_BARS>
<android.hardware.camera2.CameraMetadata: int SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAY>
<android.hardware.camera2.CameraMetadata: int SENSOR_TEST_PATTERN_MODE_CUSTOM1>
<android.hardware.camera2.CameraMetadata: int SENSOR_TEST_PATTERN_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int SENSOR_TEST_PATTERN_MODE_PN9>
<android.hardware.camera2.CameraMetadata: int SENSOR_TEST_PATTERN_MODE_SOLID_COLOR>
<android.hardware.camera2.CameraMetadata: int SHADING_MODE_FAST>
<android.hardware.camera2.CameraMetadata: int SHADING_MODE_HIGH_QUALITY>
<android.hardware.camera2.CameraMetadata: int SHADING_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int STATISTICS_FACE_DETECT_MODE_FULL>
<android.hardware.camera2.CameraMetadata: int STATISTICS_FACE_DETECT_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int STATISTICS_FACE_DETECT_MODE_SIMPLE>
<android.hardware.camera2.CameraMetadata: int STATISTICS_LENS_SHADING_MAP_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int STATISTICS_LENS_SHADING_MAP_MODE_ON>
<android.hardware.camera2.CameraMetadata: int STATISTICS_OIS_DATA_MODE_OFF>
<android.hardware.camera2.CameraMetadata: int STATISTICS_OIS_DATA_MODE_ON>
<android.hardware.camera2.CameraMetadata: int STATISTICS_SCENE_FLICKER_50HZ>
<android.hardware.camera2.CameraMetadata: int STATISTICS_SCENE_FLICKER_60HZ>
<android.hardware.camera2.CameraMetadata: int STATISTICS_SCENE_FLICKER_NONE>
<android.hardware.camera2.CameraMetadata: int SYNC_MAX_LATENCY_PER_FRAME_CONTROL>
<android.hardware.camera2.CameraMetadata: int SYNC_MAX_LATENCY_UNKNOWN>
<android.hardware.camera2.CameraMetadata: int TONEMAP_MODE_CONTRAST_CURVE>
<android.hardware.camera2.CameraMetadata: int TONEMAP_MODE_FAST>
<android.hardware.camera2.CameraMetadata: int TONEMAP_MODE_GAMMA_VALUE>
<android.hardware.camera2.CameraMetadata: int TONEMAP_MODE_HIGH_QUALITY>
<android.hardware.camera2.CameraMetadata: int TONEMAP_MODE_PRESET_CURVE>
<android.hardware.camera2.CameraMetadata: int TONEMAP_PRESET_CURVE_REC709>
<android.hardware.camera2.CameraMetadata: int TONEMAP_PRESET_CURVE_SRGB>
android.hardware.camera2.CameraOfflineSession
<android.hardware.camera2.CameraOfflineSession: void <init>()>
android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback
<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void <init>()>
<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void onClosed(android.hardware.camera2.CameraOfflineSession)>
<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void onError(android.hardware.camera2.CameraOfflineSession,int)>
<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void onIdle(android.hardware.camera2.CameraOfflineSession)>
<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void onReady(android.hardware.camera2.CameraOfflineSession)>
<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void onSwitchFailed(android.hardware.camera2.CameraOfflineSession)>
<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: int STATUS_INTERNAL_ERROR>
android.hardware.camera2.CaptureFailure
<android.hardware.camera2.CaptureFailure: long getFrameNumber()>
<android.hardware.camera2.CaptureFailure: java.lang.String getPhysicalCameraId()>
<android.hardware.camera2.CaptureFailure: int getReason()>
<android.hardware.camera2.CaptureFailure: android.hardware.camera2.CaptureRequest getRequest()>
<android.hardware.camera2.CaptureFailure: int getSequenceId()>
<android.hardware.camera2.CaptureFailure: boolean wasImageCaptured()>
<android.hardware.camera2.CaptureFailure: int REASON_ERROR>
<android.hardware.camera2.CaptureFailure: int REASON_FLUSHED>
android.hardware.camera2.CaptureRequest
<android.hardware.camera2.CaptureRequest: int describeContents()>
<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>
<android.hardware.camera2.CaptureRequest: java.util.List getKeys()>
<android.hardware.camera2.CaptureRequest: java.lang.Object getTag()>
<android.hardware.camera2.CaptureRequest: boolean isReprocess()>
<android.hardware.camera2.CaptureRequest: void writeToParcel(android.os.Parcel,int)>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key BLACK_LEVEL_LOCK>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_ABERRATION_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_GAINS>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_TRANSFORM>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_ANTIBANDING_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_EXPOSURE_COMPENSATION>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_LOCK>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_PRECAPTURE_TRIGGER>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_REGIONS>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_TARGET_FPS_RANGE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_REGIONS>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_LOCK>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_REGIONS>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_EFFECT_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_ENABLE_ZSL>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_EXTENDED_SCENE_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_POST_RAW_SENSITIVITY_BOOST>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_SCENE_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_VIDEO_STABILIZATION_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_ZOOM_RATIO>
<android.hardware.camera2.CaptureRequest: android.os.Parcelable$Creator CREATOR>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key DISTORTION_CORRECTION_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key EDGE_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key FLASH_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key HOT_PIXEL_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_GPS_LOCATION>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_ORIENTATION>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_QUALITY>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_QUALITY>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_SIZE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_APERTURE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_FILTER_DENSITY>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_FOCAL_LENGTH>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_FOCUS_DISTANCE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key LENS_OPTICAL_STABILIZATION_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key NOISE_REDUCTION_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key REPROCESS_EFFECTIVE_EXPOSURE_FACTOR>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_ROTATE_AND_CROP>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SENSOR_EXPOSURE_TIME>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SENSOR_FRAME_DURATION>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SENSOR_PIXEL_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SENSOR_SENSITIVITY>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SENSOR_TEST_PATTERN_DATA>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SENSOR_TEST_PATTERN_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SHADING_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key STATISTICS_FACE_DETECT_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key STATISTICS_HOT_PIXEL_MAP_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key STATISTICS_LENS_SHADING_MAP_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key STATISTICS_OIS_DATA_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_GAMMA>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_MODE>
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key TONEMAP_PRESET_CURVE>
android.hardware.camera2.CaptureRequest$Builder
<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>
<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest build()>
<android.hardware.camera2.CaptureRequest$Builder: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>
<android.hardware.camera2.CaptureRequest$Builder: java.lang.Object getPhysicalCameraKey(android.hardware.camera2.CaptureRequest$Key,java.lang.String)>
<android.hardware.camera2.CaptureRequest$Builder: void removeTarget(android.view.Surface)>
<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>
<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest$Builder setPhysicalCameraKey(android.hardware.camera2.CaptureRequest$Key,java.lang.Object,java.lang.String)>
<android.hardware.camera2.CaptureRequest$Builder: void setTag(java.lang.Object)>
android.hardware.camera2.CaptureRequest$Key
<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>
<android.hardware.camera2.CaptureRequest$Key: java.lang.String getName()>
android.hardware.camera2.CaptureResult
<android.hardware.camera2.CaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>
<android.hardware.camera2.CaptureResult: java.lang.String getCameraId()>
<android.hardware.camera2.CaptureResult: long getFrameNumber()>
<android.hardware.camera2.CaptureResult: java.util.List getKeys()>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureRequest getRequest()>
<android.hardware.camera2.CaptureResult: int getSequenceId()>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key BLACK_LEVEL_LOCK>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key COLOR_CORRECTION_ABERRATION_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key COLOR_CORRECTION_GAINS>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key COLOR_CORRECTION_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key COLOR_CORRECTION_TRANSFORM>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_ANTIBANDING_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_EXPOSURE_COMPENSATION>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_LOCK>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_PRECAPTURE_TRIGGER>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_REGIONS>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_STATE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_TARGET_FPS_RANGE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_REGIONS>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_SCENE_CHANGE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_STATE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_TRIGGER>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AWB_LOCK>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AWB_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AWB_REGIONS>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AWB_STATE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_CAPTURE_INTENT>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_EFFECT_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_ENABLE_ZSL>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_EXTENDED_SCENE_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_POST_RAW_SENSITIVITY_BOOST>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_SCENE_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_VIDEO_STABILIZATION_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_ZOOM_RATIO>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key DISTORTION_CORRECTION_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key EDGE_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key FLASH_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key FLASH_STATE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key HOT_PIXEL_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_GPS_LOCATION>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_ORIENTATION>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_QUALITY>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_THUMBNAIL_QUALITY>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key JPEG_THUMBNAIL_SIZE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_APERTURE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_DISTORTION>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_FILTER_DENSITY>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_FOCAL_LENGTH>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_FOCUS_DISTANCE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_FOCUS_RANGE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_INTRINSIC_CALIBRATION>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_OPTICAL_STABILIZATION_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_POSE_ROTATION>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_POSE_TRANSLATION>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_RADIAL_DISTORTION>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LENS_STATE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_ID>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key NOISE_REDUCTION_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key REPROCESS_EFFECTIVE_EXPOSURE_FACTOR>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key REQUEST_PIPELINE_DEPTH>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SCALER_CROP_REGION>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SCALER_ROTATE_AND_CROP>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_DYNAMIC_BLACK_LEVEL>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_DYNAMIC_WHITE_LEVEL>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_EXPOSURE_TIME>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_FRAME_DURATION>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_GREEN_SPLIT>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_NEUTRAL_COLOR_POINT>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_NOISE_PROFILE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_PIXEL_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_RAW_BINNING_FACTOR_USED>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_ROLLING_SHUTTER_SKEW>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_SENSITIVITY>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_TEST_PATTERN_DATA>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_TEST_PATTERN_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_TIMESTAMP>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SHADING_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACES>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_DETECT_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_HOT_PIXEL_MAP>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_HOT_PIXEL_MAP_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_LENS_SHADING_CORRECTION_MAP>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_LENS_SHADING_MAP_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_OIS_DATA_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_OIS_SAMPLES>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key STATISTICS_SCENE_FLICKER>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key TONEMAP_CURVE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key TONEMAP_GAMMA>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key TONEMAP_MODE>
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key TONEMAP_PRESET_CURVE>
android.hardware.camera2.CaptureResult$Key
<android.hardware.camera2.CaptureResult$Key: void <init>(java.lang.String,java.lang.Class)>
<android.hardware.camera2.CaptureResult$Key: java.lang.String getName()>
android.hardware.camera2.DngCreator
<android.hardware.camera2.DngCreator: void <init>(android.hardware.camera2.CameraCharacteristics,android.hardware.camera2.CaptureResult)>
<android.hardware.camera2.DngCreator: void close()>
<android.hardware.camera2.DngCreator: android.hardware.camera2.DngCreator setDescription(java.lang.String)>
<android.hardware.camera2.DngCreator: android.hardware.camera2.DngCreator setLocation(android.location.Location)>
<android.hardware.camera2.DngCreator: android.hardware.camera2.DngCreator setOrientation(int)>
<android.hardware.camera2.DngCreator: android.hardware.camera2.DngCreator setThumbnail(android.graphics.Bitmap)>
<android.hardware.camera2.DngCreator: android.hardware.camera2.DngCreator setThumbnail(android.media.Image)>
<android.hardware.camera2.DngCreator: void writeByteBuffer(java.io.OutputStream,android.util.Size,java.nio.ByteBuffer,long)>
<android.hardware.camera2.DngCreator: void writeImage(java.io.OutputStream,android.media.Image)>
<android.hardware.camera2.DngCreator: void writeInputStream(java.io.OutputStream,android.util.Size,java.io.InputStream,long)>
<android.hardware.camera2.DngCreator: int MAX_THUMBNAIL_DIMENSION>
android.hardware.camera2.MultiResolutionImageReader
<android.hardware.camera2.MultiResolutionImageReader: void <init>(java.util.Collection,int,int)>
<android.hardware.camera2.MultiResolutionImageReader: void close()>
<android.hardware.camera2.MultiResolutionImageReader: void finalize()>
<android.hardware.camera2.MultiResolutionImageReader: void flush()>
<android.hardware.camera2.MultiResolutionImageReader: android.hardware.camera2.params.MultiResolutionStreamInfo getStreamInfoForImageReader(android.media.ImageReader)>
<android.hardware.camera2.MultiResolutionImageReader: android.view.Surface getSurface()>
<android.hardware.camera2.MultiResolutionImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,java.util.concurrent.Executor)>
android.hardware.camera2.TotalCaptureResult
<android.hardware.camera2.TotalCaptureResult: java.util.List getPartialResults()>
<android.hardware.camera2.TotalCaptureResult: java.util.Map getPhysicalCameraResults()>
<android.hardware.camera2.TotalCaptureResult: java.util.Map getPhysicalCameraTotalResults()>
android.hardware.camera2.params.BlackLevelPattern
<android.hardware.camera2.params.BlackLevelPattern: void copyTo(int[],int)>
<android.hardware.camera2.params.BlackLevelPattern: int getOffsetForIndex(int,int)>
<android.hardware.camera2.params.BlackLevelPattern: int COUNT>
android.hardware.camera2.params.Capability
<android.hardware.camera2.params.Capability: android.util.Size getMaxStreamingSize()>
<android.hardware.camera2.params.Capability: int getMode()>
<android.hardware.camera2.params.Capability: android.util.Range getZoomRatioRange()>
android.hardware.camera2.params.ColorSpaceTransform
<android.hardware.camera2.params.ColorSpaceTransform: void <init>(android.util.Rational[])>
<android.hardware.camera2.params.ColorSpaceTransform: void <init>(int[])>
<android.hardware.camera2.params.ColorSpaceTransform: void copyElements(android.util.Rational[],int)>
<android.hardware.camera2.params.ColorSpaceTransform: void copyElements(int[],int)>
<android.hardware.camera2.params.ColorSpaceTransform: android.util.Rational getElement(int,int)>
android.hardware.camera2.params.DeviceStateSensorOrientationMap
<android.hardware.camera2.params.DeviceStateSensorOrientationMap: int getSensorOrientation(long)>
<android.hardware.camera2.params.DeviceStateSensorOrientationMap: long FOLDED>
<android.hardware.camera2.params.DeviceStateSensorOrientationMap: long NORMAL>
android.hardware.camera2.params.DynamicRangeProfiles
<android.hardware.camera2.params.DynamicRangeProfiles: void <init>(long[])>
<android.hardware.camera2.params.DynamicRangeProfiles: java.util.Set getProfileCaptureRequestConstraints(long)>
<android.hardware.camera2.params.DynamicRangeProfiles: java.util.Set getSupportedProfiles()>
<android.hardware.camera2.params.DynamicRangeProfiles: boolean isExtraLatencyPresent(long)>
<android.hardware.camera2.params.DynamicRangeProfiles: long DOLBY_VISION_10B_HDR_OEM>
<android.hardware.camera2.params.DynamicRangeProfiles: long DOLBY_VISION_10B_HDR_OEM_PO>
<android.hardware.camera2.params.DynamicRangeProfiles: long DOLBY_VISION_10B_HDR_REF>
<android.hardware.camera2.params.DynamicRangeProfiles: long DOLBY_VISION_10B_HDR_REF_PO>
<android.hardware.camera2.params.DynamicRangeProfiles: long DOLBY_VISION_8B_HDR_OEM>
<android.hardware.camera2.params.DynamicRangeProfiles: long DOLBY_VISION_8B_HDR_OEM_PO>
<android.hardware.camera2.params.DynamicRangeProfiles: long DOLBY_VISION_8B_HDR_REF>
<android.hardware.camera2.params.DynamicRangeProfiles: long DOLBY_VISION_8B_HDR_REF_PO>
<android.hardware.camera2.params.DynamicRangeProfiles: long HDR10>
<android.hardware.camera2.params.DynamicRangeProfiles: long HDR10_PLUS>
<android.hardware.camera2.params.DynamicRangeProfiles: long HLG10>
<android.hardware.camera2.params.DynamicRangeProfiles: long PUBLIC_MAX>
<android.hardware.camera2.params.DynamicRangeProfiles: long STANDARD>
android.hardware.camera2.params.ExtensionSessionConfiguration
<android.hardware.camera2.params.ExtensionSessionConfiguration: void <init>(int,java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraExtensionSession$StateCallback)>
<android.hardware.camera2.params.ExtensionSessionConfiguration: java.util.concurrent.Executor getExecutor()>
<android.hardware.camera2.params.ExtensionSessionConfiguration: int getExtension()>
<android.hardware.camera2.params.ExtensionSessionConfiguration: java.util.List getOutputConfigurations()>
<android.hardware.camera2.params.ExtensionSessionConfiguration: android.hardware.camera2.CameraExtensionSession$StateCallback getStateCallback()>
android.hardware.camera2.params.Face
<android.hardware.camera2.params.Face: android.graphics.Rect getBounds()>
<android.hardware.camera2.params.Face: int getId()>
<android.hardware.camera2.params.Face: android.graphics.Point getLeftEyePosition()>
<android.hardware.camera2.params.Face: android.graphics.Point getMouthPosition()>
<android.hardware.camera2.params.Face: android.graphics.Point getRightEyePosition()>
<android.hardware.camera2.params.Face: int getScore()>
<android.hardware.camera2.params.Face: int ID_UNSUPPORTED>
<android.hardware.camera2.params.Face: int SCORE_MAX>
<android.hardware.camera2.params.Face: int SCORE_MIN>
android.hardware.camera2.params.InputConfiguration
<android.hardware.camera2.params.InputConfiguration: void <init>(int,int,int)>
<android.hardware.camera2.params.InputConfiguration: void <init>(java.util.Collection,int)>
<android.hardware.camera2.params.InputConfiguration: int getFormat()>
<android.hardware.camera2.params.InputConfiguration: int getHeight()>
<android.hardware.camera2.params.InputConfiguration: int getWidth()>
<android.hardware.camera2.params.InputConfiguration: boolean isMultiResolution()>
android.hardware.camera2.params.LensShadingMap
<android.hardware.camera2.params.LensShadingMap: void copyGainFactors(float[],int)>
<android.hardware.camera2.params.LensShadingMap: int getColumnCount()>
<android.hardware.camera2.params.LensShadingMap: float getGainFactor(int,int,int)>
<android.hardware.camera2.params.LensShadingMap: int getGainFactorCount()>
<android.hardware.camera2.params.LensShadingMap: android.hardware.camera2.params.RggbChannelVector getGainFactorVector(int,int)>
<android.hardware.camera2.params.LensShadingMap: int getRowCount()>
<android.hardware.camera2.params.LensShadingMap: float MINIMUM_GAIN_FACTOR>
android.hardware.camera2.params.MandatoryStreamCombination
<android.hardware.camera2.params.MandatoryStreamCombination: java.lang.CharSequence getDescription()>
<android.hardware.camera2.params.MandatoryStreamCombination: java.util.List getStreamsInformation()>
<android.hardware.camera2.params.MandatoryStreamCombination: boolean isReprocessable()>
android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation
<android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation: int get10BitFormat()>
<android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation: java.util.List getAvailableSizes()>
<android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation: int getFormat()>
<android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation: long getStreamUseCase()>
<android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation: boolean is10BitCapable()>
<android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation: boolean isInput()>
<android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation: boolean isMaximumSize()>
<android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation: boolean isUltraHighResolution()>
android.hardware.camera2.params.MeteringRectangle
<android.hardware.camera2.params.MeteringRectangle: void <init>(int,int,int,int,int)>
<android.hardware.camera2.params.MeteringRectangle: void <init>(android.graphics.Point,android.util.Size,int)>
<android.hardware.camera2.params.MeteringRectangle: void <init>(android.graphics.Rect,int)>
<android.hardware.camera2.params.MeteringRectangle: boolean equals(android.hardware.camera2.params.MeteringRectangle)>
<android.hardware.camera2.params.MeteringRectangle: int getHeight()>
<android.hardware.camera2.params.MeteringRectangle: int getMeteringWeight()>
<android.hardware.camera2.params.MeteringRectangle: android.graphics.Rect getRect()>
<android.hardware.camera2.params.MeteringRectangle: android.util.Size getSize()>
<android.hardware.camera2.params.MeteringRectangle: android.graphics.Point getUpperLeftPoint()>
<android.hardware.camera2.params.MeteringRectangle: int getWidth()>
<android.hardware.camera2.params.MeteringRectangle: int getX()>
<android.hardware.camera2.params.MeteringRectangle: int getY()>
<android.hardware.camera2.params.MeteringRectangle: int METERING_WEIGHT_DONT_CARE>
<android.hardware.camera2.params.MeteringRectangle: int METERING_WEIGHT_MAX>
<android.hardware.camera2.params.MeteringRectangle: int METERING_WEIGHT_MIN>
android.hardware.camera2.params.MultiResolutionStreamConfigurationMap
<android.hardware.camera2.params.MultiResolutionStreamConfigurationMap: int[] getInputFormats()>
<android.hardware.camera2.params.MultiResolutionStreamConfigurationMap: java.util.Collection getInputInfo(int)>
<android.hardware.camera2.params.MultiResolutionStreamConfigurationMap: int[] getOutputFormats()>
<android.hardware.camera2.params.MultiResolutionStreamConfigurationMap: java.util.Collection getOutputInfo(int)>
android.hardware.camera2.params.MultiResolutionStreamInfo
<android.hardware.camera2.params.MultiResolutionStreamInfo: void <init>(int,int,java.lang.String)>
<android.hardware.camera2.params.MultiResolutionStreamInfo: int getHeight()>
<android.hardware.camera2.params.MultiResolutionStreamInfo: java.lang.String getPhysicalCameraId()>
<android.hardware.camera2.params.MultiResolutionStreamInfo: int getWidth()>
android.hardware.camera2.params.OisSample
<android.hardware.camera2.params.OisSample: void <init>(long,float,float)>
<android.hardware.camera2.params.OisSample: long getTimestamp()>
<android.hardware.camera2.params.OisSample: float getXshift()>
<android.hardware.camera2.params.OisSample: float getYshift()>
android.hardware.camera2.params.OutputConfiguration
<android.hardware.camera2.params.OutputConfiguration: void <init>(android.view.Surface)>
<android.hardware.camera2.params.OutputConfiguration: void <init>(int,android.view.Surface)>
<android.hardware.camera2.params.OutputConfiguration: void <init>(android.util.Size,java.lang.Class)>
<android.hardware.camera2.params.OutputConfiguration: void addSensorPixelModeUsed(int)>
<android.hardware.camera2.params.OutputConfiguration: void addSurface(android.view.Surface)>
<android.hardware.camera2.params.OutputConfiguration: java.util.Collection createInstancesForMultiResolutionOutput(android.hardware.camera2.MultiResolutionImageReader)>
<android.hardware.camera2.params.OutputConfiguration: int describeContents()>
<android.hardware.camera2.params.OutputConfiguration: void enableSurfaceSharing()>
<android.hardware.camera2.params.OutputConfiguration: long getDynamicRangeProfile()>
<android.hardware.camera2.params.OutputConfiguration: int getMaxSharedSurfaceCount()>
<android.hardware.camera2.params.OutputConfiguration: int getMirrorMode()>
<android.hardware.camera2.params.OutputConfiguration: long getStreamUseCase()>
<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()>
<android.hardware.camera2.params.OutputConfiguration: int getSurfaceGroupId()>
<android.hardware.camera2.params.OutputConfiguration: java.util.List getSurfaces()>
<android.hardware.camera2.params.OutputConfiguration: int getTimestampBase()>
<android.hardware.camera2.params.OutputConfiguration: void removeSensorPixelModeUsed(int)>
<android.hardware.camera2.params.OutputConfiguration: void removeSurface(android.view.Surface)>
<android.hardware.camera2.params.OutputConfiguration: void setDynamicRangeProfile(long)>
<android.hardware.camera2.params.OutputConfiguration: void setMirrorMode(int)>
<android.hardware.camera2.params.OutputConfiguration: void setPhysicalCameraId(java.lang.String)>
<android.hardware.camera2.params.OutputConfiguration: void setStreamUseCase(long)>
<android.hardware.camera2.params.OutputConfiguration: void setTimestampBase(int)>
<android.hardware.camera2.params.OutputConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.hardware.camera2.params.OutputConfiguration: android.os.Parcelable$Creator CREATOR>
<android.hardware.camera2.params.OutputConfiguration: int MIRROR_MODE_AUTO>
<android.hardware.camera2.params.OutputConfiguration: int MIRROR_MODE_H>
<android.hardware.camera2.params.OutputConfiguration: int MIRROR_MODE_NONE>
<android.hardware.camera2.params.OutputConfiguration: int MIRROR_MODE_V>
<android.hardware.camera2.params.OutputConfiguration: int SURFACE_GROUP_ID_NONE>
<android.hardware.camera2.params.OutputConfiguration: int TIMESTAMP_BASE_CHOREOGRAPHER_SYNCED>
<android.hardware.camera2.params.OutputConfiguration: int TIMESTAMP_BASE_DEFAULT>
<android.hardware.camera2.params.OutputConfiguration: int TIMESTAMP_BASE_MONOTONIC>
<android.hardware.camera2.params.OutputConfiguration: int TIMESTAMP_BASE_REALTIME>
<android.hardware.camera2.params.OutputConfiguration: int TIMESTAMP_BASE_SENSOR>
android.hardware.camera2.params.RecommendedStreamConfigurationMap
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighResolutionOutputSizes(int)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoFpsRanges()>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoFpsRangesFor(android.util.Size)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoSizes()>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoSizesFor(android.util.Range)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getInputFormats()>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getInputSizes(int)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getOutputFormats()>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputMinFrameDuration(int,android.util.Size)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputMinFrameDuration(java.lang.Class,android.util.Size)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getOutputSizes(int)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getOutputSizes(java.lang.Class)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputStallDuration(int,android.util.Size)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputStallDuration(java.lang.Class,android.util.Size)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: int getRecommendedUseCase()>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getValidOutputFormatsForInput(int)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: boolean isOutputSupportedFor(int)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: boolean isOutputSupportedFor(android.view.Surface)>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: int USECASE_10BIT_OUTPUT>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: int USECASE_LOW_LATENCY_SNAPSHOT>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: int USECASE_PREVIEW>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: int USECASE_RAW>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: int USECASE_RECORD>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: int USECASE_SNAPSHOT>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: int USECASE_VIDEO_SNAPSHOT>
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: int USECASE_ZSL>
android.hardware.camera2.params.RggbChannelVector
<android.hardware.camera2.params.RggbChannelVector: void <init>(float,float,float,float)>
<android.hardware.camera2.params.RggbChannelVector: void copyTo(float[],int)>
<android.hardware.camera2.params.RggbChannelVector: float getBlue()>
<android.hardware.camera2.params.RggbChannelVector: float getComponent(int)>
<android.hardware.camera2.params.RggbChannelVector: float getGreenEven()>
<android.hardware.camera2.params.RggbChannelVector: float getGreenOdd()>
<android.hardware.camera2.params.RggbChannelVector: float getRed()>
<android.hardware.camera2.params.RggbChannelVector: int BLUE>
<android.hardware.camera2.params.RggbChannelVector: int COUNT>
<android.hardware.camera2.params.RggbChannelVector: int GREEN_EVEN>
<android.hardware.camera2.params.RggbChannelVector: int GREEN_ODD>
<android.hardware.camera2.params.RggbChannelVector: int RED>
android.hardware.camera2.params.SessionConfiguration
<android.hardware.camera2.params.SessionConfiguration: void <init>(int,java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$StateCallback)>
<android.hardware.camera2.params.SessionConfiguration: int describeContents()>
<android.hardware.camera2.params.SessionConfiguration: java.util.concurrent.Executor getExecutor()>
<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.params.InputConfiguration getInputConfiguration()>
<android.hardware.camera2.params.SessionConfiguration: java.util.List getOutputConfigurations()>
<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.CaptureRequest getSessionParameters()>
<android.hardware.camera2.params.SessionConfiguration: int getSessionType()>
<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.CameraCaptureSession$StateCallback getStateCallback()>
<android.hardware.camera2.params.SessionConfiguration: void setInputConfiguration(android.hardware.camera2.params.InputConfiguration)>
<android.hardware.camera2.params.SessionConfiguration: void setSessionParameters(android.hardware.camera2.CaptureRequest)>
<android.hardware.camera2.params.SessionConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.hardware.camera2.params.SessionConfiguration: android.os.Parcelable$Creator CREATOR>
<android.hardware.camera2.params.SessionConfiguration: int SESSION_HIGH_SPEED>
<android.hardware.camera2.params.SessionConfiguration: int SESSION_REGULAR>
android.hardware.camera2.params.StreamConfigurationMap
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighResolutionOutputSizes(int)>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Range[] getHighSpeedVideoFpsRanges()>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Range[] getHighSpeedVideoFpsRangesFor(android.util.Size)>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighSpeedVideoSizes()>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighSpeedVideoSizesFor(android.util.Range)>
<android.hardware.camera2.params.StreamConfigurationMap: int[] getInputFormats()>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getInputSizes(int)>
<android.hardware.camera2.params.StreamConfigurationMap: int[] getOutputFormats()>
<android.hardware.camera2.params.StreamConfigurationMap: long getOutputMinFrameDuration(int,android.util.Size)>
<android.hardware.camera2.params.StreamConfigurationMap: long getOutputMinFrameDuration(java.lang.Class,android.util.Size)>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(java.lang.Class)>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>
<android.hardware.camera2.params.StreamConfigurationMap: long getOutputStallDuration(int,android.util.Size)>
<android.hardware.camera2.params.StreamConfigurationMap: long getOutputStallDuration(java.lang.Class,android.util.Size)>
<android.hardware.camera2.params.StreamConfigurationMap: int[] getValidOutputFormatsForInput(int)>
<android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(int)>
<android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(java.lang.Class)>
<android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(android.view.Surface)>
android.hardware.camera2.params.TonemapCurve
<android.hardware.camera2.params.TonemapCurve: void <init>(float[],float[],float[])>
<android.hardware.camera2.params.TonemapCurve: void copyColorCurve(int,float[],int)>
<android.hardware.camera2.params.TonemapCurve: android.graphics.PointF getPoint(int,int)>
<android.hardware.camera2.params.TonemapCurve: int getPointCount(int)>
<android.hardware.camera2.params.TonemapCurve: int CHANNEL_BLUE>
<android.hardware.camera2.params.TonemapCurve: int CHANNEL_GREEN>
<android.hardware.camera2.params.TonemapCurve: int CHANNEL_RED>
<android.hardware.camera2.params.TonemapCurve: float LEVEL_BLACK>
<android.hardware.camera2.params.TonemapCurve: float LEVEL_WHITE>
<android.hardware.camera2.params.TonemapCurve: int POINT_SIZE>
android.hardware.display.DeviceProductInfo
<android.hardware.display.DeviceProductInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,int,int)>
<android.hardware.display.DeviceProductInfo: int describeContents()>
<android.hardware.display.DeviceProductInfo: int getConnectionToSinkType()>
<android.hardware.display.DeviceProductInfo: int getManufactureWeek()>
<android.hardware.display.DeviceProductInfo: int getManufactureYear()>
<android.hardware.display.DeviceProductInfo: java.lang.String getManufacturerPnpId()>
<android.hardware.display.DeviceProductInfo: int getModelYear()>
<android.hardware.display.DeviceProductInfo: java.lang.String getName()>
<android.hardware.display.DeviceProductInfo: java.lang.String getProductId()>
<android.hardware.display.DeviceProductInfo: void writeToParcel(android.os.Parcel,int)>
<android.hardware.display.DeviceProductInfo: int CONNECTION_TO_SINK_BUILT_IN>
<android.hardware.display.DeviceProductInfo: int CONNECTION_TO_SINK_DIRECT>
<android.hardware.display.DeviceProductInfo: int CONNECTION_TO_SINK_TRANSITIVE>
<android.hardware.display.DeviceProductInfo: int CONNECTION_TO_SINK_UNKNOWN>
<android.hardware.display.DeviceProductInfo: android.os.Parcelable$Creator CREATOR>
android.hardware.display.DisplayManager
<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int)>
<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>
<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()>
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays(java.lang.String)>
<android.hardware.display.DisplayManager: int getMatchContentFrameRateUserPreference()>
<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>
<android.hardware.display.DisplayManager: void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)>
<android.hardware.display.DisplayManager: java.lang.String DISPLAY_CATEGORY_PRESENTATION>
<android.hardware.display.DisplayManager: int MATCH_CONTENT_FRAMERATE_ALWAYS>
<android.hardware.display.DisplayManager: int MATCH_CONTENT_FRAMERATE_NEVER>
<android.hardware.display.DisplayManager: int MATCH_CONTENT_FRAMERATE_SEAMLESSS_ONLY>
<android.hardware.display.DisplayManager: int MATCH_CONTENT_FRAMERATE_UNKNOWN>
<android.hardware.display.DisplayManager: int VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR>
<android.hardware.display.DisplayManager: int VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY>
<android.hardware.display.DisplayManager: int VIRTUAL_DISPLAY_FLAG_PRESENTATION>
<android.hardware.display.DisplayManager: int VIRTUAL_DISPLAY_FLAG_PUBLIC>
<android.hardware.display.DisplayManager: int VIRTUAL_DISPLAY_FLAG_SECURE>
android.hardware.display.DisplayManager$DisplayListener
<android.hardware.display.DisplayManager$DisplayListener: void onDisplayAdded(int)>
<android.hardware.display.DisplayManager$DisplayListener: void onDisplayChanged(int)>
<android.hardware.display.DisplayManager$DisplayListener: void onDisplayRemoved(int)>
android.hardware.display.VirtualDisplay
<android.hardware.display.VirtualDisplay: android.view.Display getDisplay()>
<android.hardware.display.VirtualDisplay: android.view.Surface getSurface()>
<android.hardware.display.VirtualDisplay: void release()>
<android.hardware.display.VirtualDisplay: void resize(int,int,int)>
<android.hardware.display.VirtualDisplay: void setSurface(android.view.Surface)>
android.hardware.display.VirtualDisplay$Callback
<android.hardware.display.VirtualDisplay$Callback: void <init>()>
<android.hardware.display.VirtualDisplay$Callback: void onPaused()>
<android.hardware.display.VirtualDisplay$Callback: void onResumed()>
<android.hardware.display.VirtualDisplay$Callback: void onStopped()>
android.hardware.fingerprint.FingerprintManager
<android.hardware.fingerprint.FingerprintManager: void authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler)>
<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints()>
<android.hardware.fingerprint.FingerprintManager: boolean isHardwareDetected()>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ACQUIRED_GOOD>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ACQUIRED_IMAGER_DIRTY>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ACQUIRED_INSUFFICIENT>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ACQUIRED_PARTIAL>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ACQUIRED_TOO_FAST>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ACQUIRED_TOO_SLOW>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_CANCELED>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_HW_NOT_PRESENT>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_HW_UNAVAILABLE>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_LOCKOUT>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_LOCKOUT_PERMANENT>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_NO_FINGERPRINTS>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_NO_SPACE>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_TIMEOUT>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_UNABLE_TO_PROCESS>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_USER_CANCELED>
<android.hardware.fingerprint.FingerprintManager: int FINGERPRINT_ERROR_VENDOR>
android.hardware.fingerprint.FingerprintManager$AuthenticationCallback
<android.hardware.fingerprint.FingerprintManager$AuthenticationCallback: void <init>()>
<android.hardware.fingerprint.FingerprintManager$AuthenticationCallback: void onAuthenticationError(int,java.lang.CharSequence)>
<android.hardware.fingerprint.FingerprintManager$AuthenticationCallback: void onAuthenticationFailed()>
<android.hardware.fingerprint.FingerprintManager$AuthenticationCallback: void onAuthenticationHelp(int,java.lang.CharSequence)>
<android.hardware.fingerprint.FingerprintManager$AuthenticationCallback: void onAuthenticationSucceeded(android.hardware.fingerprint.FingerprintManager$AuthenticationResult)>
android.hardware.fingerprint.FingerprintManager$AuthenticationResult
<android.hardware.fingerprint.FingerprintManager$AuthenticationResult: android.hardware.fingerprint.FingerprintManager$CryptoObject getCryptoObject()>
android.hardware.fingerprint.FingerprintManager$CryptoObject
<android.hardware.fingerprint.FingerprintManager$CryptoObject: void <init>(java.security.Signature)>
<android.hardware.fingerprint.FingerprintManager$CryptoObject: void <init>(javax.crypto.Cipher)>
<android.hardware.fingerprint.FingerprintManager$CryptoObject: void <init>(javax.crypto.Mac)>
<android.hardware.fingerprint.FingerprintManager$CryptoObject: javax.crypto.Cipher getCipher()>
<android.hardware.fingerprint.FingerprintManager$CryptoObject: javax.crypto.Mac getMac()>
<android.hardware.fingerprint.FingerprintManager$CryptoObject: java.security.Signature getSignature()>
android.hardware.input.InputManager
<android.hardware.input.InputManager: android.view.InputDevice getInputDevice(int)>
<android.hardware.input.InputManager: int[] getInputDeviceIds()>
<android.hardware.input.InputManager: float getMaximumObscuringOpacityForTouch()>
<android.hardware.input.InputManager: void registerInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener,android.os.Handler)>
<android.hardware.input.InputManager: void unregisterInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener)>
<android.hardware.input.InputManager: android.view.VerifiedInputEvent verifyInputEvent(android.view.InputEvent)>
<android.hardware.input.InputManager: java.lang.String ACTION_QUERY_KEYBOARD_LAYOUTS>
<android.hardware.input.InputManager: java.lang.String META_DATA_KEYBOARD_LAYOUTS>
android.hardware.input.InputManager$InputDeviceListener
<android.hardware.input.InputManager$InputDeviceListener: void onInputDeviceAdded(int)>
<android.hardware.input.InputManager$InputDeviceListener: void onInputDeviceChanged(int)>
<android.hardware.input.InputManager$InputDeviceListener: void onInputDeviceRemoved(int)>
android.hardware.lights.Light
<android.hardware.lights.Light: int describeContents()>
<android.hardware.lights.Light: int getId()>
<android.hardware.lights.Light: java.lang.String getName()>
<android.hardware.lights.Light: int getOrdinal()>
<android.hardware.lights.Light: int getType()>
<android.hardware.lights.Light: boolean hasBrightnessControl()>
<android.hardware.lights.Light: boolean hasRgbControl()>
<android.hardware.lights.Light: void writeToParcel(android.os.Parcel,int)>
<android.hardware.lights.Light: android.os.Parcelable$Creator CREATOR>
<android.hardware.lights.Light: int LIGHT_CAPABILITY_BRIGHTNESS>
<android.hardware.lights.Light: int LIGHT_CAPABILITY_RGB>
<android.hardware.lights.Light: int LIGHT_TYPE_INPUT>
<android.hardware.lights.Light: int LIGHT_TYPE_MICROPHONE>
<android.hardware.lights.Light: int LIGHT_TYPE_PLAYER_ID>
android.hardware.lights.LightState
<android.hardware.lights.LightState: int describeContents()>
<android.hardware.lights.LightState: int getColor()>
<android.hardware.lights.LightState: int getPlayerId()>
<android.hardware.lights.LightState: void writeToParcel(android.os.Parcel,int)>
<android.hardware.lights.LightState: android.os.Parcelable$Creator CREATOR>
android.hardware.lights.LightState$Builder
<android.hardware.lights.LightState$Builder: void <init>()>
<android.hardware.lights.LightState$Builder: android.hardware.lights.LightState build()>
<android.hardware.lights.LightState$Builder: android.hardware.lights.LightState$Builder setColor(int)>
<android.hardware.lights.LightState$Builder: android.hardware.lights.LightState$Builder setPlayerId(int)>
android.hardware.lights.LightsManager
<android.hardware.lights.LightsManager: android.hardware.lights.LightState getLightState(android.hardware.lights.Light)>
<android.hardware.lights.LightsManager: java.util.List getLights()>
<android.hardware.lights.LightsManager: android.hardware.lights.LightsManager$LightsSession openSession()>
android.hardware.lights.LightsManager$LightsSession
<android.hardware.lights.LightsManager$LightsSession: void close()>
<android.hardware.lights.LightsManager$LightsSession: void requestLights(android.hardware.lights.LightsRequest)>
android.hardware.lights.LightsRequest
<android.hardware.lights.LightsRequest: java.util.List getLightStates()>
<android.hardware.lights.LightsRequest: java.util.List getLights()>
<android.hardware.lights.LightsRequest: java.util.Map getLightsAndStates()>
android.hardware.lights.LightsRequest$Builder
<android.hardware.lights.LightsRequest$Builder: void <init>()>
<android.hardware.lights.LightsRequest$Builder: android.hardware.lights.LightsRequest$Builder addLight(android.hardware.lights.Light,android.hardware.lights.LightState)>
<android.hardware.lights.LightsRequest$Builder: android.hardware.lights.LightsRequest build()>
<android.hardware.lights.LightsRequest$Builder: android.hardware.lights.LightsRequest$Builder clearLight(android.hardware.lights.Light)>
android.hardware.usb.UsbAccessory
<android.hardware.usb.UsbAccessory: int describeContents()>
<android.hardware.usb.UsbAccessory: java.lang.String getDescription()>
<android.hardware.usb.UsbAccessory: java.lang.String getManufacturer()>
<android.hardware.usb.UsbAccessory: java.lang.String getModel()>
<android.hardware.usb.UsbAccessory: java.lang.String getSerial()>
<android.hardware.usb.UsbAccessory: java.lang.String getUri()>
<android.hardware.usb.UsbAccessory: java.lang.String getVersion()>
<android.hardware.usb.UsbAccessory: void writeToParcel(android.os.Parcel,int)>
<android.hardware.usb.UsbAccessory: android.os.Parcelable$Creator CREATOR>
android.hardware.usb.UsbConfiguration
<android.hardware.usb.UsbConfiguration: int describeContents()>
<android.hardware.usb.UsbConfiguration: int getId()>
<android.hardware.usb.UsbConfiguration: android.hardware.usb.UsbInterface getInterface(int)>
<android.hardware.usb.UsbConfiguration: int getInterfaceCount()>
<android.hardware.usb.UsbConfiguration: int getMaxPower()>
<android.hardware.usb.UsbConfiguration: java.lang.String getName()>
<android.hardware.usb.UsbConfiguration: boolean isRemoteWakeup()>
<android.hardware.usb.UsbConfiguration: boolean isSelfPowered()>
<android.hardware.usb.UsbConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.hardware.usb.UsbConfiguration: android.os.Parcelable$Creator CREATOR>
android.hardware.usb.UsbConstants
<android.hardware.usb.UsbConstants: void <init>()>
<android.hardware.usb.UsbConstants: int USB_CLASS_APP_SPEC>
<android.hardware.usb.UsbConstants: int USB_CLASS_AUDIO>
<android.hardware.usb.UsbConstants: int USB_CLASS_CDC_DATA>
<android.hardware.usb.UsbConstants: int USB_CLASS_COMM>
<android.hardware.usb.UsbConstants: int USB_CLASS_CONTENT_SEC>
<android.hardware.usb.UsbConstants: int USB_CLASS_CSCID>
<android.hardware.usb.UsbConstants: int USB_CLASS_HID>
<android.hardware.usb.UsbConstants: int USB_CLASS_HUB>
<android.hardware.usb.UsbConstants: int USB_CLASS_MASS_STORAGE>
<android.hardware.usb.UsbConstants: int USB_CLASS_MISC>
<android.hardware.usb.UsbConstants: int USB_CLASS_PER_INTERFACE>
<android.hardware.usb.UsbConstants: int USB_CLASS_PHYSICA>
<android.hardware.usb.UsbConstants: int USB_CLASS_PRINTER>
<android.hardware.usb.UsbConstants: int USB_CLASS_STILL_IMAGE>
<android.hardware.usb.UsbConstants: int USB_CLASS_VENDOR_SPEC>
<android.hardware.usb.UsbConstants: int USB_CLASS_VIDEO>
<android.hardware.usb.UsbConstants: int USB_CLASS_WIRELESS_CONTROLLER>
<android.hardware.usb.UsbConstants: int USB_DIR_IN>
<android.hardware.usb.UsbConstants: int USB_DIR_OUT>
<android.hardware.usb.UsbConstants: int USB_ENDPOINT_DIR_MASK>
<android.hardware.usb.UsbConstants: int USB_ENDPOINT_NUMBER_MASK>
<android.hardware.usb.UsbConstants: int USB_ENDPOINT_XFERTYPE_MASK>
<android.hardware.usb.UsbConstants: int USB_ENDPOINT_XFER_BULK>
<android.hardware.usb.UsbConstants: int USB_ENDPOINT_XFER_CONTROL>
<android.hardware.usb.UsbConstants: int USB_ENDPOINT_XFER_INT>
<android.hardware.usb.UsbConstants: int USB_ENDPOINT_XFER_ISOC>
<android.hardware.usb.UsbConstants: int USB_INTERFACE_SUBCLASS_BOOT>
<android.hardware.usb.UsbConstants: int USB_SUBCLASS_VENDOR_SPEC>
<android.hardware.usb.UsbConstants: int USB_TYPE_CLASS>
<android.hardware.usb.UsbConstants: int USB_TYPE_MASK>
<android.hardware.usb.UsbConstants: int USB_TYPE_RESERVED>
<android.hardware.usb.UsbConstants: int USB_TYPE_STANDARD>
<android.hardware.usb.UsbConstants: int USB_TYPE_VENDOR>
android.hardware.usb.UsbDevice
<android.hardware.usb.UsbDevice: int describeContents()>
<android.hardware.usb.UsbDevice: android.hardware.usb.UsbConfiguration getConfiguration(int)>
<android.hardware.usb.UsbDevice: int getConfigurationCount()>
<android.hardware.usb.UsbDevice: int getDeviceClass()>
<android.hardware.usb.UsbDevice: int getDeviceId()>
<android.hardware.usb.UsbDevice: int getDeviceId(java.lang.String)>
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()>
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName(int)>
<android.hardware.usb.UsbDevice: int getDeviceProtocol()>
<android.hardware.usb.UsbDevice: int getDeviceSubclass()>
<android.hardware.usb.UsbDevice: android.hardware.usb.UsbInterface getInterface(int)>
<android.hardware.usb.UsbDevice: int getInterfaceCount()>
<android.hardware.usb.UsbDevice: java.lang.String getManufacturerName()>
<android.hardware.usb.UsbDevice: int getProductId()>
<android.hardware.usb.UsbDevice: java.lang.String getProductName()>
<android.hardware.usb.UsbDevice: java.lang.String getSerialNumber()>
<android.hardware.usb.UsbDevice: int getVendorId()>
<android.hardware.usb.UsbDevice: java.lang.String getVersion()>
<android.hardware.usb.UsbDevice: void writeToParcel(android.os.Parcel,int)>
<android.hardware.usb.UsbDevice: android.os.Parcelable$Creator CREATOR>
android.hardware.usb.UsbDeviceConnection
<android.hardware.usb.UsbDeviceConnection: int bulkTransfer(android.hardware.usb.UsbEndpoint,byte[],int,int)>
<android.hardware.usb.UsbDeviceConnection: int bulkTransfer(android.hardware.usb.UsbEndpoint,byte[],int,int,int)>
<android.hardware.usb.UsbDeviceConnection: boolean claimInterface(android.hardware.usb.UsbInterface,boolean)>
<android.hardware.usb.UsbDeviceConnection: void close()>
<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int)>
<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int,int)>
<android.hardware.usb.UsbDeviceConnection: int getFileDescriptor()>
<android.hardware.usb.UsbDeviceConnection: byte[] getRawDescriptors()>
<android.hardware.usb.UsbDeviceConnection: java.lang.String getSerial()>
<android.hardware.usb.UsbDeviceConnection: boolean releaseInterface(android.hardware.usb.UsbInterface)>
<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbRequest requestWait()>
<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbRequest requestWait(long)>
<android.hardware.usb.UsbDeviceConnection: boolean setConfiguration(android.hardware.usb.UsbConfiguration)>
<android.hardware.usb.UsbDeviceConnection: boolean setInterface(android.hardware.usb.UsbInterface)>
android.hardware.usb.UsbEndpoint
<android.hardware.usb.UsbEndpoint: int describeContents()>
<android.hardware.usb.UsbEndpoint: int getAddress()>
<android.hardware.usb.UsbEndpoint: int getAttributes()>
<android.hardware.usb.UsbEndpoint: int getDirection()>
<android.hardware.usb.UsbEndpoint: int getEndpointNumber()>
<android.hardware.usb.UsbEndpoint: int getInterval()>
<android.hardware.usb.UsbEndpoint: int getMaxPacketSize()>
<android.hardware.usb.UsbEndpoint: int getType()>
<android.hardware.usb.UsbEndpoint: void writeToParcel(android.os.Parcel,int)>
<android.hardware.usb.UsbEndpoint: android.os.Parcelable$Creator CREATOR>
android.hardware.usb.UsbInterface
<android.hardware.usb.UsbInterface: int describeContents()>
<android.hardware.usb.UsbInterface: int getAlternateSetting()>
<android.hardware.usb.UsbInterface: android.hardware.usb.UsbEndpoint getEndpoint(int)>
<android.hardware.usb.UsbInterface: int getEndpointCount()>
<android.hardware.usb.UsbInterface: int getId()>
<android.hardware.usb.UsbInterface: int getInterfaceClass()>
<android.hardware.usb.UsbInterface: int getInterfaceProtocol()>
<android.hardware.usb.UsbInterface: int getInterfaceSubclass()>
<android.hardware.usb.UsbInterface: java.lang.String getName()>
<android.hardware.usb.UsbInterface: void writeToParcel(android.os.Parcel,int)>
<android.hardware.usb.UsbInterface: android.os.Parcelable$Creator CREATOR>
android.hardware.usb.UsbManager
<android.hardware.usb.UsbManager: android.hardware.usb.UsbAccessory[] getAccessoryList()>
<android.hardware.usb.UsbManager: java.util.HashMap getDeviceList()>
<android.hardware.usb.UsbManager: boolean hasPermission(android.hardware.usb.UsbDevice)>
<android.hardware.usb.UsbManager: boolean hasPermission(android.hardware.usb.UsbAccessory)>
<android.hardware.usb.UsbManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
<android.hardware.usb.UsbManager: android.hardware.usb.UsbDeviceConnection openDevice(android.hardware.usb.UsbDevice)>
<android.hardware.usb.UsbManager: void requestPermission(android.hardware.usb.UsbDevice,android.app.PendingIntent)>
<android.hardware.usb.UsbManager: void requestPermission(android.hardware.usb.UsbAccessory,android.app.PendingIntent)>
<android.hardware.usb.UsbManager: java.lang.String ACTION_USB_ACCESSORY_ATTACHED>
<android.hardware.usb.UsbManager: java.lang.String ACTION_USB_ACCESSORY_DETACHED>
<android.hardware.usb.UsbManager: java.lang.String ACTION_USB_DEVICE_ATTACHED>
<android.hardware.usb.UsbManager: java.lang.String ACTION_USB_DEVICE_DETACHED>
<android.hardware.usb.UsbManager: java.lang.String EXTRA_ACCESSORY>
<android.hardware.usb.UsbManager: java.lang.String EXTRA_DEVICE>
<android.hardware.usb.UsbManager: java.lang.String EXTRA_PERMISSION_GRANTED>
android.hardware.usb.UsbRequest
<android.hardware.usb.UsbRequest: void <init>()>
<android.hardware.usb.UsbRequest: boolean cancel()>
<android.hardware.usb.UsbRequest: void close()>
<android.hardware.usb.UsbRequest: java.lang.Object getClientData()>
<android.hardware.usb.UsbRequest: android.hardware.usb.UsbEndpoint getEndpoint()>
<android.hardware.usb.UsbRequest: boolean initialize(android.hardware.usb.UsbDeviceConnection,android.hardware.usb.UsbEndpoint)>
<android.hardware.usb.UsbRequest: boolean queue(java.nio.ByteBuffer,int)>
<android.hardware.usb.UsbRequest: boolean queue(java.nio.ByteBuffer)>
<android.hardware.usb.UsbRequest: void setClientData(java.lang.Object)>
android.inputmethodservice.AbstractInputMethodService
<android.inputmethodservice.AbstractInputMethodService: void <init>()>
<android.inputmethodservice.AbstractInputMethodService: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>
<android.inputmethodservice.AbstractInputMethodService: android.os.IBinder onBind(android.content.Intent)>
<android.inputmethodservice.AbstractInputMethodService: android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl onCreateInputMethodInterface()>
<android.inputmethodservice.AbstractInputMethodService: android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl onCreateInputMethodSessionInterface()>
<android.inputmethodservice.AbstractInputMethodService: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.inputmethodservice.AbstractInputMethodService: boolean onTrackballEvent(android.view.MotionEvent)>
android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl: void <init>(android.inputmethodservice.AbstractInputMethodService)>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl: void createSession(android.view.inputmethod.InputMethod$SessionCallback)>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl: void revokeSession(android.view.inputmethod.InputMethodSession)>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl: void setSessionEnabled(android.view.inputmethod.InputMethodSession,boolean)>
android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl: void <init>(android.inputmethodservice.AbstractInputMethodService)>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl: void dispatchGenericMotionEvent(int,android.view.MotionEvent,android.view.inputmethod.InputMethodSession$EventCallback)>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl: void dispatchKeyEvent(int,android.view.KeyEvent,android.view.inputmethod.InputMethodSession$EventCallback)>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl: void dispatchTrackballEvent(int,android.view.MotionEvent,android.view.inputmethod.InputMethodSession$EventCallback)>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl: boolean isEnabled()>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl: boolean isRevoked()>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl: void revokeSelf()>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl: void setEnabled(boolean)>
android.inputmethodservice.ExtractEditText
<android.inputmethodservice.ExtractEditText: void <init>(android.content.Context)>
<android.inputmethodservice.ExtractEditText: void <init>(android.content.Context,android.util.AttributeSet)>
<android.inputmethodservice.ExtractEditText: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.inputmethodservice.ExtractEditText: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.inputmethodservice.ExtractEditText: void finishInternalChanges()>
<android.inputmethodservice.ExtractEditText: boolean hasVerticalScrollBar()>
<android.inputmethodservice.ExtractEditText: void startInternalChanges()>
android.inputmethodservice.InputMethodService
<android.inputmethodservice.InputMethodService: void <init>()>
<android.inputmethodservice.InputMethodService: boolean enableHardwareAcceleration()>
<android.inputmethodservice.InputMethodService: void finishStylusHandwriting()>
<android.inputmethodservice.InputMethodService: int getBackDisposition()>
<android.inputmethodservice.InputMethodService: int getCandidatesHiddenVisibility()>
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputBinding getCurrentInputBinding()>
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputConnection getCurrentInputConnection()>
<android.inputmethodservice.InputMethodService: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>
<android.inputmethodservice.InputMethodService: boolean getCurrentInputStarted()>
<android.inputmethodservice.InputMethodService: int getInputMethodWindowRecommendedHeight()>
<android.inputmethodservice.InputMethodService: android.view.LayoutInflater getLayoutInflater()>
<android.inputmethodservice.InputMethodService: int getMaxWidth()>
<android.inputmethodservice.InputMethodService: android.view.Window getStylusHandwritingWindow()>
<android.inputmethodservice.InputMethodService: java.lang.CharSequence getTextForImeAction(int)>
<android.inputmethodservice.InputMethodService: android.app.Dialog getWindow()>
<android.inputmethodservice.InputMethodService: void hideStatusIcon()>
<android.inputmethodservice.InputMethodService: void hideWindow()>
<android.inputmethodservice.InputMethodService: boolean isExtractViewShown()>
<android.inputmethodservice.InputMethodService: boolean isFullscreenMode()>
<android.inputmethodservice.InputMethodService: boolean isInputViewShown()>
<android.inputmethodservice.InputMethodService: boolean isShowInputRequested()>
<android.inputmethodservice.InputMethodService: void onAppPrivateCommand(java.lang.String,android.os.Bundle)>
<android.inputmethodservice.InputMethodService: void onBindInput()>
<android.inputmethodservice.InputMethodService: void onComputeInsets(android.inputmethodservice.InputMethodService$Insets)>
<android.inputmethodservice.InputMethodService: void onConfigureWindow(android.view.Window,boolean,boolean)>
<android.inputmethodservice.InputMethodService: android.view.View onCreateCandidatesView()>
<android.inputmethodservice.InputMethodService: android.view.View onCreateExtractTextView()>
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InlineSuggestionsRequest onCreateInlineSuggestionsRequest(android.os.Bundle)>
<android.inputmethodservice.InputMethodService: android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl onCreateInputMethodInterface()>
<android.inputmethodservice.InputMethodService: android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl onCreateInputMethodSessionInterface()>
<android.inputmethodservice.InputMethodService: android.view.View onCreateInputView()>
<android.inputmethodservice.InputMethodService: void onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype)>
<android.inputmethodservice.InputMethodService: void onDisplayCompletions(android.view.inputmethod.CompletionInfo[])>
<android.inputmethodservice.InputMethodService: boolean onEvaluateFullscreenMode()>
<android.inputmethodservice.InputMethodService: boolean onEvaluateInputViewShown()>
<android.inputmethodservice.InputMethodService: boolean onExtractTextContextMenuItem(int)>
<android.inputmethodservice.InputMethodService: void onExtractedCursorMovement(int,int)>
<android.inputmethodservice.InputMethodService: void onExtractedSelectionChanged(int,int)>
<android.inputmethodservice.InputMethodService: void onExtractedTextClicked()>
<android.inputmethodservice.InputMethodService: void onExtractingInputChanged(android.view.inputmethod.EditorInfo)>
<android.inputmethodservice.InputMethodService: void onFinishCandidatesView(boolean)>
<android.inputmethodservice.InputMethodService: void onFinishInput()>
<android.inputmethodservice.InputMethodService: void onFinishInputView(boolean)>
<android.inputmethodservice.InputMethodService: void onFinishStylusHandwriting()>
<android.inputmethodservice.InputMethodService: void onInitializeInterface()>
<android.inputmethodservice.InputMethodService: boolean onInlineSuggestionsResponse(android.view.inputmethod.InlineSuggestionsResponse)>
<android.inputmethodservice.InputMethodService: boolean onKeyDown(int,android.view.KeyEvent)>
<android.inputmethodservice.InputMethodService: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.inputmethodservice.InputMethodService: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.inputmethodservice.InputMethodService: boolean onKeyUp(int,android.view.KeyEvent)>
<android.inputmethodservice.InputMethodService: void onPrepareStylusHandwriting()>
<android.inputmethodservice.InputMethodService: boolean onShowInputRequested(int,boolean)>
<android.inputmethodservice.InputMethodService: void onStartCandidatesView(android.view.inputmethod.EditorInfo,boolean)>
<android.inputmethodservice.InputMethodService: void onStartInput(android.view.inputmethod.EditorInfo,boolean)>
<android.inputmethodservice.InputMethodService: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)>
<android.inputmethodservice.InputMethodService: boolean onStartStylusHandwriting()>
<android.inputmethodservice.InputMethodService: void onStylusHandwritingMotionEvent(android.view.MotionEvent)>
<android.inputmethodservice.InputMethodService: void onUnbindInput()>
<android.inputmethodservice.InputMethodService: void onUpdateCursor(android.graphics.Rect)>
<android.inputmethodservice.InputMethodService: void onUpdateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)>
<android.inputmethodservice.InputMethodService: void onUpdateExtractedText(int,android.view.inputmethod.ExtractedText)>
<android.inputmethodservice.InputMethodService: void onUpdateExtractingViews(android.view.inputmethod.EditorInfo)>
<android.inputmethodservice.InputMethodService: void onUpdateExtractingVisibility(android.view.inputmethod.EditorInfo)>
<android.inputmethodservice.InputMethodService: void onUpdateSelection(int,int,int,int,int,int)>
<android.inputmethodservice.InputMethodService: void onViewClicked(boolean)>
<android.inputmethodservice.InputMethodService: void onWindowHidden()>
<android.inputmethodservice.InputMethodService: void onWindowShown()>
<android.inputmethodservice.InputMethodService: void requestHideSelf(int)>
<android.inputmethodservice.InputMethodService: void requestShowSelf(int)>
<android.inputmethodservice.InputMethodService: boolean sendDefaultEditorAction(boolean)>
<android.inputmethodservice.InputMethodService: void sendDownUpKeyEvents(int)>
<android.inputmethodservice.InputMethodService: void sendKeyChar(char)>
<android.inputmethodservice.InputMethodService: void setBackDisposition(int)>
<android.inputmethodservice.InputMethodService: void setCandidatesView(android.view.View)>
<android.inputmethodservice.InputMethodService: void setCandidatesViewShown(boolean)>
<android.inputmethodservice.InputMethodService: void setExtractView(android.view.View)>
<android.inputmethodservice.InputMethodService: void setExtractViewShown(boolean)>
<android.inputmethodservice.InputMethodService: void setInputView(android.view.View)>
<android.inputmethodservice.InputMethodService: boolean shouldOfferSwitchingToNextInputMethod()>
<android.inputmethodservice.InputMethodService: void showStatusIcon(int)>
<android.inputmethodservice.InputMethodService: void showWindow(boolean)>
<android.inputmethodservice.InputMethodService: void switchInputMethod(java.lang.String)>
<android.inputmethodservice.InputMethodService: void switchInputMethod(java.lang.String,android.view.inputmethod.InputMethodSubtype)>
<android.inputmethodservice.InputMethodService: boolean switchToNextInputMethod(boolean)>
<android.inputmethodservice.InputMethodService: boolean switchToPreviousInputMethod()>
<android.inputmethodservice.InputMethodService: void updateFullscreenMode()>
<android.inputmethodservice.InputMethodService: void updateInputViewShown()>
<android.inputmethodservice.InputMethodService: int BACK_DISPOSITION_ADJUST_NOTHING>
<android.inputmethodservice.InputMethodService: int BACK_DISPOSITION_DEFAULT>
<android.inputmethodservice.InputMethodService: int BACK_DISPOSITION_WILL_DISMISS>
<android.inputmethodservice.InputMethodService: int BACK_DISPOSITION_WILL_NOT_DISMISS>
android.inputmethodservice.InputMethodService$InputMethodImpl
<android.inputmethodservice.InputMethodService$InputMethodImpl: void <init>(android.inputmethodservice.InputMethodService)>
<android.inputmethodservice.InputMethodService$InputMethodImpl: void attachToken(android.os.IBinder)>
<android.inputmethodservice.InputMethodService$InputMethodImpl: void bindInput(android.view.inputmethod.InputBinding)>
<android.inputmethodservice.InputMethodService$InputMethodImpl: void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>
<android.inputmethodservice.InputMethodService$InputMethodImpl: void hideSoftInput(int,android.os.ResultReceiver)>
<android.inputmethodservice.InputMethodService$InputMethodImpl: void restartInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)>
<android.inputmethodservice.InputMethodService$InputMethodImpl: void showSoftInput(int,android.os.ResultReceiver)>
<android.inputmethodservice.InputMethodService$InputMethodImpl: void startInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)>
<android.inputmethodservice.InputMethodService$InputMethodImpl: void unbindInput()>
android.inputmethodservice.InputMethodService$InputMethodSessionImpl
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void <init>(android.inputmethodservice.InputMethodService)>
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void appPrivateCommand(java.lang.String,android.os.Bundle)>
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void displayCompletions(android.view.inputmethod.CompletionInfo[])>
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void finishInput()>
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void toggleSoftInput(int,int)>
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void updateCursor(android.graphics.Rect)>
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)>
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void updateExtractedText(int,android.view.inputmethod.ExtractedText)>
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void updateSelection(int,int,int,int,int,int)>
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void viewClicked(boolean)>
android.inputmethodservice.InputMethodService$Insets
<android.inputmethodservice.InputMethodService$Insets: void <init>()>
<android.inputmethodservice.InputMethodService$Insets: int TOUCHABLE_INSETS_CONTENT>
<android.inputmethodservice.InputMethodService$Insets: int TOUCHABLE_INSETS_FRAME>
<android.inputmethodservice.InputMethodService$Insets: int TOUCHABLE_INSETS_REGION>
<android.inputmethodservice.InputMethodService$Insets: int TOUCHABLE_INSETS_VISIBLE>
<android.inputmethodservice.InputMethodService$Insets: int contentTopInsets>
<android.inputmethodservice.InputMethodService$Insets: int touchableInsets>
<android.inputmethodservice.InputMethodService$Insets: android.graphics.Region touchableRegion>
<android.inputmethodservice.InputMethodService$Insets: int visibleTopInsets>
android.inputmethodservice.Keyboard
<android.inputmethodservice.Keyboard: void <init>(android.content.Context,int)>
<android.inputmethodservice.Keyboard: void <init>(android.content.Context,int,int,int,int)>
<android.inputmethodservice.Keyboard: void <init>(android.content.Context,int,int)>
<android.inputmethodservice.Keyboard: void <init>(android.content.Context,int,java.lang.CharSequence,int,int)>
<android.inputmethodservice.Keyboard: android.inputmethodservice.Keyboard$Key createKeyFromXml(android.content.res.Resources,android.inputmethodservice.Keyboard$Row,int,int,android.content.res.XmlResourceParser)>
<android.inputmethodservice.Keyboard: android.inputmethodservice.Keyboard$Row createRowFromXml(android.content.res.Resources,android.content.res.XmlResourceParser)>
<android.inputmethodservice.Keyboard: int getHeight()>
<android.inputmethodservice.Keyboard: int getHorizontalGap()>
<android.inputmethodservice.Keyboard: int getKeyHeight()>
<android.inputmethodservice.Keyboard: int getKeyWidth()>
<android.inputmethodservice.Keyboard: java.util.List getKeys()>
<android.inputmethodservice.Keyboard: int getMinWidth()>
<android.inputmethodservice.Keyboard: java.util.List getModifierKeys()>
<android.inputmethodservice.Keyboard: int[] getNearestKeys(int,int)>
<android.inputmethodservice.Keyboard: int getShiftKeyIndex()>
<android.inputmethodservice.Keyboard: int getVerticalGap()>
<android.inputmethodservice.Keyboard: boolean isShifted()>
<android.inputmethodservice.Keyboard: void setHorizontalGap(int)>
<android.inputmethodservice.Keyboard: void setKeyHeight(int)>
<android.inputmethodservice.Keyboard: void setKeyWidth(int)>
<android.inputmethodservice.Keyboard: boolean setShifted(boolean)>
<android.inputmethodservice.Keyboard: void setVerticalGap(int)>
<android.inputmethodservice.Keyboard: int EDGE_BOTTOM>
<android.inputmethodservice.Keyboard: int EDGE_LEFT>
<android.inputmethodservice.Keyboard: int EDGE_RIGHT>
<android.inputmethodservice.Keyboard: int EDGE_TOP>
<android.inputmethodservice.Keyboard: int KEYCODE_ALT>
<android.inputmethodservice.Keyboard: int KEYCODE_CANCEL>
<android.inputmethodservice.Keyboard: int KEYCODE_DELETE>
<android.inputmethodservice.Keyboard: int KEYCODE_DONE>
<android.inputmethodservice.Keyboard: int KEYCODE_MODE_CHANGE>
<android.inputmethodservice.Keyboard: int KEYCODE_SHIFT>
android.inputmethodservice.Keyboard$Key
<android.inputmethodservice.Keyboard$Key: void <init>(android.inputmethodservice.Keyboard$Row)>
<android.inputmethodservice.Keyboard$Key: void <init>(android.content.res.Resources,android.inputmethodservice.Keyboard$Row,int,int,android.content.res.XmlResourceParser)>
<android.inputmethodservice.Keyboard$Key: int[] getCurrentDrawableState()>
<android.inputmethodservice.Keyboard$Key: boolean isInside(int,int)>
<android.inputmethodservice.Keyboard$Key: void onPressed()>
<android.inputmethodservice.Keyboard$Key: void onReleased(boolean)>
<android.inputmethodservice.Keyboard$Key: int squaredDistanceFrom(int,int)>
<android.inputmethodservice.Keyboard$Key: int[] codes>
<android.inputmethodservice.Keyboard$Key: int edgeFlags>
<android.inputmethodservice.Keyboard$Key: int gap>
<android.inputmethodservice.Keyboard$Key: int height>
<android.inputmethodservice.Keyboard$Key: android.graphics.drawable.Drawable icon>
<android.inputmethodservice.Keyboard$Key: android.graphics.drawable.Drawable iconPreview>
<android.inputmethodservice.Keyboard$Key: java.lang.CharSequence label>
<android.inputmethodservice.Keyboard$Key: boolean modifier>
<android.inputmethodservice.Keyboard$Key: boolean on>
<android.inputmethodservice.Keyboard$Key: java.lang.CharSequence popupCharacters>
<android.inputmethodservice.Keyboard$Key: int popupResId>
<android.inputmethodservice.Keyboard$Key: boolean pressed>
<android.inputmethodservice.Keyboard$Key: boolean repeatable>
<android.inputmethodservice.Keyboard$Key: boolean sticky>
<android.inputmethodservice.Keyboard$Key: java.lang.CharSequence text>
<android.inputmethodservice.Keyboard$Key: int width>
<android.inputmethodservice.Keyboard$Key: int x>
<android.inputmethodservice.Keyboard$Key: int y>
android.inputmethodservice.Keyboard$Row
<android.inputmethodservice.Keyboard$Row: void <init>(android.inputmethodservice.Keyboard)>
<android.inputmethodservice.Keyboard$Row: void <init>(android.content.res.Resources,android.inputmethodservice.Keyboard,android.content.res.XmlResourceParser)>
<android.inputmethodservice.Keyboard$Row: int defaultHeight>
<android.inputmethodservice.Keyboard$Row: int defaultHorizontalGap>
<android.inputmethodservice.Keyboard$Row: int defaultWidth>
<android.inputmethodservice.Keyboard$Row: int mode>
<android.inputmethodservice.Keyboard$Row: int rowEdgeFlags>
<android.inputmethodservice.Keyboard$Row: int verticalGap>
android.inputmethodservice.KeyboardView
<android.inputmethodservice.KeyboardView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.inputmethodservice.KeyboardView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.inputmethodservice.KeyboardView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.inputmethodservice.KeyboardView: void closing()>
<android.inputmethodservice.KeyboardView: android.inputmethodservice.Keyboard getKeyboard()>
<android.inputmethodservice.KeyboardView: android.inputmethodservice.KeyboardView$OnKeyboardActionListener getOnKeyboardActionListener()>
<android.inputmethodservice.KeyboardView: boolean handleBack()>
<android.inputmethodservice.KeyboardView: void invalidateAllKeys()>
<android.inputmethodservice.KeyboardView: void invalidateKey(int)>
<android.inputmethodservice.KeyboardView: boolean isPreviewEnabled()>
<android.inputmethodservice.KeyboardView: boolean isProximityCorrectionEnabled()>
<android.inputmethodservice.KeyboardView: boolean isShifted()>
<android.inputmethodservice.KeyboardView: void onClick(android.view.View)>
<android.inputmethodservice.KeyboardView: void onDetachedFromWindow()>
<android.inputmethodservice.KeyboardView: void onDraw(android.graphics.Canvas)>
<android.inputmethodservice.KeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)>
<android.inputmethodservice.KeyboardView: void onMeasure(int,int)>
<android.inputmethodservice.KeyboardView: void onSizeChanged(int,int,int,int)>
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)>
<android.inputmethodservice.KeyboardView: void setOnKeyboardActionListener(android.inputmethodservice.KeyboardView$OnKeyboardActionListener)>
<android.inputmethodservice.KeyboardView: void setPopupOffset(int,int)>
<android.inputmethodservice.KeyboardView: void setPopupParent(android.view.View)>
<android.inputmethodservice.KeyboardView: void setPreviewEnabled(boolean)>
<android.inputmethodservice.KeyboardView: void setProximityCorrectionEnabled(boolean)>
<android.inputmethodservice.KeyboardView: boolean setShifted(boolean)>
<android.inputmethodservice.KeyboardView: void setVerticalCorrection(int)>
<android.inputmethodservice.KeyboardView: void swipeDown()>
<android.inputmethodservice.KeyboardView: void swipeLeft()>
<android.inputmethodservice.KeyboardView: void swipeRight()>
<android.inputmethodservice.KeyboardView: void swipeUp()>
android.inputmethodservice.KeyboardView$OnKeyboardActionListener
<android.inputmethodservice.KeyboardView$OnKeyboardActionListener: void onKey(int,int[])>
<android.inputmethodservice.KeyboardView$OnKeyboardActionListener: void onPress(int)>
<android.inputmethodservice.KeyboardView$OnKeyboardActionListener: void onRelease(int)>
<android.inputmethodservice.KeyboardView$OnKeyboardActionListener: void onText(java.lang.CharSequence)>
<android.inputmethodservice.KeyboardView$OnKeyboardActionListener: void swipeDown()>
<android.inputmethodservice.KeyboardView$OnKeyboardActionListener: void swipeLeft()>
<android.inputmethodservice.KeyboardView$OnKeyboardActionListener: void swipeRight()>
<android.inputmethodservice.KeyboardView$OnKeyboardActionListener: void swipeUp()>
android.location.Address
<android.location.Address: void <init>(java.util.Locale)>
<android.location.Address: void clearLatitude()>
<android.location.Address: void clearLongitude()>
<android.location.Address: int describeContents()>
<android.location.Address: java.lang.String getAddressLine(int)>
<android.location.Address: java.lang.String getAdminArea()>
<android.location.Address: java.lang.String getCountryCode()>
<android.location.Address: java.lang.String getCountryName()>
<android.location.Address: android.os.Bundle getExtras()>
<android.location.Address: java.lang.String getFeatureName()>
<android.location.Address: double getLatitude()>
<android.location.Address: java.util.Locale getLocale()>
<android.location.Address: java.lang.String getLocality()>
<android.location.Address: double getLongitude()>
<android.location.Address: int getMaxAddressLineIndex()>
<android.location.Address: java.lang.String getPhone()>
<android.location.Address: java.lang.String getPostalCode()>
<android.location.Address: java.lang.String getPremises()>
<android.location.Address: java.lang.String getSubAdminArea()>
<android.location.Address: java.lang.String getSubLocality()>
<android.location.Address: java.lang.String getSubThoroughfare()>
<android.location.Address: java.lang.String getThoroughfare()>
<android.location.Address: java.lang.String getUrl()>
<android.location.Address: boolean hasLatitude()>
<android.location.Address: boolean hasLongitude()>
<android.location.Address: void setAddressLine(int,java.lang.String)>
<android.location.Address: void setAdminArea(java.lang.String)>
<android.location.Address: void setCountryCode(java.lang.String)>
<android.location.Address: void setCountryName(java.lang.String)>
<android.location.Address: void setExtras(android.os.Bundle)>
<android.location.Address: void setFeatureName(java.lang.String)>
<android.location.Address: void setLatitude(double)>
<android.location.Address: void setLocality(java.lang.String)>
<android.location.Address: void setLongitude(double)>
<android.location.Address: void setPhone(java.lang.String)>
<android.location.Address: void setPostalCode(java.lang.String)>
<android.location.Address: void setPremises(java.lang.String)>
<android.location.Address: void setSubAdminArea(java.lang.String)>
<android.location.Address: void setSubLocality(java.lang.String)>
<android.location.Address: void setSubThoroughfare(java.lang.String)>
<android.location.Address: void setThoroughfare(java.lang.String)>
<android.location.Address: void setUrl(java.lang.String)>
<android.location.Address: void writeToParcel(android.os.Parcel,int)>
<android.location.Address: android.os.Parcelable$Creator CREATOR>
android.location.Criteria
<android.location.Criteria: void <init>()>
<android.location.Criteria: void <init>(android.location.Criteria)>
<android.location.Criteria: int describeContents()>
<android.location.Criteria: int getAccuracy()>
<android.location.Criteria: int getBearingAccuracy()>
<android.location.Criteria: int getHorizontalAccuracy()>
<android.location.Criteria: int getPowerRequirement()>
<android.location.Criteria: int getSpeedAccuracy()>
<android.location.Criteria: int getVerticalAccuracy()>
<android.location.Criteria: boolean isAltitudeRequired()>
<android.location.Criteria: boolean isBearingRequired()>
<android.location.Criteria: boolean isCostAllowed()>
<android.location.Criteria: boolean isSpeedRequired()>
<android.location.Criteria: void setAccuracy(int)>
<android.location.Criteria: void setAltitudeRequired(boolean)>
<android.location.Criteria: void setBearingAccuracy(int)>
<android.location.Criteria: void setBearingRequired(boolean)>
<android.location.Criteria: void setCostAllowed(boolean)>
<android.location.Criteria: void setHorizontalAccuracy(int)>
<android.location.Criteria: void setPowerRequirement(int)>
<android.location.Criteria: void setSpeedAccuracy(int)>
<android.location.Criteria: void setSpeedRequired(boolean)>
<android.location.Criteria: void setVerticalAccuracy(int)>
<android.location.Criteria: void writeToParcel(android.os.Parcel,int)>
<android.location.Criteria: int ACCURACY_COARSE>
<android.location.Criteria: int ACCURACY_FINE>
<android.location.Criteria: int ACCURACY_HIGH>
<android.location.Criteria: int ACCURACY_LOW>
<android.location.Criteria: int ACCURACY_MEDIUM>
<android.location.Criteria: android.os.Parcelable$Creator CREATOR>
<android.location.Criteria: int NO_REQUIREMENT>
<android.location.Criteria: int POWER_HIGH>
<android.location.Criteria: int POWER_LOW>
<android.location.Criteria: int POWER_MEDIUM>
android.location.Geocoder
<android.location.Geocoder: void <init>(android.content.Context)>
<android.location.Geocoder: void <init>(android.content.Context,java.util.Locale)>
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>
<android.location.Geocoder: void getFromLocation(double,double,int,android.location.Geocoder$GeocodeListener)>
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)>
<android.location.Geocoder: void getFromLocationName(java.lang.String,int,android.location.Geocoder$GeocodeListener)>
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)>
<android.location.Geocoder: void getFromLocationName(java.lang.String,int,double,double,double,double,android.location.Geocoder$GeocodeListener)>
<android.location.Geocoder: boolean isPresent()>
android.location.Geocoder$GeocodeListener
<android.location.Geocoder$GeocodeListener: void onError(java.lang.String)>
<android.location.Geocoder$GeocodeListener: void onGeocode(java.util.List)>
android.location.GnssAntennaInfo
<android.location.GnssAntennaInfo: int describeContents()>
<android.location.GnssAntennaInfo: double getCarrierFrequencyMHz()>
<android.location.GnssAntennaInfo: android.location.GnssAntennaInfo$PhaseCenterOffset getPhaseCenterOffset()>
<android.location.GnssAntennaInfo: android.location.GnssAntennaInfo$SphericalCorrections getPhaseCenterVariationCorrections()>
<android.location.GnssAntennaInfo: android.location.GnssAntennaInfo$SphericalCorrections getSignalGainCorrections()>
<android.location.GnssAntennaInfo: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssAntennaInfo: android.os.Parcelable$Creator CREATOR>
android.location.GnssAntennaInfo$Builder
<android.location.GnssAntennaInfo$Builder: void <init>()>
<android.location.GnssAntennaInfo$Builder: void <init>(double,android.location.GnssAntennaInfo$PhaseCenterOffset)>
<android.location.GnssAntennaInfo$Builder: void <init>(android.location.GnssAntennaInfo)>
<android.location.GnssAntennaInfo$Builder: android.location.GnssAntennaInfo build()>
<android.location.GnssAntennaInfo$Builder: android.location.GnssAntennaInfo$Builder setCarrierFrequencyMHz(double)>
<android.location.GnssAntennaInfo$Builder: android.location.GnssAntennaInfo$Builder setPhaseCenterOffset(android.location.GnssAntennaInfo$PhaseCenterOffset)>
<android.location.GnssAntennaInfo$Builder: android.location.GnssAntennaInfo$Builder setPhaseCenterVariationCorrections(android.location.GnssAntennaInfo$SphericalCorrections)>
<android.location.GnssAntennaInfo$Builder: android.location.GnssAntennaInfo$Builder setSignalGainCorrections(android.location.GnssAntennaInfo$SphericalCorrections)>
android.location.GnssAntennaInfo$Listener
<android.location.GnssAntennaInfo$Listener: void onGnssAntennaInfoReceived(java.util.List)>
android.location.GnssAntennaInfo$PhaseCenterOffset
<android.location.GnssAntennaInfo$PhaseCenterOffset: void <init>(double,double,double,double,double,double)>
<android.location.GnssAntennaInfo$PhaseCenterOffset: int describeContents()>
<android.location.GnssAntennaInfo$PhaseCenterOffset: double getXOffsetMm()>
<android.location.GnssAntennaInfo$PhaseCenterOffset: double getXOffsetUncertaintyMm()>
<android.location.GnssAntennaInfo$PhaseCenterOffset: double getYOffsetMm()>
<android.location.GnssAntennaInfo$PhaseCenterOffset: double getYOffsetUncertaintyMm()>
<android.location.GnssAntennaInfo$PhaseCenterOffset: double getZOffsetMm()>
<android.location.GnssAntennaInfo$PhaseCenterOffset: double getZOffsetUncertaintyMm()>
<android.location.GnssAntennaInfo$PhaseCenterOffset: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssAntennaInfo$PhaseCenterOffset: android.os.Parcelable$Creator CREATOR>
android.location.GnssAntennaInfo$SphericalCorrections
<android.location.GnssAntennaInfo$SphericalCorrections: void <init>(double[][],double[][])>
<android.location.GnssAntennaInfo$SphericalCorrections: int describeContents()>
<android.location.GnssAntennaInfo$SphericalCorrections: double[][] getCorrectionUncertaintiesArray()>
<android.location.GnssAntennaInfo$SphericalCorrections: double[][] getCorrectionsArray()>
<android.location.GnssAntennaInfo$SphericalCorrections: double getDeltaPhi()>
<android.location.GnssAntennaInfo$SphericalCorrections: double getDeltaTheta()>
<android.location.GnssAntennaInfo$SphericalCorrections: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssAntennaInfo$SphericalCorrections: android.os.Parcelable$Creator CREATOR>
android.location.GnssAutomaticGainControl
<android.location.GnssAutomaticGainControl: int describeContents()>
<android.location.GnssAutomaticGainControl: long getCarrierFrequencyHz()>
<android.location.GnssAutomaticGainControl: int getConstellationType()>
<android.location.GnssAutomaticGainControl: double getLevelDb()>
<android.location.GnssAutomaticGainControl: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssAutomaticGainControl: android.os.Parcelable$Creator CREATOR>
android.location.GnssAutomaticGainControl$Builder
<android.location.GnssAutomaticGainControl$Builder: void <init>()>
<android.location.GnssAutomaticGainControl$Builder: void <init>(android.location.GnssAutomaticGainControl)>
<android.location.GnssAutomaticGainControl$Builder: android.location.GnssAutomaticGainControl build()>
<android.location.GnssAutomaticGainControl$Builder: android.location.GnssAutomaticGainControl$Builder setCarrierFrequencyHz(long)>
<android.location.GnssAutomaticGainControl$Builder: android.location.GnssAutomaticGainControl$Builder setConstellationType(int)>
<android.location.GnssAutomaticGainControl$Builder: android.location.GnssAutomaticGainControl$Builder setLevelDb(double)>
android.location.GnssCapabilities
<android.location.GnssCapabilities: int describeContents()>
<android.location.GnssCapabilities: boolean hasAntennaInfo()>
<android.location.GnssCapabilities: boolean hasGnssAntennaInfo()>
<android.location.GnssCapabilities: boolean hasMeasurements()>
<android.location.GnssCapabilities: boolean hasNavigationMessages()>
<android.location.GnssCapabilities: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssCapabilities: android.os.Parcelable$Creator CREATOR>
android.location.GnssCapabilities$Builder
<android.location.GnssCapabilities$Builder: void <init>()>
<android.location.GnssCapabilities$Builder: void <init>(android.location.GnssCapabilities)>
<android.location.GnssCapabilities$Builder: android.location.GnssCapabilities build()>
<android.location.GnssCapabilities$Builder: android.location.GnssCapabilities$Builder setHasAntennaInfo(boolean)>
<android.location.GnssCapabilities$Builder: android.location.GnssCapabilities$Builder setHasMeasurements(boolean)>
<android.location.GnssCapabilities$Builder: android.location.GnssCapabilities$Builder setHasNavigationMessages(boolean)>
android.location.GnssClock
<android.location.GnssClock: int describeContents()>
<android.location.GnssClock: double getBiasNanos()>
<android.location.GnssClock: double getBiasUncertaintyNanos()>
<android.location.GnssClock: double getDriftNanosPerSecond()>
<android.location.GnssClock: double getDriftUncertaintyNanosPerSecond()>
<android.location.GnssClock: long getElapsedRealtimeNanos()>
<android.location.GnssClock: double getElapsedRealtimeUncertaintyNanos()>
<android.location.GnssClock: long getFullBiasNanos()>
<android.location.GnssClock: int getHardwareClockDiscontinuityCount()>
<android.location.GnssClock: int getLeapSecond()>
<android.location.GnssClock: double getReferenceCarrierFrequencyHzForIsb()>
<android.location.GnssClock: java.lang.String getReferenceCodeTypeForIsb()>
<android.location.GnssClock: int getReferenceConstellationTypeForIsb()>
<android.location.GnssClock: long getTimeNanos()>
<android.location.GnssClock: double getTimeUncertaintyNanos()>
<android.location.GnssClock: boolean hasBiasNanos()>
<android.location.GnssClock: boolean hasBiasUncertaintyNanos()>
<android.location.GnssClock: boolean hasDriftNanosPerSecond()>
<android.location.GnssClock: boolean hasDriftUncertaintyNanosPerSecond()>
<android.location.GnssClock: boolean hasElapsedRealtimeNanos()>
<android.location.GnssClock: boolean hasElapsedRealtimeUncertaintyNanos()>
<android.location.GnssClock: boolean hasFullBiasNanos()>
<android.location.GnssClock: boolean hasLeapSecond()>
<android.location.GnssClock: boolean hasReferenceCarrierFrequencyHzForIsb()>
<android.location.GnssClock: boolean hasReferenceCodeTypeForIsb()>
<android.location.GnssClock: boolean hasReferenceConstellationTypeForIsb()>
<android.location.GnssClock: boolean hasTimeUncertaintyNanos()>
<android.location.GnssClock: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssClock: android.os.Parcelable$Creator CREATOR>
android.location.GnssMeasurement
<android.location.GnssMeasurement: int describeContents()>
<android.location.GnssMeasurement: double getAccumulatedDeltaRangeMeters()>
<android.location.GnssMeasurement: int getAccumulatedDeltaRangeState()>
<android.location.GnssMeasurement: double getAccumulatedDeltaRangeUncertaintyMeters()>
<android.location.GnssMeasurement: double getAutomaticGainControlLevelDb()>
<android.location.GnssMeasurement: double getBasebandCn0DbHz()>
<android.location.GnssMeasurement: long getCarrierCycles()>
<android.location.GnssMeasurement: float getCarrierFrequencyHz()>
<android.location.GnssMeasurement: double getCarrierPhase()>
<android.location.GnssMeasurement: double getCarrierPhaseUncertainty()>
<android.location.GnssMeasurement: double getCn0DbHz()>
<android.location.GnssMeasurement: java.lang.String getCodeType()>
<android.location.GnssMeasurement: int getConstellationType()>
<android.location.GnssMeasurement: double getFullInterSignalBiasNanos()>
<android.location.GnssMeasurement: double getFullInterSignalBiasUncertaintyNanos()>
<android.location.GnssMeasurement: int getMultipathIndicator()>
<android.location.GnssMeasurement: double getPseudorangeRateMetersPerSecond()>
<android.location.GnssMeasurement: double getPseudorangeRateUncertaintyMetersPerSecond()>
<android.location.GnssMeasurement: long getReceivedSvTimeNanos()>
<android.location.GnssMeasurement: long getReceivedSvTimeUncertaintyNanos()>
<android.location.GnssMeasurement: double getSatelliteInterSignalBiasNanos()>
<android.location.GnssMeasurement: double getSatelliteInterSignalBiasUncertaintyNanos()>
<android.location.GnssMeasurement: double getSnrInDb()>
<android.location.GnssMeasurement: int getState()>
<android.location.GnssMeasurement: int getSvid()>
<android.location.GnssMeasurement: double getTimeOffsetNanos()>
<android.location.GnssMeasurement: boolean hasAutomaticGainControlLevelDb()>
<android.location.GnssMeasurement: boolean hasBasebandCn0DbHz()>
<android.location.GnssMeasurement: boolean hasCarrierCycles()>
<android.location.GnssMeasurement: boolean hasCarrierFrequencyHz()>
<android.location.GnssMeasurement: boolean hasCarrierPhase()>
<android.location.GnssMeasurement: boolean hasCarrierPhaseUncertainty()>
<android.location.GnssMeasurement: boolean hasCodeType()>
<android.location.GnssMeasurement: boolean hasFullInterSignalBiasNanos()>
<android.location.GnssMeasurement: boolean hasFullInterSignalBiasUncertaintyNanos()>
<android.location.GnssMeasurement: boolean hasSatelliteInterSignalBiasNanos()>
<android.location.GnssMeasurement: boolean hasSatelliteInterSignalBiasUncertaintyNanos()>
<android.location.GnssMeasurement: boolean hasSnrInDb()>
<android.location.GnssMeasurement: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssMeasurement: int ADR_STATE_CYCLE_SLIP>
<android.location.GnssMeasurement: int ADR_STATE_HALF_CYCLE_REPORTED>
<android.location.GnssMeasurement: int ADR_STATE_HALF_CYCLE_RESOLVED>
<android.location.GnssMeasurement: int ADR_STATE_RESET>
<android.location.GnssMeasurement: int ADR_STATE_UNKNOWN>
<android.location.GnssMeasurement: int ADR_STATE_VALID>
<android.location.GnssMeasurement: android.os.Parcelable$Creator CREATOR>
<android.location.GnssMeasurement: int MULTIPATH_INDICATOR_DETECTED>
<android.location.GnssMeasurement: int MULTIPATH_INDICATOR_NOT_DETECTED>
<android.location.GnssMeasurement: int MULTIPATH_INDICATOR_UNKNOWN>
<android.location.GnssMeasurement: int STATE_2ND_CODE_LOCK>
<android.location.GnssMeasurement: int STATE_BDS_D2_BIT_SYNC>
<android.location.GnssMeasurement: int STATE_BDS_D2_SUBFRAME_SYNC>
<android.location.GnssMeasurement: int STATE_BIT_SYNC>
<android.location.GnssMeasurement: int STATE_CODE_LOCK>
<android.location.GnssMeasurement: int STATE_GAL_E1BC_CODE_LOCK>
<android.location.GnssMeasurement: int STATE_GAL_E1B_PAGE_SYNC>
<android.location.GnssMeasurement: int STATE_GAL_E1C_2ND_CODE_LOCK>
<android.location.GnssMeasurement: int STATE_GLO_STRING_SYNC>
<android.location.GnssMeasurement: int STATE_GLO_TOD_DECODED>
<android.location.GnssMeasurement: int STATE_GLO_TOD_KNOWN>
<android.location.GnssMeasurement: int STATE_MSEC_AMBIGUOUS>
<android.location.GnssMeasurement: int STATE_SBAS_SYNC>
<android.location.GnssMeasurement: int STATE_SUBFRAME_SYNC>
<android.location.GnssMeasurement: int STATE_SYMBOL_SYNC>
<android.location.GnssMeasurement: int STATE_TOW_DECODED>
<android.location.GnssMeasurement: int STATE_TOW_KNOWN>
<android.location.GnssMeasurement: int STATE_UNKNOWN>
android.location.GnssMeasurementRequest
<android.location.GnssMeasurementRequest: int describeContents()>
<android.location.GnssMeasurementRequest: int getIntervalMillis()>
<android.location.GnssMeasurementRequest: boolean isFullTracking()>
<android.location.GnssMeasurementRequest: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssMeasurementRequest: android.os.Parcelable$Creator CREATOR>
android.location.GnssMeasurementRequest$Builder
<android.location.GnssMeasurementRequest$Builder: void <init>()>
<android.location.GnssMeasurementRequest$Builder: void <init>(android.location.GnssMeasurementRequest)>
<android.location.GnssMeasurementRequest$Builder: android.location.GnssMeasurementRequest build()>
<android.location.GnssMeasurementRequest$Builder: android.location.GnssMeasurementRequest$Builder setFullTracking(boolean)>
<android.location.GnssMeasurementRequest$Builder: android.location.GnssMeasurementRequest$Builder setIntervalMillis(int)>
android.location.GnssMeasurementsEvent
<android.location.GnssMeasurementsEvent: int describeContents()>
<android.location.GnssMeasurementsEvent: android.location.GnssClock getClock()>
<android.location.GnssMeasurementsEvent: java.util.Collection getGnssAutomaticGainControls()>
<android.location.GnssMeasurementsEvent: java.util.Collection getMeasurements()>
<android.location.GnssMeasurementsEvent: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssMeasurementsEvent: android.os.Parcelable$Creator CREATOR>
android.location.GnssMeasurementsEvent$Builder
<android.location.GnssMeasurementsEvent$Builder: void <init>()>
<android.location.GnssMeasurementsEvent$Builder: void <init>(android.location.GnssMeasurementsEvent)>
<android.location.GnssMeasurementsEvent$Builder: android.location.GnssMeasurementsEvent build()>
<android.location.GnssMeasurementsEvent$Builder: android.location.GnssMeasurementsEvent$Builder setClock(android.location.GnssClock)>
<android.location.GnssMeasurementsEvent$Builder: android.location.GnssMeasurementsEvent$Builder setGnssAutomaticGainControls(java.util.Collection)>
<android.location.GnssMeasurementsEvent$Builder: android.location.GnssMeasurementsEvent$Builder setMeasurements(java.util.Collection)>
android.location.GnssMeasurementsEvent$Callback
<android.location.GnssMeasurementsEvent$Callback: void <init>()>
<android.location.GnssMeasurementsEvent$Callback: void onGnssMeasurementsReceived(android.location.GnssMeasurementsEvent)>
<android.location.GnssMeasurementsEvent$Callback: void onStatusChanged(int)>
<android.location.GnssMeasurementsEvent$Callback: int STATUS_LOCATION_DISABLED>
<android.location.GnssMeasurementsEvent$Callback: int STATUS_NOT_ALLOWED>
<android.location.GnssMeasurementsEvent$Callback: int STATUS_NOT_SUPPORTED>
<android.location.GnssMeasurementsEvent$Callback: int STATUS_READY>
android.location.GnssNavigationMessage
<android.location.GnssNavigationMessage: int describeContents()>
<android.location.GnssNavigationMessage: byte[] getData()>
<android.location.GnssNavigationMessage: int getMessageId()>
<android.location.GnssNavigationMessage: int getStatus()>
<android.location.GnssNavigationMessage: int getSubmessageId()>
<android.location.GnssNavigationMessage: int getSvid()>
<android.location.GnssNavigationMessage: int getType()>
<android.location.GnssNavigationMessage: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssNavigationMessage: android.os.Parcelable$Creator CREATOR>
<android.location.GnssNavigationMessage: int STATUS_PARITY_PASSED>
<android.location.GnssNavigationMessage: int STATUS_PARITY_REBUILT>
<android.location.GnssNavigationMessage: int STATUS_UNKNOWN>
<android.location.GnssNavigationMessage: int TYPE_BDS_CNAV1>
<android.location.GnssNavigationMessage: int TYPE_BDS_CNAV2>
<android.location.GnssNavigationMessage: int TYPE_BDS_D1>
<android.location.GnssNavigationMessage: int TYPE_BDS_D2>
<android.location.GnssNavigationMessage: int TYPE_GAL_F>
<android.location.GnssNavigationMessage: int TYPE_GAL_I>
<android.location.GnssNavigationMessage: int TYPE_GLO_L1CA>
<android.location.GnssNavigationMessage: int TYPE_GPS_CNAV2>
<android.location.GnssNavigationMessage: int TYPE_GPS_L1CA>
<android.location.GnssNavigationMessage: int TYPE_GPS_L2CNAV>
<android.location.GnssNavigationMessage: int TYPE_GPS_L5CNAV>
<android.location.GnssNavigationMessage: int TYPE_IRN_L5CA>
<android.location.GnssNavigationMessage: int TYPE_QZS_L1CA>
<android.location.GnssNavigationMessage: int TYPE_SBS>
<android.location.GnssNavigationMessage: int TYPE_UNKNOWN>
android.location.GnssNavigationMessage$Callback
<android.location.GnssNavigationMessage$Callback: void <init>()>
<android.location.GnssNavigationMessage$Callback: void onGnssNavigationMessageReceived(android.location.GnssNavigationMessage)>
<android.location.GnssNavigationMessage$Callback: void onStatusChanged(int)>
<android.location.GnssNavigationMessage$Callback: int STATUS_LOCATION_DISABLED>
<android.location.GnssNavigationMessage$Callback: int STATUS_NOT_SUPPORTED>
<android.location.GnssNavigationMessage$Callback: int STATUS_READY>
android.location.GnssStatus
<android.location.GnssStatus: int describeContents()>
<android.location.GnssStatus: float getAzimuthDegrees(int)>
<android.location.GnssStatus: float getBasebandCn0DbHz(int)>
<android.location.GnssStatus: float getCarrierFrequencyHz(int)>
<android.location.GnssStatus: float getCn0DbHz(int)>
<android.location.GnssStatus: int getConstellationType(int)>
<android.location.GnssStatus: float getElevationDegrees(int)>
<android.location.GnssStatus: int getSatelliteCount()>
<android.location.GnssStatus: int getSvid(int)>
<android.location.GnssStatus: boolean hasAlmanacData(int)>
<android.location.GnssStatus: boolean hasBasebandCn0DbHz(int)>
<android.location.GnssStatus: boolean hasCarrierFrequencyHz(int)>
<android.location.GnssStatus: boolean hasEphemerisData(int)>
<android.location.GnssStatus: boolean usedInFix(int)>
<android.location.GnssStatus: void writeToParcel(android.os.Parcel,int)>
<android.location.GnssStatus: int CONSTELLATION_BEIDOU>
<android.location.GnssStatus: int CONSTELLATION_GALILEO>
<android.location.GnssStatus: int CONSTELLATION_GLONASS>
<android.location.GnssStatus: int CONSTELLATION_GPS>
<android.location.GnssStatus: int CONSTELLATION_IRNSS>
<android.location.GnssStatus: int CONSTELLATION_QZSS>
<android.location.GnssStatus: int CONSTELLATION_SBAS>
<android.location.GnssStatus: int CONSTELLATION_UNKNOWN>
<android.location.GnssStatus: android.os.Parcelable$Creator CREATOR>
android.location.GnssStatus$Builder
<android.location.GnssStatus$Builder: void <init>()>
<android.location.GnssStatus$Builder: android.location.GnssStatus$Builder addSatellite(int,int,float,float,float,boolean,boolean,boolean,boolean,float,boolean,float)>
<android.location.GnssStatus$Builder: android.location.GnssStatus build()>
<android.location.GnssStatus$Builder: android.location.GnssStatus$Builder clearSatellites()>
android.location.GnssStatus$Callback
<android.location.GnssStatus$Callback: void <init>()>
<android.location.GnssStatus$Callback: void onFirstFix(int)>
<android.location.GnssStatus$Callback: void onSatelliteStatusChanged(android.location.GnssStatus)>
<android.location.GnssStatus$Callback: void onStarted()>
<android.location.GnssStatus$Callback: void onStopped()>
android.location.GpsSatellite
<android.location.GpsSatellite: float getAzimuth()>
<android.location.GpsSatellite: float getElevation()>
<android.location.GpsSatellite: int getPrn()>
<android.location.GpsSatellite: float getSnr()>
<android.location.GpsSatellite: boolean hasAlmanac()>
<android.location.GpsSatellite: boolean hasEphemeris()>
<android.location.GpsSatellite: boolean usedInFix()>
android.location.GpsStatus
<android.location.GpsStatus: android.location.GpsStatus create(android.location.GnssStatus,int)>
<android.location.GpsStatus: int getMaxSatellites()>
<android.location.GpsStatus: java.lang.Iterable getSatellites()>
<android.location.GpsStatus: int getTimeToFirstFix()>
<android.location.GpsStatus: int GPS_EVENT_FIRST_FIX>
<android.location.GpsStatus: int GPS_EVENT_SATELLITE_STATUS>
<android.location.GpsStatus: int GPS_EVENT_STARTED>
<android.location.GpsStatus: int GPS_EVENT_STOPPED>
android.location.GpsStatus$Listener
<android.location.GpsStatus$Listener: void onGpsStatusChanged(int)>
android.location.GpsStatus$NmeaListener
<android.location.GpsStatus$NmeaListener: void onNmeaReceived(long,java.lang.String)>
android.location.Location
<android.location.Location: void <init>(java.lang.String)>
<android.location.Location: void <init>(android.location.Location)>
<android.location.Location: float bearingTo(android.location.Location)>
<android.location.Location: java.lang.String convert(double,int)>
<android.location.Location: double convert(java.lang.String)>
<android.location.Location: int describeContents()>
<android.location.Location: void distanceBetween(double,double,double,double,float[])>
<android.location.Location: float distanceTo(android.location.Location)>
<android.location.Location: void dump(android.util.Printer,java.lang.String)>
<android.location.Location: float getAccuracy()>
<android.location.Location: double getAltitude()>
<android.location.Location: float getBearing()>
<android.location.Location: float getBearingAccuracyDegrees()>
<android.location.Location: long getElapsedRealtimeAgeMillis()>
<android.location.Location: long getElapsedRealtimeAgeMillis(long)>
<android.location.Location: long getElapsedRealtimeMillis()>
<android.location.Location: long getElapsedRealtimeNanos()>
<android.location.Location: double getElapsedRealtimeUncertaintyNanos()>
<android.location.Location: android.os.Bundle getExtras()>
<android.location.Location: double getLatitude()>
<android.location.Location: double getLongitude()>
<android.location.Location: java.lang.String getProvider()>
<android.location.Location: float getSpeed()>
<android.location.Location: float getSpeedAccuracyMetersPerSecond()>
<android.location.Location: long getTime()>
<android.location.Location: float getVerticalAccuracyMeters()>
<android.location.Location: boolean hasAccuracy()>
<android.location.Location: boolean hasAltitude()>
<android.location.Location: boolean hasBearing()>
<android.location.Location: boolean hasBearingAccuracy()>
<android.location.Location: boolean hasElapsedRealtimeUncertaintyNanos()>
<android.location.Location: boolean hasSpeed()>
<android.location.Location: boolean hasSpeedAccuracy()>
<android.location.Location: boolean hasVerticalAccuracy()>
<android.location.Location: boolean isComplete()>
<android.location.Location: boolean isFromMockProvider()>
<android.location.Location: boolean isMock()>
<android.location.Location: void removeAccuracy()>
<android.location.Location: void removeAltitude()>
<android.location.Location: void removeBearing()>
<android.location.Location: void removeBearingAccuracy()>
<android.location.Location: void removeElapsedRealtimeUncertaintyNanos()>
<android.location.Location: void removeSpeed()>
<android.location.Location: void removeSpeedAccuracy()>
<android.location.Location: void removeVerticalAccuracy()>
<android.location.Location: void reset()>
<android.location.Location: void set(android.location.Location)>
<android.location.Location: void setAccuracy(float)>
<android.location.Location: void setAltitude(double)>
<android.location.Location: void setBearing(float)>
<android.location.Location: void setBearingAccuracyDegrees(float)>
<android.location.Location: void setElapsedRealtimeNanos(long)>
<android.location.Location: void setElapsedRealtimeUncertaintyNanos(double)>
<android.location.Location: void setExtras(android.os.Bundle)>
<android.location.Location: void setLatitude(double)>
<android.location.Location: void setLongitude(double)>
<android.location.Location: void setMock(boolean)>
<android.location.Location: void setProvider(java.lang.String)>
<android.location.Location: void setSpeed(float)>
<android.location.Location: void setSpeedAccuracyMetersPerSecond(float)>
<android.location.Location: void setTime(long)>
<android.location.Location: void setVerticalAccuracyMeters(float)>
<android.location.Location: void writeToParcel(android.os.Parcel,int)>
<android.location.Location: android.os.Parcelable$Creator CREATOR>
<android.location.Location: int FORMAT_DEGREES>
<android.location.Location: int FORMAT_MINUTES>
<android.location.Location: int FORMAT_SECONDS>
android.location.LocationListener
<android.location.LocationListener: void onFlushComplete(int)>
<android.location.LocationListener: void onLocationChanged(android.location.Location)>
<android.location.LocationListener: void onLocationChanged(java.util.List)>
<android.location.LocationListener: void onProviderDisabled(java.lang.String)>
<android.location.LocationListener: void onProviderEnabled(java.lang.String)>
<android.location.LocationListener: void onStatusChanged(java.lang.String,int,android.os.Bundle)>
android.location.LocationManager
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)>
<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener)>
<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)>
<android.location.LocationManager: boolean addNmeaListener(java.util.concurrent.Executor,android.location.OnNmeaMessageListener)>
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>
<android.location.LocationManager: void addTestProvider(java.lang.String,android.location.provider.ProviderProperties)>
<android.location.LocationManager: void addTestProvider(java.lang.String,android.location.provider.ProviderProperties,java.util.Set)>
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)>
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)>
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)>
<android.location.LocationManager: java.util.List getAllProviders()>
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.LocationManager: void getCurrentLocation(java.lang.String,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.location.LocationManager: void getCurrentLocation(java.lang.String,android.location.LocationRequest,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.location.LocationManager: java.util.List getGnssAntennaInfos()>
<android.location.LocationManager: android.location.GnssCapabilities getGnssCapabilities()>
<android.location.LocationManager: java.lang.String getGnssHardwareModelName()>
<android.location.LocationManager: int getGnssYearOfHardware()>
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)>
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
<android.location.LocationManager: android.location.provider.ProviderProperties getProviderProperties(java.lang.String)>
<android.location.LocationManager: java.util.List getProviders(boolean)>
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.LocationManager: boolean hasProvider(java.lang.String)>
<android.location.LocationManager: boolean isLocationEnabled()>
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
<android.location.LocationManager: boolean registerAntennaInfoListener(java.util.concurrent.Executor,android.location.GnssAntennaInfo$Listener)>
<android.location.LocationManager: boolean registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback)>
<android.location.LocationManager: boolean registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback,android.os.Handler)>
<android.location.LocationManager: boolean registerGnssMeasurementsCallback(java.util.concurrent.Executor,android.location.GnssMeasurementsEvent$Callback)>
<android.location.LocationManager: boolean registerGnssMeasurementsCallback(android.location.GnssMeasurementRequest,java.util.concurrent.Executor,android.location.GnssMeasurementsEvent$Callback)>
<android.location.LocationManager: boolean registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback)>
<android.location.LocationManager: boolean registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback,android.os.Handler)>
<android.location.LocationManager: boolean registerGnssNavigationMessageCallback(java.util.concurrent.Executor,android.location.GnssNavigationMessage$Callback)>
<android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus$Callback)>
<android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus$Callback,android.os.Handler)>
<android.location.LocationManager: boolean registerGnssStatusCallback(java.util.concurrent.Executor,android.location.GnssStatus$Callback)>
<android.location.LocationManager: void removeGpsStatusListener(android.location.GpsStatus$Listener)>
<android.location.LocationManager: void removeNmeaListener(android.location.GpsStatus$NmeaListener)>
<android.location.LocationManager: void removeNmeaListener(android.location.OnNmeaMessageListener)>
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)>
<android.location.LocationManager: void removeTestProvider(java.lang.String)>
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)>
<android.location.LocationManager: void requestFlush(java.lang.String,android.location.LocationListener,int)>
<android.location.LocationManager: void requestFlush(java.lang.String,android.app.PendingIntent,int)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,java.util.concurrent.Executor,android.location.LocationListener)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,java.util.concurrent.Executor,android.location.LocationListener)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,android.location.LocationRequest,java.util.concurrent.Executor,android.location.LocationListener)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,android.location.LocationRequest,android.app.PendingIntent)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>
<android.location.LocationManager: void unregisterAntennaInfoListener(android.location.GnssAntennaInfo$Listener)>
<android.location.LocationManager: void unregisterGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback)>
<android.location.LocationManager: void unregisterGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback)>
<android.location.LocationManager: void unregisterGnssStatusCallback(android.location.GnssStatus$Callback)>
<android.location.LocationManager: java.lang.String ACTION_GNSS_CAPABILITIES_CHANGED>
<android.location.LocationManager: java.lang.String EXTRA_GNSS_CAPABILITIES>
<android.location.LocationManager: java.lang.String EXTRA_LOCATION_ENABLED>
<android.location.LocationManager: java.lang.String EXTRA_PROVIDER_ENABLED>
<android.location.LocationManager: java.lang.String EXTRA_PROVIDER_NAME>
<android.location.LocationManager: java.lang.String FUSED_PROVIDER>
<android.location.LocationManager: java.lang.String GPS_PROVIDER>
<android.location.LocationManager: java.lang.String KEY_FLUSH_COMPLETE>
<android.location.LocationManager: java.lang.String KEY_LOCATIONS>
<android.location.LocationManager: java.lang.String KEY_LOCATION_CHANGED>
<android.location.LocationManager: java.lang.String KEY_PROVIDER_ENABLED>
<android.location.LocationManager: java.lang.String KEY_PROXIMITY_ENTERING>
<android.location.LocationManager: java.lang.String KEY_STATUS_CHANGED>
<android.location.LocationManager: java.lang.String MODE_CHANGED_ACTION>
<android.location.LocationManager: java.lang.String NETWORK_PROVIDER>
<android.location.LocationManager: java.lang.String PASSIVE_PROVIDER>
<android.location.LocationManager: java.lang.String PROVIDERS_CHANGED_ACTION>
android.location.LocationProvider
<android.location.LocationProvider: int getAccuracy()>
<android.location.LocationProvider: java.lang.String getName()>
<android.location.LocationProvider: int getPowerRequirement()>
<android.location.LocationProvider: boolean hasMonetaryCost()>
<android.location.LocationProvider: boolean meetsCriteria(android.location.Criteria)>
<android.location.LocationProvider: boolean requiresCell()>
<android.location.LocationProvider: boolean requiresNetwork()>
<android.location.LocationProvider: boolean requiresSatellite()>
<android.location.LocationProvider: boolean supportsAltitude()>
<android.location.LocationProvider: boolean supportsBearing()>
<android.location.LocationProvider: boolean supportsSpeed()>
<android.location.LocationProvider: int AVAILABLE>
<android.location.LocationProvider: int OUT_OF_SERVICE>
<android.location.LocationProvider: int TEMPORARILY_UNAVAILABLE>
android.location.LocationRequest
<android.location.LocationRequest: int describeContents()>
<android.location.LocationRequest: long getDurationMillis()>
<android.location.LocationRequest: long getIntervalMillis()>
<android.location.LocationRequest: long getMaxUpdateDelayMillis()>
<android.location.LocationRequest: int getMaxUpdates()>
<android.location.LocationRequest: float getMinUpdateDistanceMeters()>
<android.location.LocationRequest: long getMinUpdateIntervalMillis()>
<android.location.LocationRequest: int getQuality()>
<android.location.LocationRequest: void writeToParcel(android.os.Parcel,int)>
<android.location.LocationRequest: android.os.Parcelable$Creator CREATOR>
<android.location.LocationRequest: long PASSIVE_INTERVAL>
<android.location.LocationRequest: int QUALITY_BALANCED_POWER_ACCURACY>
<android.location.LocationRequest: int QUALITY_HIGH_ACCURACY>
<android.location.LocationRequest: int QUALITY_LOW_POWER>
android.location.LocationRequest$Builder
<android.location.LocationRequest$Builder: void <init>(long)>
<android.location.LocationRequest$Builder: void <init>(android.location.LocationRequest)>
<android.location.LocationRequest$Builder: android.location.LocationRequest build()>
<android.location.LocationRequest$Builder: android.location.LocationRequest$Builder clearMinUpdateIntervalMillis()>
<android.location.LocationRequest$Builder: android.location.LocationRequest$Builder setDurationMillis(long)>
<android.location.LocationRequest$Builder: android.location.LocationRequest$Builder setIntervalMillis(long)>
<android.location.LocationRequest$Builder: android.location.LocationRequest$Builder setMaxUpdateDelayMillis(long)>
<android.location.LocationRequest$Builder: android.location.LocationRequest$Builder setMaxUpdates(int)>
<android.location.LocationRequest$Builder: android.location.LocationRequest$Builder setMinUpdateDistanceMeters(float)>
<android.location.LocationRequest$Builder: android.location.LocationRequest$Builder setMinUpdateIntervalMillis(long)>
<android.location.LocationRequest$Builder: android.location.LocationRequest$Builder setQuality(int)>
android.location.OnNmeaMessageListener
<android.location.OnNmeaMessageListener: void onNmeaMessage(java.lang.String,long)>
android.location.SettingInjectorService
<android.location.SettingInjectorService: void <init>(java.lang.String)>
<android.location.SettingInjectorService: android.os.IBinder onBind(android.content.Intent)>
<android.location.SettingInjectorService: boolean onGetEnabled()>
<android.location.SettingInjectorService: java.lang.String onGetSummary()>
<android.location.SettingInjectorService: void onStart(android.content.Intent,int)>
<android.location.SettingInjectorService: int onStartCommand(android.content.Intent,int,int)>
<android.location.SettingInjectorService: void refreshSettings(android.content.Context)>
<android.location.SettingInjectorService: java.lang.String ACTION_INJECTED_SETTING_CHANGED>
<android.location.SettingInjectorService: java.lang.String ACTION_SERVICE_INTENT>
<android.location.SettingInjectorService: java.lang.String ATTRIBUTES_NAME>
<android.location.SettingInjectorService: java.lang.String META_DATA_NAME>
android.location.provider.ProviderProperties
<android.location.provider.ProviderProperties: int describeContents()>
<android.location.provider.ProviderProperties: int getAccuracy()>
<android.location.provider.ProviderProperties: int getPowerUsage()>
<android.location.provider.ProviderProperties: boolean hasAltitudeSupport()>
<android.location.provider.ProviderProperties: boolean hasBearingSupport()>
<android.location.provider.ProviderProperties: boolean hasCellRequirement()>
<android.location.provider.ProviderProperties: boolean hasMonetaryCost()>
<android.location.provider.ProviderProperties: boolean hasNetworkRequirement()>
<android.location.provider.ProviderProperties: boolean hasSatelliteRequirement()>
<android.location.provider.ProviderProperties: boolean hasSpeedSupport()>
<android.location.provider.ProviderProperties: void writeToParcel(android.os.Parcel,int)>
<android.location.provider.ProviderProperties: int ACCURACY_COARSE>
<android.location.provider.ProviderProperties: int ACCURACY_FINE>
<android.location.provider.ProviderProperties: android.os.Parcelable$Creator CREATOR>
<android.location.provider.ProviderProperties: int POWER_USAGE_HIGH>
<android.location.provider.ProviderProperties: int POWER_USAGE_LOW>
<android.location.provider.ProviderProperties: int POWER_USAGE_MEDIUM>
android.location.provider.ProviderProperties$Builder
<android.location.provider.ProviderProperties$Builder: void <init>()>
<android.location.provider.ProviderProperties$Builder: void <init>(android.location.provider.ProviderProperties)>
<android.location.provider.ProviderProperties$Builder: android.location.provider.ProviderProperties build()>
<android.location.provider.ProviderProperties$Builder: android.location.provider.ProviderProperties$Builder setAccuracy(int)>
<android.location.provider.ProviderProperties$Builder: android.location.provider.ProviderProperties$Builder setHasAltitudeSupport(boolean)>
<android.location.provider.ProviderProperties$Builder: android.location.provider.ProviderProperties$Builder setHasBearingSupport(boolean)>
<android.location.provider.ProviderProperties$Builder: android.location.provider.ProviderProperties$Builder setHasCellRequirement(boolean)>
<android.location.provider.ProviderProperties$Builder: android.location.provider.ProviderProperties$Builder setHasMonetaryCost(boolean)>
<android.location.provider.ProviderProperties$Builder: android.location.provider.ProviderProperties$Builder setHasNetworkRequirement(boolean)>
<android.location.provider.ProviderProperties$Builder: android.location.provider.ProviderProperties$Builder setHasSatelliteRequirement(boolean)>
<android.location.provider.ProviderProperties$Builder: android.location.provider.ProviderProperties$Builder setHasSpeedSupport(boolean)>
<android.location.provider.ProviderProperties$Builder: android.location.provider.ProviderProperties$Builder setPowerUsage(int)>
android.media.AsyncPlayer
<android.media.AsyncPlayer: void <init>(java.lang.String)>
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)>
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,android.media.AudioAttributes)>
<android.media.AsyncPlayer: void stop()>
android.media.AudioAttributes
<android.media.AudioAttributes: boolean areHapticChannelsMuted()>
<android.media.AudioAttributes: int describeContents()>
<android.media.AudioAttributes: int getAllowedCapturePolicy()>
<android.media.AudioAttributes: int getContentType()>
<android.media.AudioAttributes: int getFlags()>
<android.media.AudioAttributes: int getSpatializationBehavior()>
<android.media.AudioAttributes: int getUsage()>
<android.media.AudioAttributes: int getVolumeControlStream()>
<android.media.AudioAttributes: boolean isContentSpatialized()>
<android.media.AudioAttributes: void writeToParcel(android.os.Parcel,int)>
<android.media.AudioAttributes: int ALLOW_CAPTURE_BY_ALL>
<android.media.AudioAttributes: int ALLOW_CAPTURE_BY_NONE>
<android.media.AudioAttributes: int ALLOW_CAPTURE_BY_SYSTEM>
<android.media.AudioAttributes: int CONTENT_TYPE_MOVIE>
<android.media.AudioAttributes: int CONTENT_TYPE_MUSIC>
<android.media.AudioAttributes: int CONTENT_TYPE_SONIFICATION>
<android.media.AudioAttributes: int CONTENT_TYPE_SPEECH>
<android.media.AudioAttributes: int CONTENT_TYPE_UNKNOWN>
<android.media.AudioAttributes: android.os.Parcelable$Creator CREATOR>
<android.media.AudioAttributes: int FLAG_AUDIBILITY_ENFORCED>
<android.media.AudioAttributes: int FLAG_HW_AV_SYNC>
<android.media.AudioAttributes: int FLAG_LOW_LATENCY>
<android.media.AudioAttributes: int SPATIALIZATION_BEHAVIOR_AUTO>
<android.media.AudioAttributes: int SPATIALIZATION_BEHAVIOR_NEVER>
<android.media.AudioAttributes: int USAGE_ALARM>
<android.media.AudioAttributes: int USAGE_ASSISTANCE_ACCESSIBILITY>
<android.media.AudioAttributes: int USAGE_ASSISTANCE_NAVIGATION_GUIDANCE>
<android.media.AudioAttributes: int USAGE_ASSISTANCE_SONIFICATION>
<android.media.AudioAttributes: int USAGE_ASSISTANT>
<android.media.AudioAttributes: int USAGE_GAME>
<android.media.AudioAttributes: int USAGE_MEDIA>
<android.media.AudioAttributes: int USAGE_NOTIFICATION>
<android.media.AudioAttributes: int USAGE_NOTIFICATION_COMMUNICATION_DELAYED>
<android.media.AudioAttributes: int USAGE_NOTIFICATION_COMMUNICATION_INSTANT>
<android.media.AudioAttributes: int USAGE_NOTIFICATION_COMMUNICATION_REQUEST>
<android.media.AudioAttributes: int USAGE_NOTIFICATION_EVENT>
<android.media.AudioAttributes: int USAGE_NOTIFICATION_RINGTONE>
<android.media.AudioAttributes: int USAGE_UNKNOWN>
<android.media.AudioAttributes: int USAGE_VOICE_COMMUNICATION>
<android.media.AudioAttributes: int USAGE_VOICE_COMMUNICATION_SIGNALLING>
android.media.AudioAttributes$Builder
<android.media.AudioAttributes$Builder: void <init>()>
<android.media.AudioAttributes$Builder: void <init>(android.media.AudioAttributes)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setAllowedCapturePolicy(int)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setContentType(int)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setFlags(int)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setHapticChannelsMuted(boolean)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setIsContentSpatialized(boolean)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setLegacyStreamType(int)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setSpatializationBehavior(int)>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>
android.media.AudioDescriptor
<android.media.AudioDescriptor: int describeContents()>
<android.media.AudioDescriptor: byte[] getDescriptor()>
<android.media.AudioDescriptor: int getEncapsulationType()>
<android.media.AudioDescriptor: int getStandard()>
<android.media.AudioDescriptor: void writeToParcel(android.os.Parcel,int)>
<android.media.AudioDescriptor: android.os.Parcelable$Creator CREATOR>
<android.media.AudioDescriptor: int STANDARD_EDID>
<android.media.AudioDescriptor: int STANDARD_NONE>
android.media.AudioDeviceCallback
<android.media.AudioDeviceCallback: void <init>()>
<android.media.AudioDeviceCallback: void onAudioDevicesAdded(android.media.AudioDeviceInfo[])>
<android.media.AudioDeviceCallback: void onAudioDevicesRemoved(android.media.AudioDeviceInfo[])>
android.media.AudioDeviceInfo
<android.media.AudioDeviceInfo: java.lang.String getAddress()>
<android.media.AudioDeviceInfo: java.util.List getAudioDescriptors()>
<android.media.AudioDeviceInfo: java.util.List getAudioProfiles()>
<android.media.AudioDeviceInfo: int[] getChannelCounts()>
<android.media.AudioDeviceInfo: int[] getChannelIndexMasks()>
<android.media.AudioDeviceInfo: int[] getChannelMasks()>
<android.media.AudioDeviceInfo: int[] getEncapsulationMetadataTypes()>
<android.media.AudioDeviceInfo: int[] getEncapsulationModes()>
<android.media.AudioDeviceInfo: int[] getEncodings()>
<android.media.AudioDeviceInfo: int getId()>
<android.media.AudioDeviceInfo: java.lang.CharSequence getProductName()>
<android.media.AudioDeviceInfo: int[] getSampleRates()>
<android.media.AudioDeviceInfo: int getType()>
<android.media.AudioDeviceInfo: boolean isSink()>
<android.media.AudioDeviceInfo: boolean isSource()>
<android.media.AudioDeviceInfo: int TYPE_AUX_LINE>
<android.media.AudioDeviceInfo: int TYPE_BLE_BROADCAST>
<android.media.AudioDeviceInfo: int TYPE_BLE_HEADSET>
<android.media.AudioDeviceInfo: int TYPE_BLE_SPEAKER>
<android.media.AudioDeviceInfo: int TYPE_BLUETOOTH_A2DP>
<android.media.AudioDeviceInfo: int TYPE_BLUETOOTH_SCO>
<android.media.AudioDeviceInfo: int TYPE_BUILTIN_EARPIECE>
<android.media.AudioDeviceInfo: int TYPE_BUILTIN_MIC>
<android.media.AudioDeviceInfo: int TYPE_BUILTIN_SPEAKER>
<android.media.AudioDeviceInfo: int TYPE_BUILTIN_SPEAKER_SAFE>
<android.media.AudioDeviceInfo: int TYPE_BUS>
<android.media.AudioDeviceInfo: int TYPE_DOCK>
<android.media.AudioDeviceInfo: int TYPE_FM>
<android.media.AudioDeviceInfo: int TYPE_FM_TUNER>
<android.media.AudioDeviceInfo: int TYPE_HDMI>
<android.media.AudioDeviceInfo: int TYPE_HDMI_ARC>
<android.media.AudioDeviceInfo: int TYPE_HDMI_EARC>
<android.media.AudioDeviceInfo: int TYPE_HEARING_AID>
<android.media.AudioDeviceInfo: int TYPE_IP>
<android.media.AudioDeviceInfo: int TYPE_LINE_ANALOG>
<android.media.AudioDeviceInfo: int TYPE_LINE_DIGITAL>
<android.media.AudioDeviceInfo: int TYPE_REMOTE_SUBMIX>
<android.media.AudioDeviceInfo: int TYPE_TELEPHONY>
<android.media.AudioDeviceInfo: int TYPE_TV_TUNER>
<android.media.AudioDeviceInfo: int TYPE_UNKNOWN>
<android.media.AudioDeviceInfo: int TYPE_USB_ACCESSORY>
<android.media.AudioDeviceInfo: int TYPE_USB_DEVICE>
<android.media.AudioDeviceInfo: int TYPE_USB_HEADSET>
<android.media.AudioDeviceInfo: int TYPE_WIRED_HEADPHONES>
<android.media.AudioDeviceInfo: int TYPE_WIRED_HEADSET>
android.media.AudioFocusRequest
<android.media.AudioFocusRequest: boolean acceptsDelayedFocusGain()>
<android.media.AudioFocusRequest: android.media.AudioAttributes getAudioAttributes()>
<android.media.AudioFocusRequest: int getFocusGain()>
<android.media.AudioFocusRequest: boolean willPauseWhenDucked()>
android.media.AudioFocusRequest$Builder
<android.media.AudioFocusRequest$Builder: void <init>(int)>
<android.media.AudioFocusRequest$Builder: void <init>(android.media.AudioFocusRequest)>
<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest build()>
<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setAcceptsDelayedFocusGain(boolean)>
<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setAudioAttributes(android.media.AudioAttributes)>
<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setFocusGain(int)>
<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setForceDucking(boolean)>
<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setOnAudioFocusChangeListener(android.media.AudioManager$OnAudioFocusChangeListener)>
<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setOnAudioFocusChangeListener(android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler)>
<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setWillPauseWhenDucked(boolean)>
android.media.AudioFormat
<android.media.AudioFormat: int describeContents()>
<android.media.AudioFormat: int getChannelCount()>
<android.media.AudioFormat: int getChannelIndexMask()>
<android.media.AudioFormat: int getChannelMask()>
<android.media.AudioFormat: int getEncoding()>
<android.media.AudioFormat: int getFrameSizeInBytes()>
<android.media.AudioFormat: int getSampleRate()>
<android.media.AudioFormat: void writeToParcel(android.os.Parcel,int)>
<android.media.AudioFormat: int CHANNEL_CONFIGURATION_DEFAULT>
<android.media.AudioFormat: int CHANNEL_CONFIGURATION_INVALID>
<android.media.AudioFormat: int CHANNEL_CONFIGURATION_MONO>
<android.media.AudioFormat: int CHANNEL_CONFIGURATION_STEREO>
<android.media.AudioFormat: int CHANNEL_INVALID>
<android.media.AudioFormat: int CHANNEL_IN_BACK>
<android.media.AudioFormat: int CHANNEL_IN_BACK_PROCESSED>
<android.media.AudioFormat: int CHANNEL_IN_DEFAULT>
<android.media.AudioFormat: int CHANNEL_IN_FRONT>
<android.media.AudioFormat: int CHANNEL_IN_FRONT_PROCESSED>
<android.media.AudioFormat: int CHANNEL_IN_LEFT>
<android.media.AudioFormat: int CHANNEL_IN_LEFT_PROCESSED>
<android.media.AudioFormat: int CHANNEL_IN_MONO>
<android.media.AudioFormat: int CHANNEL_IN_PRESSURE>
<android.media.AudioFormat: int CHANNEL_IN_RIGHT>
<android.media.AudioFormat: int CHANNEL_IN_RIGHT_PROCESSED>
<android.media.AudioFormat: int CHANNEL_IN_STEREO>
<android.media.AudioFormat: int CHANNEL_IN_VOICE_DNLINK>
<android.media.AudioFormat: int CHANNEL_IN_VOICE_UPLINK>
<android.media.AudioFormat: int CHANNEL_IN_X_AXIS>
<android.media.AudioFormat: int CHANNEL_IN_Y_AXIS>
<android.media.AudioFormat: int CHANNEL_IN_Z_AXIS>
<android.media.AudioFormat: int CHANNEL_OUT_5POINT1>
<android.media.AudioFormat: int CHANNEL_OUT_5POINT1POINT2>
<android.media.AudioFormat: int CHANNEL_OUT_5POINT1POINT4>
<android.media.AudioFormat: int CHANNEL_OUT_7POINT1>
<android.media.AudioFormat: int CHANNEL_OUT_7POINT1POINT2>
<android.media.AudioFormat: int CHANNEL_OUT_7POINT1POINT4>
<android.media.AudioFormat: int CHANNEL_OUT_7POINT1_SURROUND>
<android.media.AudioFormat: int CHANNEL_OUT_9POINT1POINT4>
<android.media.AudioFormat: int CHANNEL_OUT_9POINT1POINT6>
<android.media.AudioFormat: int CHANNEL_OUT_BACK_CENTER>
<android.media.AudioFormat: int CHANNEL_OUT_BACK_LEFT>
<android.media.AudioFormat: int CHANNEL_OUT_BACK_RIGHT>
<android.media.AudioFormat: int CHANNEL_OUT_BOTTOM_FRONT_CENTER>
<android.media.AudioFormat: int CHANNEL_OUT_BOTTOM_FRONT_LEFT>
<android.media.AudioFormat: int CHANNEL_OUT_BOTTOM_FRONT_RIGHT>
<android.media.AudioFormat: int CHANNEL_OUT_DEFAULT>
<android.media.AudioFormat: int CHANNEL_OUT_FRONT_CENTER>
<android.media.AudioFormat: int CHANNEL_OUT_FRONT_LEFT>
<android.media.AudioFormat: int CHANNEL_OUT_FRONT_LEFT_OF_CENTER>
<android.media.AudioFormat: int CHANNEL_OUT_FRONT_RIGHT>
<android.media.AudioFormat: int CHANNEL_OUT_FRONT_RIGHT_OF_CENTER>
<android.media.AudioFormat: int CHANNEL_OUT_FRONT_WIDE_LEFT>
<android.media.AudioFormat: int CHANNEL_OUT_FRONT_WIDE_RIGHT>
<android.media.AudioFormat: int CHANNEL_OUT_LOW_FREQUENCY>
<android.media.AudioFormat: int CHANNEL_OUT_LOW_FREQUENCY_2>
<android.media.AudioFormat: int CHANNEL_OUT_MONO>
<android.media.AudioFormat: int CHANNEL_OUT_QUAD>
<android.media.AudioFormat: int CHANNEL_OUT_SIDE_LEFT>
<android.media.AudioFormat: int CHANNEL_OUT_SIDE_RIGHT>
<android.media.AudioFormat: int CHANNEL_OUT_STEREO>
<android.media.AudioFormat: int CHANNEL_OUT_SURROUND>
<android.media.AudioFormat: int CHANNEL_OUT_TOP_BACK_CENTER>
<android.media.AudioFormat: int CHANNEL_OUT_TOP_BACK_LEFT>
<android.media.AudioFormat: int CHANNEL_OUT_TOP_BACK_RIGHT>
<android.media.AudioFormat: int CHANNEL_OUT_TOP_CENTER>
<android.media.AudioFormat: int CHANNEL_OUT_TOP_FRONT_CENTER>
<android.media.AudioFormat: int CHANNEL_OUT_TOP_FRONT_LEFT>
<android.media.AudioFormat: int CHANNEL_OUT_TOP_FRONT_RIGHT>
<android.media.AudioFormat: int CHANNEL_OUT_TOP_SIDE_LEFT>
<android.media.AudioFormat: int CHANNEL_OUT_TOP_SIDE_RIGHT>
<android.media.AudioFormat: android.os.Parcelable$Creator CREATOR>
<android.media.AudioFormat: int ENCODING_AAC_ELD>
<android.media.AudioFormat: int ENCODING_AAC_HE_V1>
<android.media.AudioFormat: int ENCODING_AAC_HE_V2>
<android.media.AudioFormat: int ENCODING_AAC_LC>
<android.media.AudioFormat: int ENCODING_AAC_XHE>
<android.media.AudioFormat: int ENCODING_AC3>
<android.media.AudioFormat: int ENCODING_AC4>
<android.media.AudioFormat: int ENCODING_DEFAULT>
<android.media.AudioFormat: int ENCODING_DOLBY_MAT>
<android.media.AudioFormat: int ENCODING_DOLBY_TRUEHD>
<android.media.AudioFormat: int ENCODING_DRA>
<android.media.AudioFormat: int ENCODING_DTS>
<android.media.AudioFormat: int ENCODING_DTS_HD>
<android.media.AudioFormat: int ENCODING_DTS_UHD>
<android.media.AudioFormat: int ENCODING_E_AC3>
<android.media.AudioFormat: int ENCODING_E_AC3_JOC>
<android.media.AudioFormat: int ENCODING_IEC61937>
<android.media.AudioFormat: int ENCODING_INVALID>
<android.media.AudioFormat: int ENCODING_MP3>
<android.media.AudioFormat: int ENCODING_MPEGH_BL_L3>
<android.media.AudioFormat: int ENCODING_MPEGH_BL_L4>
<android.media.AudioFormat: int ENCODING_MPEGH_LC_L3>
<android.media.AudioFormat: int ENCODING_MPEGH_LC_L4>
<android.media.AudioFormat: int ENCODING_OPUS>
<android.media.AudioFormat: int ENCODING_PCM_16BIT>
<android.media.AudioFormat: int ENCODING_PCM_24BIT_PACKED>
<android.media.AudioFormat: int ENCODING_PCM_32BIT>
<android.media.AudioFormat: int ENCODING_PCM_8BIT>
<android.media.AudioFormat: int ENCODING_PCM_FLOAT>
<android.media.AudioFormat: int SAMPLE_RATE_UNSPECIFIED>
android.media.AudioFormat$Builder
<android.media.AudioFormat$Builder: void <init>()>
<android.media.AudioFormat$Builder: void <init>(android.media.AudioFormat)>
<android.media.AudioFormat$Builder: android.media.AudioFormat build()>
<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelIndexMask(int)>
<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>
<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>
<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setSampleRate(int)>
android.media.AudioManager
<android.media.AudioManager: int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener)>
<android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>
<android.media.AudioManager: void addOnCommunicationDeviceChangedListener(java.util.concurrent.Executor,android.media.AudioManager$OnCommunicationDeviceChangedListener)>
<android.media.AudioManager: void addOnModeChangedListener(java.util.concurrent.Executor,android.media.AudioManager$OnModeChangedListener)>
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>
<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>
<android.media.AudioManager: void adjustVolume(int,int)>
<android.media.AudioManager: void clearCommunicationDevice()>
<android.media.AudioManager: void dispatchMediaKeyEvent(android.view.KeyEvent)>
<android.media.AudioManager: int generateAudioSessionId()>
<android.media.AudioManager: java.util.List getActivePlaybackConfigurations()>
<android.media.AudioManager: java.util.List getActiveRecordingConfigurations()>
<android.media.AudioManager: int getAllowedCapturePolicy()>
<android.media.AudioManager: java.util.List getAudioDevicesForAttributes(android.media.AudioAttributes)>
<android.media.AudioManager: int getAudioHwSyncForSession(int)>
<android.media.AudioManager: java.util.List getAvailableCommunicationDevices()>
<android.media.AudioManager: android.media.AudioDeviceInfo getCommunicationDevice()>
<android.media.AudioManager: android.media.AudioDeviceInfo[] getDevices(int)>
<android.media.AudioManager: int getDirectPlaybackSupport(android.media.AudioFormat,android.media.AudioAttributes)>
<android.media.AudioManager: java.util.List getDirectProfilesForAttributes(android.media.AudioAttributes)>
<android.media.AudioManager: int getEncodedSurroundMode()>
<android.media.AudioManager: java.util.List getMicrophones()>
<android.media.AudioManager: int getMode()>
<android.media.AudioManager: java.lang.String getParameters(java.lang.String)>
<android.media.AudioManager: int getPlaybackOffloadSupport(android.media.AudioFormat,android.media.AudioAttributes)>
<android.media.AudioManager: java.lang.String getProperty(java.lang.String)>
<android.media.AudioManager: int getRingerMode()>
<android.media.AudioManager: int getRouting(int)>
<android.media.AudioManager: android.media.Spatializer getSpatializer()>
<android.media.AudioManager: int getStreamMaxVolume(int)>
<android.media.AudioManager: int getStreamMinVolume(int)>
<android.media.AudioManager: int getStreamVolume(int)>
<android.media.AudioManager: float getStreamVolumeDb(int,int,int)>
<android.media.AudioManager: int getVibrateSetting(int)>
<android.media.AudioManager: boolean isBluetoothA2dpOn()>
<android.media.AudioManager: boolean isBluetoothScoAvailableOffCall()>
<android.media.AudioManager: boolean isBluetoothScoOn()>
<android.media.AudioManager: boolean isCallScreeningModeSupported()>
<android.media.AudioManager: boolean isHapticPlaybackSupported()>
<android.media.AudioManager: boolean isMicrophoneMute()>
<android.media.AudioManager: boolean isMusicActive()>
<android.media.AudioManager: boolean isOffloadedPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)>
<android.media.AudioManager: boolean isRampingRingerEnabled()>
<android.media.AudioManager: boolean isSpeakerphoneOn()>
<android.media.AudioManager: boolean isStreamMute(int)>
<android.media.AudioManager: boolean isSurroundFormatEnabled(int)>
<android.media.AudioManager: boolean isVolumeFixed()>
<android.media.AudioManager: boolean isWiredHeadsetOn()>
<android.media.AudioManager: void loadSoundEffects()>
<android.media.AudioManager: void playSoundEffect(int)>
<android.media.AudioManager: void playSoundEffect(int,float)>
<android.media.AudioManager: void registerAudioDeviceCallback(android.media.AudioDeviceCallback,android.os.Handler)>
<android.media.AudioManager: void registerAudioPlaybackCallback(android.media.AudioManager$AudioPlaybackCallback,android.os.Handler)>
<android.media.AudioManager: void registerAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback,android.os.Handler)>
<android.media.AudioManager: void registerMediaButtonEventReceiver(android.content.ComponentName)>
<android.media.AudioManager: void registerMediaButtonEventReceiver(android.app.PendingIntent)>
<android.media.AudioManager: void registerRemoteControlClient(android.media.RemoteControlClient)>
<android.media.AudioManager: boolean registerRemoteController(android.media.RemoteController)>
<android.media.AudioManager: void removeOnCommunicationDeviceChangedListener(android.media.AudioManager$OnCommunicationDeviceChangedListener)>
<android.media.AudioManager: void removeOnModeChangedListener(android.media.AudioManager$OnModeChangedListener)>
<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,int,int)>
<android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>
<android.media.AudioManager: void setAllowedCapturePolicy(int)>
<android.media.AudioManager: void setBluetoothA2dpOn(boolean)>
<android.media.AudioManager: void setBluetoothScoOn(boolean)>
<android.media.AudioManager: boolean setCommunicationDevice(android.media.AudioDeviceInfo)>
<android.media.AudioManager: boolean setEncodedSurroundMode(int)>
<android.media.AudioManager: void setMicrophoneMute(boolean)>
<android.media.AudioManager: void setMode(int)>
<android.media.AudioManager: void setParameters(java.lang.String)>
<android.media.AudioManager: void setRingerMode(int)>
<android.media.AudioManager: void setRouting(int,int,int)>
<android.media.AudioManager: void setSpeakerphoneOn(boolean)>
<android.media.AudioManager: void setStreamMute(int,boolean)>
<android.media.AudioManager: void setStreamSolo(int,boolean)>
<android.media.AudioManager: void setStreamVolume(int,int,int)>
<android.media.AudioManager: boolean setSurroundFormatEnabled(int,boolean)>
<android.media.AudioManager: void setVibrateSetting(int,int)>
<android.media.AudioManager: void setWiredHeadsetOn(boolean)>
<android.media.AudioManager: boolean shouldVibrate(int)>
<android.media.AudioManager: void startBluetoothSco()>
<android.media.AudioManager: void stopBluetoothSco()>
<android.media.AudioManager: void unloadSoundEffects()>
<android.media.AudioManager: void unregisterAudioDeviceCallback(android.media.AudioDeviceCallback)>
<android.media.AudioManager: void unregisterAudioPlaybackCallback(android.media.AudioManager$AudioPlaybackCallback)>
<android.media.AudioManager: void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)>
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.content.ComponentName)>
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.app.PendingIntent)>
<android.media.AudioManager: void unregisterRemoteControlClient(android.media.RemoteControlClient)>
<android.media.AudioManager: void unregisterRemoteController(android.media.RemoteController)>
<android.media.AudioManager: java.lang.String ACTION_AUDIO_BECOMING_NOISY>
<android.media.AudioManager: java.lang.String ACTION_HDMI_AUDIO_PLUG>
<android.media.AudioManager: java.lang.String ACTION_HEADSET_PLUG>
<android.media.AudioManager: java.lang.String ACTION_MICROPHONE_MUTE_CHANGED>
<android.media.AudioManager: java.lang.String ACTION_SCO_AUDIO_STATE_CHANGED>
<android.media.AudioManager: java.lang.String ACTION_SCO_AUDIO_STATE_UPDATED>
<android.media.AudioManager: java.lang.String ACTION_SPEAKERPHONE_STATE_CHANGED>
<android.media.AudioManager: int ADJUST_LOWER>
<android.media.AudioManager: int ADJUST_MUTE>
<android.media.AudioManager: int ADJUST_RAISE>
<android.media.AudioManager: int ADJUST_SAME>
<android.media.AudioManager: int ADJUST_TOGGLE_MUTE>
<android.media.AudioManager: int ADJUST_UNMUTE>
<android.media.AudioManager: int AUDIOFOCUS_GAIN>
<android.media.AudioManager: int AUDIOFOCUS_GAIN_TRANSIENT>
<android.media.AudioManager: int AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE>
<android.media.AudioManager: int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK>
<android.media.AudioManager: int AUDIOFOCUS_LOSS>
<android.media.AudioManager: int AUDIOFOCUS_LOSS_TRANSIENT>
<android.media.AudioManager: int AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK>
<android.media.AudioManager: int AUDIOFOCUS_NONE>
<android.media.AudioManager: int AUDIOFOCUS_REQUEST_DELAYED>
<android.media.AudioManager: int AUDIOFOCUS_REQUEST_FAILED>
<android.media.AudioManager: int AUDIOFOCUS_REQUEST_GRANTED>
<android.media.AudioManager: int AUDIO_SESSION_ID_GENERATE>
<android.media.AudioManager: int DIRECT_PLAYBACK_BITSTREAM_SUPPORTED>
<android.media.AudioManager: int DIRECT_PLAYBACK_NOT_SUPPORTED>
<android.media.AudioManager: int DIRECT_PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED>
<android.media.AudioManager: int DIRECT_PLAYBACK_OFFLOAD_SUPPORTED>
<android.media.AudioManager: int ENCODED_SURROUND_OUTPUT_ALWAYS>
<android.media.AudioManager: int ENCODED_SURROUND_OUTPUT_AUTO>
<android.media.AudioManager: int ENCODED_SURROUND_OUTPUT_MANUAL>
<android.media.AudioManager: int ENCODED_SURROUND_OUTPUT_NEVER>
<android.media.AudioManager: int ENCODED_SURROUND_OUTPUT_UNKNOWN>
<android.media.AudioManager: int ERROR>
<android.media.AudioManager: int ERROR_DEAD_OBJECT>
<android.media.AudioManager: java.lang.String EXTRA_AUDIO_PLUG_STATE>
<android.media.AudioManager: java.lang.String EXTRA_ENCODINGS>
<android.media.AudioManager: java.lang.String EXTRA_MAX_CHANNEL_COUNT>
<android.media.AudioManager: java.lang.String EXTRA_RINGER_MODE>
<android.media.AudioManager: java.lang.String EXTRA_SCO_AUDIO_PREVIOUS_STATE>
<android.media.AudioManager: java.lang.String EXTRA_SCO_AUDIO_STATE>
<android.media.AudioManager: java.lang.String EXTRA_VIBRATE_SETTING>
<android.media.AudioManager: java.lang.String EXTRA_VIBRATE_TYPE>
<android.media.AudioManager: int FLAG_ALLOW_RINGER_MODES>
<android.media.AudioManager: int FLAG_PLAY_SOUND>
<android.media.AudioManager: int FLAG_REMOVE_SOUND_AND_VIBRATE>
<android.media.AudioManager: int FLAG_SHOW_UI>
<android.media.AudioManager: int FLAG_VIBRATE>
<android.media.AudioManager: int FX_BACK>
<android.media.AudioManager: int FX_FOCUS_NAVIGATION_DOWN>
<android.media.AudioManager: int FX_FOCUS_NAVIGATION_LEFT>
<android.media.AudioManager: int FX_FOCUS_NAVIGATION_RIGHT>
<android.media.AudioManager: int FX_FOCUS_NAVIGATION_UP>
<android.media.AudioManager: int FX_KEYPRESS_DELETE>
<android.media.AudioManager: int FX_KEYPRESS_INVALID>
<android.media.AudioManager: int FX_KEYPRESS_RETURN>
<android.media.AudioManager: int FX_KEYPRESS_SPACEBAR>
<android.media.AudioManager: int FX_KEYPRESS_STANDARD>
<android.media.AudioManager: int FX_KEY_CLICK>
<android.media.AudioManager: int GET_DEVICES_ALL>
<android.media.AudioManager: int GET_DEVICES_INPUTS>
<android.media.AudioManager: int GET_DEVICES_OUTPUTS>
<android.media.AudioManager: int MODE_CALL_REDIRECT>
<android.media.AudioManager: int MODE_CALL_SCREENING>
<android.media.AudioManager: int MODE_COMMUNICATION_REDIRECT>
<android.media.AudioManager: int MODE_CURRENT>
<android.media.AudioManager: int MODE_INVALID>
<android.media.AudioManager: int MODE_IN_CALL>
<android.media.AudioManager: int MODE_IN_COMMUNICATION>
<android.media.AudioManager: int MODE_NORMAL>
<android.media.AudioManager: int MODE_RINGTONE>
<android.media.AudioManager: int NUM_STREAMS>
<android.media.AudioManager: int PLAYBACK_OFFLOAD_GAPLESS_SUPPORTED>
<android.media.AudioManager: int PLAYBACK_OFFLOAD_NOT_SUPPORTED>
<android.media.AudioManager: int PLAYBACK_OFFLOAD_SUPPORTED>
<android.media.AudioManager: java.lang.String PROPERTY_OUTPUT_FRAMES_PER_BUFFER>
<android.media.AudioManager: java.lang.String PROPERTY_OUTPUT_SAMPLE_RATE>
<android.media.AudioManager: java.lang.String PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED>
<android.media.AudioManager: java.lang.String PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND>
<android.media.AudioManager: java.lang.String PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND>
<android.media.AudioManager: java.lang.String RINGER_MODE_CHANGED_ACTION>
<android.media.AudioManager: int RINGER_MODE_NORMAL>
<android.media.AudioManager: int RINGER_MODE_SILENT>
<android.media.AudioManager: int RINGER_MODE_VIBRATE>
<android.media.AudioManager: int ROUTE_ALL>
<android.media.AudioManager: int ROUTE_BLUETOOTH>
<android.media.AudioManager: int ROUTE_BLUETOOTH_A2DP>
<android.media.AudioManager: int ROUTE_BLUETOOTH_SCO>
<android.media.AudioManager: int ROUTE_EARPIECE>
<android.media.AudioManager: int ROUTE_HEADSET>
<android.media.AudioManager: int ROUTE_SPEAKER>
<android.media.AudioManager: int SCO_AUDIO_STATE_CONNECTED>
<android.media.AudioManager: int SCO_AUDIO_STATE_CONNECTING>
<android.media.AudioManager: int SCO_AUDIO_STATE_DISCONNECTED>
<android.media.AudioManager: int SCO_AUDIO_STATE_ERROR>
<android.media.AudioManager: int STREAM_ACCESSIBILITY>
<android.media.AudioManager: int STREAM_ALARM>
<android.media.AudioManager: int STREAM_DTMF>
<android.media.AudioManager: int STREAM_MUSIC>
<android.media.AudioManager: int STREAM_NOTIFICATION>
<android.media.AudioManager: int STREAM_RING>
<android.media.AudioManager: int STREAM_SYSTEM>
<android.media.AudioManager: int STREAM_VOICE_CALL>
<android.media.AudioManager: int USE_DEFAULT_STREAM_TYPE>
<android.media.AudioManager: java.lang.String VIBRATE_SETTING_CHANGED_ACTION>
<android.media.AudioManager: int VIBRATE_SETTING_OFF>
<android.media.AudioManager: int VIBRATE_SETTING_ON>
<android.media.AudioManager: int VIBRATE_SETTING_ONLY_SILENT>
<android.media.AudioManager: int VIBRATE_TYPE_NOTIFICATION>
<android.media.AudioManager: int VIBRATE_TYPE_RINGER>
android.media.AudioManager$AudioPlaybackCallback
<android.media.AudioManager$AudioPlaybackCallback: void <init>()>
<android.media.AudioManager$AudioPlaybackCallback: void onPlaybackConfigChanged(java.util.List)>
android.media.AudioManager$AudioRecordingCallback
<android.media.AudioManager$AudioRecordingCallback: void <init>()>
<android.media.AudioManager$AudioRecordingCallback: void onRecordingConfigChanged(java.util.List)>
android.media.AudioManager$OnAudioFocusChangeListener
<android.media.AudioManager$OnAudioFocusChangeListener: void onAudioFocusChange(int)>
android.media.AudioManager$OnCommunicationDeviceChangedListener
<android.media.AudioManager$OnCommunicationDeviceChangedListener: void onCommunicationDeviceChanged(android.media.AudioDeviceInfo)>
android.media.AudioManager$OnModeChangedListener
<android.media.AudioManager$OnModeChangedListener: void onModeChanged(int)>
android.media.AudioMetadata
<android.media.AudioMetadata: android.media.AudioMetadataMap createMap()>
android.media.AudioMetadata$Format
<android.media.AudioMetadata$Format: android.media.AudioMetadata$Key KEY_ATMOS_PRESENT>
<android.media.AudioMetadata$Format: android.media.AudioMetadata$Key KEY_AUDIO_ENCODING>
<android.media.AudioMetadata$Format: android.media.AudioMetadata$Key KEY_BIT_RATE>
<android.media.AudioMetadata$Format: android.media.AudioMetadata$Key KEY_BIT_WIDTH>
<android.media.AudioMetadata$Format: android.media.AudioMetadata$Key KEY_CHANNEL_MASK>
<android.media.AudioMetadata$Format: android.media.AudioMetadata$Key KEY_MIME>
<android.media.AudioMetadata$Format: android.media.AudioMetadata$Key KEY_PRESENTATION_CONTENT_CLASSIFIER>
<android.media.AudioMetadata$Format: android.media.AudioMetadata$Key KEY_PRESENTATION_ID>
<android.media.AudioMetadata$Format: android.media.AudioMetadata$Key KEY_PRESENTATION_LANGUAGE>
<android.media.AudioMetadata$Format: android.media.AudioMetadata$Key KEY_PROGRAM_ID>
<android.media.AudioMetadata$Format: android.media.AudioMetadata$Key KEY_SAMPLE_RATE>
android.media.AudioMetadata$Key
<android.media.AudioMetadata$Key: java.lang.String getName()>
<android.media.AudioMetadata$Key: java.lang.Class getValueClass()>
android.media.AudioMetadataMap
<android.media.AudioMetadataMap: java.lang.Object remove(android.media.AudioMetadata$Key)>
<android.media.AudioMetadataMap: java.lang.Object set(android.media.AudioMetadata$Key,java.lang.Object)>
android.media.AudioMetadataReadMap
<android.media.AudioMetadataReadMap: boolean containsKey(android.media.AudioMetadata$Key)>
<android.media.AudioMetadataReadMap: android.media.AudioMetadataMap dup()>
<android.media.AudioMetadataReadMap: java.lang.Object get(android.media.AudioMetadata$Key)>
<android.media.AudioMetadataReadMap: int size()>
android.media.AudioPlaybackCaptureConfiguration
<android.media.AudioPlaybackCaptureConfiguration: int[] getExcludeUids()>
<android.media.AudioPlaybackCaptureConfiguration: int[] getExcludeUsages()>
<android.media.AudioPlaybackCaptureConfiguration: int[] getMatchingUids()>
<android.media.AudioPlaybackCaptureConfiguration: int[] getMatchingUsages()>
<android.media.AudioPlaybackCaptureConfiguration: android.media.projection.MediaProjection getMediaProjection()>
android.media.AudioPlaybackCaptureConfiguration$Builder
<android.media.AudioPlaybackCaptureConfiguration$Builder: void <init>(android.media.projection.MediaProjection)>
<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration$Builder addMatchingUid(int)>
<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration$Builder addMatchingUsage(int)>
<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration build()>
<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration$Builder excludeUid(int)>
<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration$Builder excludeUsage(int)>
android.media.AudioPlaybackConfiguration
<android.media.AudioPlaybackConfiguration: int describeContents()>
<android.media.AudioPlaybackConfiguration: android.media.AudioAttributes getAudioAttributes()>
<android.media.AudioPlaybackConfiguration: android.media.AudioDeviceInfo getAudioDeviceInfo()>
<android.media.AudioPlaybackConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.media.AudioPlaybackConfiguration: android.os.Parcelable$Creator CREATOR>
android.media.AudioPresentation
<android.media.AudioPresentation: java.util.Map getLabels()>
<android.media.AudioPresentation: java.util.Locale getLocale()>
<android.media.AudioPresentation: int getMasteringIndication()>
<android.media.AudioPresentation: int getPresentationId()>
<android.media.AudioPresentation: int getProgramId()>
<android.media.AudioPresentation: boolean hasAudioDescription()>
<android.media.AudioPresentation: boolean hasDialogueEnhancement()>
<android.media.AudioPresentation: boolean hasSpokenSubtitles()>
<android.media.AudioPresentation: int CONTENT_COMMENTARY>
<android.media.AudioPresentation: int CONTENT_DIALOG>
<android.media.AudioPresentation: int CONTENT_EMERGENCY>
<android.media.AudioPresentation: int CONTENT_HEARING_IMPAIRED>
<android.media.AudioPresentation: int CONTENT_MAIN>
<android.media.AudioPresentation: int CONTENT_MUSIC_AND_EFFECTS>
<android.media.AudioPresentation: int CONTENT_UNKNOWN>
<android.media.AudioPresentation: int CONTENT_VISUALLY_IMPAIRED>
<android.media.AudioPresentation: int CONTENT_VOICEOVER>
<android.media.AudioPresentation: int MASTERED_FOR_3D>
<android.media.AudioPresentation: int MASTERED_FOR_HEADPHONE>
<android.media.AudioPresentation: int MASTERED_FOR_STEREO>
<android.media.AudioPresentation: int MASTERED_FOR_SURROUND>
<android.media.AudioPresentation: int MASTERING_NOT_INDICATED>
android.media.AudioPresentation$Builder
<android.media.AudioPresentation$Builder: void <init>(int)>
<android.media.AudioPresentation$Builder: android.media.AudioPresentation build()>
<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setHasAudioDescription(boolean)>
<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setHasDialogueEnhancement(boolean)>
<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setHasSpokenSubtitles(boolean)>
<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setLabels(java.util.Map)>
<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setLocale(android.icu.util.ULocale)>
<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setMasteringIndication(int)>
<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setProgramId(int)>
android.media.AudioProfile
<android.media.AudioProfile: int describeContents()>
<android.media.AudioProfile: int[] getChannelIndexMasks()>
<android.media.AudioProfile: int[] getChannelMasks()>
<android.media.AudioProfile: int getEncapsulationType()>
<android.media.AudioProfile: int getFormat()>
<android.media.AudioProfile: int[] getSampleRates()>
<android.media.AudioProfile: void writeToParcel(android.os.Parcel,int)>
<android.media.AudioProfile: int AUDIO_ENCAPSULATION_TYPE_IEC61937>
<android.media.AudioProfile: int AUDIO_ENCAPSULATION_TYPE_NONE>
<android.media.AudioProfile: android.os.Parcelable$Creator CREATOR>
android.media.AudioRecord
<android.media.AudioRecord: void <init>(int,int,int,int,int)>
<android.media.AudioRecord: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>
<android.media.AudioRecord: void addOnRoutingChangedListener(android.media.AudioRecord$OnRoutingChangedListener,android.os.Handler)>
<android.media.AudioRecord: void finalize()>
<android.media.AudioRecord: java.util.List getActiveMicrophones()>
<android.media.AudioRecord: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()>
<android.media.AudioRecord: int getAudioFormat()>
<android.media.AudioRecord: int getAudioSessionId()>
<android.media.AudioRecord: int getAudioSource()>
<android.media.AudioRecord: int getBufferSizeInFrames()>
<android.media.AudioRecord: int getChannelConfiguration()>
<android.media.AudioRecord: int getChannelCount()>
<android.media.AudioRecord: android.media.AudioFormat getFormat()>
<android.media.AudioRecord: android.media.metrics.LogSessionId getLogSessionId()>
<android.media.AudioRecord: android.os.PersistableBundle getMetrics()>
<android.media.AudioRecord: int getMinBufferSize(int,int,int)>
<android.media.AudioRecord: int getNotificationMarkerPosition()>
<android.media.AudioRecord: int getPositionNotificationPeriod()>
<android.media.AudioRecord: android.media.AudioDeviceInfo getPreferredDevice()>
<android.media.AudioRecord: int getRecordingState()>
<android.media.AudioRecord: android.media.AudioDeviceInfo getRoutedDevice()>
<android.media.AudioRecord: int getSampleRate()>
<android.media.AudioRecord: int getState()>
<android.media.AudioRecord: int getTimestamp(android.media.AudioTimestamp,int)>
<android.media.AudioRecord: boolean isPrivacySensitive()>
<android.media.AudioRecord: int read(byte[],int,int)>
<android.media.AudioRecord: int read(byte[],int,int,int)>
<android.media.AudioRecord: int read(short[],int,int)>
<android.media.AudioRecord: int read(short[],int,int,int)>
<android.media.AudioRecord: int read(float[],int,int,int)>
<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)>
<android.media.AudioRecord: int read(java.nio.ByteBuffer,int,int)>
<android.media.AudioRecord: void registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager$AudioRecordingCallback)>
<android.media.AudioRecord: void release()>
<android.media.AudioRecord: void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)>
<android.media.AudioRecord: void removeOnRoutingChangedListener(android.media.AudioRecord$OnRoutingChangedListener)>
<android.media.AudioRecord: void setLogSessionId(android.media.metrics.LogSessionId)>
<android.media.AudioRecord: int setNotificationMarkerPosition(int)>
<android.media.AudioRecord: int setPositionNotificationPeriod(int)>
<android.media.AudioRecord: boolean setPreferredDevice(android.media.AudioDeviceInfo)>
<android.media.AudioRecord: boolean setPreferredMicrophoneDirection(int)>
<android.media.AudioRecord: boolean setPreferredMicrophoneFieldDimension(float)>
<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener)>
<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener,android.os.Handler)>
<android.media.AudioRecord: void startRecording()>
<android.media.AudioRecord: void startRecording(android.media.MediaSyncEvent)>
<android.media.AudioRecord: void stop()>
<android.media.AudioRecord: void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)>
<android.media.AudioRecord: int ERROR>
<android.media.AudioRecord: int ERROR_BAD_VALUE>
<android.media.AudioRecord: int ERROR_DEAD_OBJECT>
<android.media.AudioRecord: int ERROR_INVALID_OPERATION>
<android.media.AudioRecord: int READ_BLOCKING>
<android.media.AudioRecord: int READ_NON_BLOCKING>
<android.media.AudioRecord: int RECORDSTATE_RECORDING>
<android.media.AudioRecord: int RECORDSTATE_STOPPED>
<android.media.AudioRecord: int STATE_INITIALIZED>
<android.media.AudioRecord: int STATE_UNINITIALIZED>
<android.media.AudioRecord: int SUCCESS>
android.media.AudioRecord$Builder
<android.media.AudioRecord$Builder: void <init>()>
<android.media.AudioRecord$Builder: android.media.AudioRecord build()>
<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setAudioFormat(android.media.AudioFormat)>
<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setAudioPlaybackCaptureConfig(android.media.AudioPlaybackCaptureConfiguration)>
<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setAudioSource(int)>
<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setBufferSizeInBytes(int)>
<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setContext(android.content.Context)>
<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setPrivacySensitive(boolean)>
android.media.AudioRecord$MetricsConstants
<android.media.AudioRecord$MetricsConstants: java.lang.String CHANNELS>
<android.media.AudioRecord$MetricsConstants: java.lang.String ENCODING>
<android.media.AudioRecord$MetricsConstants: java.lang.String LATENCY>
<android.media.AudioRecord$MetricsConstants: java.lang.String SAMPLERATE>
<android.media.AudioRecord$MetricsConstants: java.lang.String SOURCE>
android.media.AudioRecord$OnRecordPositionUpdateListener
<android.media.AudioRecord$OnRecordPositionUpdateListener: void onMarkerReached(android.media.AudioRecord)>
<android.media.AudioRecord$OnRecordPositionUpdateListener: void onPeriodicNotification(android.media.AudioRecord)>
android.media.AudioRecord$OnRoutingChangedListener
<android.media.AudioRecord$OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRecord)>
<android.media.AudioRecord$OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRouting)>
android.media.AudioRecordingConfiguration
<android.media.AudioRecordingConfiguration: int describeContents()>
<android.media.AudioRecordingConfiguration: android.media.AudioDeviceInfo getAudioDevice()>
<android.media.AudioRecordingConfiguration: int getAudioSource()>
<android.media.AudioRecordingConfiguration: int getClientAudioSessionId()>
<android.media.AudioRecordingConfiguration: int getClientAudioSource()>
<android.media.AudioRecordingConfiguration: java.util.List getClientEffects()>
<android.media.AudioRecordingConfiguration: android.media.AudioFormat getClientFormat()>
<android.media.AudioRecordingConfiguration: java.util.List getEffects()>
<android.media.AudioRecordingConfiguration: android.media.AudioFormat getFormat()>
<android.media.AudioRecordingConfiguration: boolean isClientSilenced()>
<android.media.AudioRecordingConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.media.AudioRecordingConfiguration: android.os.Parcelable$Creator CREATOR>
android.media.AudioRecordingMonitor
<android.media.AudioRecordingMonitor: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()>
<android.media.AudioRecordingMonitor: void registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager$AudioRecordingCallback)>
<android.media.AudioRecordingMonitor: void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)>
android.media.AudioRouting
<android.media.AudioRouting: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>
<android.media.AudioRouting: android.media.AudioDeviceInfo getPreferredDevice()>
<android.media.AudioRouting: android.media.AudioDeviceInfo getRoutedDevice()>
<android.media.AudioRouting: void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)>
<android.media.AudioRouting: boolean setPreferredDevice(android.media.AudioDeviceInfo)>
android.media.AudioRouting$OnRoutingChangedListener
<android.media.AudioRouting$OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRouting)>
android.media.AudioTimestamp
<android.media.AudioTimestamp: void <init>()>
<android.media.AudioTimestamp: int TIMEBASE_BOOTTIME>
<android.media.AudioTimestamp: int TIMEBASE_MONOTONIC>
<android.media.AudioTimestamp: long framePosition>
<android.media.AudioTimestamp: long nanoTime>
android.media.AudioTrack
<android.media.AudioTrack: void <init>(int,int,int,int,int,int)>
<android.media.AudioTrack: void <init>(int,int,int,int,int,int,int)>
<android.media.AudioTrack: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int,int)>
<android.media.AudioTrack: void addOnCodecFormatChangedListener(java.util.concurrent.Executor,android.media.AudioTrack$OnCodecFormatChangedListener)>
<android.media.AudioTrack: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>
<android.media.AudioTrack: void addOnRoutingChangedListener(android.media.AudioTrack$OnRoutingChangedListener,android.os.Handler)>
<android.media.AudioTrack: int attachAuxEffect(int)>
<android.media.AudioTrack: android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper$Configuration)>
<android.media.AudioTrack: void finalize()>
<android.media.AudioTrack: void flush()>
<android.media.AudioTrack: android.media.AudioAttributes getAudioAttributes()>
<android.media.AudioTrack: float getAudioDescriptionMixLeveldB()>
<android.media.AudioTrack: int getAudioFormat()>
<android.media.AudioTrack: int getAudioSessionId()>
<android.media.AudioTrack: int getBufferCapacityInFrames()>
<android.media.AudioTrack: int getBufferSizeInFrames()>
<android.media.AudioTrack: int getChannelConfiguration()>
<android.media.AudioTrack: int getChannelCount()>
<android.media.AudioTrack: int getDualMonoMode()>
<android.media.AudioTrack: android.media.AudioFormat getFormat()>
<android.media.AudioTrack: android.media.metrics.LogSessionId getLogSessionId()>
<android.media.AudioTrack: float getMaxVolume()>
<android.media.AudioTrack: android.os.PersistableBundle getMetrics()>
<android.media.AudioTrack: int getMinBufferSize(int,int,int)>
<android.media.AudioTrack: float getMinVolume()>
<android.media.AudioTrack: int getNativeFrameCount()>
<android.media.AudioTrack: int getNativeOutputSampleRate(int)>
<android.media.AudioTrack: int getNotificationMarkerPosition()>
<android.media.AudioTrack: int getOffloadDelay()>
<android.media.AudioTrack: int getOffloadPadding()>
<android.media.AudioTrack: int getPerformanceMode()>
<android.media.AudioTrack: int getPlayState()>
<android.media.AudioTrack: int getPlaybackHeadPosition()>
<android.media.AudioTrack: android.media.PlaybackParams getPlaybackParams()>
<android.media.AudioTrack: int getPlaybackRate()>
<android.media.AudioTrack: int getPositionNotificationPeriod()>
<android.media.AudioTrack: android.media.AudioDeviceInfo getPreferredDevice()>
<android.media.AudioTrack: android.media.AudioDeviceInfo getRoutedDevice()>
<android.media.AudioTrack: int getSampleRate()>
<android.media.AudioTrack: int getStartThresholdInFrames()>
<android.media.AudioTrack: int getState()>
<android.media.AudioTrack: int getStreamType()>
<android.media.AudioTrack: boolean getTimestamp(android.media.AudioTimestamp)>
<android.media.AudioTrack: int getUnderrunCount()>
<android.media.AudioTrack: boolean isDirectPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)>
<android.media.AudioTrack: boolean isOffloadedPlayback()>
<android.media.AudioTrack: void pause()>
<android.media.AudioTrack: void play()>
<android.media.AudioTrack: void registerStreamEventCallback(java.util.concurrent.Executor,android.media.AudioTrack$StreamEventCallback)>
<android.media.AudioTrack: void release()>
<android.media.AudioTrack: int reloadStaticData()>
<android.media.AudioTrack: void removeOnCodecFormatChangedListener(android.media.AudioTrack$OnCodecFormatChangedListener)>
<android.media.AudioTrack: void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)>
<android.media.AudioTrack: void removeOnRoutingChangedListener(android.media.AudioTrack$OnRoutingChangedListener)>
<android.media.AudioTrack: boolean setAudioDescriptionMixLeveldB(float)>
<android.media.AudioTrack: int setAuxEffectSendLevel(float)>
<android.media.AudioTrack: int setBufferSizeInFrames(int)>
<android.media.AudioTrack: boolean setDualMonoMode(int)>
<android.media.AudioTrack: void setLogSessionId(android.media.metrics.LogSessionId)>
<android.media.AudioTrack: int setLoopPoints(int,int,int)>
<android.media.AudioTrack: int setNotificationMarkerPosition(int)>
<android.media.AudioTrack: void setOffloadDelayPadding(int,int)>
<android.media.AudioTrack: void setOffloadEndOfStream()>
<android.media.AudioTrack: int setPlaybackHeadPosition(int)>
<android.media.AudioTrack: void setPlaybackParams(android.media.PlaybackParams)>
<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener)>
<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener,android.os.Handler)>
<android.media.AudioTrack: int setPlaybackRate(int)>
<android.media.AudioTrack: int setPositionNotificationPeriod(int)>
<android.media.AudioTrack: boolean setPreferredDevice(android.media.AudioDeviceInfo)>
<android.media.AudioTrack: int setPresentation(android.media.AudioPresentation)>
<android.media.AudioTrack: int setStartThresholdInFrames(int)>
<android.media.AudioTrack: void setState(int)>
<android.media.AudioTrack: int setStereoVolume(float,float)>
<android.media.AudioTrack: int setVolume(float)>
<android.media.AudioTrack: void stop()>
<android.media.AudioTrack: void unregisterStreamEventCallback(android.media.AudioTrack$StreamEventCallback)>
<android.media.AudioTrack: int write(byte[],int,int)>
<android.media.AudioTrack: int write(byte[],int,int,int)>
<android.media.AudioTrack: int write(short[],int,int)>
<android.media.AudioTrack: int write(short[],int,int,int)>
<android.media.AudioTrack: int write(float[],int,int,int)>
<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int)>
<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int,long)>
<android.media.AudioTrack: int DUAL_MONO_MODE_LL>
<android.media.AudioTrack: int DUAL_MONO_MODE_LR>
<android.media.AudioTrack: int DUAL_MONO_MODE_OFF>
<android.media.AudioTrack: int DUAL_MONO_MODE_RR>
<android.media.AudioTrack: int ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTOR>
<android.media.AudioTrack: int ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNER>
<android.media.AudioTrack: int ENCAPSULATION_MODE_ELEMENTARY_STREAM>
<android.media.AudioTrack: int ENCAPSULATION_MODE_NONE>
<android.media.AudioTrack: int ERROR>
<android.media.AudioTrack: int ERROR_BAD_VALUE>
<android.media.AudioTrack: int ERROR_DEAD_OBJECT>
<android.media.AudioTrack: int ERROR_INVALID_OPERATION>
<android.media.AudioTrack: int MODE_STATIC>
<android.media.AudioTrack: int MODE_STREAM>
<android.media.AudioTrack: int PERFORMANCE_MODE_LOW_LATENCY>
<android.media.AudioTrack: int PERFORMANCE_MODE_NONE>
<android.media.AudioTrack: int PERFORMANCE_MODE_POWER_SAVING>
<android.media.AudioTrack: int PLAYSTATE_PAUSED>
<android.media.AudioTrack: int PLAYSTATE_PLAYING>
<android.media.AudioTrack: int PLAYSTATE_STOPPED>
<android.media.AudioTrack: int STATE_INITIALIZED>
<android.media.AudioTrack: int STATE_NO_STATIC_DATA>
<android.media.AudioTrack: int STATE_UNINITIALIZED>
<android.media.AudioTrack: int SUCCESS>
<android.media.AudioTrack: int WRITE_BLOCKING>
<android.media.AudioTrack: int WRITE_NON_BLOCKING>
android.media.AudioTrack$Builder
<android.media.AudioTrack$Builder: void <init>()>
<android.media.AudioTrack$Builder: android.media.AudioTrack build()>
<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setAudioAttributes(android.media.AudioAttributes)>
<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setAudioFormat(android.media.AudioFormat)>
<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setBufferSizeInBytes(int)>
<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setEncapsulationMode(int)>
<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setOffloadedPlayback(boolean)>
<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setPerformanceMode(int)>
<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setSessionId(int)>
<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setTransferMode(int)>
android.media.AudioTrack$MetricsConstants
<android.media.AudioTrack$MetricsConstants: java.lang.String CHANNELMASK>
<android.media.AudioTrack$MetricsConstants: java.lang.String CONTENTTYPE>
<android.media.AudioTrack$MetricsConstants: java.lang.String SAMPLERATE>
<android.media.AudioTrack$MetricsConstants: java.lang.String STREAMTYPE>
<android.media.AudioTrack$MetricsConstants: java.lang.String USAGE>
android.media.AudioTrack$OnCodecFormatChangedListener
<android.media.AudioTrack$OnCodecFormatChangedListener: void onCodecFormatChanged(android.media.AudioTrack,android.media.AudioMetadataReadMap)>
android.media.AudioTrack$OnPlaybackPositionUpdateListener
<android.media.AudioTrack$OnPlaybackPositionUpdateListener: void onMarkerReached(android.media.AudioTrack)>
<android.media.AudioTrack$OnPlaybackPositionUpdateListener: void onPeriodicNotification(android.media.AudioTrack)>
android.media.AudioTrack$OnRoutingChangedListener
<android.media.AudioTrack$OnRoutingChangedListener: void onRoutingChanged(android.media.AudioTrack)>
<android.media.AudioTrack$OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRouting)>
android.media.AudioTrack$StreamEventCallback
<android.media.AudioTrack$StreamEventCallback: void <init>()>
<android.media.AudioTrack$StreamEventCallback: void onDataRequest(android.media.AudioTrack,int)>
<android.media.AudioTrack$StreamEventCallback: void onPresentationEnded(android.media.AudioTrack)>
<android.media.AudioTrack$StreamEventCallback: void onTearDown(android.media.AudioTrack)>
android.media.CamcorderProfile
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int)>
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int,int)>
<android.media.CamcorderProfile: android.media.EncoderProfiles getAll(java.lang.String,int)>
<android.media.CamcorderProfile: boolean hasProfile(int)>
<android.media.CamcorderProfile: boolean hasProfile(int,int)>
<android.media.CamcorderProfile: int QUALITY_1080P>
<android.media.CamcorderProfile: int QUALITY_2160P>
<android.media.CamcorderProfile: int QUALITY_2K>
<android.media.CamcorderProfile: int QUALITY_480P>
<android.media.CamcorderProfile: int QUALITY_4KDCI>
<android.media.CamcorderProfile: int QUALITY_720P>
<android.media.CamcorderProfile: int QUALITY_8KUHD>
<android.media.CamcorderProfile: int QUALITY_CIF>
<android.media.CamcorderProfile: int QUALITY_HIGH>
<android.media.CamcorderProfile: int QUALITY_HIGH_SPEED_1080P>
<android.media.CamcorderProfile: int QUALITY_HIGH_SPEED_2160P>
<android.media.CamcorderProfile: int QUALITY_HIGH_SPEED_480P>
<android.media.CamcorderProfile: int QUALITY_HIGH_SPEED_4KDCI>
<android.media.CamcorderProfile: int QUALITY_HIGH_SPEED_720P>
<android.media.CamcorderProfile: int QUALITY_HIGH_SPEED_CIF>
<android.media.CamcorderProfile: int QUALITY_HIGH_SPEED_HIGH>
<android.media.CamcorderProfile: int QUALITY_HIGH_SPEED_LOW>
<android.media.CamcorderProfile: int QUALITY_HIGH_SPEED_VGA>
<android.media.CamcorderProfile: int QUALITY_LOW>
<android.media.CamcorderProfile: int QUALITY_QCIF>
<android.media.CamcorderProfile: int QUALITY_QHD>
<android.media.CamcorderProfile: int QUALITY_QVGA>
<android.media.CamcorderProfile: int QUALITY_TIME_LAPSE_1080P>
<android.media.CamcorderProfile: int QUALITY_TIME_LAPSE_2160P>
<android.media.CamcorderProfile: int QUALITY_TIME_LAPSE_2K>
<android.media.CamcorderProfile: int QUALITY_TIME_LAPSE_480P>
<android.media.CamcorderProfile: int QUALITY_TIME_LAPSE_4KDCI>
<android.media.CamcorderProfile: int QUALITY_TIME_LAPSE_720P>
<android.media.CamcorderProfile: int QUALITY_TIME_LAPSE_8KUHD>
<android.media.CamcorderProfile: int QUALITY_TIME_LAPSE_CIF>
<android.media.CamcorderProfile: int QUALITY_TIME_LAPSE_HIGH>
<android.media.CamcorderProfile: int QUALITY_TIME_LAPSE_LOW>
<android.media.CamcorderProfile: int QUALITY_TIME_LAPSE_QCIF>
<android.media.CamcorderProfile: int QUALITY_TIME_LAPSE_QHD>
<android.media.CamcorderProfile: int QUALITY_TIME_LAPSE_QVGA>
<android.media.CamcorderProfile: int QUALITY_TIME_LAPSE_VGA>
<android.media.CamcorderProfile: int QUALITY_VGA>
<android.media.CamcorderProfile: int audioBitRate>
<android.media.CamcorderProfile: int audioChannels>
<android.media.CamcorderProfile: int audioCodec>
<android.media.CamcorderProfile: int audioSampleRate>
<android.media.CamcorderProfile: int duration>
<android.media.CamcorderProfile: int fileFormat>
<android.media.CamcorderProfile: int quality>
<android.media.CamcorderProfile: int videoBitRate>
<android.media.CamcorderProfile: int videoCodec>
<android.media.CamcorderProfile: int videoFrameHeight>
<android.media.CamcorderProfile: int videoFrameRate>
<android.media.CamcorderProfile: int videoFrameWidth>
android.media.CameraProfile
<android.media.CameraProfile: void <init>()>
<android.media.CameraProfile: int getJpegEncodingQualityParameter(int)>
<android.media.CameraProfile: int getJpegEncodingQualityParameter(int,int)>
<android.media.CameraProfile: int QUALITY_HIGH>
<android.media.CameraProfile: int QUALITY_LOW>
<android.media.CameraProfile: int QUALITY_MEDIUM>
android.media.DeniedByServerException
<android.media.DeniedByServerException: void <init>(java.lang.String)>
android.media.DrmInitData
<android.media.DrmInitData: android.media.DrmInitData$SchemeInitData get(java.util.UUID)>
<android.media.DrmInitData: android.media.DrmInitData$SchemeInitData getSchemeInitDataAt(int)>
<android.media.DrmInitData: int getSchemeInitDataCount()>
android.media.DrmInitData$SchemeInitData
<android.media.DrmInitData$SchemeInitData: void <init>(java.util.UUID,java.lang.String,byte[])>
<android.media.DrmInitData$SchemeInitData: java.util.UUID UUID_NIL>
<android.media.DrmInitData$SchemeInitData: byte[] data>
<android.media.DrmInitData$SchemeInitData: java.lang.String mimeType>
<android.media.DrmInitData$SchemeInitData: java.util.UUID uuid>
android.media.EncoderProfiles
<android.media.EncoderProfiles: java.util.List getAudioProfiles()>
<android.media.EncoderProfiles: int getDefaultDurationSeconds()>
<android.media.EncoderProfiles: int getRecommendedFileFormat()>
<android.media.EncoderProfiles: java.util.List getVideoProfiles()>
android.media.EncoderProfiles$AudioProfile
<android.media.EncoderProfiles$AudioProfile: int getBitrate()>
<android.media.EncoderProfiles$AudioProfile: int getChannels()>
<android.media.EncoderProfiles$AudioProfile: int getCodec()>
<android.media.EncoderProfiles$AudioProfile: java.lang.String getMediaType()>
<android.media.EncoderProfiles$AudioProfile: int getProfile()>
<android.media.EncoderProfiles$AudioProfile: int getSampleRate()>
android.media.EncoderProfiles$VideoProfile
<android.media.EncoderProfiles$VideoProfile: int getBitDepth()>
<android.media.EncoderProfiles$VideoProfile: int getBitrate()>
<android.media.EncoderProfiles$VideoProfile: int getChromaSubsampling()>
<android.media.EncoderProfiles$VideoProfile: int getCodec()>
<android.media.EncoderProfiles$VideoProfile: int getFrameRate()>
<android.media.EncoderProfiles$VideoProfile: int getHdrFormat()>
<android.media.EncoderProfiles$VideoProfile: int getHeight()>
<android.media.EncoderProfiles$VideoProfile: java.lang.String getMediaType()>
<android.media.EncoderProfiles$VideoProfile: int getProfile()>
<android.media.EncoderProfiles$VideoProfile: int getWidth()>
<android.media.EncoderProfiles$VideoProfile: int HDR_DOLBY_VISION>
<android.media.EncoderProfiles$VideoProfile: int HDR_HDR10>
<android.media.EncoderProfiles$VideoProfile: int HDR_HDR10PLUS>
<android.media.EncoderProfiles$VideoProfile: int HDR_HLG>
<android.media.EncoderProfiles$VideoProfile: int HDR_NONE>
<android.media.EncoderProfiles$VideoProfile: int YUV_420>
<android.media.EncoderProfiles$VideoProfile: int YUV_422>
<android.media.EncoderProfiles$VideoProfile: int YUV_444>
android.media.ExifInterface
<android.media.ExifInterface: void <init>(java.io.File)>
<android.media.ExifInterface: void <init>(java.lang.String)>
<android.media.ExifInterface: void <init>(java.io.FileDescriptor)>
<android.media.ExifInterface: void <init>(java.io.InputStream)>
<android.media.ExifInterface: void <init>(java.io.InputStream,int)>
<android.media.ExifInterface: double getAltitude(double)>
<android.media.ExifInterface: java.lang.String getAttribute(java.lang.String)>
<android.media.ExifInterface: byte[] getAttributeBytes(java.lang.String)>
<android.media.ExifInterface: double getAttributeDouble(java.lang.String,double)>
<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)>
<android.media.ExifInterface: long[] getAttributeRange(java.lang.String)>
<android.media.ExifInterface: long getDateTime()>
<android.media.ExifInterface: long getDateTimeDigitized()>
<android.media.ExifInterface: long getDateTimeOriginal()>
<android.media.ExifInterface: long getGpsDateTime()>
<android.media.ExifInterface: boolean getLatLong(float[])>
<android.media.ExifInterface: byte[] getThumbnail()>
<android.media.ExifInterface: android.graphics.Bitmap getThumbnailBitmap()>
<android.media.ExifInterface: byte[] getThumbnailBytes()>
<android.media.ExifInterface: long[] getThumbnailRange()>
<android.media.ExifInterface: boolean hasAttribute(java.lang.String)>
<android.media.ExifInterface: boolean hasThumbnail()>
<android.media.ExifInterface: boolean isSupportedMimeType(java.lang.String)>
<android.media.ExifInterface: boolean isThumbnailCompressed()>
<android.media.ExifInterface: void saveAttributes()>
<android.media.ExifInterface: void setAttribute(java.lang.String,java.lang.String)>
<android.media.ExifInterface: int ORIENTATION_FLIP_HORIZONTAL>
<android.media.ExifInterface: int ORIENTATION_FLIP_VERTICAL>
<android.media.ExifInterface: int ORIENTATION_NORMAL>
<android.media.ExifInterface: int ORIENTATION_ROTATE_180>
<android.media.ExifInterface: int ORIENTATION_ROTATE_270>
<android.media.ExifInterface: int ORIENTATION_ROTATE_90>
<android.media.ExifInterface: int ORIENTATION_TRANSPOSE>
<android.media.ExifInterface: int ORIENTATION_TRANSVERSE>
<android.media.ExifInterface: int ORIENTATION_UNDEFINED>
<android.media.ExifInterface: int STREAM_TYPE_EXIF_DATA_ONLY>
<android.media.ExifInterface: int STREAM_TYPE_FULL_IMAGE_DATA>
<android.media.ExifInterface: java.lang.String TAG_APERTURE>
<android.media.ExifInterface: java.lang.String TAG_APERTURE_VALUE>
<android.media.ExifInterface: java.lang.String TAG_ARTIST>
<android.media.ExifInterface: java.lang.String TAG_BITS_PER_SAMPLE>
<android.media.ExifInterface: java.lang.String TAG_BRIGHTNESS_VALUE>
<android.media.ExifInterface: java.lang.String TAG_CFA_PATTERN>
<android.media.ExifInterface: java.lang.String TAG_COLOR_SPACE>
<android.media.ExifInterface: java.lang.String TAG_COMPONENTS_CONFIGURATION>
<android.media.ExifInterface: java.lang.String TAG_COMPRESSED_BITS_PER_PIXEL>
<android.media.ExifInterface: java.lang.String TAG_COMPRESSION>
<android.media.ExifInterface: java.lang.String TAG_CONTRAST>
<android.media.ExifInterface: java.lang.String TAG_COPYRIGHT>
<android.media.ExifInterface: java.lang.String TAG_CUSTOM_RENDERED>
<android.media.ExifInterface: java.lang.String TAG_DATETIME>
<android.media.ExifInterface: java.lang.String TAG_DATETIME_DIGITIZED>
<android.media.ExifInterface: java.lang.String TAG_DATETIME_ORIGINAL>
<android.media.ExifInterface: java.lang.String TAG_DEFAULT_CROP_SIZE>
<android.media.ExifInterface: java.lang.String TAG_DEVICE_SETTING_DESCRIPTION>
<android.media.ExifInterface: java.lang.String TAG_DIGITAL_ZOOM_RATIO>
<android.media.ExifInterface: java.lang.String TAG_DNG_VERSION>
<android.media.ExifInterface: java.lang.String TAG_EXIF_VERSION>
<android.media.ExifInterface: java.lang.String TAG_EXPOSURE_BIAS_VALUE>
<android.media.ExifInterface: java.lang.String TAG_EXPOSURE_INDEX>
<android.media.ExifInterface: java.lang.String TAG_EXPOSURE_MODE>
<android.media.ExifInterface: java.lang.String TAG_EXPOSURE_PROGRAM>
<android.media.ExifInterface: java.lang.String TAG_EXPOSURE_TIME>
<android.media.ExifInterface: java.lang.String TAG_FILE_SOURCE>
<android.media.ExifInterface: java.lang.String TAG_FLASH>
<android.media.ExifInterface: java.lang.String TAG_FLASHPIX_VERSION>
<android.media.ExifInterface: java.lang.String TAG_FLASH_ENERGY>
<android.media.ExifInterface: java.lang.String TAG_FOCAL_LENGTH>
<android.media.ExifInterface: java.lang.String TAG_FOCAL_LENGTH_IN_35MM_FILM>
<android.media.ExifInterface: java.lang.String TAG_FOCAL_PLANE_RESOLUTION_UNIT>
<android.media.ExifInterface: java.lang.String TAG_FOCAL_PLANE_X_RESOLUTION>
<android.media.ExifInterface: java.lang.String TAG_FOCAL_PLANE_Y_RESOLUTION>
<android.media.ExifInterface: java.lang.String TAG_F_NUMBER>
<android.media.ExifInterface: java.lang.String TAG_GAIN_CONTROL>
<android.media.ExifInterface: java.lang.String TAG_GPS_ALTITUDE>
<android.media.ExifInterface: java.lang.String TAG_GPS_ALTITUDE_REF>
<android.media.ExifInterface: java.lang.String TAG_GPS_AREA_INFORMATION>
<android.media.ExifInterface: java.lang.String TAG_GPS_DATESTAMP>
<android.media.ExifInterface: java.lang.String TAG_GPS_DEST_BEARING>
<android.media.ExifInterface: java.lang.String TAG_GPS_DEST_BEARING_REF>
<android.media.ExifInterface: java.lang.String TAG_GPS_DEST_DISTANCE>
<android.media.ExifInterface: java.lang.String TAG_GPS_DEST_DISTANCE_REF>
<android.media.ExifInterface: java.lang.String TAG_GPS_DEST_LATITUDE>
<android.media.ExifInterface: java.lang.String TAG_GPS_DEST_LATITUDE_REF>
<android.media.ExifInterface: java.lang.String TAG_GPS_DEST_LONGITUDE>
<android.media.ExifInterface: java.lang.String TAG_GPS_DEST_LONGITUDE_REF>
<android.media.ExifInterface: java.lang.String TAG_GPS_DIFFERENTIAL>
<android.media.ExifInterface: java.lang.String TAG_GPS_DOP>
<android.media.ExifInterface: java.lang.String TAG_GPS_IMG_DIRECTION>
<android.media.ExifInterface: java.lang.String TAG_GPS_IMG_DIRECTION_REF>
<android.media.ExifInterface: java.lang.String TAG_GPS_LATITUDE>
<android.media.ExifInterface: java.lang.String TAG_GPS_LATITUDE_REF>
<android.media.ExifInterface: java.lang.String TAG_GPS_LONGITUDE>
<android.media.ExifInterface: java.lang.String TAG_GPS_LONGITUDE_REF>
<android.media.ExifInterface: java.lang.String TAG_GPS_MAP_DATUM>
<android.media.ExifInterface: java.lang.String TAG_GPS_MEASURE_MODE>
<android.media.ExifInterface: java.lang.String TAG_GPS_PROCESSING_METHOD>
<android.media.ExifInterface: java.lang.String TAG_GPS_SATELLITES>
<android.media.ExifInterface: java.lang.String TAG_GPS_SPEED>
<android.media.ExifInterface: java.lang.String TAG_GPS_SPEED_REF>
<android.media.ExifInterface: java.lang.String TAG_GPS_STATUS>
<android.media.ExifInterface: java.lang.String TAG_GPS_TIMESTAMP>
<android.media.ExifInterface: java.lang.String TAG_GPS_TRACK>
<android.media.ExifInterface: java.lang.String TAG_GPS_TRACK_REF>
<android.media.ExifInterface: java.lang.String TAG_GPS_VERSION_ID>
<android.media.ExifInterface: java.lang.String TAG_IMAGE_DESCRIPTION>
<android.media.ExifInterface: java.lang.String TAG_IMAGE_LENGTH>
<android.media.ExifInterface: java.lang.String TAG_IMAGE_UNIQUE_ID>
<android.media.ExifInterface: java.lang.String TAG_IMAGE_WIDTH>
<android.media.ExifInterface: java.lang.String TAG_INTEROPERABILITY_INDEX>
<android.media.ExifInterface: java.lang.String TAG_ISO>
<android.media.ExifInterface: java.lang.String TAG_ISO_SPEED_RATINGS>
<android.media.ExifInterface: java.lang.String TAG_JPEG_INTERCHANGE_FORMAT>
<android.media.ExifInterface: java.lang.String TAG_JPEG_INTERCHANGE_FORMAT_LENGTH>
<android.media.ExifInterface: java.lang.String TAG_LIGHT_SOURCE>
<android.media.ExifInterface: java.lang.String TAG_MAKE>
<android.media.ExifInterface: java.lang.String TAG_MAKER_NOTE>
<android.media.ExifInterface: java.lang.String TAG_MAX_APERTURE_VALUE>
<android.media.ExifInterface: java.lang.String TAG_METERING_MODE>
<android.media.ExifInterface: java.lang.String TAG_MODEL>
<android.media.ExifInterface: java.lang.String TAG_NEW_SUBFILE_TYPE>
<android.media.ExifInterface: java.lang.String TAG_OECF>
<android.media.ExifInterface: java.lang.String TAG_OFFSET_TIME>
<android.media.ExifInterface: java.lang.String TAG_OFFSET_TIME_DIGITIZED>
<android.media.ExifInterface: java.lang.String TAG_OFFSET_TIME_ORIGINAL>
<android.media.ExifInterface: java.lang.String TAG_ORF_ASPECT_FRAME>
<android.media.ExifInterface: java.lang.String TAG_ORF_PREVIEW_IMAGE_LENGTH>
<android.media.ExifInterface: java.lang.String TAG_ORF_PREVIEW_IMAGE_START>
<android.media.ExifInterface: java.lang.String TAG_ORF_THUMBNAIL_IMAGE>
<android.media.ExifInterface: java.lang.String TAG_ORIENTATION>
<android.media.ExifInterface: java.lang.String TAG_PHOTOMETRIC_INTERPRETATION>
<android.media.ExifInterface: java.lang.String TAG_PIXEL_X_DIMENSION>
<android.media.ExifInterface: java.lang.String TAG_PIXEL_Y_DIMENSION>
<android.media.ExifInterface: java.lang.String TAG_PLANAR_CONFIGURATION>
<android.media.ExifInterface: java.lang.String TAG_PRIMARY_CHROMATICITIES>
<android.media.ExifInterface: java.lang.String TAG_REFERENCE_BLACK_WHITE>
<android.media.ExifInterface: java.lang.String TAG_RELATED_SOUND_FILE>
<android.media.ExifInterface: java.lang.String TAG_RESOLUTION_UNIT>
<android.media.ExifInterface: java.lang.String TAG_ROWS_PER_STRIP>
<android.media.ExifInterface: java.lang.String TAG_RW2_ISO>
<android.media.ExifInterface: java.lang.String TAG_RW2_JPG_FROM_RAW>
<android.media.ExifInterface: java.lang.String TAG_RW2_SENSOR_BOTTOM_BORDER>
<android.media.ExifInterface: java.lang.String TAG_RW2_SENSOR_LEFT_BORDER>
<android.media.ExifInterface: java.lang.String TAG_RW2_SENSOR_RIGHT_BORDER>
<android.media.ExifInterface: java.lang.String TAG_RW2_SENSOR_TOP_BORDER>
<android.media.ExifInterface: java.lang.String TAG_SAMPLES_PER_PIXEL>
<android.media.ExifInterface: java.lang.String TAG_SATURATION>
<android.media.ExifInterface: java.lang.String TAG_SCENE_CAPTURE_TYPE>
<android.media.ExifInterface: java.lang.String TAG_SCENE_TYPE>
<android.media.ExifInterface: java.lang.String TAG_SENSING_METHOD>
<android.media.ExifInterface: java.lang.String TAG_SHARPNESS>
<android.media.ExifInterface: java.lang.String TAG_SHUTTER_SPEED_VALUE>
<android.media.ExifInterface: java.lang.String TAG_SOFTWARE>
<android.media.ExifInterface: java.lang.String TAG_SPATIAL_FREQUENCY_RESPONSE>
<android.media.ExifInterface: java.lang.String TAG_SPECTRAL_SENSITIVITY>
<android.media.ExifInterface: java.lang.String TAG_STRIP_BYTE_COUNTS>
<android.media.ExifInterface: java.lang.String TAG_STRIP_OFFSETS>
<android.media.ExifInterface: java.lang.String TAG_SUBFILE_TYPE>
<android.media.ExifInterface: java.lang.String TAG_SUBJECT_AREA>
<android.media.ExifInterface: java.lang.String TAG_SUBJECT_DISTANCE>
<android.media.ExifInterface: java.lang.String TAG_SUBJECT_DISTANCE_RANGE>
<android.media.ExifInterface: java.lang.String TAG_SUBJECT_LOCATION>
<android.media.ExifInterface: java.lang.String TAG_SUBSEC_TIME>
<android.media.ExifInterface: java.lang.String TAG_SUBSEC_TIME_DIG>
<android.media.ExifInterface: java.lang.String TAG_SUBSEC_TIME_DIGITIZED>
<android.media.ExifInterface: java.lang.String TAG_SUBSEC_TIME_ORIG>
<android.media.ExifInterface: java.lang.String TAG_SUBSEC_TIME_ORIGINAL>
<android.media.ExifInterface: java.lang.String TAG_THUMBNAIL_IMAGE_LENGTH>
<android.media.ExifInterface: java.lang.String TAG_THUMBNAIL_IMAGE_WIDTH>
<android.media.ExifInterface: java.lang.String TAG_THUMBNAIL_ORIENTATION>
<android.media.ExifInterface: java.lang.String TAG_TRANSFER_FUNCTION>
<android.media.ExifInterface: java.lang.String TAG_USER_COMMENT>
<android.media.ExifInterface: java.lang.String TAG_WHITE_BALANCE>
<android.media.ExifInterface: java.lang.String TAG_WHITE_POINT>
<android.media.ExifInterface: java.lang.String TAG_XMP>
<android.media.ExifInterface: java.lang.String TAG_X_RESOLUTION>
<android.media.ExifInterface: java.lang.String TAG_Y_CB_CR_COEFFICIENTS>
<android.media.ExifInterface: java.lang.String TAG_Y_CB_CR_POSITIONING>
<android.media.ExifInterface: java.lang.String TAG_Y_CB_CR_SUB_SAMPLING>
<android.media.ExifInterface: java.lang.String TAG_Y_RESOLUTION>
<android.media.ExifInterface: int WHITEBALANCE_AUTO>
<android.media.ExifInterface: int WHITEBALANCE_MANUAL>
android.media.FaceDetector
<android.media.FaceDetector: void <init>(int,int,int)>
<android.media.FaceDetector: int findFaces(android.graphics.Bitmap,android.media.FaceDetector$Face[])>
android.media.FaceDetector$Face
<android.media.FaceDetector$Face: float confidence()>
<android.media.FaceDetector$Face: float eyesDistance()>
<android.media.FaceDetector$Face: void getMidPoint(android.graphics.PointF)>
<android.media.FaceDetector$Face: float pose(int)>
<android.media.FaceDetector$Face: float CONFIDENCE_THRESHOLD>
<android.media.FaceDetector$Face: int EULER_X>
<android.media.FaceDetector$Face: int EULER_Y>
<android.media.FaceDetector$Face: int EULER_Z>
android.media.Image
<android.media.Image: void close()>
<android.media.Image: android.graphics.Rect getCropRect()>
<android.media.Image: int getDataSpace()>
<android.media.Image: android.hardware.SyncFence getFence()>
<android.media.Image: int getFormat()>
<android.media.Image: android.hardware.HardwareBuffer getHardwareBuffer()>
<android.media.Image: int getHeight()>
<android.media.Image: android.media.Image$Plane[] getPlanes()>
<android.media.Image: long getTimestamp()>
<android.media.Image: int getWidth()>
<android.media.Image: void setCropRect(android.graphics.Rect)>
<android.media.Image: void setDataSpace(int)>
<android.media.Image: void setFence(android.hardware.SyncFence)>
<android.media.Image: void setTimestamp(long)>
android.media.Image$Plane
<android.media.Image$Plane: java.nio.ByteBuffer getBuffer()>
<android.media.Image$Plane: int getPixelStride()>
<android.media.Image$Plane: int getRowStride()>
android.media.ImageReader
<android.media.ImageReader: android.media.Image acquireLatestImage()>
<android.media.ImageReader: android.media.Image acquireNextImage()>
<android.media.ImageReader: void close()>
<android.media.ImageReader: void discardFreeBuffers()>
<android.media.ImageReader: int getDataSpace()>
<android.media.ImageReader: int getHardwareBufferFormat()>
<android.media.ImageReader: int getHeight()>
<android.media.ImageReader: int getImageFormat()>
<android.media.ImageReader: int getMaxImages()>
<android.media.ImageReader: android.view.Surface getSurface()>
<android.media.ImageReader: long getUsage()>
<android.media.ImageReader: int getWidth()>
<android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>
<android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int,long)>
<android.media.ImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,android.os.Handler)>
android.media.ImageReader$Builder
<android.media.ImageReader$Builder: void <init>(int,int)>
<android.media.ImageReader$Builder: android.media.ImageReader build()>
<android.media.ImageReader$Builder: android.media.ImageReader$Builder setDefaultDataSpace(int)>
<android.media.ImageReader$Builder: android.media.ImageReader$Builder setDefaultHardwareBufferFormat(int)>
<android.media.ImageReader$Builder: android.media.ImageReader$Builder setImageFormat(int)>
<android.media.ImageReader$Builder: android.media.ImageReader$Builder setMaxImages(int)>
<android.media.ImageReader$Builder: android.media.ImageReader$Builder setUsage(long)>
android.media.ImageReader$OnImageAvailableListener
<android.media.ImageReader$OnImageAvailableListener: void onImageAvailable(android.media.ImageReader)>
android.media.ImageWriter
<android.media.ImageWriter: void close()>
<android.media.ImageWriter: android.media.Image dequeueInputImage()>
<android.media.ImageWriter: int getDataSpace()>
<android.media.ImageWriter: int getFormat()>
<android.media.ImageWriter: int getHardwareBufferFormat()>
<android.media.ImageWriter: int getHeight()>
<android.media.ImageWriter: int getMaxImages()>
<android.media.ImageWriter: long getUsage()>
<android.media.ImageWriter: int getWidth()>
<android.media.ImageWriter: android.media.ImageWriter newInstance(android.view.Surface,int)>
<android.media.ImageWriter: android.media.ImageWriter newInstance(android.view.Surface,int,int)>
<android.media.ImageWriter: void queueInputImage(android.media.Image)>
<android.media.ImageWriter: void setOnImageReleasedListener(android.media.ImageWriter$OnImageReleasedListener,android.os.Handler)>
android.media.ImageWriter$Builder
<android.media.ImageWriter$Builder: void <init>(android.view.Surface)>
<android.media.ImageWriter$Builder: android.media.ImageWriter build()>
<android.media.ImageWriter$Builder: android.media.ImageWriter$Builder setDataSpace(int)>
<android.media.ImageWriter$Builder: android.media.ImageWriter$Builder setHardwareBufferFormat(int)>
<android.media.ImageWriter$Builder: android.media.ImageWriter$Builder setImageFormat(int)>
<android.media.ImageWriter$Builder: android.media.ImageWriter$Builder setMaxImages(int)>
<android.media.ImageWriter$Builder: android.media.ImageWriter$Builder setUsage(long)>
<android.media.ImageWriter$Builder: android.media.ImageWriter$Builder setWidthAndHeight(int,int)>
android.media.ImageWriter$OnImageReleasedListener
<android.media.ImageWriter$OnImageReleasedListener: void onImageReleased(android.media.ImageWriter)>
android.media.JetPlayer
<android.media.JetPlayer: boolean clearQueue()>
<android.media.JetPlayer: java.lang.Object clone()>
<android.media.JetPlayer: boolean closeJetFile()>
<android.media.JetPlayer: void finalize()>
<android.media.JetPlayer: android.media.JetPlayer getJetPlayer()>
<android.media.JetPlayer: int getMaxTracks()>
<android.media.JetPlayer: boolean loadJetFile(java.lang.String)>
<android.media.JetPlayer: boolean loadJetFile(android.content.res.AssetFileDescriptor)>
<android.media.JetPlayer: boolean pause()>
<android.media.JetPlayer: boolean play()>
<android.media.JetPlayer: boolean queueJetSegment(int,int,int,int,int,byte)>
<android.media.JetPlayer: boolean queueJetSegmentMuteArray(int,int,int,int,boolean[],byte)>
<android.media.JetPlayer: void release()>
<android.media.JetPlayer: void setEventListener(android.media.JetPlayer$OnJetEventListener)>
<android.media.JetPlayer: void setEventListener(android.media.JetPlayer$OnJetEventListener,android.os.Handler)>
<android.media.JetPlayer: boolean setMuteArray(boolean[],boolean)>
<android.media.JetPlayer: boolean setMuteFlag(int,boolean,boolean)>
<android.media.JetPlayer: boolean setMuteFlags(int,boolean)>
<android.media.JetPlayer: boolean triggerClip(int)>
android.media.JetPlayer$OnJetEventListener
<android.media.JetPlayer$OnJetEventListener: void onJetEvent(android.media.JetPlayer,short,byte,byte,byte,byte)>
<android.media.JetPlayer$OnJetEventListener: void onJetNumQueuedSegmentUpdate(android.media.JetPlayer,int)>
<android.media.JetPlayer$OnJetEventListener: void onJetPauseUpdate(android.media.JetPlayer,int)>
<android.media.JetPlayer$OnJetEventListener: void onJetUserIdUpdate(android.media.JetPlayer,int,int)>
android.media.MediaActionSound
<android.media.MediaActionSound: void <init>()>
<android.media.MediaActionSound: void load(int)>
<android.media.MediaActionSound: boolean mustPlayShutterSound()>
<android.media.MediaActionSound: void play(int)>
<android.media.MediaActionSound: void release()>
<android.media.MediaActionSound: int FOCUS_COMPLETE>
<android.media.MediaActionSound: int SHUTTER_CLICK>
<android.media.MediaActionSound: int START_VIDEO_RECORDING>
<android.media.MediaActionSound: int STOP_VIDEO_RECORDING>
android.media.MediaCas
<android.media.MediaCas: void <init>(int)>
<android.media.MediaCas: void <init>(android.content.Context,int,java.lang.String,int)>
<android.media.MediaCas: void <init>(android.content.Context,int,java.lang.String,int,android.os.Handler,android.media.MediaCas$EventListener)>
<android.media.MediaCas: void close()>
<android.media.MediaCas: android.media.MediaCas$PluginDescriptor[] enumeratePlugins()>
<android.media.MediaCas: void finalize()>
<android.media.MediaCas: boolean isSystemIdSupported(int)>
<android.media.MediaCas: android.media.MediaCas$Session openSession()>
<android.media.MediaCas: android.media.MediaCas$Session openSession(int,int)>
<android.media.MediaCas: void processEmm(byte[],int,int)>
<android.media.MediaCas: void processEmm(byte[])>
<android.media.MediaCas: void provision(java.lang.String)>
<android.media.MediaCas: void refreshEntitlements(int,byte[])>
<android.media.MediaCas: void sendEvent(int,int,byte[])>
<android.media.MediaCas: void setEventListener(android.media.MediaCas$EventListener,android.os.Handler)>
<android.media.MediaCas: void setPrivateData(byte[])>
<android.media.MediaCas: int PLUGIN_STATUS_PHYSICAL_MODULE_CHANGED>
<android.media.MediaCas: int PLUGIN_STATUS_SESSION_NUMBER_CHANGED>
<android.media.MediaCas: int SCRAMBLING_MODE_AES128>
<android.media.MediaCas: int SCRAMBLING_MODE_AES_ECB>
<android.media.MediaCas: int SCRAMBLING_MODE_AES_SCTE52>
<android.media.MediaCas: int SCRAMBLING_MODE_DVB_CISSA_V1>
<android.media.MediaCas: int SCRAMBLING_MODE_DVB_CSA1>
<android.media.MediaCas: int SCRAMBLING_MODE_DVB_CSA2>
<android.media.MediaCas: int SCRAMBLING_MODE_DVB_CSA3_ENHANCE>
<android.media.MediaCas: int SCRAMBLING_MODE_DVB_CSA3_MINIMAL>
<android.media.MediaCas: int SCRAMBLING_MODE_DVB_CSA3_STANDARD>
<android.media.MediaCas: int SCRAMBLING_MODE_DVB_IDSA>
<android.media.MediaCas: int SCRAMBLING_MODE_MULTI2>
<android.media.MediaCas: int SCRAMBLING_MODE_RESERVED>
<android.media.MediaCas: int SCRAMBLING_MODE_TDES_ECB>
<android.media.MediaCas: int SCRAMBLING_MODE_TDES_SCTE52>
<android.media.MediaCas: int SESSION_USAGE_LIVE>
<android.media.MediaCas: int SESSION_USAGE_PLAYBACK>
<android.media.MediaCas: int SESSION_USAGE_RECORD>
<android.media.MediaCas: int SESSION_USAGE_TIMESHIFT>
android.media.MediaCas$EventListener
<android.media.MediaCas$EventListener: void onEvent(android.media.MediaCas,int,int,byte[])>
<android.media.MediaCas$EventListener: void onPluginStatusUpdate(android.media.MediaCas,int,int)>
<android.media.MediaCas$EventListener: void onResourceLost(android.media.MediaCas)>
<android.media.MediaCas$EventListener: void onSessionEvent(android.media.MediaCas,android.media.MediaCas$Session,int,int,byte[])>
android.media.MediaCas$PluginDescriptor
<android.media.MediaCas$PluginDescriptor: java.lang.String getName()>
<android.media.MediaCas$PluginDescriptor: int getSystemId()>
android.media.MediaCas$Session
<android.media.MediaCas$Session: void close()>
<android.media.MediaCas$Session: byte[] getSessionId()>
<android.media.MediaCas$Session: void processEcm(byte[],int,int)>
<android.media.MediaCas$Session: void processEcm(byte[])>
<android.media.MediaCas$Session: void sendSessionEvent(int,int,byte[])>
<android.media.MediaCas$Session: void setPrivateData(byte[])>
android.media.MediaCasException
android.media.MediaCasException$DeniedByServerException
android.media.MediaCasException$InsufficientResourceException
android.media.MediaCasException$NotProvisionedException
android.media.MediaCasException$ResourceBusyException
android.media.MediaCasException$UnsupportedCasException
android.media.MediaCasStateException
<android.media.MediaCasStateException: java.lang.String getDiagnosticInfo()>
android.media.MediaCodec
<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)>
<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,int,android.media.MediaDescrambler)>
<android.media.MediaCodec: android.media.MediaCodec createByCodecName(java.lang.String)>
<android.media.MediaCodec: android.media.MediaCodec createDecoderByType(java.lang.String)>
<android.media.MediaCodec: android.media.MediaCodec createEncoderByType(java.lang.String)>
<android.media.MediaCodec: android.view.Surface createInputSurface()>
<android.media.MediaCodec: android.view.Surface createPersistentInputSurface()>
<android.media.MediaCodec: int dequeueInputBuffer(long)>
<android.media.MediaCodec: int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long)>
<android.media.MediaCodec: void finalize()>
<android.media.MediaCodec: void flush()>
<android.media.MediaCodec: java.lang.String getCanonicalName()>
<android.media.MediaCodec: android.media.MediaCodecInfo getCodecInfo()>
<android.media.MediaCodec: java.nio.ByteBuffer getInputBuffer(int)>
<android.media.MediaCodec: java.nio.ByteBuffer[] getInputBuffers()>
<android.media.MediaCodec: android.media.MediaFormat getInputFormat()>
<android.media.MediaCodec: android.media.Image getInputImage(int)>
<android.media.MediaCodec: android.os.PersistableBundle getMetrics()>
<android.media.MediaCodec: java.lang.String getName()>
<android.media.MediaCodec: java.nio.ByteBuffer getOutputBuffer(int)>
<android.media.MediaCodec: java.nio.ByteBuffer[] getOutputBuffers()>
<android.media.MediaCodec: android.media.MediaFormat getOutputFormat()>
<android.media.MediaCodec: android.media.MediaFormat getOutputFormat(int)>
<android.media.MediaCodec: android.media.MediaCodec$OutputFrame getOutputFrame(int)>
<android.media.MediaCodec: android.media.Image getOutputImage(int)>
<android.media.MediaCodec: android.media.MediaCodec$ParameterDescriptor getParameterDescriptor(java.lang.String)>
<android.media.MediaCodec: android.media.MediaCodec$QueueRequest getQueueRequest(int)>
<android.media.MediaCodec: java.util.List getSupportedVendorParameters()>
<android.media.MediaCodec: android.media.Image mapHardwareBuffer(android.hardware.HardwareBuffer)>
<android.media.MediaCodec: void queueInputBuffer(int,int,int,long,int)>
<android.media.MediaCodec: void queueSecureInputBuffer(int,int,android.media.MediaCodec$CryptoInfo,long,int)>
<android.media.MediaCodec: void release()>
<android.media.MediaCodec: void releaseOutputBuffer(int,boolean)>
<android.media.MediaCodec: void releaseOutputBuffer(int,long)>
<android.media.MediaCodec: void reset()>
<android.media.MediaCodec: void setAudioPresentation(android.media.AudioPresentation)>
<android.media.MediaCodec: void setCallback(android.media.MediaCodec$Callback,android.os.Handler)>
<android.media.MediaCodec: void setCallback(android.media.MediaCodec$Callback)>
<android.media.MediaCodec: void setInputSurface(android.view.Surface)>
<android.media.MediaCodec: void setOnFirstTunnelFrameReadyListener(android.os.Handler,android.media.MediaCodec$OnFirstTunnelFrameReadyListener)>
<android.media.MediaCodec: void setOnFrameRenderedListener(android.media.MediaCodec$OnFrameRenderedListener,android.os.Handler)>
<android.media.MediaCodec: void setOutputSurface(android.view.Surface)>
<android.media.MediaCodec: void setParameters(android.os.Bundle)>
<android.media.MediaCodec: void setVideoScalingMode(int)>
<android.media.MediaCodec: void signalEndOfInputStream()>
<android.media.MediaCodec: void start()>
<android.media.MediaCodec: void stop()>
<android.media.MediaCodec: void subscribeToVendorParameters(java.util.List)>
<android.media.MediaCodec: void unsubscribeFromVendorParameters(java.util.List)>
<android.media.MediaCodec: int BUFFER_FLAG_CODEC_CONFIG>
<android.media.MediaCodec: int BUFFER_FLAG_END_OF_STREAM>
<android.media.MediaCodec: int BUFFER_FLAG_KEY_FRAME>
<android.media.MediaCodec: int BUFFER_FLAG_PARTIAL_FRAME>
<android.media.MediaCodec: int BUFFER_FLAG_SYNC_FRAME>
<android.media.MediaCodec: int CONFIGURE_FLAG_ENCODE>
<android.media.MediaCodec: int CONFIGURE_FLAG_USE_BLOCK_MODEL>
<android.media.MediaCodec: int CRYPTO_MODE_AES_CBC>
<android.media.MediaCodec: int CRYPTO_MODE_AES_CTR>
<android.media.MediaCodec: int CRYPTO_MODE_UNENCRYPTED>
<android.media.MediaCodec: int INFO_OUTPUT_BUFFERS_CHANGED>
<android.media.MediaCodec: int INFO_OUTPUT_FORMAT_CHANGED>
<android.media.MediaCodec: int INFO_TRY_AGAIN_LATER>
<android.media.MediaCodec: java.lang.String PARAMETER_KEY_HDR10_PLUS_INFO>
<android.media.MediaCodec: java.lang.String PARAMETER_KEY_LOW_LATENCY>
<android.media.MediaCodec: java.lang.String PARAMETER_KEY_OFFSET_TIME>
<android.media.MediaCodec: java.lang.String PARAMETER_KEY_REQUEST_SYNC_FRAME>
<android.media.MediaCodec: java.lang.String PARAMETER_KEY_SUSPEND>
<android.media.MediaCodec: java.lang.String PARAMETER_KEY_SUSPEND_TIME>
<android.media.MediaCodec: java.lang.String PARAMETER_KEY_TUNNEL_PEEK>
<android.media.MediaCodec: java.lang.String PARAMETER_KEY_VIDEO_BITRATE>
<android.media.MediaCodec: int VIDEO_SCALING_MODE_SCALE_TO_FIT>
<android.media.MediaCodec: int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING>
android.media.MediaCodec$BufferInfo
<android.media.MediaCodec$BufferInfo: void <init>()>
<android.media.MediaCodec$BufferInfo: void set(int,int,long,int)>
<android.media.MediaCodec$BufferInfo: int flags>
<android.media.MediaCodec$BufferInfo: int offset>
<android.media.MediaCodec$BufferInfo: long presentationTimeUs>
<android.media.MediaCodec$BufferInfo: int size>
android.media.MediaCodec$Callback
<android.media.MediaCodec$Callback: void <init>()>
<android.media.MediaCodec$Callback: void onError(android.media.MediaCodec,android.media.MediaCodec$CodecException)>
<android.media.MediaCodec$Callback: void onInputBufferAvailable(android.media.MediaCodec,int)>
<android.media.MediaCodec$Callback: void onOutputBufferAvailable(android.media.MediaCodec,int,android.media.MediaCodec$BufferInfo)>
<android.media.MediaCodec$Callback: void onOutputFormatChanged(android.media.MediaCodec,android.media.MediaFormat)>
android.media.MediaCodec$CodecException
<android.media.MediaCodec$CodecException: java.lang.String getDiagnosticInfo()>
<android.media.MediaCodec$CodecException: int getErrorCode()>
<android.media.MediaCodec$CodecException: boolean isRecoverable()>
<android.media.MediaCodec$CodecException: boolean isTransient()>
<android.media.MediaCodec$CodecException: int ERROR_INSUFFICIENT_RESOURCE>
<android.media.MediaCodec$CodecException: int ERROR_RECLAIMED>
android.media.MediaCodec$CryptoException
<android.media.MediaCodec$CryptoException: void <init>(int,java.lang.String)>
<android.media.MediaCodec$CryptoException: int getErrorCode()>
<android.media.MediaCodec$CryptoException: int ERROR_FRAME_TOO_LARGE>
<android.media.MediaCodec$CryptoException: int ERROR_INSUFFICIENT_OUTPUT_PROTECTION>
<android.media.MediaCodec$CryptoException: int ERROR_INSUFFICIENT_SECURITY>
<android.media.MediaCodec$CryptoException: int ERROR_KEY_EXPIRED>
<android.media.MediaCodec$CryptoException: int ERROR_LOST_STATE>
<android.media.MediaCodec$CryptoException: int ERROR_NO_KEY>
<android.media.MediaCodec$CryptoException: int ERROR_RESOURCE_BUSY>
<android.media.MediaCodec$CryptoException: int ERROR_SESSION_NOT_OPENED>
<android.media.MediaCodec$CryptoException: int ERROR_UNSUPPORTED_OPERATION>
android.media.MediaCodec$CryptoInfo
<android.media.MediaCodec$CryptoInfo: void <init>()>
<android.media.MediaCodec$CryptoInfo: android.media.MediaCodec$CryptoInfo$Pattern getPattern()>
<android.media.MediaCodec$CryptoInfo: void set(int,int[],int[],byte[],byte[],int)>
<android.media.MediaCodec$CryptoInfo: void setPattern(android.media.MediaCodec$CryptoInfo$Pattern)>
<android.media.MediaCodec$CryptoInfo: byte[] iv>
<android.media.MediaCodec$CryptoInfo: byte[] key>
<android.media.MediaCodec$CryptoInfo: int mode>
<android.media.MediaCodec$CryptoInfo: int[] numBytesOfClearData>
<android.media.MediaCodec$CryptoInfo: int[] numBytesOfEncryptedData>
<android.media.MediaCodec$CryptoInfo: int numSubSamples>
android.media.MediaCodec$CryptoInfo$Pattern
<android.media.MediaCodec$CryptoInfo$Pattern: void <init>(int,int)>
<android.media.MediaCodec$CryptoInfo$Pattern: int getEncryptBlocks()>
<android.media.MediaCodec$CryptoInfo$Pattern: int getSkipBlocks()>
<android.media.MediaCodec$CryptoInfo$Pattern: void set(int,int)>
android.media.MediaCodec$IncompatibleWithBlockModelException
android.media.MediaCodec$LinearBlock
<android.media.MediaCodec$LinearBlock: void finalize()>
<android.media.MediaCodec$LinearBlock: boolean isCodecCopyFreeCompatible(java.lang.String[])>
<android.media.MediaCodec$LinearBlock: boolean isMappable()>
<android.media.MediaCodec$LinearBlock: java.nio.ByteBuffer map()>
<android.media.MediaCodec$LinearBlock: android.media.MediaCodec$LinearBlock obtain(int,java.lang.String[])>
<android.media.MediaCodec$LinearBlock: void recycle()>
android.media.MediaCodec$MetricsConstants
<android.media.MediaCodec$MetricsConstants: java.lang.String CODEC>
<android.media.MediaCodec$MetricsConstants: java.lang.String ENCODER>
<android.media.MediaCodec$MetricsConstants: java.lang.String HEIGHT>
<android.media.MediaCodec$MetricsConstants: java.lang.String MIME_TYPE>
<android.media.MediaCodec$MetricsConstants: java.lang.String MODE>
<android.media.MediaCodec$MetricsConstants: java.lang.String MODE_AUDIO>
<android.media.MediaCodec$MetricsConstants: java.lang.String MODE_VIDEO>
<android.media.MediaCodec$MetricsConstants: java.lang.String ROTATION>
<android.media.MediaCodec$MetricsConstants: java.lang.String SECURE>
<android.media.MediaCodec$MetricsConstants: java.lang.String WIDTH>
android.media.MediaCodec$OnFirstTunnelFrameReadyListener
<android.media.MediaCodec$OnFirstTunnelFrameReadyListener: void onFirstTunnelFrameReady(android.media.MediaCodec)>
android.media.MediaCodec$OnFrameRenderedListener
<android.media.MediaCodec$OnFrameRenderedListener: void onFrameRendered(android.media.MediaCodec,long,long)>
android.media.MediaCodec$OutputFrame
<android.media.MediaCodec$OutputFrame: java.util.Set getChangedKeys()>
<android.media.MediaCodec$OutputFrame: int getFlags()>
<android.media.MediaCodec$OutputFrame: android.media.MediaFormat getFormat()>
<android.media.MediaCodec$OutputFrame: android.hardware.HardwareBuffer getHardwareBuffer()>
<android.media.MediaCodec$OutputFrame: android.media.MediaCodec$LinearBlock getLinearBlock()>
<android.media.MediaCodec$OutputFrame: long getPresentationTimeUs()>
android.media.MediaCodec$ParameterDescriptor
<android.media.MediaCodec$ParameterDescriptor: java.lang.String getName()>
<android.media.MediaCodec$ParameterDescriptor: int getType()>
android.media.MediaCodec$QueueRequest
<android.media.MediaCodec$QueueRequest: void queue()>
<android.media.MediaCodec$QueueRequest: android.media.MediaCodec$QueueRequest setByteBufferParameter(java.lang.String,java.nio.ByteBuffer)>
<android.media.MediaCodec$QueueRequest: android.media.MediaCodec$QueueRequest setEncryptedLinearBlock(android.media.MediaCodec$LinearBlock,int,int,android.media.MediaCodec$CryptoInfo)>
<android.media.MediaCodec$QueueRequest: android.media.MediaCodec$QueueRequest setFlags(int)>
<android.media.MediaCodec$QueueRequest: android.media.MediaCodec$QueueRequest setFloatParameter(java.lang.String,float)>
<android.media.MediaCodec$QueueRequest: android.media.MediaCodec$QueueRequest setHardwareBuffer(android.hardware.HardwareBuffer)>
<android.media.MediaCodec$QueueRequest: android.media.MediaCodec$QueueRequest setIntegerParameter(java.lang.String,int)>
<android.media.MediaCodec$QueueRequest: android.media.MediaCodec$QueueRequest setLinearBlock(android.media.MediaCodec$LinearBlock,int,int)>
<android.media.MediaCodec$QueueRequest: android.media.MediaCodec$QueueRequest setLongParameter(java.lang.String,long)>
<android.media.MediaCodec$QueueRequest: android.media.MediaCodec$QueueRequest setPresentationTimeUs(long)>
<android.media.MediaCodec$QueueRequest: android.media.MediaCodec$QueueRequest setStringParameter(java.lang.String,java.lang.String)>
android.media.MediaCodecInfo
<android.media.MediaCodecInfo: java.lang.String getCanonicalName()>
<android.media.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities getCapabilitiesForType(java.lang.String)>
<android.media.MediaCodecInfo: java.lang.String getName()>
<android.media.MediaCodecInfo: java.lang.String[] getSupportedTypes()>
<android.media.MediaCodecInfo: boolean isAlias()>
<android.media.MediaCodecInfo: boolean isEncoder()>
<android.media.MediaCodecInfo: boolean isHardwareAccelerated()>
<android.media.MediaCodecInfo: boolean isSoftwareOnly()>
<android.media.MediaCodecInfo: boolean isVendor()>
android.media.MediaCodecInfo$AudioCapabilities
<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range getBitrateRange()>
<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] getInputChannelCountRanges()>
<android.media.MediaCodecInfo$AudioCapabilities: int getMaxInputChannelCount()>
<android.media.MediaCodecInfo$AudioCapabilities: int getMinInputChannelCount()>
<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] getSupportedSampleRateRanges()>
<android.media.MediaCodecInfo$AudioCapabilities: int[] getSupportedSampleRates()>
<android.media.MediaCodecInfo$AudioCapabilities: boolean isSampleRateSupported(int)>
android.media.MediaCodecInfo$CodecCapabilities
<android.media.MediaCodecInfo$CodecCapabilities: void <init>()>
<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecCapabilities createFromProfileLevel(java.lang.String,int,int)>
<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities getAudioCapabilities()>
<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat getDefaultFormat()>
<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities getEncoderCapabilities()>
<android.media.MediaCodecInfo$CodecCapabilities: int getMaxSupportedInstances()>
<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String getMimeType()>
<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities getVideoCapabilities()>
<android.media.MediaCodecInfo$CodecCapabilities: boolean isFeatureRequired(java.lang.String)>
<android.media.MediaCodecInfo$CodecCapabilities: boolean isFeatureSupported(java.lang.String)>
<android.media.MediaCodecInfo$CodecCapabilities: boolean isFormatSupported(android.media.MediaFormat)>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format12bitRGB444>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format16bitARGB1555>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format16bitARGB4444>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format16bitBGR565>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format16bitRGB565>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format18BitBGR666>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format18bitARGB1665>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format18bitRGB666>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format19bitARGB1666>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format24BitABGR6666>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format24BitARGB6666>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format24bitARGB1887>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format24bitBGR888>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format24bitRGB888>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format25bitARGB1888>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format32bitABGR2101010>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format32bitABGR8888>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format32bitARGB8888>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format32bitBGRA8888>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format64bitABGRFloat>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format8bitRGB332>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatCbYCrY>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatCrYCbY>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL16>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL2>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL24>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL32>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL4>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL8>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatMonochrome>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatRGBAFlexible>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatRGBFlexible>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatRawBayer10bit>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatRawBayer8bit>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatRawBayer8bitcompressed>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatSurface>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYCbYCr>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYCrYCb>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV411PackedPlanar>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV411Planar>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV420Flexible>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV420PackedPlanar>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV420PackedSemiPlanar>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV420Planar>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV420SemiPlanar>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV422Flexible>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV422PackedPlanar>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV422PackedSemiPlanar>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV422Planar>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV422SemiPlanar>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV444Flexible>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV444Interleaved>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUVP010>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_QCOM_FormatYUV420SemiPlanar>
<android.media.MediaCodecInfo$CodecCapabilities: int COLOR_TI_FormatYUV420PackedSemiPlanar>
<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_AdaptivePlayback>
<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_DynamicTimestamp>
<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_EncodingStatistics>
<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_FrameParsing>
<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_HdrEditing>
<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_IntraRefresh>
<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_LowLatency>
<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_MultipleFrames>
<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_PartialFrame>
<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_QpBounds>
<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_SecurePlayback>
<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_TunneledPlayback>
<android.media.MediaCodecInfo$CodecCapabilities: int[] colorFormats>
<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels>
android.media.MediaCodecInfo$CodecProfileLevel
<android.media.MediaCodecInfo$CodecProfileLevel: void <init>()>
<android.media.MediaCodecInfo$CodecProfileLevel: int AACObjectELD>
<android.media.MediaCodecInfo$CodecProfileLevel: int AACObjectERLC>
<android.media.MediaCodecInfo$CodecProfileLevel: int AACObjectERScalable>
<android.media.MediaCodecInfo$CodecProfileLevel: int AACObjectHE>
<android.media.MediaCodecInfo$CodecProfileLevel: int AACObjectHE_PS>
<android.media.MediaCodecInfo$CodecProfileLevel: int AACObjectLC>
<android.media.MediaCodecInfo$CodecProfileLevel: int AACObjectLD>
<android.media.MediaCodecInfo$CodecProfileLevel: int AACObjectLTP>
<android.media.MediaCodecInfo$CodecProfileLevel: int AACObjectMain>
<android.media.MediaCodecInfo$CodecProfileLevel: int AACObjectSSR>
<android.media.MediaCodecInfo$CodecProfileLevel: int AACObjectScalable>
<android.media.MediaCodecInfo$CodecProfileLevel: int AACObjectXHE>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level2>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level21>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level22>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level23>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level3>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level31>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level32>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level33>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level4>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level41>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level42>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level43>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level5>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level51>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level52>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level53>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level6>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level61>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level62>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level63>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level7>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level71>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level72>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1Level73>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1ProfileMain10>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1ProfileMain10HDR10>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1ProfileMain10HDR10Plus>
<android.media.MediaCodecInfo$CodecProfileLevel: int AV1ProfileMain8>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel1>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel11>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel12>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel13>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel1b>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel2>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel21>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel22>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel3>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel31>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel32>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel4>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel41>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel42>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel5>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel51>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel52>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel6>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel61>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCLevel62>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCProfileBaseline>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCProfileConstrainedBaseline>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCProfileConstrainedHigh>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCProfileExtended>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCProfileHigh>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCProfileHigh10>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCProfileHigh422>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCProfileHigh444>
<android.media.MediaCodecInfo$CodecProfileLevel: int AVCProfileMain>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionLevel8k30>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionLevel8k60>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionLevelFhd24>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionLevelFhd30>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionLevelFhd60>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionLevelHd24>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionLevelHd30>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionLevelUhd120>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionLevelUhd24>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionLevelUhd30>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionLevelUhd48>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionLevelUhd60>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionProfileDvav110>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionProfileDvavPen>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionProfileDvavPer>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionProfileDvavSe>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionProfileDvheDen>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionProfileDvheDer>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionProfileDvheDtb>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionProfileDvheDth>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionProfileDvheDtr>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionProfileDvheSt>
<android.media.MediaCodecInfo$CodecProfileLevel: int DolbyVisionProfileDvheStn>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263Level10>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263Level20>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263Level30>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263Level40>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263Level45>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263Level50>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263Level60>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263Level70>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263ProfileBackwardCompatible>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263ProfileBaseline>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263ProfileH320Coding>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263ProfileHighCompression>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263ProfileHighLatency>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263ProfileISWV2>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263ProfileISWV3>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263ProfileInterlace>
<android.media.MediaCodecInfo$CodecProfileLevel: int H263ProfileInternet>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCHighTierLevel1>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCHighTierLevel2>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCHighTierLevel21>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCHighTierLevel3>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCHighTierLevel31>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCHighTierLevel4>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCHighTierLevel41>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCHighTierLevel5>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCHighTierLevel51>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCHighTierLevel52>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCHighTierLevel6>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCHighTierLevel61>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCHighTierLevel62>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCMainTierLevel1>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCMainTierLevel2>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCMainTierLevel21>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCMainTierLevel3>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCMainTierLevel31>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCMainTierLevel4>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCMainTierLevel41>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCMainTierLevel5>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCMainTierLevel51>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCMainTierLevel52>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCMainTierLevel6>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCMainTierLevel61>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCMainTierLevel62>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCProfileMain>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCProfileMain10>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCProfileMain10HDR10>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCProfileMain10HDR10Plus>
<android.media.MediaCodecInfo$CodecProfileLevel: int HEVCProfileMainStill>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG2LevelH14>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG2LevelHL>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG2LevelHP>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG2LevelLL>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG2LevelML>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG2Profile422>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG2ProfileHigh>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG2ProfileMain>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG2ProfileSNR>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG2ProfileSimple>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG2ProfileSpatial>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4Level0>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4Level0b>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4Level1>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4Level2>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4Level3>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4Level3b>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4Level4>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4Level4a>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4Level5>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4Level6>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileAdvancedCoding>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileAdvancedCore>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileAdvancedRealTime>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileAdvancedScalable>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileAdvancedSimple>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileBasicAnimated>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileCore>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileCoreScalable>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileHybrid>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileMain>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileNbit>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileScalableTexture>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileSimple>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileSimpleFBA>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileSimpleFace>
<android.media.MediaCodecInfo$CodecProfileLevel: int MPEG4ProfileSimpleScalable>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP8Level_Version0>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP8Level_Version1>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP8Level_Version2>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP8Level_Version3>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP8ProfileMain>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Level1>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Level11>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Level2>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Level21>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Level3>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Level31>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Level4>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Level41>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Level5>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Level51>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Level52>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Level6>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Level61>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Level62>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Profile0>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Profile1>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Profile2>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Profile2HDR>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Profile2HDR10Plus>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Profile3>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Profile3HDR>
<android.media.MediaCodecInfo$CodecProfileLevel: int VP9Profile3HDR10Plus>
<android.media.MediaCodecInfo$CodecProfileLevel: int level>
<android.media.MediaCodecInfo$CodecProfileLevel: int profile>
android.media.MediaCodecInfo$EncoderCapabilities
<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range getComplexityRange()>
<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range getQualityRange()>
<android.media.MediaCodecInfo$EncoderCapabilities: boolean isBitrateModeSupported(int)>
<android.media.MediaCodecInfo$EncoderCapabilities: int BITRATE_MODE_CBR>
<android.media.MediaCodecInfo$EncoderCapabilities: int BITRATE_MODE_CBR_FD>
<android.media.MediaCodecInfo$EncoderCapabilities: int BITRATE_MODE_CQ>
<android.media.MediaCodecInfo$EncoderCapabilities: int BITRATE_MODE_VBR>
android.media.MediaCodecInfo$VideoCapabilities
<android.media.MediaCodecInfo$VideoCapabilities: boolean areSizeAndRateSupported(int,int,double)>
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getAchievableFrameRatesFor(int,int)>
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getBitrateRange()>
<android.media.MediaCodecInfo$VideoCapabilities: int getHeightAlignment()>
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedFrameRates()>
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedFrameRatesFor(int,int)>
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedHeights()>
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedHeightsFor(int)>
<android.media.MediaCodecInfo$VideoCapabilities: java.util.List getSupportedPerformancePoints()>
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedWidths()>
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedWidthsFor(int)>
<android.media.MediaCodecInfo$VideoCapabilities: int getWidthAlignment()>
<android.media.MediaCodecInfo$VideoCapabilities: boolean isSizeSupported(int,int)>
android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: void <init>(int,int,int)>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: boolean covers(android.media.MediaFormat)>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: boolean covers(android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint)>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint FHD_100>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint FHD_120>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint FHD_200>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint FHD_24>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint FHD_240>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint FHD_25>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint FHD_30>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint FHD_50>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint FHD_60>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint HD_100>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint HD_120>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint HD_200>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint HD_24>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint HD_240>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint HD_25>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint HD_30>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint HD_50>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint HD_60>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint SD_24>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint SD_25>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint SD_30>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint SD_48>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint SD_50>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint SD_60>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint UHD_100>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint UHD_120>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint UHD_200>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint UHD_24>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint UHD_240>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint UHD_25>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint UHD_30>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint UHD_50>
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint UHD_60>
android.media.MediaCodecList
<android.media.MediaCodecList: void <init>(int)>
<android.media.MediaCodecList: java.lang.String findDecoderForFormat(android.media.MediaFormat)>
<android.media.MediaCodecList: java.lang.String findEncoderForFormat(android.media.MediaFormat)>
<android.media.MediaCodecList: int getCodecCount()>
<android.media.MediaCodecList: android.media.MediaCodecInfo getCodecInfoAt(int)>
<android.media.MediaCodecList: android.media.MediaCodecInfo[] getCodecInfos()>
<android.media.MediaCodecList: int ALL_CODECS>
<android.media.MediaCodecList: int REGULAR_CODECS>
android.media.MediaCrypto
<android.media.MediaCrypto: void <init>(java.util.UUID,byte[])>
<android.media.MediaCrypto: void finalize()>
<android.media.MediaCrypto: boolean isCryptoSchemeSupported(java.util.UUID)>
<android.media.MediaCrypto: void release()>
<android.media.MediaCrypto: boolean requiresSecureDecoderComponent(java.lang.String)>
<android.media.MediaCrypto: void setMediaDrmSession(byte[])>
android.media.MediaCryptoException
<android.media.MediaCryptoException: void <init>(java.lang.String)>
android.media.MediaDataSource
<android.media.MediaDataSource: void <init>()>
<android.media.MediaDataSource: long getSize()>
<android.media.MediaDataSource: int readAt(long,byte[],int,int)>
android.media.MediaDescrambler
<android.media.MediaDescrambler: void <init>(int)>
<android.media.MediaDescrambler: void close()>
<android.media.MediaDescrambler: int descramble(java.nio.ByteBuffer,java.nio.ByteBuffer,android.media.MediaCodec$CryptoInfo)>
<android.media.MediaDescrambler: void finalize()>
<android.media.MediaDescrambler: boolean requiresSecureDecoderComponent(java.lang.String)>
<android.media.MediaDescrambler: void setMediaCasSession(android.media.MediaCas$Session)>
<android.media.MediaDescrambler: byte SCRAMBLE_CONTROL_EVEN_KEY>
<android.media.MediaDescrambler: byte SCRAMBLE_CONTROL_ODD_KEY>
<android.media.MediaDescrambler: byte SCRAMBLE_CONTROL_RESERVED>
<android.media.MediaDescrambler: byte SCRAMBLE_CONTROL_UNSCRAMBLED>
<android.media.MediaDescrambler: byte SCRAMBLE_FLAG_PES_HEADER>
android.media.MediaDescription
<android.media.MediaDescription: int describeContents()>
<android.media.MediaDescription: java.lang.CharSequence getDescription()>
<android.media.MediaDescription: android.os.Bundle getExtras()>
<android.media.MediaDescription: android.graphics.Bitmap getIconBitmap()>
<android.media.MediaDescription: android.net.Uri getIconUri()>
<android.media.MediaDescription: java.lang.String getMediaId()>
<android.media.MediaDescription: android.net.Uri getMediaUri()>
<android.media.MediaDescription: java.lang.CharSequence getSubtitle()>
<android.media.MediaDescription: java.lang.CharSequence getTitle()>
<android.media.MediaDescription: void writeToParcel(android.os.Parcel,int)>
<android.media.MediaDescription: long BT_FOLDER_TYPE_ALBUMS>
<android.media.MediaDescription: long BT_FOLDER_TYPE_ARTISTS>
<android.media.MediaDescription: long BT_FOLDER_TYPE_GENRES>
<android.media.MediaDescription: long BT_FOLDER_TYPE_MIXED>
<android.media.MediaDescription: long BT_FOLDER_TYPE_PLAYLISTS>
<android.media.MediaDescription: long BT_FOLDER_TYPE_TITLES>
<android.media.MediaDescription: long BT_FOLDER_TYPE_YEARS>
<android.media.MediaDescription: android.os.Parcelable$Creator CREATOR>
<android.media.MediaDescription: java.lang.String EXTRA_BT_FOLDER_TYPE>
android.media.MediaDescription$Builder
<android.media.MediaDescription$Builder: void <init>()>
<android.media.MediaDescription$Builder: android.media.MediaDescription build()>
<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setDescription(java.lang.CharSequence)>
<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setExtras(android.os.Bundle)>
<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setIconBitmap(android.graphics.Bitmap)>
<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setIconUri(android.net.Uri)>
<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setMediaId(java.lang.String)>
<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setMediaUri(android.net.Uri)>
<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setSubtitle(java.lang.CharSequence)>
<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setTitle(java.lang.CharSequence)>
android.media.MediaDrm
<android.media.MediaDrm: void <init>(java.util.UUID)>
<android.media.MediaDrm: void clearOnEventListener()>
<android.media.MediaDrm: void clearOnExpirationUpdateListener()>
<android.media.MediaDrm: void clearOnKeyStatusChangeListener()>
<android.media.MediaDrm: void clearOnSessionLostStateListener()>
<android.media.MediaDrm: void close()>
<android.media.MediaDrm: void closeSession(byte[])>
<android.media.MediaDrm: int getConnectedHdcpLevel()>
<android.media.MediaDrm: android.media.MediaDrm$CryptoSession getCryptoSession(byte[],java.lang.String,java.lang.String)>
<android.media.MediaDrm: android.media.MediaDrm$KeyRequest getKeyRequest(byte[],byte[],java.lang.String,int,java.util.HashMap)>
<android.media.MediaDrm: java.util.List getLogMessages()>
<android.media.MediaDrm: int getMaxHdcpLevel()>
<android.media.MediaDrm: int getMaxSecurityLevel()>
<android.media.MediaDrm: int getMaxSessionCount()>
<android.media.MediaDrm: android.os.PersistableBundle getMetrics()>
<android.media.MediaDrm: java.util.List getOfflineLicenseKeySetIds()>
<android.media.MediaDrm: int getOfflineLicenseState(byte[])>
<android.media.MediaDrm: int getOpenSessionCount()>
<android.media.MediaDrm: android.media.MediaDrm$PlaybackComponent getPlaybackComponent(byte[])>
<android.media.MediaDrm: byte[] getPropertyByteArray(java.lang.String)>
<android.media.MediaDrm: java.lang.String getPropertyString(java.lang.String)>
<android.media.MediaDrm: android.media.MediaDrm$ProvisionRequest getProvisionRequest()>
<android.media.MediaDrm: byte[] getSecureStop(byte[])>
<android.media.MediaDrm: java.util.List getSecureStopIds()>
<android.media.MediaDrm: java.util.List getSecureStops()>
<android.media.MediaDrm: int getSecurityLevel(byte[])>
<android.media.MediaDrm: java.util.List getSupportedCryptoSchemes()>
<android.media.MediaDrm: boolean isCryptoSchemeSupported(java.util.UUID)>
<android.media.MediaDrm: boolean isCryptoSchemeSupported(java.util.UUID,java.lang.String)>
<android.media.MediaDrm: boolean isCryptoSchemeSupported(java.util.UUID,java.lang.String,int)>
<android.media.MediaDrm: byte[] openSession()>
<android.media.MediaDrm: byte[] openSession(int)>
<android.media.MediaDrm: byte[] provideKeyResponse(byte[],byte[])>
<android.media.MediaDrm: void provideProvisionResponse(byte[])>
<android.media.MediaDrm: java.util.HashMap queryKeyStatus(byte[])>
<android.media.MediaDrm: void release()>
<android.media.MediaDrm: void releaseAllSecureStops()>
<android.media.MediaDrm: void releaseSecureStops(byte[])>
<android.media.MediaDrm: void removeAllSecureStops()>
<android.media.MediaDrm: void removeKeys(byte[])>
<android.media.MediaDrm: void removeOfflineLicense(byte[])>
<android.media.MediaDrm: void removeSecureStop(byte[])>
<android.media.MediaDrm: boolean requiresSecureDecoder(java.lang.String)>
<android.media.MediaDrm: boolean requiresSecureDecoder(java.lang.String,int)>
<android.media.MediaDrm: void restoreKeys(byte[],byte[])>
<android.media.MediaDrm: void setOnEventListener(android.media.MediaDrm$OnEventListener)>
<android.media.MediaDrm: void setOnEventListener(android.media.MediaDrm$OnEventListener,android.os.Handler)>
<android.media.MediaDrm: void setOnEventListener(java.util.concurrent.Executor,android.media.MediaDrm$OnEventListener)>
<android.media.MediaDrm: void setOnExpirationUpdateListener(android.media.MediaDrm$OnExpirationUpdateListener,android.os.Handler)>
<android.media.MediaDrm: void setOnExpirationUpdateListener(java.util.concurrent.Executor,android.media.MediaDrm$OnExpirationUpdateListener)>
<android.media.MediaDrm: void setOnKeyStatusChangeListener(android.media.MediaDrm$OnKeyStatusChangeListener,android.os.Handler)>
<android.media.MediaDrm: void setOnKeyStatusChangeListener(java.util.concurrent.Executor,android.media.MediaDrm$OnKeyStatusChangeListener)>
<android.media.MediaDrm: void setOnSessionLostStateListener(android.media.MediaDrm$OnSessionLostStateListener,android.os.Handler)>
<android.media.MediaDrm: void setOnSessionLostStateListener(java.util.concurrent.Executor,android.media.MediaDrm$OnSessionLostStateListener)>
<android.media.MediaDrm: void setPropertyByteArray(java.lang.String,byte[])>
<android.media.MediaDrm: void setPropertyString(java.lang.String,java.lang.String)>
<android.media.MediaDrm: int EVENT_KEY_EXPIRED>
<android.media.MediaDrm: int EVENT_KEY_REQUIRED>
<android.media.MediaDrm: int EVENT_PROVISION_REQUIRED>
<android.media.MediaDrm: int EVENT_SESSION_RECLAIMED>
<android.media.MediaDrm: int EVENT_VENDOR_DEFINED>
<android.media.MediaDrm: int HDCP_LEVEL_UNKNOWN>
<android.media.MediaDrm: int HDCP_NONE>
<android.media.MediaDrm: int HDCP_NO_DIGITAL_OUTPUT>
<android.media.MediaDrm: int HDCP_V1>
<android.media.MediaDrm: int HDCP_V2>
<android.media.MediaDrm: int HDCP_V2_1>
<android.media.MediaDrm: int HDCP_V2_2>
<android.media.MediaDrm: int HDCP_V2_3>
<android.media.MediaDrm: int KEY_TYPE_OFFLINE>
<android.media.MediaDrm: int KEY_TYPE_RELEASE>
<android.media.MediaDrm: int KEY_TYPE_STREAMING>
<android.media.MediaDrm: int OFFLINE_LICENSE_STATE_RELEASED>
<android.media.MediaDrm: int OFFLINE_LICENSE_STATE_UNKNOWN>
<android.media.MediaDrm: int OFFLINE_LICENSE_STATE_USABLE>
<android.media.MediaDrm: java.lang.String PROPERTY_ALGORITHMS>
<android.media.MediaDrm: java.lang.String PROPERTY_DESCRIPTION>
<android.media.MediaDrm: java.lang.String PROPERTY_DEVICE_UNIQUE_ID>
<android.media.MediaDrm: java.lang.String PROPERTY_VENDOR>
<android.media.MediaDrm: java.lang.String PROPERTY_VERSION>
<android.media.MediaDrm: int SECURITY_LEVEL_HW_SECURE_ALL>
<android.media.MediaDrm: int SECURITY_LEVEL_HW_SECURE_CRYPTO>
<android.media.MediaDrm: int SECURITY_LEVEL_HW_SECURE_DECODE>
<android.media.MediaDrm: int SECURITY_LEVEL_SW_SECURE_CRYPTO>
<android.media.MediaDrm: int SECURITY_LEVEL_SW_SECURE_DECODE>
<android.media.MediaDrm: int SECURITY_LEVEL_UNKNOWN>
android.media.MediaDrm$CryptoSession
<android.media.MediaDrm$CryptoSession: byte[] decrypt(byte[],byte[],byte[])>
<android.media.MediaDrm$CryptoSession: byte[] encrypt(byte[],byte[],byte[])>
<android.media.MediaDrm$CryptoSession: byte[] sign(byte[],byte[])>
<android.media.MediaDrm$CryptoSession: boolean verify(byte[],byte[],byte[])>
android.media.MediaDrm$ErrorCodes
<android.media.MediaDrm$ErrorCodes: int ERROR_CERTIFICATE_MALFORMED>
<android.media.MediaDrm$ErrorCodes: int ERROR_CERTIFICATE_MISSING>
<android.media.MediaDrm$ErrorCodes: int ERROR_CRYPTO_LIBRARY>
<android.media.MediaDrm$ErrorCodes: int ERROR_FRAME_TOO_LARGE>
<android.media.MediaDrm$ErrorCodes: int ERROR_GENERIC_OEM>
<android.media.MediaDrm$ErrorCodes: int ERROR_GENERIC_PLUGIN>
<android.media.MediaDrm$ErrorCodes: int ERROR_INIT_DATA>
<android.media.MediaDrm$ErrorCodes: int ERROR_INSUFFICIENT_OUTPUT_PROTECTION>
<android.media.MediaDrm$ErrorCodes: int ERROR_INSUFFICIENT_SECURITY>
<android.media.MediaDrm$ErrorCodes: int ERROR_KEY_EXPIRED>
<android.media.MediaDrm$ErrorCodes: int ERROR_KEY_NOT_LOADED>
<android.media.MediaDrm$ErrorCodes: int ERROR_LICENSE_PARSE>
<android.media.MediaDrm$ErrorCodes: int ERROR_LICENSE_POLICY>
<android.media.MediaDrm$ErrorCodes: int ERROR_LICENSE_RELEASE>
<android.media.MediaDrm$ErrorCodes: int ERROR_LICENSE_REQUEST_REJECTED>
<android.media.MediaDrm$ErrorCodes: int ERROR_LICENSE_RESTORE>
<android.media.MediaDrm$ErrorCodes: int ERROR_LICENSE_STATE>
<android.media.MediaDrm$ErrorCodes: int ERROR_LOST_STATE>
<android.media.MediaDrm$ErrorCodes: int ERROR_MEDIA_FRAMEWORK>
<android.media.MediaDrm$ErrorCodes: int ERROR_NO_KEY>
<android.media.MediaDrm$ErrorCodes: int ERROR_PROVISIONING_CERTIFICATE>
<android.media.MediaDrm$ErrorCodes: int ERROR_PROVISIONING_CONFIG>
<android.media.MediaDrm$ErrorCodes: int ERROR_PROVISIONING_PARSE>
<android.media.MediaDrm$ErrorCodes: int ERROR_PROVISIONING_REQUEST_REJECTED>
<android.media.MediaDrm$ErrorCodes: int ERROR_PROVISIONING_RETRY>
<android.media.MediaDrm$ErrorCodes: int ERROR_RESOURCE_BUSY>
<android.media.MediaDrm$ErrorCodes: int ERROR_RESOURCE_CONTENTION>
<android.media.MediaDrm$ErrorCodes: int ERROR_SECURE_STOP_RELEASE>
<android.media.MediaDrm$ErrorCodes: int ERROR_SESSION_NOT_OPENED>
<android.media.MediaDrm$ErrorCodes: int ERROR_STORAGE_READ>
<android.media.MediaDrm$ErrorCodes: int ERROR_STORAGE_WRITE>
<android.media.MediaDrm$ErrorCodes: int ERROR_UNKNOWN>
<android.media.MediaDrm$ErrorCodes: int ERROR_UNSUPPORTED_OPERATION>
<android.media.MediaDrm$ErrorCodes: int ERROR_ZERO_SUBSAMPLES>
android.media.MediaDrm$HdcpLevel
android.media.MediaDrm$KeyRequest
<android.media.MediaDrm$KeyRequest: byte[] getData()>
<android.media.MediaDrm$KeyRequest: java.lang.String getDefaultUrl()>
<android.media.MediaDrm$KeyRequest: int getRequestType()>
<android.media.MediaDrm$KeyRequest: int REQUEST_TYPE_INITIAL>
<android.media.MediaDrm$KeyRequest: int REQUEST_TYPE_NONE>
<android.media.MediaDrm$KeyRequest: int REQUEST_TYPE_RELEASE>
<android.media.MediaDrm$KeyRequest: int REQUEST_TYPE_RENEWAL>
<android.media.MediaDrm$KeyRequest: int REQUEST_TYPE_UPDATE>
android.media.MediaDrm$KeyStatus
<android.media.MediaDrm$KeyStatus: byte[] getKeyId()>
<android.media.MediaDrm$KeyStatus: int getStatusCode()>
<android.media.MediaDrm$KeyStatus: int STATUS_EXPIRED>
<android.media.MediaDrm$KeyStatus: int STATUS_INTERNAL_ERROR>
<android.media.MediaDrm$KeyStatus: int STATUS_OUTPUT_NOT_ALLOWED>
<android.media.MediaDrm$KeyStatus: int STATUS_PENDING>
<android.media.MediaDrm$KeyStatus: int STATUS_USABLE>
<android.media.MediaDrm$KeyStatus: int STATUS_USABLE_IN_FUTURE>
android.media.MediaDrm$LogMessage
<android.media.MediaDrm$LogMessage: java.lang.String getMessage()>
<android.media.MediaDrm$LogMessage: int getPriority()>
<android.media.MediaDrm$LogMessage: long getTimestampMillis()>
android.media.MediaDrm$MediaDrmStateException
<android.media.MediaDrm$MediaDrmStateException: java.lang.String getDiagnosticInfo()>
<android.media.MediaDrm$MediaDrmStateException: int getErrorCode()>
<android.media.MediaDrm$MediaDrmStateException: boolean isTransient()>
android.media.MediaDrm$MetricsConstants
<android.media.MediaDrm$MetricsConstants: java.lang.String CLOSE_SESSION_ERROR_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String CLOSE_SESSION_ERROR_LIST>
<android.media.MediaDrm$MetricsConstants: java.lang.String CLOSE_SESSION_OK_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String EVENT_KEY_EXPIRED_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String EVENT_KEY_NEEDED_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String EVENT_PROVISION_REQUIRED_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String EVENT_SESSION_RECLAIMED_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String EVENT_VENDOR_DEFINED_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String GET_DEVICE_UNIQUE_ID_ERROR_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String GET_DEVICE_UNIQUE_ID_ERROR_LIST>
<android.media.MediaDrm$MetricsConstants: java.lang.String GET_DEVICE_UNIQUE_ID_OK_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String GET_KEY_REQUEST_ERROR_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String GET_KEY_REQUEST_ERROR_LIST>
<android.media.MediaDrm$MetricsConstants: java.lang.String GET_KEY_REQUEST_OK_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String GET_KEY_REQUEST_OK_TIME_MICROS>
<android.media.MediaDrm$MetricsConstants: java.lang.String GET_PROVISION_REQUEST_ERROR_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String GET_PROVISION_REQUEST_ERROR_LIST>
<android.media.MediaDrm$MetricsConstants: java.lang.String GET_PROVISION_REQUEST_OK_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String KEY_STATUS_EXPIRED_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String KEY_STATUS_INTERNAL_ERROR_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String KEY_STATUS_OUTPUT_NOT_ALLOWED_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String KEY_STATUS_PENDING_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String KEY_STATUS_USABLE_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String OPEN_SESSION_ERROR_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String OPEN_SESSION_ERROR_LIST>
<android.media.MediaDrm$MetricsConstants: java.lang.String OPEN_SESSION_OK_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String PROVIDE_KEY_RESPONSE_ERROR_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String PROVIDE_KEY_RESPONSE_ERROR_LIST>
<android.media.MediaDrm$MetricsConstants: java.lang.String PROVIDE_KEY_RESPONSE_OK_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String PROVIDE_KEY_RESPONSE_OK_TIME_MICROS>
<android.media.MediaDrm$MetricsConstants: java.lang.String PROVIDE_PROVISION_RESPONSE_ERROR_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String PROVIDE_PROVISION_RESPONSE_ERROR_LIST>
<android.media.MediaDrm$MetricsConstants: java.lang.String PROVIDE_PROVISION_RESPONSE_OK_COUNT>
<android.media.MediaDrm$MetricsConstants: java.lang.String SESSION_END_TIMES_MS>
<android.media.MediaDrm$MetricsConstants: java.lang.String SESSION_START_TIMES_MS>
android.media.MediaDrm$OnEventListener
<android.media.MediaDrm$OnEventListener: void onEvent(android.media.MediaDrm,byte[],int,int,byte[])>
android.media.MediaDrm$OnExpirationUpdateListener
<android.media.MediaDrm$OnExpirationUpdateListener: void onExpirationUpdate(android.media.MediaDrm,byte[],long)>
android.media.MediaDrm$OnKeyStatusChangeListener
<android.media.MediaDrm$OnKeyStatusChangeListener: void onKeyStatusChange(android.media.MediaDrm,byte[],java.util.List,boolean)>
android.media.MediaDrm$OnSessionLostStateListener
<android.media.MediaDrm$OnSessionLostStateListener: void onSessionLostState(android.media.MediaDrm,byte[])>
android.media.MediaDrm$PlaybackComponent
<android.media.MediaDrm$PlaybackComponent: android.media.metrics.LogSessionId getLogSessionId()>
<android.media.MediaDrm$PlaybackComponent: void setLogSessionId(android.media.metrics.LogSessionId)>
android.media.MediaDrm$ProvisionRequest
<android.media.MediaDrm$ProvisionRequest: byte[] getData()>
<android.media.MediaDrm$ProvisionRequest: java.lang.String getDefaultUrl()>
android.media.MediaDrm$SecurityLevel
android.media.MediaDrm$SessionException
<android.media.MediaDrm$SessionException: void <init>(int,java.lang.String)>
<android.media.MediaDrm$SessionException: int getErrorCode()>
<android.media.MediaDrm$SessionException: boolean isTransient()>
<android.media.MediaDrm$SessionException: int ERROR_RESOURCE_CONTENTION>
<android.media.MediaDrm$SessionException: int ERROR_UNKNOWN>
android.media.MediaDrmException
<android.media.MediaDrmException: void <init>(java.lang.String)>
android.media.MediaDrmResetException
<android.media.MediaDrmResetException: void <init>(java.lang.String)>
android.media.MediaExtractor
<android.media.MediaExtractor: void <init>()>
<android.media.MediaExtractor: boolean advance()>
<android.media.MediaExtractor: void finalize()>
<android.media.MediaExtractor: java.util.List getAudioPresentations(int)>
<android.media.MediaExtractor: long getCachedDuration()>
<android.media.MediaExtractor: android.media.MediaExtractor$CasInfo getCasInfo(int)>
<android.media.MediaExtractor: android.media.DrmInitData getDrmInitData()>
<android.media.MediaExtractor: android.media.metrics.LogSessionId getLogSessionId()>
<android.media.MediaExtractor: android.os.PersistableBundle getMetrics()>
<android.media.MediaExtractor: java.util.Map getPsshInfo()>
<android.media.MediaExtractor: boolean getSampleCryptoInfo(android.media.MediaCodec$CryptoInfo)>
<android.media.MediaExtractor: int getSampleFlags()>
<android.media.MediaExtractor: long getSampleSize()>
<android.media.MediaExtractor: long getSampleTime()>
<android.media.MediaExtractor: int getSampleTrackIndex()>
<android.media.MediaExtractor: int getTrackCount()>
<android.media.MediaExtractor: android.media.MediaFormat getTrackFormat(int)>
<android.media.MediaExtractor: boolean hasCacheReachedEndOfStream()>
<android.media.MediaExtractor: int readSampleData(java.nio.ByteBuffer,int)>
<android.media.MediaExtractor: void release()>
<android.media.MediaExtractor: void seekTo(long,int)>
<android.media.MediaExtractor: void selectTrack(int)>
<android.media.MediaExtractor: void setDataSource(android.media.MediaDataSource)>
<android.media.MediaExtractor: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)>
<android.media.MediaExtractor: void setDataSource(java.lang.String,java.util.Map)>
<android.media.MediaExtractor: void setDataSource(java.lang.String)>
<android.media.MediaExtractor: void setDataSource(android.content.res.AssetFileDescriptor)>
<android.media.MediaExtractor: void setDataSource(java.io.FileDescriptor)>
<android.media.MediaExtractor: void setDataSource(java.io.FileDescriptor,long,long)>
<android.media.MediaExtractor: void setLogSessionId(android.media.metrics.LogSessionId)>
<android.media.MediaExtractor: void setMediaCas(android.media.MediaCas)>
<android.media.MediaExtractor: void unselectTrack(int)>
<android.media.MediaExtractor: int SAMPLE_FLAG_ENCRYPTED>
<android.media.MediaExtractor: int SAMPLE_FLAG_PARTIAL_FRAME>
<android.media.MediaExtractor: int SAMPLE_FLAG_SYNC>
<android.media.MediaExtractor: int SEEK_TO_CLOSEST_SYNC>
<android.media.MediaExtractor: int SEEK_TO_NEXT_SYNC>
<android.media.MediaExtractor: int SEEK_TO_PREVIOUS_SYNC>
android.media.MediaExtractor$CasInfo
<android.media.MediaExtractor$CasInfo: byte[] getPrivateData()>
<android.media.MediaExtractor$CasInfo: android.media.MediaCas$Session getSession()>
<android.media.MediaExtractor$CasInfo: int getSystemId()>
android.media.MediaExtractor$MetricsConstants
<android.media.MediaExtractor$MetricsConstants: java.lang.String FORMAT>
<android.media.MediaExtractor$MetricsConstants: java.lang.String MIME_TYPE>
<android.media.MediaExtractor$MetricsConstants: java.lang.String TRACKS>
android.media.MediaFormat
<android.media.MediaFormat: void <init>()>
<android.media.MediaFormat: void <init>(android.media.MediaFormat)>
<android.media.MediaFormat: boolean containsFeature(java.lang.String)>
<android.media.MediaFormat: boolean containsKey(java.lang.String)>
<android.media.MediaFormat: android.media.MediaFormat createAudioFormat(java.lang.String,int,int)>
<android.media.MediaFormat: android.media.MediaFormat createSubtitleFormat(java.lang.String,java.lang.String)>
<android.media.MediaFormat: android.media.MediaFormat createVideoFormat(java.lang.String,int,int)>
<android.media.MediaFormat: java.nio.ByteBuffer getByteBuffer(java.lang.String)>
<android.media.MediaFormat: java.nio.ByteBuffer getByteBuffer(java.lang.String,java.nio.ByteBuffer)>
<android.media.MediaFormat: boolean getFeatureEnabled(java.lang.String)>
<android.media.MediaFormat: java.util.Set getFeatures()>
<android.media.MediaFormat: float getFloat(java.lang.String)>
<android.media.MediaFormat: float getFloat(java.lang.String,float)>
<android.media.MediaFormat: int getInteger(java.lang.String)>
<android.media.MediaFormat: int getInteger(java.lang.String,int)>
<android.media.MediaFormat: java.util.Set getKeys()>
<android.media.MediaFormat: long getLong(java.lang.String)>
<android.media.MediaFormat: long getLong(java.lang.String,long)>
<android.media.MediaFormat: java.lang.Number getNumber(java.lang.String)>
<android.media.MediaFormat: java.lang.Number getNumber(java.lang.String,java.lang.Number)>
<android.media.MediaFormat: java.lang.String getString(java.lang.String)>
<android.media.MediaFormat: java.lang.String getString(java.lang.String,java.lang.String)>
<android.media.MediaFormat: int getValueTypeForKey(java.lang.String)>
<android.media.MediaFormat: void removeFeature(java.lang.String)>
<android.media.MediaFormat: void removeKey(java.lang.String)>
<android.media.MediaFormat: void setByteBuffer(java.lang.String,java.nio.ByteBuffer)>
<android.media.MediaFormat: void setFeatureEnabled(java.lang.String,boolean)>
<android.media.MediaFormat: void setFloat(java.lang.String,float)>
<android.media.MediaFormat: void setInteger(java.lang.String,int)>
<android.media.MediaFormat: void setLong(java.lang.String,long)>
<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>
<android.media.MediaFormat: int COLOR_RANGE_FULL>
<android.media.MediaFormat: int COLOR_RANGE_LIMITED>
<android.media.MediaFormat: int COLOR_STANDARD_BT2020>
<android.media.MediaFormat: int COLOR_STANDARD_BT601_NTSC>
<android.media.MediaFormat: int COLOR_STANDARD_BT601_PAL>
<android.media.MediaFormat: int COLOR_STANDARD_BT709>
<android.media.MediaFormat: int COLOR_TRANSFER_HLG>
<android.media.MediaFormat: int COLOR_TRANSFER_LINEAR>
<android.media.MediaFormat: int COLOR_TRANSFER_SDR_VIDEO>
<android.media.MediaFormat: int COLOR_TRANSFER_ST2084>
<android.media.MediaFormat: java.lang.String KEY_AAC_DRC_ALBUM_MODE>
<android.media.MediaFormat: java.lang.String KEY_AAC_DRC_ATTENUATION_FACTOR>
<android.media.MediaFormat: java.lang.String KEY_AAC_DRC_BOOST_FACTOR>
<android.media.MediaFormat: java.lang.String KEY_AAC_DRC_EFFECT_TYPE>
<android.media.MediaFormat: java.lang.String KEY_AAC_DRC_HEAVY_COMPRESSION>
<android.media.MediaFormat: java.lang.String KEY_AAC_DRC_OUTPUT_LOUDNESS>
<android.media.MediaFormat: java.lang.String KEY_AAC_DRC_TARGET_REFERENCE_LEVEL>
<android.media.MediaFormat: java.lang.String KEY_AAC_ENCODED_TARGET_LEVEL>
<android.media.MediaFormat: java.lang.String KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT>
<android.media.MediaFormat: java.lang.String KEY_AAC_PROFILE>
<android.media.MediaFormat: java.lang.String KEY_AAC_SBR_MODE>
<android.media.MediaFormat: java.lang.String KEY_ALLOW_FRAME_DROP>
<android.media.MediaFormat: java.lang.String KEY_AUDIO_SESSION_ID>
<android.media.MediaFormat: java.lang.String KEY_BITRATE_MODE>
<android.media.MediaFormat: java.lang.String KEY_BIT_RATE>
<android.media.MediaFormat: java.lang.String KEY_CAPTION_SERVICE_NUMBER>
<android.media.MediaFormat: java.lang.String KEY_CAPTURE_RATE>
<android.media.MediaFormat: java.lang.String KEY_CHANNEL_COUNT>
<android.media.MediaFormat: java.lang.String KEY_CHANNEL_MASK>
<android.media.MediaFormat: java.lang.String KEY_CODECS_STRING>
<android.media.MediaFormat: java.lang.String KEY_COLOR_FORMAT>
<android.media.MediaFormat: java.lang.String KEY_COLOR_RANGE>
<android.media.MediaFormat: java.lang.String KEY_COLOR_STANDARD>
<android.media.MediaFormat: java.lang.String KEY_COLOR_TRANSFER>
<android.media.MediaFormat: java.lang.String KEY_COLOR_TRANSFER_REQUEST>
<android.media.MediaFormat: java.lang.String KEY_COMPLEXITY>
<android.media.MediaFormat: java.lang.String KEY_CREATE_INPUT_SURFACE_SUSPENDED>
<android.media.MediaFormat: java.lang.String KEY_CROP_BOTTOM>
<android.media.MediaFormat: java.lang.String KEY_CROP_LEFT>
<android.media.MediaFormat: java.lang.String KEY_CROP_RIGHT>
<android.media.MediaFormat: java.lang.String KEY_CROP_TOP>
<android.media.MediaFormat: java.lang.String KEY_DURATION>
<android.media.MediaFormat: java.lang.String KEY_ENCODER_DELAY>
<android.media.MediaFormat: java.lang.String KEY_ENCODER_PADDING>
<android.media.MediaFormat: java.lang.String KEY_FLAC_COMPRESSION_LEVEL>
<android.media.MediaFormat: java.lang.String KEY_FRAME_RATE>
<android.media.MediaFormat: java.lang.String KEY_GRID_COLUMNS>
<android.media.MediaFormat: java.lang.String KEY_GRID_ROWS>
<android.media.MediaFormat: java.lang.String KEY_HAPTIC_CHANNEL_COUNT>
<android.media.MediaFormat: java.lang.String KEY_HARDWARE_AV_SYNC_ID>
<android.media.MediaFormat: java.lang.String KEY_HDR10_PLUS_INFO>
<android.media.MediaFormat: java.lang.String KEY_HDR_STATIC_INFO>
<android.media.MediaFormat: java.lang.String KEY_HEIGHT>
<android.media.MediaFormat: java.lang.String KEY_INTRA_REFRESH_PERIOD>
<android.media.MediaFormat: java.lang.String KEY_IS_ADTS>
<android.media.MediaFormat: java.lang.String KEY_IS_AUTOSELECT>
<android.media.MediaFormat: java.lang.String KEY_IS_DEFAULT>
<android.media.MediaFormat: java.lang.String KEY_IS_FORCED_SUBTITLE>
<android.media.MediaFormat: java.lang.String KEY_I_FRAME_INTERVAL>
<android.media.MediaFormat: java.lang.String KEY_LANGUAGE>
<android.media.MediaFormat: java.lang.String KEY_LATENCY>
<android.media.MediaFormat: java.lang.String KEY_LEVEL>
<android.media.MediaFormat: java.lang.String KEY_LOW_LATENCY>
<android.media.MediaFormat: java.lang.String KEY_MAX_B_FRAMES>
<android.media.MediaFormat: java.lang.String KEY_MAX_FPS_TO_ENCODER>
<android.media.MediaFormat: java.lang.String KEY_MAX_HEIGHT>
<android.media.MediaFormat: java.lang.String KEY_MAX_INPUT_SIZE>
<android.media.MediaFormat: java.lang.String KEY_MAX_OUTPUT_CHANNEL_COUNT>
<android.media.MediaFormat: java.lang.String KEY_MAX_PTS_GAP_TO_ENCODER>
<android.media.MediaFormat: java.lang.String KEY_MAX_WIDTH>
<android.media.MediaFormat: java.lang.String KEY_MIME>
<android.media.MediaFormat: java.lang.String KEY_MPEGH_COMPATIBLE_SETS>
<android.media.MediaFormat: java.lang.String KEY_MPEGH_PROFILE_LEVEL_INDICATION>
<android.media.MediaFormat: java.lang.String KEY_MPEGH_REFERENCE_CHANNEL_LAYOUT>
<android.media.MediaFormat: java.lang.String KEY_OPERATING_RATE>
<android.media.MediaFormat: java.lang.String KEY_OUTPUT_REORDER_DEPTH>
<android.media.MediaFormat: java.lang.String KEY_PCM_ENCODING>
<android.media.MediaFormat: java.lang.String KEY_PICTURE_TYPE>
<android.media.MediaFormat: java.lang.String KEY_PIXEL_ASPECT_RATIO_HEIGHT>
<android.media.MediaFormat: java.lang.String KEY_PIXEL_ASPECT_RATIO_WIDTH>
<android.media.MediaFormat: java.lang.String KEY_PREPEND_HEADER_TO_SYNC_FRAMES>
<android.media.MediaFormat: java.lang.String KEY_PRIORITY>
<android.media.MediaFormat: java.lang.String KEY_PROFILE>
<android.media.MediaFormat: java.lang.String KEY_PUSH_BLANK_BUFFERS_ON_STOP>
<android.media.MediaFormat: java.lang.String KEY_QUALITY>
<android.media.MediaFormat: java.lang.String KEY_REPEAT_PREVIOUS_FRAME_AFTER>
<android.media.MediaFormat: java.lang.String KEY_ROTATION>
<android.media.MediaFormat: java.lang.String KEY_SAMPLE_RATE>
<android.media.MediaFormat: java.lang.String KEY_SLICE_HEIGHT>
<android.media.MediaFormat: java.lang.String KEY_SLOW_MOTION_MARKERS>
<android.media.MediaFormat: java.lang.String KEY_STRIDE>
<android.media.MediaFormat: java.lang.String KEY_TEMPORAL_LAYERING>
<android.media.MediaFormat: java.lang.String KEY_TILE_HEIGHT>
<android.media.MediaFormat: java.lang.String KEY_TILE_WIDTH>
<android.media.MediaFormat: java.lang.String KEY_TRACK_ID>
<android.media.MediaFormat: java.lang.String KEY_VIDEO_ENCODING_STATISTICS_LEVEL>
<android.media.MediaFormat: java.lang.String KEY_VIDEO_QP_AVERAGE>
<android.media.MediaFormat: java.lang.String KEY_VIDEO_QP_B_MAX>
<android.media.MediaFormat: java.lang.String KEY_VIDEO_QP_B_MIN>
<android.media.MediaFormat: java.lang.String KEY_VIDEO_QP_I_MAX>
<android.media.MediaFormat: java.lang.String KEY_VIDEO_QP_I_MIN>
<android.media.MediaFormat: java.lang.String KEY_VIDEO_QP_MAX>
<android.media.MediaFormat: java.lang.String KEY_VIDEO_QP_MIN>
<android.media.MediaFormat: java.lang.String KEY_VIDEO_QP_P_MAX>
<android.media.MediaFormat: java.lang.String KEY_VIDEO_QP_P_MIN>
<android.media.MediaFormat: java.lang.String KEY_WIDTH>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AAC>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AAC_ELD>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AAC_HE_V1>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AAC_HE_V2>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AAC_LC>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AAC_XHE>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AC3>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AC4>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AMR_NB>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AMR_WB>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_DOLBY_MAT>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_DOLBY_TRUEHD>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_DRA>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_DTS>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_DTS_HD>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_DTS_UHD>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_EAC3>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_EAC3_JOC>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_FLAC>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_G711_ALAW>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_G711_MLAW>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_IEC61937>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_MPEG>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_MPEGH_BL_L3>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_MPEGH_BL_L4>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_MPEGH_LC_L3>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_MPEGH_LC_L4>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_MPEGH_MHA1>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_MPEGH_MHM1>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_MSGSM>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_OPUS>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_QCELP>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_RAW>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_SCRAMBLED>
<android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_VORBIS>
<android.media.MediaFormat: java.lang.String MIMETYPE_IMAGE_ANDROID_HEIC>
<android.media.MediaFormat: java.lang.String MIMETYPE_TEXT_CEA_608>
<android.media.MediaFormat: java.lang.String MIMETYPE_TEXT_CEA_708>
<android.media.MediaFormat: java.lang.String MIMETYPE_TEXT_SUBRIP>
<android.media.MediaFormat: java.lang.String MIMETYPE_TEXT_VTT>
<android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_AV1>
<android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_AVC>
<android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_DOLBY_VISION>
<android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_H263>
<android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_HEVC>
<android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_MPEG2>
<android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_MPEG4>
<android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_RAW>
<android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_SCRAMBLED>
<android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_VP8>
<android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_VP9>
<android.media.MediaFormat: int PICTURE_TYPE_B>
<android.media.MediaFormat: int PICTURE_TYPE_I>
<android.media.MediaFormat: int PICTURE_TYPE_P>
<android.media.MediaFormat: int PICTURE_TYPE_UNKNOWN>
<android.media.MediaFormat: int TYPE_BYTE_BUFFER>
<android.media.MediaFormat: int TYPE_FLOAT>
<android.media.MediaFormat: int TYPE_INTEGER>
<android.media.MediaFormat: int TYPE_LONG>
<android.media.MediaFormat: int TYPE_NULL>
<android.media.MediaFormat: int TYPE_STRING>
<android.media.MediaFormat: int VIDEO_ENCODING_STATISTICS_LEVEL_1>
<android.media.MediaFormat: int VIDEO_ENCODING_STATISTICS_LEVEL_NONE>
android.media.MediaMetadata
<android.media.MediaMetadata: boolean containsKey(java.lang.String)>
<android.media.MediaMetadata: int describeContents()>
<android.media.MediaMetadata: android.graphics.Bitmap getBitmap(java.lang.String)>
<android.media.MediaMetadata: int getBitmapDimensionLimit()>
<android.media.MediaMetadata: android.media.MediaDescription getDescription()>
<android.media.MediaMetadata: long getLong(java.lang.String)>
<android.media.MediaMetadata: android.media.Rating getRating(java.lang.String)>
<android.media.MediaMetadata: java.lang.String getString(java.lang.String)>
<android.media.MediaMetadata: java.lang.CharSequence getText(java.lang.String)>
<android.media.MediaMetadata: java.util.Set keySet()>
<android.media.MediaMetadata: int size()>
<android.media.MediaMetadata: void writeToParcel(android.os.Parcel,int)>
<android.media.MediaMetadata: android.os.Parcelable$Creator CREATOR>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_ALBUM>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_ALBUM_ART>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_ALBUM_ARTIST>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_ALBUM_ART_URI>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_ART>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_ARTIST>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_ART_URI>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_AUTHOR>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_BT_FOLDER_TYPE>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_COMPILATION>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_COMPOSER>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_DATE>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_DISC_NUMBER>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_DISPLAY_DESCRIPTION>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_DISPLAY_ICON>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_DISPLAY_ICON_URI>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_DISPLAY_SUBTITLE>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_DISPLAY_TITLE>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_DURATION>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_GENRE>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_MEDIA_ID>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_MEDIA_URI>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_NUM_TRACKS>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_RATING>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_TITLE>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_TRACK_NUMBER>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_USER_RATING>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_WRITER>
<android.media.MediaMetadata: java.lang.String METADATA_KEY_YEAR>
android.media.MediaMetadata$Builder
<android.media.MediaMetadata$Builder: void <init>()>
<android.media.MediaMetadata$Builder: void <init>(android.media.MediaMetadata)>
<android.media.MediaMetadata$Builder: android.media.MediaMetadata build()>
<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putBitmap(java.lang.String,android.graphics.Bitmap)>
<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putLong(java.lang.String,long)>
<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putRating(java.lang.String,android.media.Rating)>
<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putString(java.lang.String,java.lang.String)>
<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putText(java.lang.String,java.lang.CharSequence)>
<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder setBitmapDimensionLimit(int)>
android.media.MediaMetadataEditor
<android.media.MediaMetadataEditor: void addEditableKey(int)>
<android.media.MediaMetadataEditor: void apply()>
<android.media.MediaMetadataEditor: void clear()>
<android.media.MediaMetadataEditor: android.graphics.Bitmap getBitmap(int,android.graphics.Bitmap)>
<android.media.MediaMetadataEditor: int[] getEditableKeys()>
<android.media.MediaMetadataEditor: long getLong(int,long)>
<android.media.MediaMetadataEditor: java.lang.Object getObject(int,java.lang.Object)>
<android.media.MediaMetadataEditor: java.lang.String getString(int,java.lang.String)>
<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putBitmap(int,android.graphics.Bitmap)>
<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putLong(int,long)>
<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putObject(int,java.lang.Object)>
<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putString(int,java.lang.String)>
<android.media.MediaMetadataEditor: void removeEditableKeys()>
<android.media.MediaMetadataEditor: int BITMAP_KEY_ARTWORK>
<android.media.MediaMetadataEditor: int RATING_KEY_BY_OTHERS>
<android.media.MediaMetadataEditor: int RATING_KEY_BY_USER>
android.media.MediaMetadataRetriever
<android.media.MediaMetadataRetriever: void <init>()>
<android.media.MediaMetadataRetriever: void close()>
<android.media.MediaMetadataRetriever: java.lang.String extractMetadata(int)>
<android.media.MediaMetadataRetriever: byte[] getEmbeddedPicture()>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtIndex(int,android.media.MediaMetadataRetriever$BitmapParams)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtIndex(int)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long,int)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long,int,android.media.MediaMetadataRetriever$BitmapParams)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime()>
<android.media.MediaMetadataRetriever: java.util.List getFramesAtIndex(int,int,android.media.MediaMetadataRetriever$BitmapParams)>
<android.media.MediaMetadataRetriever: java.util.List getFramesAtIndex(int,int)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getImageAtIndex(int,android.media.MediaMetadataRetriever$BitmapParams)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getImageAtIndex(int)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getPrimaryImage(android.media.MediaMetadataRetriever$BitmapParams)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getPrimaryImage()>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getScaledFrameAtTime(long,int,int,int)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getScaledFrameAtTime(long,int,int,int,android.media.MediaMetadataRetriever$BitmapParams)>
<android.media.MediaMetadataRetriever: void release()>
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String)>
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String,java.util.Map)>
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor,long,long)>
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor)>
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>
<android.media.MediaMetadataRetriever: void setDataSource(android.media.MediaDataSource)>
<android.media.MediaMetadataRetriever: int METADATA_KEY_ALBUM>
<android.media.MediaMetadataRetriever: int METADATA_KEY_ALBUMARTIST>
<android.media.MediaMetadataRetriever: int METADATA_KEY_ARTIST>
<android.media.MediaMetadataRetriever: int METADATA_KEY_AUTHOR>
<android.media.MediaMetadataRetriever: int METADATA_KEY_BITRATE>
<android.media.MediaMetadataRetriever: int METADATA_KEY_BITS_PER_SAMPLE>
<android.media.MediaMetadataRetriever: int METADATA_KEY_CAPTURE_FRAMERATE>
<android.media.MediaMetadataRetriever: int METADATA_KEY_CD_TRACK_NUMBER>
<android.media.MediaMetadataRetriever: int METADATA_KEY_COLOR_RANGE>
<android.media.MediaMetadataRetriever: int METADATA_KEY_COLOR_STANDARD>
<android.media.MediaMetadataRetriever: int METADATA_KEY_COLOR_TRANSFER>
<android.media.MediaMetadataRetriever: int METADATA_KEY_COMPILATION>
<android.media.MediaMetadataRetriever: int METADATA_KEY_COMPOSER>
<android.media.MediaMetadataRetriever: int METADATA_KEY_DATE>
<android.media.MediaMetadataRetriever: int METADATA_KEY_DISC_NUMBER>
<android.media.MediaMetadataRetriever: int METADATA_KEY_DURATION>
<android.media.MediaMetadataRetriever: int METADATA_KEY_EXIF_LENGTH>
<android.media.MediaMetadataRetriever: int METADATA_KEY_EXIF_OFFSET>
<android.media.MediaMetadataRetriever: int METADATA_KEY_GENRE>
<android.media.MediaMetadataRetriever: int METADATA_KEY_HAS_AUDIO>
<android.media.MediaMetadataRetriever: int METADATA_KEY_HAS_IMAGE>
<android.media.MediaMetadataRetriever: int METADATA_KEY_HAS_VIDEO>
<android.media.MediaMetadataRetriever: int METADATA_KEY_IMAGE_COUNT>
<android.media.MediaMetadataRetriever: int METADATA_KEY_IMAGE_HEIGHT>
<android.media.MediaMetadataRetriever: int METADATA_KEY_IMAGE_PRIMARY>
<android.media.MediaMetadataRetriever: int METADATA_KEY_IMAGE_ROTATION>
<android.media.MediaMetadataRetriever: int METADATA_KEY_IMAGE_WIDTH>
<android.media.MediaMetadataRetriever: int METADATA_KEY_LOCATION>
<android.media.MediaMetadataRetriever: int METADATA_KEY_MIMETYPE>
<android.media.MediaMetadataRetriever: int METADATA_KEY_NUM_TRACKS>
<android.media.MediaMetadataRetriever: int METADATA_KEY_SAMPLERATE>
<android.media.MediaMetadataRetriever: int METADATA_KEY_TITLE>
<android.media.MediaMetadataRetriever: int METADATA_KEY_VIDEO_FRAME_COUNT>
<android.media.MediaMetadataRetriever: int METADATA_KEY_VIDEO_HEIGHT>
<android.media.MediaMetadataRetriever: int METADATA_KEY_VIDEO_ROTATION>
<android.media.MediaMetadataRetriever: int METADATA_KEY_VIDEO_WIDTH>
<android.media.MediaMetadataRetriever: int METADATA_KEY_WRITER>
<android.media.MediaMetadataRetriever: int METADATA_KEY_XMP_LENGTH>
<android.media.MediaMetadataRetriever: int METADATA_KEY_XMP_OFFSET>
<android.media.MediaMetadataRetriever: int METADATA_KEY_YEAR>
<android.media.MediaMetadataRetriever: int OPTION_CLOSEST>
<android.media.MediaMetadataRetriever: int OPTION_CLOSEST_SYNC>
<android.media.MediaMetadataRetriever: int OPTION_NEXT_SYNC>
<android.media.MediaMetadataRetriever: int OPTION_PREVIOUS_SYNC>
android.media.MediaMetadataRetriever$BitmapParams
<android.media.MediaMetadataRetriever$BitmapParams: void <init>()>
<android.media.MediaMetadataRetriever$BitmapParams: android.graphics.Bitmap$Config getActualConfig()>
<android.media.MediaMetadataRetriever$BitmapParams: android.graphics.Bitmap$Config getPreferredConfig()>
<android.media.MediaMetadataRetriever$BitmapParams: void setPreferredConfig(android.graphics.Bitmap$Config)>
android.media.MediaMuxer
<android.media.MediaMuxer: void <init>(java.lang.String,int)>
<android.media.MediaMuxer: void <init>(java.io.FileDescriptor,int)>
<android.media.MediaMuxer: int addTrack(android.media.MediaFormat)>
<android.media.MediaMuxer: void release()>
<android.media.MediaMuxer: void setLocation(float,float)>
<android.media.MediaMuxer: void setOrientationHint(int)>
<android.media.MediaMuxer: void start()>
<android.media.MediaMuxer: void stop()>
<android.media.MediaMuxer: void writeSampleData(int,java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo)>
android.media.MediaMuxer$OutputFormat
<android.media.MediaMuxer$OutputFormat: int MUXER_OUTPUT_3GPP>
<android.media.MediaMuxer$OutputFormat: int MUXER_OUTPUT_HEIF>
<android.media.MediaMuxer$OutputFormat: int MUXER_OUTPUT_MPEG_4>
<android.media.MediaMuxer$OutputFormat: int MUXER_OUTPUT_OGG>
<android.media.MediaMuxer$OutputFormat: int MUXER_OUTPUT_WEBM>
android.media.MediaPlayer
<android.media.MediaPlayer: void <init>()>
<android.media.MediaPlayer: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>
<android.media.MediaPlayer: void addTimedTextSource(java.lang.String,java.lang.String)>
<android.media.MediaPlayer: void addTimedTextSource(android.content.Context,android.net.Uri,java.lang.String)>
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)>
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)>
<android.media.MediaPlayer: void attachAuxEffect(int)>
<android.media.MediaPlayer: void clearOnMediaTimeDiscontinuityListener()>
<android.media.MediaPlayer: void clearOnSubtitleDataListener()>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder,android.media.AudioAttributes,int)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int,android.media.AudioAttributes,int)>
<android.media.MediaPlayer: android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper$Configuration)>
<android.media.MediaPlayer: void deselectTrack(int)>
<android.media.MediaPlayer: void finalize()>
<android.media.MediaPlayer: int getAudioSessionId()>
<android.media.MediaPlayer: int getCurrentPosition()>
<android.media.MediaPlayer: android.media.MediaPlayer$DrmInfo getDrmInfo()>
<android.media.MediaPlayer: java.lang.String getDrmPropertyString(java.lang.String)>
<android.media.MediaPlayer: int getDuration()>
<android.media.MediaPlayer: android.media.MediaDrm$KeyRequest getKeyRequest(byte[],byte[],java.lang.String,int,java.util.Map)>
<android.media.MediaPlayer: android.os.PersistableBundle getMetrics()>
<android.media.MediaPlayer: android.media.PlaybackParams getPlaybackParams()>
<android.media.MediaPlayer: android.media.AudioDeviceInfo getPreferredDevice()>
<android.media.MediaPlayer: android.media.AudioDeviceInfo getRoutedDevice()>
<android.media.MediaPlayer: int getSelectedTrack(int)>
<android.media.MediaPlayer: android.media.SyncParams getSyncParams()>
<android.media.MediaPlayer: android.media.MediaTimestamp getTimestamp()>
<android.media.MediaPlayer: android.media.MediaPlayer$TrackInfo[] getTrackInfo()>
<android.media.MediaPlayer: int getVideoHeight()>
<android.media.MediaPlayer: int getVideoWidth()>
<android.media.MediaPlayer: boolean isLooping()>
<android.media.MediaPlayer: boolean isPlaying()>
<android.media.MediaPlayer: void pause()>
<android.media.MediaPlayer: void prepare()>
<android.media.MediaPlayer: void prepareAsync()>
<android.media.MediaPlayer: void prepareDrm(java.util.UUID)>
<android.media.MediaPlayer: byte[] provideKeyResponse(byte[],byte[])>
<android.media.MediaPlayer: void release()>
<android.media.MediaPlayer: void releaseDrm()>
<android.media.MediaPlayer: void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)>
<android.media.MediaPlayer: void reset()>
<android.media.MediaPlayer: void restoreKeys(byte[])>
<android.media.MediaPlayer: void seekTo(long,int)>
<android.media.MediaPlayer: void seekTo(int)>
<android.media.MediaPlayer: void selectTrack(int)>
<android.media.MediaPlayer: void setAudioAttributes(android.media.AudioAttributes)>
<android.media.MediaPlayer: void setAudioSessionId(int)>
<android.media.MediaPlayer: void setAudioStreamType(int)>
<android.media.MediaPlayer: void setAuxEffectSendLevel(float)>
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map,java.util.List)>
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)>
<android.media.MediaPlayer: void setDataSource(java.lang.String)>
<android.media.MediaPlayer: void setDataSource(android.content.res.AssetFileDescriptor)>
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>
<android.media.MediaPlayer: void setDataSource(android.media.MediaDataSource)>
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>
<android.media.MediaPlayer: void setDrmPropertyString(java.lang.String,java.lang.String)>
<android.media.MediaPlayer: void setLooping(boolean)>
<android.media.MediaPlayer: void setNextMediaPlayer(android.media.MediaPlayer)>
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>
<android.media.MediaPlayer: void setOnDrmConfigHelper(android.media.MediaPlayer$OnDrmConfigHelper)>
<android.media.MediaPlayer: void setOnDrmInfoListener(android.media.MediaPlayer$OnDrmInfoListener)>
<android.media.MediaPlayer: void setOnDrmInfoListener(android.media.MediaPlayer$OnDrmInfoListener,android.os.Handler)>
<android.media.MediaPlayer: void setOnDrmPreparedListener(android.media.MediaPlayer$OnDrmPreparedListener)>
<android.media.MediaPlayer: void setOnDrmPreparedListener(android.media.MediaPlayer$OnDrmPreparedListener,android.os.Handler)>
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>
<android.media.MediaPlayer: void setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer$OnMediaTimeDiscontinuityListener,android.os.Handler)>
<android.media.MediaPlayer: void setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer$OnMediaTimeDiscontinuityListener)>
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>
<android.media.MediaPlayer: void setOnSeekCompleteListener(android.media.MediaPlayer$OnSeekCompleteListener)>
<android.media.MediaPlayer: void setOnSubtitleDataListener(android.media.MediaPlayer$OnSubtitleDataListener,android.os.Handler)>
<android.media.MediaPlayer: void setOnSubtitleDataListener(android.media.MediaPlayer$OnSubtitleDataListener)>
<android.media.MediaPlayer: void setOnTimedMetaDataAvailableListener(android.media.MediaPlayer$OnTimedMetaDataAvailableListener)>
<android.media.MediaPlayer: void setOnTimedTextListener(android.media.MediaPlayer$OnTimedTextListener)>
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>
<android.media.MediaPlayer: void setPlaybackParams(android.media.PlaybackParams)>
<android.media.MediaPlayer: boolean setPreferredDevice(android.media.AudioDeviceInfo)>
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>
<android.media.MediaPlayer: void setSurface(android.view.Surface)>
<android.media.MediaPlayer: void setSyncParams(android.media.SyncParams)>
<android.media.MediaPlayer: void setVideoScalingMode(int)>
<android.media.MediaPlayer: void setVolume(float,float)>
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)>
<android.media.MediaPlayer: void start()>
<android.media.MediaPlayer: void stop()>
<android.media.MediaPlayer: int MEDIA_ERROR_IO>
<android.media.MediaPlayer: int MEDIA_ERROR_MALFORMED>
<android.media.MediaPlayer: int MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK>
<android.media.MediaPlayer: int MEDIA_ERROR_SERVER_DIED>
<android.media.MediaPlayer: int MEDIA_ERROR_TIMED_OUT>
<android.media.MediaPlayer: int MEDIA_ERROR_UNKNOWN>
<android.media.MediaPlayer: int MEDIA_ERROR_UNSUPPORTED>
<android.media.MediaPlayer: int MEDIA_INFO_AUDIO_NOT_PLAYING>
<android.media.MediaPlayer: int MEDIA_INFO_BAD_INTERLEAVING>
<android.media.MediaPlayer: int MEDIA_INFO_BUFFERING_END>
<android.media.MediaPlayer: int MEDIA_INFO_BUFFERING_START>
<android.media.MediaPlayer: int MEDIA_INFO_METADATA_UPDATE>
<android.media.MediaPlayer: int MEDIA_INFO_NOT_SEEKABLE>
<android.media.MediaPlayer: int MEDIA_INFO_STARTED_AS_NEXT>
<android.media.MediaPlayer: int MEDIA_INFO_SUBTITLE_TIMED_OUT>
<android.media.MediaPlayer: int MEDIA_INFO_UNKNOWN>
<android.media.MediaPlayer: int MEDIA_INFO_UNSUPPORTED_SUBTITLE>
<android.media.MediaPlayer: int MEDIA_INFO_VIDEO_NOT_PLAYING>
<android.media.MediaPlayer: int MEDIA_INFO_VIDEO_RENDERING_START>
<android.media.MediaPlayer: int MEDIA_INFO_VIDEO_TRACK_LAGGING>
<android.media.MediaPlayer: java.lang.String MEDIA_MIMETYPE_TEXT_SUBRIP>
<android.media.MediaPlayer: int PREPARE_DRM_STATUS_PREPARATION_ERROR>
<android.media.MediaPlayer: int PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR>
<android.media.MediaPlayer: int PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR>
<android.media.MediaPlayer: int PREPARE_DRM_STATUS_SUCCESS>
<android.media.MediaPlayer: int SEEK_CLOSEST>
<android.media.MediaPlayer: int SEEK_CLOSEST_SYNC>
<android.media.MediaPlayer: int SEEK_NEXT_SYNC>
<android.media.MediaPlayer: int SEEK_PREVIOUS_SYNC>
<android.media.MediaPlayer: int VIDEO_SCALING_MODE_SCALE_TO_FIT>
<android.media.MediaPlayer: int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING>
android.media.MediaPlayer$DrmInfo
<android.media.MediaPlayer$DrmInfo: java.util.Map getPssh()>
<android.media.MediaPlayer$DrmInfo: java.util.UUID[] getSupportedSchemes()>
android.media.MediaPlayer$MetricsConstants
<android.media.MediaPlayer$MetricsConstants: java.lang.String CODEC_AUDIO>
<android.media.MediaPlayer$MetricsConstants: java.lang.String CODEC_VIDEO>
<android.media.MediaPlayer$MetricsConstants: java.lang.String DURATION>
<android.media.MediaPlayer$MetricsConstants: java.lang.String ERRORS>
<android.media.MediaPlayer$MetricsConstants: java.lang.String ERROR_CODE>
<android.media.MediaPlayer$MetricsConstants: java.lang.String FRAMES>
<android.media.MediaPlayer$MetricsConstants: java.lang.String FRAMES_DROPPED>
<android.media.MediaPlayer$MetricsConstants: java.lang.String HEIGHT>
<android.media.MediaPlayer$MetricsConstants: java.lang.String MIME_TYPE_AUDIO>
<android.media.MediaPlayer$MetricsConstants: java.lang.String MIME_TYPE_VIDEO>
<android.media.MediaPlayer$MetricsConstants: java.lang.String PLAYING>
<android.media.MediaPlayer$MetricsConstants: java.lang.String WIDTH>
android.media.MediaPlayer$NoDrmSchemeException
<android.media.MediaPlayer$NoDrmSchemeException: void <init>(java.lang.String)>
android.media.MediaPlayer$OnBufferingUpdateListener
<android.media.MediaPlayer$OnBufferingUpdateListener: void onBufferingUpdate(android.media.MediaPlayer,int)>
android.media.MediaPlayer$OnCompletionListener
<android.media.MediaPlayer$OnCompletionListener: void onCompletion(android.media.MediaPlayer)>
android.media.MediaPlayer$OnDrmConfigHelper
<android.media.MediaPlayer$OnDrmConfigHelper: void onDrmConfig(android.media.MediaPlayer)>
android.media.MediaPlayer$OnDrmInfoListener
<android.media.MediaPlayer$OnDrmInfoListener: void onDrmInfo(android.media.MediaPlayer,android.media.MediaPlayer$DrmInfo)>
android.media.MediaPlayer$OnDrmPreparedListener
<android.media.MediaPlayer$OnDrmPreparedListener: void onDrmPrepared(android.media.MediaPlayer,int)>
android.media.MediaPlayer$OnErrorListener
<android.media.MediaPlayer$OnErrorListener: boolean onError(android.media.MediaPlayer,int,int)>
android.media.MediaPlayer$OnInfoListener
<android.media.MediaPlayer$OnInfoListener: boolean onInfo(android.media.MediaPlayer,int,int)>
android.media.MediaPlayer$OnMediaTimeDiscontinuityListener
<android.media.MediaPlayer$OnMediaTimeDiscontinuityListener: void onMediaTimeDiscontinuity(android.media.MediaPlayer,android.media.MediaTimestamp)>
android.media.MediaPlayer$OnPreparedListener
<android.media.MediaPlayer$OnPreparedListener: void onPrepared(android.media.MediaPlayer)>
android.media.MediaPlayer$OnSeekCompleteListener
<android.media.MediaPlayer$OnSeekCompleteListener: void onSeekComplete(android.media.MediaPlayer)>
android.media.MediaPlayer$OnSubtitleDataListener
<android.media.MediaPlayer$OnSubtitleDataListener: void onSubtitleData(android.media.MediaPlayer,android.media.SubtitleData)>
android.media.MediaPlayer$OnTimedMetaDataAvailableListener
<android.media.MediaPlayer$OnTimedMetaDataAvailableListener: void onTimedMetaDataAvailable(android.media.MediaPlayer,android.media.TimedMetaData)>
android.media.MediaPlayer$OnTimedTextListener
<android.media.MediaPlayer$OnTimedTextListener: void onTimedText(android.media.MediaPlayer,android.media.TimedText)>
android.media.MediaPlayer$OnVideoSizeChangedListener
<android.media.MediaPlayer$OnVideoSizeChangedListener: void onVideoSizeChanged(android.media.MediaPlayer,int,int)>
android.media.MediaPlayer$ProvisioningNetworkErrorException
<android.media.MediaPlayer$ProvisioningNetworkErrorException: void <init>(java.lang.String)>
android.media.MediaPlayer$ProvisioningServerErrorException
<android.media.MediaPlayer$ProvisioningServerErrorException: void <init>(java.lang.String)>
android.media.MediaPlayer$TrackInfo
<android.media.MediaPlayer$TrackInfo: int describeContents()>
<android.media.MediaPlayer$TrackInfo: android.media.MediaFormat getFormat()>
<android.media.MediaPlayer$TrackInfo: java.lang.String getLanguage()>
<android.media.MediaPlayer$TrackInfo: int getTrackType()>
<android.media.MediaPlayer$TrackInfo: void writeToParcel(android.os.Parcel,int)>
<android.media.MediaPlayer$TrackInfo: int MEDIA_TRACK_TYPE_AUDIO>
<android.media.MediaPlayer$TrackInfo: int MEDIA_TRACK_TYPE_METADATA>
<android.media.MediaPlayer$TrackInfo: int MEDIA_TRACK_TYPE_SUBTITLE>
<android.media.MediaPlayer$TrackInfo: int MEDIA_TRACK_TYPE_TIMEDTEXT>
<android.media.MediaPlayer$TrackInfo: int MEDIA_TRACK_TYPE_UNKNOWN>
<android.media.MediaPlayer$TrackInfo: int MEDIA_TRACK_TYPE_VIDEO>
android.media.MediaRecorder
<android.media.MediaRecorder: void <init>()>
<android.media.MediaRecorder: void <init>(android.content.Context)>
<android.media.MediaRecorder: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>
<android.media.MediaRecorder: void finalize()>
<android.media.MediaRecorder: java.util.List getActiveMicrophones()>
<android.media.MediaRecorder: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()>
<android.media.MediaRecorder: int getAudioSourceMax()>
<android.media.MediaRecorder: android.media.metrics.LogSessionId getLogSessionId()>
<android.media.MediaRecorder: int getMaxAmplitude()>
<android.media.MediaRecorder: android.os.PersistableBundle getMetrics()>
<android.media.MediaRecorder: android.media.AudioDeviceInfo getPreferredDevice()>
<android.media.MediaRecorder: android.media.AudioDeviceInfo getRoutedDevice()>
<android.media.MediaRecorder: android.view.Surface getSurface()>
<android.media.MediaRecorder: boolean isPrivacySensitive()>
<android.media.MediaRecorder: void pause()>
<android.media.MediaRecorder: void prepare()>
<android.media.MediaRecorder: void registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager$AudioRecordingCallback)>
<android.media.MediaRecorder: void release()>
<android.media.MediaRecorder: void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)>
<android.media.MediaRecorder: void reset()>
<android.media.MediaRecorder: void resume()>
<android.media.MediaRecorder: void setAudioChannels(int)>
<android.media.MediaRecorder: void setAudioEncoder(int)>
<android.media.MediaRecorder: void setAudioEncodingBitRate(int)>
<android.media.MediaRecorder: void setAudioProfile(android.media.EncoderProfiles$AudioProfile)>
<android.media.MediaRecorder: void setAudioSamplingRate(int)>
<android.media.MediaRecorder: void setAudioSource(int)>
<android.media.MediaRecorder: void setCamera(android.hardware.Camera)>
<android.media.MediaRecorder: void setCaptureRate(double)>
<android.media.MediaRecorder: void setInputSurface(android.view.Surface)>
<android.media.MediaRecorder: void setLocation(float,float)>
<android.media.MediaRecorder: void setLogSessionId(android.media.metrics.LogSessionId)>
<android.media.MediaRecorder: void setMaxDuration(int)>
<android.media.MediaRecorder: void setMaxFileSize(long)>
<android.media.MediaRecorder: void setNextOutputFile(java.io.FileDescriptor)>
<android.media.MediaRecorder: void setNextOutputFile(java.io.File)>
<android.media.MediaRecorder: void setOnErrorListener(android.media.MediaRecorder$OnErrorListener)>
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>
<android.media.MediaRecorder: void setOrientationHint(int)>
<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)>
<android.media.MediaRecorder: void setOutputFile(java.io.File)>
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>
<android.media.MediaRecorder: void setOutputFormat(int)>
<android.media.MediaRecorder: boolean setPreferredDevice(android.media.AudioDeviceInfo)>
<android.media.MediaRecorder: boolean setPreferredMicrophoneDirection(int)>
<android.media.MediaRecorder: boolean setPreferredMicrophoneFieldDimension(float)>
<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)>
<android.media.MediaRecorder: void setPrivacySensitive(boolean)>
<android.media.MediaRecorder: void setProfile(android.media.CamcorderProfile)>
<android.media.MediaRecorder: void setVideoEncoder(int)>
<android.media.MediaRecorder: void setVideoEncodingBitRate(int)>
<android.media.MediaRecorder: void setVideoEncodingProfileLevel(int,int)>
<android.media.MediaRecorder: void setVideoFrameRate(int)>
<android.media.MediaRecorder: void setVideoProfile(android.media.EncoderProfiles$VideoProfile)>
<android.media.MediaRecorder: void setVideoSize(int,int)>
<android.media.MediaRecorder: void setVideoSource(int)>
<android.media.MediaRecorder: void start()>
<android.media.MediaRecorder: void stop()>
<android.media.MediaRecorder: void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)>
<android.media.MediaRecorder: int MEDIA_ERROR_SERVER_DIED>
<android.media.MediaRecorder: int MEDIA_RECORDER_ERROR_UNKNOWN>
<android.media.MediaRecorder: int MEDIA_RECORDER_INFO_MAX_DURATION_REACHED>
<android.media.MediaRecorder: int MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING>
<android.media.MediaRecorder: int MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED>
<android.media.MediaRecorder: int MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED>
<android.media.MediaRecorder: int MEDIA_RECORDER_INFO_UNKNOWN>
android.media.MediaRecorder$AudioEncoder
<android.media.MediaRecorder$AudioEncoder: int AAC>
<android.media.MediaRecorder$AudioEncoder: int AAC_ELD>
<android.media.MediaRecorder$AudioEncoder: int AMR_NB>
<android.media.MediaRecorder$AudioEncoder: int AMR_WB>
<android.media.MediaRecorder$AudioEncoder: int DEFAULT>
<android.media.MediaRecorder$AudioEncoder: int HE_AAC>
<android.media.MediaRecorder$AudioEncoder: int OPUS>
<android.media.MediaRecorder$AudioEncoder: int VORBIS>
android.media.MediaRecorder$AudioSource
<android.media.MediaRecorder$AudioSource: int CAMCORDER>
<android.media.MediaRecorder$AudioSource: int DEFAULT>
<android.media.MediaRecorder$AudioSource: int MIC>
<android.media.MediaRecorder$AudioSource: int REMOTE_SUBMIX>
<android.media.MediaRecorder$AudioSource: int UNPROCESSED>
<android.media.MediaRecorder$AudioSource: int VOICE_CALL>
<android.media.MediaRecorder$AudioSource: int VOICE_COMMUNICATION>
<android.media.MediaRecorder$AudioSource: int VOICE_DOWNLINK>
<android.media.MediaRecorder$AudioSource: int VOICE_PERFORMANCE>
<android.media.MediaRecorder$AudioSource: int VOICE_RECOGNITION>
<android.media.MediaRecorder$AudioSource: int VOICE_UPLINK>
android.media.MediaRecorder$MetricsConstants
<android.media.MediaRecorder$MetricsConstants: java.lang.String AUDIO_BITRATE>
<android.media.MediaRecorder$MetricsConstants: java.lang.String AUDIO_CHANNELS>
<android.media.MediaRecorder$MetricsConstants: java.lang.String AUDIO_SAMPLERATE>
<android.media.MediaRecorder$MetricsConstants: java.lang.String AUDIO_TIMESCALE>
<android.media.MediaRecorder$MetricsConstants: java.lang.String CAPTURE_FPS>
<android.media.MediaRecorder$MetricsConstants: java.lang.String CAPTURE_FPS_ENABLE>
<android.media.MediaRecorder$MetricsConstants: java.lang.String FRAMERATE>
<android.media.MediaRecorder$MetricsConstants: java.lang.String HEIGHT>
<android.media.MediaRecorder$MetricsConstants: java.lang.String MOVIE_TIMESCALE>
<android.media.MediaRecorder$MetricsConstants: java.lang.String ROTATION>
<android.media.MediaRecorder$MetricsConstants: java.lang.String VIDEO_BITRATE>
<android.media.MediaRecorder$MetricsConstants: java.lang.String VIDEO_IFRAME_INTERVAL>
<android.media.MediaRecorder$MetricsConstants: java.lang.String VIDEO_LEVEL>
<android.media.MediaRecorder$MetricsConstants: java.lang.String VIDEO_PROFILE>
<android.media.MediaRecorder$MetricsConstants: java.lang.String VIDEO_TIMESCALE>
<android.media.MediaRecorder$MetricsConstants: java.lang.String WIDTH>
android.media.MediaRecorder$OnErrorListener
<android.media.MediaRecorder$OnErrorListener: void onError(android.media.MediaRecorder,int,int)>
android.media.MediaRecorder$OnInfoListener
<android.media.MediaRecorder$OnInfoListener: void onInfo(android.media.MediaRecorder,int,int)>
android.media.MediaRecorder$OutputFormat
<android.media.MediaRecorder$OutputFormat: int AAC_ADTS>
<android.media.MediaRecorder$OutputFormat: int AMR_NB>
<android.media.MediaRecorder$OutputFormat: int AMR_WB>
<android.media.MediaRecorder$OutputFormat: int DEFAULT>
<android.media.MediaRecorder$OutputFormat: int MPEG_2_TS>
<android.media.MediaRecorder$OutputFormat: int MPEG_4>
<android.media.MediaRecorder$OutputFormat: int OGG>
<android.media.MediaRecorder$OutputFormat: int RAW_AMR>
<android.media.MediaRecorder$OutputFormat: int THREE_GPP>
<android.media.MediaRecorder$OutputFormat: int WEBM>
android.media.MediaRecorder$VideoEncoder
<android.media.MediaRecorder$VideoEncoder: int AV1>
<android.media.MediaRecorder$VideoEncoder: int DEFAULT>
<android.media.MediaRecorder$VideoEncoder: int DOLBY_VISION>
<android.media.MediaRecorder$VideoEncoder: int H263>
<android.media.MediaRecorder$VideoEncoder: int H264>
<android.media.MediaRecorder$VideoEncoder: int HEVC>
<android.media.MediaRecorder$VideoEncoder: int MPEG_4_SP>
<android.media.MediaRecorder$VideoEncoder: int VP8>
<android.media.MediaRecorder$VideoEncoder: int VP9>
android.media.MediaRecorder$VideoSource
<android.media.MediaRecorder$VideoSource: int CAMERA>
<android.media.MediaRecorder$VideoSource: int DEFAULT>
<android.media.MediaRecorder$VideoSource: int SURFACE>
android.media.MediaRoute2Info
<android.media.MediaRoute2Info: int describeContents()>
<android.media.MediaRoute2Info: java.lang.String getClientPackageName()>
<android.media.MediaRoute2Info: int getConnectionState()>
<android.media.MediaRoute2Info: java.lang.CharSequence getDescription()>
<android.media.MediaRoute2Info: android.os.Bundle getExtras()>
<android.media.MediaRoute2Info: java.util.List getFeatures()>
<android.media.MediaRoute2Info: android.net.Uri getIconUri()>
<android.media.MediaRoute2Info: java.lang.String getId()>
<android.media.MediaRoute2Info: java.lang.CharSequence getName()>
<android.media.MediaRoute2Info: int getVolume()>
<android.media.MediaRoute2Info: int getVolumeHandling()>
<android.media.MediaRoute2Info: int getVolumeMax()>
<android.media.MediaRoute2Info: boolean isSystemRoute()>
<android.media.MediaRoute2Info: void writeToParcel(android.os.Parcel,int)>
<android.media.MediaRoute2Info: int CONNECTION_STATE_CONNECTED>
<android.media.MediaRoute2Info: int CONNECTION_STATE_CONNECTING>
<android.media.MediaRoute2Info: int CONNECTION_STATE_DISCONNECTED>
<android.media.MediaRoute2Info: android.os.Parcelable$Creator CREATOR>
<android.media.MediaRoute2Info: java.lang.String FEATURE_LIVE_AUDIO>
<android.media.MediaRoute2Info: java.lang.String FEATURE_LIVE_VIDEO>
<android.media.MediaRoute2Info: java.lang.String FEATURE_REMOTE_AUDIO_PLAYBACK>
<android.media.MediaRoute2Info: java.lang.String FEATURE_REMOTE_PLAYBACK>
<android.media.MediaRoute2Info: java.lang.String FEATURE_REMOTE_VIDEO_PLAYBACK>
<android.media.MediaRoute2Info: int PLAYBACK_VOLUME_FIXED>
<android.media.MediaRoute2Info: int PLAYBACK_VOLUME_VARIABLE>
android.media.MediaRoute2Info$Builder
<android.media.MediaRoute2Info$Builder: void <init>(java.lang.String,java.lang.CharSequence)>
<android.media.MediaRoute2Info$Builder: void <init>(android.media.MediaRoute2Info)>
<android.media.MediaRoute2Info$Builder: android.media.MediaRoute2Info$Builder addFeature(java.lang.String)>
<android.media.MediaRoute2Info$Builder: android.media.MediaRoute2Info$Builder addFeatures(java.util.Collection)>
<android.media.MediaRoute2Info$Builder: android.media.MediaRoute2Info build()>
<android.media.MediaRoute2Info$Builder: android.media.MediaRoute2Info$Builder clearFeatures()>
<android.media.MediaRoute2Info$Builder: android.media.MediaRoute2Info$Builder setClientPackageName(java.lang.String)>
<android.media.MediaRoute2Info$Builder: android.media.MediaRoute2Info$Builder setConnectionState(int)>
<android.media.MediaRoute2Info$Builder: android.media.MediaRoute2Info$Builder setDescription(java.lang.CharSequence)>
<android.media.MediaRoute2Info$Builder: android.media.MediaRoute2Info$Builder setExtras(android.os.Bundle)>
<android.media.MediaRoute2Info$Builder: android.media.MediaRoute2Info$Builder setIconUri(android.net.Uri)>
<android.media.MediaRoute2Info$Builder: android.media.MediaRoute2Info$Builder setVolume(int)>
<android.media.MediaRoute2Info$Builder: android.media.MediaRoute2Info$Builder setVolumeHandling(int)>
<android.media.MediaRoute2Info$Builder: android.media.MediaRoute2Info$Builder setVolumeMax(int)>
android.media.MediaRoute2ProviderService
<android.media.MediaRoute2ProviderService: void <init>()>
<android.media.MediaRoute2ProviderService: java.util.List getAllSessionInfo()>
<android.media.MediaRoute2ProviderService: android.media.RoutingSessionInfo getSessionInfo(java.lang.String)>
<android.media.MediaRoute2ProviderService: void notifyRequestFailed(long,int)>
<android.media.MediaRoute2ProviderService: void notifyRoutes(java.util.Collection)>
<android.media.MediaRoute2ProviderService: void notifySessionCreated(long,android.media.RoutingSessionInfo)>
<android.media.MediaRoute2ProviderService: void notifySessionReleased(java.lang.String)>
<android.media.MediaRoute2ProviderService: void notifySessionUpdated(android.media.RoutingSessionInfo)>
<android.media.MediaRoute2ProviderService: android.os.IBinder onBind(android.content.Intent)>
<android.media.MediaRoute2ProviderService: void onCreateSession(long,java.lang.String,java.lang.String,android.os.Bundle)>
<android.media.MediaRoute2ProviderService: void onDeselectRoute(long,java.lang.String,java.lang.String)>
<android.media.MediaRoute2ProviderService: void onDiscoveryPreferenceChanged(android.media.RouteDiscoveryPreference)>
<android.media.MediaRoute2ProviderService: void onReleaseSession(long,java.lang.String)>
<android.media.MediaRoute2ProviderService: void onSelectRoute(long,java.lang.String,java.lang.String)>
<android.media.MediaRoute2ProviderService: void onSetRouteVolume(long,java.lang.String,int)>
<android.media.MediaRoute2ProviderService: void onSetSessionVolume(long,java.lang.String,int)>
<android.media.MediaRoute2ProviderService: void onTransferToRoute(long,java.lang.String,java.lang.String)>
<android.media.MediaRoute2ProviderService: int REASON_INVALID_COMMAND>
<android.media.MediaRoute2ProviderService: int REASON_NETWORK_ERROR>
<android.media.MediaRoute2ProviderService: int REASON_REJECTED>
<android.media.MediaRoute2ProviderService: int REASON_ROUTE_NOT_AVAILABLE>
<android.media.MediaRoute2ProviderService: int REASON_UNKNOWN_ERROR>
<android.media.MediaRoute2ProviderService: long REQUEST_ID_NONE>
<android.media.MediaRoute2ProviderService: java.lang.String SERVICE_INTERFACE>
android.media.MediaRouter
<android.media.MediaRouter: void addCallback(int,android.media.MediaRouter$Callback)>
<android.media.MediaRouter: void addCallback(int,android.media.MediaRouter$Callback,int)>
<android.media.MediaRouter: void addUserRoute(android.media.MediaRouter$UserRouteInfo)>
<android.media.MediaRouter: void clearUserRoutes()>
<android.media.MediaRouter: android.media.MediaRouter$RouteCategory createRouteCategory(java.lang.CharSequence,boolean)>
<android.media.MediaRouter: android.media.MediaRouter$RouteCategory createRouteCategory(int,boolean)>
<android.media.MediaRouter: android.media.MediaRouter$UserRouteInfo createUserRoute(android.media.MediaRouter$RouteCategory)>
<android.media.MediaRouter: android.media.MediaRouter$RouteCategory getCategoryAt(int)>
<android.media.MediaRouter: int getCategoryCount()>
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getDefaultRoute()>
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getRouteAt(int)>
<android.media.MediaRouter: int getRouteCount()>
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getSelectedRoute(int)>
<android.media.MediaRouter: void removeCallback(android.media.MediaRouter$Callback)>
<android.media.MediaRouter: void removeUserRoute(android.media.MediaRouter$UserRouteInfo)>
<android.media.MediaRouter: void selectRoute(int,android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter: int CALLBACK_FLAG_PERFORM_ACTIVE_SCAN>
<android.media.MediaRouter: int CALLBACK_FLAG_UNFILTERED_EVENTS>
<android.media.MediaRouter: int ROUTE_TYPE_LIVE_AUDIO>
<android.media.MediaRouter: int ROUTE_TYPE_LIVE_VIDEO>
<android.media.MediaRouter: int ROUTE_TYPE_USER>
android.media.MediaRouter$Callback
<android.media.MediaRouter$Callback: void <init>()>
<android.media.MediaRouter$Callback: void onRouteAdded(android.media.MediaRouter,android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter$Callback: void onRouteChanged(android.media.MediaRouter,android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter$Callback: void onRouteGrouped(android.media.MediaRouter,android.media.MediaRouter$RouteInfo,android.media.MediaRouter$RouteGroup,int)>
<android.media.MediaRouter$Callback: void onRoutePresentationDisplayChanged(android.media.MediaRouter,android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter$Callback: void onRouteRemoved(android.media.MediaRouter,android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter$Callback: void onRouteSelected(android.media.MediaRouter,int,android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter$Callback: void onRouteUngrouped(android.media.MediaRouter,android.media.MediaRouter$RouteInfo,android.media.MediaRouter$RouteGroup)>
<android.media.MediaRouter$Callback: void onRouteUnselected(android.media.MediaRouter,int,android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter$Callback: void onRouteVolumeChanged(android.media.MediaRouter,android.media.MediaRouter$RouteInfo)>
android.media.MediaRouter$RouteCategory
<android.media.MediaRouter$RouteCategory: java.lang.CharSequence getName()>
<android.media.MediaRouter$RouteCategory: java.lang.CharSequence getName(android.content.Context)>
<android.media.MediaRouter$RouteCategory: java.util.List getRoutes(java.util.List)>
<android.media.MediaRouter$RouteCategory: int getSupportedTypes()>
<android.media.MediaRouter$RouteCategory: boolean isGroupable()>
android.media.MediaRouter$RouteGroup
<android.media.MediaRouter$RouteGroup: void addRoute(android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter$RouteGroup: void addRoute(android.media.MediaRouter$RouteInfo,int)>
<android.media.MediaRouter$RouteGroup: android.media.MediaRouter$RouteInfo getRouteAt(int)>
<android.media.MediaRouter$RouteGroup: int getRouteCount()>
<android.media.MediaRouter$RouteGroup: void removeRoute(android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter$RouteGroup: void removeRoute(int)>
<android.media.MediaRouter$RouteGroup: void setIconDrawable(android.graphics.drawable.Drawable)>
<android.media.MediaRouter$RouteGroup: void setIconResource(int)>
android.media.MediaRouter$RouteInfo
<android.media.MediaRouter$RouteInfo: android.media.MediaRouter$RouteCategory getCategory()>
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getDescription()>
<android.media.MediaRouter$RouteInfo: int getDeviceType()>
<android.media.MediaRouter$RouteInfo: android.media.MediaRouter$RouteGroup getGroup()>
<android.media.MediaRouter$RouteInfo: android.graphics.drawable.Drawable getIconDrawable()>
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getName()>
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getName(android.content.Context)>
<android.media.MediaRouter$RouteInfo: int getPlaybackStream()>
<android.media.MediaRouter$RouteInfo: int getPlaybackType()>
<android.media.MediaRouter$RouteInfo: android.view.Display getPresentationDisplay()>
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getStatus()>
<android.media.MediaRouter$RouteInfo: int getSupportedTypes()>
<android.media.MediaRouter$RouteInfo: java.lang.Object getTag()>
<android.media.MediaRouter$RouteInfo: int getVolume()>
<android.media.MediaRouter$RouteInfo: int getVolumeHandling()>
<android.media.MediaRouter$RouteInfo: int getVolumeMax()>
<android.media.MediaRouter$RouteInfo: boolean isConnecting()>
<android.media.MediaRouter$RouteInfo: boolean isEnabled()>
<android.media.MediaRouter$RouteInfo: void requestSetVolume(int)>
<android.media.MediaRouter$RouteInfo: void requestUpdateVolume(int)>
<android.media.MediaRouter$RouteInfo: void setTag(java.lang.Object)>
<android.media.MediaRouter$RouteInfo: int DEVICE_TYPE_BLUETOOTH>
<android.media.MediaRouter$RouteInfo: int DEVICE_TYPE_SPEAKER>
<android.media.MediaRouter$RouteInfo: int DEVICE_TYPE_TV>
<android.media.MediaRouter$RouteInfo: int DEVICE_TYPE_UNKNOWN>
<android.media.MediaRouter$RouteInfo: int PLAYBACK_TYPE_LOCAL>
<android.media.MediaRouter$RouteInfo: int PLAYBACK_TYPE_REMOTE>
<android.media.MediaRouter$RouteInfo: int PLAYBACK_VOLUME_FIXED>
<android.media.MediaRouter$RouteInfo: int PLAYBACK_VOLUME_VARIABLE>
android.media.MediaRouter$SimpleCallback
<android.media.MediaRouter$SimpleCallback: void <init>()>
<android.media.MediaRouter$SimpleCallback: void onRouteAdded(android.media.MediaRouter,android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter$SimpleCallback: void onRouteChanged(android.media.MediaRouter,android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter$SimpleCallback: void onRouteGrouped(android.media.MediaRouter,android.media.MediaRouter$RouteInfo,android.media.MediaRouter$RouteGroup,int)>
<android.media.MediaRouter$SimpleCallback: void onRouteRemoved(android.media.MediaRouter,android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter$SimpleCallback: void onRouteSelected(android.media.MediaRouter,int,android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter$SimpleCallback: void onRouteUngrouped(android.media.MediaRouter,android.media.MediaRouter$RouteInfo,android.media.MediaRouter$RouteGroup)>
<android.media.MediaRouter$SimpleCallback: void onRouteUnselected(android.media.MediaRouter,int,android.media.MediaRouter$RouteInfo)>
<android.media.MediaRouter$SimpleCallback: void onRouteVolumeChanged(android.media.MediaRouter,android.media.MediaRouter$RouteInfo)>
android.media.MediaRouter$UserRouteInfo
<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient getRemoteControlClient()>
<android.media.MediaRouter$UserRouteInfo: void setDescription(java.lang.CharSequence)>
<android.media.MediaRouter$UserRouteInfo: void setIconDrawable(android.graphics.drawable.Drawable)>
<android.media.MediaRouter$UserRouteInfo: void setIconResource(int)>
<android.media.MediaRouter$UserRouteInfo: void setName(java.lang.CharSequence)>
<android.media.MediaRouter$UserRouteInfo: void setName(int)>
<android.media.MediaRouter$UserRouteInfo: void setPlaybackStream(int)>
<android.media.MediaRouter$UserRouteInfo: void setPlaybackType(int)>
<android.media.MediaRouter$UserRouteInfo: void setRemoteControlClient(android.media.RemoteControlClient)>
<android.media.MediaRouter$UserRouteInfo: void setStatus(java.lang.CharSequence)>
<android.media.MediaRouter$UserRouteInfo: void setVolume(int)>
<android.media.MediaRouter$UserRouteInfo: void setVolumeCallback(android.media.MediaRouter$VolumeCallback)>
<android.media.MediaRouter$UserRouteInfo: void setVolumeHandling(int)>
<android.media.MediaRouter$UserRouteInfo: void setVolumeMax(int)>
android.media.MediaRouter$VolumeCallback
<android.media.MediaRouter$VolumeCallback: void <init>()>
<android.media.MediaRouter$VolumeCallback: void onVolumeSetRequest(android.media.MediaRouter$RouteInfo,int)>
<android.media.MediaRouter$VolumeCallback: void onVolumeUpdateRequest(android.media.MediaRouter$RouteInfo,int)>
android.media.MediaRouter2
<android.media.MediaRouter2: android.media.MediaRouter2$RoutingController getController(java.lang.String)>
<android.media.MediaRouter2: java.util.List getControllers()>
<android.media.MediaRouter2: android.media.MediaRouter2 getInstance(android.content.Context)>
<android.media.MediaRouter2: java.util.List getRoutes()>
<android.media.MediaRouter2: android.media.MediaRouter2$RoutingController getSystemController()>
<android.media.MediaRouter2: void registerControllerCallback(java.util.concurrent.Executor,android.media.MediaRouter2$ControllerCallback)>
<android.media.MediaRouter2: void registerRouteCallback(java.util.concurrent.Executor,android.media.MediaRouter2$RouteCallback,android.media.RouteDiscoveryPreference)>
<android.media.MediaRouter2: void registerTransferCallback(java.util.concurrent.Executor,android.media.MediaRouter2$TransferCallback)>
<android.media.MediaRouter2: void setOnGetControllerHintsListener(android.media.MediaRouter2$OnGetControllerHintsListener)>
<android.media.MediaRouter2: void stop()>
<android.media.MediaRouter2: void transferTo(android.media.MediaRoute2Info)>
<android.media.MediaRouter2: void unregisterControllerCallback(android.media.MediaRouter2$ControllerCallback)>
<android.media.MediaRouter2: void unregisterRouteCallback(android.media.MediaRouter2$RouteCallback)>
<android.media.MediaRouter2: void unregisterTransferCallback(android.media.MediaRouter2$TransferCallback)>
android.media.MediaRouter2$ControllerCallback
<android.media.MediaRouter2$ControllerCallback: void <init>()>
<android.media.MediaRouter2$ControllerCallback: void onControllerUpdated(android.media.MediaRouter2$RoutingController)>
android.media.MediaRouter2$OnGetControllerHintsListener
<android.media.MediaRouter2$OnGetControllerHintsListener: android.os.Bundle onGetControllerHints(android.media.MediaRoute2Info)>
android.media.MediaRouter2$RouteCallback
<android.media.MediaRouter2$RouteCallback: void <init>()>
<android.media.MediaRouter2$RouteCallback: void onRoutesAdded(java.util.List)>
<android.media.MediaRouter2$RouteCallback: void onRoutesChanged(java.util.List)>
<android.media.MediaRouter2$RouteCallback: void onRoutesRemoved(java.util.List)>
android.media.MediaRouter2$RoutingController
<android.media.MediaRouter2$RoutingController: void deselectRoute(android.media.MediaRoute2Info)>
<android.media.MediaRouter2$RoutingController: android.os.Bundle getControlHints()>
<android.media.MediaRouter2$RoutingController: java.util.List getDeselectableRoutes()>
<android.media.MediaRouter2$RoutingController: java.lang.String getId()>
<android.media.MediaRouter2$RoutingController: java.util.List getSelectableRoutes()>
<android.media.MediaRouter2$RoutingController: java.util.List getSelectedRoutes()>
<android.media.MediaRouter2$RoutingController: int getVolume()>
<android.media.MediaRouter2$RoutingController: int getVolumeHandling()>
<android.media.MediaRouter2$RoutingController: int getVolumeMax()>
<android.media.MediaRouter2$RoutingController: boolean isReleased()>
<android.media.MediaRouter2$RoutingController: void release()>
<android.media.MediaRouter2$RoutingController: void selectRoute(android.media.MediaRoute2Info)>
<android.media.MediaRouter2$RoutingController: void setVolume(int)>
android.media.MediaRouter2$TransferCallback
<android.media.MediaRouter2$TransferCallback: void <init>()>
<android.media.MediaRouter2$TransferCallback: void onStop(android.media.MediaRouter2$RoutingController)>
<android.media.MediaRouter2$TransferCallback: void onTransfer(android.media.MediaRouter2$RoutingController,android.media.MediaRouter2$RoutingController)>
<android.media.MediaRouter2$TransferCallback: void onTransferFailure(android.media.MediaRoute2Info)>
android.media.MediaScannerConnection
<android.media.MediaScannerConnection: void <init>(android.content.Context,android.media.MediaScannerConnection$MediaScannerConnectionClient)>
<android.media.MediaScannerConnection: void connect()>
<android.media.MediaScannerConnection: void disconnect()>
<android.media.MediaScannerConnection: boolean isConnected()>
<android.media.MediaScannerConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.media.MediaScannerConnection: void onServiceDisconnected(android.content.ComponentName)>
<android.media.MediaScannerConnection: void scanFile(java.lang.String,java.lang.String)>
<android.media.MediaScannerConnection: void scanFile(android.content.Context,java.lang.String[],java.lang.String[],android.media.MediaScannerConnection$OnScanCompletedListener)>
android.media.MediaScannerConnection$MediaScannerConnectionClient
<android.media.MediaScannerConnection$MediaScannerConnectionClient: void onMediaScannerConnected()>
android.media.MediaScannerConnection$OnScanCompletedListener
<android.media.MediaScannerConnection$OnScanCompletedListener: void onScanCompleted(java.lang.String,android.net.Uri)>
android.media.MediaSync
<android.media.MediaSync: void <init>()>
<android.media.MediaSync: android.view.Surface createInputSurface()>
<android.media.MediaSync: void finalize()>
<android.media.MediaSync: void flush()>
<android.media.MediaSync: android.media.PlaybackParams getPlaybackParams()>
<android.media.MediaSync: android.media.SyncParams getSyncParams()>
<android.media.MediaSync: android.media.MediaTimestamp getTimestamp()>
<android.media.MediaSync: void queueAudio(java.nio.ByteBuffer,int,long)>
<android.media.MediaSync: void release()>
<android.media.MediaSync: void setAudioTrack(android.media.AudioTrack)>
<android.media.MediaSync: void setCallback(android.media.MediaSync$Callback,android.os.Handler)>
<android.media.MediaSync: void setOnErrorListener(android.media.MediaSync$OnErrorListener,android.os.Handler)>
<android.media.MediaSync: void setPlaybackParams(android.media.PlaybackParams)>
<android.media.MediaSync: void setSurface(android.view.Surface)>
<android.media.MediaSync: void setSyncParams(android.media.SyncParams)>
<android.media.MediaSync: int MEDIASYNC_ERROR_AUDIOTRACK_FAIL>
<android.media.MediaSync: int MEDIASYNC_ERROR_SURFACE_FAIL>
android.media.MediaSync$Callback
<android.media.MediaSync$Callback: void <init>()>
<android.media.MediaSync$Callback: void onAudioBufferConsumed(android.media.MediaSync,java.nio.ByteBuffer,int)>
android.media.MediaSync$OnErrorListener
<android.media.MediaSync$OnErrorListener: void onError(android.media.MediaSync,int,int)>
android.media.MediaSyncEvent
<android.media.MediaSyncEvent: android.media.MediaSyncEvent createEvent(int)>
<android.media.MediaSyncEvent: int describeContents()>
<android.media.MediaSyncEvent: int getAudioSessionId()>
<android.media.MediaSyncEvent: int getType()>
<android.media.MediaSyncEvent: android.media.MediaSyncEvent setAudioSessionId(int)>
<android.media.MediaSyncEvent: void writeToParcel(android.os.Parcel,int)>
<android.media.MediaSyncEvent: android.os.Parcelable$Creator CREATOR>
<android.media.MediaSyncEvent: int SYNC_EVENT_NONE>
<android.media.MediaSyncEvent: int SYNC_EVENT_PRESENTATION_COMPLETE>
android.media.MediaTimestamp
<android.media.MediaTimestamp: void <init>(long,long,float)>
<android.media.MediaTimestamp: long getAnchorMediaTimeUs()>
<android.media.MediaTimestamp: long getAnchorSystemNanoTime()>
<android.media.MediaTimestamp: long getAnchorSytemNanoTime()>
<android.media.MediaTimestamp: float getMediaClockRate()>
<android.media.MediaTimestamp: android.media.MediaTimestamp TIMESTAMP_UNKNOWN>
android.media.MicrophoneDirection
<android.media.MicrophoneDirection: boolean setPreferredMicrophoneDirection(int)>
<android.media.MicrophoneDirection: boolean setPreferredMicrophoneFieldDimension(float)>
<android.media.MicrophoneDirection: int MIC_DIRECTION_AWAY_FROM_USER>
<android.media.MicrophoneDirection: int MIC_DIRECTION_EXTERNAL>
<android.media.MicrophoneDirection: int MIC_DIRECTION_TOWARDS_USER>
<android.media.MicrophoneDirection: int MIC_DIRECTION_UNSPECIFIED>
android.media.MicrophoneInfo
<android.media.MicrophoneInfo: java.lang.String getAddress()>
<android.media.MicrophoneInfo: java.util.List getChannelMapping()>
<android.media.MicrophoneInfo: java.lang.String getDescription()>
<android.media.MicrophoneInfo: int getDirectionality()>
<android.media.MicrophoneInfo: java.util.List getFrequencyResponse()>
<android.media.MicrophoneInfo: int getGroup()>
<android.media.MicrophoneInfo: int getId()>
<android.media.MicrophoneInfo: int getIndexInTheGroup()>
<android.media.MicrophoneInfo: int getLocation()>
<android.media.MicrophoneInfo: float getMaxSpl()>
<android.media.MicrophoneInfo: float getMinSpl()>
<android.media.MicrophoneInfo: android.media.MicrophoneInfo$Coordinate3F getOrientation()>
<android.media.MicrophoneInfo: android.media.MicrophoneInfo$Coordinate3F getPosition()>
<android.media.MicrophoneInfo: float getSensitivity()>
<android.media.MicrophoneInfo: int getType()>
<android.media.MicrophoneInfo: int CHANNEL_MAPPING_DIRECT>
<android.media.MicrophoneInfo: int CHANNEL_MAPPING_PROCESSED>
<android.media.MicrophoneInfo: int DIRECTIONALITY_BI_DIRECTIONAL>
<android.media.MicrophoneInfo: int DIRECTIONALITY_CARDIOID>
<android.media.MicrophoneInfo: int DIRECTIONALITY_HYPER_CARDIOID>
<android.media.MicrophoneInfo: int DIRECTIONALITY_OMNI>
<android.media.MicrophoneInfo: int DIRECTIONALITY_SUPER_CARDIOID>
<android.media.MicrophoneInfo: int DIRECTIONALITY_UNKNOWN>
<android.media.MicrophoneInfo: int GROUP_UNKNOWN>
<android.media.MicrophoneInfo: int INDEX_IN_THE_GROUP_UNKNOWN>
<android.media.MicrophoneInfo: int LOCATION_MAINBODY>
<android.media.MicrophoneInfo: int LOCATION_MAINBODY_MOVABLE>
<android.media.MicrophoneInfo: int LOCATION_PERIPHERAL>
<android.media.MicrophoneInfo: int LOCATION_UNKNOWN>
<android.media.MicrophoneInfo: android.media.MicrophoneInfo$Coordinate3F ORIENTATION_UNKNOWN>
<android.media.MicrophoneInfo: android.media.MicrophoneInfo$Coordinate3F POSITION_UNKNOWN>
<android.media.MicrophoneInfo: float SENSITIVITY_UNKNOWN>
<android.media.MicrophoneInfo: float SPL_UNKNOWN>
android.media.MicrophoneInfo$Coordinate3F
<android.media.MicrophoneInfo$Coordinate3F: float x>
<android.media.MicrophoneInfo$Coordinate3F: float y>
<android.media.MicrophoneInfo$Coordinate3F: float z>
android.media.NotProvisionedException
<android.media.NotProvisionedException: void <init>(java.lang.String)>
android.media.PlaybackParams
<android.media.PlaybackParams: void <init>()>
<android.media.PlaybackParams: android.media.PlaybackParams allowDefaults()>
<android.media.PlaybackParams: int describeContents()>
<android.media.PlaybackParams: int getAudioFallbackMode()>
<android.media.PlaybackParams: float getPitch()>
<android.media.PlaybackParams: float getSpeed()>
<android.media.PlaybackParams: android.media.PlaybackParams setAudioFallbackMode(int)>
<android.media.PlaybackParams: android.media.PlaybackParams setPitch(float)>
<android.media.PlaybackParams: android.media.PlaybackParams setSpeed(float)>
<android.media.PlaybackParams: void writeToParcel(android.os.Parcel,int)>
<android.media.PlaybackParams: int AUDIO_FALLBACK_MODE_DEFAULT>
<android.media.PlaybackParams: int AUDIO_FALLBACK_MODE_FAIL>
<android.media.PlaybackParams: int AUDIO_FALLBACK_MODE_MUTE>
<android.media.PlaybackParams: android.os.Parcelable$Creator CREATOR>
android.media.Rating
<android.media.Rating: int describeContents()>
<android.media.Rating: float getPercentRating()>
<android.media.Rating: int getRatingStyle()>
<android.media.Rating: float getStarRating()>
<android.media.Rating: boolean hasHeart()>
<android.media.Rating: boolean isRated()>
<android.media.Rating: boolean isThumbUp()>
<android.media.Rating: android.media.Rating newHeartRating(boolean)>
<android.media.Rating: android.media.Rating newPercentageRating(float)>
<android.media.Rating: android.media.Rating newStarRating(int,float)>
<android.media.Rating: android.media.Rating newThumbRating(boolean)>
<android.media.Rating: android.media.Rating newUnratedRating(int)>
<android.media.Rating: void writeToParcel(android.os.Parcel,int)>
<android.media.Rating: android.os.Parcelable$Creator CREATOR>
<android.media.Rating: int RATING_3_STARS>
<android.media.Rating: int RATING_4_STARS>
<android.media.Rating: int RATING_5_STARS>
<android.media.Rating: int RATING_HEART>
<android.media.Rating: int RATING_NONE>
<android.media.Rating: int RATING_PERCENTAGE>
<android.media.Rating: int RATING_THUMB_UP_DOWN>
android.media.RemoteControlClient
<android.media.RemoteControlClient: void <init>(android.app.PendingIntent)>
<android.media.RemoteControlClient: void <init>(android.app.PendingIntent,android.os.Looper)>
<android.media.RemoteControlClient: android.media.RemoteControlClient$MetadataEditor editMetadata(boolean)>
<android.media.RemoteControlClient: android.media.session.MediaSession getMediaSession()>
<android.media.RemoteControlClient: void setMetadataUpdateListener(android.media.RemoteControlClient$OnMetadataUpdateListener)>
<android.media.RemoteControlClient: void setOnGetPlaybackPositionListener(android.media.RemoteControlClient$OnGetPlaybackPositionListener)>
<android.media.RemoteControlClient: void setPlaybackPositionUpdateListener(android.media.RemoteControlClient$OnPlaybackPositionUpdateListener)>
<android.media.RemoteControlClient: void setPlaybackState(int)>
<android.media.RemoteControlClient: void setPlaybackState(int,long,float)>
<android.media.RemoteControlClient: void setTransportControlFlags(int)>
<android.media.RemoteControlClient: int FLAG_KEY_MEDIA_FAST_FORWARD>
<android.media.RemoteControlClient: int FLAG_KEY_MEDIA_NEXT>
<android.media.RemoteControlClient: int FLAG_KEY_MEDIA_PAUSE>
<android.media.RemoteControlClient: int FLAG_KEY_MEDIA_PLAY>
<android.media.RemoteControlClient: int FLAG_KEY_MEDIA_PLAY_PAUSE>
<android.media.RemoteControlClient: int FLAG_KEY_MEDIA_POSITION_UPDATE>
<android.media.RemoteControlClient: int FLAG_KEY_MEDIA_PREVIOUS>
<android.media.RemoteControlClient: int FLAG_KEY_MEDIA_RATING>
<android.media.RemoteControlClient: int FLAG_KEY_MEDIA_REWIND>
<android.media.RemoteControlClient: int FLAG_KEY_MEDIA_STOP>
<android.media.RemoteControlClient: int PLAYSTATE_BUFFERING>
<android.media.RemoteControlClient: int PLAYSTATE_ERROR>
<android.media.RemoteControlClient: int PLAYSTATE_FAST_FORWARDING>
<android.media.RemoteControlClient: int PLAYSTATE_PAUSED>
<android.media.RemoteControlClient: int PLAYSTATE_PLAYING>
<android.media.RemoteControlClient: int PLAYSTATE_REWINDING>
<android.media.RemoteControlClient: int PLAYSTATE_SKIPPING_BACKWARDS>
<android.media.RemoteControlClient: int PLAYSTATE_SKIPPING_FORWARDS>
<android.media.RemoteControlClient: int PLAYSTATE_STOPPED>
android.media.RemoteControlClient$MetadataEditor
<android.media.RemoteControlClient$MetadataEditor: void apply()>
<android.media.RemoteControlClient$MetadataEditor: java.lang.Object clone()>
<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putBitmap(int,android.graphics.Bitmap)>
<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putLong(int,long)>
<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putObject(int,java.lang.Object)>
<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putString(int,java.lang.String)>
<android.media.RemoteControlClient$MetadataEditor: int BITMAP_KEY_ARTWORK>
android.media.RemoteControlClient$OnGetPlaybackPositionListener
<android.media.RemoteControlClient$OnGetPlaybackPositionListener: long onGetPlaybackPosition()>
android.media.RemoteControlClient$OnMetadataUpdateListener
<android.media.RemoteControlClient$OnMetadataUpdateListener: void onMetadataUpdate(int,java.lang.Object)>
android.media.RemoteControlClient$OnPlaybackPositionUpdateListener
<android.media.RemoteControlClient$OnPlaybackPositionUpdateListener: void onPlaybackPositionUpdate(long)>
android.media.RemoteController
<android.media.RemoteController: void <init>(android.content.Context,android.media.RemoteController$OnClientUpdateListener)>
<android.media.RemoteController: void <init>(android.content.Context,android.media.RemoteController$OnClientUpdateListener,android.os.Looper)>
<android.media.RemoteController: boolean clearArtworkConfiguration()>
<android.media.RemoteController: android.media.RemoteController$MetadataEditor editMetadata()>
<android.media.RemoteController: long getEstimatedMediaPosition()>
<android.media.RemoteController: boolean seekTo(long)>
<android.media.RemoteController: boolean sendMediaKeyEvent(android.view.KeyEvent)>
<android.media.RemoteController: boolean setArtworkConfiguration(int,int)>
<android.media.RemoteController: boolean setSynchronizationMode(int)>
<android.media.RemoteController: int POSITION_SYNCHRONIZATION_CHECK>
<android.media.RemoteController: int POSITION_SYNCHRONIZATION_NONE>
android.media.RemoteController$MetadataEditor
<android.media.RemoteController$MetadataEditor: void apply()>
android.media.RemoteController$OnClientUpdateListener
<android.media.RemoteController$OnClientUpdateListener: void onClientChange(boolean)>
<android.media.RemoteController$OnClientUpdateListener: void onClientMetadataUpdate(android.media.RemoteController$MetadataEditor)>
<android.media.RemoteController$OnClientUpdateListener: void onClientPlaybackStateUpdate(int)>
<android.media.RemoteController$OnClientUpdateListener: void onClientPlaybackStateUpdate(int,long,long,float)>
<android.media.RemoteController$OnClientUpdateListener: void onClientTransportControlUpdate(int)>
android.media.ResourceBusyException
<android.media.ResourceBusyException: void <init>(java.lang.String)>
android.media.Ringtone
<android.media.Ringtone: void finalize()>
<android.media.Ringtone: android.media.AudioAttributes getAudioAttributes()>
<android.media.Ringtone: int getStreamType()>
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>
<android.media.Ringtone: float getVolume()>
<android.media.Ringtone: boolean isHapticGeneratorEnabled()>
<android.media.Ringtone: boolean isLooping()>
<android.media.Ringtone: boolean isPlaying()>
<android.media.Ringtone: void play()>
<android.media.Ringtone: void setAudioAttributes(android.media.AudioAttributes)>
<android.media.Ringtone: boolean setHapticGeneratorEnabled(boolean)>
<android.media.Ringtone: void setLooping(boolean)>
<android.media.Ringtone: void setStreamType(int)>
<android.media.Ringtone: void setVolume(float)>
<android.media.Ringtone: void stop()>
android.media.RingtoneManager
<android.media.RingtoneManager: void <init>(android.app.Activity)>
<android.media.RingtoneManager: void <init>(android.content.Context)>
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>
<android.media.RingtoneManager: android.database.Cursor getCursor()>
<android.media.RingtoneManager: int getDefaultType(android.net.Uri)>
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>
<android.media.RingtoneManager: boolean getIncludeDrm()>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>
<android.media.RingtoneManager: int getRingtonePosition(android.net.Uri)>
<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)>
<android.media.RingtoneManager: boolean getStopPreviousRingtone()>
<android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)>
<android.media.RingtoneManager: boolean hasHapticChannels(int)>
<android.media.RingtoneManager: boolean hasHapticChannels(android.net.Uri)>
<android.media.RingtoneManager: boolean hasHapticChannels(android.content.Context,android.net.Uri)>
<android.media.RingtoneManager: int inferStreamType()>
<android.media.RingtoneManager: boolean isDefault(android.net.Uri)>
<android.media.RingtoneManager: android.content.res.AssetFileDescriptor openDefaultRingtoneUri(android.content.Context,android.net.Uri)>
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>
<android.media.RingtoneManager: void setIncludeDrm(boolean)>
<android.media.RingtoneManager: void setStopPreviousRingtone(boolean)>
<android.media.RingtoneManager: void setType(int)>
<android.media.RingtoneManager: void stopPreviousRingtone()>
<android.media.RingtoneManager: java.lang.String ACTION_RINGTONE_PICKER>
<android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_DEFAULT_URI>
<android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_EXISTING_URI>
<android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_INCLUDE_DRM>
<android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_PICKED_URI>
<android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_SHOW_DEFAULT>
<android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_SHOW_SILENT>
<android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_TITLE>
<android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_TYPE>
<android.media.RingtoneManager: int ID_COLUMN_INDEX>
<android.media.RingtoneManager: int TITLE_COLUMN_INDEX>
<android.media.RingtoneManager: int TYPE_ALARM>
<android.media.RingtoneManager: int TYPE_ALL>
<android.media.RingtoneManager: int TYPE_NOTIFICATION>
<android.media.RingtoneManager: int TYPE_RINGTONE>
<android.media.RingtoneManager: int URI_COLUMN_INDEX>
android.media.RouteDiscoveryPreference
<android.media.RouteDiscoveryPreference: int describeContents()>
<android.media.RouteDiscoveryPreference: java.util.List getPreferredFeatures()>
<android.media.RouteDiscoveryPreference: boolean shouldPerformActiveScan()>
<android.media.RouteDiscoveryPreference: void writeToParcel(android.os.Parcel,int)>
<android.media.RouteDiscoveryPreference: android.os.Parcelable$Creator CREATOR>
android.media.RouteDiscoveryPreference$Builder
<android.media.RouteDiscoveryPreference$Builder: void <init>(java.util.List,boolean)>
<android.media.RouteDiscoveryPreference$Builder: void <init>(android.media.RouteDiscoveryPreference)>
<android.media.RouteDiscoveryPreference$Builder: android.media.RouteDiscoveryPreference build()>
<android.media.RouteDiscoveryPreference$Builder: android.media.RouteDiscoveryPreference$Builder setPreferredFeatures(java.util.List)>
<android.media.RouteDiscoveryPreference$Builder: android.media.RouteDiscoveryPreference$Builder setShouldPerformActiveScan(boolean)>
android.media.RoutingSessionInfo
<android.media.RoutingSessionInfo: int describeContents()>
<android.media.RoutingSessionInfo: java.lang.String getClientPackageName()>
<android.media.RoutingSessionInfo: android.os.Bundle getControlHints()>
<android.media.RoutingSessionInfo: java.util.List getDeselectableRoutes()>
<android.media.RoutingSessionInfo: java.lang.String getId()>
<android.media.RoutingSessionInfo: java.lang.CharSequence getName()>
<android.media.RoutingSessionInfo: java.util.List getSelectableRoutes()>
<android.media.RoutingSessionInfo: java.util.List getSelectedRoutes()>
<android.media.RoutingSessionInfo: java.util.List getTransferableRoutes()>
<android.media.RoutingSessionInfo: int getVolume()>
<android.media.RoutingSessionInfo: int getVolumeHandling()>
<android.media.RoutingSessionInfo: int getVolumeMax()>
<android.media.RoutingSessionInfo: void writeToParcel(android.os.Parcel,int)>
<android.media.RoutingSessionInfo: android.os.Parcelable$Creator CREATOR>
android.media.RoutingSessionInfo$Builder
<android.media.RoutingSessionInfo$Builder: void <init>(java.lang.String,java.lang.String)>
<android.media.RoutingSessionInfo$Builder: void <init>(android.media.RoutingSessionInfo)>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder addDeselectableRoute(java.lang.String)>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder addSelectableRoute(java.lang.String)>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder addSelectedRoute(java.lang.String)>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder addTransferableRoute(java.lang.String)>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo build()>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder clearDeselectableRoutes()>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder clearSelectableRoutes()>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder clearSelectedRoutes()>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder clearTransferableRoutes()>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder removeDeselectableRoute(java.lang.String)>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder removeSelectableRoute(java.lang.String)>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder removeSelectedRoute(java.lang.String)>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder removeTransferableRoute(java.lang.String)>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder setControlHints(android.os.Bundle)>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder setName(java.lang.CharSequence)>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder setVolume(int)>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder setVolumeHandling(int)>
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder setVolumeMax(int)>
android.media.SoundPool
<android.media.SoundPool: void <init>(int,int,int)>
<android.media.SoundPool: void autoPause()>
<android.media.SoundPool: void autoResume()>
<android.media.SoundPool: void finalize()>
<android.media.SoundPool: int load(java.lang.String,int)>
<android.media.SoundPool: int load(android.content.Context,int,int)>
<android.media.SoundPool: int load(android.content.res.AssetFileDescriptor,int)>
<android.media.SoundPool: int load(java.io.FileDescriptor,long,long,int)>
<android.media.SoundPool: void pause(int)>
<android.media.SoundPool: int play(int,float,float,int,int,float)>
<android.media.SoundPool: void release()>
<android.media.SoundPool: void resume(int)>
<android.media.SoundPool: void setLoop(int,int)>
<android.media.SoundPool: void setOnLoadCompleteListener(android.media.SoundPool$OnLoadCompleteListener)>
<android.media.SoundPool: void setPriority(int,int)>
<android.media.SoundPool: void setRate(int,float)>
<android.media.SoundPool: void setVolume(int,float,float)>
<android.media.SoundPool: void stop(int)>
<android.media.SoundPool: boolean unload(int)>
android.media.SoundPool$Builder
<android.media.SoundPool$Builder: void <init>()>
<android.media.SoundPool$Builder: android.media.SoundPool build()>
<android.media.SoundPool$Builder: android.media.SoundPool$Builder setAudioAttributes(android.media.AudioAttributes)>
<android.media.SoundPool$Builder: android.media.SoundPool$Builder setMaxStreams(int)>
android.media.SoundPool$OnLoadCompleteListener
<android.media.SoundPool$OnLoadCompleteListener: void onLoadComplete(android.media.SoundPool,int,int)>
android.media.Spatializer
<android.media.Spatializer: void addOnHeadTrackerAvailableListener(java.util.concurrent.Executor,android.media.Spatializer$OnHeadTrackerAvailableListener)>
<android.media.Spatializer: void addOnSpatializerStateChangedListener(java.util.concurrent.Executor,android.media.Spatializer$OnSpatializerStateChangedListener)>
<android.media.Spatializer: boolean canBeSpatialized(android.media.AudioAttributes,android.media.AudioFormat)>
<android.media.Spatializer: int getImmersiveAudioLevel()>
<android.media.Spatializer: boolean isAvailable()>
<android.media.Spatializer: boolean isEnabled()>
<android.media.Spatializer: boolean isHeadTrackerAvailable()>
<android.media.Spatializer: void removeOnHeadTrackerAvailableListener(android.media.Spatializer$OnHeadTrackerAvailableListener)>
<android.media.Spatializer: void removeOnSpatializerStateChangedListener(android.media.Spatializer$OnSpatializerStateChangedListener)>
<android.media.Spatializer: int SPATIALIZER_IMMERSIVE_LEVEL_MULTICHANNEL>
<android.media.Spatializer: int SPATIALIZER_IMMERSIVE_LEVEL_NONE>
<android.media.Spatializer: int SPATIALIZER_IMMERSIVE_LEVEL_OTHER>
android.media.Spatializer$OnHeadTrackerAvailableListener
<android.media.Spatializer$OnHeadTrackerAvailableListener: void onHeadTrackerAvailableChanged(android.media.Spatializer,boolean)>
android.media.Spatializer$OnSpatializerStateChangedListener
<android.media.Spatializer$OnSpatializerStateChangedListener: void onSpatializerAvailableChanged(android.media.Spatializer,boolean)>
<android.media.Spatializer$OnSpatializerStateChangedListener: void onSpatializerEnabledChanged(android.media.Spatializer,boolean)>
android.media.SubtitleData
<android.media.SubtitleData: void <init>(int,long,long,byte[])>
<android.media.SubtitleData: byte[] getData()>
<android.media.SubtitleData: long getDurationUs()>
<android.media.SubtitleData: long getStartTimeUs()>
<android.media.SubtitleData: int getTrackIndex()>
android.media.SyncParams
<android.media.SyncParams: void <init>()>
<android.media.SyncParams: android.media.SyncParams allowDefaults()>
<android.media.SyncParams: int getAudioAdjustMode()>
<android.media.SyncParams: float getFrameRate()>
<android.media.SyncParams: int getSyncSource()>
<android.media.SyncParams: float getTolerance()>
<android.media.SyncParams: android.media.SyncParams setAudioAdjustMode(int)>
<android.media.SyncParams: android.media.SyncParams setFrameRate(float)>
<android.media.SyncParams: android.media.SyncParams setSyncSource(int)>
<android.media.SyncParams: android.media.SyncParams setTolerance(float)>
<android.media.SyncParams: int AUDIO_ADJUST_MODE_DEFAULT>
<android.media.SyncParams: int AUDIO_ADJUST_MODE_RESAMPLE>
<android.media.SyncParams: int AUDIO_ADJUST_MODE_STRETCH>
<android.media.SyncParams: int SYNC_SOURCE_AUDIO>
<android.media.SyncParams: int SYNC_SOURCE_DEFAULT>
<android.media.SyncParams: int SYNC_SOURCE_SYSTEM_CLOCK>
<android.media.SyncParams: int SYNC_SOURCE_VSYNC>
android.media.ThumbnailUtils
<android.media.ThumbnailUtils: void <init>()>
<android.media.ThumbnailUtils: android.graphics.Bitmap createAudioThumbnail(java.lang.String,int)>
<android.media.ThumbnailUtils: android.graphics.Bitmap createAudioThumbnail(java.io.File,android.util.Size,android.os.CancellationSignal)>
<android.media.ThumbnailUtils: android.graphics.Bitmap createImageThumbnail(java.lang.String,int)>
<android.media.ThumbnailUtils: android.graphics.Bitmap createImageThumbnail(java.io.File,android.util.Size,android.os.CancellationSignal)>
<android.media.ThumbnailUtils: android.graphics.Bitmap createVideoThumbnail(java.lang.String,int)>
<android.media.ThumbnailUtils: android.graphics.Bitmap createVideoThumbnail(java.io.File,android.util.Size,android.os.CancellationSignal)>
<android.media.ThumbnailUtils: android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap,int,int)>
<android.media.ThumbnailUtils: android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap,int,int,int)>
<android.media.ThumbnailUtils: int OPTIONS_RECYCLE_INPUT>
android.media.TimedMetaData
<android.media.TimedMetaData: void <init>(long,byte[])>
<android.media.TimedMetaData: byte[] getMetaData()>
<android.media.TimedMetaData: long getTimestamp()>
android.media.TimedText
<android.media.TimedText: android.graphics.Rect getBounds()>
<android.media.TimedText: java.lang.String getText()>
android.media.ToneGenerator
<android.media.ToneGenerator: void <init>(int,int)>
<android.media.ToneGenerator: void finalize()>
<android.media.ToneGenerator: int getAudioSessionId()>
<android.media.ToneGenerator: void release()>
<android.media.ToneGenerator: boolean startTone(int)>
<android.media.ToneGenerator: boolean startTone(int,int)>
<android.media.ToneGenerator: void stopTone()>
<android.media.ToneGenerator: int MAX_VOLUME>
<android.media.ToneGenerator: int MIN_VOLUME>
<android.media.ToneGenerator: int TONE_CDMA_ABBR_ALERT>
<android.media.ToneGenerator: int TONE_CDMA_ABBR_INTERCEPT>
<android.media.ToneGenerator: int TONE_CDMA_ABBR_REORDER>
<android.media.ToneGenerator: int TONE_CDMA_ALERT_AUTOREDIAL_LITE>
<android.media.ToneGenerator: int TONE_CDMA_ALERT_CALL_GUARD>
<android.media.ToneGenerator: int TONE_CDMA_ALERT_INCALL_LITE>
<android.media.ToneGenerator: int TONE_CDMA_ALERT_NETWORK_LITE>
<android.media.ToneGenerator: int TONE_CDMA_ANSWER>
<android.media.ToneGenerator: int TONE_CDMA_CALLDROP_LITE>
<android.media.ToneGenerator: int TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUP>
<android.media.ToneGenerator: int TONE_CDMA_CALL_SIGNAL_ISDN_NORMAL>
<android.media.ToneGenerator: int TONE_CDMA_CALL_SIGNAL_ISDN_PAT3>
<android.media.ToneGenerator: int TONE_CDMA_CALL_SIGNAL_ISDN_PAT5>
<android.media.ToneGenerator: int TONE_CDMA_CALL_SIGNAL_ISDN_PAT6>
<android.media.ToneGenerator: int TONE_CDMA_CALL_SIGNAL_ISDN_PAT7>
<android.media.ToneGenerator: int TONE_CDMA_CALL_SIGNAL_ISDN_PING_RING>
<android.media.ToneGenerator: int TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRI>
<android.media.ToneGenerator: int TONE_CDMA_CONFIRM>
<android.media.ToneGenerator: int TONE_CDMA_DIAL_TONE_LITE>
<android.media.ToneGenerator: int TONE_CDMA_EMERGENCY_RINGBACK>
<android.media.ToneGenerator: int TONE_CDMA_HIGH_L>
<android.media.ToneGenerator: int TONE_CDMA_HIGH_PBX_L>
<android.media.ToneGenerator: int TONE_CDMA_HIGH_PBX_SLS>
<android.media.ToneGenerator: int TONE_CDMA_HIGH_PBX_SS>
<android.media.ToneGenerator: int TONE_CDMA_HIGH_PBX_SSL>
<android.media.ToneGenerator: int TONE_CDMA_HIGH_PBX_S_X4>
<android.media.ToneGenerator: int TONE_CDMA_HIGH_SLS>
<android.media.ToneGenerator: int TONE_CDMA_HIGH_SS>
<android.media.ToneGenerator: int TONE_CDMA_HIGH_SSL>
<android.media.ToneGenerator: int TONE_CDMA_HIGH_SS_2>
<android.media.ToneGenerator: int TONE_CDMA_HIGH_S_X4>
<android.media.ToneGenerator: int TONE_CDMA_INTERCEPT>
<android.media.ToneGenerator: int TONE_CDMA_KEYPAD_VOLUME_KEY_LITE>
<android.media.ToneGenerator: int TONE_CDMA_LOW_L>
<android.media.ToneGenerator: int TONE_CDMA_LOW_PBX_L>
<android.media.ToneGenerator: int TONE_CDMA_LOW_PBX_SLS>
<android.media.ToneGenerator: int TONE_CDMA_LOW_PBX_SS>
<android.media.ToneGenerator: int TONE_CDMA_LOW_PBX_SSL>
<android.media.ToneGenerator: int TONE_CDMA_LOW_PBX_S_X4>
<android.media.ToneGenerator: int TONE_CDMA_LOW_SLS>
<android.media.ToneGenerator: int TONE_CDMA_LOW_SS>
<android.media.ToneGenerator: int TONE_CDMA_LOW_SSL>
<android.media.ToneGenerator: int TONE_CDMA_LOW_SS_2>
<android.media.ToneGenerator: int TONE_CDMA_LOW_S_X4>
<android.media.ToneGenerator: int TONE_CDMA_MED_L>
<android.media.ToneGenerator: int TONE_CDMA_MED_PBX_L>
<android.media.ToneGenerator: int TONE_CDMA_MED_PBX_SLS>
<android.media.ToneGenerator: int TONE_CDMA_MED_PBX_SS>
<android.media.ToneGenerator: int TONE_CDMA_MED_PBX_SSL>
<android.media.ToneGenerator: int TONE_CDMA_MED_PBX_S_X4>
<android.media.ToneGenerator: int TONE_CDMA_MED_SLS>
<android.media.ToneGenerator: int TONE_CDMA_MED_SS>
<android.media.ToneGenerator: int TONE_CDMA_MED_SSL>
<android.media.ToneGenerator: int TONE_CDMA_MED_SS_2>
<android.media.ToneGenerator: int TONE_CDMA_MED_S_X4>
<android.media.ToneGenerator: int TONE_CDMA_NETWORK_BUSY>
<android.media.ToneGenerator: int TONE_CDMA_NETWORK_BUSY_ONE_SHOT>
<android.media.ToneGenerator: int TONE_CDMA_NETWORK_CALLWAITING>
<android.media.ToneGenerator: int TONE_CDMA_NETWORK_USA_RINGBACK>
<android.media.ToneGenerator: int TONE_CDMA_ONE_MIN_BEEP>
<android.media.ToneGenerator: int TONE_CDMA_PIP>
<android.media.ToneGenerator: int TONE_CDMA_PRESSHOLDKEY_LITE>
<android.media.ToneGenerator: int TONE_CDMA_REORDER>
<android.media.ToneGenerator: int TONE_CDMA_SIGNAL_OFF>
<android.media.ToneGenerator: int TONE_CDMA_SOFT_ERROR_LITE>
<android.media.ToneGenerator: int TONE_DTMF_0>
<android.media.ToneGenerator: int TONE_DTMF_1>
<android.media.ToneGenerator: int TONE_DTMF_2>
<android.media.ToneGenerator: int TONE_DTMF_3>
<android.media.ToneGenerator: int TONE_DTMF_4>
<android.media.ToneGenerator: int TONE_DTMF_5>
<android.media.ToneGenerator: int TONE_DTMF_6>
<android.media.ToneGenerator: int TONE_DTMF_7>
<android.media.ToneGenerator: int TONE_DTMF_8>
<android.media.ToneGenerator: int TONE_DTMF_9>
<android.media.ToneGenerator: int TONE_DTMF_A>
<android.media.ToneGenerator: int TONE_DTMF_B>
<android.media.ToneGenerator: int TONE_DTMF_C>
<android.media.ToneGenerator: int TONE_DTMF_D>
<android.media.ToneGenerator: int TONE_DTMF_P>
<android.media.ToneGenerator: int TONE_DTMF_S>
<android.media.ToneGenerator: int TONE_PROP_ACK>
<android.media.ToneGenerator: int TONE_PROP_BEEP>
<android.media.ToneGenerator: int TONE_PROP_BEEP2>
<android.media.ToneGenerator: int TONE_PROP_NACK>
<android.media.ToneGenerator: int TONE_PROP_PROMPT>
<android.media.ToneGenerator: int TONE_SUP_BUSY>
<android.media.ToneGenerator: int TONE_SUP_CALL_WAITING>
<android.media.ToneGenerator: int TONE_SUP_CONFIRM>
<android.media.ToneGenerator: int TONE_SUP_CONGESTION>
<android.media.ToneGenerator: int TONE_SUP_CONGESTION_ABBREV>
<android.media.ToneGenerator: int TONE_SUP_DIAL>
<android.media.ToneGenerator: int TONE_SUP_ERROR>
<android.media.ToneGenerator: int TONE_SUP_INTERCEPT>
<android.media.ToneGenerator: int TONE_SUP_INTERCEPT_ABBREV>
<android.media.ToneGenerator: int TONE_SUP_PIP>
<android.media.ToneGenerator: int TONE_SUP_RADIO_ACK>
<android.media.ToneGenerator: int TONE_SUP_RADIO_NOTAVAIL>
<android.media.ToneGenerator: int TONE_SUP_RINGTONE>
android.media.UnsupportedSchemeException
<android.media.UnsupportedSchemeException: void <init>(java.lang.String)>
android.media.VolumeAutomation
<android.media.VolumeAutomation: android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper$Configuration)>
android.media.VolumeProvider
<android.media.VolumeProvider: void <init>(int,int,int)>
<android.media.VolumeProvider: void <init>(int,int,int,java.lang.String)>
<android.media.VolumeProvider: int getCurrentVolume()>
<android.media.VolumeProvider: int getMaxVolume()>
<android.media.VolumeProvider: int getVolumeControl()>
<android.media.VolumeProvider: java.lang.String getVolumeControlId()>
<android.media.VolumeProvider: void onAdjustVolume(int)>
<android.media.VolumeProvider: void onSetVolumeTo(int)>
<android.media.VolumeProvider: void setCurrentVolume(int)>
<android.media.VolumeProvider: int VOLUME_CONTROL_ABSOLUTE>
<android.media.VolumeProvider: int VOLUME_CONTROL_FIXED>
<android.media.VolumeProvider: int VOLUME_CONTROL_RELATIVE>
android.media.VolumeShaper
<android.media.VolumeShaper: void apply(android.media.VolumeShaper$Operation)>
<android.media.VolumeShaper: void close()>
<android.media.VolumeShaper: void finalize()>
<android.media.VolumeShaper: float getVolume()>
<android.media.VolumeShaper: void replace(android.media.VolumeShaper$Configuration,android.media.VolumeShaper$Operation,boolean)>
android.media.VolumeShaper$Configuration
<android.media.VolumeShaper$Configuration: int describeContents()>
<android.media.VolumeShaper$Configuration: long getDuration()>
<android.media.VolumeShaper$Configuration: int getInterpolatorType()>
<android.media.VolumeShaper$Configuration: int getMaximumCurvePoints()>
<android.media.VolumeShaper$Configuration: float[] getTimes()>
<android.media.VolumeShaper$Configuration: float[] getVolumes()>
<android.media.VolumeShaper$Configuration: void writeToParcel(android.os.Parcel,int)>
<android.media.VolumeShaper$Configuration: android.os.Parcelable$Creator CREATOR>
<android.media.VolumeShaper$Configuration: android.media.VolumeShaper$Configuration CUBIC_RAMP>
<android.media.VolumeShaper$Configuration: int INTERPOLATOR_TYPE_CUBIC>
<android.media.VolumeShaper$Configuration: int INTERPOLATOR_TYPE_CUBIC_MONOTONIC>
<android.media.VolumeShaper$Configuration: int INTERPOLATOR_TYPE_LINEAR>
<android.media.VolumeShaper$Configuration: int INTERPOLATOR_TYPE_STEP>
<android.media.VolumeShaper$Configuration: android.media.VolumeShaper$Configuration LINEAR_RAMP>
<android.media.VolumeShaper$Configuration: android.media.VolumeShaper$Configuration SCURVE_RAMP>
<android.media.VolumeShaper$Configuration: android.media.VolumeShaper$Configuration SINE_RAMP>
android.media.VolumeShaper$Configuration$Builder
<android.media.VolumeShaper$Configuration$Builder: void <init>()>
<android.media.VolumeShaper$Configuration$Builder: void <init>(android.media.VolumeShaper$Configuration)>
<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration build()>
<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder invertVolumes()>
<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder reflectTimes()>
<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder scaleToEndVolume(float)>
<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder scaleToStartVolume(float)>
<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setCurve(float[],float[])>
<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setDuration(long)>
<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setInterpolatorType(int)>
android.media.VolumeShaper$Operation
<android.media.VolumeShaper$Operation: int describeContents()>
<android.media.VolumeShaper$Operation: void writeToParcel(android.os.Parcel,int)>
<android.media.VolumeShaper$Operation: android.os.Parcelable$Creator CREATOR>
<android.media.VolumeShaper$Operation: android.media.VolumeShaper$Operation PLAY>
<android.media.VolumeShaper$Operation: android.media.VolumeShaper$Operation REVERSE>
android.media.audiofx.AcousticEchoCanceler
<android.media.audiofx.AcousticEchoCanceler: android.media.audiofx.AcousticEchoCanceler create(int)>
<android.media.audiofx.AcousticEchoCanceler: boolean isAvailable()>
android.media.audiofx.AudioEffect
<android.media.audiofx.AudioEffect: void finalize()>
<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect$Descriptor getDescriptor()>
<android.media.audiofx.AudioEffect: boolean getEnabled()>
<android.media.audiofx.AudioEffect: int getId()>
<android.media.audiofx.AudioEffect: boolean hasControl()>
<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect$Descriptor[] queryEffects()>
<android.media.audiofx.AudioEffect: void release()>
<android.media.audiofx.AudioEffect: void setControlStatusListener(android.media.audiofx.AudioEffect$OnControlStatusChangeListener)>
<android.media.audiofx.AudioEffect: void setEnableStatusListener(android.media.audiofx.AudioEffect$OnEnableStatusChangeListener)>
<android.media.audiofx.AudioEffect: int setEnabled(boolean)>
<android.media.audiofx.AudioEffect: java.lang.String ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION>
<android.media.audiofx.AudioEffect: java.lang.String ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL>
<android.media.audiofx.AudioEffect: java.lang.String ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION>
<android.media.audiofx.AudioEffect: int ALREADY_EXISTS>
<android.media.audiofx.AudioEffect: int CONTENT_TYPE_GAME>
<android.media.audiofx.AudioEffect: int CONTENT_TYPE_MOVIE>
<android.media.audiofx.AudioEffect: int CONTENT_TYPE_MUSIC>
<android.media.audiofx.AudioEffect: int CONTENT_TYPE_VOICE>
<android.media.audiofx.AudioEffect: java.lang.String EFFECT_AUXILIARY>
<android.media.audiofx.AudioEffect: java.lang.String EFFECT_INSERT>
<android.media.audiofx.AudioEffect: java.lang.String EFFECT_POST_PROCESSING>
<android.media.audiofx.AudioEffect: java.lang.String EFFECT_PRE_PROCESSING>
<android.media.audiofx.AudioEffect: java.util.UUID EFFECT_TYPE_AEC>
<android.media.audiofx.AudioEffect: java.util.UUID EFFECT_TYPE_AGC>
<android.media.audiofx.AudioEffect: java.util.UUID EFFECT_TYPE_BASS_BOOST>
<android.media.audiofx.AudioEffect: java.util.UUID EFFECT_TYPE_DYNAMICS_PROCESSING>
<android.media.audiofx.AudioEffect: java.util.UUID EFFECT_TYPE_ENV_REVERB>
<android.media.audiofx.AudioEffect: java.util.UUID EFFECT_TYPE_EQUALIZER>
<android.media.audiofx.AudioEffect: java.util.UUID EFFECT_TYPE_HAPTIC_GENERATOR>
<android.media.audiofx.AudioEffect: java.util.UUID EFFECT_TYPE_LOUDNESS_ENHANCER>
<android.media.audiofx.AudioEffect: java.util.UUID EFFECT_TYPE_NS>
<android.media.audiofx.AudioEffect: java.util.UUID EFFECT_TYPE_PRESET_REVERB>
<android.media.audiofx.AudioEffect: java.util.UUID EFFECT_TYPE_VIRTUALIZER>
<android.media.audiofx.AudioEffect: int ERROR>
<android.media.audiofx.AudioEffect: int ERROR_BAD_VALUE>
<android.media.audiofx.AudioEffect: int ERROR_DEAD_OBJECT>
<android.media.audiofx.AudioEffect: int ERROR_INVALID_OPERATION>
<android.media.audiofx.AudioEffect: int ERROR_NO_INIT>
<android.media.audiofx.AudioEffect: int ERROR_NO_MEMORY>
<android.media.audiofx.AudioEffect: java.lang.String EXTRA_AUDIO_SESSION>
<android.media.audiofx.AudioEffect: java.lang.String EXTRA_CONTENT_TYPE>
<android.media.audiofx.AudioEffect: java.lang.String EXTRA_PACKAGE_NAME>
<android.media.audiofx.AudioEffect: int SUCCESS>
android.media.audiofx.AudioEffect$Descriptor
<android.media.audiofx.AudioEffect$Descriptor: void <init>()>
<android.media.audiofx.AudioEffect$Descriptor: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.media.audiofx.AudioEffect$Descriptor: java.lang.String connectMode>
<android.media.audiofx.AudioEffect$Descriptor: java.lang.String implementor>
<android.media.audiofx.AudioEffect$Descriptor: java.lang.String name>
<android.media.audiofx.AudioEffect$Descriptor: java.util.UUID type>
<android.media.audiofx.AudioEffect$Descriptor: java.util.UUID uuid>
android.media.audiofx.AudioEffect$OnControlStatusChangeListener
<android.media.audiofx.AudioEffect$OnControlStatusChangeListener: void onControlStatusChange(android.media.audiofx.AudioEffect,boolean)>
android.media.audiofx.AudioEffect$OnEnableStatusChangeListener
<android.media.audiofx.AudioEffect$OnEnableStatusChangeListener: void onEnableStatusChange(android.media.audiofx.AudioEffect,boolean)>
android.media.audiofx.AutomaticGainControl
<android.media.audiofx.AutomaticGainControl: android.media.audiofx.AutomaticGainControl create(int)>
<android.media.audiofx.AutomaticGainControl: boolean isAvailable()>
android.media.audiofx.BassBoost
<android.media.audiofx.BassBoost: void <init>(int,int)>
<android.media.audiofx.BassBoost: android.media.audiofx.BassBoost$Settings getProperties()>
<android.media.audiofx.BassBoost: short getRoundedStrength()>
<android.media.audiofx.BassBoost: boolean getStrengthSupported()>
<android.media.audiofx.BassBoost: void setParameterListener(android.media.audiofx.BassBoost$OnParameterChangeListener)>
<android.media.audiofx.BassBoost: void setProperties(android.media.audiofx.BassBoost$Settings)>
<android.media.audiofx.BassBoost: void setStrength(short)>
<android.media.audiofx.BassBoost: int PARAM_STRENGTH>
<android.media.audiofx.BassBoost: int PARAM_STRENGTH_SUPPORTED>
android.media.audiofx.BassBoost$OnParameterChangeListener
<android.media.audiofx.BassBoost$OnParameterChangeListener: void onParameterChange(android.media.audiofx.BassBoost,int,int,short)>
android.media.audiofx.BassBoost$Settings
<android.media.audiofx.BassBoost$Settings: void <init>()>
<android.media.audiofx.BassBoost$Settings: void <init>(java.lang.String)>
<android.media.audiofx.BassBoost$Settings: short strength>
android.media.audiofx.DynamicsProcessing
<android.media.audiofx.DynamicsProcessing: void <init>(int)>
<android.media.audiofx.DynamicsProcessing: void <init>(int,int,android.media.audiofx.DynamicsProcessing$Config)>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing$Channel getChannelByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing: int getChannelCount()>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing$Config getConfig()>
<android.media.audiofx.DynamicsProcessing: float getInputGainByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing$Limiter getLimiterByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing$MbcBand getMbcBandByChannelIndex(int,int)>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing$Mbc getMbcByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing$EqBand getPostEqBandByChannelIndex(int,int)>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing$Eq getPostEqByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing$EqBand getPreEqBandByChannelIndex(int,int)>
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing$Eq getPreEqByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing: void setAllChannelsTo(android.media.audiofx.DynamicsProcessing$Channel)>
<android.media.audiofx.DynamicsProcessing: void setChannelTo(int,android.media.audiofx.DynamicsProcessing$Channel)>
<android.media.audiofx.DynamicsProcessing: void setInputGainAllChannelsTo(float)>
<android.media.audiofx.DynamicsProcessing: void setInputGainbyChannel(int,float)>
<android.media.audiofx.DynamicsProcessing: void setLimiterAllChannelsTo(android.media.audiofx.DynamicsProcessing$Limiter)>
<android.media.audiofx.DynamicsProcessing: void setLimiterByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Limiter)>
<android.media.audiofx.DynamicsProcessing: void setMbcAllChannelsTo(android.media.audiofx.DynamicsProcessing$Mbc)>
<android.media.audiofx.DynamicsProcessing: void setMbcBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing$MbcBand)>
<android.media.audiofx.DynamicsProcessing: void setMbcBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing$MbcBand)>
<android.media.audiofx.DynamicsProcessing: void setMbcByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Mbc)>
<android.media.audiofx.DynamicsProcessing: void setPostEqAllChannelsTo(android.media.audiofx.DynamicsProcessing$Eq)>
<android.media.audiofx.DynamicsProcessing: void setPostEqBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing$EqBand)>
<android.media.audiofx.DynamicsProcessing: void setPostEqBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing$EqBand)>
<android.media.audiofx.DynamicsProcessing: void setPostEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Eq)>
<android.media.audiofx.DynamicsProcessing: void setPreEqAllChannelsTo(android.media.audiofx.DynamicsProcessing$Eq)>
<android.media.audiofx.DynamicsProcessing: void setPreEqBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing$EqBand)>
<android.media.audiofx.DynamicsProcessing: void setPreEqBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing$EqBand)>
<android.media.audiofx.DynamicsProcessing: void setPreEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Eq)>
<android.media.audiofx.DynamicsProcessing: int VARIANT_FAVOR_FREQUENCY_RESOLUTION>
<android.media.audiofx.DynamicsProcessing: int VARIANT_FAVOR_TIME_RESOLUTION>
android.media.audiofx.DynamicsProcessing$BandBase
<android.media.audiofx.DynamicsProcessing$BandBase: void <init>(boolean,float)>
<android.media.audiofx.DynamicsProcessing$BandBase: float getCutoffFrequency()>
<android.media.audiofx.DynamicsProcessing$BandBase: boolean isEnabled()>
<android.media.audiofx.DynamicsProcessing$BandBase: void setCutoffFrequency(float)>
<android.media.audiofx.DynamicsProcessing$BandBase: void setEnabled(boolean)>
android.media.audiofx.DynamicsProcessing$BandStage
<android.media.audiofx.DynamicsProcessing$BandStage: void <init>(boolean,boolean,int)>
<android.media.audiofx.DynamicsProcessing$BandStage: int getBandCount()>
android.media.audiofx.DynamicsProcessing$Channel
<android.media.audiofx.DynamicsProcessing$Channel: void <init>(float,boolean,int,boolean,int,boolean,int,boolean)>
<android.media.audiofx.DynamicsProcessing$Channel: void <init>(android.media.audiofx.DynamicsProcessing$Channel)>
<android.media.audiofx.DynamicsProcessing$Channel: float getInputGain()>
<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$Limiter getLimiter()>
<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$Mbc getMbc()>
<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$MbcBand getMbcBand(int)>
<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$Eq getPostEq()>
<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$EqBand getPostEqBand(int)>
<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$Eq getPreEq()>
<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$EqBand getPreEqBand(int)>
<android.media.audiofx.DynamicsProcessing$Channel: void setInputGain(float)>
<android.media.audiofx.DynamicsProcessing$Channel: void setLimiter(android.media.audiofx.DynamicsProcessing$Limiter)>
<android.media.audiofx.DynamicsProcessing$Channel: void setMbc(android.media.audiofx.DynamicsProcessing$Mbc)>
<android.media.audiofx.DynamicsProcessing$Channel: void setMbcBand(int,android.media.audiofx.DynamicsProcessing$MbcBand)>
<android.media.audiofx.DynamicsProcessing$Channel: void setPostEq(android.media.audiofx.DynamicsProcessing$Eq)>
<android.media.audiofx.DynamicsProcessing$Channel: void setPostEqBand(int,android.media.audiofx.DynamicsProcessing$EqBand)>
<android.media.audiofx.DynamicsProcessing$Channel: void setPreEq(android.media.audiofx.DynamicsProcessing$Eq)>
<android.media.audiofx.DynamicsProcessing$Channel: void setPreEqBand(int,android.media.audiofx.DynamicsProcessing$EqBand)>
android.media.audiofx.DynamicsProcessing$Config
<android.media.audiofx.DynamicsProcessing$Config: android.media.audiofx.DynamicsProcessing$Channel getChannelByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing$Config: float getInputGainByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing$Config: android.media.audiofx.DynamicsProcessing$Limiter getLimiterByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing$Config: android.media.audiofx.DynamicsProcessing$MbcBand getMbcBandByChannelIndex(int,int)>
<android.media.audiofx.DynamicsProcessing$Config: int getMbcBandCount()>
<android.media.audiofx.DynamicsProcessing$Config: android.media.audiofx.DynamicsProcessing$Mbc getMbcByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing$Config: android.media.audiofx.DynamicsProcessing$EqBand getPostEqBandByChannelIndex(int,int)>
<android.media.audiofx.DynamicsProcessing$Config: int getPostEqBandCount()>
<android.media.audiofx.DynamicsProcessing$Config: android.media.audiofx.DynamicsProcessing$Eq getPostEqByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing$Config: android.media.audiofx.DynamicsProcessing$EqBand getPreEqBandByChannelIndex(int,int)>
<android.media.audiofx.DynamicsProcessing$Config: int getPreEqBandCount()>
<android.media.audiofx.DynamicsProcessing$Config: android.media.audiofx.DynamicsProcessing$Eq getPreEqByChannelIndex(int)>
<android.media.audiofx.DynamicsProcessing$Config: float getPreferredFrameDuration()>
<android.media.audiofx.DynamicsProcessing$Config: int getVariant()>
<android.media.audiofx.DynamicsProcessing$Config: boolean isLimiterInUse()>
<android.media.audiofx.DynamicsProcessing$Config: boolean isMbcInUse()>
<android.media.audiofx.DynamicsProcessing$Config: boolean isPostEqInUse()>
<android.media.audiofx.DynamicsProcessing$Config: boolean isPreEqInUse()>
<android.media.audiofx.DynamicsProcessing$Config: void setAllChannelsTo(android.media.audiofx.DynamicsProcessing$Channel)>
<android.media.audiofx.DynamicsProcessing$Config: void setChannelTo(int,android.media.audiofx.DynamicsProcessing$Channel)>
<android.media.audiofx.DynamicsProcessing$Config: void setInputGainAllChannelsTo(float)>
<android.media.audiofx.DynamicsProcessing$Config: void setInputGainByChannelIndex(int,float)>
<android.media.audiofx.DynamicsProcessing$Config: void setLimiterAllChannelsTo(android.media.audiofx.DynamicsProcessing$Limiter)>
<android.media.audiofx.DynamicsProcessing$Config: void setLimiterByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Limiter)>
<android.media.audiofx.DynamicsProcessing$Config: void setMbcAllChannelsTo(android.media.audiofx.DynamicsProcessing$Mbc)>
<android.media.audiofx.DynamicsProcessing$Config: void setMbcBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing$MbcBand)>
<android.media.audiofx.DynamicsProcessing$Config: void setMbcBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing$MbcBand)>
<android.media.audiofx.DynamicsProcessing$Config: void setMbcByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Mbc)>
<android.media.audiofx.DynamicsProcessing$Config: void setPostEqAllChannelsTo(android.media.audiofx.DynamicsProcessing$Eq)>
<android.media.audiofx.DynamicsProcessing$Config: void setPostEqBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing$EqBand)>
<android.media.audiofx.DynamicsProcessing$Config: void setPostEqBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing$EqBand)>
<android.media.audiofx.DynamicsProcessing$Config: void setPostEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Eq)>
<android.media.audiofx.DynamicsProcessing$Config: void setPreEqAllChannelsTo(android.media.audiofx.DynamicsProcessing$Eq)>
<android.media.audiofx.DynamicsProcessing$Config: void setPreEqBandAllChannelsTo(int,android.media.audiofx.DynamicsProcessing$EqBand)>
<android.media.audiofx.DynamicsProcessing$Config: void setPreEqBandByChannelIndex(int,int,android.media.audiofx.DynamicsProcessing$EqBand)>
<android.media.audiofx.DynamicsProcessing$Config: void setPreEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Eq)>
android.media.audiofx.DynamicsProcessing$Config$Builder
<android.media.audiofx.DynamicsProcessing$Config$Builder: void <init>(int,int,boolean,int,boolean,int,boolean,int,boolean)>
<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config build()>
<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setAllChannelsTo(android.media.audiofx.DynamicsProcessing$Channel)>
<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setChannelTo(int,android.media.audiofx.DynamicsProcessing$Channel)>
<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setInputGainAllChannelsTo(float)>
<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setInputGainByChannelIndex(int,float)>
<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setLimiterAllChannelsTo(android.media.audiofx.DynamicsProcessing$Limiter)>
<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setLimiterByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Limiter)>
<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setMbcAllChannelsTo(android.media.audiofx.DynamicsProcessing$Mbc)>
<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setMbcByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Mbc)>
<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setPostEqAllChannelsTo(android.media.audiofx.DynamicsProcessing$Eq)>
<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setPostEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Eq)>
<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setPreEqAllChannelsTo(android.media.audiofx.DynamicsProcessing$Eq)>
<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setPreEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Eq)>
<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setPreferredFrameDuration(float)>
android.media.audiofx.DynamicsProcessing$Eq
<android.media.audiofx.DynamicsProcessing$Eq: void <init>(boolean,boolean,int)>
<android.media.audiofx.DynamicsProcessing$Eq: void <init>(android.media.audiofx.DynamicsProcessing$Eq)>
<android.media.audiofx.DynamicsProcessing$Eq: android.media.audiofx.DynamicsProcessing$EqBand getBand(int)>
<android.media.audiofx.DynamicsProcessing$Eq: void setBand(int,android.media.audiofx.DynamicsProcessing$EqBand)>
android.media.audiofx.DynamicsProcessing$EqBand
<android.media.audiofx.DynamicsProcessing$EqBand: void <init>(boolean,float,float)>
<android.media.audiofx.DynamicsProcessing$EqBand: void <init>(android.media.audiofx.DynamicsProcessing$EqBand)>
<android.media.audiofx.DynamicsProcessing$EqBand: float getGain()>
<android.media.audiofx.DynamicsProcessing$EqBand: void setGain(float)>
android.media.audiofx.DynamicsProcessing$Limiter
<android.media.audiofx.DynamicsProcessing$Limiter: void <init>(boolean,boolean,int,float,float,float,float,float)>
<android.media.audiofx.DynamicsProcessing$Limiter: void <init>(android.media.audiofx.DynamicsProcessing$Limiter)>
<android.media.audiofx.DynamicsProcessing$Limiter: float getAttackTime()>
<android.media.audiofx.DynamicsProcessing$Limiter: int getLinkGroup()>
<android.media.audiofx.DynamicsProcessing$Limiter: float getPostGain()>
<android.media.audiofx.DynamicsProcessing$Limiter: float getRatio()>
<android.media.audiofx.DynamicsProcessing$Limiter: float getReleaseTime()>
<android.media.audiofx.DynamicsProcessing$Limiter: float getThreshold()>
<android.media.audiofx.DynamicsProcessing$Limiter: void setAttackTime(float)>
<android.media.audiofx.DynamicsProcessing$Limiter: void setLinkGroup(int)>
<android.media.audiofx.DynamicsProcessing$Limiter: void setPostGain(float)>
<android.media.audiofx.DynamicsProcessing$Limiter: void setRatio(float)>
<android.media.audiofx.DynamicsProcessing$Limiter: void setReleaseTime(float)>
<android.media.audiofx.DynamicsProcessing$Limiter: void setThreshold(float)>
android.media.audiofx.DynamicsProcessing$Mbc
<android.media.audiofx.DynamicsProcessing$Mbc: void <init>(boolean,boolean,int)>
<android.media.audiofx.DynamicsProcessing$Mbc: void <init>(android.media.audiofx.DynamicsProcessing$Mbc)>
<android.media.audiofx.DynamicsProcessing$Mbc: android.media.audiofx.DynamicsProcessing$MbcBand getBand(int)>
<android.media.audiofx.DynamicsProcessing$Mbc: void setBand(int,android.media.audiofx.DynamicsProcessing$MbcBand)>
android.media.audiofx.DynamicsProcessing$MbcBand
<android.media.audiofx.DynamicsProcessing$MbcBand: void <init>(boolean,float,float,float,float,float,float,float,float,float,float)>
<android.media.audiofx.DynamicsProcessing$MbcBand: void <init>(android.media.audiofx.DynamicsProcessing$MbcBand)>
<android.media.audiofx.DynamicsProcessing$MbcBand: float getAttackTime()>
<android.media.audiofx.DynamicsProcessing$MbcBand: float getExpanderRatio()>
<android.media.audiofx.DynamicsProcessing$MbcBand: float getKneeWidth()>
<android.media.audiofx.DynamicsProcessing$MbcBand: float getNoiseGateThreshold()>
<android.media.audiofx.DynamicsProcessing$MbcBand: float getPostGain()>
<android.media.audiofx.DynamicsProcessing$MbcBand: float getPreGain()>
<android.media.audiofx.DynamicsProcessing$MbcBand: float getRatio()>
<android.media.audiofx.DynamicsProcessing$MbcBand: float getReleaseTime()>
<android.media.audiofx.DynamicsProcessing$MbcBand: float getThreshold()>
<android.media.audiofx.DynamicsProcessing$MbcBand: void setAttackTime(float)>
<android.media.audiofx.DynamicsProcessing$MbcBand: void setExpanderRatio(float)>
<android.media.audiofx.DynamicsProcessing$MbcBand: void setKneeWidth(float)>
<android.media.audiofx.DynamicsProcessing$MbcBand: void setNoiseGateThreshold(float)>
<android.media.audiofx.DynamicsProcessing$MbcBand: void setPostGain(float)>
<android.media.audiofx.DynamicsProcessing$MbcBand: void setPreGain(float)>
<android.media.audiofx.DynamicsProcessing$MbcBand: void setRatio(float)>
<android.media.audiofx.DynamicsProcessing$MbcBand: void setReleaseTime(float)>
<android.media.audiofx.DynamicsProcessing$MbcBand: void setThreshold(float)>
android.media.audiofx.DynamicsProcessing$Stage
<android.media.audiofx.DynamicsProcessing$Stage: void <init>(boolean,boolean)>
<android.media.audiofx.DynamicsProcessing$Stage: boolean isEnabled()>
<android.media.audiofx.DynamicsProcessing$Stage: boolean isInUse()>
<android.media.audiofx.DynamicsProcessing$Stage: void setEnabled(boolean)>
android.media.audiofx.EnvironmentalReverb
<android.media.audiofx.EnvironmentalReverb: void <init>(int,int)>
<android.media.audiofx.EnvironmentalReverb: short getDecayHFRatio()>
<android.media.audiofx.EnvironmentalReverb: int getDecayTime()>
<android.media.audiofx.EnvironmentalReverb: short getDensity()>
<android.media.audiofx.EnvironmentalReverb: short getDiffusion()>
<android.media.audiofx.EnvironmentalReverb: android.media.audiofx.EnvironmentalReverb$Settings getProperties()>
<android.media.audiofx.EnvironmentalReverb: int getReflectionsDelay()>
<android.media.audiofx.EnvironmentalReverb: short getReflectionsLevel()>
<android.media.audiofx.EnvironmentalReverb: int getReverbDelay()>
<android.media.audiofx.EnvironmentalReverb: short getReverbLevel()>
<android.media.audiofx.EnvironmentalReverb: short getRoomHFLevel()>
<android.media.audiofx.EnvironmentalReverb: short getRoomLevel()>
<android.media.audiofx.EnvironmentalReverb: void setDecayHFRatio(short)>
<android.media.audiofx.EnvironmentalReverb: void setDecayTime(int)>
<android.media.audiofx.EnvironmentalReverb: void setDensity(short)>
<android.media.audiofx.EnvironmentalReverb: void setDiffusion(short)>
<android.media.audiofx.EnvironmentalReverb: void setParameterListener(android.media.audiofx.EnvironmentalReverb$OnParameterChangeListener)>
<android.media.audiofx.EnvironmentalReverb: void setProperties(android.media.audiofx.EnvironmentalReverb$Settings)>
<android.media.audiofx.EnvironmentalReverb: void setReflectionsDelay(int)>
<android.media.audiofx.EnvironmentalReverb: void setReflectionsLevel(short)>
<android.media.audiofx.EnvironmentalReverb: void setReverbDelay(int)>
<android.media.audiofx.EnvironmentalReverb: void setReverbLevel(short)>
<android.media.audiofx.EnvironmentalReverb: void setRoomHFLevel(short)>
<android.media.audiofx.EnvironmentalReverb: void setRoomLevel(short)>
<android.media.audiofx.EnvironmentalReverb: int PARAM_DECAY_HF_RATIO>
<android.media.audiofx.EnvironmentalReverb: int PARAM_DECAY_TIME>
<android.media.audiofx.EnvironmentalReverb: int PARAM_DENSITY>
<android.media.audiofx.EnvironmentalReverb: int PARAM_DIFFUSION>
<android.media.audiofx.EnvironmentalReverb: int PARAM_REFLECTIONS_DELAY>
<android.media.audiofx.EnvironmentalReverb: int PARAM_REFLECTIONS_LEVEL>
<android.media.audiofx.EnvironmentalReverb: int PARAM_REVERB_DELAY>
<android.media.audiofx.EnvironmentalReverb: int PARAM_REVERB_LEVEL>
<android.media.audiofx.EnvironmentalReverb: int PARAM_ROOM_HF_LEVEL>
<android.media.audiofx.EnvironmentalReverb: int PARAM_ROOM_LEVEL>
android.media.audiofx.EnvironmentalReverb$OnParameterChangeListener
<android.media.audiofx.EnvironmentalReverb$OnParameterChangeListener: void onParameterChange(android.media.audiofx.EnvironmentalReverb,int,int,int)>
android.media.audiofx.EnvironmentalReverb$Settings
<android.media.audiofx.EnvironmentalReverb$Settings: void <init>()>
<android.media.audiofx.EnvironmentalReverb$Settings: void <init>(java.lang.String)>
<android.media.audiofx.EnvironmentalReverb$Settings: short decayHFRatio>
<android.media.audiofx.EnvironmentalReverb$Settings: int decayTime>
<android.media.audiofx.EnvironmentalReverb$Settings: short density>
<android.media.audiofx.EnvironmentalReverb$Settings: short diffusion>
<android.media.audiofx.EnvironmentalReverb$Settings: int reflectionsDelay>
<android.media.audiofx.EnvironmentalReverb$Settings: short reflectionsLevel>
<android.media.audiofx.EnvironmentalReverb$Settings: int reverbDelay>
<android.media.audiofx.EnvironmentalReverb$Settings: short reverbLevel>
<android.media.audiofx.EnvironmentalReverb$Settings: short roomHFLevel>
<android.media.audiofx.EnvironmentalReverb$Settings: short roomLevel>
android.media.audiofx.Equalizer
<android.media.audiofx.Equalizer: void <init>(int,int)>
<android.media.audiofx.Equalizer: short getBand(int)>
<android.media.audiofx.Equalizer: int[] getBandFreqRange(short)>
<android.media.audiofx.Equalizer: short getBandLevel(short)>
<android.media.audiofx.Equalizer: short[] getBandLevelRange()>
<android.media.audiofx.Equalizer: int getCenterFreq(short)>
<android.media.audiofx.Equalizer: short getCurrentPreset()>
<android.media.audiofx.Equalizer: short getNumberOfBands()>
<android.media.audiofx.Equalizer: short getNumberOfPresets()>
<android.media.audiofx.Equalizer: java.lang.String getPresetName(short)>
<android.media.audiofx.Equalizer: android.media.audiofx.Equalizer$Settings getProperties()>
<android.media.audiofx.Equalizer: void setBandLevel(short,short)>
<android.media.audiofx.Equalizer: void setParameterListener(android.media.audiofx.Equalizer$OnParameterChangeListener)>
<android.media.audiofx.Equalizer: void setProperties(android.media.audiofx.Equalizer$Settings)>
<android.media.audiofx.Equalizer: void usePreset(short)>
<android.media.audiofx.Equalizer: int PARAM_BAND_FREQ_RANGE>
<android.media.audiofx.Equalizer: int PARAM_BAND_LEVEL>
<android.media.audiofx.Equalizer: int PARAM_CENTER_FREQ>
<android.media.audiofx.Equalizer: int PARAM_CURRENT_PRESET>
<android.media.audiofx.Equalizer: int PARAM_GET_BAND>
<android.media.audiofx.Equalizer: int PARAM_GET_NUM_OF_PRESETS>
<android.media.audiofx.Equalizer: int PARAM_GET_PRESET_NAME>
<android.media.audiofx.Equalizer: int PARAM_LEVEL_RANGE>
<android.media.audiofx.Equalizer: int PARAM_NUM_BANDS>
<android.media.audiofx.Equalizer: int PARAM_STRING_SIZE_MAX>
android.media.audiofx.Equalizer$OnParameterChangeListener
<android.media.audiofx.Equalizer$OnParameterChangeListener: void onParameterChange(android.media.audiofx.Equalizer,int,int,int,int)>
android.media.audiofx.Equalizer$Settings
<android.media.audiofx.Equalizer$Settings: void <init>()>
<android.media.audiofx.Equalizer$Settings: void <init>(java.lang.String)>
<android.media.audiofx.Equalizer$Settings: short[] bandLevels>
<android.media.audiofx.Equalizer$Settings: short curPreset>
<android.media.audiofx.Equalizer$Settings: short numBands>
android.media.audiofx.HapticGenerator
<android.media.audiofx.HapticGenerator: void close()>
<android.media.audiofx.HapticGenerator: android.media.audiofx.HapticGenerator create(int)>
<android.media.audiofx.HapticGenerator: boolean isAvailable()>
<android.media.audiofx.HapticGenerator: int setEnabled(boolean)>
android.media.audiofx.LoudnessEnhancer
<android.media.audiofx.LoudnessEnhancer: void <init>(int)>
<android.media.audiofx.LoudnessEnhancer: float getTargetGain()>
<android.media.audiofx.LoudnessEnhancer: void setTargetGain(int)>
<android.media.audiofx.LoudnessEnhancer: int PARAM_TARGET_GAIN_MB>
android.media.audiofx.NoiseSuppressor
<android.media.audiofx.NoiseSuppressor: android.media.audiofx.NoiseSuppressor create(int)>
<android.media.audiofx.NoiseSuppressor: boolean isAvailable()>
android.media.audiofx.PresetReverb
<android.media.audiofx.PresetReverb: void <init>(int,int)>
<android.media.audiofx.PresetReverb: short getPreset()>
<android.media.audiofx.PresetReverb: android.media.audiofx.PresetReverb$Settings getProperties()>
<android.media.audiofx.PresetReverb: void setParameterListener(android.media.audiofx.PresetReverb$OnParameterChangeListener)>
<android.media.audiofx.PresetReverb: void setPreset(short)>
<android.media.audiofx.PresetReverb: void setProperties(android.media.audiofx.PresetReverb$Settings)>
<android.media.audiofx.PresetReverb: int PARAM_PRESET>
<android.media.audiofx.PresetReverb: short PRESET_LARGEHALL>
<android.media.audiofx.PresetReverb: short PRESET_LARGEROOM>
<android.media.audiofx.PresetReverb: short PRESET_MEDIUMHALL>
<android.media.audiofx.PresetReverb: short PRESET_MEDIUMROOM>
<android.media.audiofx.PresetReverb: short PRESET_NONE>
<android.media.audiofx.PresetReverb: short PRESET_PLATE>
<android.media.audiofx.PresetReverb: short PRESET_SMALLROOM>
android.media.audiofx.PresetReverb$OnParameterChangeListener
<android.media.audiofx.PresetReverb$OnParameterChangeListener: void onParameterChange(android.media.audiofx.PresetReverb,int,int,short)>
android.media.audiofx.PresetReverb$Settings
<android.media.audiofx.PresetReverb$Settings: void <init>()>
<android.media.audiofx.PresetReverb$Settings: void <init>(java.lang.String)>
<android.media.audiofx.PresetReverb$Settings: short preset>
android.media.audiofx.Virtualizer
<android.media.audiofx.Virtualizer: void <init>(int,int)>
<android.media.audiofx.Virtualizer: boolean canVirtualize(int,int)>
<android.media.audiofx.Virtualizer: boolean forceVirtualizationMode(int)>
<android.media.audiofx.Virtualizer: android.media.audiofx.Virtualizer$Settings getProperties()>
<android.media.audiofx.Virtualizer: short getRoundedStrength()>
<android.media.audiofx.Virtualizer: boolean getSpeakerAngles(int,int,int[])>
<android.media.audiofx.Virtualizer: boolean getStrengthSupported()>
<android.media.audiofx.Virtualizer: int getVirtualizationMode()>
<android.media.audiofx.Virtualizer: void setParameterListener(android.media.audiofx.Virtualizer$OnParameterChangeListener)>
<android.media.audiofx.Virtualizer: void setProperties(android.media.audiofx.Virtualizer$Settings)>
<android.media.audiofx.Virtualizer: void setStrength(short)>
<android.media.audiofx.Virtualizer: int PARAM_STRENGTH>
<android.media.audiofx.Virtualizer: int PARAM_STRENGTH_SUPPORTED>
<android.media.audiofx.Virtualizer: int VIRTUALIZATION_MODE_AUTO>
<android.media.audiofx.Virtualizer: int VIRTUALIZATION_MODE_BINAURAL>
<android.media.audiofx.Virtualizer: int VIRTUALIZATION_MODE_OFF>
<android.media.audiofx.Virtualizer: int VIRTUALIZATION_MODE_TRANSAURAL>
android.media.audiofx.Virtualizer$OnParameterChangeListener
<android.media.audiofx.Virtualizer$OnParameterChangeListener: void onParameterChange(android.media.audiofx.Virtualizer,int,int,short)>
android.media.audiofx.Virtualizer$Settings
<android.media.audiofx.Virtualizer$Settings: void <init>()>
<android.media.audiofx.Virtualizer$Settings: void <init>(java.lang.String)>
<android.media.audiofx.Virtualizer$Settings: short strength>
android.media.audiofx.Visualizer
<android.media.audiofx.Visualizer: void <init>(int)>
<android.media.audiofx.Visualizer: void finalize()>
<android.media.audiofx.Visualizer: int getCaptureSize()>
<android.media.audiofx.Visualizer: int[] getCaptureSizeRange()>
<android.media.audiofx.Visualizer: boolean getEnabled()>
<android.media.audiofx.Visualizer: int getFft(byte[])>
<android.media.audiofx.Visualizer: int getMaxCaptureRate()>
<android.media.audiofx.Visualizer: int getMeasurementMode()>
<android.media.audiofx.Visualizer: int getMeasurementPeakRms(android.media.audiofx.Visualizer$MeasurementPeakRms)>
<android.media.audiofx.Visualizer: int getSamplingRate()>
<android.media.audiofx.Visualizer: int getScalingMode()>
<android.media.audiofx.Visualizer: int getWaveForm(byte[])>
<android.media.audiofx.Visualizer: void release()>
<android.media.audiofx.Visualizer: int setCaptureSize(int)>
<android.media.audiofx.Visualizer: int setDataCaptureListener(android.media.audiofx.Visualizer$OnDataCaptureListener,int,boolean,boolean)>
<android.media.audiofx.Visualizer: int setEnabled(boolean)>
<android.media.audiofx.Visualizer: int setMeasurementMode(int)>
<android.media.audiofx.Visualizer: int setScalingMode(int)>
<android.media.audiofx.Visualizer: int ALREADY_EXISTS>
<android.media.audiofx.Visualizer: int ERROR>
<android.media.audiofx.Visualizer: int ERROR_BAD_VALUE>
<android.media.audiofx.Visualizer: int ERROR_DEAD_OBJECT>
<android.media.audiofx.Visualizer: int ERROR_INVALID_OPERATION>
<android.media.audiofx.Visualizer: int ERROR_NO_INIT>
<android.media.audiofx.Visualizer: int ERROR_NO_MEMORY>
<android.media.audiofx.Visualizer: int MEASUREMENT_MODE_NONE>
<android.media.audiofx.Visualizer: int MEASUREMENT_MODE_PEAK_RMS>
<android.media.audiofx.Visualizer: int SCALING_MODE_AS_PLAYED>
<android.media.audiofx.Visualizer: int SCALING_MODE_NORMALIZED>
<android.media.audiofx.Visualizer: int STATE_ENABLED>
<android.media.audiofx.Visualizer: int STATE_INITIALIZED>
<android.media.audiofx.Visualizer: int STATE_UNINITIALIZED>
<android.media.audiofx.Visualizer: int SUCCESS>
android.media.audiofx.Visualizer$MeasurementPeakRms
<android.media.audiofx.Visualizer$MeasurementPeakRms: void <init>()>
<android.media.audiofx.Visualizer$MeasurementPeakRms: int mPeak>
<android.media.audiofx.Visualizer$MeasurementPeakRms: int mRms>
android.media.audiofx.Visualizer$OnDataCaptureListener
<android.media.audiofx.Visualizer$OnDataCaptureListener: void onFftDataCapture(android.media.audiofx.Visualizer,byte[],int)>
<android.media.audiofx.Visualizer$OnDataCaptureListener: void onWaveFormDataCapture(android.media.audiofx.Visualizer,byte[],int)>
android.media.browse.MediaBrowser
<android.media.browse.MediaBrowser: void <init>(android.content.Context,android.content.ComponentName,android.media.browse.MediaBrowser$ConnectionCallback,android.os.Bundle)>
<android.media.browse.MediaBrowser: void connect()>
<android.media.browse.MediaBrowser: void disconnect()>
<android.media.browse.MediaBrowser: android.os.Bundle getExtras()>
<android.media.browse.MediaBrowser: void getItem(java.lang.String,android.media.browse.MediaBrowser$ItemCallback)>
<android.media.browse.MediaBrowser: java.lang.String getRoot()>
<android.media.browse.MediaBrowser: android.content.ComponentName getServiceComponent()>
<android.media.browse.MediaBrowser: android.media.session.MediaSession$Token getSessionToken()>
<android.media.browse.MediaBrowser: boolean isConnected()>
<android.media.browse.MediaBrowser: void subscribe(java.lang.String,android.media.browse.MediaBrowser$SubscriptionCallback)>
<android.media.browse.MediaBrowser: void subscribe(java.lang.String,android.os.Bundle,android.media.browse.MediaBrowser$SubscriptionCallback)>
<android.media.browse.MediaBrowser: void unsubscribe(java.lang.String)>
<android.media.browse.MediaBrowser: void unsubscribe(java.lang.String,android.media.browse.MediaBrowser$SubscriptionCallback)>
<android.media.browse.MediaBrowser: java.lang.String EXTRA_PAGE>
<android.media.browse.MediaBrowser: java.lang.String EXTRA_PAGE_SIZE>
android.media.browse.MediaBrowser$ConnectionCallback
<android.media.browse.MediaBrowser$ConnectionCallback: void <init>()>
<android.media.browse.MediaBrowser$ConnectionCallback: void onConnected()>
<android.media.browse.MediaBrowser$ConnectionCallback: void onConnectionFailed()>
<android.media.browse.MediaBrowser$ConnectionCallback: void onConnectionSuspended()>
android.media.browse.MediaBrowser$ItemCallback
<android.media.browse.MediaBrowser$ItemCallback: void <init>()>
<android.media.browse.MediaBrowser$ItemCallback: void onError(java.lang.String)>
<android.media.browse.MediaBrowser$ItemCallback: void onItemLoaded(android.media.browse.MediaBrowser$MediaItem)>
android.media.browse.MediaBrowser$MediaItem
<android.media.browse.MediaBrowser$MediaItem: void <init>(android.media.MediaDescription,int)>
<android.media.browse.MediaBrowser$MediaItem: int describeContents()>
<android.media.browse.MediaBrowser$MediaItem: android.media.MediaDescription getDescription()>
<android.media.browse.MediaBrowser$MediaItem: int getFlags()>
<android.media.browse.MediaBrowser$MediaItem: java.lang.String getMediaId()>
<android.media.browse.MediaBrowser$MediaItem: boolean isBrowsable()>
<android.media.browse.MediaBrowser$MediaItem: boolean isPlayable()>
<android.media.browse.MediaBrowser$MediaItem: void writeToParcel(android.os.Parcel,int)>
<android.media.browse.MediaBrowser$MediaItem: android.os.Parcelable$Creator CREATOR>
<android.media.browse.MediaBrowser$MediaItem: int FLAG_BROWSABLE>
<android.media.browse.MediaBrowser$MediaItem: int FLAG_PLAYABLE>
android.media.browse.MediaBrowser$SubscriptionCallback
<android.media.browse.MediaBrowser$SubscriptionCallback: void <init>()>
<android.media.browse.MediaBrowser$SubscriptionCallback: void onChildrenLoaded(java.lang.String,java.util.List)>
<android.media.browse.MediaBrowser$SubscriptionCallback: void onChildrenLoaded(java.lang.String,java.util.List,android.os.Bundle)>
<android.media.browse.MediaBrowser$SubscriptionCallback: void onError(java.lang.String)>
<android.media.browse.MediaBrowser$SubscriptionCallback: void onError(java.lang.String,android.os.Bundle)>
android.media.effect.Effect
<android.media.effect.Effect: void <init>()>
<android.media.effect.Effect: void apply(int,int,int,int)>
<android.media.effect.Effect: java.lang.String getName()>
<android.media.effect.Effect: void release()>
<android.media.effect.Effect: void setParameter(java.lang.String,java.lang.Object)>
<android.media.effect.Effect: void setUpdateListener(android.media.effect.EffectUpdateListener)>
android.media.effect.EffectContext
<android.media.effect.EffectContext: android.media.effect.EffectContext createWithCurrentGlContext()>
<android.media.effect.EffectContext: android.media.effect.EffectFactory getFactory()>
<android.media.effect.EffectContext: void release()>
android.media.effect.EffectFactory
<android.media.effect.EffectFactory: android.media.effect.Effect createEffect(java.lang.String)>
<android.media.effect.EffectFactory: boolean isEffectSupported(java.lang.String)>
<android.media.effect.EffectFactory: java.lang.String EFFECT_AUTOFIX>
<android.media.effect.EffectFactory: java.lang.String EFFECT_BACKDROPPER>
<android.media.effect.EffectFactory: java.lang.String EFFECT_BITMAPOVERLAY>
<android.media.effect.EffectFactory: java.lang.String EFFECT_BLACKWHITE>
<android.media.effect.EffectFactory: java.lang.String EFFECT_BRIGHTNESS>
<android.media.effect.EffectFactory: java.lang.String EFFECT_CONTRAST>
<android.media.effect.EffectFactory: java.lang.String EFFECT_CROP>
<android.media.effect.EffectFactory: java.lang.String EFFECT_CROSSPROCESS>
<android.media.effect.EffectFactory: java.lang.String EFFECT_DOCUMENTARY>
<android.media.effect.EffectFactory: java.lang.String EFFECT_DUOTONE>
<android.media.effect.EffectFactory: java.lang.String EFFECT_FILLLIGHT>
<android.media.effect.EffectFactory: java.lang.String EFFECT_FISHEYE>
<android.media.effect.EffectFactory: java.lang.String EFFECT_FLIP>
<android.media.effect.EffectFactory: java.lang.String EFFECT_GRAIN>
<android.media.effect.EffectFactory: java.lang.String EFFECT_GRAYSCALE>
<android.media.effect.EffectFactory: java.lang.String EFFECT_LOMOISH>
<android.media.effect.EffectFactory: java.lang.String EFFECT_NEGATIVE>
<android.media.effect.EffectFactory: java.lang.String EFFECT_POSTERIZE>
<android.media.effect.EffectFactory: java.lang.String EFFECT_REDEYE>
<android.media.effect.EffectFactory: java.lang.String EFFECT_ROTATE>
<android.media.effect.EffectFactory: java.lang.String EFFECT_SATURATE>
<android.media.effect.EffectFactory: java.lang.String EFFECT_SEPIA>
<android.media.effect.EffectFactory: java.lang.String EFFECT_SHARPEN>
<android.media.effect.EffectFactory: java.lang.String EFFECT_STRAIGHTEN>
<android.media.effect.EffectFactory: java.lang.String EFFECT_TEMPERATURE>
<android.media.effect.EffectFactory: java.lang.String EFFECT_TINT>
<android.media.effect.EffectFactory: java.lang.String EFFECT_VIGNETTE>
android.media.effect.EffectUpdateListener
<android.media.effect.EffectUpdateListener: void onEffectUpdated(android.media.effect.Effect,java.lang.Object)>
android.media.metrics.BundleSession
<android.media.metrics.BundleSession: void close()>
<android.media.metrics.BundleSession: android.media.metrics.LogSessionId getSessionId()>
<android.media.metrics.BundleSession: void reportBundleMetrics(android.os.PersistableBundle)>
<android.media.metrics.BundleSession: java.lang.String KEY_STATSD_ATOM>
android.media.metrics.EditingSession
<android.media.metrics.EditingSession: void close()>
<android.media.metrics.EditingSession: android.media.metrics.LogSessionId getSessionId()>
android.media.metrics.Event
<android.media.metrics.Event: android.os.Bundle getMetricsBundle()>
<android.media.metrics.Event: long getTimeSinceCreatedMillis()>
android.media.metrics.LogSessionId
<android.media.metrics.LogSessionId: java.lang.String getStringId()>
<android.media.metrics.LogSessionId: android.media.metrics.LogSessionId LOG_SESSION_ID_NONE>
android.media.metrics.MediaMetricsManager
<android.media.metrics.MediaMetricsManager: android.media.metrics.BundleSession createBundleSession()>
<android.media.metrics.MediaMetricsManager: android.media.metrics.EditingSession createEditingSession()>
<android.media.metrics.MediaMetricsManager: android.media.metrics.PlaybackSession createPlaybackSession()>
<android.media.metrics.MediaMetricsManager: android.media.metrics.RecordingSession createRecordingSession()>
<android.media.metrics.MediaMetricsManager: android.media.metrics.TranscodingSession createTranscodingSession()>
<android.media.metrics.MediaMetricsManager: void releaseSessionId(java.lang.String)>
<android.media.metrics.MediaMetricsManager: long INVALID_TIMESTAMP>
android.media.metrics.NetworkEvent
<android.media.metrics.NetworkEvent: int describeContents()>
<android.media.metrics.NetworkEvent: int getNetworkType()>
<android.media.metrics.NetworkEvent: void writeToParcel(android.os.Parcel,int)>
<android.media.metrics.NetworkEvent: android.os.Parcelable$Creator CREATOR>
<android.media.metrics.NetworkEvent: int NETWORK_TYPE_2G>
<android.media.metrics.NetworkEvent: int NETWORK_TYPE_3G>
<android.media.metrics.NetworkEvent: int NETWORK_TYPE_4G>
<android.media.metrics.NetworkEvent: int NETWORK_TYPE_5G_NSA>
<android.media.metrics.NetworkEvent: int NETWORK_TYPE_5G_SA>
<android.media.metrics.NetworkEvent: int NETWORK_TYPE_ETHERNET>
<android.media.metrics.NetworkEvent: int NETWORK_TYPE_OFFLINE>
<android.media.metrics.NetworkEvent: int NETWORK_TYPE_OTHER>
<android.media.metrics.NetworkEvent: int NETWORK_TYPE_UNKNOWN>
<android.media.metrics.NetworkEvent: int NETWORK_TYPE_WIFI>
android.media.metrics.NetworkEvent$Builder
<android.media.metrics.NetworkEvent$Builder: void <init>()>
<android.media.metrics.NetworkEvent$Builder: android.media.metrics.NetworkEvent build()>
<android.media.metrics.NetworkEvent$Builder: android.media.metrics.NetworkEvent$Builder setMetricsBundle(android.os.Bundle)>
<android.media.metrics.NetworkEvent$Builder: android.media.metrics.NetworkEvent$Builder setNetworkType(int)>
<android.media.metrics.NetworkEvent$Builder: android.media.metrics.NetworkEvent$Builder setTimeSinceCreatedMillis(long)>
android.media.metrics.PlaybackErrorEvent
<android.media.metrics.PlaybackErrorEvent: int describeContents()>
<android.media.metrics.PlaybackErrorEvent: int getErrorCode()>
<android.media.metrics.PlaybackErrorEvent: int getSubErrorCode()>
<android.media.metrics.PlaybackErrorEvent: void writeToParcel(android.os.Parcel,int)>
<android.media.metrics.PlaybackErrorEvent: android.os.Parcelable$Creator CREATOR>
<android.media.metrics.PlaybackErrorEvent: int ERROR_AUDIO_TRACK_INIT_FAILED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_AUDIO_TRACK_OTHER>
<android.media.metrics.PlaybackErrorEvent: int ERROR_AUDIO_TRACK_WRITE_FAILED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_DECODER_INIT_FAILED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_DECODING_FAILED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_DECODING_FORMAT_EXCEEDS_CAPABILITIES>
<android.media.metrics.PlaybackErrorEvent: int ERROR_DECODING_FORMAT_UNSUPPORTED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_DECODING_OTHER>
<android.media.metrics.PlaybackErrorEvent: int ERROR_DRM_CONTENT_ERROR>
<android.media.metrics.PlaybackErrorEvent: int ERROR_DRM_DEVICE_REVOKED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_DRM_DISALLOWED_OPERATION>
<android.media.metrics.PlaybackErrorEvent: int ERROR_DRM_LICENSE_ACQUISITION_FAILED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_DRM_OTHER>
<android.media.metrics.PlaybackErrorEvent: int ERROR_DRM_PROVISIONING_FAILED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_DRM_SCHEME_UNSUPPORTED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_DRM_SYSTEM_ERROR>
<android.media.metrics.PlaybackErrorEvent: int ERROR_IO_BAD_HTTP_STATUS>
<android.media.metrics.PlaybackErrorEvent: int ERROR_IO_CONNECTION_CLOSED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_IO_CONNECTION_TIMEOUT>
<android.media.metrics.PlaybackErrorEvent: int ERROR_IO_DNS_FAILED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_IO_FILE_NOT_FOUND>
<android.media.metrics.PlaybackErrorEvent: int ERROR_IO_NETWORK_CONNECTION_FAILED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_IO_NETWORK_UNAVAILABLE>
<android.media.metrics.PlaybackErrorEvent: int ERROR_IO_NO_PERMISSION>
<android.media.metrics.PlaybackErrorEvent: int ERROR_IO_OTHER>
<android.media.metrics.PlaybackErrorEvent: int ERROR_OTHER>
<android.media.metrics.PlaybackErrorEvent: int ERROR_PARSING_CONTAINER_MALFORMED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_PARSING_CONTAINER_UNSUPPORTED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_PARSING_MANIFEST_MALFORMED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_PARSING_MANIFEST_UNSUPPORTED>
<android.media.metrics.PlaybackErrorEvent: int ERROR_PARSING_OTHER>
<android.media.metrics.PlaybackErrorEvent: int ERROR_PLAYER_BEHIND_LIVE_WINDOW>
<android.media.metrics.PlaybackErrorEvent: int ERROR_PLAYER_OTHER>
<android.media.metrics.PlaybackErrorEvent: int ERROR_PLAYER_REMOTE>
<android.media.metrics.PlaybackErrorEvent: int ERROR_RUNTIME>
<android.media.metrics.PlaybackErrorEvent: int ERROR_UNKNOWN>
android.media.metrics.PlaybackErrorEvent$Builder
<android.media.metrics.PlaybackErrorEvent$Builder: void <init>()>
<android.media.metrics.PlaybackErrorEvent$Builder: android.media.metrics.PlaybackErrorEvent build()>
<android.media.metrics.PlaybackErrorEvent$Builder: android.media.metrics.PlaybackErrorEvent$Builder setErrorCode(int)>
<android.media.metrics.PlaybackErrorEvent$Builder: android.media.metrics.PlaybackErrorEvent$Builder setException(java.lang.Exception)>
<android.media.metrics.PlaybackErrorEvent$Builder: android.media.metrics.PlaybackErrorEvent$Builder setMetricsBundle(android.os.Bundle)>
<android.media.metrics.PlaybackErrorEvent$Builder: android.media.metrics.PlaybackErrorEvent$Builder setSubErrorCode(int)>
<android.media.metrics.PlaybackErrorEvent$Builder: android.media.metrics.PlaybackErrorEvent$Builder setTimeSinceCreatedMillis(long)>
android.media.metrics.PlaybackMetrics
<android.media.metrics.PlaybackMetrics: int describeContents()>
<android.media.metrics.PlaybackMetrics: int getAudioUnderrunCount()>
<android.media.metrics.PlaybackMetrics: int getContentType()>
<android.media.metrics.PlaybackMetrics: byte[] getDrmSessionId()>
<android.media.metrics.PlaybackMetrics: int getDrmType()>
<android.media.metrics.PlaybackMetrics: long[] getExperimentIds()>
<android.media.metrics.PlaybackMetrics: long getLocalBytesRead()>
<android.media.metrics.PlaybackMetrics: long getMediaDurationMillis()>
<android.media.metrics.PlaybackMetrics: android.os.Bundle getMetricsBundle()>
<android.media.metrics.PlaybackMetrics: long getNetworkBytesRead()>
<android.media.metrics.PlaybackMetrics: long getNetworkTransferDurationMillis()>
<android.media.metrics.PlaybackMetrics: int getPlaybackType()>
<android.media.metrics.PlaybackMetrics: java.lang.String getPlayerName()>
<android.media.metrics.PlaybackMetrics: java.lang.String getPlayerVersion()>
<android.media.metrics.PlaybackMetrics: int getStreamSource()>
<android.media.metrics.PlaybackMetrics: int getStreamType()>
<android.media.metrics.PlaybackMetrics: int getVideoFramesDropped()>
<android.media.metrics.PlaybackMetrics: int getVideoFramesPlayed()>
<android.media.metrics.PlaybackMetrics: void writeToParcel(android.os.Parcel,int)>
<android.media.metrics.PlaybackMetrics: int CONTENT_TYPE_AD>
<android.media.metrics.PlaybackMetrics: int CONTENT_TYPE_MAIN>
<android.media.metrics.PlaybackMetrics: int CONTENT_TYPE_OTHER>
<android.media.metrics.PlaybackMetrics: int CONTENT_TYPE_UNKNOWN>
<android.media.metrics.PlaybackMetrics: android.os.Parcelable$Creator CREATOR>
<android.media.metrics.PlaybackMetrics: int DRM_TYPE_CLEARKEY>
<android.media.metrics.PlaybackMetrics: int DRM_TYPE_NONE>
<android.media.metrics.PlaybackMetrics: int DRM_TYPE_OTHER>
<android.media.metrics.PlaybackMetrics: int DRM_TYPE_PLAY_READY>
<android.media.metrics.PlaybackMetrics: int DRM_TYPE_WIDEVINE_L1>
<android.media.metrics.PlaybackMetrics: int DRM_TYPE_WIDEVINE_L3>
<android.media.metrics.PlaybackMetrics: int DRM_TYPE_WV_L3_FALLBACK>
<android.media.metrics.PlaybackMetrics: int PLAYBACK_TYPE_LIVE>
<android.media.metrics.PlaybackMetrics: int PLAYBACK_TYPE_OTHER>
<android.media.metrics.PlaybackMetrics: int PLAYBACK_TYPE_UNKNOWN>
<android.media.metrics.PlaybackMetrics: int PLAYBACK_TYPE_VOD>
<android.media.metrics.PlaybackMetrics: int STREAM_SOURCE_DEVICE>
<android.media.metrics.PlaybackMetrics: int STREAM_SOURCE_MIXED>
<android.media.metrics.PlaybackMetrics: int STREAM_SOURCE_NETWORK>
<android.media.metrics.PlaybackMetrics: int STREAM_SOURCE_UNKNOWN>
<android.media.metrics.PlaybackMetrics: int STREAM_TYPE_DASH>
<android.media.metrics.PlaybackMetrics: int STREAM_TYPE_HLS>
<android.media.metrics.PlaybackMetrics: int STREAM_TYPE_OTHER>
<android.media.metrics.PlaybackMetrics: int STREAM_TYPE_PROGRESSIVE>
<android.media.metrics.PlaybackMetrics: int STREAM_TYPE_SS>
<android.media.metrics.PlaybackMetrics: int STREAM_TYPE_UNKNOWN>
android.media.metrics.PlaybackMetrics$Builder
<android.media.metrics.PlaybackMetrics$Builder: void <init>()>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder addExperimentId(long)>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics build()>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setAudioUnderrunCount(int)>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setContentType(int)>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setDrmSessionId(byte[])>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setDrmType(int)>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setLocalBytesRead(long)>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setMediaDurationMillis(long)>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setMetricsBundle(android.os.Bundle)>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setNetworkBytesRead(long)>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setNetworkTransferDurationMillis(long)>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setPlaybackType(int)>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setPlayerName(java.lang.String)>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setPlayerVersion(java.lang.String)>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setStreamSource(int)>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setStreamType(int)>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setVideoFramesDropped(int)>
<android.media.metrics.PlaybackMetrics$Builder: android.media.metrics.PlaybackMetrics$Builder setVideoFramesPlayed(int)>
android.media.metrics.PlaybackSession
<android.media.metrics.PlaybackSession: void close()>
<android.media.metrics.PlaybackSession: android.media.metrics.LogSessionId getSessionId()>
<android.media.metrics.PlaybackSession: void reportNetworkEvent(android.media.metrics.NetworkEvent)>
<android.media.metrics.PlaybackSession: void reportPlaybackErrorEvent(android.media.metrics.PlaybackErrorEvent)>
<android.media.metrics.PlaybackSession: void reportPlaybackMetrics(android.media.metrics.PlaybackMetrics)>
<android.media.metrics.PlaybackSession: void reportPlaybackStateEvent(android.media.metrics.PlaybackStateEvent)>
<android.media.metrics.PlaybackSession: void reportTrackChangeEvent(android.media.metrics.TrackChangeEvent)>
android.media.metrics.PlaybackStateEvent
<android.media.metrics.PlaybackStateEvent: int describeContents()>
<android.media.metrics.PlaybackStateEvent: int getState()>
<android.media.metrics.PlaybackStateEvent: void writeToParcel(android.os.Parcel,int)>
<android.media.metrics.PlaybackStateEvent: android.os.Parcelable$Creator CREATOR>
<android.media.metrics.PlaybackStateEvent: int STATE_ABANDONED>
<android.media.metrics.PlaybackStateEvent: int STATE_BUFFERING>
<android.media.metrics.PlaybackStateEvent: int STATE_ENDED>
<android.media.metrics.PlaybackStateEvent: int STATE_FAILED>
<android.media.metrics.PlaybackStateEvent: int STATE_INTERRUPTED_BY_AD>
<android.media.metrics.PlaybackStateEvent: int STATE_JOINING_BACKGROUND>
<android.media.metrics.PlaybackStateEvent: int STATE_JOINING_FOREGROUND>
<android.media.metrics.PlaybackStateEvent: int STATE_NOT_STARTED>
<android.media.metrics.PlaybackStateEvent: int STATE_PAUSED>
<android.media.metrics.PlaybackStateEvent: int STATE_PAUSED_BUFFERING>
<android.media.metrics.PlaybackStateEvent: int STATE_PLAYING>
<android.media.metrics.PlaybackStateEvent: int STATE_SEEKING>
<android.media.metrics.PlaybackStateEvent: int STATE_STOPPED>
<android.media.metrics.PlaybackStateEvent: int STATE_SUPPRESSED>
<android.media.metrics.PlaybackStateEvent: int STATE_SUPPRESSED_BUFFERING>
android.media.metrics.PlaybackStateEvent$Builder
<android.media.metrics.PlaybackStateEvent$Builder: void <init>()>
<android.media.metrics.PlaybackStateEvent$Builder: android.media.metrics.PlaybackStateEvent build()>
<android.media.metrics.PlaybackStateEvent$Builder: android.media.metrics.PlaybackStateEvent$Builder setMetricsBundle(android.os.Bundle)>
<android.media.metrics.PlaybackStateEvent$Builder: android.media.metrics.PlaybackStateEvent$Builder setState(int)>
<android.media.metrics.PlaybackStateEvent$Builder: android.media.metrics.PlaybackStateEvent$Builder setTimeSinceCreatedMillis(long)>
android.media.metrics.RecordingSession
<android.media.metrics.RecordingSession: void close()>
<android.media.metrics.RecordingSession: android.media.metrics.LogSessionId getSessionId()>
android.media.metrics.TrackChangeEvent
<android.media.metrics.TrackChangeEvent: int describeContents()>
<android.media.metrics.TrackChangeEvent: int getAudioSampleRate()>
<android.media.metrics.TrackChangeEvent: int getBitrate()>
<android.media.metrics.TrackChangeEvent: int getChannelCount()>
<android.media.metrics.TrackChangeEvent: java.lang.String getCodecName()>
<android.media.metrics.TrackChangeEvent: java.lang.String getContainerMimeType()>
<android.media.metrics.TrackChangeEvent: int getHeight()>
<android.media.metrics.TrackChangeEvent: java.lang.String getLanguage()>
<android.media.metrics.TrackChangeEvent: java.lang.String getLanguageRegion()>
<android.media.metrics.TrackChangeEvent: java.lang.String getSampleMimeType()>
<android.media.metrics.TrackChangeEvent: int getTrackChangeReason()>
<android.media.metrics.TrackChangeEvent: int getTrackState()>
<android.media.metrics.TrackChangeEvent: int getTrackType()>
<android.media.metrics.TrackChangeEvent: float getVideoFrameRate()>
<android.media.metrics.TrackChangeEvent: int getWidth()>
<android.media.metrics.TrackChangeEvent: void writeToParcel(android.os.Parcel,int)>
<android.media.metrics.TrackChangeEvent: android.os.Parcelable$Creator CREATOR>
<android.media.metrics.TrackChangeEvent: int TRACK_CHANGE_REASON_ADAPTIVE>
<android.media.metrics.TrackChangeEvent: int TRACK_CHANGE_REASON_INITIAL>
<android.media.metrics.TrackChangeEvent: int TRACK_CHANGE_REASON_MANUAL>
<android.media.metrics.TrackChangeEvent: int TRACK_CHANGE_REASON_OTHER>
<android.media.metrics.TrackChangeEvent: int TRACK_CHANGE_REASON_UNKNOWN>
<android.media.metrics.TrackChangeEvent: int TRACK_STATE_OFF>
<android.media.metrics.TrackChangeEvent: int TRACK_STATE_ON>
<android.media.metrics.TrackChangeEvent: int TRACK_TYPE_AUDIO>
<android.media.metrics.TrackChangeEvent: int TRACK_TYPE_TEXT>
<android.media.metrics.TrackChangeEvent: int TRACK_TYPE_VIDEO>
android.media.metrics.TrackChangeEvent$Builder
<android.media.metrics.TrackChangeEvent$Builder: void <init>(int)>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent build()>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent$Builder setAudioSampleRate(int)>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent$Builder setBitrate(int)>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent$Builder setChannelCount(int)>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent$Builder setCodecName(java.lang.String)>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent$Builder setContainerMimeType(java.lang.String)>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent$Builder setHeight(int)>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent$Builder setLanguage(java.lang.String)>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent$Builder setLanguageRegion(java.lang.String)>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent$Builder setMetricsBundle(android.os.Bundle)>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent$Builder setSampleMimeType(java.lang.String)>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent$Builder setTimeSinceCreatedMillis(long)>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent$Builder setTrackChangeReason(int)>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent$Builder setTrackState(int)>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent$Builder setVideoFrameRate(float)>
<android.media.metrics.TrackChangeEvent$Builder: android.media.metrics.TrackChangeEvent$Builder setWidth(int)>
android.media.metrics.TranscodingSession
<android.media.metrics.TranscodingSession: void close()>
<android.media.metrics.TranscodingSession: android.media.metrics.LogSessionId getSessionId()>
android.media.midi.MidiDevice
<android.media.midi.MidiDevice: void close()>
<android.media.midi.MidiDevice: android.media.midi.MidiDevice$MidiConnection connectPorts(android.media.midi.MidiInputPort,int)>
<android.media.midi.MidiDevice: android.media.midi.MidiDeviceInfo getInfo()>
<android.media.midi.MidiDevice: android.media.midi.MidiInputPort openInputPort(int)>
<android.media.midi.MidiDevice: android.media.midi.MidiOutputPort openOutputPort(int)>
android.media.midi.MidiDevice$MidiConnection
<android.media.midi.MidiDevice$MidiConnection: void close()>
android.media.midi.MidiDeviceInfo
<android.media.midi.MidiDeviceInfo: int describeContents()>
<android.media.midi.MidiDeviceInfo: int getDefaultProtocol()>
<android.media.midi.MidiDeviceInfo: int getId()>
<android.media.midi.MidiDeviceInfo: int getInputPortCount()>
<android.media.midi.MidiDeviceInfo: int getOutputPortCount()>
<android.media.midi.MidiDeviceInfo: android.media.midi.MidiDeviceInfo$PortInfo[] getPorts()>
<android.media.midi.MidiDeviceInfo: android.os.Bundle getProperties()>
<android.media.midi.MidiDeviceInfo: int getType()>
<android.media.midi.MidiDeviceInfo: boolean isPrivate()>
<android.media.midi.MidiDeviceInfo: void writeToParcel(android.os.Parcel,int)>
<android.media.midi.MidiDeviceInfo: android.os.Parcelable$Creator CREATOR>
<android.media.midi.MidiDeviceInfo: java.lang.String PROPERTY_BLUETOOTH_DEVICE>
<android.media.midi.MidiDeviceInfo: java.lang.String PROPERTY_MANUFACTURER>
<android.media.midi.MidiDeviceInfo: java.lang.String PROPERTY_NAME>
<android.media.midi.MidiDeviceInfo: java.lang.String PROPERTY_PRODUCT>
<android.media.midi.MidiDeviceInfo: java.lang.String PROPERTY_SERIAL_NUMBER>
<android.media.midi.MidiDeviceInfo: java.lang.String PROPERTY_USB_DEVICE>
<android.media.midi.MidiDeviceInfo: java.lang.String PROPERTY_VERSION>
<android.media.midi.MidiDeviceInfo: int PROTOCOL_UMP_MIDI_1_0_UP_TO_128_BITS>
<android.media.midi.MidiDeviceInfo: int PROTOCOL_UMP_MIDI_1_0_UP_TO_128_BITS_AND_JRTS>
<android.media.midi.MidiDeviceInfo: int PROTOCOL_UMP_MIDI_1_0_UP_TO_64_BITS>
<android.media.midi.MidiDeviceInfo: int PROTOCOL_UMP_MIDI_1_0_UP_TO_64_BITS_AND_JRTS>
<android.media.midi.MidiDeviceInfo: int PROTOCOL_UMP_MIDI_2_0>
<android.media.midi.MidiDeviceInfo: int PROTOCOL_UMP_MIDI_2_0_AND_JRTS>
<android.media.midi.MidiDeviceInfo: int PROTOCOL_UMP_USE_MIDI_CI>
<android.media.midi.MidiDeviceInfo: int PROTOCOL_UNKNOWN>
<android.media.midi.MidiDeviceInfo: int TYPE_BLUETOOTH>
<android.media.midi.MidiDeviceInfo: int TYPE_USB>
<android.media.midi.MidiDeviceInfo: int TYPE_VIRTUAL>
android.media.midi.MidiDeviceInfo$PortInfo
<android.media.midi.MidiDeviceInfo$PortInfo: java.lang.String getName()>
<android.media.midi.MidiDeviceInfo$PortInfo: int getPortNumber()>
<android.media.midi.MidiDeviceInfo$PortInfo: int getType()>
<android.media.midi.MidiDeviceInfo$PortInfo: int TYPE_INPUT>
<android.media.midi.MidiDeviceInfo$PortInfo: int TYPE_OUTPUT>
android.media.midi.MidiDeviceService
<android.media.midi.MidiDeviceService: void <init>()>
<android.media.midi.MidiDeviceService: android.media.midi.MidiDeviceInfo getDeviceInfo()>
<android.media.midi.MidiDeviceService: android.media.midi.MidiReceiver[] getOutputPortReceivers()>
<android.media.midi.MidiDeviceService: android.os.IBinder onBind(android.content.Intent)>
<android.media.midi.MidiDeviceService: void onClose()>
<android.media.midi.MidiDeviceService: void onDeviceStatusChanged(android.media.midi.MidiDeviceStatus)>
<android.media.midi.MidiDeviceService: android.media.midi.MidiReceiver[] onGetInputPortReceivers()>
<android.media.midi.MidiDeviceService: java.lang.String SERVICE_INTERFACE>
android.media.midi.MidiDeviceStatus
<android.media.midi.MidiDeviceStatus: int describeContents()>
<android.media.midi.MidiDeviceStatus: android.media.midi.MidiDeviceInfo getDeviceInfo()>
<android.media.midi.MidiDeviceStatus: int getOutputPortOpenCount(int)>
<android.media.midi.MidiDeviceStatus: boolean isInputPortOpen(int)>
<android.media.midi.MidiDeviceStatus: void writeToParcel(android.os.Parcel,int)>
<android.media.midi.MidiDeviceStatus: android.os.Parcelable$Creator CREATOR>
android.media.midi.MidiInputPort
<android.media.midi.MidiInputPort: void close()>
<android.media.midi.MidiInputPort: int getPortNumber()>
<android.media.midi.MidiInputPort: void onSend(byte[],int,int,long)>
android.media.midi.MidiManager
<android.media.midi.MidiManager: android.media.midi.MidiDeviceInfo[] getDevices()>
<android.media.midi.MidiManager: java.util.Set getDevicesForTransport(int)>
<android.media.midi.MidiManager: void openBluetoothDevice(android.bluetooth.BluetoothDevice,android.media.midi.MidiManager$OnDeviceOpenedListener,android.os.Handler)>
<android.media.midi.MidiManager: void openDevice(android.media.midi.MidiDeviceInfo,android.media.midi.MidiManager$OnDeviceOpenedListener,android.os.Handler)>
<android.media.midi.MidiManager: void registerDeviceCallback(android.media.midi.MidiManager$DeviceCallback,android.os.Handler)>
<android.media.midi.MidiManager: void registerDeviceCallback(int,java.util.concurrent.Executor,android.media.midi.MidiManager$DeviceCallback)>
<android.media.midi.MidiManager: void unregisterDeviceCallback(android.media.midi.MidiManager$DeviceCallback)>
<android.media.midi.MidiManager: int TRANSPORT_MIDI_BYTE_STREAM>
<android.media.midi.MidiManager: int TRANSPORT_UNIVERSAL_MIDI_PACKETS>
android.media.midi.MidiManager$DeviceCallback
<android.media.midi.MidiManager$DeviceCallback: void <init>()>
<android.media.midi.MidiManager$DeviceCallback: void onDeviceAdded(android.media.midi.MidiDeviceInfo)>
<android.media.midi.MidiManager$DeviceCallback: void onDeviceRemoved(android.media.midi.MidiDeviceInfo)>
<android.media.midi.MidiManager$DeviceCallback: void onDeviceStatusChanged(android.media.midi.MidiDeviceStatus)>
android.media.midi.MidiManager$OnDeviceOpenedListener
<android.media.midi.MidiManager$OnDeviceOpenedListener: void onDeviceOpened(android.media.midi.MidiDevice)>
android.media.midi.MidiOutputPort
<android.media.midi.MidiOutputPort: void close()>
<android.media.midi.MidiOutputPort: int getPortNumber()>
<android.media.midi.MidiOutputPort: void onConnect(android.media.midi.MidiReceiver)>
<android.media.midi.MidiOutputPort: void onDisconnect(android.media.midi.MidiReceiver)>
android.media.midi.MidiReceiver
<android.media.midi.MidiReceiver: void <init>()>
<android.media.midi.MidiReceiver: void <init>(int)>
<android.media.midi.MidiReceiver: void flush()>
<android.media.midi.MidiReceiver: int getMaxMessageSize()>
<android.media.midi.MidiReceiver: void onFlush()>
<android.media.midi.MidiReceiver: void onSend(byte[],int,int,long)>
<android.media.midi.MidiReceiver: void send(byte[],int,int)>
<android.media.midi.MidiReceiver: void send(byte[],int,int,long)>
android.media.midi.MidiSender
<android.media.midi.MidiSender: void <init>()>
<android.media.midi.MidiSender: void connect(android.media.midi.MidiReceiver)>
<android.media.midi.MidiSender: void disconnect(android.media.midi.MidiReceiver)>
<android.media.midi.MidiSender: void onConnect(android.media.midi.MidiReceiver)>
<android.media.midi.MidiSender: void onDisconnect(android.media.midi.MidiReceiver)>
android.media.projection.MediaProjection
<android.media.projection.MediaProjection: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,int,android.view.Surface,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>
<android.media.projection.MediaProjection: void registerCallback(android.media.projection.MediaProjection$Callback,android.os.Handler)>
<android.media.projection.MediaProjection: void stop()>
<android.media.projection.MediaProjection: void unregisterCallback(android.media.projection.MediaProjection$Callback)>
android.media.projection.MediaProjection$Callback
<android.media.projection.MediaProjection$Callback: void <init>()>
<android.media.projection.MediaProjection$Callback: void onStop()>
android.media.projection.MediaProjectionManager
<android.media.projection.MediaProjectionManager: android.content.Intent createScreenCaptureIntent()>
<android.media.projection.MediaProjectionManager: android.media.projection.MediaProjection getMediaProjection(int,android.content.Intent)>
android.media.session.MediaController
<android.media.session.MediaController: void <init>(android.content.Context,android.media.session.MediaSession$Token)>
<android.media.session.MediaController: void adjustVolume(int,int)>
<android.media.session.MediaController: boolean dispatchMediaButtonEvent(android.view.KeyEvent)>
<android.media.session.MediaController: android.os.Bundle getExtras()>
<android.media.session.MediaController: long getFlags()>
<android.media.session.MediaController: android.media.MediaMetadata getMetadata()>
<android.media.session.MediaController: java.lang.String getPackageName()>
<android.media.session.MediaController: android.media.session.MediaController$PlaybackInfo getPlaybackInfo()>
<android.media.session.MediaController: android.media.session.PlaybackState getPlaybackState()>
<android.media.session.MediaController: java.util.List getQueue()>
<android.media.session.MediaController: java.lang.CharSequence getQueueTitle()>
<android.media.session.MediaController: int getRatingType()>
<android.media.session.MediaController: android.app.PendingIntent getSessionActivity()>
<android.media.session.MediaController: android.os.Bundle getSessionInfo()>
<android.media.session.MediaController: android.media.session.MediaSession$Token getSessionToken()>
<android.media.session.MediaController: java.lang.String getTag()>
<android.media.session.MediaController: android.media.session.MediaController$TransportControls getTransportControls()>
<android.media.session.MediaController: void registerCallback(android.media.session.MediaController$Callback)>
<android.media.session.MediaController: void registerCallback(android.media.session.MediaController$Callback,android.os.Handler)>
<android.media.session.MediaController: void sendCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)>
<android.media.session.MediaController: void setVolumeTo(int,int)>
<android.media.session.MediaController: void unregisterCallback(android.media.session.MediaController$Callback)>
android.media.session.MediaController$Callback
<android.media.session.MediaController$Callback: void <init>()>
<android.media.session.MediaController$Callback: void onAudioInfoChanged(android.media.session.MediaController$PlaybackInfo)>
<android.media.session.MediaController$Callback: void onExtrasChanged(android.os.Bundle)>
<android.media.session.MediaController$Callback: void onMetadataChanged(android.media.MediaMetadata)>
<android.media.session.MediaController$Callback: void onPlaybackStateChanged(android.media.session.PlaybackState)>
<android.media.session.MediaController$Callback: void onQueueChanged(java.util.List)>
<android.media.session.MediaController$Callback: void onQueueTitleChanged(java.lang.CharSequence)>
<android.media.session.MediaController$Callback: void onSessionDestroyed()>
<android.media.session.MediaController$Callback: void onSessionEvent(java.lang.String,android.os.Bundle)>
android.media.session.MediaController$PlaybackInfo
<android.media.session.MediaController$PlaybackInfo: int describeContents()>
<android.media.session.MediaController$PlaybackInfo: android.media.AudioAttributes getAudioAttributes()>
<android.media.session.MediaController$PlaybackInfo: int getCurrentVolume()>
<android.media.session.MediaController$PlaybackInfo: int getMaxVolume()>
<android.media.session.MediaController$PlaybackInfo: int getPlaybackType()>
<android.media.session.MediaController$PlaybackInfo: int getVolumeControl()>
<android.media.session.MediaController$PlaybackInfo: java.lang.String getVolumeControlId()>
<android.media.session.MediaController$PlaybackInfo: void writeToParcel(android.os.Parcel,int)>
<android.media.session.MediaController$PlaybackInfo: android.os.Parcelable$Creator CREATOR>
<android.media.session.MediaController$PlaybackInfo: int PLAYBACK_TYPE_LOCAL>
<android.media.session.MediaController$PlaybackInfo: int PLAYBACK_TYPE_REMOTE>
android.media.session.MediaController$TransportControls
<android.media.session.MediaController$TransportControls: void fastForward()>
<android.media.session.MediaController$TransportControls: void pause()>
<android.media.session.MediaController$TransportControls: void play()>
<android.media.session.MediaController$TransportControls: void playFromMediaId(java.lang.String,android.os.Bundle)>
<android.media.session.MediaController$TransportControls: void playFromSearch(java.lang.String,android.os.Bundle)>
<android.media.session.MediaController$TransportControls: void playFromUri(android.net.Uri,android.os.Bundle)>
<android.media.session.MediaController$TransportControls: void prepare()>
<android.media.session.MediaController$TransportControls: void prepareFromMediaId(java.lang.String,android.os.Bundle)>
<android.media.session.MediaController$TransportControls: void prepareFromSearch(java.lang.String,android.os.Bundle)>
<android.media.session.MediaController$TransportControls: void prepareFromUri(android.net.Uri,android.os.Bundle)>
<android.media.session.MediaController$TransportControls: void rewind()>
<android.media.session.MediaController$TransportControls: void seekTo(long)>
<android.media.session.MediaController$TransportControls: void sendCustomAction(android.media.session.PlaybackState$CustomAction,android.os.Bundle)>
<android.media.session.MediaController$TransportControls: void sendCustomAction(java.lang.String,android.os.Bundle)>
<android.media.session.MediaController$TransportControls: void setPlaybackSpeed(float)>
<android.media.session.MediaController$TransportControls: void setRating(android.media.Rating)>
<android.media.session.MediaController$TransportControls: void skipToNext()>
<android.media.session.MediaController$TransportControls: void skipToPrevious()>
<android.media.session.MediaController$TransportControls: void skipToQueueItem(long)>
<android.media.session.MediaController$TransportControls: void stop()>
android.media.session.MediaSession
<android.media.session.MediaSession: void <init>(android.content.Context,java.lang.String)>
<android.media.session.MediaSession: void <init>(android.content.Context,java.lang.String,android.os.Bundle)>
<android.media.session.MediaSession: android.media.session.MediaController getController()>
<android.media.session.MediaSession: android.media.session.MediaSessionManager$RemoteUserInfo getCurrentControllerInfo()>
<android.media.session.MediaSession: android.media.session.MediaSession$Token getSessionToken()>
<android.media.session.MediaSession: boolean isActive()>
<android.media.session.MediaSession: void release()>
<android.media.session.MediaSession: void sendSessionEvent(java.lang.String,android.os.Bundle)>
<android.media.session.MediaSession: void setActive(boolean)>
<android.media.session.MediaSession: void setCallback(android.media.session.MediaSession$Callback)>
<android.media.session.MediaSession: void setCallback(android.media.session.MediaSession$Callback,android.os.Handler)>
<android.media.session.MediaSession: void setExtras(android.os.Bundle)>
<android.media.session.MediaSession: void setFlags(int)>
<android.media.session.MediaSession: void setMediaButtonBroadcastReceiver(android.content.ComponentName)>
<android.media.session.MediaSession: void setMediaButtonReceiver(android.app.PendingIntent)>
<android.media.session.MediaSession: void setMetadata(android.media.MediaMetadata)>
<android.media.session.MediaSession: void setPlaybackState(android.media.session.PlaybackState)>
<android.media.session.MediaSession: void setPlaybackToLocal(android.media.AudioAttributes)>
<android.media.session.MediaSession: void setPlaybackToRemote(android.media.VolumeProvider)>
<android.media.session.MediaSession: void setQueue(java.util.List)>
<android.media.session.MediaSession: void setQueueTitle(java.lang.CharSequence)>
<android.media.session.MediaSession: void setRatingType(int)>
<android.media.session.MediaSession: void setSessionActivity(android.app.PendingIntent)>
<android.media.session.MediaSession: int FLAG_HANDLES_MEDIA_BUTTONS>
<android.media.session.MediaSession: int FLAG_HANDLES_TRANSPORT_CONTROLS>
android.media.session.MediaSession$Callback
<android.media.session.MediaSession$Callback: void <init>()>
<android.media.session.MediaSession$Callback: void onCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)>
<android.media.session.MediaSession$Callback: void onCustomAction(java.lang.String,android.os.Bundle)>
<android.media.session.MediaSession$Callback: void onFastForward()>
<android.media.session.MediaSession$Callback: boolean onMediaButtonEvent(android.content.Intent)>
<android.media.session.MediaSession$Callback: void onPause()>
<android.media.session.MediaSession$Callback: void onPlay()>
<android.media.session.MediaSession$Callback: void onPlayFromMediaId(java.lang.String,android.os.Bundle)>
<android.media.session.MediaSession$Callback: void onPlayFromSearch(java.lang.String,android.os.Bundle)>
<android.media.session.MediaSession$Callback: void onPlayFromUri(android.net.Uri,android.os.Bundle)>
<android.media.session.MediaSession$Callback: void onPrepare()>
<android.media.session.MediaSession$Callback: void onPrepareFromMediaId(java.lang.String,android.os.Bundle)>
<android.media.session.MediaSession$Callback: void onPrepareFromSearch(java.lang.String,android.os.Bundle)>
<android.media.session.MediaSession$Callback: void onPrepareFromUri(android.net.Uri,android.os.Bundle)>
<android.media.session.MediaSession$Callback: void onRewind()>
<android.media.session.MediaSession$Callback: void onSeekTo(long)>
<android.media.session.MediaSession$Callback: void onSetPlaybackSpeed(float)>
<android.media.session.MediaSession$Callback: void onSetRating(android.media.Rating)>
<android.media.session.MediaSession$Callback: void onSkipToNext()>
<android.media.session.MediaSession$Callback: void onSkipToPrevious()>
<android.media.session.MediaSession$Callback: void onSkipToQueueItem(long)>
<android.media.session.MediaSession$Callback: void onStop()>
android.media.session.MediaSession$QueueItem
<android.media.session.MediaSession$QueueItem: void <init>(android.media.MediaDescription,long)>
<android.media.session.MediaSession$QueueItem: int describeContents()>
<android.media.session.MediaSession$QueueItem: android.media.MediaDescription getDescription()>
<android.media.session.MediaSession$QueueItem: long getQueueId()>
<android.media.session.MediaSession$QueueItem: void writeToParcel(android.os.Parcel,int)>
<android.media.session.MediaSession$QueueItem: android.os.Parcelable$Creator CREATOR>
<android.media.session.MediaSession$QueueItem: int UNKNOWN_ID>
android.media.session.MediaSession$Token
<android.media.session.MediaSession$Token: int describeContents()>
<android.media.session.MediaSession$Token: void writeToParcel(android.os.Parcel,int)>
<android.media.session.MediaSession$Token: android.os.Parcelable$Creator CREATOR>
android.media.session.MediaSessionManager
<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName)>
<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName,android.os.Handler)>
<android.media.session.MediaSessionManager: void addOnMediaKeyEventSessionChangedListener(java.util.concurrent.Executor,android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)>
<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener)>
<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener,android.os.Handler)>
<android.media.session.MediaSessionManager: java.util.List getActiveSessions(android.content.ComponentName)>
<android.media.session.MediaSessionManager: android.media.session.MediaSession$Token getMediaKeyEventSession()>
<android.media.session.MediaSessionManager: java.lang.String getMediaKeyEventSessionPackageName()>
<android.media.session.MediaSessionManager: java.util.List getSession2Tokens()>
<android.media.session.MediaSessionManager: boolean isTrustedForMediaControl(android.media.session.MediaSessionManager$RemoteUserInfo)>
<android.media.session.MediaSessionManager: void notifySession2Created(android.media.Session2Token)>
<android.media.session.MediaSessionManager: void removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener)>
<android.media.session.MediaSessionManager: void removeOnMediaKeyEventSessionChangedListener(android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)>
<android.media.session.MediaSessionManager: void removeOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener)>
android.media.session.MediaSessionManager$OnActiveSessionsChangedListener
<android.media.session.MediaSessionManager$OnActiveSessionsChangedListener: void onActiveSessionsChanged(java.util.List)>
android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener
<android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener: void onMediaKeyEventSessionChanged(java.lang.String,android.media.session.MediaSession$Token)>
android.media.session.MediaSessionManager$OnSession2TokensChangedListener
<android.media.session.MediaSessionManager$OnSession2TokensChangedListener: void onSession2TokensChanged(java.util.List)>
android.media.session.MediaSessionManager$RemoteUserInfo
<android.media.session.MediaSessionManager$RemoteUserInfo: void <init>(java.lang.String,int,int)>
<android.media.session.MediaSessionManager$RemoteUserInfo: java.lang.String getPackageName()>
<android.media.session.MediaSessionManager$RemoteUserInfo: int getPid()>
<android.media.session.MediaSessionManager$RemoteUserInfo: int getUid()>
android.media.session.PlaybackState
<android.media.session.PlaybackState: int describeContents()>
<android.media.session.PlaybackState: long getActions()>
<android.media.session.PlaybackState: long getActiveQueueItemId()>
<android.media.session.PlaybackState: long getBufferedPosition()>
<android.media.session.PlaybackState: java.util.List getCustomActions()>
<android.media.session.PlaybackState: java.lang.CharSequence getErrorMessage()>
<android.media.session.PlaybackState: android.os.Bundle getExtras()>
<android.media.session.PlaybackState: long getLastPositionUpdateTime()>
<android.media.session.PlaybackState: float getPlaybackSpeed()>
<android.media.session.PlaybackState: long getPosition()>
<android.media.session.PlaybackState: int getState()>
<android.media.session.PlaybackState: boolean isActive()>
<android.media.session.PlaybackState: void writeToParcel(android.os.Parcel,int)>
<android.media.session.PlaybackState: long ACTION_FAST_FORWARD>
<android.media.session.PlaybackState: long ACTION_PAUSE>
<android.media.session.PlaybackState: long ACTION_PLAY>
<android.media.session.PlaybackState: long ACTION_PLAY_FROM_MEDIA_ID>
<android.media.session.PlaybackState: long ACTION_PLAY_FROM_SEARCH>
<android.media.session.PlaybackState: long ACTION_PLAY_FROM_URI>
<android.media.session.PlaybackState: long ACTION_PLAY_PAUSE>
<android.media.session.PlaybackState: long ACTION_PREPARE>
<android.media.session.PlaybackState: long ACTION_PREPARE_FROM_MEDIA_ID>
<android.media.session.PlaybackState: long ACTION_PREPARE_FROM_SEARCH>
<android.media.session.PlaybackState: long ACTION_PREPARE_FROM_URI>
<android.media.session.PlaybackState: long ACTION_REWIND>
<android.media.session.PlaybackState: long ACTION_SEEK_TO>
<android.media.session.PlaybackState: long ACTION_SET_PLAYBACK_SPEED>
<android.media.session.PlaybackState: long ACTION_SET_RATING>
<android.media.session.PlaybackState: long ACTION_SKIP_TO_NEXT>
<android.media.session.PlaybackState: long ACTION_SKIP_TO_PREVIOUS>
<android.media.session.PlaybackState: long ACTION_SKIP_TO_QUEUE_ITEM>
<android.media.session.PlaybackState: long ACTION_STOP>
<android.media.session.PlaybackState: android.os.Parcelable$Creator CREATOR>
<android.media.session.PlaybackState: long PLAYBACK_POSITION_UNKNOWN>
<android.media.session.PlaybackState: int STATE_BUFFERING>
<android.media.session.PlaybackState: int STATE_CONNECTING>
<android.media.session.PlaybackState: int STATE_ERROR>
<android.media.session.PlaybackState: int STATE_FAST_FORWARDING>
<android.media.session.PlaybackState: int STATE_NONE>
<android.media.session.PlaybackState: int STATE_PAUSED>
<android.media.session.PlaybackState: int STATE_PLAYING>
<android.media.session.PlaybackState: int STATE_REWINDING>
<android.media.session.PlaybackState: int STATE_SKIPPING_TO_NEXT>
<android.media.session.PlaybackState: int STATE_SKIPPING_TO_PREVIOUS>
<android.media.session.PlaybackState: int STATE_SKIPPING_TO_QUEUE_ITEM>
<android.media.session.PlaybackState: int STATE_STOPPED>
android.media.session.PlaybackState$Builder
<android.media.session.PlaybackState$Builder: void <init>()>
<android.media.session.PlaybackState$Builder: void <init>(android.media.session.PlaybackState)>
<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder addCustomAction(java.lang.String,java.lang.String,int)>
<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder addCustomAction(android.media.session.PlaybackState$CustomAction)>
<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState build()>
<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setActions(long)>
<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setActiveQueueItemId(long)>
<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setBufferedPosition(long)>
<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setErrorMessage(java.lang.CharSequence)>
<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setExtras(android.os.Bundle)>
<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setState(int,long,float,long)>
<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setState(int,long,float)>
android.media.session.PlaybackState$CustomAction
<android.media.session.PlaybackState$CustomAction: int describeContents()>
<android.media.session.PlaybackState$CustomAction: java.lang.String getAction()>
<android.media.session.PlaybackState$CustomAction: android.os.Bundle getExtras()>
<android.media.session.PlaybackState$CustomAction: int getIcon()>
<android.media.session.PlaybackState$CustomAction: java.lang.CharSequence getName()>
<android.media.session.PlaybackState$CustomAction: void writeToParcel(android.os.Parcel,int)>
<android.media.session.PlaybackState$CustomAction: android.os.Parcelable$Creator CREATOR>
android.media.session.PlaybackState$CustomAction$Builder
<android.media.session.PlaybackState$CustomAction$Builder: void <init>(java.lang.String,java.lang.CharSequence,int)>
<android.media.session.PlaybackState$CustomAction$Builder: android.media.session.PlaybackState$CustomAction build()>
<android.media.session.PlaybackState$CustomAction$Builder: android.media.session.PlaybackState$CustomAction$Builder setExtras(android.os.Bundle)>
android.media.tv.AdRequest
<android.media.tv.AdRequest: void <init>(int,int,android.os.ParcelFileDescriptor,long,long,long,java.lang.String,android.os.Bundle)>
<android.media.tv.AdRequest: int describeContents()>
<android.media.tv.AdRequest: long getEchoIntervalMillis()>
<android.media.tv.AdRequest: android.os.ParcelFileDescriptor getFileDescriptor()>
<android.media.tv.AdRequest: int getId()>
<android.media.tv.AdRequest: java.lang.String getMediaFileType()>
<android.media.tv.AdRequest: android.os.Bundle getMetadata()>
<android.media.tv.AdRequest: int getRequestType()>
<android.media.tv.AdRequest: long getStartTimeMillis()>
<android.media.tv.AdRequest: long getStopTimeMillis()>
<android.media.tv.AdRequest: void writeToParcel(android.os.Parcel,int)>
<android.media.tv.AdRequest: android.os.Parcelable$Creator CREATOR>
<android.media.tv.AdRequest: int REQUEST_TYPE_START>
<android.media.tv.AdRequest: int REQUEST_TYPE_STOP>
android.media.tv.AdResponse
<android.media.tv.AdResponse: void <init>(int,int,long)>
<android.media.tv.AdResponse: int describeContents()>
<android.media.tv.AdResponse: long getElapsedTimeMillis()>
<android.media.tv.AdResponse: int getId()>
<android.media.tv.AdResponse: int getResponseType()>
<android.media.tv.AdResponse: void writeToParcel(android.os.Parcel,int)>
<android.media.tv.AdResponse: android.os.Parcelable$Creator CREATOR>
<android.media.tv.AdResponse: int RESPONSE_TYPE_ERROR>
<android.media.tv.AdResponse: int RESPONSE_TYPE_FINISHED>
<android.media.tv.AdResponse: int RESPONSE_TYPE_PLAYING>
<android.media.tv.AdResponse: int RESPONSE_TYPE_STOPPED>
android.media.tv.AitInfo
<android.media.tv.AitInfo: void <init>(int,int)>
<android.media.tv.AitInfo: int describeContents()>
<android.media.tv.AitInfo: int getType()>
<android.media.tv.AitInfo: int getVersion()>
<android.media.tv.AitInfo: void writeToParcel(android.os.Parcel,int)>
<android.media.tv.AitInfo: android.os.Parcelable$Creator CREATOR>
android.media.tv.BroadcastInfoRequest
<android.media.tv.BroadcastInfoRequest: int describeContents()>
<android.media.tv.BroadcastInfoRequest: int getOption()>
<android.media.tv.BroadcastInfoRequest: int getRequestId()>
<android.media.tv.BroadcastInfoRequest: int getType()>
<android.media.tv.BroadcastInfoRequest: void writeToParcel(android.os.Parcel,int)>
<android.media.tv.BroadcastInfoRequest: android.os.Parcelable$Creator CREATOR>
<android.media.tv.BroadcastInfoRequest: int REQUEST_OPTION_AUTO_UPDATE>
<android.media.tv.BroadcastInfoRequest: int REQUEST_OPTION_REPEAT>
android.media.tv.BroadcastInfoResponse
<android.media.tv.BroadcastInfoResponse: int describeContents()>
<android.media.tv.BroadcastInfoResponse: int getRequestId()>
<android.media.tv.BroadcastInfoResponse: int getResponseResult()>
<android.media.tv.BroadcastInfoResponse: int getSequence()>
<android.media.tv.BroadcastInfoResponse: int getType()>
<android.media.tv.BroadcastInfoResponse: void writeToParcel(android.os.Parcel,int)>
<android.media.tv.BroadcastInfoResponse: android.os.Parcelable$Creator CREATOR>
<android.media.tv.BroadcastInfoResponse: int RESPONSE_RESULT_CANCEL>
<android.media.tv.BroadcastInfoResponse: int RESPONSE_RESULT_ERROR>
<android.media.tv.BroadcastInfoResponse: int RESPONSE_RESULT_OK>
android.media.tv.CommandRequest
<android.media.tv.CommandRequest: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.media.tv.CommandRequest: java.lang.String getArgumentType()>
<android.media.tv.CommandRequest: java.lang.String getArguments()>
<android.media.tv.CommandRequest: java.lang.String getName()>
<android.media.tv.CommandRequest: java.lang.String getNamespace()>
<android.media.tv.CommandRequest: java.lang.String ARGUMENT_TYPE_JSON>
<android.media.tv.CommandRequest: java.lang.String ARGUMENT_TYPE_XML>
<android.media.tv.CommandRequest: android.os.Parcelable$Creator CREATOR>
android.media.tv.CommandResponse
<android.media.tv.CommandResponse: void <init>(int,int,int,java.lang.String,java.lang.String)>
<android.media.tv.CommandResponse: java.lang.String getResponse()>
<android.media.tv.CommandResponse: java.lang.String getResponseType()>
<android.media.tv.CommandResponse: android.os.Parcelable$Creator CREATOR>
<android.media.tv.CommandResponse: java.lang.String RESPONSE_TYPE_JSON>
<android.media.tv.CommandResponse: java.lang.String RESPONSE_TYPE_XML>
android.media.tv.DsmccRequest
<android.media.tv.DsmccRequest: void <init>(int,int,android.net.Uri)>
<android.media.tv.DsmccRequest: android.net.Uri getUri()>
<android.media.tv.DsmccRequest: android.os.Parcelable$Creator CREATOR>
android.media.tv.DsmccResponse
<android.media.tv.DsmccResponse: void <init>(int,int,int,android.os.ParcelFileDescriptor)>
<android.media.tv.DsmccResponse: void <init>(int,int,int,boolean,java.util.List)>
<android.media.tv.DsmccResponse: void <init>(int,int,int,int[],java.lang.String[])>
<android.media.tv.DsmccResponse: java.lang.String getBiopMessageType()>
<android.media.tv.DsmccResponse: java.util.List getChildList()>
<android.media.tv.DsmccResponse: android.os.ParcelFileDescriptor getFile()>
<android.media.tv.DsmccResponse: int[] getStreamEventIds()>
<android.media.tv.DsmccResponse: java.lang.String[] getStreamEventNames()>
<android.media.tv.DsmccResponse: java.lang.String BIOP_MESSAGE_TYPE_DIRECTORY>
<android.media.tv.DsmccResponse: java.lang.String BIOP_MESSAGE_TYPE_FILE>
<android.media.tv.DsmccResponse: java.lang.String BIOP_MESSAGE_TYPE_SERVICE_GATEWAY>
<android.media.tv.DsmccResponse: java.lang.String BIOP_MESSAGE_TYPE_STREAM>
<android.media.tv.DsmccResponse: android.os.Parcelable$Creator CREATOR>
android.media.tv.PesRequest
<android.media.tv.PesRequest: void <init>(int,int,int,int)>
<android.media.tv.PesRequest: int getStreamId()>
<android.media.tv.PesRequest: int getTsPid()>
<android.media.tv.PesRequest: android.os.Parcelable$Creator CREATOR>
android.media.tv.PesResponse
<android.media.tv.PesResponse: void <init>(int,int,int,java.lang.String)>
<android.media.tv.PesResponse: java.lang.String getSharedFilterToken()>
<android.media.tv.PesResponse: android.os.Parcelable$Creator CREATOR>
android.media.tv.SectionRequest
<android.media.tv.SectionRequest: void <init>(int,int,int,int,int)>
<android.media.tv.SectionRequest: int getTableId()>
<android.media.tv.SectionRequest: int getTsPid()>
<android.media.tv.SectionRequest: int getVersion()>
<android.media.tv.SectionRequest: android.os.Parcelable$Creator CREATOR>
android.media.tv.SectionResponse
<android.media.tv.SectionResponse: void <init>(int,int,int,int,int,android.os.Bundle)>
<android.media.tv.SectionResponse: android.os.Bundle getSessionData()>
<android.media.tv.SectionResponse: int getSessionId()>
<android.media.tv.SectionResponse: int getVersion()>
<android.media.tv.SectionResponse: android.os.Parcelable$Creator CREATOR>
android.media.tv.StreamEventRequest
<android.media.tv.StreamEventRequest: void <init>(int,int,android.net.Uri,java.lang.String)>
<android.media.tv.StreamEventRequest: java.lang.String getEventName()>
<android.media.tv.StreamEventRequest: android.net.Uri getTargetUri()>
<android.media.tv.StreamEventRequest: android.os.Parcelable$Creator CREATOR>
android.media.tv.StreamEventResponse
<android.media.tv.StreamEventResponse: void <init>(int,int,int,int,long,byte[])>
<android.media.tv.StreamEventResponse: byte[] getData()>
<android.media.tv.StreamEventResponse: int getEventId()>
<android.media.tv.StreamEventResponse: long getNptMillis()>
<android.media.tv.StreamEventResponse: android.os.Parcelable$Creator CREATOR>
android.media.tv.TableRequest
<android.media.tv.TableRequest: void <init>(int,int,int,int,int)>
<android.media.tv.TableRequest: int getTableId()>
<android.media.tv.TableRequest: int getTableName()>
<android.media.tv.TableRequest: int getVersion()>
<android.media.tv.TableRequest: android.os.Parcelable$Creator CREATOR>
<android.media.tv.TableRequest: int TABLE_NAME_PAT>
<android.media.tv.TableRequest: int TABLE_NAME_PMT>
android.media.tv.TableResponse
<android.media.tv.TableResponse: void <init>(int,int,int,android.net.Uri,int,int)>
<android.media.tv.TableResponse: int getSize()>
<android.media.tv.TableResponse: android.net.Uri getTableUri()>
<android.media.tv.TableResponse: int getVersion()>
<android.media.tv.TableResponse: android.os.Parcelable$Creator CREATOR>
android.media.tv.TimelineRequest
<android.media.tv.TimelineRequest: void <init>(int,int,int)>
<android.media.tv.TimelineRequest: int getIntervalMillis()>
<android.media.tv.TimelineRequest: android.os.Parcelable$Creator CREATOR>
android.media.tv.TimelineResponse
<android.media.tv.TimelineResponse: void <init>(int,int,int,java.lang.String,int,int,long,long)>
<android.media.tv.TimelineResponse: android.net.Uri getSelector()>
<android.media.tv.TimelineResponse: long getTicks()>
<android.media.tv.TimelineResponse: int getUnitsPerSecond()>
<android.media.tv.TimelineResponse: int getUnitsPerTick()>
<android.media.tv.TimelineResponse: long getWallClock()>
<android.media.tv.TimelineResponse: android.os.Parcelable$Creator CREATOR>
android.media.tv.TsRequest
<android.media.tv.TsRequest: void <init>(int,int,int)>
<android.media.tv.TsRequest: int getTsPid()>
<android.media.tv.TsRequest: android.os.Parcelable$Creator CREATOR>
android.media.tv.TsResponse
<android.media.tv.TsResponse: void <init>(int,int,int,java.lang.String)>
<android.media.tv.TsResponse: java.lang.String getSharedFilterToken()>
<android.media.tv.TsResponse: android.os.Parcelable$Creator CREATOR>
android.media.tv.TvContentRating
<android.media.tv.TvContentRating: boolean contains(android.media.tv.TvContentRating)>
<android.media.tv.TvContentRating: android.media.tv.TvContentRating createRating(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
<android.media.tv.TvContentRating: java.lang.String flattenToString()>
<android.media.tv.TvContentRating: java.lang.String getDomain()>
<android.media.tv.TvContentRating: java.lang.String getMainRating()>
<android.media.tv.TvContentRating: java.lang.String getRatingSystem()>
<android.media.tv.TvContentRating: java.util.List getSubRatings()>
<android.media.tv.TvContentRating: android.media.tv.TvContentRating unflattenFromString(java.lang.String)>
<android.media.tv.TvContentRating: android.media.tv.TvContentRating UNRATED>
android.media.tv.TvContract
<android.media.tv.TvContract: android.net.Uri buildChannelLogoUri(long)>
<android.media.tv.TvContract: android.net.Uri buildChannelLogoUri(android.net.Uri)>
<android.media.tv.TvContract: android.net.Uri buildChannelUri(long)>
<android.media.tv.TvContract: android.net.Uri buildChannelUriForPassthroughInput(java.lang.String)>
<android.media.tv.TvContract: android.net.Uri buildChannelsUriForInput(java.lang.String)>
<android.media.tv.TvContract: java.lang.String buildInputId(android.content.ComponentName)>
<android.media.tv.TvContract: android.net.Uri buildPreviewProgramUri(long)>
<android.media.tv.TvContract: android.net.Uri buildPreviewProgramsUriForChannel(long)>
<android.media.tv.TvContract: android.net.Uri buildPreviewProgramsUriForChannel(android.net.Uri)>
<android.media.tv.TvContract: android.net.Uri buildProgramUri(long)>
<android.media.tv.TvContract: android.net.Uri buildProgramsUriForChannel(long)>
<android.media.tv.TvContract: android.net.Uri buildProgramsUriForChannel(android.net.Uri)>
<android.media.tv.TvContract: android.net.Uri buildProgramsUriForChannel(long,long,long)>
<android.media.tv.TvContract: android.net.Uri buildProgramsUriForChannel(android.net.Uri,long,long)>
<android.media.tv.TvContract: android.net.Uri buildRecordedProgramUri(long)>
<android.media.tv.TvContract: android.net.Uri buildWatchNextProgramUri(long)>
<android.media.tv.TvContract: boolean isChannelUri(android.net.Uri)>
<android.media.tv.TvContract: boolean isChannelUriForPassthroughInput(android.net.Uri)>
<android.media.tv.TvContract: boolean isChannelUriForTunerInput(android.net.Uri)>
<android.media.tv.TvContract: boolean isProgramUri(android.net.Uri)>
<android.media.tv.TvContract: boolean isRecordedProgramUri(android.net.Uri)>
<android.media.tv.TvContract: void requestChannelBrowsable(android.content.Context,long)>
<android.media.tv.TvContract: java.lang.String ACTION_INITIALIZE_PROGRAMS>
<android.media.tv.TvContract: java.lang.String ACTION_PREVIEW_PROGRAM_ADDED_TO_WATCH_NEXT>
<android.media.tv.TvContract: java.lang.String ACTION_PREVIEW_PROGRAM_BROWSABLE_DISABLED>
<android.media.tv.TvContract: java.lang.String ACTION_REQUEST_CHANNEL_BROWSABLE>
<android.media.tv.TvContract: java.lang.String ACTION_WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED>
<android.media.tv.TvContract: java.lang.String AUTHORITY>
<android.media.tv.TvContract: java.lang.String EXTRA_CHANNEL_ID>
<android.media.tv.TvContract: java.lang.String EXTRA_PREVIEW_PROGRAM_ID>
<android.media.tv.TvContract: java.lang.String EXTRA_WATCH_NEXT_PROGRAM_ID>
android.media.tv.TvContract$BaseTvColumns
<android.media.tv.TvContract$BaseTvColumns: java.lang.String COLUMN_PACKAGE_NAME>
android.media.tv.TvContract$Channels
<android.media.tv.TvContract$Channels: java.lang.String getVideoResolution(java.lang.String)>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_APP_LINK_COLOR>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_APP_LINK_ICON_URI>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_APP_LINK_INTENT_URI>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_APP_LINK_POSTER_ART_URI>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_APP_LINK_TEXT>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_BROADCAST_GENRE>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_BROWSABLE>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_CHANNEL_LIST_ID>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_DESCRIPTION>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_DISPLAY_NAME>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_DISPLAY_NUMBER>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_GLOBAL_CONTENT_ID>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_INPUT_ID>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_INTERNAL_PROVIDER_DATA>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG1>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG2>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG3>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG4>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_INTERNAL_PROVIDER_ID>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_LOCKED>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_NETWORK_AFFILIATION>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_ORIGINAL_NETWORK_ID>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_REMOTE_CONTROL_KEY_PRESET_NUMBER>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_SCRAMBLED>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_SEARCHABLE>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_SERVICE_ID>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_SERVICE_TYPE>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_TRANSIENT>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_TRANSPORT_STREAM_ID>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_TYPE>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_VERSION_NUMBER>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_VIDEO_FORMAT>
<android.media.tv.TvContract$Channels: java.lang.String COLUMN_VIDEO_RESOLUTION>
<android.media.tv.TvContract$Channels: java.lang.String CONTENT_ITEM_TYPE>
<android.media.tv.TvContract$Channels: java.lang.String CONTENT_TYPE>
<android.media.tv.TvContract$Channels: android.net.Uri CONTENT_URI>
<android.media.tv.TvContract$Channels: java.lang.String SERVICE_TYPE_AUDIO>
<android.media.tv.TvContract$Channels: java.lang.String SERVICE_TYPE_AUDIO_VIDEO>
<android.media.tv.TvContract$Channels: java.lang.String SERVICE_TYPE_OTHER>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_1SEG>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_ATSC3_T>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_ATSC_C>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_ATSC_M_H>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_ATSC_T>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_CMMB>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_DTMB>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_DVB_C>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_DVB_C2>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_DVB_H>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_DVB_S>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_DVB_S2>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_DVB_SH>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_DVB_T>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_DVB_T2>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_ISDB_C>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_ISDB_S>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_ISDB_S3>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_ISDB_T>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_ISDB_TB>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_NTSC>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_OTHER>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_PAL>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_PREVIEW>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_SECAM>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_S_DMB>
<android.media.tv.TvContract$Channels: java.lang.String TYPE_T_DMB>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_FORMAT_1080I>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_FORMAT_1080P>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_FORMAT_2160P>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_FORMAT_240P>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_FORMAT_360P>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_FORMAT_4320P>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_FORMAT_480I>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_FORMAT_480P>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_FORMAT_576I>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_FORMAT_576P>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_FORMAT_720P>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_RESOLUTION_ED>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_RESOLUTION_FHD>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_RESOLUTION_HD>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_RESOLUTION_SD>
<android.media.tv.TvContract$Channels: java.lang.String VIDEO_RESOLUTION_UHD>
android.media.tv.TvContract$Channels$Logo
<android.media.tv.TvContract$Channels$Logo: java.lang.String CONTENT_DIRECTORY>
android.media.tv.TvContract$PreviewPrograms
<android.media.tv.TvContract$PreviewPrograms: int ASPECT_RATIO_16_9>
<android.media.tv.TvContract$PreviewPrograms: int ASPECT_RATIO_1_1>
<android.media.tv.TvContract$PreviewPrograms: int ASPECT_RATIO_2_3>
<android.media.tv.TvContract$PreviewPrograms: int ASPECT_RATIO_3_2>
<android.media.tv.TvContract$PreviewPrograms: int ASPECT_RATIO_4_3>
<android.media.tv.TvContract$PreviewPrograms: int AVAILABILITY_AVAILABLE>
<android.media.tv.TvContract$PreviewPrograms: int AVAILABILITY_FREE_WITH_SUBSCRIPTION>
<android.media.tv.TvContract$PreviewPrograms: int AVAILABILITY_PAID_CONTENT>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_AUDIO_LANGUAGE>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_AUTHOR>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_AVAILABILITY>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_BROWSABLE>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_CANONICAL_GENRE>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_CHANNEL_ID>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_CONTENT_ID>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_CONTENT_RATING>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_DURATION_MILLIS>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_END_TIME_UTC_MILLIS>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_EPISODE_DISPLAY_NUMBER>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_EPISODE_TITLE>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_INTENT_URI>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_INTERACTION_COUNT>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_INTERACTION_TYPE>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_DATA>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG1>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG2>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG3>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG4>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_ID>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_ITEM_COUNT>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_LAST_PLAYBACK_POSITION_MILLIS>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_LIVE>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_LOGO_URI>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_LONG_DESCRIPTION>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_OFFER_PRICE>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_POSTER_ART_ASPECT_RATIO>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_POSTER_ART_URI>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_PREVIEW_VIDEO_URI>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_RELEASE_DATE>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_REVIEW_RATING>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_REVIEW_RATING_STYLE>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_SEARCHABLE>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_SEASON_DISPLAY_NUMBER>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_SEASON_TITLE>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_SERIES_ID>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_SHORT_DESCRIPTION>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_SPLIT_ID>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_STARTING_PRICE>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_START_TIME_UTC_MILLIS>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_THUMBNAIL_ASPECT_RATIO>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_THUMBNAIL_URI>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_TITLE>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_TRANSIENT>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_TYPE>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_VERSION_NUMBER>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_VIDEO_HEIGHT>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_VIDEO_WIDTH>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String COLUMN_WEIGHT>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String CONTENT_ITEM_TYPE>
<android.media.tv.TvContract$PreviewPrograms: java.lang.String CONTENT_TYPE>
<android.media.tv.TvContract$PreviewPrograms: android.net.Uri CONTENT_URI>
<android.media.tv.TvContract$PreviewPrograms: int INTERACTION_TYPE_FANS>
<android.media.tv.TvContract$PreviewPrograms: int INTERACTION_TYPE_FOLLOWERS>
<android.media.tv.TvContract$PreviewPrograms: int INTERACTION_TYPE_LIKES>
<android.media.tv.TvContract$PreviewPrograms: int INTERACTION_TYPE_LISTENS>
<android.media.tv.TvContract$PreviewPrograms: int INTERACTION_TYPE_THUMBS>
<android.media.tv.TvContract$PreviewPrograms: int INTERACTION_TYPE_VIEWERS>
<android.media.tv.TvContract$PreviewPrograms: int INTERACTION_TYPE_VIEWS>
<android.media.tv.TvContract$PreviewPrograms: int REVIEW_RATING_STYLE_PERCENTAGE>
<android.media.tv.TvContract$PreviewPrograms: int REVIEW_RATING_STYLE_STARS>
<android.media.tv.TvContract$PreviewPrograms: int REVIEW_RATING_STYLE_THUMBS_UP_DOWN>
<android.media.tv.TvContract$PreviewPrograms: int TYPE_ALBUM>
<android.media.tv.TvContract$PreviewPrograms: int TYPE_ARTIST>
<android.media.tv.TvContract$PreviewPrograms: int TYPE_CHANNEL>
<android.media.tv.TvContract$PreviewPrograms: int TYPE_CLIP>
<android.media.tv.TvContract$PreviewPrograms: int TYPE_EVENT>
<android.media.tv.TvContract$PreviewPrograms: int TYPE_MOVIE>
<android.media.tv.TvContract$PreviewPrograms: int TYPE_PLAYLIST>
<android.media.tv.TvContract$PreviewPrograms: int TYPE_STATION>
<android.media.tv.TvContract$PreviewPrograms: int TYPE_TRACK>
<android.media.tv.TvContract$PreviewPrograms: int TYPE_TV_EPISODE>
<android.media.tv.TvContract$PreviewPrograms: int TYPE_TV_SEASON>
<android.media.tv.TvContract$PreviewPrograms: int TYPE_TV_SERIES>
android.media.tv.TvContract$Programs
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_AUDIO_LANGUAGE>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_BROADCAST_GENRE>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_CANONICAL_GENRE>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_CHANNEL_ID>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_CONTENT_RATING>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_END_TIME_UTC_MILLIS>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_EPISODE_DISPLAY_NUMBER>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_EPISODE_NUMBER>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_EPISODE_TITLE>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_EVENT_ID>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_GLOBAL_CONTENT_ID>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_INTERNAL_PROVIDER_DATA>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG1>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG2>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG3>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG4>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_INTERNAL_PROVIDER_ID>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_LONG_DESCRIPTION>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_MULTI_SERIES_ID>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_POSTER_ART_URI>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_RECORDING_PROHIBITED>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_REVIEW_RATING>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_REVIEW_RATING_STYLE>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_SCRAMBLED>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_SEARCHABLE>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_SEASON_DISPLAY_NUMBER>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_SEASON_NUMBER>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_SEASON_TITLE>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_SERIES_ID>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_SHORT_DESCRIPTION>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_SPLIT_ID>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_START_TIME_UTC_MILLIS>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_THUMBNAIL_URI>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_TITLE>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_VERSION_NUMBER>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_VIDEO_HEIGHT>
<android.media.tv.TvContract$Programs: java.lang.String COLUMN_VIDEO_WIDTH>
<android.media.tv.TvContract$Programs: java.lang.String CONTENT_ITEM_TYPE>
<android.media.tv.TvContract$Programs: java.lang.String CONTENT_TYPE>
<android.media.tv.TvContract$Programs: android.net.Uri CONTENT_URI>
<android.media.tv.TvContract$Programs: int REVIEW_RATING_STYLE_PERCENTAGE>
<android.media.tv.TvContract$Programs: int REVIEW_RATING_STYLE_STARS>
<android.media.tv.TvContract$Programs: int REVIEW_RATING_STYLE_THUMBS_UP_DOWN>
android.media.tv.TvContract$Programs$Genres
<android.media.tv.TvContract$Programs$Genres: java.lang.String[] decode(java.lang.String)>
<android.media.tv.TvContract$Programs$Genres: java.lang.String encode(java.lang.String[])>
<android.media.tv.TvContract$Programs$Genres: boolean isCanonical(java.lang.String)>
<android.media.tv.TvContract$Programs$Genres: java.lang.String ANIMAL_WILDLIFE>
<android.media.tv.TvContract$Programs$Genres: java.lang.String ARTS>
<android.media.tv.TvContract$Programs$Genres: java.lang.String COMEDY>
<android.media.tv.TvContract$Programs$Genres: java.lang.String DRAMA>
<android.media.tv.TvContract$Programs$Genres: java.lang.String EDUCATION>
<android.media.tv.TvContract$Programs$Genres: java.lang.String ENTERTAINMENT>
<android.media.tv.TvContract$Programs$Genres: java.lang.String FAMILY_KIDS>
<android.media.tv.TvContract$Programs$Genres: java.lang.String GAMING>
<android.media.tv.TvContract$Programs$Genres: java.lang.String LIFE_STYLE>
<android.media.tv.TvContract$Programs$Genres: java.lang.String MOVIES>
<android.media.tv.TvContract$Programs$Genres: java.lang.String MUSIC>
<android.media.tv.TvContract$Programs$Genres: java.lang.String NEWS>
<android.media.tv.TvContract$Programs$Genres: java.lang.String PREMIER>
<android.media.tv.TvContract$Programs$Genres: java.lang.String SHOPPING>
<android.media.tv.TvContract$Programs$Genres: java.lang.String SPORTS>
<android.media.tv.TvContract$Programs$Genres: java.lang.String TECH_SCIENCE>
<android.media.tv.TvContract$Programs$Genres: java.lang.String TRAVEL>
android.media.tv.TvContract$RecordedPrograms
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_AUDIO_LANGUAGE>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_BROADCAST_GENRE>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_CANONICAL_GENRE>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_CHANNEL_ID>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_CONTENT_RATING>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_END_TIME_UTC_MILLIS>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_EPISODE_DISPLAY_NUMBER>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_EPISODE_TITLE>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_INPUT_ID>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_DATA>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG1>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG2>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG3>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG4>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_ID>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_LONG_DESCRIPTION>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_MULTI_SERIES_ID>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_POSTER_ART_URI>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_RECORDING_DATA_BYTES>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_RECORDING_DATA_URI>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_RECORDING_DURATION_MILLIS>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_RECORDING_EXPIRE_TIME_UTC_MILLIS>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_REVIEW_RATING>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_REVIEW_RATING_STYLE>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_SEARCHABLE>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_SEASON_DISPLAY_NUMBER>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_SEASON_TITLE>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_SERIES_ID>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_SHORT_DESCRIPTION>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_SPLIT_ID>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_START_TIME_UTC_MILLIS>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_THUMBNAIL_URI>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_TITLE>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_VERSION_NUMBER>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_VIDEO_HEIGHT>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String COLUMN_VIDEO_WIDTH>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String CONTENT_ITEM_TYPE>
<android.media.tv.TvContract$RecordedPrograms: java.lang.String CONTENT_TYPE>
<android.media.tv.TvContract$RecordedPrograms: android.net.Uri CONTENT_URI>
<android.media.tv.TvContract$RecordedPrograms: int REVIEW_RATING_STYLE_PERCENTAGE>
<android.media.tv.TvContract$RecordedPrograms: int REVIEW_RATING_STYLE_STARS>
<android.media.tv.TvContract$RecordedPrograms: int REVIEW_RATING_STYLE_THUMBS_UP_DOWN>
android.media.tv.TvContract$WatchNextPrograms
<android.media.tv.TvContract$WatchNextPrograms: int ASPECT_RATIO_16_9>
<android.media.tv.TvContract$WatchNextPrograms: int ASPECT_RATIO_1_1>
<android.media.tv.TvContract$WatchNextPrograms: int ASPECT_RATIO_2_3>
<android.media.tv.TvContract$WatchNextPrograms: int ASPECT_RATIO_3_2>
<android.media.tv.TvContract$WatchNextPrograms: int ASPECT_RATIO_4_3>
<android.media.tv.TvContract$WatchNextPrograms: int AVAILABILITY_AVAILABLE>
<android.media.tv.TvContract$WatchNextPrograms: int AVAILABILITY_FREE_WITH_SUBSCRIPTION>
<android.media.tv.TvContract$WatchNextPrograms: int AVAILABILITY_PAID_CONTENT>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_AUDIO_LANGUAGE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_AUTHOR>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_AVAILABILITY>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_BROWSABLE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_CANONICAL_GENRE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_CONTENT_ID>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_CONTENT_RATING>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_DURATION_MILLIS>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_END_TIME_UTC_MILLIS>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_EPISODE_DISPLAY_NUMBER>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_EPISODE_TITLE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_INTENT_URI>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_INTERACTION_COUNT>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_INTERACTION_TYPE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_DATA>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG1>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG2>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG3>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG4>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_INTERNAL_PROVIDER_ID>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_ITEM_COUNT>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_LAST_ENGAGEMENT_TIME_UTC_MILLIS>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_LAST_PLAYBACK_POSITION_MILLIS>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_LIVE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_LOGO_URI>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_LONG_DESCRIPTION>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_OFFER_PRICE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_POSTER_ART_ASPECT_RATIO>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_POSTER_ART_URI>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_PREVIEW_VIDEO_URI>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_RELEASE_DATE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_REVIEW_RATING>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_REVIEW_RATING_STYLE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_SEARCHABLE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_SEASON_DISPLAY_NUMBER>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_SEASON_TITLE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_SERIES_ID>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_SHORT_DESCRIPTION>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_SPLIT_ID>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_STARTING_PRICE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_START_TIME_UTC_MILLIS>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_THUMBNAIL_ASPECT_RATIO>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_THUMBNAIL_URI>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_TITLE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_TRANSIENT>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_TYPE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_VERSION_NUMBER>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_VIDEO_HEIGHT>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_VIDEO_WIDTH>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String COLUMN_WATCH_NEXT_TYPE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String CONTENT_ITEM_TYPE>
<android.media.tv.TvContract$WatchNextPrograms: java.lang.String CONTENT_TYPE>
<android.media.tv.TvContract$WatchNextPrograms: android.net.Uri CONTENT_URI>
<android.media.tv.TvContract$WatchNextPrograms: int INTERACTION_TYPE_FANS>
<android.media.tv.TvContract$WatchNextPrograms: int INTERACTION_TYPE_FOLLOWERS>
<android.media.tv.TvContract$WatchNextPrograms: int INTERACTION_TYPE_LIKES>
<android.media.tv.TvContract$WatchNextPrograms: int INTERACTION_TYPE_LISTENS>
<android.media.tv.TvContract$WatchNextPrograms: int INTERACTION_TYPE_THUMBS>
<android.media.tv.TvContract$WatchNextPrograms: int INTERACTION_TYPE_VIEWERS>
<android.media.tv.TvContract$WatchNextPrograms: int INTERACTION_TYPE_VIEWS>
<android.media.tv.TvContract$WatchNextPrograms: int REVIEW_RATING_STYLE_PERCENTAGE>
<android.media.tv.TvContract$WatchNextPrograms: int REVIEW_RATING_STYLE_STARS>
<android.media.tv.TvContract$WatchNextPrograms: int REVIEW_RATING_STYLE_THUMBS_UP_DOWN>
<android.media.tv.TvContract$WatchNextPrograms: int TYPE_ALBUM>
<android.media.tv.TvContract$WatchNextPrograms: int TYPE_ARTIST>
<android.media.tv.TvContract$WatchNextPrograms: int TYPE_CHANNEL>
<android.media.tv.TvContract$WatchNextPrograms: int TYPE_CLIP>
<android.media.tv.TvContract$WatchNextPrograms: int TYPE_EVENT>
<android.media.tv.TvContract$WatchNextPrograms: int TYPE_MOVIE>
<android.media.tv.TvContract$WatchNextPrograms: int TYPE_PLAYLIST>
<android.media.tv.TvContract$WatchNextPrograms: int TYPE_STATION>
<android.media.tv.TvContract$WatchNextPrograms: int TYPE_TRACK>
<android.media.tv.TvContract$WatchNextPrograms: int TYPE_TV_EPISODE>
<android.media.tv.TvContract$WatchNextPrograms: int TYPE_TV_SEASON>
<android.media.tv.TvContract$WatchNextPrograms: int TYPE_TV_SERIES>
<android.media.tv.TvContract$WatchNextPrograms: int WATCH_NEXT_TYPE_CONTINUE>
<android.media.tv.TvContract$WatchNextPrograms: int WATCH_NEXT_TYPE_NEW>
<android.media.tv.TvContract$WatchNextPrograms: int WATCH_NEXT_TYPE_NEXT>
<android.media.tv.TvContract$WatchNextPrograms: int WATCH_NEXT_TYPE_WATCHLIST>
android.media.tv.TvInputInfo
<android.media.tv.TvInputInfo: boolean canPauseRecording()>
<android.media.tv.TvInputInfo: boolean canRecord()>
<android.media.tv.TvInputInfo: android.content.Intent createSettingsIntent()>
<android.media.tv.TvInputInfo: android.content.Intent createSetupIntent()>
<android.media.tv.TvInputInfo: int describeContents()>
<android.media.tv.TvInputInfo: android.os.Bundle getExtras()>
<android.media.tv.TvInputInfo: java.lang.String getId()>
<android.media.tv.TvInputInfo: java.lang.String getParentId()>
<android.media.tv.TvInputInfo: android.content.pm.ServiceInfo getServiceInfo()>
<android.media.tv.TvInputInfo: int getTunerCount()>
<android.media.tv.TvInputInfo: int getType()>
<android.media.tv.TvInputInfo: boolean isHidden(android.content.Context)>
<android.media.tv.TvInputInfo: boolean isPassthroughInput()>
<android.media.tv.TvInputInfo: java.lang.CharSequence loadCustomLabel(android.content.Context)>
<android.media.tv.TvInputInfo: android.graphics.drawable.Drawable loadIcon(android.content.Context)>
<android.media.tv.TvInputInfo: java.lang.CharSequence loadLabel(android.content.Context)>
<android.media.tv.TvInputInfo: void writeToParcel(android.os.Parcel,int)>
<android.media.tv.TvInputInfo: android.os.Parcelable$Creator CREATOR>
<android.media.tv.TvInputInfo: java.lang.String EXTRA_INPUT_ID>
<android.media.tv.TvInputInfo: int TYPE_COMPONENT>
<android.media.tv.TvInputInfo: int TYPE_COMPOSITE>
<android.media.tv.TvInputInfo: int TYPE_DISPLAY_PORT>
<android.media.tv.TvInputInfo: int TYPE_DVI>
<android.media.tv.TvInputInfo: int TYPE_HDMI>
<android.media.tv.TvInputInfo: int TYPE_OTHER>
<android.media.tv.TvInputInfo: int TYPE_SCART>
<android.media.tv.TvInputInfo: int TYPE_SVIDEO>
<android.media.tv.TvInputInfo: int TYPE_TUNER>
<android.media.tv.TvInputInfo: int TYPE_VGA>
android.media.tv.TvInputInfo$Builder
<android.media.tv.TvInputInfo$Builder: void <init>(android.content.Context,android.content.ComponentName)>
<android.media.tv.TvInputInfo$Builder: android.media.tv.TvInputInfo build()>
<android.media.tv.TvInputInfo$Builder: android.media.tv.TvInputInfo$Builder setCanPauseRecording(boolean)>
<android.media.tv.TvInputInfo$Builder: android.media.tv.TvInputInfo$Builder setCanRecord(boolean)>
<android.media.tv.TvInputInfo$Builder: android.media.tv.TvInputInfo$Builder setExtras(android.os.Bundle)>
<android.media.tv.TvInputInfo$Builder: android.media.tv.TvInputInfo$Builder setTunerCount(int)>
android.media.tv.TvInputManager
<android.media.tv.TvInputManager: java.util.List getBlockedRatings()>
<android.media.tv.TvInputManager: int getInputState(java.lang.String)>
<android.media.tv.TvInputManager: android.media.tv.TvInputInfo getTvInputInfo(java.lang.String)>
<android.media.tv.TvInputManager: java.util.List getTvInputList()>
<android.media.tv.TvInputManager: boolean isParentalControlsEnabled()>
<android.media.tv.TvInputManager: boolean isRatingBlocked(android.media.tv.TvContentRating)>
<android.media.tv.TvInputManager: void registerCallback(android.media.tv.TvInputManager$TvInputCallback,android.os.Handler)>
<android.media.tv.TvInputManager: void unregisterCallback(android.media.tv.TvInputManager$TvInputCallback)>
<android.media.tv.TvInputManager: void updateTvInputInfo(android.media.tv.TvInputInfo)>
<android.media.tv.TvInputManager: java.lang.String ACTION_BLOCKED_RATINGS_CHANGED>
<android.media.tv.TvInputManager: java.lang.String ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED>
<android.media.tv.TvInputManager: java.lang.String ACTION_QUERY_CONTENT_RATING_SYSTEMS>
<android.media.tv.TvInputManager: java.lang.String ACTION_SETUP_INPUTS>
<android.media.tv.TvInputManager: java.lang.String ACTION_VIEW_RECORDING_SCHEDULES>
<android.media.tv.TvInputManager: int BROADCAST_INFO_STREAM_EVENT>
<android.media.tv.TvInputManager: int BROADCAST_INFO_TYPE_COMMAND>
<android.media.tv.TvInputManager: int BROADCAST_INFO_TYPE_DSMCC>
<android.media.tv.TvInputManager: int BROADCAST_INFO_TYPE_PES>
<android.media.tv.TvInputManager: int BROADCAST_INFO_TYPE_SECTION>
<android.media.tv.TvInputManager: int BROADCAST_INFO_TYPE_TABLE>
<android.media.tv.TvInputManager: int BROADCAST_INFO_TYPE_TIMELINE>
<android.media.tv.TvInputManager: int BROADCAST_INFO_TYPE_TS>
<android.media.tv.TvInputManager: int INPUT_STATE_CONNECTED>
<android.media.tv.TvInputManager: int INPUT_STATE_CONNECTED_STANDBY>
<android.media.tv.TvInputManager: int INPUT_STATE_DISCONNECTED>
<android.media.tv.TvInputManager: java.lang.String META_DATA_CONTENT_RATING_SYSTEMS>
<android.media.tv.TvInputManager: int RECORDING_ERROR_INSUFFICIENT_SPACE>
<android.media.tv.TvInputManager: int RECORDING_ERROR_RESOURCE_BUSY>
<android.media.tv.TvInputManager: int RECORDING_ERROR_UNKNOWN>
<android.media.tv.TvInputManager: int SIGNAL_STRENGTH_LOST>
<android.media.tv.TvInputManager: int SIGNAL_STRENGTH_STRONG>
<android.media.tv.TvInputManager: int SIGNAL_STRENGTH_WEAK>
<android.media.tv.TvInputManager: long TIME_SHIFT_INVALID_TIME>
<android.media.tv.TvInputManager: int TIME_SHIFT_STATUS_AVAILABLE>
<android.media.tv.TvInputManager: int TIME_SHIFT_STATUS_UNAVAILABLE>
<android.media.tv.TvInputManager: int TIME_SHIFT_STATUS_UNKNOWN>
<android.media.tv.TvInputManager: int TIME_SHIFT_STATUS_UNSUPPORTED>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_BUFFERING>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUT>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALID>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTE>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTION>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIRED>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATION>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRING>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_CAS_NO_CARD>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWED>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_CAS_REBOOTING>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWN>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCE>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_NOT_CONNECTED>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_TUNING>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_UNKNOWN>
<android.media.tv.TvInputManager: int VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL>
android.media.tv.TvInputManager$TvInputCallback
<android.media.tv.TvInputManager$TvInputCallback: void <init>()>
<android.media.tv.TvInputManager$TvInputCallback: void onInputAdded(java.lang.String)>
<android.media.tv.TvInputManager$TvInputCallback: void onInputRemoved(java.lang.String)>
<android.media.tv.TvInputManager$TvInputCallback: void onInputStateChanged(java.lang.String,int)>
<android.media.tv.TvInputManager$TvInputCallback: void onInputUpdated(java.lang.String)>
<android.media.tv.TvInputManager$TvInputCallback: void onTvInputInfoUpdated(android.media.tv.TvInputInfo)>
android.media.tv.TvInputService
<android.media.tv.TvInputService: void <init>()>
<android.media.tv.TvInputService: android.os.IBinder onBind(android.content.Intent)>
<android.media.tv.TvInputService: android.media.tv.TvInputService$RecordingSession onCreateRecordingSession(java.lang.String)>
<android.media.tv.TvInputService: android.media.tv.TvInputService$RecordingSession onCreateRecordingSession(java.lang.String,java.lang.String)>
<android.media.tv.TvInputService: android.media.tv.TvInputService$Session onCreateSession(java.lang.String)>
<android.media.tv.TvInputService: android.media.tv.TvInputService$Session onCreateSession(java.lang.String,java.lang.String)>
<android.media.tv.TvInputService: int PRIORITY_HINT_USE_CASE_TYPE_BACKGROUND>
<android.media.tv.TvInputService: int PRIORITY_HINT_USE_CASE_TYPE_LIVE>
<android.media.tv.TvInputService: int PRIORITY_HINT_USE_CASE_TYPE_PLAYBACK>
<android.media.tv.TvInputService: int PRIORITY_HINT_USE_CASE_TYPE_RECORD>
<android.media.tv.TvInputService: int PRIORITY_HINT_USE_CASE_TYPE_SCAN>
<android.media.tv.TvInputService: java.lang.String SERVICE_INTERFACE>
<android.media.tv.TvInputService: java.lang.String SERVICE_META_DATA>
android.media.tv.TvInputService$HardwareSession
<android.media.tv.TvInputService$HardwareSession: void <init>(android.content.Context)>
<android.media.tv.TvInputService$HardwareSession: java.lang.String getHardwareInputId()>
<android.media.tv.TvInputService$HardwareSession: void onHardwareVideoAvailable()>
<android.media.tv.TvInputService$HardwareSession: void onHardwareVideoUnavailable(int)>
<android.media.tv.TvInputService$HardwareSession: boolean onSetSurface(android.view.Surface)>
android.media.tv.TvInputService$RecordingSession
<android.media.tv.TvInputService$RecordingSession: void <init>(android.content.Context)>
<android.media.tv.TvInputService$RecordingSession: void notifyError(int)>
<android.media.tv.TvInputService$RecordingSession: void notifyRecordingStopped(android.net.Uri)>
<android.media.tv.TvInputService$RecordingSession: void notifyTuned(android.net.Uri)>
<android.media.tv.TvInputService$RecordingSession: void onAppPrivateCommand(java.lang.String,android.os.Bundle)>
<android.media.tv.TvInputService$RecordingSession: void onPauseRecording(android.os.Bundle)>
<android.media.tv.TvInputService$RecordingSession: void onRelease()>
<android.media.tv.TvInputService$RecordingSession: void onResumeRecording(android.os.Bundle)>
<android.media.tv.TvInputService$RecordingSession: void onStartRecording(android.net.Uri)>
<android.media.tv.TvInputService$RecordingSession: void onStartRecording(android.net.Uri,android.os.Bundle)>
<android.media.tv.TvInputService$RecordingSession: void onStopRecording()>
<android.media.tv.TvInputService$RecordingSession: void onTune(android.net.Uri)>
<android.media.tv.TvInputService$RecordingSession: void onTune(android.net.Uri,android.os.Bundle)>
android.media.tv.TvInputService$Session
<android.media.tv.TvInputService$Session: void <init>(android.content.Context)>
<android.media.tv.TvInputService$Session: void layoutSurface(int,int,int,int)>
<android.media.tv.TvInputService$Session: void notifyAdResponse(android.media.tv.AdResponse)>
<android.media.tv.TvInputService$Session: void notifyAitInfoUpdated(android.media.tv.AitInfo)>
<android.media.tv.TvInputService$Session: void notifyBroadcastInfoResponse(android.media.tv.BroadcastInfoResponse)>
<android.media.tv.TvInputService$Session: void notifyChannelRetuned(android.net.Uri)>
<android.media.tv.TvInputService$Session: void notifyContentAllowed()>
<android.media.tv.TvInputService$Session: void notifyContentBlocked(android.media.tv.TvContentRating)>
<android.media.tv.TvInputService$Session: void notifySignalStrength(int)>
<android.media.tv.TvInputService$Session: void notifyTimeShiftStatusChanged(int)>
<android.media.tv.TvInputService$Session: void notifyTrackSelected(int,java.lang.String)>
<android.media.tv.TvInputService$Session: void notifyTracksChanged(java.util.List)>
<android.media.tv.TvInputService$Session: void notifyTuned(android.net.Uri)>
<android.media.tv.TvInputService$Session: void notifyVideoAvailable()>
<android.media.tv.TvInputService$Session: void notifyVideoUnavailable(int)>
<android.media.tv.TvInputService$Session: void onAppPrivateCommand(java.lang.String,android.os.Bundle)>
<android.media.tv.TvInputService$Session: android.view.View onCreateOverlayView()>
<android.media.tv.TvInputService$Session: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.media.tv.TvInputService$Session: boolean onKeyDown(int,android.view.KeyEvent)>
<android.media.tv.TvInputService$Session: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.media.tv.TvInputService$Session: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.media.tv.TvInputService$Session: boolean onKeyUp(int,android.view.KeyEvent)>
<android.media.tv.TvInputService$Session: void onOverlayViewSizeChanged(int,int)>
<android.media.tv.TvInputService$Session: void onRelease()>
<android.media.tv.TvInputService$Session: void onRemoveBroadcastInfo(int)>
<android.media.tv.TvInputService$Session: void onRequestAd(android.media.tv.AdRequest)>
<android.media.tv.TvInputService$Session: void onRequestBroadcastInfo(android.media.tv.BroadcastInfoRequest)>
<android.media.tv.TvInputService$Session: boolean onSelectTrack(int,java.lang.String)>
<android.media.tv.TvInputService$Session: void onSetCaptionEnabled(boolean)>
<android.media.tv.TvInputService$Session: void onSetInteractiveAppNotificationEnabled(boolean)>
<android.media.tv.TvInputService$Session: void onSetStreamVolume(float)>
<android.media.tv.TvInputService$Session: boolean onSetSurface(android.view.Surface)>
<android.media.tv.TvInputService$Session: void onSurfaceChanged(int,int,int)>
<android.media.tv.TvInputService$Session: long onTimeShiftGetCurrentPosition()>
<android.media.tv.TvInputService$Session: long onTimeShiftGetStartPosition()>
<android.media.tv.TvInputService$Session: void onTimeShiftPause()>
<android.media.tv.TvInputService$Session: void onTimeShiftPlay(android.net.Uri)>
<android.media.tv.TvInputService$Session: void onTimeShiftResume()>
<android.media.tv.TvInputService$Session: void onTimeShiftSeekTo(long)>
<android.media.tv.TvInputService$Session: void onTimeShiftSetPlaybackParams(android.media.PlaybackParams)>
<android.media.tv.TvInputService$Session: boolean onTouchEvent(android.view.MotionEvent)>
<android.media.tv.TvInputService$Session: boolean onTrackballEvent(android.view.MotionEvent)>
<android.media.tv.TvInputService$Session: boolean onTune(android.net.Uri)>
<android.media.tv.TvInputService$Session: boolean onTune(android.net.Uri,android.os.Bundle)>
<android.media.tv.TvInputService$Session: void onUnblockContent(android.media.tv.TvContentRating)>
<android.media.tv.TvInputService$Session: void setOverlayViewEnabled(boolean)>
android.media.tv.TvRecordingClient
<android.media.tv.TvRecordingClient: void <init>(android.content.Context,java.lang.String,android.media.tv.TvRecordingClient$RecordingCallback,android.os.Handler)>
<android.media.tv.TvRecordingClient: void pauseRecording()>
<android.media.tv.TvRecordingClient: void pauseRecording(android.os.Bundle)>
<android.media.tv.TvRecordingClient: void release()>
<android.media.tv.TvRecordingClient: void resumeRecording()>
<android.media.tv.TvRecordingClient: void resumeRecording(android.os.Bundle)>
<android.media.tv.TvRecordingClient: void sendAppPrivateCommand(java.lang.String,android.os.Bundle)>
<android.media.tv.TvRecordingClient: void startRecording(android.net.Uri)>
<android.media.tv.TvRecordingClient: void startRecording(android.net.Uri,android.os.Bundle)>
<android.media.tv.TvRecordingClient: void stopRecording()>
<android.media.tv.TvRecordingClient: void tune(java.lang.String,android.net.Uri)>
<android.media.tv.TvRecordingClient: void tune(java.lang.String,android.net.Uri,android.os.Bundle)>
android.media.tv.TvRecordingClient$RecordingCallback
<android.media.tv.TvRecordingClient$RecordingCallback: void <init>()>
<android.media.tv.TvRecordingClient$RecordingCallback: void onConnectionFailed(java.lang.String)>
<android.media.tv.TvRecordingClient$RecordingCallback: void onDisconnected(java.lang.String)>
<android.media.tv.TvRecordingClient$RecordingCallback: void onError(int)>
<android.media.tv.TvRecordingClient$RecordingCallback: void onRecordingStopped(android.net.Uri)>
<android.media.tv.TvRecordingClient$RecordingCallback: void onTuned(android.net.Uri)>
android.media.tv.TvTrackInfo
<android.media.tv.TvTrackInfo: int describeContents()>
<android.media.tv.TvTrackInfo: int getAudioChannelCount()>
<android.media.tv.TvTrackInfo: int getAudioSampleRate()>
<android.media.tv.TvTrackInfo: java.lang.CharSequence getDescription()>
<android.media.tv.TvTrackInfo: java.lang.String getEncoding()>
<android.media.tv.TvTrackInfo: android.os.Bundle getExtra()>
<android.media.tv.TvTrackInfo: java.lang.String getId()>
<android.media.tv.TvTrackInfo: java.lang.String getLanguage()>
<android.media.tv.TvTrackInfo: int getType()>
<android.media.tv.TvTrackInfo: byte getVideoActiveFormatDescription()>
<android.media.tv.TvTrackInfo: float getVideoFrameRate()>
<android.media.tv.TvTrackInfo: int getVideoHeight()>
<android.media.tv.TvTrackInfo: float getVideoPixelAspectRatio()>
<android.media.tv.TvTrackInfo: int getVideoWidth()>
<android.media.tv.TvTrackInfo: boolean isAudioDescription()>
<android.media.tv.TvTrackInfo: boolean isEncrypted()>
<android.media.tv.TvTrackInfo: boolean isHardOfHearing()>
<android.media.tv.TvTrackInfo: boolean isSpokenSubtitle()>
<android.media.tv.TvTrackInfo: void writeToParcel(android.os.Parcel,int)>
<android.media.tv.TvTrackInfo: android.os.Parcelable$Creator CREATOR>
<android.media.tv.TvTrackInfo: int TYPE_AUDIO>
<android.media.tv.TvTrackInfo: int TYPE_SUBTITLE>
<android.media.tv.TvTrackInfo: int TYPE_VIDEO>
android.media.tv.TvTrackInfo$Builder
<android.media.tv.TvTrackInfo$Builder: void <init>(int,java.lang.String)>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo build()>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo$Builder setAudioChannelCount(int)>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo$Builder setAudioDescription(boolean)>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo$Builder setAudioSampleRate(int)>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo$Builder setDescription(java.lang.CharSequence)>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo$Builder setEncoding(java.lang.String)>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo$Builder setEncrypted(boolean)>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo$Builder setExtra(android.os.Bundle)>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo$Builder setHardOfHearing(boolean)>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo$Builder setLanguage(java.lang.String)>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo$Builder setSpokenSubtitle(boolean)>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo$Builder setVideoActiveFormatDescription(byte)>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo$Builder setVideoFrameRate(float)>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo$Builder setVideoHeight(int)>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo$Builder setVideoPixelAspectRatio(float)>
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo$Builder setVideoWidth(int)>
android.media.tv.TvView
<android.media.tv.TvView: void <init>(android.content.Context)>
<android.media.tv.TvView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.media.tv.TvView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.media.tv.TvView: boolean dispatchUnhandledInputEvent(android.view.InputEvent)>
<android.media.tv.TvView: java.lang.String getSelectedTrack(int)>
<android.media.tv.TvView: java.util.List getTracks(int)>
<android.media.tv.TvView: boolean onUnhandledInputEvent(android.view.InputEvent)>
<android.media.tv.TvView: void reset()>
<android.media.tv.TvView: void selectTrack(int,java.lang.String)>
<android.media.tv.TvView: void sendAppPrivateCommand(java.lang.String,android.os.Bundle)>
<android.media.tv.TvView: void setCallback(android.media.tv.TvView$TvInputCallback)>
<android.media.tv.TvView: void setCaptionEnabled(boolean)>
<android.media.tv.TvView: void setInteractiveAppNotificationEnabled(boolean)>
<android.media.tv.TvView: void setOnUnhandledInputEventListener(android.media.tv.TvView$OnUnhandledInputEventListener)>
<android.media.tv.TvView: void setStreamVolume(float)>
<android.media.tv.TvView: void setTimeShiftPositionCallback(android.media.tv.TvView$TimeShiftPositionCallback)>
<android.media.tv.TvView: void setZOrderMediaOverlay(boolean)>
<android.media.tv.TvView: void setZOrderOnTop(boolean)>
<android.media.tv.TvView: void timeShiftPause()>
<android.media.tv.TvView: void timeShiftPlay(java.lang.String,android.net.Uri)>
<android.media.tv.TvView: void timeShiftResume()>
<android.media.tv.TvView: void timeShiftSeekTo(long)>
<android.media.tv.TvView: void timeShiftSetPlaybackParams(android.media.PlaybackParams)>
<android.media.tv.TvView: void tune(java.lang.String,android.net.Uri)>
<android.media.tv.TvView: void tune(java.lang.String,android.net.Uri,android.os.Bundle)>
android.media.tv.TvView$OnUnhandledInputEventListener
<android.media.tv.TvView$OnUnhandledInputEventListener: boolean onUnhandledInputEvent(android.view.InputEvent)>
android.media.tv.TvView$TimeShiftPositionCallback
<android.media.tv.TvView$TimeShiftPositionCallback: void <init>()>
<android.media.tv.TvView$TimeShiftPositionCallback: void onTimeShiftCurrentPositionChanged(java.lang.String,long)>
<android.media.tv.TvView$TimeShiftPositionCallback: void onTimeShiftStartPositionChanged(java.lang.String,long)>
android.media.tv.TvView$TvInputCallback
<android.media.tv.TvView$TvInputCallback: void <init>()>
<android.media.tv.TvView$TvInputCallback: void onAitInfoUpdated(java.lang.String,android.media.tv.AitInfo)>
<android.media.tv.TvView$TvInputCallback: void onChannelRetuned(java.lang.String,android.net.Uri)>
<android.media.tv.TvView$TvInputCallback: void onConnectionFailed(java.lang.String)>
<android.media.tv.TvView$TvInputCallback: void onContentAllowed(java.lang.String)>
<android.media.tv.TvView$TvInputCallback: void onContentBlocked(java.lang.String,android.media.tv.TvContentRating)>
<android.media.tv.TvView$TvInputCallback: void onDisconnected(java.lang.String)>
<android.media.tv.TvView$TvInputCallback: void onSignalStrengthUpdated(java.lang.String,int)>
<android.media.tv.TvView$TvInputCallback: void onTimeShiftStatusChanged(java.lang.String,int)>
<android.media.tv.TvView$TvInputCallback: void onTrackSelected(java.lang.String,int,java.lang.String)>
<android.media.tv.TvView$TvInputCallback: void onTracksChanged(java.lang.String,java.util.List)>
<android.media.tv.TvView$TvInputCallback: void onTuned(java.lang.String,android.net.Uri)>
<android.media.tv.TvView$TvInputCallback: void onVideoAvailable(java.lang.String)>
<android.media.tv.TvView$TvInputCallback: void onVideoSizeChanged(java.lang.String,int,int)>
<android.media.tv.TvView$TvInputCallback: void onVideoUnavailable(java.lang.String,int)>
android.media.tv.interactive.AppLinkInfo
<android.media.tv.interactive.AppLinkInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<android.media.tv.interactive.AppLinkInfo: int describeContents()>
<android.media.tv.interactive.AppLinkInfo: android.content.ComponentName getComponentName()>
<android.media.tv.interactive.AppLinkInfo: android.net.Uri getUri()>
<android.media.tv.interactive.AppLinkInfo: void writeToParcel(android.os.Parcel,int)>
<android.media.tv.interactive.AppLinkInfo: android.os.Parcelable$Creator CREATOR>
android.media.tv.interactive.TvInteractiveAppManager
<android.media.tv.interactive.TvInteractiveAppManager: java.util.List getTvInteractiveAppServiceList()>
<android.media.tv.interactive.TvInteractiveAppManager: void registerAppLinkInfo(java.lang.String,android.media.tv.interactive.AppLinkInfo)>
<android.media.tv.interactive.TvInteractiveAppManager: void registerCallback(java.util.concurrent.Executor,android.media.tv.interactive.TvInteractiveAppManager$TvInteractiveAppCallback)>
<android.media.tv.interactive.TvInteractiveAppManager: void sendAppLinkCommand(java.lang.String,android.os.Bundle)>
<android.media.tv.interactive.TvInteractiveAppManager: void unregisterAppLinkInfo(java.lang.String,android.media.tv.interactive.AppLinkInfo)>
<android.media.tv.interactive.TvInteractiveAppManager: void unregisterCallback(android.media.tv.interactive.TvInteractiveAppManager$TvInteractiveAppCallback)>
<android.media.tv.interactive.TvInteractiveAppManager: java.lang.String ACTION_APP_LINK_COMMAND>
<android.media.tv.interactive.TvInteractiveAppManager: java.lang.String APP_LINK_KEY_BACK_URI>
<android.media.tv.interactive.TvInteractiveAppManager: java.lang.String APP_LINK_KEY_CLASS_NAME>
<android.media.tv.interactive.TvInteractiveAppManager: java.lang.String APP_LINK_KEY_COMMAND_TYPE>
<android.media.tv.interactive.TvInteractiveAppManager: java.lang.String APP_LINK_KEY_PACKAGE_NAME>
<android.media.tv.interactive.TvInteractiveAppManager: java.lang.String APP_LINK_KEY_SERVICE_ID>
<android.media.tv.interactive.TvInteractiveAppManager: int ERROR_BLOCKED>
<android.media.tv.interactive.TvInteractiveAppManager: int ERROR_ENCRYPTED>
<android.media.tv.interactive.TvInteractiveAppManager: int ERROR_NONE>
<android.media.tv.interactive.TvInteractiveAppManager: int ERROR_NOT_SUPPORTED>
<android.media.tv.interactive.TvInteractiveAppManager: int ERROR_RESOURCE_UNAVAILABLE>
<android.media.tv.interactive.TvInteractiveAppManager: int ERROR_UNKNOWN>
<android.media.tv.interactive.TvInteractiveAppManager: int ERROR_UNKNOWN_CHANNEL>
<android.media.tv.interactive.TvInteractiveAppManager: int ERROR_WEAK_SIGNAL>
<android.media.tv.interactive.TvInteractiveAppManager: java.lang.String INTENT_KEY_BI_INTERACTIVE_APP_TYPE>
<android.media.tv.interactive.TvInteractiveAppManager: java.lang.String INTENT_KEY_BI_INTERACTIVE_APP_URI>
<android.media.tv.interactive.TvInteractiveAppManager: java.lang.String INTENT_KEY_CHANNEL_URI>
<android.media.tv.interactive.TvInteractiveAppManager: java.lang.String INTENT_KEY_COMMAND_TYPE>
<android.media.tv.interactive.TvInteractiveAppManager: java.lang.String INTENT_KEY_INTERACTIVE_APP_SERVICE_ID>
<android.media.tv.interactive.TvInteractiveAppManager: java.lang.String INTENT_KEY_TV_INPUT_ID>
<android.media.tv.interactive.TvInteractiveAppManager: int INTERACTIVE_APP_STATE_ERROR>
<android.media.tv.interactive.TvInteractiveAppManager: int INTERACTIVE_APP_STATE_RUNNING>
<android.media.tv.interactive.TvInteractiveAppManager: int INTERACTIVE_APP_STATE_STOPPED>
<android.media.tv.interactive.TvInteractiveAppManager: int SERVICE_STATE_ERROR>
<android.media.tv.interactive.TvInteractiveAppManager: int SERVICE_STATE_PREPARING>
<android.media.tv.interactive.TvInteractiveAppManager: int SERVICE_STATE_READY>
<android.media.tv.interactive.TvInteractiveAppManager: int SERVICE_STATE_UNREALIZED>
<android.media.tv.interactive.TvInteractiveAppManager: int TELETEXT_APP_STATE_ERROR>
<android.media.tv.interactive.TvInteractiveAppManager: int TELETEXT_APP_STATE_HIDE>
<android.media.tv.interactive.TvInteractiveAppManager: int TELETEXT_APP_STATE_SHOW>
android.media.tv.interactive.TvInteractiveAppManager$TvInteractiveAppCallback
<android.media.tv.interactive.TvInteractiveAppManager$TvInteractiveAppCallback: void <init>()>
<android.media.tv.interactive.TvInteractiveAppManager$TvInteractiveAppCallback: void onInteractiveAppServiceAdded(java.lang.String)>
<android.media.tv.interactive.TvInteractiveAppManager$TvInteractiveAppCallback: void onInteractiveAppServiceRemoved(java.lang.String)>
<android.media.tv.interactive.TvInteractiveAppManager$TvInteractiveAppCallback: void onInteractiveAppServiceUpdated(java.lang.String)>
<android.media.tv.interactive.TvInteractiveAppManager$TvInteractiveAppCallback: void onTvInteractiveAppServiceStateChanged(java.lang.String,int,int,int)>
android.media.tv.interactive.TvInteractiveAppService
<android.media.tv.interactive.TvInteractiveAppService: void <init>()>
<android.media.tv.interactive.TvInteractiveAppService: void notifyStateChanged(int,int,int)>
<android.media.tv.interactive.TvInteractiveAppService: void onAppLinkCommand(android.os.Bundle)>
<android.media.tv.interactive.TvInteractiveAppService: android.os.IBinder onBind(android.content.Intent)>
<android.media.tv.interactive.TvInteractiveAppService: android.media.tv.interactive.TvInteractiveAppService$Session onCreateSession(java.lang.String,int)>
<android.media.tv.interactive.TvInteractiveAppService: void onRegisterAppLinkInfo(android.media.tv.interactive.AppLinkInfo)>
<android.media.tv.interactive.TvInteractiveAppService: void onUnregisterAppLinkInfo(android.media.tv.interactive.AppLinkInfo)>
<android.media.tv.interactive.TvInteractiveAppService: java.lang.String COMMAND_PARAMETER_KEY_CHANGE_CHANNEL_QUIETLY>
<android.media.tv.interactive.TvInteractiveAppService: java.lang.String COMMAND_PARAMETER_KEY_CHANNEL_URI>
<android.media.tv.interactive.TvInteractiveAppService: java.lang.String COMMAND_PARAMETER_KEY_INPUT_ID>
<android.media.tv.interactive.TvInteractiveAppService: java.lang.String COMMAND_PARAMETER_KEY_TRACK_ID>
<android.media.tv.interactive.TvInteractiveAppService: java.lang.String COMMAND_PARAMETER_KEY_TRACK_TYPE>
<android.media.tv.interactive.TvInteractiveAppService: java.lang.String COMMAND_PARAMETER_KEY_VOLUME>
<android.media.tv.interactive.TvInteractiveAppService: java.lang.String PLAYBACK_COMMAND_TYPE_SELECT_TRACK>
<android.media.tv.interactive.TvInteractiveAppService: java.lang.String PLAYBACK_COMMAND_TYPE_SET_STREAM_VOLUME>
<android.media.tv.interactive.TvInteractiveAppService: java.lang.String PLAYBACK_COMMAND_TYPE_STOP>
<android.media.tv.interactive.TvInteractiveAppService: java.lang.String PLAYBACK_COMMAND_TYPE_TUNE>
<android.media.tv.interactive.TvInteractiveAppService: java.lang.String PLAYBACK_COMMAND_TYPE_TUNE_NEXT>
<android.media.tv.interactive.TvInteractiveAppService: java.lang.String PLAYBACK_COMMAND_TYPE_TUNE_PREV>
<android.media.tv.interactive.TvInteractiveAppService: java.lang.String SERVICE_INTERFACE>
<android.media.tv.interactive.TvInteractiveAppService: java.lang.String SERVICE_META_DATA>
android.media.tv.interactive.TvInteractiveAppService$Session
<android.media.tv.interactive.TvInteractiveAppService$Session: void <init>(android.content.Context)>
<android.media.tv.interactive.TvInteractiveAppService$Session: boolean isMediaViewEnabled()>
<android.media.tv.interactive.TvInteractiveAppService$Session: void layoutSurface(int,int,int,int)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void notifyBiInteractiveAppCreated(android.net.Uri,java.lang.String)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void notifySessionStateChanged(int,int)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void notifyTeletextAppStateChanged(int)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onAdResponse(android.media.tv.AdResponse)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onBroadcastInfoResponse(android.media.tv.BroadcastInfoResponse)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onContentAllowed()>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onContentBlocked(android.media.tv.TvContentRating)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onCreateBiInteractiveAppRequest(android.net.Uri,android.os.Bundle)>
<android.media.tv.interactive.TvInteractiveAppService$Session: android.view.View onCreateMediaView()>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onCurrentChannelLcn(int)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onCurrentChannelUri(android.net.Uri)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onCurrentTvInputId(java.lang.String)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onDestroyBiInteractiveAppRequest(java.lang.String)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onError(java.lang.String,android.os.Bundle)>
<android.media.tv.interactive.TvInteractiveAppService$Session: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.media.tv.interactive.TvInteractiveAppService$Session: boolean onKeyDown(int,android.view.KeyEvent)>
<android.media.tv.interactive.TvInteractiveAppService$Session: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.media.tv.interactive.TvInteractiveAppService$Session: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.media.tv.interactive.TvInteractiveAppService$Session: boolean onKeyUp(int,android.view.KeyEvent)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onMediaViewSizeChanged(int,int)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onRelease()>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onResetInteractiveApp()>
<android.media.tv.interactive.TvInteractiveAppService$Session: boolean onSetSurface(android.view.Surface)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onSetTeletextAppEnabled(boolean)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onSignalStrength(int)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onSigningResult(java.lang.String,byte[])>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onStartInteractiveApp()>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onStopInteractiveApp()>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onStreamVolume(float)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onSurfaceChanged(int,int,int)>
<android.media.tv.interactive.TvInteractiveAppService$Session: boolean onTouchEvent(android.view.MotionEvent)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onTrackInfoList(java.util.List)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onTrackSelected(int,java.lang.String)>
<android.media.tv.interactive.TvInteractiveAppService$Session: boolean onTrackballEvent(android.view.MotionEvent)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onTracksChanged(java.util.List)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onTuned(android.net.Uri)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onVideoAvailable()>
<android.media.tv.interactive.TvInteractiveAppService$Session: void onVideoUnavailable(int)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void removeBroadcastInfo(int)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void requestAd(android.media.tv.AdRequest)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void requestBroadcastInfo(android.media.tv.BroadcastInfoRequest)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void requestCurrentChannelLcn()>
<android.media.tv.interactive.TvInteractiveAppService$Session: void requestCurrentChannelUri()>
<android.media.tv.interactive.TvInteractiveAppService$Session: void requestCurrentTvInputId()>
<android.media.tv.interactive.TvInteractiveAppService$Session: void requestSigning(java.lang.String,java.lang.String,java.lang.String,byte[])>
<android.media.tv.interactive.TvInteractiveAppService$Session: void requestStreamVolume()>
<android.media.tv.interactive.TvInteractiveAppService$Session: void requestTrackInfoList()>
<android.media.tv.interactive.TvInteractiveAppService$Session: void sendPlaybackCommandRequest(java.lang.String,android.os.Bundle)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void setMediaViewEnabled(boolean)>
<android.media.tv.interactive.TvInteractiveAppService$Session: void setVideoBounds(android.graphics.Rect)>
android.media.tv.interactive.TvInteractiveAppServiceInfo
<android.media.tv.interactive.TvInteractiveAppServiceInfo: void <init>(android.content.Context,android.content.ComponentName)>
<android.media.tv.interactive.TvInteractiveAppServiceInfo: int describeContents()>
<android.media.tv.interactive.TvInteractiveAppServiceInfo: java.lang.String getId()>
<android.media.tv.interactive.TvInteractiveAppServiceInfo: android.content.pm.ServiceInfo getServiceInfo()>
<android.media.tv.interactive.TvInteractiveAppServiceInfo: int getSupportedTypes()>
<android.media.tv.interactive.TvInteractiveAppServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.media.tv.interactive.TvInteractiveAppServiceInfo: android.os.Parcelable$Creator CREATOR>
<android.media.tv.interactive.TvInteractiveAppServiceInfo: int INTERACTIVE_APP_TYPE_ATSC>
<android.media.tv.interactive.TvInteractiveAppServiceInfo: int INTERACTIVE_APP_TYPE_GINGA>
<android.media.tv.interactive.TvInteractiveAppServiceInfo: int INTERACTIVE_APP_TYPE_HBBTV>
android.media.tv.interactive.TvInteractiveAppView
<android.media.tv.interactive.TvInteractiveAppView: void <init>(android.content.Context)>
<android.media.tv.interactive.TvInteractiveAppView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.media.tv.interactive.TvInteractiveAppView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.media.tv.interactive.TvInteractiveAppView: void clearCallback()>
<android.media.tv.interactive.TvInteractiveAppView: void clearOnUnhandledInputEventListener()>
<android.media.tv.interactive.TvInteractiveAppView: void createBiInteractiveApp(android.net.Uri,android.os.Bundle)>
<android.media.tv.interactive.TvInteractiveAppView: void destroyBiInteractiveApp(java.lang.String)>
<android.media.tv.interactive.TvInteractiveAppView: boolean dispatchUnhandledInputEvent(android.view.InputEvent)>
<android.media.tv.interactive.TvInteractiveAppView: android.media.tv.interactive.TvInteractiveAppView$OnUnhandledInputEventListener getOnUnhandledInputEventListener()>
<android.media.tv.interactive.TvInteractiveAppView: void notifyError(java.lang.String,android.os.Bundle)>
<android.media.tv.interactive.TvInteractiveAppView: void onAttachedToWindow()>
<android.media.tv.interactive.TvInteractiveAppView: void onDetachedFromWindow()>
<android.media.tv.interactive.TvInteractiveAppView: void onLayout(boolean,int,int,int,int)>
<android.media.tv.interactive.TvInteractiveAppView: void onMeasure(int,int)>
<android.media.tv.interactive.TvInteractiveAppView: boolean onUnhandledInputEvent(android.view.InputEvent)>
<android.media.tv.interactive.TvInteractiveAppView: void onVisibilityChanged(android.view.View,int)>
<android.media.tv.interactive.TvInteractiveAppView: void prepareInteractiveApp(java.lang.String,int)>
<android.media.tv.interactive.TvInteractiveAppView: void reset()>
<android.media.tv.interactive.TvInteractiveAppView: void resetInteractiveApp()>
<android.media.tv.interactive.TvInteractiveAppView: void sendCurrentChannelLcn(int)>
<android.media.tv.interactive.TvInteractiveAppView: void sendCurrentChannelUri(android.net.Uri)>
<android.media.tv.interactive.TvInteractiveAppView: void sendCurrentTvInputId(java.lang.String)>
<android.media.tv.interactive.TvInteractiveAppView: void sendSigningResult(java.lang.String,byte[])>
<android.media.tv.interactive.TvInteractiveAppView: void sendStreamVolume(float)>
<android.media.tv.interactive.TvInteractiveAppView: void sendTrackInfoList(java.util.List)>
<android.media.tv.interactive.TvInteractiveAppView: void setCallback(java.util.concurrent.Executor,android.media.tv.interactive.TvInteractiveAppView$TvInteractiveAppCallback)>
<android.media.tv.interactive.TvInteractiveAppView: void setOnUnhandledInputEventListener(java.util.concurrent.Executor,android.media.tv.interactive.TvInteractiveAppView$OnUnhandledInputEventListener)>
<android.media.tv.interactive.TvInteractiveAppView: void setTeletextAppEnabled(boolean)>
<android.media.tv.interactive.TvInteractiveAppView: int setTvView(android.media.tv.TvView)>
<android.media.tv.interactive.TvInteractiveAppView: void startInteractiveApp()>
<android.media.tv.interactive.TvInteractiveAppView: void stopInteractiveApp()>
<android.media.tv.interactive.TvInteractiveAppView: java.lang.String BI_INTERACTIVE_APP_KEY_ALIAS>
<android.media.tv.interactive.TvInteractiveAppView: java.lang.String BI_INTERACTIVE_APP_KEY_CERTIFICATE>
<android.media.tv.interactive.TvInteractiveAppView: java.lang.String BI_INTERACTIVE_APP_KEY_HTTP_ADDITIONAL_HEADERS>
<android.media.tv.interactive.TvInteractiveAppView: java.lang.String BI_INTERACTIVE_APP_KEY_HTTP_USER_AGENT>
<android.media.tv.interactive.TvInteractiveAppView: java.lang.String BI_INTERACTIVE_APP_KEY_PRIVATE_KEY>
<android.media.tv.interactive.TvInteractiveAppView: java.lang.String ERROR_KEY_METHOD_NAME>
android.media.tv.interactive.TvInteractiveAppView$OnUnhandledInputEventListener
<android.media.tv.interactive.TvInteractiveAppView$OnUnhandledInputEventListener: boolean onUnhandledInputEvent(android.view.InputEvent)>
android.media.tv.interactive.TvInteractiveAppView$TvInteractiveAppCallback
<android.media.tv.interactive.TvInteractiveAppView$TvInteractiveAppCallback: void <init>()>
<android.media.tv.interactive.TvInteractiveAppView$TvInteractiveAppCallback: void onBiInteractiveAppCreated(java.lang.String,android.net.Uri,java.lang.String)>
<android.media.tv.interactive.TvInteractiveAppView$TvInteractiveAppCallback: void onPlaybackCommandRequest(java.lang.String,java.lang.String,android.os.Bundle)>
<android.media.tv.interactive.TvInteractiveAppView$TvInteractiveAppCallback: void onRequestCurrentChannelLcn(java.lang.String)>
<android.media.tv.interactive.TvInteractiveAppView$TvInteractiveAppCallback: void onRequestCurrentChannelUri(java.lang.String)>
<android.media.tv.interactive.TvInteractiveAppView$TvInteractiveAppCallback: void onRequestCurrentTvInputId(java.lang.String)>
<android.media.tv.interactive.TvInteractiveAppView$TvInteractiveAppCallback: void onRequestSigning(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[])>
<android.media.tv.interactive.TvInteractiveAppView$TvInteractiveAppCallback: void onRequestStreamVolume(java.lang.String)>
<android.media.tv.interactive.TvInteractiveAppView$TvInteractiveAppCallback: void onRequestTrackInfoList(java.lang.String)>
<android.media.tv.interactive.TvInteractiveAppView$TvInteractiveAppCallback: void onSetVideoBounds(java.lang.String,android.graphics.Rect)>
<android.media.tv.interactive.TvInteractiveAppView$TvInteractiveAppCallback: void onStateChanged(java.lang.String,int,int)>
<android.media.tv.interactive.TvInteractiveAppView$TvInteractiveAppCallback: void onTeletextAppStateChanged(java.lang.String,int)>
android.mtp.MtpConstants
<android.mtp.MtpConstants: void <init>()>
<android.mtp.MtpConstants: boolean isAbstractObject(int)>
<android.mtp.MtpConstants: int ASSOCIATION_TYPE_GENERIC_FOLDER>
<android.mtp.MtpConstants: int FORMAT_3GP_CONTAINER>
<android.mtp.MtpConstants: int FORMAT_AAC>
<android.mtp.MtpConstants: int FORMAT_ABSTRACT_AUDIO_ALBUM>
<android.mtp.MtpConstants: int FORMAT_ABSTRACT_AUDIO_PLAYLIST>
<android.mtp.MtpConstants: int FORMAT_ABSTRACT_AV_PLAYLIST>
<android.mtp.MtpConstants: int FORMAT_ABSTRACT_DOCUMENT>
<android.mtp.MtpConstants: int FORMAT_ABSTRACT_IMAGE_ALBUM>
<android.mtp.MtpConstants: int FORMAT_ABSTRACT_MEDIACAST>
<android.mtp.MtpConstants: int FORMAT_ABSTRACT_MULTIMEDIA_ALBUM>
<android.mtp.MtpConstants: int FORMAT_ABSTRACT_VIDEO_ALBUM>
<android.mtp.MtpConstants: int FORMAT_ABSTRACT_VIDEO_PLAYLIST>
<android.mtp.MtpConstants: int FORMAT_AIFF>
<android.mtp.MtpConstants: int FORMAT_ASF>
<android.mtp.MtpConstants: int FORMAT_ASSOCIATION>
<android.mtp.MtpConstants: int FORMAT_ASX_PLAYLIST>
<android.mtp.MtpConstants: int FORMAT_AUDIBLE>
<android.mtp.MtpConstants: int FORMAT_AVI>
<android.mtp.MtpConstants: int FORMAT_BMP>
<android.mtp.MtpConstants: int FORMAT_DEFINED>
<android.mtp.MtpConstants: int FORMAT_DNG>
<android.mtp.MtpConstants: int FORMAT_DPOF>
<android.mtp.MtpConstants: int FORMAT_EXECUTABLE>
<android.mtp.MtpConstants: int FORMAT_EXIF_JPEG>
<android.mtp.MtpConstants: int FORMAT_FLAC>
<android.mtp.MtpConstants: int FORMAT_GIF>
<android.mtp.MtpConstants: int FORMAT_HTML>
<android.mtp.MtpConstants: int FORMAT_JFIF>
<android.mtp.MtpConstants: int FORMAT_JP2>
<android.mtp.MtpConstants: int FORMAT_JPX>
<android.mtp.MtpConstants: int FORMAT_M3U_PLAYLIST>
<android.mtp.MtpConstants: int FORMAT_MP2>
<android.mtp.MtpConstants: int FORMAT_MP3>
<android.mtp.MtpConstants: int FORMAT_MP4_CONTAINER>
<android.mtp.MtpConstants: int FORMAT_MPEG>
<android.mtp.MtpConstants: int FORMAT_MPL_PLAYLIST>
<android.mtp.MtpConstants: int FORMAT_MS_EXCEL_SPREADSHEET>
<android.mtp.MtpConstants: int FORMAT_MS_POWERPOINT_PRESENTATION>
<android.mtp.MtpConstants: int FORMAT_MS_WORD_DOCUMENT>
<android.mtp.MtpConstants: int FORMAT_OGG>
<android.mtp.MtpConstants: int FORMAT_PICT>
<android.mtp.MtpConstants: int FORMAT_PLS_PLAYLIST>
<android.mtp.MtpConstants: int FORMAT_PNG>
<android.mtp.MtpConstants: int FORMAT_SCRIPT>
<android.mtp.MtpConstants: int FORMAT_TEXT>
<android.mtp.MtpConstants: int FORMAT_TIFF>
<android.mtp.MtpConstants: int FORMAT_TIFF_EP>
<android.mtp.MtpConstants: int FORMAT_UNDEFINED>
<android.mtp.MtpConstants: int FORMAT_UNDEFINED_AUDIO>
<android.mtp.MtpConstants: int FORMAT_UNDEFINED_COLLECTION>
<android.mtp.MtpConstants: int FORMAT_UNDEFINED_DOCUMENT>
<android.mtp.MtpConstants: int FORMAT_UNDEFINED_FIRMWARE>
<android.mtp.MtpConstants: int FORMAT_UNDEFINED_VIDEO>
<android.mtp.MtpConstants: int FORMAT_WAV>
<android.mtp.MtpConstants: int FORMAT_WINDOWS_IMAGE_FORMAT>
<android.mtp.MtpConstants: int FORMAT_WMA>
<android.mtp.MtpConstants: int FORMAT_WMV>
<android.mtp.MtpConstants: int FORMAT_WPL_PLAYLIST>
<android.mtp.MtpConstants: int FORMAT_XML_DOCUMENT>
<android.mtp.MtpConstants: int OPERATION_CLOSE_SESSION>
<android.mtp.MtpConstants: int OPERATION_COPY_OBJECT>
<android.mtp.MtpConstants: int OPERATION_DELETE_OBJECT>
<android.mtp.MtpConstants: int OPERATION_FORMAT_STORE>
<android.mtp.MtpConstants: int OPERATION_GET_DEVICE_INFO>
<android.mtp.MtpConstants: int OPERATION_GET_DEVICE_PROP_DESC>
<android.mtp.MtpConstants: int OPERATION_GET_DEVICE_PROP_VALUE>
<android.mtp.MtpConstants: int OPERATION_GET_NUM_OBJECTS>
<android.mtp.MtpConstants: int OPERATION_GET_OBJECT>
<android.mtp.MtpConstants: int OPERATION_GET_OBJECT_HANDLES>
<android.mtp.MtpConstants: int OPERATION_GET_OBJECT_INFO>
<android.mtp.MtpConstants: int OPERATION_GET_OBJECT_PROPS_SUPPORTED>
<android.mtp.MtpConstants: int OPERATION_GET_OBJECT_PROP_DESC>
<android.mtp.MtpConstants: int OPERATION_GET_OBJECT_PROP_VALUE>
<android.mtp.MtpConstants: int OPERATION_GET_OBJECT_REFERENCES>
<android.mtp.MtpConstants: int OPERATION_GET_PARTIAL_OBJECT>
<android.mtp.MtpConstants: int OPERATION_GET_PARTIAL_OBJECT_64>
<android.mtp.MtpConstants: int OPERATION_GET_STORAGE_INFO>
<android.mtp.MtpConstants: int OPERATION_GET_STORAGE_I_DS>
<android.mtp.MtpConstants: int OPERATION_GET_THUMB>
<android.mtp.MtpConstants: int OPERATION_INITIATE_CAPTURE>
<android.mtp.MtpConstants: int OPERATION_INITIATE_OPEN_CAPTURE>
<android.mtp.MtpConstants: int OPERATION_MOVE_OBJECT>
<android.mtp.MtpConstants: int OPERATION_OPEN_SESSION>
<android.mtp.MtpConstants: int OPERATION_POWER_DOWN>
<android.mtp.MtpConstants: int OPERATION_RESET_DEVICE>
<android.mtp.MtpConstants: int OPERATION_RESET_DEVICE_PROP_VALUE>
<android.mtp.MtpConstants: int OPERATION_SELF_TEST>
<android.mtp.MtpConstants: int OPERATION_SEND_OBJECT>
<android.mtp.MtpConstants: int OPERATION_SEND_OBJECT_INFO>
<android.mtp.MtpConstants: int OPERATION_SET_DEVICE_PROP_VALUE>
<android.mtp.MtpConstants: int OPERATION_SET_OBJECT_PROP_VALUE>
<android.mtp.MtpConstants: int OPERATION_SET_OBJECT_PROTECTION>
<android.mtp.MtpConstants: int OPERATION_SET_OBJECT_REFERENCES>
<android.mtp.MtpConstants: int OPERATION_SKIP>
<android.mtp.MtpConstants: int OPERATION_TERMINATE_OPEN_CAPTURE>
<android.mtp.MtpConstants: int PROTECTION_STATUS_NONE>
<android.mtp.MtpConstants: int PROTECTION_STATUS_NON_TRANSFERABLE_DATA>
<android.mtp.MtpConstants: int PROTECTION_STATUS_READ_ONLY>
<android.mtp.MtpConstants: int PROTECTION_STATUS_READ_ONLY_DATA>
android.mtp.MtpDevice
<android.mtp.MtpDevice: void <init>(android.hardware.usb.UsbDevice)>
<android.mtp.MtpDevice: void close()>
<android.mtp.MtpDevice: boolean deleteObject(int)>
<android.mtp.MtpDevice: int getDeviceId()>
<android.mtp.MtpDevice: android.mtp.MtpDeviceInfo getDeviceInfo()>
<android.mtp.MtpDevice: java.lang.String getDeviceName()>
<android.mtp.MtpDevice: byte[] getObject(int,int)>
<android.mtp.MtpDevice: int[] getObjectHandles(int,int,int)>
<android.mtp.MtpDevice: android.mtp.MtpObjectInfo getObjectInfo(int)>
<android.mtp.MtpDevice: long getParent(int)>
<android.mtp.MtpDevice: long getPartialObject(int,long,long,byte[])>
<android.mtp.MtpDevice: long getPartialObject64(int,long,long,byte[])>
<android.mtp.MtpDevice: long getStorageId(int)>
<android.mtp.MtpDevice: int[] getStorageIds()>
<android.mtp.MtpDevice: android.mtp.MtpStorageInfo getStorageInfo(int)>
<android.mtp.MtpDevice: byte[] getThumbnail(int)>
<android.mtp.MtpDevice: boolean importFile(int,java.lang.String)>
<android.mtp.MtpDevice: boolean importFile(int,android.os.ParcelFileDescriptor)>
<android.mtp.MtpDevice: boolean open(android.hardware.usb.UsbDeviceConnection)>
<android.mtp.MtpDevice: android.mtp.MtpEvent readEvent(android.os.CancellationSignal)>
<android.mtp.MtpDevice: boolean sendObject(int,long,android.os.ParcelFileDescriptor)>
<android.mtp.MtpDevice: android.mtp.MtpObjectInfo sendObjectInfo(android.mtp.MtpObjectInfo)>
android.mtp.MtpDeviceInfo
<android.mtp.MtpDeviceInfo: int[] getEventsSupported()>
<android.mtp.MtpDeviceInfo: java.lang.String getManufacturer()>
<android.mtp.MtpDeviceInfo: java.lang.String getModel()>
<android.mtp.MtpDeviceInfo: int[] getOperationsSupported()>
<android.mtp.MtpDeviceInfo: java.lang.String getSerialNumber()>
<android.mtp.MtpDeviceInfo: java.lang.String getVersion()>
<android.mtp.MtpDeviceInfo: boolean isEventSupported(int)>
<android.mtp.MtpDeviceInfo: boolean isOperationSupported(int)>
android.mtp.MtpEvent
<android.mtp.MtpEvent: int getDevicePropCode()>
<android.mtp.MtpEvent: int getEventCode()>
<android.mtp.MtpEvent: int getObjectFormatCode()>
<android.mtp.MtpEvent: int getObjectHandle()>
<android.mtp.MtpEvent: int getObjectPropCode()>
<android.mtp.MtpEvent: int getParameter1()>
<android.mtp.MtpEvent: int getParameter2()>
<android.mtp.MtpEvent: int getParameter3()>
<android.mtp.MtpEvent: int getStorageId()>
<android.mtp.MtpEvent: int getTransactionId()>
<android.mtp.MtpEvent: int EVENT_CANCEL_TRANSACTION>
<android.mtp.MtpEvent: int EVENT_CAPTURE_COMPLETE>
<android.mtp.MtpEvent: int EVENT_DEVICE_INFO_CHANGED>
<android.mtp.MtpEvent: int EVENT_DEVICE_PROP_CHANGED>
<android.mtp.MtpEvent: int EVENT_DEVICE_RESET>
<android.mtp.MtpEvent: int EVENT_OBJECT_ADDED>
<android.mtp.MtpEvent: int EVENT_OBJECT_INFO_CHANGED>
<android.mtp.MtpEvent: int EVENT_OBJECT_PROP_CHANGED>
<android.mtp.MtpEvent: int EVENT_OBJECT_PROP_DESC_CHANGED>
<android.mtp.MtpEvent: int EVENT_OBJECT_REFERENCES_CHANGED>
<android.mtp.MtpEvent: int EVENT_OBJECT_REMOVED>
<android.mtp.MtpEvent: int EVENT_REQUEST_OBJECT_TRANSFER>
<android.mtp.MtpEvent: int EVENT_STORAGE_INFO_CHANGED>
<android.mtp.MtpEvent: int EVENT_STORE_ADDED>
<android.mtp.MtpEvent: int EVENT_STORE_FULL>
<android.mtp.MtpEvent: int EVENT_STORE_REMOVED>
<android.mtp.MtpEvent: int EVENT_UNDEFINED>
<android.mtp.MtpEvent: int EVENT_UNREPORTED_STATUS>
android.mtp.MtpObjectInfo
<android.mtp.MtpObjectInfo: int getAssociationDesc()>
<android.mtp.MtpObjectInfo: int getAssociationType()>
<android.mtp.MtpObjectInfo: int getCompressedSize()>
<android.mtp.MtpObjectInfo: long getCompressedSizeLong()>
<android.mtp.MtpObjectInfo: long getDateCreated()>
<android.mtp.MtpObjectInfo: long getDateModified()>
<android.mtp.MtpObjectInfo: int getFormat()>
<android.mtp.MtpObjectInfo: int getImagePixDepth()>
<android.mtp.MtpObjectInfo: long getImagePixDepthLong()>
<android.mtp.MtpObjectInfo: int getImagePixHeight()>
<android.mtp.MtpObjectInfo: long getImagePixHeightLong()>
<android.mtp.MtpObjectInfo: int getImagePixWidth()>
<android.mtp.MtpObjectInfo: long getImagePixWidthLong()>
<android.mtp.MtpObjectInfo: java.lang.String getKeywords()>
<android.mtp.MtpObjectInfo: java.lang.String getName()>
<android.mtp.MtpObjectInfo: int getObjectHandle()>
<android.mtp.MtpObjectInfo: int getParent()>
<android.mtp.MtpObjectInfo: int getProtectionStatus()>
<android.mtp.MtpObjectInfo: int getSequenceNumber()>
<android.mtp.MtpObjectInfo: long getSequenceNumberLong()>
<android.mtp.MtpObjectInfo: int getStorageId()>
<android.mtp.MtpObjectInfo: int getThumbCompressedSize()>
<android.mtp.MtpObjectInfo: long getThumbCompressedSizeLong()>
<android.mtp.MtpObjectInfo: int getThumbFormat()>
<android.mtp.MtpObjectInfo: int getThumbPixHeight()>
<android.mtp.MtpObjectInfo: long getThumbPixHeightLong()>
<android.mtp.MtpObjectInfo: int getThumbPixWidth()>
<android.mtp.MtpObjectInfo: long getThumbPixWidthLong()>
android.mtp.MtpObjectInfo$Builder
<android.mtp.MtpObjectInfo$Builder: void <init>()>
<android.mtp.MtpObjectInfo$Builder: void <init>(android.mtp.MtpObjectInfo)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo build()>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setAssociationDesc(int)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setAssociationType(int)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setCompressedSize(long)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setDateCreated(long)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setDateModified(long)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setFormat(int)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setImagePixDepth(long)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setImagePixHeight(long)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setImagePixWidth(long)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setKeywords(java.lang.String)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setName(java.lang.String)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setObjectHandle(int)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setParent(int)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setProtectionStatus(int)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setSequenceNumber(long)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setStorageId(int)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setThumbCompressedSize(long)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setThumbFormat(int)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setThumbPixHeight(long)>
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo$Builder setThumbPixWidth(long)>
android.mtp.MtpStorageInfo
<android.mtp.MtpStorageInfo: java.lang.String getDescription()>
<android.mtp.MtpStorageInfo: long getFreeSpace()>
<android.mtp.MtpStorageInfo: long getMaxCapacity()>
<android.mtp.MtpStorageInfo: int getStorageId()>
<android.mtp.MtpStorageInfo: java.lang.String getVolumeIdentifier()>
android.net.Credentials
<android.net.Credentials: void <init>(int,int,int)>
<android.net.Credentials: int getGid()>
<android.net.Credentials: int getPid()>
<android.net.Credentials: int getUid()>
android.net.Ikev2VpnProfile
<android.net.Ikev2VpnProfile: java.util.List getAllowedAlgorithms()>
<android.net.Ikev2VpnProfile: android.net.ipsec.ike.IkeTunnelConnectionParams getIkeTunnelConnectionParams()>
<android.net.Ikev2VpnProfile: int getMaxMtu()>
<android.net.Ikev2VpnProfile: java.lang.String getPassword()>
<android.net.Ikev2VpnProfile: byte[] getPresharedKey()>
<android.net.Ikev2VpnProfile: android.net.ProxyInfo getProxyInfo()>
<android.net.Ikev2VpnProfile: java.security.PrivateKey getRsaPrivateKey()>
<android.net.Ikev2VpnProfile: java.lang.String getServerAddr()>
<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate getServerRootCaCert()>
<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate getUserCert()>
<android.net.Ikev2VpnProfile: java.lang.String getUserIdentity()>
<android.net.Ikev2VpnProfile: java.lang.String getUsername()>
<android.net.Ikev2VpnProfile: boolean isBypassable()>
<android.net.Ikev2VpnProfile: boolean isMetered()>
android.net.Ikev2VpnProfile$Builder
<android.net.Ikev2VpnProfile$Builder: void <init>(java.lang.String,java.lang.String)>
<android.net.Ikev2VpnProfile$Builder: void <init>(android.net.ipsec.ike.IkeTunnelConnectionParams)>
<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile build()>
<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setAllowedAlgorithms(java.util.List)>
<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setAuthDigitalSignature(java.security.cert.X509Certificate,java.security.PrivateKey,java.security.cert.X509Certificate)>
<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setAuthPsk(byte[])>
<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setAuthUsernamePassword(java.lang.String,java.lang.String,java.security.cert.X509Certificate)>
<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setBypassable(boolean)>
<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setLocalRoutesExcluded(boolean)>
<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setMaxMtu(int)>
<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setMetered(boolean)>
<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setProxy(android.net.ProxyInfo)>
<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setRequiresInternetValidation(boolean)>
android.net.LocalServerSocket
<android.net.LocalServerSocket: void <init>(java.lang.String)>
<android.net.LocalServerSocket: void <init>(java.io.FileDescriptor)>
<android.net.LocalServerSocket: android.net.LocalSocket accept()>
<android.net.LocalServerSocket: void close()>
<android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()>
<android.net.LocalServerSocket: android.net.LocalSocketAddress getLocalSocketAddress()>
android.net.LocalSocket
<android.net.LocalSocket: void <init>()>
<android.net.LocalSocket: void <init>(int)>
<android.net.LocalSocket: void bind(android.net.LocalSocketAddress)>
<android.net.LocalSocket: void close()>
<android.net.LocalSocket: void connect(android.net.LocalSocketAddress)>
<android.net.LocalSocket: void connect(android.net.LocalSocketAddress,int)>
<android.net.LocalSocket: java.io.FileDescriptor[] getAncillaryFileDescriptors()>
<android.net.LocalSocket: java.io.FileDescriptor getFileDescriptor()>
<android.net.LocalSocket: java.io.InputStream getInputStream()>
<android.net.LocalSocket: android.net.LocalSocketAddress getLocalSocketAddress()>
<android.net.LocalSocket: java.io.OutputStream getOutputStream()>
<android.net.LocalSocket: android.net.Credentials getPeerCredentials()>
<android.net.LocalSocket: int getReceiveBufferSize()>
<android.net.LocalSocket: android.net.LocalSocketAddress getRemoteSocketAddress()>
<android.net.LocalSocket: int getSendBufferSize()>
<android.net.LocalSocket: int getSoTimeout()>
<android.net.LocalSocket: boolean isBound()>
<android.net.LocalSocket: boolean isClosed()>
<android.net.LocalSocket: boolean isConnected()>
<android.net.LocalSocket: boolean isInputShutdown()>
<android.net.LocalSocket: boolean isOutputShutdown()>
<android.net.LocalSocket: void setFileDescriptorsForSend(java.io.FileDescriptor[])>
<android.net.LocalSocket: void setReceiveBufferSize(int)>
<android.net.LocalSocket: void setSendBufferSize(int)>
<android.net.LocalSocket: void setSoTimeout(int)>
<android.net.LocalSocket: void shutdownInput()>
<android.net.LocalSocket: void shutdownOutput()>
<android.net.LocalSocket: int SOCKET_DGRAM>
<android.net.LocalSocket: int SOCKET_SEQPACKET>
<android.net.LocalSocket: int SOCKET_STREAM>
android.net.LocalSocketAddress
<android.net.LocalSocketAddress: void <init>(java.lang.String,android.net.LocalSocketAddress$Namespace)>
<android.net.LocalSocketAddress: void <init>(java.lang.String)>
<android.net.LocalSocketAddress: java.lang.String getName()>
<android.net.LocalSocketAddress: android.net.LocalSocketAddress$Namespace getNamespace()>
android.net.LocalSocketAddress$Namespace
<android.net.LocalSocketAddress$Namespace: android.net.LocalSocketAddress$Namespace ABSTRACT>
<android.net.LocalSocketAddress$Namespace: android.net.LocalSocketAddress$Namespace FILESYSTEM>
<android.net.LocalSocketAddress$Namespace: android.net.LocalSocketAddress$Namespace RESERVED>
android.net.MailTo
<android.net.MailTo: java.lang.String getBody()>
<android.net.MailTo: java.lang.String getCc()>
<android.net.MailTo: java.util.Map getHeaders()>
<android.net.MailTo: java.lang.String getSubject()>
<android.net.MailTo: java.lang.String getTo()>
<android.net.MailTo: boolean isMailTo(java.lang.String)>
<android.net.MailTo: android.net.MailTo parse(java.lang.String)>
<android.net.MailTo: java.lang.String MAILTO_SCHEME>
android.net.NetworkSpecifier
<android.net.NetworkSpecifier: void <init>()>
android.net.PlatformVpnProfile
<android.net.PlatformVpnProfile: boolean areLocalRoutesExcluded()>
<android.net.PlatformVpnProfile: int getType()>
<android.net.PlatformVpnProfile: java.lang.String getTypeString()>
<android.net.PlatformVpnProfile: boolean isInternetValidationRequired()>
<android.net.PlatformVpnProfile: int TYPE_IKEV2_IPSEC_PSK>
<android.net.PlatformVpnProfile: int TYPE_IKEV2_IPSEC_RSA>
<android.net.PlatformVpnProfile: int TYPE_IKEV2_IPSEC_USER_PASS>
android.net.Proxy
<android.net.Proxy: void <init>()>
<android.net.Proxy: java.lang.String getDefaultHost()>
<android.net.Proxy: int getDefaultPort()>
<android.net.Proxy: java.lang.String getHost(android.content.Context)>
<android.net.Proxy: int getPort(android.content.Context)>
<android.net.Proxy: java.lang.String PROXY_CHANGE_ACTION>
android.net.SSLCertificateSocketFactory
<android.net.SSLCertificateSocketFactory: void <init>(int)>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int)>
<android.net.SSLCertificateSocketFactory: javax.net.SocketFactory getDefault(int)>
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDefault(int,android.net.SSLSessionCache)>
<android.net.SSLCertificateSocketFactory: java.lang.String[] getDefaultCipherSuites()>
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getInsecure(int,android.net.SSLSessionCache)>
<android.net.SSLCertificateSocketFactory: byte[] getNpnSelectedProtocol(java.net.Socket)>
<android.net.SSLCertificateSocketFactory: java.lang.String[] getSupportedCipherSuites()>
<android.net.SSLCertificateSocketFactory: void setHostname(java.net.Socket,java.lang.String)>
<android.net.SSLCertificateSocketFactory: void setKeyManagers(javax.net.ssl.KeyManager[])>
<android.net.SSLCertificateSocketFactory: void setNpnProtocols(byte[][])>
<android.net.SSLCertificateSocketFactory: void setTrustManagers(javax.net.ssl.TrustManager[])>
<android.net.SSLCertificateSocketFactory: void setUseSessionTickets(java.net.Socket,boolean)>
android.net.SSLSessionCache
<android.net.SSLSessionCache: void <init>(java.io.File)>
<android.net.SSLSessionCache: void <init>(android.content.Context)>
android.net.TelephonyNetworkSpecifier
<android.net.TelephonyNetworkSpecifier: int describeContents()>
<android.net.TelephonyNetworkSpecifier: int getSubscriptionId()>
<android.net.TelephonyNetworkSpecifier: void writeToParcel(android.os.Parcel,int)>
<android.net.TelephonyNetworkSpecifier: android.os.Parcelable$Creator CREATOR>
android.net.TelephonyNetworkSpecifier$Builder
<android.net.TelephonyNetworkSpecifier$Builder: void <init>()>
<android.net.TelephonyNetworkSpecifier$Builder: android.net.TelephonyNetworkSpecifier build()>
<android.net.TelephonyNetworkSpecifier$Builder: android.net.TelephonyNetworkSpecifier$Builder setSubscriptionId(int)>
android.net.Uri
<android.net.Uri: android.net.Uri$Builder buildUpon()>
<android.net.Uri: int compareTo(android.net.Uri)>
<android.net.Uri: java.lang.String decode(java.lang.String)>
<android.net.Uri: java.lang.String encode(java.lang.String)>
<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)>
<android.net.Uri: android.net.Uri fromFile(java.io.File)>
<android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>
<android.net.Uri: java.lang.String getAuthority()>
<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)>
<android.net.Uri: java.lang.String getEncodedAuthority()>
<android.net.Uri: java.lang.String getEncodedFragment()>
<android.net.Uri: java.lang.String getEncodedPath()>
<android.net.Uri: java.lang.String getEncodedQuery()>
<android.net.Uri: java.lang.String getEncodedSchemeSpecificPart()>
<android.net.Uri: java.lang.String getEncodedUserInfo()>
<android.net.Uri: java.lang.String getFragment()>
<android.net.Uri: java.lang.String getHost()>
<android.net.Uri: java.lang.String getLastPathSegment()>
<android.net.Uri: java.lang.String getPath()>
<android.net.Uri: java.util.List getPathSegments()>
<android.net.Uri: int getPort()>
<android.net.Uri: java.lang.String getQuery()>
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>
<android.net.Uri: java.util.Set getQueryParameterNames()>
<android.net.Uri: java.util.List getQueryParameters(java.lang.String)>
<android.net.Uri: java.lang.String getScheme()>
<android.net.Uri: java.lang.String getSchemeSpecificPart()>
<android.net.Uri: java.lang.String getUserInfo()>
<android.net.Uri: boolean isAbsolute()>
<android.net.Uri: boolean isHierarchical()>
<android.net.Uri: boolean isOpaque()>
<android.net.Uri: boolean isRelative()>
<android.net.Uri: android.net.Uri normalizeScheme()>
<android.net.Uri: android.net.Uri parse(java.lang.String)>
<android.net.Uri: java.lang.String toString()>
<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>
<android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)>
<android.net.Uri: android.os.Parcelable$Creator CREATOR>
<android.net.Uri: android.net.Uri EMPTY>
android.net.Uri$Builder
<android.net.Uri$Builder: void <init>()>
<android.net.Uri$Builder: android.net.Uri$Builder appendEncodedPath(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri build()>
<android.net.Uri$Builder: android.net.Uri$Builder clearQuery()>
<android.net.Uri$Builder: android.net.Uri$Builder encodedAuthority(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder encodedFragment(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder encodedOpaquePart(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder fragment(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder opaquePart(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder query(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>
android.net.UrlQuerySanitizer
<android.net.UrlQuerySanitizer: void <init>()>
<android.net.UrlQuerySanitizer: void <init>(java.lang.String)>
<android.net.UrlQuerySanitizer: void addSanitizedEntry(java.lang.String,java.lang.String)>
<android.net.UrlQuerySanitizer: void clear()>
<android.net.UrlQuerySanitizer: int decodeHexDigit(char)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAllButNulAndAngleBracketsLegal()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAllButNulLegal()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAllButWhitespaceLegal()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAllIllegal()>
<android.net.UrlQuerySanitizer: boolean getAllowUnregisteredParamaters()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAmpAndSpaceLegal()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAmpLegal()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getEffectiveValueSanitizer(java.lang.String)>
<android.net.UrlQuerySanitizer: java.util.List getParameterList()>
<android.net.UrlQuerySanitizer: java.util.Set getParameterSet()>
<android.net.UrlQuerySanitizer: boolean getPreferFirstRepeatedParameter()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getSpaceLegal()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getUnregisteredParameterValueSanitizer()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getUrlAndSpaceLegal()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getUrlLegal()>
<android.net.UrlQuerySanitizer: java.lang.String getValue(java.lang.String)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getValueSanitizer(java.lang.String)>
<android.net.UrlQuerySanitizer: boolean hasParameter(java.lang.String)>
<android.net.UrlQuerySanitizer: boolean isHexDigit(char)>
<android.net.UrlQuerySanitizer: void parseEntry(java.lang.String,java.lang.String)>
<android.net.UrlQuerySanitizer: void parseQuery(java.lang.String)>
<android.net.UrlQuerySanitizer: void parseUrl(java.lang.String)>
<android.net.UrlQuerySanitizer: void registerParameter(java.lang.String,android.net.UrlQuerySanitizer$ValueSanitizer)>
<android.net.UrlQuerySanitizer: void registerParameters(java.lang.String[],android.net.UrlQuerySanitizer$ValueSanitizer)>
<android.net.UrlQuerySanitizer: void setAllowUnregisteredParamaters(boolean)>
<android.net.UrlQuerySanitizer: void setPreferFirstRepeatedParameter(boolean)>
<android.net.UrlQuerySanitizer: void setUnregisteredParameterValueSanitizer(android.net.UrlQuerySanitizer$ValueSanitizer)>
<android.net.UrlQuerySanitizer: java.lang.String unescape(java.lang.String)>
android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: void <init>(int)>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: java.lang.String sanitize(java.lang.String)>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int ALL_BUT_NUL_LEGAL>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int ALL_BUT_WHITESPACE_LEGAL>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int ALL_ILLEGAL>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int ALL_OK>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int ALL_WHITESPACE_OK>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int AMP_AND_SPACE_LEGAL>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int AMP_LEGAL>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int AMP_OK>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int DQUOTE_OK>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int GT_OK>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int LT_OK>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int NON_7_BIT_ASCII_OK>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int NUL_OK>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int OTHER_WHITESPACE_OK>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int PCT_OK>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int SCRIPT_URL_OK>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int SPACE_LEGAL>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int SPACE_OK>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int SQUOTE_OK>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int URL_AND_SPACE_LEGAL>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int URL_LEGAL>
android.net.UrlQuerySanitizer$ParameterValuePair
<android.net.UrlQuerySanitizer$ParameterValuePair: void <init>(android.net.UrlQuerySanitizer,java.lang.String,java.lang.String)>
<android.net.UrlQuerySanitizer$ParameterValuePair: java.lang.String mParameter>
<android.net.UrlQuerySanitizer$ParameterValuePair: java.lang.String mValue>
android.net.UrlQuerySanitizer$ValueSanitizer
<android.net.UrlQuerySanitizer$ValueSanitizer: java.lang.String sanitize(java.lang.String)>
android.net.VpnManager
<android.net.VpnManager: void deleteProvisionedVpnProfile()>
<android.net.VpnManager: android.net.VpnProfileState getProvisionedVpnProfileState()>
<android.net.VpnManager: android.content.Intent provisionVpnProfile(android.net.PlatformVpnProfile)>
<android.net.VpnManager: void startProvisionedVpnProfile()>
<android.net.VpnManager: java.lang.String startProvisionedVpnProfileSession()>
<android.net.VpnManager: void stopProvisionedVpnProfile()>
<android.net.VpnManager: java.lang.String ACTION_VPN_MANAGER_EVENT>
<android.net.VpnManager: java.lang.String CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGED>
<android.net.VpnManager: java.lang.String CATEGORY_EVENT_DEACTIVATED_BY_USER>
<android.net.VpnManager: java.lang.String CATEGORY_EVENT_IKE_ERROR>
<android.net.VpnManager: java.lang.String CATEGORY_EVENT_NETWORK_ERROR>
<android.net.VpnManager: int ERROR_CLASS_NOT_RECOVERABLE>
<android.net.VpnManager: int ERROR_CLASS_RECOVERABLE>
<android.net.VpnManager: int ERROR_CODE_NETWORK_IO>
<android.net.VpnManager: int ERROR_CODE_NETWORK_LOST>
<android.net.VpnManager: int ERROR_CODE_NETWORK_PROTOCOL_TIMEOUT>
<android.net.VpnManager: int ERROR_CODE_NETWORK_UNKNOWN_HOST>
<android.net.VpnManager: java.lang.String EXTRA_ERROR_CLASS>
<android.net.VpnManager: java.lang.String EXTRA_ERROR_CODE>
<android.net.VpnManager: java.lang.String EXTRA_SESSION_KEY>
<android.net.VpnManager: java.lang.String EXTRA_TIMESTAMP_MILLIS>
<android.net.VpnManager: java.lang.String EXTRA_UNDERLYING_LINK_PROPERTIES>
<android.net.VpnManager: java.lang.String EXTRA_UNDERLYING_NETWORK>
<android.net.VpnManager: java.lang.String EXTRA_UNDERLYING_NETWORK_CAPABILITIES>
<android.net.VpnManager: java.lang.String EXTRA_VPN_PROFILE_STATE>
android.net.VpnProfileState
<android.net.VpnProfileState: void <init>(int,java.lang.String,boolean,boolean)>
<android.net.VpnProfileState: int describeContents()>
<android.net.VpnProfileState: java.lang.String getSessionId()>
<android.net.VpnProfileState: int getState()>
<android.net.VpnProfileState: boolean isAlwaysOn()>
<android.net.VpnProfileState: boolean isLockdownEnabled()>
<android.net.VpnProfileState: void writeToParcel(android.os.Parcel,int)>
<android.net.VpnProfileState: android.os.Parcelable$Creator CREATOR>
<android.net.VpnProfileState: int STATE_CONNECTED>
<android.net.VpnProfileState: int STATE_CONNECTING>
<android.net.VpnProfileState: int STATE_DISCONNECTED>
<android.net.VpnProfileState: int STATE_FAILED>
android.net.VpnService
<android.net.VpnService: void <init>()>
<android.net.VpnService: boolean isAlwaysOn()>
<android.net.VpnService: boolean isLockdownEnabled()>
<android.net.VpnService: android.os.IBinder onBind(android.content.Intent)>
<android.net.VpnService: void onRevoke()>
<android.net.VpnService: android.content.Intent prepare(android.content.Context)>
<android.net.VpnService: boolean protect(int)>
<android.net.VpnService: boolean protect(java.net.Socket)>
<android.net.VpnService: boolean protect(java.net.DatagramSocket)>
<android.net.VpnService: boolean setUnderlyingNetworks(android.net.Network[])>
<android.net.VpnService: java.lang.String SERVICE_INTERFACE>
<android.net.VpnService: java.lang.String SERVICE_META_DATA_SUPPORTS_ALWAYS_ON>
android.net.VpnService$Builder
<android.net.VpnService$Builder: void <init>(android.net.VpnService)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addAddress(java.net.InetAddress,int)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addAddress(java.lang.String,int)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addAllowedApplication(java.lang.String)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addDisallowedApplication(java.lang.String)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addDnsServer(java.net.InetAddress)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addDnsServer(java.lang.String)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addRoute(java.net.InetAddress,int)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addRoute(android.net.IpPrefix)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addRoute(java.lang.String,int)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addSearchDomain(java.lang.String)>
<android.net.VpnService$Builder: android.net.VpnService$Builder allowBypass()>
<android.net.VpnService$Builder: android.net.VpnService$Builder allowFamily(int)>
<android.net.VpnService$Builder: android.os.ParcelFileDescriptor establish()>
<android.net.VpnService$Builder: android.net.VpnService$Builder excludeRoute(android.net.IpPrefix)>
<android.net.VpnService$Builder: android.net.VpnService$Builder setBlocking(boolean)>
<android.net.VpnService$Builder: android.net.VpnService$Builder setConfigureIntent(android.app.PendingIntent)>
<android.net.VpnService$Builder: android.net.VpnService$Builder setHttpProxy(android.net.ProxyInfo)>
<android.net.VpnService$Builder: android.net.VpnService$Builder setMetered(boolean)>
<android.net.VpnService$Builder: android.net.VpnService$Builder setMtu(int)>
<android.net.VpnService$Builder: android.net.VpnService$Builder setSession(java.lang.String)>
<android.net.VpnService$Builder: android.net.VpnService$Builder setUnderlyingNetworks(android.net.Network[])>
android.net.http.HttpResponseCache
<android.net.http.HttpResponseCache: void close()>
<android.net.http.HttpResponseCache: void delete()>
<android.net.http.HttpResponseCache: void flush()>
<android.net.http.HttpResponseCache: java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map)>
<android.net.http.HttpResponseCache: int getHitCount()>
<android.net.http.HttpResponseCache: android.net.http.HttpResponseCache getInstalled()>
<android.net.http.HttpResponseCache: int getNetworkCount()>
<android.net.http.HttpResponseCache: int getRequestCount()>
<android.net.http.HttpResponseCache: android.net.http.HttpResponseCache install(java.io.File,long)>
<android.net.http.HttpResponseCache: long maxSize()>
<android.net.http.HttpResponseCache: java.net.CacheRequest put(java.net.URI,java.net.URLConnection)>
<android.net.http.HttpResponseCache: long size()>
android.net.http.SslCertificate
<android.net.http.SslCertificate: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.net.http.SslCertificate: void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date)>
<android.net.http.SslCertificate: void <init>(java.security.cert.X509Certificate)>
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedBy()>
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedTo()>
<android.net.http.SslCertificate: java.lang.String getValidNotAfter()>
<android.net.http.SslCertificate: java.util.Date getValidNotAfterDate()>
<android.net.http.SslCertificate: java.lang.String getValidNotBefore()>
<android.net.http.SslCertificate: java.util.Date getValidNotBeforeDate()>
<android.net.http.SslCertificate: java.security.cert.X509Certificate getX509Certificate()>
<android.net.http.SslCertificate: android.net.http.SslCertificate restoreState(android.os.Bundle)>
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)>
android.net.http.SslCertificate$DName
<android.net.http.SslCertificate$DName: void <init>(android.net.http.SslCertificate,java.lang.String)>
<android.net.http.SslCertificate$DName: java.lang.String getCName()>
<android.net.http.SslCertificate$DName: java.lang.String getDName()>
<android.net.http.SslCertificate$DName: java.lang.String getOName()>
<android.net.http.SslCertificate$DName: java.lang.String getUName()>
android.net.http.SslError
<android.net.http.SslError: void <init>(int,android.net.http.SslCertificate)>
<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate)>
<android.net.http.SslError: void <init>(int,android.net.http.SslCertificate,java.lang.String)>
<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate,java.lang.String)>
<android.net.http.SslError: boolean addError(int)>
<android.net.http.SslError: android.net.http.SslCertificate getCertificate()>
<android.net.http.SslError: int getPrimaryError()>
<android.net.http.SslError: java.lang.String getUrl()>
<android.net.http.SslError: boolean hasError(int)>
<android.net.http.SslError: int SSL_DATE_INVALID>
<android.net.http.SslError: int SSL_EXPIRED>
<android.net.http.SslError: int SSL_IDMISMATCH>
<android.net.http.SslError: int SSL_INVALID>
<android.net.http.SslError: int SSL_MAX_ERROR>
<android.net.http.SslError: int SSL_NOTYETVALID>
<android.net.http.SslError: int SSL_UNTRUSTED>
android.net.http.X509TrustManagerExtensions
<android.net.http.X509TrustManagerExtensions: void <init>(javax.net.ssl.X509TrustManager)>
<android.net.http.X509TrustManagerExtensions: java.util.List checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.lang.String)>
<android.net.http.X509TrustManagerExtensions: boolean isSameTrustConfiguration(java.lang.String,java.lang.String)>
<android.net.http.X509TrustManagerExtensions: boolean isUserAddedCertificate(java.security.cert.X509Certificate)>
android.net.rtp.AudioCodec
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec getCodec(int,java.lang.String,java.lang.String)>
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec[] getCodecs()>
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec AMR>
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec GSM>
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec GSM_EFR>
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec PCMA>
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec PCMU>
<android.net.rtp.AudioCodec: java.lang.String fmtp>
<android.net.rtp.AudioCodec: java.lang.String rtpmap>
<android.net.rtp.AudioCodec: int type>
android.net.rtp.AudioGroup
<android.net.rtp.AudioGroup: void <init>()>
<android.net.rtp.AudioGroup: void <init>(android.content.Context)>
<android.net.rtp.AudioGroup: void clear()>
<android.net.rtp.AudioGroup: int getMode()>
<android.net.rtp.AudioGroup: android.net.rtp.AudioStream[] getStreams()>
<android.net.rtp.AudioGroup: void sendDtmf(int)>
<android.net.rtp.AudioGroup: void setMode(int)>
<android.net.rtp.AudioGroup: int MODE_ECHO_SUPPRESSION>
<android.net.rtp.AudioGroup: int MODE_MUTED>
<android.net.rtp.AudioGroup: int MODE_NORMAL>
<android.net.rtp.AudioGroup: int MODE_ON_HOLD>
android.net.rtp.AudioStream
<android.net.rtp.AudioStream: void <init>(java.net.InetAddress)>
<android.net.rtp.AudioStream: android.net.rtp.AudioCodec getCodec()>
<android.net.rtp.AudioStream: int getDtmfType()>
<android.net.rtp.AudioStream: android.net.rtp.AudioGroup getGroup()>
<android.net.rtp.AudioStream: boolean isBusy()>
<android.net.rtp.AudioStream: void join(android.net.rtp.AudioGroup)>
<android.net.rtp.AudioStream: void setCodec(android.net.rtp.AudioCodec)>
<android.net.rtp.AudioStream: void setDtmfType(int)>
android.net.rtp.RtpStream
<android.net.rtp.RtpStream: void associate(java.net.InetAddress,int)>
<android.net.rtp.RtpStream: java.net.InetAddress getLocalAddress()>
<android.net.rtp.RtpStream: int getLocalPort()>
<android.net.rtp.RtpStream: int getMode()>
<android.net.rtp.RtpStream: java.net.InetAddress getRemoteAddress()>
<android.net.rtp.RtpStream: int getRemotePort()>
<android.net.rtp.RtpStream: boolean isBusy()>
<android.net.rtp.RtpStream: void release()>
<android.net.rtp.RtpStream: void setMode(int)>
<android.net.rtp.RtpStream: int MODE_NORMAL>
<android.net.rtp.RtpStream: int MODE_RECEIVE_ONLY>
<android.net.rtp.RtpStream: int MODE_SEND_ONLY>
android.net.sip.SipAudioCall
<android.net.sip.SipAudioCall: void <init>(android.content.Context,android.net.sip.SipProfile)>
<android.net.sip.SipAudioCall: void answerCall(int)>
<android.net.sip.SipAudioCall: void attachCall(android.net.sip.SipSession,java.lang.String)>
<android.net.sip.SipAudioCall: void close()>
<android.net.sip.SipAudioCall: void continueCall(int)>
<android.net.sip.SipAudioCall: void endCall()>
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getLocalProfile()>
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getPeerProfile()>
<android.net.sip.SipAudioCall: int getState()>
<android.net.sip.SipAudioCall: void holdCall(int)>
<android.net.sip.SipAudioCall: boolean isInCall()>
<android.net.sip.SipAudioCall: boolean isMuted()>
<android.net.sip.SipAudioCall: boolean isOnHold()>
<android.net.sip.SipAudioCall: void makeCall(android.net.sip.SipProfile,android.net.sip.SipSession,int)>
<android.net.sip.SipAudioCall: void sendDtmf(int)>
<android.net.sip.SipAudioCall: void sendDtmf(int,android.os.Message)>
<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)>
<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener,boolean)>
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)>
<android.net.sip.SipAudioCall: void startAudio()>
<android.net.sip.SipAudioCall: void toggleMute()>
android.net.sip.SipAudioCall$Listener
<android.net.sip.SipAudioCall$Listener: void <init>()>
<android.net.sip.SipAudioCall$Listener: void onCallBusy(android.net.sip.SipAudioCall)>
<android.net.sip.SipAudioCall$Listener: void onCallEnded(android.net.sip.SipAudioCall)>
<android.net.sip.SipAudioCall$Listener: void onCallEstablished(android.net.sip.SipAudioCall)>
<android.net.sip.SipAudioCall$Listener: void onCallHeld(android.net.sip.SipAudioCall)>
<android.net.sip.SipAudioCall$Listener: void onCalling(android.net.sip.SipAudioCall)>
<android.net.sip.SipAudioCall$Listener: void onChanged(android.net.sip.SipAudioCall)>
<android.net.sip.SipAudioCall$Listener: void onError(android.net.sip.SipAudioCall,int,java.lang.String)>
<android.net.sip.SipAudioCall$Listener: void onReadyToCall(android.net.sip.SipAudioCall)>
<android.net.sip.SipAudioCall$Listener: void onRinging(android.net.sip.SipAudioCall,android.net.sip.SipProfile)>
<android.net.sip.SipAudioCall$Listener: void onRingingBack(android.net.sip.SipAudioCall)>
android.net.sip.SipErrorCode
<android.net.sip.SipErrorCode: java.lang.String toString(int)>
<android.net.sip.SipErrorCode: int CLIENT_ERROR>
<android.net.sip.SipErrorCode: int CROSS_DOMAIN_AUTHENTICATION>
<android.net.sip.SipErrorCode: int DATA_CONNECTION_LOST>
<android.net.sip.SipErrorCode: int INVALID_CREDENTIALS>
<android.net.sip.SipErrorCode: int INVALID_REMOTE_URI>
<android.net.sip.SipErrorCode: int IN_PROGRESS>
<android.net.sip.SipErrorCode: int NO_ERROR>
<android.net.sip.SipErrorCode: int PEER_NOT_REACHABLE>
<android.net.sip.SipErrorCode: int SERVER_ERROR>
<android.net.sip.SipErrorCode: int SERVER_UNREACHABLE>
<android.net.sip.SipErrorCode: int SOCKET_ERROR>
<android.net.sip.SipErrorCode: int TIME_OUT>
<android.net.sip.SipErrorCode: int TRANSACTION_TERMINTED>
android.net.sip.SipException
<android.net.sip.SipException: void <init>()>
<android.net.sip.SipException: void <init>(java.lang.String)>
<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>
android.net.sip.SipManager
<android.net.sip.SipManager: void close(java.lang.String)>
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)>
<android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)>
<android.net.sip.SipManager: java.lang.String getOfferSessionDescription(android.content.Intent)>
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)>
<android.net.sip.SipManager: boolean isApiSupported(android.content.Context)>
<android.net.sip.SipManager: boolean isIncomingCallIntent(android.content.Intent)>
<android.net.sip.SipManager: boolean isOpened(java.lang.String)>
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)>
<android.net.sip.SipManager: boolean isSipWifiOnly(android.content.Context)>
<android.net.sip.SipManager: boolean isVoipSupported(android.content.Context)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)>
<android.net.sip.SipManager: android.net.sip.SipManager newInstance(android.content.Context)>
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)>
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)>
<android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: java.lang.String EXTRA_CALL_ID>
<android.net.sip.SipManager: java.lang.String EXTRA_OFFER_SD>
<android.net.sip.SipManager: int INCOMING_CALL_RESULT_CODE>
android.net.sip.SipProfile
<android.net.sip.SipProfile: int describeContents()>
<android.net.sip.SipProfile: java.lang.String getAuthUserName()>
<android.net.sip.SipProfile: boolean getAutoRegistration()>
<android.net.sip.SipProfile: java.lang.String getDisplayName()>
<android.net.sip.SipProfile: java.lang.String getPassword()>
<android.net.sip.SipProfile: int getPort()>
<android.net.sip.SipProfile: java.lang.String getProfileName()>
<android.net.sip.SipProfile: java.lang.String getProtocol()>
<android.net.sip.SipProfile: java.lang.String getProxyAddress()>
<android.net.sip.SipProfile: boolean getSendKeepAlive()>
<android.net.sip.SipProfile: java.lang.String getSipDomain()>
<android.net.sip.SipProfile: java.lang.String getUriString()>
<android.net.sip.SipProfile: java.lang.String getUserName()>
<android.net.sip.SipProfile: void setCallingUid(int)>
<android.net.sip.SipProfile: void writeToParcel(android.os.Parcel,int)>
<android.net.sip.SipProfile: android.os.Parcelable$Creator CREATOR>
android.net.sip.SipProfile$Builder
<android.net.sip.SipProfile$Builder: void <init>(android.net.sip.SipProfile)>
<android.net.sip.SipProfile$Builder: void <init>(java.lang.String)>
<android.net.sip.SipProfile$Builder: void <init>(java.lang.String,java.lang.String)>
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile build()>
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setAuthUserName(java.lang.String)>
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setAutoRegistration(boolean)>
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setDisplayName(java.lang.String)>
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setOutboundProxy(java.lang.String)>
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setPassword(java.lang.String)>
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setPort(int)>
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setProfileName(java.lang.String)>
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setProtocol(java.lang.String)>
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setSendKeepAlive(boolean)>
android.net.sip.SipRegistrationListener
<android.net.sip.SipRegistrationListener: void onRegistering(java.lang.String)>
<android.net.sip.SipRegistrationListener: void onRegistrationDone(java.lang.String,long)>
<android.net.sip.SipRegistrationListener: void onRegistrationFailed(java.lang.String,int,java.lang.String)>
android.net.sip.SipSession
<android.net.sip.SipSession: void answerCall(java.lang.String,int)>
<android.net.sip.SipSession: void changeCall(java.lang.String,int)>
<android.net.sip.SipSession: void endCall()>
<android.net.sip.SipSession: java.lang.String getCallId()>
<android.net.sip.SipSession: java.lang.String getLocalIp()>
<android.net.sip.SipSession: android.net.sip.SipProfile getLocalProfile()>
<android.net.sip.SipSession: android.net.sip.SipProfile getPeerProfile()>
<android.net.sip.SipSession: int getState()>
<android.net.sip.SipSession: boolean isInCall()>
<android.net.sip.SipSession: void makeCall(android.net.sip.SipProfile,java.lang.String,int)>
<android.net.sip.SipSession: void register(int)>
<android.net.sip.SipSession: void setListener(android.net.sip.SipSession$Listener)>
<android.net.sip.SipSession: void unregister()>
android.net.sip.SipSession$Listener
<android.net.sip.SipSession$Listener: void <init>()>
<android.net.sip.SipSession$Listener: void onCallBusy(android.net.sip.SipSession)>
<android.net.sip.SipSession$Listener: void onCallChangeFailed(android.net.sip.SipSession,int,java.lang.String)>
<android.net.sip.SipSession$Listener: void onCallEnded(android.net.sip.SipSession)>
<android.net.sip.SipSession$Listener: void onCallEstablished(android.net.sip.SipSession,java.lang.String)>
<android.net.sip.SipSession$Listener: void onCalling(android.net.sip.SipSession)>
<android.net.sip.SipSession$Listener: void onError(android.net.sip.SipSession,int,java.lang.String)>
<android.net.sip.SipSession$Listener: void onRegistering(android.net.sip.SipSession)>
<android.net.sip.SipSession$Listener: void onRegistrationDone(android.net.sip.SipSession,int)>
<android.net.sip.SipSession$Listener: void onRegistrationFailed(android.net.sip.SipSession,int,java.lang.String)>
<android.net.sip.SipSession$Listener: void onRegistrationTimeout(android.net.sip.SipSession)>
<android.net.sip.SipSession$Listener: void onRinging(android.net.sip.SipSession,android.net.sip.SipProfile,java.lang.String)>
<android.net.sip.SipSession$Listener: void onRingingBack(android.net.sip.SipSession)>
android.net.sip.SipSession$State
<android.net.sip.SipSession$State: java.lang.String toString(int)>
<android.net.sip.SipSession$State: int DEREGISTERING>
<android.net.sip.SipSession$State: int INCOMING_CALL>
<android.net.sip.SipSession$State: int INCOMING_CALL_ANSWERING>
<android.net.sip.SipSession$State: int IN_CALL>
<android.net.sip.SipSession$State: int NOT_DEFINED>
<android.net.sip.SipSession$State: int OUTGOING_CALL>
<android.net.sip.SipSession$State: int OUTGOING_CALL_CANCELING>
<android.net.sip.SipSession$State: int OUTGOING_CALL_RING_BACK>
<android.net.sip.SipSession$State: int PINGING>
<android.net.sip.SipSession$State: int READY_TO_CALL>
<android.net.sip.SipSession$State: int REGISTERING>
android.net.vcn.VcnCellUnderlyingNetworkTemplate
<android.net.vcn.VcnCellUnderlyingNetworkTemplate: java.util.Set getOperatorPlmnIds()>
<android.net.vcn.VcnCellUnderlyingNetworkTemplate: int getOpportunistic()>
<android.net.vcn.VcnCellUnderlyingNetworkTemplate: int getRoaming()>
<android.net.vcn.VcnCellUnderlyingNetworkTemplate: java.util.Set getSimSpecificCarrierIds()>
android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder
<android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder: void <init>()>
<android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder: android.net.vcn.VcnCellUnderlyingNetworkTemplate build()>
<android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder: android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder setMetered(int)>
<android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder: android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder setMinDownstreamBandwidthKbps(int,int)>
<android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder: android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder setMinUpstreamBandwidthKbps(int,int)>
<android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder: android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder setOperatorPlmnIds(java.util.Set)>
<android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder: android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder setOpportunistic(int)>
<android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder: android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder setRoaming(int)>
<android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder: android.net.vcn.VcnCellUnderlyingNetworkTemplate$Builder setSimSpecificCarrierIds(java.util.Set)>
android.net.vcn.VcnConfig
<android.net.vcn.VcnConfig: int describeContents()>
<android.net.vcn.VcnConfig: java.util.Set getGatewayConnectionConfigs()>
<android.net.vcn.VcnConfig: void writeToParcel(android.os.Parcel,int)>
<android.net.vcn.VcnConfig: android.os.Parcelable$Creator CREATOR>
android.net.vcn.VcnConfig$Builder
<android.net.vcn.VcnConfig$Builder: void <init>(android.content.Context)>
<android.net.vcn.VcnConfig$Builder: android.net.vcn.VcnConfig$Builder addGatewayConnectionConfig(android.net.vcn.VcnGatewayConnectionConfig)>
<android.net.vcn.VcnConfig$Builder: android.net.vcn.VcnConfig build()>
android.net.vcn.VcnGatewayConnectionConfig
<android.net.vcn.VcnGatewayConnectionConfig: int[] getExposedCapabilities()>
<android.net.vcn.VcnGatewayConnectionConfig: java.lang.String getGatewayConnectionName()>
<android.net.vcn.VcnGatewayConnectionConfig: int getMaxMtu()>
<android.net.vcn.VcnGatewayConnectionConfig: long[] getRetryIntervalsMillis()>
<android.net.vcn.VcnGatewayConnectionConfig: java.util.List getVcnUnderlyingNetworkPriorities()>
android.net.vcn.VcnGatewayConnectionConfig$Builder
<android.net.vcn.VcnGatewayConnectionConfig$Builder: void <init>(java.lang.String,android.net.ipsec.ike.IkeTunnelConnectionParams)>
<android.net.vcn.VcnGatewayConnectionConfig$Builder: android.net.vcn.VcnGatewayConnectionConfig$Builder addExposedCapability(int)>
<android.net.vcn.VcnGatewayConnectionConfig$Builder: android.net.vcn.VcnGatewayConnectionConfig build()>
<android.net.vcn.VcnGatewayConnectionConfig$Builder: android.net.vcn.VcnGatewayConnectionConfig$Builder removeExposedCapability(int)>
<android.net.vcn.VcnGatewayConnectionConfig$Builder: android.net.vcn.VcnGatewayConnectionConfig$Builder setMaxMtu(int)>
<android.net.vcn.VcnGatewayConnectionConfig$Builder: android.net.vcn.VcnGatewayConnectionConfig$Builder setRetryIntervalsMillis(long[])>
<android.net.vcn.VcnGatewayConnectionConfig$Builder: android.net.vcn.VcnGatewayConnectionConfig$Builder setVcnUnderlyingNetworkPriorities(java.util.List)>
android.net.vcn.VcnManager
<android.net.vcn.VcnManager: void clearVcnConfig(android.os.ParcelUuid)>
<android.net.vcn.VcnManager: java.util.List getConfiguredSubscriptionGroups()>
<android.net.vcn.VcnManager: void registerVcnStatusCallback(android.os.ParcelUuid,java.util.concurrent.Executor,android.net.vcn.VcnManager$VcnStatusCallback)>
<android.net.vcn.VcnManager: void setVcnConfig(android.os.ParcelUuid,android.net.vcn.VcnConfig)>
<android.net.vcn.VcnManager: void unregisterVcnStatusCallback(android.net.vcn.VcnManager$VcnStatusCallback)>
<android.net.vcn.VcnManager: int VCN_ERROR_CODE_CONFIG_ERROR>
<android.net.vcn.VcnManager: int VCN_ERROR_CODE_INTERNAL_ERROR>
<android.net.vcn.VcnManager: int VCN_ERROR_CODE_NETWORK_ERROR>
<android.net.vcn.VcnManager: int VCN_STATUS_CODE_ACTIVE>
<android.net.vcn.VcnManager: int VCN_STATUS_CODE_INACTIVE>
<android.net.vcn.VcnManager: int VCN_STATUS_CODE_NOT_CONFIGURED>
<android.net.vcn.VcnManager: int VCN_STATUS_CODE_SAFE_MODE>
android.net.vcn.VcnManager$VcnStatusCallback
<android.net.vcn.VcnManager$VcnStatusCallback: void <init>()>
<android.net.vcn.VcnManager$VcnStatusCallback: void onGatewayConnectionError(java.lang.String,int,java.lang.Throwable)>
<android.net.vcn.VcnManager$VcnStatusCallback: void onStatusChanged(int)>
android.net.vcn.VcnUnderlyingNetworkTemplate
<android.net.vcn.VcnUnderlyingNetworkTemplate: int getMetered()>
<android.net.vcn.VcnUnderlyingNetworkTemplate: int getMinEntryDownstreamBandwidthKbps()>
<android.net.vcn.VcnUnderlyingNetworkTemplate: int getMinEntryUpstreamBandwidthKbps()>
<android.net.vcn.VcnUnderlyingNetworkTemplate: int getMinExitDownstreamBandwidthKbps()>
<android.net.vcn.VcnUnderlyingNetworkTemplate: int getMinExitUpstreamBandwidthKbps()>
<android.net.vcn.VcnUnderlyingNetworkTemplate: int MATCH_ANY>
<android.net.vcn.VcnUnderlyingNetworkTemplate: int MATCH_FORBIDDEN>
<android.net.vcn.VcnUnderlyingNetworkTemplate: int MATCH_REQUIRED>
android.net.vcn.VcnWifiUnderlyingNetworkTemplate
<android.net.vcn.VcnWifiUnderlyingNetworkTemplate: java.util.Set getSsids()>
android.net.vcn.VcnWifiUnderlyingNetworkTemplate$Builder
<android.net.vcn.VcnWifiUnderlyingNetworkTemplate$Builder: void <init>()>
<android.net.vcn.VcnWifiUnderlyingNetworkTemplate$Builder: android.net.vcn.VcnWifiUnderlyingNetworkTemplate build()>
<android.net.vcn.VcnWifiUnderlyingNetworkTemplate$Builder: android.net.vcn.VcnWifiUnderlyingNetworkTemplate$Builder setMetered(int)>
<android.net.vcn.VcnWifiUnderlyingNetworkTemplate$Builder: android.net.vcn.VcnWifiUnderlyingNetworkTemplate$Builder setMinDownstreamBandwidthKbps(int,int)>
<android.net.vcn.VcnWifiUnderlyingNetworkTemplate$Builder: android.net.vcn.VcnWifiUnderlyingNetworkTemplate$Builder setMinUpstreamBandwidthKbps(int,int)>
<android.net.vcn.VcnWifiUnderlyingNetworkTemplate$Builder: android.net.vcn.VcnWifiUnderlyingNetworkTemplate$Builder setSsids(java.util.Set)>
android.nfc.FormatException
<android.nfc.FormatException: void <init>()>
<android.nfc.FormatException: void <init>(java.lang.String)>
<android.nfc.FormatException: void <init>(java.lang.String,java.lang.Throwable)>
android.nfc.NdefMessage
<android.nfc.NdefMessage: void <init>(byte[])>
<android.nfc.NdefMessage: void <init>(android.nfc.NdefRecord,android.nfc.NdefRecord[])>
<android.nfc.NdefMessage: void <init>(android.nfc.NdefRecord[])>
<android.nfc.NdefMessage: int describeContents()>
<android.nfc.NdefMessage: int getByteArrayLength()>
<android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()>
<android.nfc.NdefMessage: byte[] toByteArray()>
<android.nfc.NdefMessage: void writeToParcel(android.os.Parcel,int)>
<android.nfc.NdefMessage: android.os.Parcelable$Creator CREATOR>
android.nfc.NdefRecord
<android.nfc.NdefRecord: void <init>(short,byte[],byte[],byte[])>
<android.nfc.NdefRecord: void <init>(byte[])>
<android.nfc.NdefRecord: android.nfc.NdefRecord createApplicationRecord(java.lang.String)>
<android.nfc.NdefRecord: android.nfc.NdefRecord createExternal(java.lang.String,java.lang.String,byte[])>
<android.nfc.NdefRecord: android.nfc.NdefRecord createMime(java.lang.String,byte[])>
<android.nfc.NdefRecord: android.nfc.NdefRecord createTextRecord(java.lang.String,java.lang.String)>
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(android.net.Uri)>
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(java.lang.String)>
<android.nfc.NdefRecord: int describeContents()>
<android.nfc.NdefRecord: byte[] getId()>
<android.nfc.NdefRecord: byte[] getPayload()>
<android.nfc.NdefRecord: short getTnf()>
<android.nfc.NdefRecord: byte[] getType()>
<android.nfc.NdefRecord: byte[] toByteArray()>
<android.nfc.NdefRecord: java.lang.String toMimeType()>
<android.nfc.NdefRecord: android.net.Uri toUri()>
<android.nfc.NdefRecord: void writeToParcel(android.os.Parcel,int)>
<android.nfc.NdefRecord: android.os.Parcelable$Creator CREATOR>
<android.nfc.NdefRecord: byte[] RTD_ALTERNATIVE_CARRIER>
<android.nfc.NdefRecord: byte[] RTD_HANDOVER_CARRIER>
<android.nfc.NdefRecord: byte[] RTD_HANDOVER_REQUEST>
<android.nfc.NdefRecord: byte[] RTD_HANDOVER_SELECT>
<android.nfc.NdefRecord: byte[] RTD_SMART_POSTER>
<android.nfc.NdefRecord: byte[] RTD_TEXT>
<android.nfc.NdefRecord: byte[] RTD_URI>
<android.nfc.NdefRecord: short TNF_ABSOLUTE_URI>
<android.nfc.NdefRecord: short TNF_EMPTY>
<android.nfc.NdefRecord: short TNF_EXTERNAL_TYPE>
<android.nfc.NdefRecord: short TNF_MIME_MEDIA>
<android.nfc.NdefRecord: short TNF_UNCHANGED>
<android.nfc.NdefRecord: short TNF_UNKNOWN>
<android.nfc.NdefRecord: short TNF_WELL_KNOWN>
android.nfc.NfcAdapter
<android.nfc.NfcAdapter: void disableForegroundDispatch(android.app.Activity)>
<android.nfc.NfcAdapter: void disableForegroundNdefPush(android.app.Activity)>
<android.nfc.NfcAdapter: void disableReaderMode(android.app.Activity)>
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])>
<android.nfc.NfcAdapter: void enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)>
<android.nfc.NfcAdapter: void enableReaderMode(android.app.Activity,android.nfc.NfcAdapter$ReaderCallback,int,android.os.Bundle)>
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)>
<android.nfc.NfcAdapter: boolean ignore(android.nfc.Tag,int,android.nfc.NfcAdapter$OnTagRemovedListener,android.os.Handler)>
<android.nfc.NfcAdapter: boolean invokeBeam(android.app.Activity)>
<android.nfc.NfcAdapter: boolean isEnabled()>
<android.nfc.NfcAdapter: boolean isNdefPushEnabled()>
<android.nfc.NfcAdapter: boolean isSecureNfcEnabled()>
<android.nfc.NfcAdapter: boolean isSecureNfcSupported()>
<android.nfc.NfcAdapter: void setBeamPushUris(android.net.Uri[],android.app.Activity)>
<android.nfc.NfcAdapter: void setBeamPushUrisCallback(android.nfc.NfcAdapter$CreateBeamUrisCallback,android.app.Activity)>
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])>
<android.nfc.NfcAdapter: void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,android.app.Activity[])>
<android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback,android.app.Activity,android.app.Activity[])>
<android.nfc.NfcAdapter: java.lang.String ACTION_ADAPTER_STATE_CHANGED>
<android.nfc.NfcAdapter: java.lang.String ACTION_NDEF_DISCOVERED>
<android.nfc.NfcAdapter: java.lang.String ACTION_PREFERRED_PAYMENT_CHANGED>
<android.nfc.NfcAdapter: java.lang.String ACTION_TAG_DISCOVERED>
<android.nfc.NfcAdapter: java.lang.String ACTION_TECH_DISCOVERED>
<android.nfc.NfcAdapter: java.lang.String ACTION_TRANSACTION_DETECTED>
<android.nfc.NfcAdapter: java.lang.String EXTRA_ADAPTER_STATE>
<android.nfc.NfcAdapter: java.lang.String EXTRA_AID>
<android.nfc.NfcAdapter: java.lang.String EXTRA_DATA>
<android.nfc.NfcAdapter: java.lang.String EXTRA_ID>
<android.nfc.NfcAdapter: java.lang.String EXTRA_NDEF_MESSAGES>
<android.nfc.NfcAdapter: java.lang.String EXTRA_PREFERRED_PAYMENT_CHANGED_REASON>
<android.nfc.NfcAdapter: java.lang.String EXTRA_READER_PRESENCE_CHECK_DELAY>
<android.nfc.NfcAdapter: java.lang.String EXTRA_SECURE_ELEMENT_NAME>
<android.nfc.NfcAdapter: java.lang.String EXTRA_TAG>
<android.nfc.NfcAdapter: int FLAG_READER_NFC_A>
<android.nfc.NfcAdapter: int FLAG_READER_NFC_B>
<android.nfc.NfcAdapter: int FLAG_READER_NFC_BARCODE>
<android.nfc.NfcAdapter: int FLAG_READER_NFC_F>
<android.nfc.NfcAdapter: int FLAG_READER_NFC_V>
<android.nfc.NfcAdapter: int FLAG_READER_NO_PLATFORM_SOUNDS>
<android.nfc.NfcAdapter: int FLAG_READER_SKIP_NDEF_CHECK>
<android.nfc.NfcAdapter: int PREFERRED_PAYMENT_CHANGED>
<android.nfc.NfcAdapter: int PREFERRED_PAYMENT_LOADED>
<android.nfc.NfcAdapter: int PREFERRED_PAYMENT_UPDATED>
<android.nfc.NfcAdapter: int STATE_OFF>
<android.nfc.NfcAdapter: int STATE_ON>
<android.nfc.NfcAdapter: int STATE_TURNING_OFF>
<android.nfc.NfcAdapter: int STATE_TURNING_ON>
android.nfc.NfcAdapter$CreateBeamUrisCallback
<android.nfc.NfcAdapter$CreateBeamUrisCallback: android.net.Uri[] createBeamUris(android.nfc.NfcEvent)>
android.nfc.NfcAdapter$CreateNdefMessageCallback
<android.nfc.NfcAdapter$CreateNdefMessageCallback: android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent)>
android.nfc.NfcAdapter$OnNdefPushCompleteCallback
<android.nfc.NfcAdapter$OnNdefPushCompleteCallback: void onNdefPushComplete(android.nfc.NfcEvent)>
android.nfc.NfcAdapter$OnTagRemovedListener
<android.nfc.NfcAdapter$OnTagRemovedListener: void onTagRemoved()>
android.nfc.NfcAdapter$ReaderCallback
<android.nfc.NfcAdapter$ReaderCallback: void onTagDiscovered(android.nfc.Tag)>
android.nfc.NfcEvent
<android.nfc.NfcEvent: android.nfc.NfcAdapter nfcAdapter>
<android.nfc.NfcEvent: int peerLlcpMajorVersion>
<android.nfc.NfcEvent: int peerLlcpMinorVersion>
android.nfc.NfcManager
<android.nfc.NfcManager: android.nfc.NfcAdapter getDefaultAdapter()>
android.nfc.Tag
<android.nfc.Tag: int describeContents()>
<android.nfc.Tag: byte[] getId()>
<android.nfc.Tag: java.lang.String[] getTechList()>
<android.nfc.Tag: void writeToParcel(android.os.Parcel,int)>
<android.nfc.Tag: android.os.Parcelable$Creator CREATOR>
android.nfc.TagLostException
<android.nfc.TagLostException: void <init>()>
<android.nfc.TagLostException: void <init>(java.lang.String)>
android.nfc.cardemulation.CardEmulation
<android.nfc.cardemulation.CardEmulation: boolean categoryAllowsForegroundPreference(java.lang.String)>
<android.nfc.cardemulation.CardEmulation: java.util.List getAidsForPreferredPaymentService()>
<android.nfc.cardemulation.CardEmulation: java.util.List getAidsForService(android.content.ComponentName,java.lang.String)>
<android.nfc.cardemulation.CardEmulation: java.lang.CharSequence getDescriptionForPreferredPaymentService()>
<android.nfc.cardemulation.CardEmulation: android.nfc.cardemulation.CardEmulation getInstance(android.nfc.NfcAdapter)>
<android.nfc.cardemulation.CardEmulation: java.lang.String getRouteDestinationForPreferredPaymentService()>
<android.nfc.cardemulation.CardEmulation: int getSelectionModeForCategory(java.lang.String)>
<android.nfc.cardemulation.CardEmulation: boolean isDefaultServiceForAid(android.content.ComponentName,java.lang.String)>
<android.nfc.cardemulation.CardEmulation: boolean isDefaultServiceForCategory(android.content.ComponentName,java.lang.String)>
<android.nfc.cardemulation.CardEmulation: boolean registerAidsForService(android.content.ComponentName,java.lang.String,java.util.List)>
<android.nfc.cardemulation.CardEmulation: boolean removeAidsForService(android.content.ComponentName,java.lang.String)>
<android.nfc.cardemulation.CardEmulation: boolean setOffHostForService(android.content.ComponentName,java.lang.String)>
<android.nfc.cardemulation.CardEmulation: boolean setPreferredService(android.app.Activity,android.content.ComponentName)>
<android.nfc.cardemulation.CardEmulation: boolean supportsAidPrefixRegistration()>
<android.nfc.cardemulation.CardEmulation: boolean unsetOffHostForService(android.content.ComponentName)>
<android.nfc.cardemulation.CardEmulation: boolean unsetPreferredService(android.app.Activity)>
<android.nfc.cardemulation.CardEmulation: java.lang.String ACTION_CHANGE_DEFAULT>
<android.nfc.cardemulation.CardEmulation: java.lang.String CATEGORY_OTHER>
<android.nfc.cardemulation.CardEmulation: java.lang.String CATEGORY_PAYMENT>
<android.nfc.cardemulation.CardEmulation: java.lang.String EXTRA_CATEGORY>
<android.nfc.cardemulation.CardEmulation: java.lang.String EXTRA_SERVICE_COMPONENT>
<android.nfc.cardemulation.CardEmulation: int SELECTION_MODE_ALWAYS_ASK>
<android.nfc.cardemulation.CardEmulation: int SELECTION_MODE_ASK_IF_CONFLICT>
<android.nfc.cardemulation.CardEmulation: int SELECTION_MODE_PREFER_DEFAULT>
android.nfc.cardemulation.HostApduService
<android.nfc.cardemulation.HostApduService: void <init>()>
<android.nfc.cardemulation.HostApduService: void notifyUnhandled()>
<android.nfc.cardemulation.HostApduService: android.os.IBinder onBind(android.content.Intent)>
<android.nfc.cardemulation.HostApduService: void onDeactivated(int)>
<android.nfc.cardemulation.HostApduService: byte[] processCommandApdu(byte[],android.os.Bundle)>
<android.nfc.cardemulation.HostApduService: void sendResponseApdu(byte[])>
<android.nfc.cardemulation.HostApduService: int DEACTIVATION_DESELECTED>
<android.nfc.cardemulation.HostApduService: int DEACTIVATION_LINK_LOSS>
<android.nfc.cardemulation.HostApduService: java.lang.String SERVICE_INTERFACE>
<android.nfc.cardemulation.HostApduService: java.lang.String SERVICE_META_DATA>
android.nfc.cardemulation.HostNfcFService
<android.nfc.cardemulation.HostNfcFService: void <init>()>
<android.nfc.cardemulation.HostNfcFService: android.os.IBinder onBind(android.content.Intent)>
<android.nfc.cardemulation.HostNfcFService: void onDeactivated(int)>
<android.nfc.cardemulation.HostNfcFService: byte[] processNfcFPacket(byte[],android.os.Bundle)>
<android.nfc.cardemulation.HostNfcFService: void sendResponsePacket(byte[])>
<android.nfc.cardemulation.HostNfcFService: int DEACTIVATION_LINK_LOSS>
<android.nfc.cardemulation.HostNfcFService: java.lang.String SERVICE_INTERFACE>
<android.nfc.cardemulation.HostNfcFService: java.lang.String SERVICE_META_DATA>
android.nfc.cardemulation.NfcFCardEmulation
<android.nfc.cardemulation.NfcFCardEmulation: boolean disableService(android.app.Activity)>
<android.nfc.cardemulation.NfcFCardEmulation: boolean enableService(android.app.Activity,android.content.ComponentName)>
<android.nfc.cardemulation.NfcFCardEmulation: android.nfc.cardemulation.NfcFCardEmulation getInstance(android.nfc.NfcAdapter)>
<android.nfc.cardemulation.NfcFCardEmulation: java.lang.String getNfcid2ForService(android.content.ComponentName)>
<android.nfc.cardemulation.NfcFCardEmulation: java.lang.String getSystemCodeForService(android.content.ComponentName)>
<android.nfc.cardemulation.NfcFCardEmulation: boolean registerSystemCodeForService(android.content.ComponentName,java.lang.String)>
<android.nfc.cardemulation.NfcFCardEmulation: boolean setNfcid2ForService(android.content.ComponentName,java.lang.String)>
<android.nfc.cardemulation.NfcFCardEmulation: boolean unregisterSystemCodeForService(android.content.ComponentName)>
android.nfc.cardemulation.OffHostApduService
<android.nfc.cardemulation.OffHostApduService: void <init>()>
<android.nfc.cardemulation.OffHostApduService: java.lang.String SERVICE_INTERFACE>
<android.nfc.cardemulation.OffHostApduService: java.lang.String SERVICE_META_DATA>
android.nfc.tech.IsoDep
<android.nfc.tech.IsoDep: void close()>
<android.nfc.tech.IsoDep: void connect()>
<android.nfc.tech.IsoDep: android.nfc.tech.IsoDep get(android.nfc.Tag)>
<android.nfc.tech.IsoDep: byte[] getHiLayerResponse()>
<android.nfc.tech.IsoDep: byte[] getHistoricalBytes()>
<android.nfc.tech.IsoDep: int getMaxTransceiveLength()>
<android.nfc.tech.IsoDep: android.nfc.Tag getTag()>
<android.nfc.tech.IsoDep: int getTimeout()>
<android.nfc.tech.IsoDep: boolean isConnected()>
<android.nfc.tech.IsoDep: boolean isExtendedLengthApduSupported()>
<android.nfc.tech.IsoDep: void setTimeout(int)>
<android.nfc.tech.IsoDep: byte[] transceive(byte[])>
android.nfc.tech.MifareClassic
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyA(int,byte[])>
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyB(int,byte[])>
<android.nfc.tech.MifareClassic: int blockToSector(int)>
<android.nfc.tech.MifareClassic: void close()>
<android.nfc.tech.MifareClassic: void connect()>
<android.nfc.tech.MifareClassic: void decrement(int,int)>
<android.nfc.tech.MifareClassic: android.nfc.tech.MifareClassic get(android.nfc.Tag)>
<android.nfc.tech.MifareClassic: int getBlockCount()>
<android.nfc.tech.MifareClassic: int getBlockCountInSector(int)>
<android.nfc.tech.MifareClassic: int getMaxTransceiveLength()>
<android.nfc.tech.MifareClassic: int getSectorCount()>
<android.nfc.tech.MifareClassic: int getSize()>
<android.nfc.tech.MifareClassic: android.nfc.Tag getTag()>
<android.nfc.tech.MifareClassic: int getTimeout()>
<android.nfc.tech.MifareClassic: int getType()>
<android.nfc.tech.MifareClassic: void increment(int,int)>
<android.nfc.tech.MifareClassic: boolean isConnected()>
<android.nfc.tech.MifareClassic: byte[] readBlock(int)>
<android.nfc.tech.MifareClassic: void restore(int)>
<android.nfc.tech.MifareClassic: int sectorToBlock(int)>
<android.nfc.tech.MifareClassic: void setTimeout(int)>
<android.nfc.tech.MifareClassic: byte[] transceive(byte[])>
<android.nfc.tech.MifareClassic: void transfer(int)>
<android.nfc.tech.MifareClassic: void writeBlock(int,byte[])>
<android.nfc.tech.MifareClassic: int BLOCK_SIZE>
<android.nfc.tech.MifareClassic: byte[] KEY_DEFAULT>
<android.nfc.tech.MifareClassic: byte[] KEY_MIFARE_APPLICATION_DIRECTORY>
<android.nfc.tech.MifareClassic: byte[] KEY_NFC_FORUM>
<android.nfc.tech.MifareClassic: int SIZE_1K>
<android.nfc.tech.MifareClassic: int SIZE_2K>
<android.nfc.tech.MifareClassic: int SIZE_4K>
<android.nfc.tech.MifareClassic: int SIZE_MINI>
<android.nfc.tech.MifareClassic: int TYPE_CLASSIC>
<android.nfc.tech.MifareClassic: int TYPE_PLUS>
<android.nfc.tech.MifareClassic: int TYPE_PRO>
<android.nfc.tech.MifareClassic: int TYPE_UNKNOWN>
android.nfc.tech.MifareUltralight
<android.nfc.tech.MifareUltralight: void close()>
<android.nfc.tech.MifareUltralight: void connect()>
<android.nfc.tech.MifareUltralight: android.nfc.tech.MifareUltralight get(android.nfc.Tag)>
<android.nfc.tech.MifareUltralight: int getMaxTransceiveLength()>
<android.nfc.tech.MifareUltralight: android.nfc.Tag getTag()>
<android.nfc.tech.MifareUltralight: int getTimeout()>
<android.nfc.tech.MifareUltralight: int getType()>
<android.nfc.tech.MifareUltralight: boolean isConnected()>
<android.nfc.tech.MifareUltralight: byte[] readPages(int)>
<android.nfc.tech.MifareUltralight: void setTimeout(int)>
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[])>
<android.nfc.tech.MifareUltralight: void writePage(int,byte[])>
<android.nfc.tech.MifareUltralight: int PAGE_SIZE>
<android.nfc.tech.MifareUltralight: int TYPE_ULTRALIGHT>
<android.nfc.tech.MifareUltralight: int TYPE_ULTRALIGHT_C>
<android.nfc.tech.MifareUltralight: int TYPE_UNKNOWN>
android.nfc.tech.Ndef
<android.nfc.tech.Ndef: boolean canMakeReadOnly()>
<android.nfc.tech.Ndef: void close()>
<android.nfc.tech.Ndef: void connect()>
<android.nfc.tech.Ndef: android.nfc.tech.Ndef get(android.nfc.Tag)>
<android.nfc.tech.Ndef: android.nfc.NdefMessage getCachedNdefMessage()>
<android.nfc.tech.Ndef: int getMaxSize()>
<android.nfc.tech.Ndef: android.nfc.NdefMessage getNdefMessage()>
<android.nfc.tech.Ndef: android.nfc.Tag getTag()>
<android.nfc.tech.Ndef: java.lang.String getType()>
<android.nfc.tech.Ndef: boolean isConnected()>
<android.nfc.tech.Ndef: boolean isWritable()>
<android.nfc.tech.Ndef: boolean makeReadOnly()>
<android.nfc.tech.Ndef: void writeNdefMessage(android.nfc.NdefMessage)>
<android.nfc.tech.Ndef: java.lang.String MIFARE_CLASSIC>
<android.nfc.tech.Ndef: java.lang.String NFC_FORUM_TYPE_1>
<android.nfc.tech.Ndef: java.lang.String NFC_FORUM_TYPE_2>
<android.nfc.tech.Ndef: java.lang.String NFC_FORUM_TYPE_3>
<android.nfc.tech.Ndef: java.lang.String NFC_FORUM_TYPE_4>
android.nfc.tech.NdefFormatable
<android.nfc.tech.NdefFormatable: void close()>
<android.nfc.tech.NdefFormatable: void connect()>
<android.nfc.tech.NdefFormatable: void format(android.nfc.NdefMessage)>
<android.nfc.tech.NdefFormatable: void formatReadOnly(android.nfc.NdefMessage)>
<android.nfc.tech.NdefFormatable: android.nfc.tech.NdefFormatable get(android.nfc.Tag)>
<android.nfc.tech.NdefFormatable: android.nfc.Tag getTag()>
<android.nfc.tech.NdefFormatable: boolean isConnected()>
android.nfc.tech.NfcA
<android.nfc.tech.NfcA: void close()>
<android.nfc.tech.NfcA: void connect()>
<android.nfc.tech.NfcA: android.nfc.tech.NfcA get(android.nfc.Tag)>
<android.nfc.tech.NfcA: byte[] getAtqa()>
<android.nfc.tech.NfcA: int getMaxTransceiveLength()>
<android.nfc.tech.NfcA: short getSak()>
<android.nfc.tech.NfcA: android.nfc.Tag getTag()>
<android.nfc.tech.NfcA: int getTimeout()>
<android.nfc.tech.NfcA: boolean isConnected()>
<android.nfc.tech.NfcA: void setTimeout(int)>
<android.nfc.tech.NfcA: byte[] transceive(byte[])>
android.nfc.tech.NfcB
<android.nfc.tech.NfcB: void close()>
<android.nfc.tech.NfcB: void connect()>
<android.nfc.tech.NfcB: android.nfc.tech.NfcB get(android.nfc.Tag)>
<android.nfc.tech.NfcB: byte[] getApplicationData()>
<android.nfc.tech.NfcB: int getMaxTransceiveLength()>
<android.nfc.tech.NfcB: byte[] getProtocolInfo()>
<android.nfc.tech.NfcB: android.nfc.Tag getTag()>
<android.nfc.tech.NfcB: boolean isConnected()>
<android.nfc.tech.NfcB: byte[] transceive(byte[])>
android.nfc.tech.NfcBarcode
<android.nfc.tech.NfcBarcode: void close()>
<android.nfc.tech.NfcBarcode: void connect()>
<android.nfc.tech.NfcBarcode: android.nfc.tech.NfcBarcode get(android.nfc.Tag)>
<android.nfc.tech.NfcBarcode: byte[] getBarcode()>
<android.nfc.tech.NfcBarcode: android.nfc.Tag getTag()>
<android.nfc.tech.NfcBarcode: int getType()>
<android.nfc.tech.NfcBarcode: boolean isConnected()>
<android.nfc.tech.NfcBarcode: int TYPE_KOVIO>
<android.nfc.tech.NfcBarcode: int TYPE_UNKNOWN>
android.nfc.tech.NfcF
<android.nfc.tech.NfcF: void close()>
<android.nfc.tech.NfcF: void connect()>
<android.nfc.tech.NfcF: android.nfc.tech.NfcF get(android.nfc.Tag)>
<android.nfc.tech.NfcF: byte[] getManufacturer()>
<android.nfc.tech.NfcF: int getMaxTransceiveLength()>
<android.nfc.tech.NfcF: byte[] getSystemCode()>
<android.nfc.tech.NfcF: android.nfc.Tag getTag()>
<android.nfc.tech.NfcF: int getTimeout()>
<android.nfc.tech.NfcF: boolean isConnected()>
<android.nfc.tech.NfcF: void setTimeout(int)>
<android.nfc.tech.NfcF: byte[] transceive(byte[])>
android.nfc.tech.NfcV
<android.nfc.tech.NfcV: void close()>
<android.nfc.tech.NfcV: void connect()>
<android.nfc.tech.NfcV: android.nfc.tech.NfcV get(android.nfc.Tag)>
<android.nfc.tech.NfcV: byte getDsfId()>
<android.nfc.tech.NfcV: int getMaxTransceiveLength()>
<android.nfc.tech.NfcV: byte getResponseFlags()>
<android.nfc.tech.NfcV: android.nfc.Tag getTag()>
<android.nfc.tech.NfcV: boolean isConnected()>
<android.nfc.tech.NfcV: byte[] transceive(byte[])>
android.nfc.tech.TagTechnology
<android.nfc.tech.TagTechnology: void connect()>
<android.nfc.tech.TagTechnology: android.nfc.Tag getTag()>
<android.nfc.tech.TagTechnology: boolean isConnected()>
android.opengl.EGL14
<android.opengl.EGL14: void <init>()>
<android.opengl.EGL14: boolean eglBindAPI(int)>
<android.opengl.EGL14: boolean eglBindTexImage(android.opengl.EGLDisplay,android.opengl.EGLSurface,int)>
<android.opengl.EGL14: boolean eglChooseConfig(android.opengl.EGLDisplay,int[],int,android.opengl.EGLConfig[],int,int,int[],int)>
<android.opengl.EGL14: boolean eglCopyBuffers(android.opengl.EGLDisplay,android.opengl.EGLSurface,int)>
<android.opengl.EGL14: android.opengl.EGLContext eglCreateContext(android.opengl.EGLDisplay,android.opengl.EGLConfig,android.opengl.EGLContext,int[],int)>
<android.opengl.EGL14: android.opengl.EGLSurface eglCreatePbufferFromClientBuffer(android.opengl.EGLDisplay,int,int,android.opengl.EGLConfig,int[],int)>
<android.opengl.EGL14: android.opengl.EGLSurface eglCreatePbufferSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,int[],int)>
<android.opengl.EGL14: android.opengl.EGLSurface eglCreatePixmapSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,int,int[],int)>
<android.opengl.EGL14: android.opengl.EGLSurface eglCreateWindowSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,java.lang.Object,int[],int)>
<android.opengl.EGL14: boolean eglDestroyContext(android.opengl.EGLDisplay,android.opengl.EGLContext)>
<android.opengl.EGL14: boolean eglDestroySurface(android.opengl.EGLDisplay,android.opengl.EGLSurface)>
<android.opengl.EGL14: boolean eglGetConfigAttrib(android.opengl.EGLDisplay,android.opengl.EGLConfig,int,int[],int)>
<android.opengl.EGL14: boolean eglGetConfigs(android.opengl.EGLDisplay,android.opengl.EGLConfig[],int,int,int[],int)>
<android.opengl.EGL14: android.opengl.EGLContext eglGetCurrentContext()>
<android.opengl.EGL14: android.opengl.EGLDisplay eglGetCurrentDisplay()>
<android.opengl.EGL14: android.opengl.EGLSurface eglGetCurrentSurface(int)>
<android.opengl.EGL14: android.opengl.EGLDisplay eglGetDisplay(int)>
<android.opengl.EGL14: int eglGetError()>
<android.opengl.EGL14: boolean eglInitialize(android.opengl.EGLDisplay,int[],int,int[],int)>
<android.opengl.EGL14: boolean eglMakeCurrent(android.opengl.EGLDisplay,android.opengl.EGLSurface,android.opengl.EGLSurface,android.opengl.EGLContext)>
<android.opengl.EGL14: int eglQueryAPI()>
<android.opengl.EGL14: boolean eglQueryContext(android.opengl.EGLDisplay,android.opengl.EGLContext,int,int[],int)>
<android.opengl.EGL14: java.lang.String eglQueryString(android.opengl.EGLDisplay,int)>
<android.opengl.EGL14: boolean eglQuerySurface(android.opengl.EGLDisplay,android.opengl.EGLSurface,int,int[],int)>
<android.opengl.EGL14: boolean eglReleaseTexImage(android.opengl.EGLDisplay,android.opengl.EGLSurface,int)>
<android.opengl.EGL14: boolean eglReleaseThread()>
<android.opengl.EGL14: boolean eglSurfaceAttrib(android.opengl.EGLDisplay,android.opengl.EGLSurface,int,int)>
<android.opengl.EGL14: boolean eglSwapBuffers(android.opengl.EGLDisplay,android.opengl.EGLSurface)>
<android.opengl.EGL14: boolean eglSwapInterval(android.opengl.EGLDisplay,int)>
<android.opengl.EGL14: boolean eglTerminate(android.opengl.EGLDisplay)>
<android.opengl.EGL14: boolean eglWaitClient()>
<android.opengl.EGL14: boolean eglWaitGL()>
<android.opengl.EGL14: boolean eglWaitNative(int)>
<android.opengl.EGL14: int EGL_ALPHA_MASK_SIZE>
<android.opengl.EGL14: int EGL_ALPHA_SIZE>
<android.opengl.EGL14: int EGL_BACK_BUFFER>
<android.opengl.EGL14: int EGL_BAD_ACCESS>
<android.opengl.EGL14: int EGL_BAD_ALLOC>
<android.opengl.EGL14: int EGL_BAD_ATTRIBUTE>
<android.opengl.EGL14: int EGL_BAD_CONFIG>
<android.opengl.EGL14: int EGL_BAD_CONTEXT>
<android.opengl.EGL14: int EGL_BAD_CURRENT_SURFACE>
<android.opengl.EGL14: int EGL_BAD_DISPLAY>
<android.opengl.EGL14: int EGL_BAD_MATCH>
<android.opengl.EGL14: int EGL_BAD_NATIVE_PIXMAP>
<android.opengl.EGL14: int EGL_BAD_NATIVE_WINDOW>
<android.opengl.EGL14: int EGL_BAD_PARAMETER>
<android.opengl.EGL14: int EGL_BAD_SURFACE>
<android.opengl.EGL14: int EGL_BIND_TO_TEXTURE_RGB>
<android.opengl.EGL14: int EGL_BIND_TO_TEXTURE_RGBA>
<android.opengl.EGL14: int EGL_BLUE_SIZE>
<android.opengl.EGL14: int EGL_BUFFER_DESTROYED>
<android.opengl.EGL14: int EGL_BUFFER_PRESERVED>
<android.opengl.EGL14: int EGL_BUFFER_SIZE>
<android.opengl.EGL14: int EGL_CLIENT_APIS>
<android.opengl.EGL14: int EGL_COLOR_BUFFER_TYPE>
<android.opengl.EGL14: int EGL_CONFIG_CAVEAT>
<android.opengl.EGL14: int EGL_CONFIG_ID>
<android.opengl.EGL14: int EGL_CONFORMANT>
<android.opengl.EGL14: int EGL_CONTEXT_CLIENT_TYPE>
<android.opengl.EGL14: int EGL_CONTEXT_CLIENT_VERSION>
<android.opengl.EGL14: int EGL_CONTEXT_LOST>
<android.opengl.EGL14: int EGL_CORE_NATIVE_ENGINE>
<android.opengl.EGL14: int EGL_DEFAULT_DISPLAY>
<android.opengl.EGL14: int EGL_DEPTH_SIZE>
<android.opengl.EGL14: int EGL_DISPLAY_SCALING>
<android.opengl.EGL14: int EGL_DRAW>
<android.opengl.EGL14: int EGL_EXTENSIONS>
<android.opengl.EGL14: int EGL_FALSE>
<android.opengl.EGL14: int EGL_GREEN_SIZE>
<android.opengl.EGL14: int EGL_HEIGHT>
<android.opengl.EGL14: int EGL_HORIZONTAL_RESOLUTION>
<android.opengl.EGL14: int EGL_LARGEST_PBUFFER>
<android.opengl.EGL14: int EGL_LEVEL>
<android.opengl.EGL14: int EGL_LUMINANCE_BUFFER>
<android.opengl.EGL14: int EGL_LUMINANCE_SIZE>
<android.opengl.EGL14: int EGL_MATCH_NATIVE_PIXMAP>
<android.opengl.EGL14: int EGL_MAX_PBUFFER_HEIGHT>
<android.opengl.EGL14: int EGL_MAX_PBUFFER_PIXELS>
<android.opengl.EGL14: int EGL_MAX_PBUFFER_WIDTH>
<android.opengl.EGL14: int EGL_MAX_SWAP_INTERVAL>
<android.opengl.EGL14: int EGL_MIN_SWAP_INTERVAL>
<android.opengl.EGL14: int EGL_MIPMAP_LEVEL>
<android.opengl.EGL14: int EGL_MIPMAP_TEXTURE>
<android.opengl.EGL14: int EGL_MULTISAMPLE_RESOLVE>
<android.opengl.EGL14: int EGL_MULTISAMPLE_RESOLVE_BOX>
<android.opengl.EGL14: int EGL_MULTISAMPLE_RESOLVE_BOX_BIT>
<android.opengl.EGL14: int EGL_MULTISAMPLE_RESOLVE_DEFAULT>
<android.opengl.EGL14: int EGL_NATIVE_RENDERABLE>
<android.opengl.EGL14: int EGL_NATIVE_VISUAL_ID>
<android.opengl.EGL14: int EGL_NATIVE_VISUAL_TYPE>
<android.opengl.EGL14: int EGL_NONE>
<android.opengl.EGL14: int EGL_NON_CONFORMANT_CONFIG>
<android.opengl.EGL14: int EGL_NOT_INITIALIZED>
<android.opengl.EGL14: android.opengl.EGLContext EGL_NO_CONTEXT>
<android.opengl.EGL14: android.opengl.EGLDisplay EGL_NO_DISPLAY>
<android.opengl.EGL14: android.opengl.EGLSurface EGL_NO_SURFACE>
<android.opengl.EGL14: int EGL_NO_TEXTURE>
<android.opengl.EGL14: int EGL_OPENGL_API>
<android.opengl.EGL14: int EGL_OPENGL_BIT>
<android.opengl.EGL14: int EGL_OPENGL_ES2_BIT>
<android.opengl.EGL14: int EGL_OPENGL_ES_API>
<android.opengl.EGL14: int EGL_OPENGL_ES_BIT>
<android.opengl.EGL14: int EGL_OPENVG_API>
<android.opengl.EGL14: int EGL_OPENVG_BIT>
<android.opengl.EGL14: int EGL_OPENVG_IMAGE>
<android.opengl.EGL14: int EGL_PBUFFER_BIT>
<android.opengl.EGL14: int EGL_PIXEL_ASPECT_RATIO>
<android.opengl.EGL14: int EGL_PIXMAP_BIT>
<android.opengl.EGL14: int EGL_READ>
<android.opengl.EGL14: int EGL_RED_SIZE>
<android.opengl.EGL14: int EGL_RENDERABLE_TYPE>
<android.opengl.EGL14: int EGL_RENDER_BUFFER>
<android.opengl.EGL14: int EGL_RGB_BUFFER>
<android.opengl.EGL14: int EGL_SAMPLES>
<android.opengl.EGL14: int EGL_SAMPLE_BUFFERS>
<android.opengl.EGL14: int EGL_SINGLE_BUFFER>
<android.opengl.EGL14: int EGL_SLOW_CONFIG>
<android.opengl.EGL14: int EGL_STENCIL_SIZE>
<android.opengl.EGL14: int EGL_SUCCESS>
<android.opengl.EGL14: int EGL_SURFACE_TYPE>
<android.opengl.EGL14: int EGL_SWAP_BEHAVIOR>
<android.opengl.EGL14: int EGL_SWAP_BEHAVIOR_PRESERVED_BIT>
<android.opengl.EGL14: int EGL_TEXTURE_2D>
<android.opengl.EGL14: int EGL_TEXTURE_FORMAT>
<android.opengl.EGL14: int EGL_TEXTURE_RGB>
<android.opengl.EGL14: int EGL_TEXTURE_RGBA>
<android.opengl.EGL14: int EGL_TEXTURE_TARGET>
<android.opengl.EGL14: int EGL_TRANSPARENT_BLUE_VALUE>
<android.opengl.EGL14: int EGL_TRANSPARENT_GREEN_VALUE>
<android.opengl.EGL14: int EGL_TRANSPARENT_RED_VALUE>
<android.opengl.EGL14: int EGL_TRANSPARENT_RGB>
<android.opengl.EGL14: int EGL_TRANSPARENT_TYPE>
<android.opengl.EGL14: int EGL_TRUE>
<android.opengl.EGL14: int EGL_VENDOR>
<android.opengl.EGL14: int EGL_VERSION>
<android.opengl.EGL14: int EGL_VERTICAL_RESOLUTION>
<android.opengl.EGL14: int EGL_VG_ALPHA_FORMAT>
<android.opengl.EGL14: int EGL_VG_ALPHA_FORMAT_NONPRE>
<android.opengl.EGL14: int EGL_VG_ALPHA_FORMAT_PRE>
<android.opengl.EGL14: int EGL_VG_ALPHA_FORMAT_PRE_BIT>
<android.opengl.EGL14: int EGL_VG_COLORSPACE>
<android.opengl.EGL14: int EGL_VG_COLORSPACE_LINEAR>
<android.opengl.EGL14: int EGL_VG_COLORSPACE_LINEAR_BIT>
<android.opengl.EGL14: int EGL_VG_COLORSPACE_sRGB>
<android.opengl.EGL14: int EGL_WIDTH>
<android.opengl.EGL14: int EGL_WINDOW_BIT>
android.opengl.EGL15
<android.opengl.EGL15: int eglClientWaitSync(android.opengl.EGLDisplay,android.opengl.EGLSync,int,long)>
<android.opengl.EGL15: android.opengl.EGLImage eglCreateImage(android.opengl.EGLDisplay,android.opengl.EGLContext,int,long,long[],int)>
<android.opengl.EGL15: android.opengl.EGLSurface eglCreatePlatformPixmapSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,java.nio.Buffer,long[],int)>
<android.opengl.EGL15: android.opengl.EGLSurface eglCreatePlatformWindowSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,java.nio.Buffer,long[],int)>
<android.opengl.EGL15: android.opengl.EGLSync eglCreateSync(android.opengl.EGLDisplay,int,long[],int)>
<android.opengl.EGL15: boolean eglDestroyImage(android.opengl.EGLDisplay,android.opengl.EGLImage)>
<android.opengl.EGL15: boolean eglDestroySync(android.opengl.EGLDisplay,android.opengl.EGLSync)>
<android.opengl.EGL15: android.opengl.EGLDisplay eglGetPlatformDisplay(int,long,long[],int)>
<android.opengl.EGL15: boolean eglGetSyncAttrib(android.opengl.EGLDisplay,android.opengl.EGLSync,int,long[],int)>
<android.opengl.EGL15: boolean eglWaitSync(android.opengl.EGLDisplay,android.opengl.EGLSync,int)>
<android.opengl.EGL15: int EGL_CL_EVENT_HANDLE>
<android.opengl.EGL15: int EGL_CONDITION_SATISFIED>
<android.opengl.EGL15: int EGL_CONTEXT_MAJOR_VERSION>
<android.opengl.EGL15: int EGL_CONTEXT_MINOR_VERSION>
<android.opengl.EGL15: int EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT>
<android.opengl.EGL15: int EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT>
<android.opengl.EGL15: int EGL_CONTEXT_OPENGL_DEBUG>
<android.opengl.EGL15: int EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE>
<android.opengl.EGL15: int EGL_CONTEXT_OPENGL_PROFILE_MASK>
<android.opengl.EGL15: int EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY>
<android.opengl.EGL15: int EGL_CONTEXT_OPENGL_ROBUST_ACCESS>
<android.opengl.EGL15: long EGL_FOREVER>
<android.opengl.EGL15: int EGL_GL_COLORSPACE>
<android.opengl.EGL15: int EGL_GL_COLORSPACE_LINEAR>
<android.opengl.EGL15: int EGL_GL_COLORSPACE_SRGB>
<android.opengl.EGL15: int EGL_GL_RENDERBUFFER>
<android.opengl.EGL15: int EGL_GL_TEXTURE_2D>
<android.opengl.EGL15: int EGL_GL_TEXTURE_3D>
<android.opengl.EGL15: int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X>
<android.opengl.EGL15: int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y>
<android.opengl.EGL15: int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z>
<android.opengl.EGL15: int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X>
<android.opengl.EGL15: int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y>
<android.opengl.EGL15: int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z>
<android.opengl.EGL15: int EGL_GL_TEXTURE_LEVEL>
<android.opengl.EGL15: int EGL_GL_TEXTURE_ZOFFSET>
<android.opengl.EGL15: int EGL_IMAGE_PRESERVED>
<android.opengl.EGL15: int EGL_LOSE_CONTEXT_ON_RESET>
<android.opengl.EGL15: android.opengl.EGLContext EGL_NO_CONTEXT>
<android.opengl.EGL15: android.opengl.EGLDisplay EGL_NO_DISPLAY>
<android.opengl.EGL15: android.opengl.EGLImage EGL_NO_IMAGE>
<android.opengl.EGL15: int EGL_NO_RESET_NOTIFICATION>
<android.opengl.EGL15: android.opengl.EGLSurface EGL_NO_SURFACE>
<android.opengl.EGL15: android.opengl.EGLSync EGL_NO_SYNC>
<android.opengl.EGL15: int EGL_OPENGL_ES3_BIT>
<android.opengl.EGL15: int EGL_PLATFORM_ANDROID_KHR>
<android.opengl.EGL15: int EGL_SIGNALED>
<android.opengl.EGL15: int EGL_SYNC_CL_EVENT>
<android.opengl.EGL15: int EGL_SYNC_CL_EVENT_COMPLETE>
<android.opengl.EGL15: int EGL_SYNC_CONDITION>
<android.opengl.EGL15: int EGL_SYNC_FENCE>
<android.opengl.EGL15: int EGL_SYNC_FLUSH_COMMANDS_BIT>
<android.opengl.EGL15: int EGL_SYNC_PRIOR_COMMANDS_COMPLETE>
<android.opengl.EGL15: int EGL_SYNC_STATUS>
<android.opengl.EGL15: int EGL_SYNC_TYPE>
<android.opengl.EGL15: int EGL_TIMEOUT_EXPIRED>
<android.opengl.EGL15: int EGL_UNSIGNALED>
android.opengl.EGLConfig
android.opengl.EGLContext
android.opengl.EGLDisplay
android.opengl.EGLExt
<android.opengl.EGLExt: void <init>()>
<android.opengl.EGLExt: android.hardware.SyncFence eglDupNativeFenceFDANDROID(android.opengl.EGLDisplay,android.opengl.EGLSync)>
<android.opengl.EGLExt: boolean eglPresentationTimeANDROID(android.opengl.EGLDisplay,android.opengl.EGLSurface,long)>
<android.opengl.EGLExt: int EGL_CONTEXT_FLAGS_KHR>
<android.opengl.EGLExt: int EGL_CONTEXT_MAJOR_VERSION_KHR>
<android.opengl.EGLExt: int EGL_CONTEXT_MINOR_VERSION_KHR>
<android.opengl.EGLExt: int EGL_NO_NATIVE_FENCE_FD_ANDROID>
<android.opengl.EGLExt: int EGL_OPENGL_ES3_BIT_KHR>
<android.opengl.EGLExt: int EGL_RECORDABLE_ANDROID>
<android.opengl.EGLExt: int EGL_SYNC_NATIVE_FENCE_ANDROID>
<android.opengl.EGLExt: int EGL_SYNC_NATIVE_FENCE_FD_ANDROID>
<android.opengl.EGLExt: int EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID>
android.opengl.EGLImage
android.opengl.EGLObjectHandle
<android.opengl.EGLObjectHandle: void <init>(int)>
<android.opengl.EGLObjectHandle: void <init>(long)>
<android.opengl.EGLObjectHandle: int getHandle()>
<android.opengl.EGLObjectHandle: long getNativeHandle()>
android.opengl.EGLSurface
android.opengl.EGLSync
android.opengl.ETC1
<android.opengl.ETC1: void <init>()>
<android.opengl.ETC1: void decodeBlock(java.nio.Buffer,java.nio.Buffer)>
<android.opengl.ETC1: void decodeImage(java.nio.Buffer,java.nio.Buffer,int,int,int,int)>
<android.opengl.ETC1: void encodeBlock(java.nio.Buffer,int,java.nio.Buffer)>
<android.opengl.ETC1: void encodeImage(java.nio.Buffer,int,int,int,int,java.nio.Buffer)>
<android.opengl.ETC1: void formatHeader(java.nio.Buffer,int,int)>
<android.opengl.ETC1: int getEncodedDataSize(int,int)>
<android.opengl.ETC1: int getHeight(java.nio.Buffer)>
<android.opengl.ETC1: int getWidth(java.nio.Buffer)>
<android.opengl.ETC1: boolean isValid(java.nio.Buffer)>
<android.opengl.ETC1: int DECODED_BLOCK_SIZE>
<android.opengl.ETC1: int ENCODED_BLOCK_SIZE>
<android.opengl.ETC1: int ETC1_RGB8_OES>
<android.opengl.ETC1: int ETC_PKM_HEADER_SIZE>
android.opengl.ETC1Util
<android.opengl.ETC1Util: void <init>()>
<android.opengl.ETC1Util: android.opengl.ETC1Util$ETC1Texture compressTexture(java.nio.Buffer,int,int,int,int)>
<android.opengl.ETC1Util: android.opengl.ETC1Util$ETC1Texture createTexture(java.io.InputStream)>
<android.opengl.ETC1Util: boolean isETC1Supported()>
<android.opengl.ETC1Util: void loadTexture(int,int,int,int,int,java.io.InputStream)>
<android.opengl.ETC1Util: void loadTexture(int,int,int,int,int,android.opengl.ETC1Util$ETC1Texture)>
<android.opengl.ETC1Util: void writeTexture(android.opengl.ETC1Util$ETC1Texture,java.io.OutputStream)>
android.opengl.ETC1Util$ETC1Texture
<android.opengl.ETC1Util$ETC1Texture: void <init>(int,int,java.nio.ByteBuffer)>
<android.opengl.ETC1Util$ETC1Texture: java.nio.ByteBuffer getData()>
<android.opengl.ETC1Util$ETC1Texture: int getHeight()>
<android.opengl.ETC1Util$ETC1Texture: int getWidth()>
android.opengl.GLDebugHelper
<android.opengl.GLDebugHelper: void <init>()>
<android.opengl.GLDebugHelper: javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL,int,java.io.Writer)>
<android.opengl.GLDebugHelper: javax.microedition.khronos.egl.EGL wrap(javax.microedition.khronos.egl.EGL,int,java.io.Writer)>
<android.opengl.GLDebugHelper: int CONFIG_CHECK_GL_ERROR>
<android.opengl.GLDebugHelper: int CONFIG_CHECK_THREAD>
<android.opengl.GLDebugHelper: int CONFIG_LOG_ARGUMENT_NAMES>
<android.opengl.GLDebugHelper: int ERROR_WRONG_THREAD>
android.opengl.GLES10
<android.opengl.GLES10: void <init>()>
<android.opengl.GLES10: void glActiveTexture(int)>
<android.opengl.GLES10: void glAlphaFunc(int,float)>
<android.opengl.GLES10: void glAlphaFuncx(int,int)>
<android.opengl.GLES10: void glBindTexture(int,int)>
<android.opengl.GLES10: void glBlendFunc(int,int)>
<android.opengl.GLES10: void glClear(int)>
<android.opengl.GLES10: void glClearColor(float,float,float,float)>
<android.opengl.GLES10: void glClearColorx(int,int,int,int)>
<android.opengl.GLES10: void glClearDepthf(float)>
<android.opengl.GLES10: void glClearDepthx(int)>
<android.opengl.GLES10: void glClearStencil(int)>
<android.opengl.GLES10: void glClientActiveTexture(int)>
<android.opengl.GLES10: void glColor4f(float,float,float,float)>
<android.opengl.GLES10: void glColor4x(int,int,int,int)>
<android.opengl.GLES10: void glColorMask(boolean,boolean,boolean,boolean)>
<android.opengl.GLES10: void glColorPointer(int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glCopyTexImage2D(int,int,int,int,int,int,int,int)>
<android.opengl.GLES10: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)>
<android.opengl.GLES10: void glCullFace(int)>
<android.opengl.GLES10: void glDeleteTextures(int,int[],int)>
<android.opengl.GLES10: void glDeleteTextures(int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glDepthFunc(int)>
<android.opengl.GLES10: void glDepthMask(boolean)>
<android.opengl.GLES10: void glDepthRangef(float,float)>
<android.opengl.GLES10: void glDepthRangex(int,int)>
<android.opengl.GLES10: void glDisable(int)>
<android.opengl.GLES10: void glDisableClientState(int)>
<android.opengl.GLES10: void glDrawArrays(int,int,int)>
<android.opengl.GLES10: void glDrawElements(int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glEnable(int)>
<android.opengl.GLES10: void glEnableClientState(int)>
<android.opengl.GLES10: void glFinish()>
<android.opengl.GLES10: void glFlush()>
<android.opengl.GLES10: void glFogf(int,float)>
<android.opengl.GLES10: void glFogfv(int,float[],int)>
<android.opengl.GLES10: void glFogfv(int,java.nio.FloatBuffer)>
<android.opengl.GLES10: void glFogx(int,int)>
<android.opengl.GLES10: void glFogxv(int,int[],int)>
<android.opengl.GLES10: void glFogxv(int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glFrontFace(int)>
<android.opengl.GLES10: void glFrustumf(float,float,float,float,float,float)>
<android.opengl.GLES10: void glFrustumx(int,int,int,int,int,int)>
<android.opengl.GLES10: void glGenTextures(int,int[],int)>
<android.opengl.GLES10: void glGenTextures(int,java.nio.IntBuffer)>
<android.opengl.GLES10: int glGetError()>
<android.opengl.GLES10: void glGetIntegerv(int,int[],int)>
<android.opengl.GLES10: void glGetIntegerv(int,java.nio.IntBuffer)>
<android.opengl.GLES10: java.lang.String glGetString(int)>
<android.opengl.GLES10: void glHint(int,int)>
<android.opengl.GLES10: void glLightModelf(int,float)>
<android.opengl.GLES10: void glLightModelfv(int,float[],int)>
<android.opengl.GLES10: void glLightModelfv(int,java.nio.FloatBuffer)>
<android.opengl.GLES10: void glLightModelx(int,int)>
<android.opengl.GLES10: void glLightModelxv(int,int[],int)>
<android.opengl.GLES10: void glLightModelxv(int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glLightf(int,int,float)>
<android.opengl.GLES10: void glLightfv(int,int,float[],int)>
<android.opengl.GLES10: void glLightfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES10: void glLightx(int,int,int)>
<android.opengl.GLES10: void glLightxv(int,int,int[],int)>
<android.opengl.GLES10: void glLightxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glLineWidth(float)>
<android.opengl.GLES10: void glLineWidthx(int)>
<android.opengl.GLES10: void glLoadIdentity()>
<android.opengl.GLES10: void glLoadMatrixf(float[],int)>
<android.opengl.GLES10: void glLoadMatrixf(java.nio.FloatBuffer)>
<android.opengl.GLES10: void glLoadMatrixx(int[],int)>
<android.opengl.GLES10: void glLoadMatrixx(java.nio.IntBuffer)>
<android.opengl.GLES10: void glLogicOp(int)>
<android.opengl.GLES10: void glMaterialf(int,int,float)>
<android.opengl.GLES10: void glMaterialfv(int,int,float[],int)>
<android.opengl.GLES10: void glMaterialfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES10: void glMaterialx(int,int,int)>
<android.opengl.GLES10: void glMaterialxv(int,int,int[],int)>
<android.opengl.GLES10: void glMaterialxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glMatrixMode(int)>
<android.opengl.GLES10: void glMultMatrixf(float[],int)>
<android.opengl.GLES10: void glMultMatrixf(java.nio.FloatBuffer)>
<android.opengl.GLES10: void glMultMatrixx(int[],int)>
<android.opengl.GLES10: void glMultMatrixx(java.nio.IntBuffer)>
<android.opengl.GLES10: void glMultiTexCoord4f(int,float,float,float,float)>
<android.opengl.GLES10: void glMultiTexCoord4x(int,int,int,int,int)>
<android.opengl.GLES10: void glNormal3f(float,float,float)>
<android.opengl.GLES10: void glNormal3x(int,int,int)>
<android.opengl.GLES10: void glNormalPointer(int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glOrthof(float,float,float,float,float,float)>
<android.opengl.GLES10: void glOrthox(int,int,int,int,int,int)>
<android.opengl.GLES10: void glPixelStorei(int,int)>
<android.opengl.GLES10: void glPointSize(float)>
<android.opengl.GLES10: void glPointSizex(int)>
<android.opengl.GLES10: void glPolygonOffset(float,float)>
<android.opengl.GLES10: void glPolygonOffsetx(int,int)>
<android.opengl.GLES10: void glPopMatrix()>
<android.opengl.GLES10: void glPushMatrix()>
<android.opengl.GLES10: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glRotatef(float,float,float,float)>
<android.opengl.GLES10: void glRotatex(int,int,int,int)>
<android.opengl.GLES10: void glSampleCoverage(float,boolean)>
<android.opengl.GLES10: void glSampleCoveragex(int,boolean)>
<android.opengl.GLES10: void glScalef(float,float,float)>
<android.opengl.GLES10: void glScalex(int,int,int)>
<android.opengl.GLES10: void glScissor(int,int,int,int)>
<android.opengl.GLES10: void glShadeModel(int)>
<android.opengl.GLES10: void glStencilFunc(int,int,int)>
<android.opengl.GLES10: void glStencilMask(int)>
<android.opengl.GLES10: void glStencilOp(int,int,int)>
<android.opengl.GLES10: void glTexCoordPointer(int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glTexEnvf(int,int,float)>
<android.opengl.GLES10: void glTexEnvfv(int,int,float[],int)>
<android.opengl.GLES10: void glTexEnvfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES10: void glTexEnvx(int,int,int)>
<android.opengl.GLES10: void glTexEnvxv(int,int,int[],int)>
<android.opengl.GLES10: void glTexEnvxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES10: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glTexParameterf(int,int,float)>
<android.opengl.GLES10: void glTexParameterx(int,int,int)>
<android.opengl.GLES10: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glTranslatef(float,float,float)>
<android.opengl.GLES10: void glTranslatex(int,int,int)>
<android.opengl.GLES10: void glVertexPointer(int,int,int,java.nio.Buffer)>
<android.opengl.GLES10: void glViewport(int,int,int,int)>
<android.opengl.GLES10: int GL_ADD>
<android.opengl.GLES10: int GL_ALIASED_LINE_WIDTH_RANGE>
<android.opengl.GLES10: int GL_ALIASED_POINT_SIZE_RANGE>
<android.opengl.GLES10: int GL_ALPHA>
<android.opengl.GLES10: int GL_ALPHA_BITS>
<android.opengl.GLES10: int GL_ALPHA_TEST>
<android.opengl.GLES10: int GL_ALWAYS>
<android.opengl.GLES10: int GL_AMBIENT>
<android.opengl.GLES10: int GL_AMBIENT_AND_DIFFUSE>
<android.opengl.GLES10: int GL_AND>
<android.opengl.GLES10: int GL_AND_INVERTED>
<android.opengl.GLES10: int GL_AND_REVERSE>
<android.opengl.GLES10: int GL_BACK>
<android.opengl.GLES10: int GL_BLEND>
<android.opengl.GLES10: int GL_BLUE_BITS>
<android.opengl.GLES10: int GL_BYTE>
<android.opengl.GLES10: int GL_CCW>
<android.opengl.GLES10: int GL_CLAMP_TO_EDGE>
<android.opengl.GLES10: int GL_CLEAR>
<android.opengl.GLES10: int GL_COLOR_ARRAY>
<android.opengl.GLES10: int GL_COLOR_BUFFER_BIT>
<android.opengl.GLES10: int GL_COLOR_LOGIC_OP>
<android.opengl.GLES10: int GL_COLOR_MATERIAL>
<android.opengl.GLES10: int GL_COMPRESSED_TEXTURE_FORMATS>
<android.opengl.GLES10: int GL_CONSTANT_ATTENUATION>
<android.opengl.GLES10: int GL_COPY>
<android.opengl.GLES10: int GL_COPY_INVERTED>
<android.opengl.GLES10: int GL_CULL_FACE>
<android.opengl.GLES10: int GL_CW>
<android.opengl.GLES10: int GL_DECAL>
<android.opengl.GLES10: int GL_DECR>
<android.opengl.GLES10: int GL_DEPTH_BITS>
<android.opengl.GLES10: int GL_DEPTH_BUFFER_BIT>
<android.opengl.GLES10: int GL_DEPTH_TEST>
<android.opengl.GLES10: int GL_DIFFUSE>
<android.opengl.GLES10: int GL_DITHER>
<android.opengl.GLES10: int GL_DONT_CARE>
<android.opengl.GLES10: int GL_DST_ALPHA>
<android.opengl.GLES10: int GL_DST_COLOR>
<android.opengl.GLES10: int GL_EMISSION>
<android.opengl.GLES10: int GL_EQUAL>
<android.opengl.GLES10: int GL_EQUIV>
<android.opengl.GLES10: int GL_EXP>
<android.opengl.GLES10: int GL_EXP2>
<android.opengl.GLES10: int GL_EXTENSIONS>
<android.opengl.GLES10: int GL_FALSE>
<android.opengl.GLES10: int GL_FASTEST>
<android.opengl.GLES10: int GL_FIXED>
<android.opengl.GLES10: int GL_FLAT>
<android.opengl.GLES10: int GL_FLOAT>
<android.opengl.GLES10: int GL_FOG>
<android.opengl.GLES10: int GL_FOG_COLOR>
<android.opengl.GLES10: int GL_FOG_DENSITY>
<android.opengl.GLES10: int GL_FOG_END>
<android.opengl.GLES10: int GL_FOG_HINT>
<android.opengl.GLES10: int GL_FOG_MODE>
<android.opengl.GLES10: int GL_FOG_START>
<android.opengl.GLES10: int GL_FRONT>
<android.opengl.GLES10: int GL_FRONT_AND_BACK>
<android.opengl.GLES10: int GL_GEQUAL>
<android.opengl.GLES10: int GL_GREATER>
<android.opengl.GLES10: int GL_GREEN_BITS>
<android.opengl.GLES10: int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES>
<android.opengl.GLES10: int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES>
<android.opengl.GLES10: int GL_INCR>
<android.opengl.GLES10: int GL_INVALID_ENUM>
<android.opengl.GLES10: int GL_INVALID_OPERATION>
<android.opengl.GLES10: int GL_INVALID_VALUE>
<android.opengl.GLES10: int GL_INVERT>
<android.opengl.GLES10: int GL_KEEP>
<android.opengl.GLES10: int GL_LEQUAL>
<android.opengl.GLES10: int GL_LESS>
<android.opengl.GLES10: int GL_LIGHT0>
<android.opengl.GLES10: int GL_LIGHT1>
<android.opengl.GLES10: int GL_LIGHT2>
<android.opengl.GLES10: int GL_LIGHT3>
<android.opengl.GLES10: int GL_LIGHT4>
<android.opengl.GLES10: int GL_LIGHT5>
<android.opengl.GLES10: int GL_LIGHT6>
<android.opengl.GLES10: int GL_LIGHT7>
<android.opengl.GLES10: int GL_LIGHTING>
<android.opengl.GLES10: int GL_LIGHT_MODEL_AMBIENT>
<android.opengl.GLES10: int GL_LIGHT_MODEL_TWO_SIDE>
<android.opengl.GLES10: int GL_LINEAR>
<android.opengl.GLES10: int GL_LINEAR_ATTENUATION>
<android.opengl.GLES10: int GL_LINEAR_MIPMAP_LINEAR>
<android.opengl.GLES10: int GL_LINEAR_MIPMAP_NEAREST>
<android.opengl.GLES10: int GL_LINES>
<android.opengl.GLES10: int GL_LINE_LOOP>
<android.opengl.GLES10: int GL_LINE_SMOOTH>
<android.opengl.GLES10: int GL_LINE_SMOOTH_HINT>
<android.opengl.GLES10: int GL_LINE_STRIP>
<android.opengl.GLES10: int GL_LUMINANCE>
<android.opengl.GLES10: int GL_LUMINANCE_ALPHA>
<android.opengl.GLES10: int GL_MAX_ELEMENTS_INDICES>
<android.opengl.GLES10: int GL_MAX_ELEMENTS_VERTICES>
<android.opengl.GLES10: int GL_MAX_LIGHTS>
<android.opengl.GLES10: int GL_MAX_MODELVIEW_STACK_DEPTH>
<android.opengl.GLES10: int GL_MAX_PROJECTION_STACK_DEPTH>
<android.opengl.GLES10: int GL_MAX_TEXTURE_SIZE>
<android.opengl.GLES10: int GL_MAX_TEXTURE_STACK_DEPTH>
<android.opengl.GLES10: int GL_MAX_TEXTURE_UNITS>
<android.opengl.GLES10: int GL_MAX_VIEWPORT_DIMS>
<android.opengl.GLES10: int GL_MODELVIEW>
<android.opengl.GLES10: int GL_MODULATE>
<android.opengl.GLES10: int GL_MULTISAMPLE>
<android.opengl.GLES10: int GL_NAND>
<android.opengl.GLES10: int GL_NEAREST>
<android.opengl.GLES10: int GL_NEAREST_MIPMAP_LINEAR>
<android.opengl.GLES10: int GL_NEAREST_MIPMAP_NEAREST>
<android.opengl.GLES10: int GL_NEVER>
<android.opengl.GLES10: int GL_NICEST>
<android.opengl.GLES10: int GL_NOOP>
<android.opengl.GLES10: int GL_NOR>
<android.opengl.GLES10: int GL_NORMALIZE>
<android.opengl.GLES10: int GL_NORMAL_ARRAY>
<android.opengl.GLES10: int GL_NOTEQUAL>
<android.opengl.GLES10: int GL_NO_ERROR>
<android.opengl.GLES10: int GL_NUM_COMPRESSED_TEXTURE_FORMATS>
<android.opengl.GLES10: int GL_ONE>
<android.opengl.GLES10: int GL_ONE_MINUS_DST_ALPHA>
<android.opengl.GLES10: int GL_ONE_MINUS_DST_COLOR>
<android.opengl.GLES10: int GL_ONE_MINUS_SRC_ALPHA>
<android.opengl.GLES10: int GL_ONE_MINUS_SRC_COLOR>
<android.opengl.GLES10: int GL_OR>
<android.opengl.GLES10: int GL_OR_INVERTED>
<android.opengl.GLES10: int GL_OR_REVERSE>
<android.opengl.GLES10: int GL_OUT_OF_MEMORY>
<android.opengl.GLES10: int GL_PACK_ALIGNMENT>
<android.opengl.GLES10: int GL_PALETTE4_R5_G6_B5_OES>
<android.opengl.GLES10: int GL_PALETTE4_RGB5_A1_OES>
<android.opengl.GLES10: int GL_PALETTE4_RGB8_OES>
<android.opengl.GLES10: int GL_PALETTE4_RGBA4_OES>
<android.opengl.GLES10: int GL_PALETTE4_RGBA8_OES>
<android.opengl.GLES10: int GL_PALETTE8_R5_G6_B5_OES>
<android.opengl.GLES10: int GL_PALETTE8_RGB5_A1_OES>
<android.opengl.GLES10: int GL_PALETTE8_RGB8_OES>
<android.opengl.GLES10: int GL_PALETTE8_RGBA4_OES>
<android.opengl.GLES10: int GL_PALETTE8_RGBA8_OES>
<android.opengl.GLES10: int GL_PERSPECTIVE_CORRECTION_HINT>
<android.opengl.GLES10: int GL_POINTS>
<android.opengl.GLES10: int GL_POINT_FADE_THRESHOLD_SIZE>
<android.opengl.GLES10: int GL_POINT_SIZE>
<android.opengl.GLES10: int GL_POINT_SMOOTH>
<android.opengl.GLES10: int GL_POINT_SMOOTH_HINT>
<android.opengl.GLES10: int GL_POLYGON_OFFSET_FILL>
<android.opengl.GLES10: int GL_POLYGON_SMOOTH_HINT>
<android.opengl.GLES10: int GL_POSITION>
<android.opengl.GLES10: int GL_PROJECTION>
<android.opengl.GLES10: int GL_QUADRATIC_ATTENUATION>
<android.opengl.GLES10: int GL_RED_BITS>
<android.opengl.GLES10: int GL_RENDERER>
<android.opengl.GLES10: int GL_REPEAT>
<android.opengl.GLES10: int GL_REPLACE>
<android.opengl.GLES10: int GL_RESCALE_NORMAL>
<android.opengl.GLES10: int GL_RGB>
<android.opengl.GLES10: int GL_RGBA>
<android.opengl.GLES10: int GL_SAMPLE_ALPHA_TO_COVERAGE>
<android.opengl.GLES10: int GL_SAMPLE_ALPHA_TO_ONE>
<android.opengl.GLES10: int GL_SAMPLE_COVERAGE>
<android.opengl.GLES10: int GL_SCISSOR_TEST>
<android.opengl.GLES10: int GL_SET>
<android.opengl.GLES10: int GL_SHININESS>
<android.opengl.GLES10: int GL_SHORT>
<android.opengl.GLES10: int GL_SMOOTH>
<android.opengl.GLES10: int GL_SMOOTH_LINE_WIDTH_RANGE>
<android.opengl.GLES10: int GL_SMOOTH_POINT_SIZE_RANGE>
<android.opengl.GLES10: int GL_SPECULAR>
<android.opengl.GLES10: int GL_SPOT_CUTOFF>
<android.opengl.GLES10: int GL_SPOT_DIRECTION>
<android.opengl.GLES10: int GL_SPOT_EXPONENT>
<android.opengl.GLES10: int GL_SRC_ALPHA>
<android.opengl.GLES10: int GL_SRC_ALPHA_SATURATE>
<android.opengl.GLES10: int GL_SRC_COLOR>
<android.opengl.GLES10: int GL_STACK_OVERFLOW>
<android.opengl.GLES10: int GL_STACK_UNDERFLOW>
<android.opengl.GLES10: int GL_STENCIL_BITS>
<android.opengl.GLES10: int GL_STENCIL_BUFFER_BIT>
<android.opengl.GLES10: int GL_STENCIL_TEST>
<android.opengl.GLES10: int GL_SUBPIXEL_BITS>
<android.opengl.GLES10: int GL_TEXTURE>
<android.opengl.GLES10: int GL_TEXTURE0>
<android.opengl.GLES10: int GL_TEXTURE1>
<android.opengl.GLES10: int GL_TEXTURE10>
<android.opengl.GLES10: int GL_TEXTURE11>
<android.opengl.GLES10: int GL_TEXTURE12>
<android.opengl.GLES10: int GL_TEXTURE13>
<android.opengl.GLES10: int GL_TEXTURE14>
<android.opengl.GLES10: int GL_TEXTURE15>
<android.opengl.GLES10: int GL_TEXTURE16>
<android.opengl.GLES10: int GL_TEXTURE17>
<android.opengl.GLES10: int GL_TEXTURE18>
<android.opengl.GLES10: int GL_TEXTURE19>
<android.opengl.GLES10: int GL_TEXTURE2>
<android.opengl.GLES10: int GL_TEXTURE20>
<android.opengl.GLES10: int GL_TEXTURE21>
<android.opengl.GLES10: int GL_TEXTURE22>
<android.opengl.GLES10: int GL_TEXTURE23>
<android.opengl.GLES10: int GL_TEXTURE24>
<android.opengl.GLES10: int GL_TEXTURE25>
<android.opengl.GLES10: int GL_TEXTURE26>
<android.opengl.GLES10: int GL_TEXTURE27>
<android.opengl.GLES10: int GL_TEXTURE28>
<android.opengl.GLES10: int GL_TEXTURE29>
<android.opengl.GLES10: int GL_TEXTURE3>
<android.opengl.GLES10: int GL_TEXTURE30>
<android.opengl.GLES10: int GL_TEXTURE31>
<android.opengl.GLES10: int GL_TEXTURE4>
<android.opengl.GLES10: int GL_TEXTURE5>
<android.opengl.GLES10: int GL_TEXTURE6>
<android.opengl.GLES10: int GL_TEXTURE7>
<android.opengl.GLES10: int GL_TEXTURE8>
<android.opengl.GLES10: int GL_TEXTURE9>
<android.opengl.GLES10: int GL_TEXTURE_2D>
<android.opengl.GLES10: int GL_TEXTURE_COORD_ARRAY>
<android.opengl.GLES10: int GL_TEXTURE_ENV>
<android.opengl.GLES10: int GL_TEXTURE_ENV_COLOR>
<android.opengl.GLES10: int GL_TEXTURE_ENV_MODE>
<android.opengl.GLES10: int GL_TEXTURE_MAG_FILTER>
<android.opengl.GLES10: int GL_TEXTURE_MIN_FILTER>
<android.opengl.GLES10: int GL_TEXTURE_WRAP_S>
<android.opengl.GLES10: int GL_TEXTURE_WRAP_T>
<android.opengl.GLES10: int GL_TRIANGLES>
<android.opengl.GLES10: int GL_TRIANGLE_FAN>
<android.opengl.GLES10: int GL_TRIANGLE_STRIP>
<android.opengl.GLES10: int GL_TRUE>
<android.opengl.GLES10: int GL_UNPACK_ALIGNMENT>
<android.opengl.GLES10: int GL_UNSIGNED_BYTE>
<android.opengl.GLES10: int GL_UNSIGNED_SHORT>
<android.opengl.GLES10: int GL_UNSIGNED_SHORT_4_4_4_4>
<android.opengl.GLES10: int GL_UNSIGNED_SHORT_5_5_5_1>
<android.opengl.GLES10: int GL_UNSIGNED_SHORT_5_6_5>
<android.opengl.GLES10: int GL_VENDOR>
<android.opengl.GLES10: int GL_VERSION>
<android.opengl.GLES10: int GL_VERTEX_ARRAY>
<android.opengl.GLES10: int GL_XOR>
<android.opengl.GLES10: int GL_ZERO>
android.opengl.GLES10Ext
<android.opengl.GLES10Ext: void <init>()>
<android.opengl.GLES10Ext: int glQueryMatrixxOES(int[],int,int[],int)>
<android.opengl.GLES10Ext: int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer)>
android.opengl.GLES11
<android.opengl.GLES11: void <init>()>
<android.opengl.GLES11: void glBindBuffer(int,int)>
<android.opengl.GLES11: void glBufferData(int,int,java.nio.Buffer,int)>
<android.opengl.GLES11: void glBufferSubData(int,int,int,java.nio.Buffer)>
<android.opengl.GLES11: void glClipPlanef(int,float[],int)>
<android.opengl.GLES11: void glClipPlanef(int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glClipPlanex(int,int[],int)>
<android.opengl.GLES11: void glClipPlanex(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glColor4ub(byte,byte,byte,byte)>
<android.opengl.GLES11: void glColorPointer(int,int,int,int)>
<android.opengl.GLES11: void glDeleteBuffers(int,int[],int)>
<android.opengl.GLES11: void glDeleteBuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glDrawElements(int,int,int,int)>
<android.opengl.GLES11: void glGenBuffers(int,int[],int)>
<android.opengl.GLES11: void glGenBuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetBooleanv(int,boolean[],int)>
<android.opengl.GLES11: void glGetBooleanv(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetBufferParameteriv(int,int,int[],int)>
<android.opengl.GLES11: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetClipPlanef(int,float[],int)>
<android.opengl.GLES11: void glGetClipPlanef(int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetClipPlanex(int,int[],int)>
<android.opengl.GLES11: void glGetClipPlanex(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetFixedv(int,int[],int)>
<android.opengl.GLES11: void glGetFixedv(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetFloatv(int,float[],int)>
<android.opengl.GLES11: void glGetFloatv(int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetLightfv(int,int,float[],int)>
<android.opengl.GLES11: void glGetLightfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetLightxv(int,int,int[],int)>
<android.opengl.GLES11: void glGetLightxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetMaterialfv(int,int,float[],int)>
<android.opengl.GLES11: void glGetMaterialfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetMaterialxv(int,int,int[],int)>
<android.opengl.GLES11: void glGetMaterialxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetTexEnvfv(int,int,float[],int)>
<android.opengl.GLES11: void glGetTexEnvfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetTexEnviv(int,int,int[],int)>
<android.opengl.GLES11: void glGetTexEnviv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetTexEnvxv(int,int,int[],int)>
<android.opengl.GLES11: void glGetTexEnvxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetTexParameterfv(int,int,float[],int)>
<android.opengl.GLES11: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glGetTexParameteriv(int,int,int[],int)>
<android.opengl.GLES11: void glGetTexParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glGetTexParameterxv(int,int,int[],int)>
<android.opengl.GLES11: void glGetTexParameterxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: boolean glIsBuffer(int)>
<android.opengl.GLES11: boolean glIsEnabled(int)>
<android.opengl.GLES11: boolean glIsTexture(int)>
<android.opengl.GLES11: void glNormalPointer(int,int,int)>
<android.opengl.GLES11: void glPointParameterf(int,float)>
<android.opengl.GLES11: void glPointParameterfv(int,float[],int)>
<android.opengl.GLES11: void glPointParameterfv(int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glPointParameterx(int,int)>
<android.opengl.GLES11: void glPointParameterxv(int,int[],int)>
<android.opengl.GLES11: void glPointParameterxv(int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glPointSizePointerOES(int,int,java.nio.Buffer)>
<android.opengl.GLES11: void glTexCoordPointer(int,int,int,int)>
<android.opengl.GLES11: void glTexEnvi(int,int,int)>
<android.opengl.GLES11: void glTexEnviv(int,int,int[],int)>
<android.opengl.GLES11: void glTexEnviv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glTexParameterfv(int,int,float[],int)>
<android.opengl.GLES11: void glTexParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11: void glTexParameteri(int,int,int)>
<android.opengl.GLES11: void glTexParameteriv(int,int,int[],int)>
<android.opengl.GLES11: void glTexParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glTexParameterxv(int,int,int[],int)>
<android.opengl.GLES11: void glTexParameterxv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11: void glVertexPointer(int,int,int,int)>
<android.opengl.GLES11: int GL_ACTIVE_TEXTURE>
<android.opengl.GLES11: int GL_ADD_SIGNED>
<android.opengl.GLES11: int GL_ALPHA_SCALE>
<android.opengl.GLES11: int GL_ALPHA_TEST_FUNC>
<android.opengl.GLES11: int GL_ALPHA_TEST_REF>
<android.opengl.GLES11: int GL_ARRAY_BUFFER>
<android.opengl.GLES11: int GL_ARRAY_BUFFER_BINDING>
<android.opengl.GLES11: int GL_BLEND_DST>
<android.opengl.GLES11: int GL_BLEND_SRC>
<android.opengl.GLES11: int GL_BUFFER_ACCESS>
<android.opengl.GLES11: int GL_BUFFER_SIZE>
<android.opengl.GLES11: int GL_BUFFER_USAGE>
<android.opengl.GLES11: int GL_CLIENT_ACTIVE_TEXTURE>
<android.opengl.GLES11: int GL_CLIP_PLANE0>
<android.opengl.GLES11: int GL_CLIP_PLANE1>
<android.opengl.GLES11: int GL_CLIP_PLANE2>
<android.opengl.GLES11: int GL_CLIP_PLANE3>
<android.opengl.GLES11: int GL_CLIP_PLANE4>
<android.opengl.GLES11: int GL_CLIP_PLANE5>
<android.opengl.GLES11: int GL_COLOR_ARRAY_BUFFER_BINDING>
<android.opengl.GLES11: int GL_COLOR_ARRAY_POINTER>
<android.opengl.GLES11: int GL_COLOR_ARRAY_SIZE>
<android.opengl.GLES11: int GL_COLOR_ARRAY_STRIDE>
<android.opengl.GLES11: int GL_COLOR_ARRAY_TYPE>
<android.opengl.GLES11: int GL_COLOR_CLEAR_VALUE>
<android.opengl.GLES11: int GL_COLOR_WRITEMASK>
<android.opengl.GLES11: int GL_COMBINE>
<android.opengl.GLES11: int GL_COMBINE_ALPHA>
<android.opengl.GLES11: int GL_COMBINE_RGB>
<android.opengl.GLES11: int GL_CONSTANT>
<android.opengl.GLES11: int GL_COORD_REPLACE_OES>
<android.opengl.GLES11: int GL_CULL_FACE_MODE>
<android.opengl.GLES11: int GL_CURRENT_COLOR>
<android.opengl.GLES11: int GL_CURRENT_NORMAL>
<android.opengl.GLES11: int GL_CURRENT_TEXTURE_COORDS>
<android.opengl.GLES11: int GL_DEPTH_CLEAR_VALUE>
<android.opengl.GLES11: int GL_DEPTH_FUNC>
<android.opengl.GLES11: int GL_DEPTH_RANGE>
<android.opengl.GLES11: int GL_DEPTH_WRITEMASK>
<android.opengl.GLES11: int GL_DOT3_RGB>
<android.opengl.GLES11: int GL_DOT3_RGBA>
<android.opengl.GLES11: int GL_DYNAMIC_DRAW>
<android.opengl.GLES11: int GL_ELEMENT_ARRAY_BUFFER>
<android.opengl.GLES11: int GL_ELEMENT_ARRAY_BUFFER_BINDING>
<android.opengl.GLES11: int GL_FRONT_FACE>
<android.opengl.GLES11: int GL_GENERATE_MIPMAP>
<android.opengl.GLES11: int GL_GENERATE_MIPMAP_HINT>
<android.opengl.GLES11: int GL_INTERPOLATE>
<android.opengl.GLES11: int GL_LINE_WIDTH>
<android.opengl.GLES11: int GL_LOGIC_OP_MODE>
<android.opengl.GLES11: int GL_MATRIX_MODE>
<android.opengl.GLES11: int GL_MAX_CLIP_PLANES>
<android.opengl.GLES11: int GL_MODELVIEW_MATRIX>
<android.opengl.GLES11: int GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES>
<android.opengl.GLES11: int GL_MODELVIEW_STACK_DEPTH>
<android.opengl.GLES11: int GL_NORMAL_ARRAY_BUFFER_BINDING>
<android.opengl.GLES11: int GL_NORMAL_ARRAY_POINTER>
<android.opengl.GLES11: int GL_NORMAL_ARRAY_STRIDE>
<android.opengl.GLES11: int GL_NORMAL_ARRAY_TYPE>
<android.opengl.GLES11: int GL_OPERAND0_ALPHA>
<android.opengl.GLES11: int GL_OPERAND0_RGB>
<android.opengl.GLES11: int GL_OPERAND1_ALPHA>
<android.opengl.GLES11: int GL_OPERAND1_RGB>
<android.opengl.GLES11: int GL_OPERAND2_ALPHA>
<android.opengl.GLES11: int GL_OPERAND2_RGB>
<android.opengl.GLES11: int GL_POINT_DISTANCE_ATTENUATION>
<android.opengl.GLES11: int GL_POINT_FADE_THRESHOLD_SIZE>
<android.opengl.GLES11: int GL_POINT_SIZE>
<android.opengl.GLES11: int GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES>
<android.opengl.GLES11: int GL_POINT_SIZE_ARRAY_OES>
<android.opengl.GLES11: int GL_POINT_SIZE_ARRAY_POINTER_OES>
<android.opengl.GLES11: int GL_POINT_SIZE_ARRAY_STRIDE_OES>
<android.opengl.GLES11: int GL_POINT_SIZE_ARRAY_TYPE_OES>
<android.opengl.GLES11: int GL_POINT_SIZE_MAX>
<android.opengl.GLES11: int GL_POINT_SIZE_MIN>
<android.opengl.GLES11: int GL_POINT_SPRITE_OES>
<android.opengl.GLES11: int GL_POLYGON_OFFSET_FACTOR>
<android.opengl.GLES11: int GL_POLYGON_OFFSET_UNITS>
<android.opengl.GLES11: int GL_PREVIOUS>
<android.opengl.GLES11: int GL_PRIMARY_COLOR>
<android.opengl.GLES11: int GL_PROJECTION_MATRIX>
<android.opengl.GLES11: int GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES>
<android.opengl.GLES11: int GL_PROJECTION_STACK_DEPTH>
<android.opengl.GLES11: int GL_RGB_SCALE>
<android.opengl.GLES11: int GL_SAMPLES>
<android.opengl.GLES11: int GL_SAMPLE_BUFFERS>
<android.opengl.GLES11: int GL_SAMPLE_COVERAGE_INVERT>
<android.opengl.GLES11: int GL_SAMPLE_COVERAGE_VALUE>
<android.opengl.GLES11: int GL_SCISSOR_BOX>
<android.opengl.GLES11: int GL_SHADE_MODEL>
<android.opengl.GLES11: int GL_SRC0_ALPHA>
<android.opengl.GLES11: int GL_SRC0_RGB>
<android.opengl.GLES11: int GL_SRC1_ALPHA>
<android.opengl.GLES11: int GL_SRC1_RGB>
<android.opengl.GLES11: int GL_SRC2_ALPHA>
<android.opengl.GLES11: int GL_SRC2_RGB>
<android.opengl.GLES11: int GL_STATIC_DRAW>
<android.opengl.GLES11: int GL_STENCIL_CLEAR_VALUE>
<android.opengl.GLES11: int GL_STENCIL_FAIL>
<android.opengl.GLES11: int GL_STENCIL_FUNC>
<android.opengl.GLES11: int GL_STENCIL_PASS_DEPTH_FAIL>
<android.opengl.GLES11: int GL_STENCIL_PASS_DEPTH_PASS>
<android.opengl.GLES11: int GL_STENCIL_REF>
<android.opengl.GLES11: int GL_STENCIL_VALUE_MASK>
<android.opengl.GLES11: int GL_STENCIL_WRITEMASK>
<android.opengl.GLES11: int GL_SUBTRACT>
<android.opengl.GLES11: int GL_TEXTURE_BINDING_2D>
<android.opengl.GLES11: int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING>
<android.opengl.GLES11: int GL_TEXTURE_COORD_ARRAY_POINTER>
<android.opengl.GLES11: int GL_TEXTURE_COORD_ARRAY_SIZE>
<android.opengl.GLES11: int GL_TEXTURE_COORD_ARRAY_STRIDE>
<android.opengl.GLES11: int GL_TEXTURE_COORD_ARRAY_TYPE>
<android.opengl.GLES11: int GL_TEXTURE_MATRIX>
<android.opengl.GLES11: int GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES>
<android.opengl.GLES11: int GL_TEXTURE_STACK_DEPTH>
<android.opengl.GLES11: int GL_VERTEX_ARRAY_BUFFER_BINDING>
<android.opengl.GLES11: int GL_VERTEX_ARRAY_POINTER>
<android.opengl.GLES11: int GL_VERTEX_ARRAY_SIZE>
<android.opengl.GLES11: int GL_VERTEX_ARRAY_STRIDE>
<android.opengl.GLES11: int GL_VERTEX_ARRAY_TYPE>
<android.opengl.GLES11: int GL_VIEWPORT>
<android.opengl.GLES11: int GL_WRITE_ONLY>
android.opengl.GLES11Ext
<android.opengl.GLES11Ext: void <init>()>
<android.opengl.GLES11Ext: void glAlphaFuncxOES(int,int)>
<android.opengl.GLES11Ext: void glBindFramebufferOES(int,int)>
<android.opengl.GLES11Ext: void glBindRenderbufferOES(int,int)>
<android.opengl.GLES11Ext: void glBlendEquationOES(int)>
<android.opengl.GLES11Ext: void glBlendEquationSeparateOES(int,int)>
<android.opengl.GLES11Ext: void glBlendFuncSeparateOES(int,int,int,int)>
<android.opengl.GLES11Ext: int glCheckFramebufferStatusOES(int)>
<android.opengl.GLES11Ext: void glClearColorxOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glClearDepthfOES(float)>
<android.opengl.GLES11Ext: void glClearDepthxOES(int)>
<android.opengl.GLES11Ext: void glClipPlanefOES(int,float[],int)>
<android.opengl.GLES11Ext: void glClipPlanefOES(int,java.nio.FloatBuffer)>
<android.opengl.GLES11Ext: void glClipPlanexOES(int,int[],int)>
<android.opengl.GLES11Ext: void glClipPlanexOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glColor4xOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glCurrentPaletteMatrixOES(int)>
<android.opengl.GLES11Ext: void glDeleteFramebuffersOES(int,int[],int)>
<android.opengl.GLES11Ext: void glDeleteFramebuffersOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glDeleteRenderbuffersOES(int,int[],int)>
<android.opengl.GLES11Ext: void glDeleteRenderbuffersOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glDepthRangefOES(float,float)>
<android.opengl.GLES11Ext: void glDepthRangexOES(int,int)>
<android.opengl.GLES11Ext: void glDrawTexfOES(float,float,float,float,float)>
<android.opengl.GLES11Ext: void glDrawTexfvOES(float[],int)>
<android.opengl.GLES11Ext: void glDrawTexfvOES(java.nio.FloatBuffer)>
<android.opengl.GLES11Ext: void glDrawTexiOES(int,int,int,int,int)>
<android.opengl.GLES11Ext: void glDrawTexivOES(int[],int)>
<android.opengl.GLES11Ext: void glDrawTexivOES(java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glDrawTexsOES(short,short,short,short,short)>
<android.opengl.GLES11Ext: void glDrawTexsvOES(short[],int)>
<android.opengl.GLES11Ext: void glDrawTexsvOES(java.nio.ShortBuffer)>
<android.opengl.GLES11Ext: void glDrawTexxOES(int,int,int,int,int)>
<android.opengl.GLES11Ext: void glDrawTexxvOES(int[],int)>
<android.opengl.GLES11Ext: void glDrawTexxvOES(java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glEGLImageTargetRenderbufferStorageOES(int,java.nio.Buffer)>
<android.opengl.GLES11Ext: void glEGLImageTargetTexture2DOES(int,java.nio.Buffer)>
<android.opengl.GLES11Ext: void glFogxOES(int,int)>
<android.opengl.GLES11Ext: void glFogxvOES(int,int[],int)>
<android.opengl.GLES11Ext: void glFogxvOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glFramebufferRenderbufferOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glFramebufferTexture2DOES(int,int,int,int,int)>
<android.opengl.GLES11Ext: void glFrustumfOES(float,float,float,float,float,float)>
<android.opengl.GLES11Ext: void glFrustumxOES(int,int,int,int,int,int)>
<android.opengl.GLES11Ext: void glGenFramebuffersOES(int,int[],int)>
<android.opengl.GLES11Ext: void glGenFramebuffersOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGenRenderbuffersOES(int,int[],int)>
<android.opengl.GLES11Ext: void glGenRenderbuffersOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGenerateMipmapOES(int)>
<android.opengl.GLES11Ext: void glGetClipPlanefOES(int,float[],int)>
<android.opengl.GLES11Ext: void glGetClipPlanefOES(int,java.nio.FloatBuffer)>
<android.opengl.GLES11Ext: void glGetClipPlanexOES(int,int[],int)>
<android.opengl.GLES11Ext: void glGetClipPlanexOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetFixedvOES(int,int[],int)>
<android.opengl.GLES11Ext: void glGetFixedvOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetFramebufferAttachmentParameterivOES(int,int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetFramebufferAttachmentParameterivOES(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetLightxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetLightxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetMaterialxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetMaterialxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetRenderbufferParameterivOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetRenderbufferParameterivOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetTexEnvxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetTexEnvxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetTexGenfvOES(int,int,float[],int)>
<android.opengl.GLES11Ext: void glGetTexGenfvOES(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11Ext: void glGetTexGenivOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetTexGenivOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetTexGenxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetTexGenxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glGetTexParameterxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glGetTexParameterxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: boolean glIsFramebufferOES(int)>
<android.opengl.GLES11Ext: boolean glIsRenderbufferOES(int)>
<android.opengl.GLES11Ext: void glLightModelxOES(int,int)>
<android.opengl.GLES11Ext: void glLightModelxvOES(int,int[],int)>
<android.opengl.GLES11Ext: void glLightModelxvOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glLightxOES(int,int,int)>
<android.opengl.GLES11Ext: void glLightxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glLightxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glLineWidthxOES(int)>
<android.opengl.GLES11Ext: void glLoadMatrixxOES(int[],int)>
<android.opengl.GLES11Ext: void glLoadMatrixxOES(java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glLoadPaletteFromModelViewMatrixOES()>
<android.opengl.GLES11Ext: void glMaterialxOES(int,int,int)>
<android.opengl.GLES11Ext: void glMaterialxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glMaterialxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glMatrixIndexPointerOES(int,int,int,java.nio.Buffer)>
<android.opengl.GLES11Ext: void glMultMatrixxOES(int[],int)>
<android.opengl.GLES11Ext: void glMultMatrixxOES(java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glMultiTexCoord4xOES(int,int,int,int,int)>
<android.opengl.GLES11Ext: void glNormal3xOES(int,int,int)>
<android.opengl.GLES11Ext: void glOrthofOES(float,float,float,float,float,float)>
<android.opengl.GLES11Ext: void glOrthoxOES(int,int,int,int,int,int)>
<android.opengl.GLES11Ext: void glPointParameterxOES(int,int)>
<android.opengl.GLES11Ext: void glPointParameterxvOES(int,int[],int)>
<android.opengl.GLES11Ext: void glPointParameterxvOES(int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glPointSizexOES(int)>
<android.opengl.GLES11Ext: void glPolygonOffsetxOES(int,int)>
<android.opengl.GLES11Ext: void glRenderbufferStorageOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glRotatexOES(int,int,int,int)>
<android.opengl.GLES11Ext: void glSampleCoveragexOES(int,boolean)>
<android.opengl.GLES11Ext: void glScalexOES(int,int,int)>
<android.opengl.GLES11Ext: void glTexEnvxOES(int,int,int)>
<android.opengl.GLES11Ext: void glTexEnvxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glTexEnvxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glTexGenfOES(int,int,float)>
<android.opengl.GLES11Ext: void glTexGenfvOES(int,int,float[],int)>
<android.opengl.GLES11Ext: void glTexGenfvOES(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES11Ext: void glTexGeniOES(int,int,int)>
<android.opengl.GLES11Ext: void glTexGenivOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glTexGenivOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glTexGenxOES(int,int,int)>
<android.opengl.GLES11Ext: void glTexGenxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glTexGenxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glTexParameterxOES(int,int,int)>
<android.opengl.GLES11Ext: void glTexParameterxvOES(int,int,int[],int)>
<android.opengl.GLES11Ext: void glTexParameterxvOES(int,int,java.nio.IntBuffer)>
<android.opengl.GLES11Ext: void glTranslatexOES(int,int,int)>
<android.opengl.GLES11Ext: void glWeightPointerOES(int,int,int,java.nio.Buffer)>
<android.opengl.GLES11Ext: int GL_3DC_XY_AMD>
<android.opengl.GLES11Ext: int GL_3DC_X_AMD>
<android.opengl.GLES11Ext: int GL_ATC_RGBA_EXPLICIT_ALPHA_AMD>
<android.opengl.GLES11Ext: int GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD>
<android.opengl.GLES11Ext: int GL_ATC_RGB_AMD>
<android.opengl.GLES11Ext: int GL_BGRA>
<android.opengl.GLES11Ext: int GL_BLEND_DST_ALPHA_OES>
<android.opengl.GLES11Ext: int GL_BLEND_DST_RGB_OES>
<android.opengl.GLES11Ext: int GL_BLEND_EQUATION_ALPHA_OES>
<android.opengl.GLES11Ext: int GL_BLEND_EQUATION_OES>
<android.opengl.GLES11Ext: int GL_BLEND_EQUATION_RGB_OES>
<android.opengl.GLES11Ext: int GL_BLEND_SRC_ALPHA_OES>
<android.opengl.GLES11Ext: int GL_BLEND_SRC_RGB_OES>
<android.opengl.GLES11Ext: int GL_BUFFER_ACCESS_OES>
<android.opengl.GLES11Ext: int GL_BUFFER_MAPPED_OES>
<android.opengl.GLES11Ext: int GL_BUFFER_MAP_POINTER_OES>
<android.opengl.GLES11Ext: int GL_COLOR_ATTACHMENT0_OES>
<android.opengl.GLES11Ext: int GL_CURRENT_PALETTE_MATRIX_OES>
<android.opengl.GLES11Ext: int GL_DECR_WRAP_OES>
<android.opengl.GLES11Ext: int GL_DEPTH24_STENCIL8_OES>
<android.opengl.GLES11Ext: int GL_DEPTH_ATTACHMENT_OES>
<android.opengl.GLES11Ext: int GL_DEPTH_COMPONENT16_OES>
<android.opengl.GLES11Ext: int GL_DEPTH_COMPONENT24_OES>
<android.opengl.GLES11Ext: int GL_DEPTH_COMPONENT32_OES>
<android.opengl.GLES11Ext: int GL_DEPTH_STENCIL_OES>
<android.opengl.GLES11Ext: int GL_ETC1_RGB8_OES>
<android.opengl.GLES11Ext: int GL_FIXED_OES>
<android.opengl.GLES11Ext: int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES>
<android.opengl.GLES11Ext: int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES>
<android.opengl.GLES11Ext: int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES>
<android.opengl.GLES11Ext: int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES>
<android.opengl.GLES11Ext: int GL_FRAMEBUFFER_BINDING_OES>
<android.opengl.GLES11Ext: int GL_FRAMEBUFFER_COMPLETE_OES>
<android.opengl.GLES11Ext: int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES>
<android.opengl.GLES11Ext: int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES>
<android.opengl.GLES11Ext: int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES>
<android.opengl.GLES11Ext: int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES>
<android.opengl.GLES11Ext: int GL_FRAMEBUFFER_OES>
<android.opengl.GLES11Ext: int GL_FRAMEBUFFER_UNSUPPORTED_OES>
<android.opengl.GLES11Ext: int GL_FUNC_ADD_OES>
<android.opengl.GLES11Ext: int GL_FUNC_REVERSE_SUBTRACT_OES>
<android.opengl.GLES11Ext: int GL_FUNC_SUBTRACT_OES>
<android.opengl.GLES11Ext: int GL_INCR_WRAP_OES>
<android.opengl.GLES11Ext: int GL_INVALID_FRAMEBUFFER_OPERATION_OES>
<android.opengl.GLES11Ext: int GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES>
<android.opengl.GLES11Ext: int GL_MATRIX_INDEX_ARRAY_OES>
<android.opengl.GLES11Ext: int GL_MATRIX_INDEX_ARRAY_POINTER_OES>
<android.opengl.GLES11Ext: int GL_MATRIX_INDEX_ARRAY_SIZE_OES>
<android.opengl.GLES11Ext: int GL_MATRIX_INDEX_ARRAY_STRIDE_OES>
<android.opengl.GLES11Ext: int GL_MATRIX_INDEX_ARRAY_TYPE_OES>
<android.opengl.GLES11Ext: int GL_MATRIX_PALETTE_OES>
<android.opengl.GLES11Ext: int GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES>
<android.opengl.GLES11Ext: int GL_MAX_PALETTE_MATRICES_OES>
<android.opengl.GLES11Ext: int GL_MAX_RENDERBUFFER_SIZE_OES>
<android.opengl.GLES11Ext: int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT>
<android.opengl.GLES11Ext: int GL_MAX_VERTEX_UNITS_OES>
<android.opengl.GLES11Ext: int GL_MIRRORED_REPEAT_OES>
<android.opengl.GLES11Ext: int GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES>
<android.opengl.GLES11Ext: int GL_NONE_OES>
<android.opengl.GLES11Ext: int GL_NORMAL_MAP_OES>
<android.opengl.GLES11Ext: int GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES>
<android.opengl.GLES11Ext: int GL_REFLECTION_MAP_OES>
<android.opengl.GLES11Ext: int GL_RENDERBUFFER_ALPHA_SIZE_OES>
<android.opengl.GLES11Ext: int GL_RENDERBUFFER_BINDING_OES>
<android.opengl.GLES11Ext: int GL_RENDERBUFFER_BLUE_SIZE_OES>
<android.opengl.GLES11Ext: int GL_RENDERBUFFER_DEPTH_SIZE_OES>
<android.opengl.GLES11Ext: int GL_RENDERBUFFER_GREEN_SIZE_OES>
<android.opengl.GLES11Ext: int GL_RENDERBUFFER_HEIGHT_OES>
<android.opengl.GLES11Ext: int GL_RENDERBUFFER_INTERNAL_FORMAT_OES>
<android.opengl.GLES11Ext: int GL_RENDERBUFFER_OES>
<android.opengl.GLES11Ext: int GL_RENDERBUFFER_RED_SIZE_OES>
<android.opengl.GLES11Ext: int GL_RENDERBUFFER_STENCIL_SIZE_OES>
<android.opengl.GLES11Ext: int GL_RENDERBUFFER_WIDTH_OES>
<android.opengl.GLES11Ext: int GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES>
<android.opengl.GLES11Ext: int GL_RGB565_OES>
<android.opengl.GLES11Ext: int GL_RGB5_A1_OES>
<android.opengl.GLES11Ext: int GL_RGB8_OES>
<android.opengl.GLES11Ext: int GL_RGBA4_OES>
<android.opengl.GLES11Ext: int GL_RGBA8_OES>
<android.opengl.GLES11Ext: int GL_SAMPLER_EXTERNAL_OES>
<android.opengl.GLES11Ext: int GL_STENCIL_ATTACHMENT_OES>
<android.opengl.GLES11Ext: int GL_STENCIL_INDEX1_OES>
<android.opengl.GLES11Ext: int GL_STENCIL_INDEX4_OES>
<android.opengl.GLES11Ext: int GL_STENCIL_INDEX8_OES>
<android.opengl.GLES11Ext: int GL_TEXTURE_BINDING_CUBE_MAP_OES>
<android.opengl.GLES11Ext: int GL_TEXTURE_BINDING_EXTERNAL_OES>
<android.opengl.GLES11Ext: int GL_TEXTURE_CROP_RECT_OES>
<android.opengl.GLES11Ext: int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES>
<android.opengl.GLES11Ext: int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES>
<android.opengl.GLES11Ext: int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES>
<android.opengl.GLES11Ext: int GL_TEXTURE_CUBE_MAP_OES>
<android.opengl.GLES11Ext: int GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES>
<android.opengl.GLES11Ext: int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES>
<android.opengl.GLES11Ext: int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES>
<android.opengl.GLES11Ext: int GL_TEXTURE_EXTERNAL_OES>
<android.opengl.GLES11Ext: int GL_TEXTURE_GEN_MODE_OES>
<android.opengl.GLES11Ext: int GL_TEXTURE_GEN_STR_OES>
<android.opengl.GLES11Ext: int GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES>
<android.opengl.GLES11Ext: int GL_TEXTURE_MAX_ANISOTROPY_EXT>
<android.opengl.GLES11Ext: int GL_UNSIGNED_INT_24_8_OES>
<android.opengl.GLES11Ext: int GL_WEIGHT_ARRAY_BUFFER_BINDING_OES>
<android.opengl.GLES11Ext: int GL_WEIGHT_ARRAY_OES>
<android.opengl.GLES11Ext: int GL_WEIGHT_ARRAY_POINTER_OES>
<android.opengl.GLES11Ext: int GL_WEIGHT_ARRAY_SIZE_OES>
<android.opengl.GLES11Ext: int GL_WEIGHT_ARRAY_STRIDE_OES>
<android.opengl.GLES11Ext: int GL_WEIGHT_ARRAY_TYPE_OES>
<android.opengl.GLES11Ext: int GL_WRITE_ONLY_OES>
android.opengl.GLES20
<android.opengl.GLES20: void <init>()>
<android.opengl.GLES20: void glActiveTexture(int)>
<android.opengl.GLES20: void glAttachShader(int,int)>
<android.opengl.GLES20: void glBindAttribLocation(int,int,java.lang.String)>
<android.opengl.GLES20: void glBindBuffer(int,int)>
<android.opengl.GLES20: void glBindFramebuffer(int,int)>
<android.opengl.GLES20: void glBindRenderbuffer(int,int)>
<android.opengl.GLES20: void glBindTexture(int,int)>
<android.opengl.GLES20: void glBlendColor(float,float,float,float)>
<android.opengl.GLES20: void glBlendEquation(int)>
<android.opengl.GLES20: void glBlendEquationSeparate(int,int)>
<android.opengl.GLES20: void glBlendFunc(int,int)>
<android.opengl.GLES20: void glBlendFuncSeparate(int,int,int,int)>
<android.opengl.GLES20: void glBufferData(int,int,java.nio.Buffer,int)>
<android.opengl.GLES20: void glBufferSubData(int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: int glCheckFramebufferStatus(int)>
<android.opengl.GLES20: void glClear(int)>
<android.opengl.GLES20: void glClearColor(float,float,float,float)>
<android.opengl.GLES20: void glClearDepthf(float)>
<android.opengl.GLES20: void glClearStencil(int)>
<android.opengl.GLES20: void glColorMask(boolean,boolean,boolean,boolean)>
<android.opengl.GLES20: void glCompileShader(int)>
<android.opengl.GLES20: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glCopyTexImage2D(int,int,int,int,int,int,int,int)>
<android.opengl.GLES20: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)>
<android.opengl.GLES20: int glCreateProgram()>
<android.opengl.GLES20: int glCreateShader(int)>
<android.opengl.GLES20: void glCullFace(int)>
<android.opengl.GLES20: void glDeleteBuffers(int,int[],int)>
<android.opengl.GLES20: void glDeleteBuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glDeleteFramebuffers(int,int[],int)>
<android.opengl.GLES20: void glDeleteFramebuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glDeleteProgram(int)>
<android.opengl.GLES20: void glDeleteRenderbuffers(int,int[],int)>
<android.opengl.GLES20: void glDeleteRenderbuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glDeleteShader(int)>
<android.opengl.GLES20: void glDeleteTextures(int,int[],int)>
<android.opengl.GLES20: void glDeleteTextures(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glDepthFunc(int)>
<android.opengl.GLES20: void glDepthMask(boolean)>
<android.opengl.GLES20: void glDepthRangef(float,float)>
<android.opengl.GLES20: void glDetachShader(int,int)>
<android.opengl.GLES20: void glDisable(int)>
<android.opengl.GLES20: void glDisableVertexAttribArray(int)>
<android.opengl.GLES20: void glDrawArrays(int,int,int)>
<android.opengl.GLES20: void glDrawElements(int,int,int,int)>
<android.opengl.GLES20: void glDrawElements(int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glEnable(int)>
<android.opengl.GLES20: void glEnableVertexAttribArray(int)>
<android.opengl.GLES20: void glFinish()>
<android.opengl.GLES20: void glFlush()>
<android.opengl.GLES20: void glFramebufferRenderbuffer(int,int,int,int)>
<android.opengl.GLES20: void glFramebufferTexture2D(int,int,int,int,int)>
<android.opengl.GLES20: void glFrontFace(int)>
<android.opengl.GLES20: void glGenBuffers(int,int[],int)>
<android.opengl.GLES20: void glGenBuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGenFramebuffers(int,int[],int)>
<android.opengl.GLES20: void glGenFramebuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGenRenderbuffers(int,int[],int)>
<android.opengl.GLES20: void glGenRenderbuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGenTextures(int,int[],int)>
<android.opengl.GLES20: void glGenTextures(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGenerateMipmap(int)>
<android.opengl.GLES20: void glGetActiveAttrib(int,int,int,int[],int,int[],int,int[],int,byte[],int)>
<android.opengl.GLES20: java.lang.String glGetActiveAttrib(int,int,int[],int,int[],int)>
<android.opengl.GLES20: java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetActiveUniform(int,int,int,int[],int,int[],int,int[],int,byte[],int)>
<android.opengl.GLES20: java.lang.String glGetActiveUniform(int,int,int[],int,int[],int)>
<android.opengl.GLES20: java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetAttachedShaders(int,int,int[],int,int[],int)>
<android.opengl.GLES20: void glGetAttachedShaders(int,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES20: int glGetAttribLocation(int,java.lang.String)>
<android.opengl.GLES20: void glGetBooleanv(int,boolean[],int)>
<android.opengl.GLES20: void glGetBooleanv(int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetBufferParameteriv(int,int,int[],int)>
<android.opengl.GLES20: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: int glGetError()>
<android.opengl.GLES20: void glGetFloatv(int,float[],int)>
<android.opengl.GLES20: void glGetFloatv(int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glGetFramebufferAttachmentParameteriv(int,int,int,int[],int)>
<android.opengl.GLES20: void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetIntegerv(int,int[],int)>
<android.opengl.GLES20: void glGetIntegerv(int,java.nio.IntBuffer)>
<android.opengl.GLES20: java.lang.String glGetProgramInfoLog(int)>
<android.opengl.GLES20: void glGetProgramiv(int,int,int[],int)>
<android.opengl.GLES20: void glGetProgramiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetRenderbufferParameteriv(int,int,int[],int)>
<android.opengl.GLES20: void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: java.lang.String glGetShaderInfoLog(int)>
<android.opengl.GLES20: void glGetShaderPrecisionFormat(int,int,int[],int,int[],int)>
<android.opengl.GLES20: void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetShaderSource(int,int,int[],int,byte[],int)>
<android.opengl.GLES20: java.lang.String glGetShaderSource(int)>
<android.opengl.GLES20: void glGetShaderiv(int,int,int[],int)>
<android.opengl.GLES20: void glGetShaderiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: java.lang.String glGetString(int)>
<android.opengl.GLES20: void glGetTexParameterfv(int,int,float[],int)>
<android.opengl.GLES20: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glGetTexParameteriv(int,int,int[],int)>
<android.opengl.GLES20: void glGetTexParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>
<android.opengl.GLES20: void glGetUniformfv(int,int,float[],int)>
<android.opengl.GLES20: void glGetUniformfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glGetUniformiv(int,int,int[],int)>
<android.opengl.GLES20: void glGetUniformiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glGetVertexAttribfv(int,int,float[],int)>
<android.opengl.GLES20: void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glGetVertexAttribiv(int,int,int[],int)>
<android.opengl.GLES20: void glGetVertexAttribiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glHint(int,int)>
<android.opengl.GLES20: boolean glIsBuffer(int)>
<android.opengl.GLES20: boolean glIsEnabled(int)>
<android.opengl.GLES20: boolean glIsFramebuffer(int)>
<android.opengl.GLES20: boolean glIsProgram(int)>
<android.opengl.GLES20: boolean glIsRenderbuffer(int)>
<android.opengl.GLES20: boolean glIsShader(int)>
<android.opengl.GLES20: boolean glIsTexture(int)>
<android.opengl.GLES20: void glLineWidth(float)>
<android.opengl.GLES20: void glLinkProgram(int)>
<android.opengl.GLES20: void glPixelStorei(int,int)>
<android.opengl.GLES20: void glPolygonOffset(float,float)>
<android.opengl.GLES20: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glReleaseShaderCompiler()>
<android.opengl.GLES20: void glRenderbufferStorage(int,int,int,int)>
<android.opengl.GLES20: void glSampleCoverage(float,boolean)>
<android.opengl.GLES20: void glScissor(int,int,int,int)>
<android.opengl.GLES20: void glShaderBinary(int,int[],int,int,java.nio.Buffer,int)>
<android.opengl.GLES20: void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)>
<android.opengl.GLES20: void glShaderSource(int,java.lang.String)>
<android.opengl.GLES20: void glStencilFunc(int,int,int)>
<android.opengl.GLES20: void glStencilFuncSeparate(int,int,int,int)>
<android.opengl.GLES20: void glStencilMask(int)>
<android.opengl.GLES20: void glStencilMaskSeparate(int,int)>
<android.opengl.GLES20: void glStencilOp(int,int,int)>
<android.opengl.GLES20: void glStencilOpSeparate(int,int,int,int)>
<android.opengl.GLES20: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glTexParameterf(int,int,float)>
<android.opengl.GLES20: void glTexParameterfv(int,int,float[],int)>
<android.opengl.GLES20: void glTexParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glTexParameteri(int,int,int)>
<android.opengl.GLES20: void glTexParameteriv(int,int,int[],int)>
<android.opengl.GLES20: void glTexParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES20: void glUniform1f(int,float)>
<android.opengl.GLES20: void glUniform1fv(int,int,float[],int)>
<android.opengl.GLES20: void glUniform1fv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glUniform1i(int,int)>
<android.opengl.GLES20: void glUniform1iv(int,int,int[],int)>
<android.opengl.GLES20: void glUniform1iv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glUniform2f(int,float,float)>
<android.opengl.GLES20: void glUniform2fv(int,int,float[],int)>
<android.opengl.GLES20: void glUniform2fv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glUniform2i(int,int,int)>
<android.opengl.GLES20: void glUniform2iv(int,int,int[],int)>
<android.opengl.GLES20: void glUniform2iv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glUniform3f(int,float,float,float)>
<android.opengl.GLES20: void glUniform3fv(int,int,float[],int)>
<android.opengl.GLES20: void glUniform3fv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glUniform3i(int,int,int,int)>
<android.opengl.GLES20: void glUniform3iv(int,int,int[],int)>
<android.opengl.GLES20: void glUniform3iv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glUniform4f(int,float,float,float,float)>
<android.opengl.GLES20: void glUniform4fv(int,int,float[],int)>
<android.opengl.GLES20: void glUniform4fv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glUniform4i(int,int,int,int,int)>
<android.opengl.GLES20: void glUniform4iv(int,int,int[],int)>
<android.opengl.GLES20: void glUniform4iv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES20: void glUniformMatrix2fv(int,int,boolean,float[],int)>
<android.opengl.GLES20: void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glUniformMatrix3fv(int,int,boolean,float[],int)>
<android.opengl.GLES20: void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glUniformMatrix4fv(int,int,boolean,float[],int)>
<android.opengl.GLES20: void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glUseProgram(int)>
<android.opengl.GLES20: void glValidateProgram(int)>
<android.opengl.GLES20: void glVertexAttrib1f(int,float)>
<android.opengl.GLES20: void glVertexAttrib1fv(int,float[],int)>
<android.opengl.GLES20: void glVertexAttrib1fv(int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glVertexAttrib2f(int,float,float)>
<android.opengl.GLES20: void glVertexAttrib2fv(int,float[],int)>
<android.opengl.GLES20: void glVertexAttrib2fv(int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glVertexAttrib3f(int,float,float,float)>
<android.opengl.GLES20: void glVertexAttrib3fv(int,float[],int)>
<android.opengl.GLES20: void glVertexAttrib3fv(int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glVertexAttrib4f(int,float,float,float,float)>
<android.opengl.GLES20: void glVertexAttrib4fv(int,float[],int)>
<android.opengl.GLES20: void glVertexAttrib4fv(int,java.nio.FloatBuffer)>
<android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,int)>
<android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)>
<android.opengl.GLES20: void glViewport(int,int,int,int)>
<android.opengl.GLES20: int GL_ACTIVE_ATTRIBUTES>
<android.opengl.GLES20: int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH>
<android.opengl.GLES20: int GL_ACTIVE_TEXTURE>
<android.opengl.GLES20: int GL_ACTIVE_UNIFORMS>
<android.opengl.GLES20: int GL_ACTIVE_UNIFORM_MAX_LENGTH>
<android.opengl.GLES20: int GL_ALIASED_LINE_WIDTH_RANGE>
<android.opengl.GLES20: int GL_ALIASED_POINT_SIZE_RANGE>
<android.opengl.GLES20: int GL_ALPHA>
<android.opengl.GLES20: int GL_ALPHA_BITS>
<android.opengl.GLES20: int GL_ALWAYS>
<android.opengl.GLES20: int GL_ARRAY_BUFFER>
<android.opengl.GLES20: int GL_ARRAY_BUFFER_BINDING>
<android.opengl.GLES20: int GL_ATTACHED_SHADERS>
<android.opengl.GLES20: int GL_BACK>
<android.opengl.GLES20: int GL_BLEND>
<android.opengl.GLES20: int GL_BLEND_COLOR>
<android.opengl.GLES20: int GL_BLEND_DST_ALPHA>
<android.opengl.GLES20: int GL_BLEND_DST_RGB>
<android.opengl.GLES20: int GL_BLEND_EQUATION>
<android.opengl.GLES20: int GL_BLEND_EQUATION_ALPHA>
<android.opengl.GLES20: int GL_BLEND_EQUATION_RGB>
<android.opengl.GLES20: int GL_BLEND_SRC_ALPHA>
<android.opengl.GLES20: int GL_BLEND_SRC_RGB>
<android.opengl.GLES20: int GL_BLUE_BITS>
<android.opengl.GLES20: int GL_BOOL>
<android.opengl.GLES20: int GL_BOOL_VEC2>
<android.opengl.GLES20: int GL_BOOL_VEC3>
<android.opengl.GLES20: int GL_BOOL_VEC4>
<android.opengl.GLES20: int GL_BUFFER_SIZE>
<android.opengl.GLES20: int GL_BUFFER_USAGE>
<android.opengl.GLES20: int GL_BYTE>
<android.opengl.GLES20: int GL_CCW>
<android.opengl.GLES20: int GL_CLAMP_TO_EDGE>
<android.opengl.GLES20: int GL_COLOR_ATTACHMENT0>
<android.opengl.GLES20: int GL_COLOR_BUFFER_BIT>
<android.opengl.GLES20: int GL_COLOR_CLEAR_VALUE>
<android.opengl.GLES20: int GL_COLOR_WRITEMASK>
<android.opengl.GLES20: int GL_COMPILE_STATUS>
<android.opengl.GLES20: int GL_COMPRESSED_TEXTURE_FORMATS>
<android.opengl.GLES20: int GL_CONSTANT_ALPHA>
<android.opengl.GLES20: int GL_CONSTANT_COLOR>
<android.opengl.GLES20: int GL_CULL_FACE>
<android.opengl.GLES20: int GL_CULL_FACE_MODE>
<android.opengl.GLES20: int GL_CURRENT_PROGRAM>
<android.opengl.GLES20: int GL_CURRENT_VERTEX_ATTRIB>
<android.opengl.GLES20: int GL_CW>
<android.opengl.GLES20: int GL_DECR>
<android.opengl.GLES20: int GL_DECR_WRAP>
<android.opengl.GLES20: int GL_DELETE_STATUS>
<android.opengl.GLES20: int GL_DEPTH_ATTACHMENT>
<android.opengl.GLES20: int GL_DEPTH_BITS>
<android.opengl.GLES20: int GL_DEPTH_BUFFER_BIT>
<android.opengl.GLES20: int GL_DEPTH_CLEAR_VALUE>
<android.opengl.GLES20: int GL_DEPTH_COMPONENT>
<android.opengl.GLES20: int GL_DEPTH_COMPONENT16>
<android.opengl.GLES20: int GL_DEPTH_FUNC>
<android.opengl.GLES20: int GL_DEPTH_RANGE>
<android.opengl.GLES20: int GL_DEPTH_TEST>
<android.opengl.GLES20: int GL_DEPTH_WRITEMASK>
<android.opengl.GLES20: int GL_DITHER>
<android.opengl.GLES20: int GL_DONT_CARE>
<android.opengl.GLES20: int GL_DST_ALPHA>
<android.opengl.GLES20: int GL_DST_COLOR>
<android.opengl.GLES20: int GL_DYNAMIC_DRAW>
<android.opengl.GLES20: int GL_ELEMENT_ARRAY_BUFFER>
<android.opengl.GLES20: int GL_ELEMENT_ARRAY_BUFFER_BINDING>
<android.opengl.GLES20: int GL_EQUAL>
<android.opengl.GLES20: int GL_EXTENSIONS>
<android.opengl.GLES20: int GL_FALSE>
<android.opengl.GLES20: int GL_FASTEST>
<android.opengl.GLES20: int GL_FIXED>
<android.opengl.GLES20: int GL_FLOAT>
<android.opengl.GLES20: int GL_FLOAT_MAT2>
<android.opengl.GLES20: int GL_FLOAT_MAT3>
<android.opengl.GLES20: int GL_FLOAT_MAT4>
<android.opengl.GLES20: int GL_FLOAT_VEC2>
<android.opengl.GLES20: int GL_FLOAT_VEC3>
<android.opengl.GLES20: int GL_FLOAT_VEC4>
<android.opengl.GLES20: int GL_FRAGMENT_SHADER>
<android.opengl.GLES20: int GL_FRAMEBUFFER>
<android.opengl.GLES20: int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
<android.opengl.GLES20: int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
<android.opengl.GLES20: int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
<android.opengl.GLES20: int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
<android.opengl.GLES20: int GL_FRAMEBUFFER_BINDING>
<android.opengl.GLES20: int GL_FRAMEBUFFER_COMPLETE>
<android.opengl.GLES20: int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
<android.opengl.GLES20: int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
<android.opengl.GLES20: int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
<android.opengl.GLES20: int GL_FRAMEBUFFER_UNSUPPORTED>
<android.opengl.GLES20: int GL_FRONT>
<android.opengl.GLES20: int GL_FRONT_AND_BACK>
<android.opengl.GLES20: int GL_FRONT_FACE>
<android.opengl.GLES20: int GL_FUNC_ADD>
<android.opengl.GLES20: int GL_FUNC_REVERSE_SUBTRACT>
<android.opengl.GLES20: int GL_FUNC_SUBTRACT>
<android.opengl.GLES20: int GL_GENERATE_MIPMAP_HINT>
<android.opengl.GLES20: int GL_GEQUAL>
<android.opengl.GLES20: int GL_GREATER>
<android.opengl.GLES20: int GL_GREEN_BITS>
<android.opengl.GLES20: int GL_HIGH_FLOAT>
<android.opengl.GLES20: int GL_HIGH_INT>
<android.opengl.GLES20: int GL_IMPLEMENTATION_COLOR_READ_FORMAT>
<android.opengl.GLES20: int GL_IMPLEMENTATION_COLOR_READ_TYPE>
<android.opengl.GLES20: int GL_INCR>
<android.opengl.GLES20: int GL_INCR_WRAP>
<android.opengl.GLES20: int GL_INFO_LOG_LENGTH>
<android.opengl.GLES20: int GL_INT>
<android.opengl.GLES20: int GL_INT_VEC2>
<android.opengl.GLES20: int GL_INT_VEC3>
<android.opengl.GLES20: int GL_INT_VEC4>
<android.opengl.GLES20: int GL_INVALID_ENUM>
<android.opengl.GLES20: int GL_INVALID_FRAMEBUFFER_OPERATION>
<android.opengl.GLES20: int GL_INVALID_OPERATION>
<android.opengl.GLES20: int GL_INVALID_VALUE>
<android.opengl.GLES20: int GL_INVERT>
<android.opengl.GLES20: int GL_KEEP>
<android.opengl.GLES20: int GL_LEQUAL>
<android.opengl.GLES20: int GL_LESS>
<android.opengl.GLES20: int GL_LINEAR>
<android.opengl.GLES20: int GL_LINEAR_MIPMAP_LINEAR>
<android.opengl.GLES20: int GL_LINEAR_MIPMAP_NEAREST>
<android.opengl.GLES20: int GL_LINES>
<android.opengl.GLES20: int GL_LINE_LOOP>
<android.opengl.GLES20: int GL_LINE_STRIP>
<android.opengl.GLES20: int GL_LINE_WIDTH>
<android.opengl.GLES20: int GL_LINK_STATUS>
<android.opengl.GLES20: int GL_LOW_FLOAT>
<android.opengl.GLES20: int GL_LOW_INT>
<android.opengl.GLES20: int GL_LUMINANCE>
<android.opengl.GLES20: int GL_LUMINANCE_ALPHA>
<android.opengl.GLES20: int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS>
<android.opengl.GLES20: int GL_MAX_CUBE_MAP_TEXTURE_SIZE>
<android.opengl.GLES20: int GL_MAX_FRAGMENT_UNIFORM_VECTORS>
<android.opengl.GLES20: int GL_MAX_RENDERBUFFER_SIZE>
<android.opengl.GLES20: int GL_MAX_TEXTURE_IMAGE_UNITS>
<android.opengl.GLES20: int GL_MAX_TEXTURE_SIZE>
<android.opengl.GLES20: int GL_MAX_VARYING_VECTORS>
<android.opengl.GLES20: int GL_MAX_VERTEX_ATTRIBS>
<android.opengl.GLES20: int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS>
<android.opengl.GLES20: int GL_MAX_VERTEX_UNIFORM_VECTORS>
<android.opengl.GLES20: int GL_MAX_VIEWPORT_DIMS>
<android.opengl.GLES20: int GL_MEDIUM_FLOAT>
<android.opengl.GLES20: int GL_MEDIUM_INT>
<android.opengl.GLES20: int GL_MIRRORED_REPEAT>
<android.opengl.GLES20: int GL_NEAREST>
<android.opengl.GLES20: int GL_NEAREST_MIPMAP_LINEAR>
<android.opengl.GLES20: int GL_NEAREST_MIPMAP_NEAREST>
<android.opengl.GLES20: int GL_NEVER>
<android.opengl.GLES20: int GL_NICEST>
<android.opengl.GLES20: int GL_NONE>
<android.opengl.GLES20: int GL_NOTEQUAL>
<android.opengl.GLES20: int GL_NO_ERROR>
<android.opengl.GLES20: int GL_NUM_COMPRESSED_TEXTURE_FORMATS>
<android.opengl.GLES20: int GL_NUM_SHADER_BINARY_FORMATS>
<android.opengl.GLES20: int GL_ONE>
<android.opengl.GLES20: int GL_ONE_MINUS_CONSTANT_ALPHA>
<android.opengl.GLES20: int GL_ONE_MINUS_CONSTANT_COLOR>
<android.opengl.GLES20: int GL_ONE_MINUS_DST_ALPHA>
<android.opengl.GLES20: int GL_ONE_MINUS_DST_COLOR>
<android.opengl.GLES20: int GL_ONE_MINUS_SRC_ALPHA>
<android.opengl.GLES20: int GL_ONE_MINUS_SRC_COLOR>
<android.opengl.GLES20: int GL_OUT_OF_MEMORY>
<android.opengl.GLES20: int GL_PACK_ALIGNMENT>
<android.opengl.GLES20: int GL_POINTS>
<android.opengl.GLES20: int GL_POLYGON_OFFSET_FACTOR>
<android.opengl.GLES20: int GL_POLYGON_OFFSET_FILL>
<android.opengl.GLES20: int GL_POLYGON_OFFSET_UNITS>
<android.opengl.GLES20: int GL_RED_BITS>
<android.opengl.GLES20: int GL_RENDERBUFFER>
<android.opengl.GLES20: int GL_RENDERBUFFER_ALPHA_SIZE>
<android.opengl.GLES20: int GL_RENDERBUFFER_BINDING>
<android.opengl.GLES20: int GL_RENDERBUFFER_BLUE_SIZE>
<android.opengl.GLES20: int GL_RENDERBUFFER_DEPTH_SIZE>
<android.opengl.GLES20: int GL_RENDERBUFFER_GREEN_SIZE>
<android.opengl.GLES20: int GL_RENDERBUFFER_HEIGHT>
<android.opengl.GLES20: int GL_RENDERBUFFER_INTERNAL_FORMAT>
<android.opengl.GLES20: int GL_RENDERBUFFER_RED_SIZE>
<android.opengl.GLES20: int GL_RENDERBUFFER_STENCIL_SIZE>
<android.opengl.GLES20: int GL_RENDERBUFFER_WIDTH>
<android.opengl.GLES20: int GL_RENDERER>
<android.opengl.GLES20: int GL_REPEAT>
<android.opengl.GLES20: int GL_REPLACE>
<android.opengl.GLES20: int GL_RGB>
<android.opengl.GLES20: int GL_RGB565>
<android.opengl.GLES20: int GL_RGB5_A1>
<android.opengl.GLES20: int GL_RGBA>
<android.opengl.GLES20: int GL_RGBA4>
<android.opengl.GLES20: int GL_SAMPLER_2D>
<android.opengl.GLES20: int GL_SAMPLER_CUBE>
<android.opengl.GLES20: int GL_SAMPLES>
<android.opengl.GLES20: int GL_SAMPLE_ALPHA_TO_COVERAGE>
<android.opengl.GLES20: int GL_SAMPLE_BUFFERS>
<android.opengl.GLES20: int GL_SAMPLE_COVERAGE>
<android.opengl.GLES20: int GL_SAMPLE_COVERAGE_INVERT>
<android.opengl.GLES20: int GL_SAMPLE_COVERAGE_VALUE>
<android.opengl.GLES20: int GL_SCISSOR_BOX>
<android.opengl.GLES20: int GL_SCISSOR_TEST>
<android.opengl.GLES20: int GL_SHADER_BINARY_FORMATS>
<android.opengl.GLES20: int GL_SHADER_COMPILER>
<android.opengl.GLES20: int GL_SHADER_SOURCE_LENGTH>
<android.opengl.GLES20: int GL_SHADER_TYPE>
<android.opengl.GLES20: int GL_SHADING_LANGUAGE_VERSION>
<android.opengl.GLES20: int GL_SHORT>
<android.opengl.GLES20: int GL_SRC_ALPHA>
<android.opengl.GLES20: int GL_SRC_ALPHA_SATURATE>
<android.opengl.GLES20: int GL_SRC_COLOR>
<android.opengl.GLES20: int GL_STATIC_DRAW>
<android.opengl.GLES20: int GL_STENCIL_ATTACHMENT>
<android.opengl.GLES20: int GL_STENCIL_BACK_FAIL>
<android.opengl.GLES20: int GL_STENCIL_BACK_FUNC>
<android.opengl.GLES20: int GL_STENCIL_BACK_PASS_DEPTH_FAIL>
<android.opengl.GLES20: int GL_STENCIL_BACK_PASS_DEPTH_PASS>
<android.opengl.GLES20: int GL_STENCIL_BACK_REF>
<android.opengl.GLES20: int GL_STENCIL_BACK_VALUE_MASK>
<android.opengl.GLES20: int GL_STENCIL_BACK_WRITEMASK>
<android.opengl.GLES20: int GL_STENCIL_BITS>
<android.opengl.GLES20: int GL_STENCIL_BUFFER_BIT>
<android.opengl.GLES20: int GL_STENCIL_CLEAR_VALUE>
<android.opengl.GLES20: int GL_STENCIL_FAIL>
<android.opengl.GLES20: int GL_STENCIL_FUNC>
<android.opengl.GLES20: int GL_STENCIL_INDEX>
<android.opengl.GLES20: int GL_STENCIL_INDEX8>
<android.opengl.GLES20: int GL_STENCIL_PASS_DEPTH_FAIL>
<android.opengl.GLES20: int GL_STENCIL_PASS_DEPTH_PASS>
<android.opengl.GLES20: int GL_STENCIL_REF>
<android.opengl.GLES20: int GL_STENCIL_TEST>
<android.opengl.GLES20: int GL_STENCIL_VALUE_MASK>
<android.opengl.GLES20: int GL_STENCIL_WRITEMASK>
<android.opengl.GLES20: int GL_STREAM_DRAW>
<android.opengl.GLES20: int GL_SUBPIXEL_BITS>
<android.opengl.GLES20: int GL_TEXTURE>
<android.opengl.GLES20: int GL_TEXTURE0>
<android.opengl.GLES20: int GL_TEXTURE1>
<android.opengl.GLES20: int GL_TEXTURE10>
<android.opengl.GLES20: int GL_TEXTURE11>
<android.opengl.GLES20: int GL_TEXTURE12>
<android.opengl.GLES20: int GL_TEXTURE13>
<android.opengl.GLES20: int GL_TEXTURE14>
<android.opengl.GLES20: int GL_TEXTURE15>
<android.opengl.GLES20: int GL_TEXTURE16>
<android.opengl.GLES20: int GL_TEXTURE17>
<android.opengl.GLES20: int GL_TEXTURE18>
<android.opengl.GLES20: int GL_TEXTURE19>
<android.opengl.GLES20: int GL_TEXTURE2>
<android.opengl.GLES20: int GL_TEXTURE20>
<android.opengl.GLES20: int GL_TEXTURE21>
<android.opengl.GLES20: int GL_TEXTURE22>
<android.opengl.GLES20: int GL_TEXTURE23>
<android.opengl.GLES20: int GL_TEXTURE24>
<android.opengl.GLES20: int GL_TEXTURE25>
<android.opengl.GLES20: int GL_TEXTURE26>
<android.opengl.GLES20: int GL_TEXTURE27>
<android.opengl.GLES20: int GL_TEXTURE28>
<android.opengl.GLES20: int GL_TEXTURE29>
<android.opengl.GLES20: int GL_TEXTURE3>
<android.opengl.GLES20: int GL_TEXTURE30>
<android.opengl.GLES20: int GL_TEXTURE31>
<android.opengl.GLES20: int GL_TEXTURE4>
<android.opengl.GLES20: int GL_TEXTURE5>
<android.opengl.GLES20: int GL_TEXTURE6>
<android.opengl.GLES20: int GL_TEXTURE7>
<android.opengl.GLES20: int GL_TEXTURE8>
<android.opengl.GLES20: int GL_TEXTURE9>
<android.opengl.GLES20: int GL_TEXTURE_2D>
<android.opengl.GLES20: int GL_TEXTURE_BINDING_2D>
<android.opengl.GLES20: int GL_TEXTURE_BINDING_CUBE_MAP>
<android.opengl.GLES20: int GL_TEXTURE_CUBE_MAP>
<android.opengl.GLES20: int GL_TEXTURE_CUBE_MAP_NEGATIVE_X>
<android.opengl.GLES20: int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y>
<android.opengl.GLES20: int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z>
<android.opengl.GLES20: int GL_TEXTURE_CUBE_MAP_POSITIVE_X>
<android.opengl.GLES20: int GL_TEXTURE_CUBE_MAP_POSITIVE_Y>
<android.opengl.GLES20: int GL_TEXTURE_CUBE_MAP_POSITIVE_Z>
<android.opengl.GLES20: int GL_TEXTURE_MAG_FILTER>
<android.opengl.GLES20: int GL_TEXTURE_MIN_FILTER>
<android.opengl.GLES20: int GL_TEXTURE_WRAP_S>
<android.opengl.GLES20: int GL_TEXTURE_WRAP_T>
<android.opengl.GLES20: int GL_TRIANGLES>
<android.opengl.GLES20: int GL_TRIANGLE_FAN>
<android.opengl.GLES20: int GL_TRIANGLE_STRIP>
<android.opengl.GLES20: int GL_TRUE>
<android.opengl.GLES20: int GL_UNPACK_ALIGNMENT>
<android.opengl.GLES20: int GL_UNSIGNED_BYTE>
<android.opengl.GLES20: int GL_UNSIGNED_INT>
<android.opengl.GLES20: int GL_UNSIGNED_SHORT>
<android.opengl.GLES20: int GL_UNSIGNED_SHORT_4_4_4_4>
<android.opengl.GLES20: int GL_UNSIGNED_SHORT_5_5_5_1>
<android.opengl.GLES20: int GL_UNSIGNED_SHORT_5_6_5>
<android.opengl.GLES20: int GL_VALIDATE_STATUS>
<android.opengl.GLES20: int GL_VENDOR>
<android.opengl.GLES20: int GL_VERSION>
<android.opengl.GLES20: int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
<android.opengl.GLES20: int GL_VERTEX_ATTRIB_ARRAY_ENABLED>
<android.opengl.GLES20: int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED>
<android.opengl.GLES20: int GL_VERTEX_ATTRIB_ARRAY_POINTER>
<android.opengl.GLES20: int GL_VERTEX_ATTRIB_ARRAY_SIZE>
<android.opengl.GLES20: int GL_VERTEX_ATTRIB_ARRAY_STRIDE>
<android.opengl.GLES20: int GL_VERTEX_ATTRIB_ARRAY_TYPE>
<android.opengl.GLES20: int GL_VERTEX_SHADER>
<android.opengl.GLES20: int GL_VIEWPORT>
<android.opengl.GLES20: int GL_ZERO>
android.opengl.GLES30
<android.opengl.GLES30: void <init>()>
<android.opengl.GLES30: void glBeginQuery(int,int)>
<android.opengl.GLES30: void glBeginTransformFeedback(int)>
<android.opengl.GLES30: void glBindBufferBase(int,int,int)>
<android.opengl.GLES30: void glBindBufferRange(int,int,int,int,int)>
<android.opengl.GLES30: void glBindSampler(int,int)>
<android.opengl.GLES30: void glBindTransformFeedback(int,int)>
<android.opengl.GLES30: void glBindVertexArray(int)>
<android.opengl.GLES30: void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES30: void glClearBufferfi(int,int,float,int)>
<android.opengl.GLES30: void glClearBufferfv(int,int,float[],int)>
<android.opengl.GLES30: void glClearBufferfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES30: void glClearBufferiv(int,int,int[],int)>
<android.opengl.GLES30: void glClearBufferiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glClearBufferuiv(int,int,int[],int)>
<android.opengl.GLES30: void glClearBufferuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: int glClientWaitSync(long,int,long)>
<android.opengl.GLES30: void glCompressedTexImage3D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES30: void glCompressedTexImage3D(int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES30: void glCompressedTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES30: void glCompressedTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES30: void glCopyBufferSubData(int,int,int,int,int)>
<android.opengl.GLES30: void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES30: void glDeleteQueries(int,int[],int)>
<android.opengl.GLES30: void glDeleteQueries(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glDeleteSamplers(int,int[],int)>
<android.opengl.GLES30: void glDeleteSamplers(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glDeleteSync(long)>
<android.opengl.GLES30: void glDeleteTransformFeedbacks(int,int[],int)>
<android.opengl.GLES30: void glDeleteTransformFeedbacks(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glDeleteVertexArrays(int,int[],int)>
<android.opengl.GLES30: void glDeleteVertexArrays(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glDrawArraysInstanced(int,int,int,int)>
<android.opengl.GLES30: void glDrawBuffers(int,int[],int)>
<android.opengl.GLES30: void glDrawBuffers(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glDrawElementsInstanced(int,int,int,java.nio.Buffer,int)>
<android.opengl.GLES30: void glDrawElementsInstanced(int,int,int,int,int)>
<android.opengl.GLES30: void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES30: void glDrawRangeElements(int,int,int,int,int,int)>
<android.opengl.GLES30: void glEndQuery(int)>
<android.opengl.GLES30: void glEndTransformFeedback()>
<android.opengl.GLES30: long glFenceSync(int,int)>
<android.opengl.GLES30: void glFlushMappedBufferRange(int,int,int)>
<android.opengl.GLES30: void glFramebufferTextureLayer(int,int,int,int,int)>
<android.opengl.GLES30: void glGenQueries(int,int[],int)>
<android.opengl.GLES30: void glGenQueries(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGenSamplers(int,int[],int)>
<android.opengl.GLES30: void glGenSamplers(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGenTransformFeedbacks(int,int[],int)>
<android.opengl.GLES30: void glGenTransformFeedbacks(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGenVertexArrays(int,int[],int)>
<android.opengl.GLES30: void glGenVertexArrays(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetActiveUniformBlockName(int,int,int,int[],int,byte[],int)>
<android.opengl.GLES30: void glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer)>
<android.opengl.GLES30: java.lang.String glGetActiveUniformBlockName(int,int)>
<android.opengl.GLES30: void glGetActiveUniformBlockiv(int,int,int,int[],int)>
<android.opengl.GLES30: void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetActiveUniformsiv(int,int,int[],int,int,int[],int)>
<android.opengl.GLES30: void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetBufferParameteri64v(int,int,long[],int)>
<android.opengl.GLES30: void glGetBufferParameteri64v(int,int,java.nio.LongBuffer)>
<android.opengl.GLES30: java.nio.Buffer glGetBufferPointerv(int,int)>
<android.opengl.GLES30: int glGetFragDataLocation(int,java.lang.String)>
<android.opengl.GLES30: void glGetInteger64i_v(int,int,long[],int)>
<android.opengl.GLES30: void glGetInteger64i_v(int,int,java.nio.LongBuffer)>
<android.opengl.GLES30: void glGetInteger64v(int,long[],int)>
<android.opengl.GLES30: void glGetInteger64v(int,java.nio.LongBuffer)>
<android.opengl.GLES30: void glGetIntegeri_v(int,int,int[],int)>
<android.opengl.GLES30: void glGetIntegeri_v(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetInternalformativ(int,int,int,int,int[],int)>
<android.opengl.GLES30: void glGetInternalformativ(int,int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetProgramBinary(int,int,int[],int,int[],int,java.nio.Buffer)>
<android.opengl.GLES30: void glGetProgramBinary(int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.Buffer)>
<android.opengl.GLES30: void glGetQueryObjectuiv(int,int,int[],int)>
<android.opengl.GLES30: void glGetQueryObjectuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetQueryiv(int,int,int[],int)>
<android.opengl.GLES30: void glGetQueryiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetSamplerParameterfv(int,int,float[],int)>
<android.opengl.GLES30: void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES30: void glGetSamplerParameteriv(int,int,int[],int)>
<android.opengl.GLES30: void glGetSamplerParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: java.lang.String glGetStringi(int,int)>
<android.opengl.GLES30: void glGetSynciv(long,int,int,int[],int,int[],int)>
<android.opengl.GLES30: void glGetSynciv(long,int,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetTransformFeedbackVarying(int,int,int,int[],int,int[],int,int[],int,byte[],int)>
<android.opengl.GLES30: void glGetTransformFeedbackVarying(int,int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,byte)>
<android.opengl.GLES30: void glGetTransformFeedbackVarying(int,int,int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.ByteBuffer)>
<android.opengl.GLES30: java.lang.String glGetTransformFeedbackVarying(int,int,int[],int,int[],int)>
<android.opengl.GLES30: java.lang.String glGetTransformFeedbackVarying(int,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES30: int glGetUniformBlockIndex(int,java.lang.String)>
<android.opengl.GLES30: void glGetUniformIndices(int,java.lang.String[],int[],int)>
<android.opengl.GLES30: void glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetUniformuiv(int,int,int[],int)>
<android.opengl.GLES30: void glGetUniformuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetVertexAttribIiv(int,int,int[],int)>
<android.opengl.GLES30: void glGetVertexAttribIiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glGetVertexAttribIuiv(int,int,int[],int)>
<android.opengl.GLES30: void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glInvalidateFramebuffer(int,int,int[],int)>
<android.opengl.GLES30: void glInvalidateFramebuffer(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glInvalidateSubFramebuffer(int,int,int[],int,int,int,int,int)>
<android.opengl.GLES30: void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int)>
<android.opengl.GLES30: boolean glIsQuery(int)>
<android.opengl.GLES30: boolean glIsSampler(int)>
<android.opengl.GLES30: boolean glIsSync(long)>
<android.opengl.GLES30: boolean glIsTransformFeedback(int)>
<android.opengl.GLES30: boolean glIsVertexArray(int)>
<android.opengl.GLES30: java.nio.Buffer glMapBufferRange(int,int,int,int)>
<android.opengl.GLES30: void glPauseTransformFeedback()>
<android.opengl.GLES30: void glProgramBinary(int,int,java.nio.Buffer,int)>
<android.opengl.GLES30: void glProgramParameteri(int,int,int)>
<android.opengl.GLES30: void glReadBuffer(int)>
<android.opengl.GLES30: void glReadPixels(int,int,int,int,int,int,int)>
<android.opengl.GLES30: void glRenderbufferStorageMultisample(int,int,int,int,int)>
<android.opengl.GLES30: void glResumeTransformFeedback()>
<android.opengl.GLES30: void glSamplerParameterf(int,int,float)>
<android.opengl.GLES30: void glSamplerParameterfv(int,int,float[],int)>
<android.opengl.GLES30: void glSamplerParameterfv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES30: void glSamplerParameteri(int,int,int)>
<android.opengl.GLES30: void glSamplerParameteriv(int,int,int[],int)>
<android.opengl.GLES30: void glSamplerParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES30: void glTexImage3D(int,int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES30: void glTexStorage2D(int,int,int,int,int)>
<android.opengl.GLES30: void glTexStorage3D(int,int,int,int,int,int)>
<android.opengl.GLES30: void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES30: void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES30: void glTransformFeedbackVaryings(int,java.lang.String[],int)>
<android.opengl.GLES30: void glUniform1ui(int,int)>
<android.opengl.GLES30: void glUniform1uiv(int,int,int[],int)>
<android.opengl.GLES30: void glUniform1uiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glUniform2ui(int,int,int)>
<android.opengl.GLES30: void glUniform2uiv(int,int,int[],int)>
<android.opengl.GLES30: void glUniform2uiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glUniform3ui(int,int,int,int)>
<android.opengl.GLES30: void glUniform3uiv(int,int,int[],int)>
<android.opengl.GLES30: void glUniform3uiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glUniform4ui(int,int,int,int,int)>
<android.opengl.GLES30: void glUniform4uiv(int,int,int[],int)>
<android.opengl.GLES30: void glUniform4uiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glUniformBlockBinding(int,int,int)>
<android.opengl.GLES30: void glUniformMatrix2x3fv(int,int,boolean,float[],int)>
<android.opengl.GLES30: void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES30: void glUniformMatrix2x4fv(int,int,boolean,float[],int)>
<android.opengl.GLES30: void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES30: void glUniformMatrix3x2fv(int,int,boolean,float[],int)>
<android.opengl.GLES30: void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES30: void glUniformMatrix3x4fv(int,int,boolean,float[],int)>
<android.opengl.GLES30: void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES30: void glUniformMatrix4x2fv(int,int,boolean,float[],int)>
<android.opengl.GLES30: void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES30: void glUniformMatrix4x3fv(int,int,boolean,float[],int)>
<android.opengl.GLES30: void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES30: boolean glUnmapBuffer(int)>
<android.opengl.GLES30: void glVertexAttribDivisor(int,int)>
<android.opengl.GLES30: void glVertexAttribI4i(int,int,int,int,int)>
<android.opengl.GLES30: void glVertexAttribI4iv(int,int[],int)>
<android.opengl.GLES30: void glVertexAttribI4iv(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glVertexAttribI4ui(int,int,int,int,int)>
<android.opengl.GLES30: void glVertexAttribI4uiv(int,int[],int)>
<android.opengl.GLES30: void glVertexAttribI4uiv(int,java.nio.IntBuffer)>
<android.opengl.GLES30: void glVertexAttribIPointer(int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES30: void glVertexAttribIPointer(int,int,int,int,int)>
<android.opengl.GLES30: void glWaitSync(long,int,long)>
<android.opengl.GLES30: int GL_ACTIVE_UNIFORM_BLOCKS>
<android.opengl.GLES30: int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH>
<android.opengl.GLES30: int GL_ALREADY_SIGNALED>
<android.opengl.GLES30: int GL_ANY_SAMPLES_PASSED>
<android.opengl.GLES30: int GL_ANY_SAMPLES_PASSED_CONSERVATIVE>
<android.opengl.GLES30: int GL_BLUE>
<android.opengl.GLES30: int GL_BUFFER_ACCESS_FLAGS>
<android.opengl.GLES30: int GL_BUFFER_MAPPED>
<android.opengl.GLES30: int GL_BUFFER_MAP_LENGTH>
<android.opengl.GLES30: int GL_BUFFER_MAP_OFFSET>
<android.opengl.GLES30: int GL_BUFFER_MAP_POINTER>
<android.opengl.GLES30: int GL_COLOR>
<android.opengl.GLES30: int GL_COLOR_ATTACHMENT1>
<android.opengl.GLES30: int GL_COLOR_ATTACHMENT10>
<android.opengl.GLES30: int GL_COLOR_ATTACHMENT11>
<android.opengl.GLES30: int GL_COLOR_ATTACHMENT12>
<android.opengl.GLES30: int GL_COLOR_ATTACHMENT13>
<android.opengl.GLES30: int GL_COLOR_ATTACHMENT14>
<android.opengl.GLES30: int GL_COLOR_ATTACHMENT15>
<android.opengl.GLES30: int GL_COLOR_ATTACHMENT2>
<android.opengl.GLES30: int GL_COLOR_ATTACHMENT3>
<android.opengl.GLES30: int GL_COLOR_ATTACHMENT4>
<android.opengl.GLES30: int GL_COLOR_ATTACHMENT5>
<android.opengl.GLES30: int GL_COLOR_ATTACHMENT6>
<android.opengl.GLES30: int GL_COLOR_ATTACHMENT7>
<android.opengl.GLES30: int GL_COLOR_ATTACHMENT8>
<android.opengl.GLES30: int GL_COLOR_ATTACHMENT9>
<android.opengl.GLES30: int GL_COMPARE_REF_TO_TEXTURE>
<android.opengl.GLES30: int GL_COMPRESSED_R11_EAC>
<android.opengl.GLES30: int GL_COMPRESSED_RG11_EAC>
<android.opengl.GLES30: int GL_COMPRESSED_RGB8_ETC2>
<android.opengl.GLES30: int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2>
<android.opengl.GLES30: int GL_COMPRESSED_RGBA8_ETC2_EAC>
<android.opengl.GLES30: int GL_COMPRESSED_SIGNED_R11_EAC>
<android.opengl.GLES30: int GL_COMPRESSED_SIGNED_RG11_EAC>
<android.opengl.GLES30: int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC>
<android.opengl.GLES30: int GL_COMPRESSED_SRGB8_ETC2>
<android.opengl.GLES30: int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2>
<android.opengl.GLES30: int GL_CONDITION_SATISFIED>
<android.opengl.GLES30: int GL_COPY_READ_BUFFER>
<android.opengl.GLES30: int GL_COPY_READ_BUFFER_BINDING>
<android.opengl.GLES30: int GL_COPY_WRITE_BUFFER>
<android.opengl.GLES30: int GL_COPY_WRITE_BUFFER_BINDING>
<android.opengl.GLES30: int GL_CURRENT_QUERY>
<android.opengl.GLES30: int GL_DEPTH>
<android.opengl.GLES30: int GL_DEPTH24_STENCIL8>
<android.opengl.GLES30: int GL_DEPTH32F_STENCIL8>
<android.opengl.GLES30: int GL_DEPTH_COMPONENT24>
<android.opengl.GLES30: int GL_DEPTH_COMPONENT32F>
<android.opengl.GLES30: int GL_DEPTH_STENCIL>
<android.opengl.GLES30: int GL_DEPTH_STENCIL_ATTACHMENT>
<android.opengl.GLES30: int GL_DRAW_BUFFER0>
<android.opengl.GLES30: int GL_DRAW_BUFFER1>
<android.opengl.GLES30: int GL_DRAW_BUFFER10>
<android.opengl.GLES30: int GL_DRAW_BUFFER11>
<android.opengl.GLES30: int GL_DRAW_BUFFER12>
<android.opengl.GLES30: int GL_DRAW_BUFFER13>
<android.opengl.GLES30: int GL_DRAW_BUFFER14>
<android.opengl.GLES30: int GL_DRAW_BUFFER15>
<android.opengl.GLES30: int GL_DRAW_BUFFER2>
<android.opengl.GLES30: int GL_DRAW_BUFFER3>
<android.opengl.GLES30: int GL_DRAW_BUFFER4>
<android.opengl.GLES30: int GL_DRAW_BUFFER5>
<android.opengl.GLES30: int GL_DRAW_BUFFER6>
<android.opengl.GLES30: int GL_DRAW_BUFFER7>
<android.opengl.GLES30: int GL_DRAW_BUFFER8>
<android.opengl.GLES30: int GL_DRAW_BUFFER9>
<android.opengl.GLES30: int GL_DRAW_FRAMEBUFFER>
<android.opengl.GLES30: int GL_DRAW_FRAMEBUFFER_BINDING>
<android.opengl.GLES30: int GL_DYNAMIC_COPY>
<android.opengl.GLES30: int GL_DYNAMIC_READ>
<android.opengl.GLES30: int GL_FLOAT_32_UNSIGNED_INT_24_8_REV>
<android.opengl.GLES30: int GL_FLOAT_MAT2x3>
<android.opengl.GLES30: int GL_FLOAT_MAT2x4>
<android.opengl.GLES30: int GL_FLOAT_MAT3x2>
<android.opengl.GLES30: int GL_FLOAT_MAT3x4>
<android.opengl.GLES30: int GL_FLOAT_MAT4x2>
<android.opengl.GLES30: int GL_FLOAT_MAT4x3>
<android.opengl.GLES30: int GL_FRAGMENT_SHADER_DERIVATIVE_HINT>
<android.opengl.GLES30: int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE>
<android.opengl.GLES30: int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE>
<android.opengl.GLES30: int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING>
<android.opengl.GLES30: int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE>
<android.opengl.GLES30: int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE>
<android.opengl.GLES30: int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE>
<android.opengl.GLES30: int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE>
<android.opengl.GLES30: int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE>
<android.opengl.GLES30: int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER>
<android.opengl.GLES30: int GL_FRAMEBUFFER_DEFAULT>
<android.opengl.GLES30: int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE>
<android.opengl.GLES30: int GL_FRAMEBUFFER_UNDEFINED>
<android.opengl.GLES30: int GL_GREEN>
<android.opengl.GLES30: int GL_HALF_FLOAT>
<android.opengl.GLES30: int GL_INTERLEAVED_ATTRIBS>
<android.opengl.GLES30: int GL_INT_2_10_10_10_REV>
<android.opengl.GLES30: int GL_INT_SAMPLER_2D>
<android.opengl.GLES30: int GL_INT_SAMPLER_2D_ARRAY>
<android.opengl.GLES30: int GL_INT_SAMPLER_3D>
<android.opengl.GLES30: int GL_INT_SAMPLER_CUBE>
<android.opengl.GLES30: int GL_INVALID_INDEX>
<android.opengl.GLES30: int GL_MAJOR_VERSION>
<android.opengl.GLES30: int GL_MAP_FLUSH_EXPLICIT_BIT>
<android.opengl.GLES30: int GL_MAP_INVALIDATE_BUFFER_BIT>
<android.opengl.GLES30: int GL_MAP_INVALIDATE_RANGE_BIT>
<android.opengl.GLES30: int GL_MAP_READ_BIT>
<android.opengl.GLES30: int GL_MAP_UNSYNCHRONIZED_BIT>
<android.opengl.GLES30: int GL_MAP_WRITE_BIT>
<android.opengl.GLES30: int GL_MAX>
<android.opengl.GLES30: int GL_MAX_3D_TEXTURE_SIZE>
<android.opengl.GLES30: int GL_MAX_ARRAY_TEXTURE_LAYERS>
<android.opengl.GLES30: int GL_MAX_COLOR_ATTACHMENTS>
<android.opengl.GLES30: int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS>
<android.opengl.GLES30: int GL_MAX_COMBINED_UNIFORM_BLOCKS>
<android.opengl.GLES30: int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS>
<android.opengl.GLES30: int GL_MAX_DRAW_BUFFERS>
<android.opengl.GLES30: int GL_MAX_ELEMENTS_INDICES>
<android.opengl.GLES30: int GL_MAX_ELEMENTS_VERTICES>
<android.opengl.GLES30: int GL_MAX_ELEMENT_INDEX>
<android.opengl.GLES30: int GL_MAX_FRAGMENT_INPUT_COMPONENTS>
<android.opengl.GLES30: int GL_MAX_FRAGMENT_UNIFORM_BLOCKS>
<android.opengl.GLES30: int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS>
<android.opengl.GLES30: int GL_MAX_PROGRAM_TEXEL_OFFSET>
<android.opengl.GLES30: int GL_MAX_SAMPLES>
<android.opengl.GLES30: int GL_MAX_SERVER_WAIT_TIMEOUT>
<android.opengl.GLES30: int GL_MAX_TEXTURE_LOD_BIAS>
<android.opengl.GLES30: int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS>
<android.opengl.GLES30: int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS>
<android.opengl.GLES30: int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS>
<android.opengl.GLES30: int GL_MAX_UNIFORM_BLOCK_SIZE>
<android.opengl.GLES30: int GL_MAX_UNIFORM_BUFFER_BINDINGS>
<android.opengl.GLES30: int GL_MAX_VARYING_COMPONENTS>
<android.opengl.GLES30: int GL_MAX_VERTEX_OUTPUT_COMPONENTS>
<android.opengl.GLES30: int GL_MAX_VERTEX_UNIFORM_BLOCKS>
<android.opengl.GLES30: int GL_MAX_VERTEX_UNIFORM_COMPONENTS>
<android.opengl.GLES30: int GL_MIN>
<android.opengl.GLES30: int GL_MINOR_VERSION>
<android.opengl.GLES30: int GL_MIN_PROGRAM_TEXEL_OFFSET>
<android.opengl.GLES30: int GL_NUM_EXTENSIONS>
<android.opengl.GLES30: int GL_NUM_PROGRAM_BINARY_FORMATS>
<android.opengl.GLES30: int GL_NUM_SAMPLE_COUNTS>
<android.opengl.GLES30: int GL_OBJECT_TYPE>
<android.opengl.GLES30: int GL_PACK_ROW_LENGTH>
<android.opengl.GLES30: int GL_PACK_SKIP_PIXELS>
<android.opengl.GLES30: int GL_PACK_SKIP_ROWS>
<android.opengl.GLES30: int GL_PIXEL_PACK_BUFFER>
<android.opengl.GLES30: int GL_PIXEL_PACK_BUFFER_BINDING>
<android.opengl.GLES30: int GL_PIXEL_UNPACK_BUFFER>
<android.opengl.GLES30: int GL_PIXEL_UNPACK_BUFFER_BINDING>
<android.opengl.GLES30: int GL_PRIMITIVE_RESTART_FIXED_INDEX>
<android.opengl.GLES30: int GL_PROGRAM_BINARY_FORMATS>
<android.opengl.GLES30: int GL_PROGRAM_BINARY_LENGTH>
<android.opengl.GLES30: int GL_PROGRAM_BINARY_RETRIEVABLE_HINT>
<android.opengl.GLES30: int GL_QUERY_RESULT>
<android.opengl.GLES30: int GL_QUERY_RESULT_AVAILABLE>
<android.opengl.GLES30: int GL_R11F_G11F_B10F>
<android.opengl.GLES30: int GL_R16F>
<android.opengl.GLES30: int GL_R16I>
<android.opengl.GLES30: int GL_R16UI>
<android.opengl.GLES30: int GL_R32F>
<android.opengl.GLES30: int GL_R32I>
<android.opengl.GLES30: int GL_R32UI>
<android.opengl.GLES30: int GL_R8>
<android.opengl.GLES30: int GL_R8I>
<android.opengl.GLES30: int GL_R8UI>
<android.opengl.GLES30: int GL_R8_SNORM>
<android.opengl.GLES30: int GL_RASTERIZER_DISCARD>
<android.opengl.GLES30: int GL_READ_BUFFER>
<android.opengl.GLES30: int GL_READ_FRAMEBUFFER>
<android.opengl.GLES30: int GL_READ_FRAMEBUFFER_BINDING>
<android.opengl.GLES30: int GL_RED>
<android.opengl.GLES30: int GL_RED_INTEGER>
<android.opengl.GLES30: int GL_RENDERBUFFER_SAMPLES>
<android.opengl.GLES30: int GL_RG>
<android.opengl.GLES30: int GL_RG16F>
<android.opengl.GLES30: int GL_RG16I>
<android.opengl.GLES30: int GL_RG16UI>
<android.opengl.GLES30: int GL_RG32F>
<android.opengl.GLES30: int GL_RG32I>
<android.opengl.GLES30: int GL_RG32UI>
<android.opengl.GLES30: int GL_RG8>
<android.opengl.GLES30: int GL_RG8I>
<android.opengl.GLES30: int GL_RG8UI>
<android.opengl.GLES30: int GL_RG8_SNORM>
<android.opengl.GLES30: int GL_RGB10_A2>
<android.opengl.GLES30: int GL_RGB10_A2UI>
<android.opengl.GLES30: int GL_RGB16F>
<android.opengl.GLES30: int GL_RGB16I>
<android.opengl.GLES30: int GL_RGB16UI>
<android.opengl.GLES30: int GL_RGB32F>
<android.opengl.GLES30: int GL_RGB32I>
<android.opengl.GLES30: int GL_RGB32UI>
<android.opengl.GLES30: int GL_RGB8>
<android.opengl.GLES30: int GL_RGB8I>
<android.opengl.GLES30: int GL_RGB8UI>
<android.opengl.GLES30: int GL_RGB8_SNORM>
<android.opengl.GLES30: int GL_RGB9_E5>
<android.opengl.GLES30: int GL_RGBA16F>
<android.opengl.GLES30: int GL_RGBA16I>
<android.opengl.GLES30: int GL_RGBA16UI>
<android.opengl.GLES30: int GL_RGBA32F>
<android.opengl.GLES30: int GL_RGBA32I>
<android.opengl.GLES30: int GL_RGBA32UI>
<android.opengl.GLES30: int GL_RGBA8>
<android.opengl.GLES30: int GL_RGBA8I>
<android.opengl.GLES30: int GL_RGBA8UI>
<android.opengl.GLES30: int GL_RGBA8_SNORM>
<android.opengl.GLES30: int GL_RGBA_INTEGER>
<android.opengl.GLES30: int GL_RGB_INTEGER>
<android.opengl.GLES30: int GL_RG_INTEGER>
<android.opengl.GLES30: int GL_SAMPLER_2D_ARRAY>
<android.opengl.GLES30: int GL_SAMPLER_2D_ARRAY_SHADOW>
<android.opengl.GLES30: int GL_SAMPLER_2D_SHADOW>
<android.opengl.GLES30: int GL_SAMPLER_3D>
<android.opengl.GLES30: int GL_SAMPLER_BINDING>
<android.opengl.GLES30: int GL_SAMPLER_CUBE_SHADOW>
<android.opengl.GLES30: int GL_SEPARATE_ATTRIBS>
<android.opengl.GLES30: int GL_SIGNALED>
<android.opengl.GLES30: int GL_SIGNED_NORMALIZED>
<android.opengl.GLES30: int GL_SRGB>
<android.opengl.GLES30: int GL_SRGB8>
<android.opengl.GLES30: int GL_SRGB8_ALPHA8>
<android.opengl.GLES30: int GL_STATIC_COPY>
<android.opengl.GLES30: int GL_STATIC_READ>
<android.opengl.GLES30: int GL_STENCIL>
<android.opengl.GLES30: int GL_STREAM_COPY>
<android.opengl.GLES30: int GL_STREAM_READ>
<android.opengl.GLES30: int GL_SYNC_CONDITION>
<android.opengl.GLES30: int GL_SYNC_FENCE>
<android.opengl.GLES30: int GL_SYNC_FLAGS>
<android.opengl.GLES30: int GL_SYNC_FLUSH_COMMANDS_BIT>
<android.opengl.GLES30: int GL_SYNC_GPU_COMMANDS_COMPLETE>
<android.opengl.GLES30: int GL_SYNC_STATUS>
<android.opengl.GLES30: int GL_TEXTURE_2D_ARRAY>
<android.opengl.GLES30: int GL_TEXTURE_3D>
<android.opengl.GLES30: int GL_TEXTURE_BASE_LEVEL>
<android.opengl.GLES30: int GL_TEXTURE_BINDING_2D_ARRAY>
<android.opengl.GLES30: int GL_TEXTURE_BINDING_3D>
<android.opengl.GLES30: int GL_TEXTURE_COMPARE_FUNC>
<android.opengl.GLES30: int GL_TEXTURE_COMPARE_MODE>
<android.opengl.GLES30: int GL_TEXTURE_IMMUTABLE_FORMAT>
<android.opengl.GLES30: int GL_TEXTURE_IMMUTABLE_LEVELS>
<android.opengl.GLES30: int GL_TEXTURE_MAX_LEVEL>
<android.opengl.GLES30: int GL_TEXTURE_MAX_LOD>
<android.opengl.GLES30: int GL_TEXTURE_MIN_LOD>
<android.opengl.GLES30: int GL_TEXTURE_SWIZZLE_A>
<android.opengl.GLES30: int GL_TEXTURE_SWIZZLE_B>
<android.opengl.GLES30: int GL_TEXTURE_SWIZZLE_G>
<android.opengl.GLES30: int GL_TEXTURE_SWIZZLE_R>
<android.opengl.GLES30: int GL_TEXTURE_WRAP_R>
<android.opengl.GLES30: int GL_TIMEOUT_EXPIRED>
<android.opengl.GLES30: long GL_TIMEOUT_IGNORED>
<android.opengl.GLES30: int GL_TRANSFORM_FEEDBACK>
<android.opengl.GLES30: int GL_TRANSFORM_FEEDBACK_ACTIVE>
<android.opengl.GLES30: int GL_TRANSFORM_FEEDBACK_BINDING>
<android.opengl.GLES30: int GL_TRANSFORM_FEEDBACK_BUFFER>
<android.opengl.GLES30: int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING>
<android.opengl.GLES30: int GL_TRANSFORM_FEEDBACK_BUFFER_MODE>
<android.opengl.GLES30: int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE>
<android.opengl.GLES30: int GL_TRANSFORM_FEEDBACK_BUFFER_START>
<android.opengl.GLES30: int GL_TRANSFORM_FEEDBACK_PAUSED>
<android.opengl.GLES30: int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN>
<android.opengl.GLES30: int GL_TRANSFORM_FEEDBACK_VARYINGS>
<android.opengl.GLES30: int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH>
<android.opengl.GLES30: int GL_UNIFORM_ARRAY_STRIDE>
<android.opengl.GLES30: int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS>
<android.opengl.GLES30: int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES>
<android.opengl.GLES30: int GL_UNIFORM_BLOCK_BINDING>
<android.opengl.GLES30: int GL_UNIFORM_BLOCK_DATA_SIZE>
<android.opengl.GLES30: int GL_UNIFORM_BLOCK_INDEX>
<android.opengl.GLES30: int GL_UNIFORM_BLOCK_NAME_LENGTH>
<android.opengl.GLES30: int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER>
<android.opengl.GLES30: int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER>
<android.opengl.GLES30: int GL_UNIFORM_BUFFER>
<android.opengl.GLES30: int GL_UNIFORM_BUFFER_BINDING>
<android.opengl.GLES30: int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT>
<android.opengl.GLES30: int GL_UNIFORM_BUFFER_SIZE>
<android.opengl.GLES30: int GL_UNIFORM_BUFFER_START>
<android.opengl.GLES30: int GL_UNIFORM_IS_ROW_MAJOR>
<android.opengl.GLES30: int GL_UNIFORM_MATRIX_STRIDE>
<android.opengl.GLES30: int GL_UNIFORM_NAME_LENGTH>
<android.opengl.GLES30: int GL_UNIFORM_OFFSET>
<android.opengl.GLES30: int GL_UNIFORM_SIZE>
<android.opengl.GLES30: int GL_UNIFORM_TYPE>
<android.opengl.GLES30: int GL_UNPACK_IMAGE_HEIGHT>
<android.opengl.GLES30: int GL_UNPACK_ROW_LENGTH>
<android.opengl.GLES30: int GL_UNPACK_SKIP_IMAGES>
<android.opengl.GLES30: int GL_UNPACK_SKIP_PIXELS>
<android.opengl.GLES30: int GL_UNPACK_SKIP_ROWS>
<android.opengl.GLES30: int GL_UNSIGNALED>
<android.opengl.GLES30: int GL_UNSIGNED_INT_10F_11F_11F_REV>
<android.opengl.GLES30: int GL_UNSIGNED_INT_24_8>
<android.opengl.GLES30: int GL_UNSIGNED_INT_2_10_10_10_REV>
<android.opengl.GLES30: int GL_UNSIGNED_INT_5_9_9_9_REV>
<android.opengl.GLES30: int GL_UNSIGNED_INT_SAMPLER_2D>
<android.opengl.GLES30: int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY>
<android.opengl.GLES30: int GL_UNSIGNED_INT_SAMPLER_3D>
<android.opengl.GLES30: int GL_UNSIGNED_INT_SAMPLER_CUBE>
<android.opengl.GLES30: int GL_UNSIGNED_INT_VEC2>
<android.opengl.GLES30: int GL_UNSIGNED_INT_VEC3>
<android.opengl.GLES30: int GL_UNSIGNED_INT_VEC4>
<android.opengl.GLES30: int GL_UNSIGNED_NORMALIZED>
<android.opengl.GLES30: int GL_VERTEX_ARRAY_BINDING>
<android.opengl.GLES30: int GL_VERTEX_ATTRIB_ARRAY_DIVISOR>
<android.opengl.GLES30: int GL_VERTEX_ATTRIB_ARRAY_INTEGER>
<android.opengl.GLES30: int GL_WAIT_FAILED>
android.opengl.GLES31
<android.opengl.GLES31: void glActiveShaderProgram(int,int)>
<android.opengl.GLES31: void glBindImageTexture(int,int,int,boolean,int,int,int)>
<android.opengl.GLES31: void glBindProgramPipeline(int)>
<android.opengl.GLES31: void glBindVertexBuffer(int,int,long,int)>
<android.opengl.GLES31: int glCreateShaderProgramv(int,java.lang.String[])>
<android.opengl.GLES31: void glDeleteProgramPipelines(int,int[],int)>
<android.opengl.GLES31: void glDeleteProgramPipelines(int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glDispatchCompute(int,int,int)>
<android.opengl.GLES31: void glDispatchComputeIndirect(long)>
<android.opengl.GLES31: void glDrawArraysIndirect(int,long)>
<android.opengl.GLES31: void glDrawElementsIndirect(int,int,long)>
<android.opengl.GLES31: void glFramebufferParameteri(int,int,int)>
<android.opengl.GLES31: void glGenProgramPipelines(int,int[],int)>
<android.opengl.GLES31: void glGenProgramPipelines(int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glGetBooleani_v(int,int,boolean[],int)>
<android.opengl.GLES31: void glGetBooleani_v(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glGetFramebufferParameteriv(int,int,int[],int)>
<android.opengl.GLES31: void glGetFramebufferParameteriv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glGetMultisamplefv(int,int,float[],int)>
<android.opengl.GLES31: void glGetMultisamplefv(int,int,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glGetProgramInterfaceiv(int,int,int,int[],int)>
<android.opengl.GLES31: void glGetProgramInterfaceiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: java.lang.String glGetProgramPipelineInfoLog(int)>
<android.opengl.GLES31: void glGetProgramPipelineiv(int,int,int[],int)>
<android.opengl.GLES31: void glGetProgramPipelineiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: int glGetProgramResourceIndex(int,int,java.lang.String)>
<android.opengl.GLES31: int glGetProgramResourceLocation(int,int,java.lang.String)>
<android.opengl.GLES31: java.lang.String glGetProgramResourceName(int,int,int)>
<android.opengl.GLES31: void glGetProgramResourceiv(int,int,int,int,int[],int,int,int[],int,int[],int)>
<android.opengl.GLES31: void glGetProgramResourceiv(int,int,int,int,java.nio.IntBuffer,int,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES31: void glGetTexLevelParameterfv(int,int,int,float[],int)>
<android.opengl.GLES31: void glGetTexLevelParameterfv(int,int,int,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glGetTexLevelParameteriv(int,int,int,int[],int)>
<android.opengl.GLES31: void glGetTexLevelParameteriv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: boolean glIsProgramPipeline(int)>
<android.opengl.GLES31: void glMemoryBarrier(int)>
<android.opengl.GLES31: void glMemoryBarrierByRegion(int)>
<android.opengl.GLES31: void glProgramUniform1f(int,int,float)>
<android.opengl.GLES31: void glProgramUniform1fv(int,int,int,float[],int)>
<android.opengl.GLES31: void glProgramUniform1fv(int,int,int,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniform1i(int,int,int)>
<android.opengl.GLES31: void glProgramUniform1iv(int,int,int,int[],int)>
<android.opengl.GLES31: void glProgramUniform1iv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniform1ui(int,int,int)>
<android.opengl.GLES31: void glProgramUniform1uiv(int,int,int,int[],int)>
<android.opengl.GLES31: void glProgramUniform1uiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniform2f(int,int,float,float)>
<android.opengl.GLES31: void glProgramUniform2fv(int,int,int,float[],int)>
<android.opengl.GLES31: void glProgramUniform2fv(int,int,int,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniform2i(int,int,int,int)>
<android.opengl.GLES31: void glProgramUniform2iv(int,int,int,int[],int)>
<android.opengl.GLES31: void glProgramUniform2iv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniform2ui(int,int,int,int)>
<android.opengl.GLES31: void glProgramUniform2uiv(int,int,int,int[],int)>
<android.opengl.GLES31: void glProgramUniform2uiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniform3f(int,int,float,float,float)>
<android.opengl.GLES31: void glProgramUniform3fv(int,int,int,float[],int)>
<android.opengl.GLES31: void glProgramUniform3fv(int,int,int,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniform3i(int,int,int,int,int)>
<android.opengl.GLES31: void glProgramUniform3iv(int,int,int,int[],int)>
<android.opengl.GLES31: void glProgramUniform3iv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniform3ui(int,int,int,int,int)>
<android.opengl.GLES31: void glProgramUniform3uiv(int,int,int,int[],int)>
<android.opengl.GLES31: void glProgramUniform3uiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniform4f(int,int,float,float,float,float)>
<android.opengl.GLES31: void glProgramUniform4fv(int,int,int,float[],int)>
<android.opengl.GLES31: void glProgramUniform4fv(int,int,int,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniform4i(int,int,int,int,int,int)>
<android.opengl.GLES31: void glProgramUniform4iv(int,int,int,int[],int)>
<android.opengl.GLES31: void glProgramUniform4iv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniform4ui(int,int,int,int,int,int)>
<android.opengl.GLES31: void glProgramUniform4uiv(int,int,int,int[],int)>
<android.opengl.GLES31: void glProgramUniform4uiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix2fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glProgramUniformMatrix2fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix2x3fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glProgramUniformMatrix2x3fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix2x4fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glProgramUniformMatrix2x4fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix3fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glProgramUniformMatrix3fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix3x2fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glProgramUniformMatrix3x2fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix3x4fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glProgramUniformMatrix3x4fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix4fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glProgramUniformMatrix4fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix4x2fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glProgramUniformMatrix4x2fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glProgramUniformMatrix4x3fv(int,int,int,boolean,float[],int)>
<android.opengl.GLES31: void glProgramUniformMatrix4x3fv(int,int,int,boolean,java.nio.FloatBuffer)>
<android.opengl.GLES31: void glSampleMaski(int,int)>
<android.opengl.GLES31: void glTexStorage2DMultisample(int,int,int,int,int,boolean)>
<android.opengl.GLES31: void glUseProgramStages(int,int,int)>
<android.opengl.GLES31: void glValidateProgramPipeline(int)>
<android.opengl.GLES31: void glVertexAttribBinding(int,int)>
<android.opengl.GLES31: void glVertexAttribFormat(int,int,int,boolean,int)>
<android.opengl.GLES31: void glVertexAttribIFormat(int,int,int,int)>
<android.opengl.GLES31: void glVertexBindingDivisor(int,int)>
<android.opengl.GLES31: int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS>
<android.opengl.GLES31: int GL_ACTIVE_PROGRAM>
<android.opengl.GLES31: int GL_ACTIVE_RESOURCES>
<android.opengl.GLES31: int GL_ACTIVE_VARIABLES>
<android.opengl.GLES31: int GL_ALL_BARRIER_BITS>
<android.opengl.GLES31: int GL_ALL_SHADER_BITS>
<android.opengl.GLES31: int GL_ARRAY_SIZE>
<android.opengl.GLES31: int GL_ARRAY_STRIDE>
<android.opengl.GLES31: int GL_ATOMIC_COUNTER_BARRIER_BIT>
<android.opengl.GLES31: int GL_ATOMIC_COUNTER_BUFFER>
<android.opengl.GLES31: int GL_ATOMIC_COUNTER_BUFFER_BINDING>
<android.opengl.GLES31: int GL_ATOMIC_COUNTER_BUFFER_INDEX>
<android.opengl.GLES31: int GL_ATOMIC_COUNTER_BUFFER_SIZE>
<android.opengl.GLES31: int GL_ATOMIC_COUNTER_BUFFER_START>
<android.opengl.GLES31: int GL_BLOCK_INDEX>
<android.opengl.GLES31: int GL_BUFFER_BINDING>
<android.opengl.GLES31: int GL_BUFFER_DATA_SIZE>
<android.opengl.GLES31: int GL_BUFFER_UPDATE_BARRIER_BIT>
<android.opengl.GLES31: int GL_BUFFER_VARIABLE>
<android.opengl.GLES31: int GL_COMMAND_BARRIER_BIT>
<android.opengl.GLES31: int GL_COMPUTE_SHADER>
<android.opengl.GLES31: int GL_COMPUTE_SHADER_BIT>
<android.opengl.GLES31: int GL_COMPUTE_WORK_GROUP_SIZE>
<android.opengl.GLES31: int GL_DEPTH_STENCIL_TEXTURE_MODE>
<android.opengl.GLES31: int GL_DISPATCH_INDIRECT_BUFFER>
<android.opengl.GLES31: int GL_DISPATCH_INDIRECT_BUFFER_BINDING>
<android.opengl.GLES31: int GL_DRAW_INDIRECT_BUFFER>
<android.opengl.GLES31: int GL_DRAW_INDIRECT_BUFFER_BINDING>
<android.opengl.GLES31: int GL_ELEMENT_ARRAY_BARRIER_BIT>
<android.opengl.GLES31: int GL_FRAGMENT_SHADER_BIT>
<android.opengl.GLES31: int GL_FRAMEBUFFER_BARRIER_BIT>
<android.opengl.GLES31: int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS>
<android.opengl.GLES31: int GL_FRAMEBUFFER_DEFAULT_HEIGHT>
<android.opengl.GLES31: int GL_FRAMEBUFFER_DEFAULT_SAMPLES>
<android.opengl.GLES31: int GL_FRAMEBUFFER_DEFAULT_WIDTH>
<android.opengl.GLES31: int GL_IMAGE_2D>
<android.opengl.GLES31: int GL_IMAGE_2D_ARRAY>
<android.opengl.GLES31: int GL_IMAGE_3D>
<android.opengl.GLES31: int GL_IMAGE_BINDING_ACCESS>
<android.opengl.GLES31: int GL_IMAGE_BINDING_FORMAT>
<android.opengl.GLES31: int GL_IMAGE_BINDING_LAYER>
<android.opengl.GLES31: int GL_IMAGE_BINDING_LAYERED>
<android.opengl.GLES31: int GL_IMAGE_BINDING_LEVEL>
<android.opengl.GLES31: int GL_IMAGE_BINDING_NAME>
<android.opengl.GLES31: int GL_IMAGE_CUBE>
<android.opengl.GLES31: int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS>
<android.opengl.GLES31: int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE>
<android.opengl.GLES31: int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE>
<android.opengl.GLES31: int GL_INT_IMAGE_2D>
<android.opengl.GLES31: int GL_INT_IMAGE_2D_ARRAY>
<android.opengl.GLES31: int GL_INT_IMAGE_3D>
<android.opengl.GLES31: int GL_INT_IMAGE_CUBE>
<android.opengl.GLES31: int GL_INT_SAMPLER_2D_MULTISAMPLE>
<android.opengl.GLES31: int GL_IS_ROW_MAJOR>
<android.opengl.GLES31: int GL_LOCATION>
<android.opengl.GLES31: int GL_MATRIX_STRIDE>
<android.opengl.GLES31: int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS>
<android.opengl.GLES31: int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE>
<android.opengl.GLES31: int GL_MAX_COLOR_TEXTURE_SAMPLES>
<android.opengl.GLES31: int GL_MAX_COMBINED_ATOMIC_COUNTERS>
<android.opengl.GLES31: int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS>
<android.opengl.GLES31: int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS>
<android.opengl.GLES31: int GL_MAX_COMBINED_IMAGE_UNIFORMS>
<android.opengl.GLES31: int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES>
<android.opengl.GLES31: int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS>
<android.opengl.GLES31: int GL_MAX_COMPUTE_ATOMIC_COUNTERS>
<android.opengl.GLES31: int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS>
<android.opengl.GLES31: int GL_MAX_COMPUTE_IMAGE_UNIFORMS>
<android.opengl.GLES31: int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS>
<android.opengl.GLES31: int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE>
<android.opengl.GLES31: int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS>
<android.opengl.GLES31: int GL_MAX_COMPUTE_UNIFORM_BLOCKS>
<android.opengl.GLES31: int GL_MAX_COMPUTE_UNIFORM_COMPONENTS>
<android.opengl.GLES31: int GL_MAX_COMPUTE_WORK_GROUP_COUNT>
<android.opengl.GLES31: int GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS>
<android.opengl.GLES31: int GL_MAX_COMPUTE_WORK_GROUP_SIZE>
<android.opengl.GLES31: int GL_MAX_DEPTH_TEXTURE_SAMPLES>
<android.opengl.GLES31: int GL_MAX_FRAGMENT_ATOMIC_COUNTERS>
<android.opengl.GLES31: int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS>
<android.opengl.GLES31: int GL_MAX_FRAGMENT_IMAGE_UNIFORMS>
<android.opengl.GLES31: int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS>
<android.opengl.GLES31: int GL_MAX_FRAMEBUFFER_HEIGHT>
<android.opengl.GLES31: int GL_MAX_FRAMEBUFFER_SAMPLES>
<android.opengl.GLES31: int GL_MAX_FRAMEBUFFER_WIDTH>
<android.opengl.GLES31: int GL_MAX_IMAGE_UNITS>
<android.opengl.GLES31: int GL_MAX_INTEGER_SAMPLES>
<android.opengl.GLES31: int GL_MAX_NAME_LENGTH>
<android.opengl.GLES31: int GL_MAX_NUM_ACTIVE_VARIABLES>
<android.opengl.GLES31: int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET>
<android.opengl.GLES31: int GL_MAX_SAMPLE_MASK_WORDS>
<android.opengl.GLES31: int GL_MAX_SHADER_STORAGE_BLOCK_SIZE>
<android.opengl.GLES31: int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS>
<android.opengl.GLES31: int GL_MAX_UNIFORM_LOCATIONS>
<android.opengl.GLES31: int GL_MAX_VERTEX_ATOMIC_COUNTERS>
<android.opengl.GLES31: int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS>
<android.opengl.GLES31: int GL_MAX_VERTEX_ATTRIB_BINDINGS>
<android.opengl.GLES31: int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET>
<android.opengl.GLES31: int GL_MAX_VERTEX_ATTRIB_STRIDE>
<android.opengl.GLES31: int GL_MAX_VERTEX_IMAGE_UNIFORMS>
<android.opengl.GLES31: int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS>
<android.opengl.GLES31: int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET>
<android.opengl.GLES31: int GL_NAME_LENGTH>
<android.opengl.GLES31: int GL_NUM_ACTIVE_VARIABLES>
<android.opengl.GLES31: int GL_OFFSET>
<android.opengl.GLES31: int GL_PIXEL_BUFFER_BARRIER_BIT>
<android.opengl.GLES31: int GL_PROGRAM_INPUT>
<android.opengl.GLES31: int GL_PROGRAM_OUTPUT>
<android.opengl.GLES31: int GL_PROGRAM_PIPELINE_BINDING>
<android.opengl.GLES31: int GL_PROGRAM_SEPARABLE>
<android.opengl.GLES31: int GL_READ_ONLY>
<android.opengl.GLES31: int GL_READ_WRITE>
<android.opengl.GLES31: int GL_REFERENCED_BY_COMPUTE_SHADER>
<android.opengl.GLES31: int GL_REFERENCED_BY_FRAGMENT_SHADER>
<android.opengl.GLES31: int GL_REFERENCED_BY_VERTEX_SHADER>
<android.opengl.GLES31: int GL_SAMPLER_2D_MULTISAMPLE>
<android.opengl.GLES31: int GL_SAMPLE_MASK>
<android.opengl.GLES31: int GL_SAMPLE_MASK_VALUE>
<android.opengl.GLES31: int GL_SAMPLE_POSITION>
<android.opengl.GLES31: int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT>
<android.opengl.GLES31: int GL_SHADER_STORAGE_BARRIER_BIT>
<android.opengl.GLES31: int GL_SHADER_STORAGE_BLOCK>
<android.opengl.GLES31: int GL_SHADER_STORAGE_BUFFER>
<android.opengl.GLES31: int GL_SHADER_STORAGE_BUFFER_BINDING>
<android.opengl.GLES31: int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT>
<android.opengl.GLES31: int GL_SHADER_STORAGE_BUFFER_SIZE>
<android.opengl.GLES31: int GL_SHADER_STORAGE_BUFFER_START>
<android.opengl.GLES31: int GL_STENCIL_INDEX>
<android.opengl.GLES31: int GL_TEXTURE_2D_MULTISAMPLE>
<android.opengl.GLES31: int GL_TEXTURE_ALPHA_SIZE>
<android.opengl.GLES31: int GL_TEXTURE_ALPHA_TYPE>
<android.opengl.GLES31: int GL_TEXTURE_BINDING_2D_MULTISAMPLE>
<android.opengl.GLES31: int GL_TEXTURE_BLUE_SIZE>
<android.opengl.GLES31: int GL_TEXTURE_BLUE_TYPE>
<android.opengl.GLES31: int GL_TEXTURE_COMPRESSED>
<android.opengl.GLES31: int GL_TEXTURE_DEPTH>
<android.opengl.GLES31: int GL_TEXTURE_DEPTH_SIZE>
<android.opengl.GLES31: int GL_TEXTURE_DEPTH_TYPE>
<android.opengl.GLES31: int GL_TEXTURE_FETCH_BARRIER_BIT>
<android.opengl.GLES31: int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS>
<android.opengl.GLES31: int GL_TEXTURE_GREEN_SIZE>
<android.opengl.GLES31: int GL_TEXTURE_GREEN_TYPE>
<android.opengl.GLES31: int GL_TEXTURE_HEIGHT>
<android.opengl.GLES31: int GL_TEXTURE_INTERNAL_FORMAT>
<android.opengl.GLES31: int GL_TEXTURE_RED_SIZE>
<android.opengl.GLES31: int GL_TEXTURE_RED_TYPE>
<android.opengl.GLES31: int GL_TEXTURE_SAMPLES>
<android.opengl.GLES31: int GL_TEXTURE_SHARED_SIZE>
<android.opengl.GLES31: int GL_TEXTURE_STENCIL_SIZE>
<android.opengl.GLES31: int GL_TEXTURE_UPDATE_BARRIER_BIT>
<android.opengl.GLES31: int GL_TEXTURE_WIDTH>
<android.opengl.GLES31: int GL_TOP_LEVEL_ARRAY_SIZE>
<android.opengl.GLES31: int GL_TOP_LEVEL_ARRAY_STRIDE>
<android.opengl.GLES31: int GL_TRANSFORM_FEEDBACK_BARRIER_BIT>
<android.opengl.GLES31: int GL_TRANSFORM_FEEDBACK_VARYING>
<android.opengl.GLES31: int GL_TYPE>
<android.opengl.GLES31: int GL_UNIFORM>
<android.opengl.GLES31: int GL_UNIFORM_BARRIER_BIT>
<android.opengl.GLES31: int GL_UNIFORM_BLOCK>
<android.opengl.GLES31: int GL_UNSIGNED_INT_ATOMIC_COUNTER>
<android.opengl.GLES31: int GL_UNSIGNED_INT_IMAGE_2D>
<android.opengl.GLES31: int GL_UNSIGNED_INT_IMAGE_2D_ARRAY>
<android.opengl.GLES31: int GL_UNSIGNED_INT_IMAGE_3D>
<android.opengl.GLES31: int GL_UNSIGNED_INT_IMAGE_CUBE>
<android.opengl.GLES31: int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE>
<android.opengl.GLES31: int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT>
<android.opengl.GLES31: int GL_VERTEX_ATTRIB_BINDING>
<android.opengl.GLES31: int GL_VERTEX_ATTRIB_RELATIVE_OFFSET>
<android.opengl.GLES31: int GL_VERTEX_BINDING_BUFFER>
<android.opengl.GLES31: int GL_VERTEX_BINDING_DIVISOR>
<android.opengl.GLES31: int GL_VERTEX_BINDING_OFFSET>
<android.opengl.GLES31: int GL_VERTEX_BINDING_STRIDE>
<android.opengl.GLES31: int GL_VERTEX_SHADER_BIT>
<android.opengl.GLES31: int GL_WRITE_ONLY>
android.opengl.GLES31Ext
<android.opengl.GLES31Ext: void glBlendBarrierKHR()>
<android.opengl.GLES31Ext: void glBlendEquationSeparateiEXT(int,int,int)>
<android.opengl.GLES31Ext: void glBlendEquationiEXT(int,int)>
<android.opengl.GLES31Ext: void glBlendFuncSeparateiEXT(int,int,int,int,int)>
<android.opengl.GLES31Ext: void glBlendFunciEXT(int,int,int)>
<android.opengl.GLES31Ext: void glColorMaskiEXT(int,boolean,boolean,boolean,boolean)>
<android.opengl.GLES31Ext: void glCopyImageSubDataEXT(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES31Ext: void glDebugMessageCallbackKHR(android.opengl.GLES31Ext$DebugProcKHR)>
<android.opengl.GLES31Ext: void glDebugMessageControlKHR(int,int,int,int,int[],int,boolean)>
<android.opengl.GLES31Ext: void glDebugMessageControlKHR(int,int,int,int,java.nio.IntBuffer,boolean)>
<android.opengl.GLES31Ext: void glDebugMessageInsertKHR(int,int,int,int,java.lang.String)>
<android.opengl.GLES31Ext: void glDisableiEXT(int,int)>
<android.opengl.GLES31Ext: void glEnableiEXT(int,int)>
<android.opengl.GLES31Ext: void glFramebufferTextureEXT(int,int,int,int)>
<android.opengl.GLES31Ext: android.opengl.GLES31Ext$DebugProcKHR glGetDebugMessageCallbackKHR()>
<android.opengl.GLES31Ext: int glGetDebugMessageLogKHR(int,int,int[],int,int[],int,int[],int,int[],int,int[],int,byte[],int)>
<android.opengl.GLES31Ext: int glGetDebugMessageLogKHR(int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.ByteBuffer)>
<android.opengl.GLES31Ext: java.lang.String[] glGetDebugMessageLogKHR(int,int[],int,int[],int,int[],int,int[],int)>
<android.opengl.GLES31Ext: java.lang.String[] glGetDebugMessageLogKHR(int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: java.lang.String glGetObjectLabelKHR(int,int)>
<android.opengl.GLES31Ext: java.lang.String glGetObjectPtrLabelKHR(long)>
<android.opengl.GLES31Ext: void glGetSamplerParameterIivEXT(int,int,int[],int)>
<android.opengl.GLES31Ext: void glGetSamplerParameterIivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: void glGetSamplerParameterIuivEXT(int,int,int[],int)>
<android.opengl.GLES31Ext: void glGetSamplerParameterIuivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: void glGetTexParameterIivEXT(int,int,int[],int)>
<android.opengl.GLES31Ext: void glGetTexParameterIivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: void glGetTexParameterIuivEXT(int,int,int[],int)>
<android.opengl.GLES31Ext: void glGetTexParameterIuivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: boolean glIsEnablediEXT(int,int)>
<android.opengl.GLES31Ext: void glMinSampleShadingOES(float)>
<android.opengl.GLES31Ext: void glObjectLabelKHR(int,int,int,java.lang.String)>
<android.opengl.GLES31Ext: void glObjectPtrLabelKHR(long,java.lang.String)>
<android.opengl.GLES31Ext: void glPatchParameteriEXT(int,int)>
<android.opengl.GLES31Ext: void glPopDebugGroupKHR()>
<android.opengl.GLES31Ext: void glPrimitiveBoundingBoxEXT(float,float,float,float,float,float,float,float)>
<android.opengl.GLES31Ext: void glPushDebugGroupKHR(int,int,int,java.lang.String)>
<android.opengl.GLES31Ext: void glSamplerParameterIivEXT(int,int,int[],int)>
<android.opengl.GLES31Ext: void glSamplerParameterIivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: void glSamplerParameterIuivEXT(int,int,int[],int)>
<android.opengl.GLES31Ext: void glSamplerParameterIuivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: void glTexBufferEXT(int,int,int)>
<android.opengl.GLES31Ext: void glTexBufferRangeEXT(int,int,int,int,int)>
<android.opengl.GLES31Ext: void glTexParameterIivEXT(int,int,int[],int)>
<android.opengl.GLES31Ext: void glTexParameterIivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: void glTexParameterIuivEXT(int,int,int[],int)>
<android.opengl.GLES31Ext: void glTexParameterIuivEXT(int,int,java.nio.IntBuffer)>
<android.opengl.GLES31Ext: void glTexStorage3DMultisampleOES(int,int,int,int,int,int,boolean)>
<android.opengl.GLES31Ext: int GL_BLEND_ADVANCED_COHERENT_KHR>
<android.opengl.GLES31Ext: int GL_BUFFER_KHR>
<android.opengl.GLES31Ext: int GL_CLAMP_TO_BORDER_EXT>
<android.opengl.GLES31Ext: int GL_COLORBURN_KHR>
<android.opengl.GLES31Ext: int GL_COLORDODGE_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_RGBA_ASTC_10x10_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_RGBA_ASTC_10x5_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_RGBA_ASTC_10x6_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_RGBA_ASTC_10x8_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_RGBA_ASTC_12x10_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_RGBA_ASTC_12x12_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_RGBA_ASTC_4x4_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_RGBA_ASTC_5x4_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_RGBA_ASTC_5x5_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_RGBA_ASTC_6x5_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_RGBA_ASTC_6x6_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_RGBA_ASTC_8x5_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_RGBA_ASTC_8x6_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_RGBA_ASTC_8x8_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR>
<android.opengl.GLES31Ext: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR>
<android.opengl.GLES31Ext: int GL_CONTEXT_FLAG_DEBUG_BIT_KHR>
<android.opengl.GLES31Ext: int GL_DARKEN_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_CALLBACK_FUNCTION_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_CALLBACK_USER_PARAM_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_GROUP_STACK_DEPTH_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_LOGGED_MESSAGES_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_OUTPUT_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_SEVERITY_HIGH_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_SEVERITY_LOW_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_SEVERITY_MEDIUM_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_SEVERITY_NOTIFICATION_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_SOURCE_API_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_SOURCE_APPLICATION_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_SOURCE_OTHER_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_SOURCE_SHADER_COMPILER_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_SOURCE_THIRD_PARTY_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_TYPE_ERROR_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_TYPE_MARKER_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_TYPE_OTHER_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_TYPE_PERFORMANCE_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_TYPE_POP_GROUP_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_TYPE_PORTABILITY_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_TYPE_PUSH_GROUP_KHR>
<android.opengl.GLES31Ext: int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR>
<android.opengl.GLES31Ext: int GL_DECODE_EXT>
<android.opengl.GLES31Ext: int GL_DIFFERENCE_KHR>
<android.opengl.GLES31Ext: int GL_EXCLUSION_KHR>
<android.opengl.GLES31Ext: int GL_FIRST_VERTEX_CONVENTION_EXT>
<android.opengl.GLES31Ext: int GL_FRACTIONAL_EVEN_EXT>
<android.opengl.GLES31Ext: int GL_FRACTIONAL_ODD_EXT>
<android.opengl.GLES31Ext: int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES>
<android.opengl.GLES31Ext: int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT>
<android.opengl.GLES31Ext: int GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT>
<android.opengl.GLES31Ext: int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT>
<android.opengl.GLES31Ext: int GL_GEOMETRY_LINKED_INPUT_TYPE_EXT>
<android.opengl.GLES31Ext: int GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT>
<android.opengl.GLES31Ext: int GL_GEOMETRY_LINKED_VERTICES_OUT_EXT>
<android.opengl.GLES31Ext: int GL_GEOMETRY_SHADER_BIT_EXT>
<android.opengl.GLES31Ext: int GL_GEOMETRY_SHADER_EXT>
<android.opengl.GLES31Ext: int GL_GEOMETRY_SHADER_INVOCATIONS_EXT>
<android.opengl.GLES31Ext: int GL_HARDLIGHT_KHR>
<android.opengl.GLES31Ext: int GL_HSL_COLOR_KHR>
<android.opengl.GLES31Ext: int GL_HSL_HUE_KHR>
<android.opengl.GLES31Ext: int GL_HSL_LUMINOSITY_KHR>
<android.opengl.GLES31Ext: int GL_HSL_SATURATION_KHR>
<android.opengl.GLES31Ext: int GL_IMAGE_BUFFER_EXT>
<android.opengl.GLES31Ext: int GL_IMAGE_CUBE_MAP_ARRAY_EXT>
<android.opengl.GLES31Ext: int GL_INT_IMAGE_BUFFER_EXT>
<android.opengl.GLES31Ext: int GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT>
<android.opengl.GLES31Ext: int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES>
<android.opengl.GLES31Ext: int GL_INT_SAMPLER_BUFFER_EXT>
<android.opengl.GLES31Ext: int GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT>
<android.opengl.GLES31Ext: int GL_ISOLINES_EXT>
<android.opengl.GLES31Ext: int GL_IS_PER_PATCH_EXT>
<android.opengl.GLES31Ext: int GL_LAST_VERTEX_CONVENTION_EXT>
<android.opengl.GLES31Ext: int GL_LAYER_PROVOKING_VERTEX_EXT>
<android.opengl.GLES31Ext: int GL_LIGHTEN_KHR>
<android.opengl.GLES31Ext: int GL_LINES_ADJACENCY_EXT>
<android.opengl.GLES31Ext: int GL_LINE_STRIP_ADJACENCY_EXT>
<android.opengl.GLES31Ext: int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR>
<android.opengl.GLES31Ext: int GL_MAX_DEBUG_LOGGED_MESSAGES_KHR>
<android.opengl.GLES31Ext: int GL_MAX_DEBUG_MESSAGE_LENGTH_KHR>
<android.opengl.GLES31Ext: int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES>
<android.opengl.GLES31Ext: int GL_MAX_FRAMEBUFFER_LAYERS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT>
<android.opengl.GLES31Ext: int GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_LABEL_LENGTH_KHR>
<android.opengl.GLES31Ext: int GL_MAX_PATCH_VERTICES_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_GEN_LEVEL_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TESS_PATCH_COMPONENTS_EXT>
<android.opengl.GLES31Ext: int GL_MAX_TEXTURE_BUFFER_SIZE_EXT>
<android.opengl.GLES31Ext: int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES>
<android.opengl.GLES31Ext: int GL_MIN_SAMPLE_SHADING_VALUE_OES>
<android.opengl.GLES31Ext: int GL_MULTIPLY_KHR>
<android.opengl.GLES31Ext: int GL_OVERLAY_KHR>
<android.opengl.GLES31Ext: int GL_PATCHES_EXT>
<android.opengl.GLES31Ext: int GL_PATCH_VERTICES_EXT>
<android.opengl.GLES31Ext: int GL_PRIMITIVES_GENERATED_EXT>
<android.opengl.GLES31Ext: int GL_PRIMITIVE_BOUNDING_BOX_EXT>
<android.opengl.GLES31Ext: int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED>
<android.opengl.GLES31Ext: int GL_PROGRAM_KHR>
<android.opengl.GLES31Ext: int GL_QUADS_EXT>
<android.opengl.GLES31Ext: int GL_QUERY_KHR>
<android.opengl.GLES31Ext: int GL_REFERENCED_BY_GEOMETRY_SHADER_EXT>
<android.opengl.GLES31Ext: int GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT>
<android.opengl.GLES31Ext: int GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT>
<android.opengl.GLES31Ext: int GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES>
<android.opengl.GLES31Ext: int GL_SAMPLER_BUFFER_EXT>
<android.opengl.GLES31Ext: int GL_SAMPLER_CUBE_MAP_ARRAY_EXT>
<android.opengl.GLES31Ext: int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT>
<android.opengl.GLES31Ext: int GL_SAMPLER_KHR>
<android.opengl.GLES31Ext: int GL_SAMPLE_SHADING_OES>
<android.opengl.GLES31Ext: int GL_SCREEN_KHR>
<android.opengl.GLES31Ext: int GL_SHADER_KHR>
<android.opengl.GLES31Ext: int GL_SKIP_DECODE_EXT>
<android.opengl.GLES31Ext: int GL_SOFTLIGHT_KHR>
<android.opengl.GLES31Ext: int GL_STACK_OVERFLOW_KHR>
<android.opengl.GLES31Ext: int GL_STACK_UNDERFLOW_KHR>
<android.opengl.GLES31Ext: int GL_STENCIL_INDEX8_OES>
<android.opengl.GLES31Ext: int GL_STENCIL_INDEX_OES>
<android.opengl.GLES31Ext: int GL_TESS_CONTROL_OUTPUT_VERTICES_EXT>
<android.opengl.GLES31Ext: int GL_TESS_CONTROL_SHADER_BIT_EXT>
<android.opengl.GLES31Ext: int GL_TESS_CONTROL_SHADER_EXT>
<android.opengl.GLES31Ext: int GL_TESS_EVALUATION_SHADER_BIT_EXT>
<android.opengl.GLES31Ext: int GL_TESS_EVALUATION_SHADER_EXT>
<android.opengl.GLES31Ext: int GL_TESS_GEN_MODE_EXT>
<android.opengl.GLES31Ext: int GL_TESS_GEN_POINT_MODE_EXT>
<android.opengl.GLES31Ext: int GL_TESS_GEN_SPACING_EXT>
<android.opengl.GLES31Ext: int GL_TESS_GEN_VERTEX_ORDER_EXT>
<android.opengl.GLES31Ext: int GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES>
<android.opengl.GLES31Ext: int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES>
<android.opengl.GLES31Ext: int GL_TEXTURE_BINDING_BUFFER_EXT>
<android.opengl.GLES31Ext: int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT>
<android.opengl.GLES31Ext: int GL_TEXTURE_BORDER_COLOR_EXT>
<android.opengl.GLES31Ext: int GL_TEXTURE_BUFFER_BINDING_EXT>
<android.opengl.GLES31Ext: int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT>
<android.opengl.GLES31Ext: int GL_TEXTURE_BUFFER_EXT>
<android.opengl.GLES31Ext: int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT>
<android.opengl.GLES31Ext: int GL_TEXTURE_BUFFER_OFFSET_EXT>
<android.opengl.GLES31Ext: int GL_TEXTURE_BUFFER_SIZE_EXT>
<android.opengl.GLES31Ext: int GL_TEXTURE_CUBE_MAP_ARRAY_EXT>
<android.opengl.GLES31Ext: int GL_TEXTURE_SRGB_DECODE_EXT>
<android.opengl.GLES31Ext: int GL_TRIANGLES_ADJACENCY_EXT>
<android.opengl.GLES31Ext: int GL_TRIANGLE_STRIP_ADJACENCY_EXT>
<android.opengl.GLES31Ext: int GL_UNDEFINED_VERTEX_EXT>
<android.opengl.GLES31Ext: int GL_UNSIGNED_INT_IMAGE_BUFFER_EXT>
<android.opengl.GLES31Ext: int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT>
<android.opengl.GLES31Ext: int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES>
<android.opengl.GLES31Ext: int GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT>
<android.opengl.GLES31Ext: int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT>
<android.opengl.GLES31Ext: int GL_VERTEX_ARRAY_KHR>
android.opengl.GLES31Ext$DebugProcKHR
<android.opengl.GLES31Ext$DebugProcKHR: void onMessage(int,int,int,int,java.lang.String)>
android.opengl.GLES32
<android.opengl.GLES32: void glBlendBarrier()>
<android.opengl.GLES32: void glBlendEquationSeparatei(int,int,int)>
<android.opengl.GLES32: void glBlendEquationi(int,int)>
<android.opengl.GLES32: void glBlendFuncSeparatei(int,int,int,int,int)>
<android.opengl.GLES32: void glBlendFunci(int,int,int)>
<android.opengl.GLES32: void glColorMaski(int,boolean,boolean,boolean,boolean)>
<android.opengl.GLES32: void glCopyImageSubData(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)>
<android.opengl.GLES32: void glDebugMessageCallback(android.opengl.GLES32$DebugProc)>
<android.opengl.GLES32: void glDebugMessageControl(int,int,int,int,int[],int,boolean)>
<android.opengl.GLES32: void glDebugMessageControl(int,int,int,int,java.nio.IntBuffer,boolean)>
<android.opengl.GLES32: void glDebugMessageInsert(int,int,int,int,int,java.lang.String)>
<android.opengl.GLES32: void glDisablei(int,int)>
<android.opengl.GLES32: void glDrawElementsBaseVertex(int,int,int,java.nio.Buffer,int)>
<android.opengl.GLES32: void glDrawElementsInstancedBaseVertex(int,int,int,java.nio.Buffer,int,int)>
<android.opengl.GLES32: void glDrawElementsInstancedBaseVertex(int,int,int,int,int,int)>
<android.opengl.GLES32: void glDrawRangeElementsBaseVertex(int,int,int,int,int,java.nio.Buffer,int)>
<android.opengl.GLES32: void glEnablei(int,int)>
<android.opengl.GLES32: void glFramebufferTexture(int,int,int,int)>
<android.opengl.GLES32: int glGetDebugMessageLog(int,int,int[],int,int[],int,int[],int,int[],int,int[],int,byte[],int)>
<android.opengl.GLES32: int glGetDebugMessageLog(int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.ByteBuffer)>
<android.opengl.GLES32: java.lang.String[] glGetDebugMessageLog(int,int[],int,int[],int,int[],int,int[],int)>
<android.opengl.GLES32: java.lang.String[] glGetDebugMessageLog(int,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer,java.nio.IntBuffer)>
<android.opengl.GLES32: int glGetGraphicsResetStatus()>
<android.opengl.GLES32: java.lang.String glGetObjectLabel(int,int)>
<android.opengl.GLES32: java.lang.String glGetObjectPtrLabel(long)>
<android.opengl.GLES32: long glGetPointerv(int)>
<android.opengl.GLES32: void glGetSamplerParameterIiv(int,int,int[],int)>
<android.opengl.GLES32: void glGetSamplerParameterIiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glGetSamplerParameterIuiv(int,int,int[],int)>
<android.opengl.GLES32: void glGetSamplerParameterIuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glGetTexParameterIiv(int,int,int[],int)>
<android.opengl.GLES32: void glGetTexParameterIiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glGetTexParameterIuiv(int,int,int[],int)>
<android.opengl.GLES32: void glGetTexParameterIuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glGetnUniformfv(int,int,int,float[],int)>
<android.opengl.GLES32: void glGetnUniformfv(int,int,int,java.nio.FloatBuffer)>
<android.opengl.GLES32: void glGetnUniformiv(int,int,int,int[],int)>
<android.opengl.GLES32: void glGetnUniformiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glGetnUniformuiv(int,int,int,int[],int)>
<android.opengl.GLES32: void glGetnUniformuiv(int,int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: boolean glIsEnabledi(int,int)>
<android.opengl.GLES32: void glMinSampleShading(float)>
<android.opengl.GLES32: void glObjectLabel(int,int,int,java.lang.String)>
<android.opengl.GLES32: void glObjectPtrLabel(long,java.lang.String)>
<android.opengl.GLES32: void glPatchParameteri(int,int)>
<android.opengl.GLES32: void glPopDebugGroup()>
<android.opengl.GLES32: void glPrimitiveBoundingBox(float,float,float,float,float,float,float,float)>
<android.opengl.GLES32: void glPushDebugGroup(int,int,int,java.lang.String)>
<android.opengl.GLES32: void glReadnPixels(int,int,int,int,int,int,int,java.nio.Buffer)>
<android.opengl.GLES32: void glSamplerParameterIiv(int,int,int[],int)>
<android.opengl.GLES32: void glSamplerParameterIiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glSamplerParameterIuiv(int,int,int[],int)>
<android.opengl.GLES32: void glSamplerParameterIuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glTexBuffer(int,int,int)>
<android.opengl.GLES32: void glTexBufferRange(int,int,int,int,int)>
<android.opengl.GLES32: void glTexParameterIiv(int,int,int[],int)>
<android.opengl.GLES32: void glTexParameterIiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glTexParameterIuiv(int,int,int[],int)>
<android.opengl.GLES32: void glTexParameterIuiv(int,int,java.nio.IntBuffer)>
<android.opengl.GLES32: void glTexStorage3DMultisample(int,int,int,int,int,int,boolean)>
<android.opengl.GLES32: int GL_BUFFER>
<android.opengl.GLES32: int GL_CLAMP_TO_BORDER>
<android.opengl.GLES32: int GL_COLORBURN>
<android.opengl.GLES32: int GL_COLORDODGE>
<android.opengl.GLES32: int GL_COMPRESSED_RGBA_ASTC_10x10>
<android.opengl.GLES32: int GL_COMPRESSED_RGBA_ASTC_10x5>
<android.opengl.GLES32: int GL_COMPRESSED_RGBA_ASTC_10x6>
<android.opengl.GLES32: int GL_COMPRESSED_RGBA_ASTC_10x8>
<android.opengl.GLES32: int GL_COMPRESSED_RGBA_ASTC_12x10>
<android.opengl.GLES32: int GL_COMPRESSED_RGBA_ASTC_12x12>
<android.opengl.GLES32: int GL_COMPRESSED_RGBA_ASTC_4x4>
<android.opengl.GLES32: int GL_COMPRESSED_RGBA_ASTC_5x4>
<android.opengl.GLES32: int GL_COMPRESSED_RGBA_ASTC_5x5>
<android.opengl.GLES32: int GL_COMPRESSED_RGBA_ASTC_6x5>
<android.opengl.GLES32: int GL_COMPRESSED_RGBA_ASTC_6x6>
<android.opengl.GLES32: int GL_COMPRESSED_RGBA_ASTC_8x5>
<android.opengl.GLES32: int GL_COMPRESSED_RGBA_ASTC_8x6>
<android.opengl.GLES32: int GL_COMPRESSED_RGBA_ASTC_8x8>
<android.opengl.GLES32: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10>
<android.opengl.GLES32: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5>
<android.opengl.GLES32: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6>
<android.opengl.GLES32: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8>
<android.opengl.GLES32: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10>
<android.opengl.GLES32: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12>
<android.opengl.GLES32: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4>
<android.opengl.GLES32: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4>
<android.opengl.GLES32: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5>
<android.opengl.GLES32: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5>
<android.opengl.GLES32: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6>
<android.opengl.GLES32: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5>
<android.opengl.GLES32: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6>
<android.opengl.GLES32: int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8>
<android.opengl.GLES32: int GL_CONTEXT_FLAGS>
<android.opengl.GLES32: int GL_CONTEXT_FLAG_DEBUG_BIT>
<android.opengl.GLES32: int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT>
<android.opengl.GLES32: int GL_CONTEXT_LOST>
<android.opengl.GLES32: int GL_DARKEN>
<android.opengl.GLES32: int GL_DEBUG_CALLBACK_FUNCTION>
<android.opengl.GLES32: int GL_DEBUG_CALLBACK_USER_PARAM>
<android.opengl.GLES32: int GL_DEBUG_GROUP_STACK_DEPTH>
<android.opengl.GLES32: int GL_DEBUG_LOGGED_MESSAGES>
<android.opengl.GLES32: int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH>
<android.opengl.GLES32: int GL_DEBUG_OUTPUT>
<android.opengl.GLES32: int GL_DEBUG_OUTPUT_SYNCHRONOUS>
<android.opengl.GLES32: int GL_DEBUG_SEVERITY_HIGH>
<android.opengl.GLES32: int GL_DEBUG_SEVERITY_LOW>
<android.opengl.GLES32: int GL_DEBUG_SEVERITY_MEDIUM>
<android.opengl.GLES32: int GL_DEBUG_SEVERITY_NOTIFICATION>
<android.opengl.GLES32: int GL_DEBUG_SOURCE_API>
<android.opengl.GLES32: int GL_DEBUG_SOURCE_APPLICATION>
<android.opengl.GLES32: int GL_DEBUG_SOURCE_OTHER>
<android.opengl.GLES32: int GL_DEBUG_SOURCE_SHADER_COMPILER>
<android.opengl.GLES32: int GL_DEBUG_SOURCE_THIRD_PARTY>
<android.opengl.GLES32: int GL_DEBUG_SOURCE_WINDOW_SYSTEM>
<android.opengl.GLES32: int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR>
<android.opengl.GLES32: int GL_DEBUG_TYPE_ERROR>
<android.opengl.GLES32: int GL_DEBUG_TYPE_MARKER>
<android.opengl.GLES32: int GL_DEBUG_TYPE_OTHER>
<android.opengl.GLES32: int GL_DEBUG_TYPE_PERFORMANCE>
<android.opengl.GLES32: int GL_DEBUG_TYPE_POP_GROUP>
<android.opengl.GLES32: int GL_DEBUG_TYPE_PORTABILITY>
<android.opengl.GLES32: int GL_DEBUG_TYPE_PUSH_GROUP>
<android.opengl.GLES32: int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR>
<android.opengl.GLES32: int GL_DIFFERENCE>
<android.opengl.GLES32: int GL_EXCLUSION>
<android.opengl.GLES32: int GL_FIRST_VERTEX_CONVENTION>
<android.opengl.GLES32: int GL_FRACTIONAL_EVEN>
<android.opengl.GLES32: int GL_FRACTIONAL_ODD>
<android.opengl.GLES32: int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS>
<android.opengl.GLES32: int GL_FRAMEBUFFER_ATTACHMENT_LAYERED>
<android.opengl.GLES32: int GL_FRAMEBUFFER_DEFAULT_LAYERS>
<android.opengl.GLES32: int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS>
<android.opengl.GLES32: int GL_GEOMETRY_INPUT_TYPE>
<android.opengl.GLES32: int GL_GEOMETRY_OUTPUT_TYPE>
<android.opengl.GLES32: int GL_GEOMETRY_SHADER>
<android.opengl.GLES32: int GL_GEOMETRY_SHADER_BIT>
<android.opengl.GLES32: int GL_GEOMETRY_SHADER_INVOCATIONS>
<android.opengl.GLES32: int GL_GEOMETRY_VERTICES_OUT>
<android.opengl.GLES32: int GL_GUILTY_CONTEXT_RESET>
<android.opengl.GLES32: int GL_HARDLIGHT>
<android.opengl.GLES32: int GL_HSL_COLOR>
<android.opengl.GLES32: int GL_HSL_HUE>
<android.opengl.GLES32: int GL_HSL_LUMINOSITY>
<android.opengl.GLES32: int GL_HSL_SATURATION>
<android.opengl.GLES32: int GL_IMAGE_BUFFER>
<android.opengl.GLES32: int GL_IMAGE_CUBE_MAP_ARRAY>
<android.opengl.GLES32: int GL_INNOCENT_CONTEXT_RESET>
<android.opengl.GLES32: int GL_INT_IMAGE_BUFFER>
<android.opengl.GLES32: int GL_INT_IMAGE_CUBE_MAP_ARRAY>
<android.opengl.GLES32: int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY>
<android.opengl.GLES32: int GL_INT_SAMPLER_BUFFER>
<android.opengl.GLES32: int GL_INT_SAMPLER_CUBE_MAP_ARRAY>
<android.opengl.GLES32: int GL_ISOLINES>
<android.opengl.GLES32: int GL_IS_PER_PATCH>
<android.opengl.GLES32: int GL_LAST_VERTEX_CONVENTION>
<android.opengl.GLES32: int GL_LAYER_PROVOKING_VERTEX>
<android.opengl.GLES32: int GL_LIGHTEN>
<android.opengl.GLES32: int GL_LINES_ADJACENCY>
<android.opengl.GLES32: int GL_LINE_STRIP_ADJACENCY>
<android.opengl.GLES32: int GL_LOSE_CONTEXT_ON_RESET>
<android.opengl.GLES32: int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS>
<android.opengl.GLES32: int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS>
<android.opengl.GLES32: int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS>
<android.opengl.GLES32: int GL_MAX_DEBUG_GROUP_STACK_DEPTH>
<android.opengl.GLES32: int GL_MAX_DEBUG_LOGGED_MESSAGES>
<android.opengl.GLES32: int GL_MAX_DEBUG_MESSAGE_LENGTH>
<android.opengl.GLES32: int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET>
<android.opengl.GLES32: int GL_MAX_FRAMEBUFFER_LAYERS>
<android.opengl.GLES32: int GL_MAX_GEOMETRY_ATOMIC_COUNTERS>
<android.opengl.GLES32: int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS>
<android.opengl.GLES32: int GL_MAX_GEOMETRY_IMAGE_UNIFORMS>
<android.opengl.GLES32: int GL_MAX_GEOMETRY_INPUT_COMPONENTS>
<android.opengl.GLES32: int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS>
<android.opengl.GLES32: int GL_MAX_GEOMETRY_OUTPUT_VERTICES>
<android.opengl.GLES32: int GL_MAX_GEOMETRY_SHADER_INVOCATIONS>
<android.opengl.GLES32: int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS>
<android.opengl.GLES32: int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS>
<android.opengl.GLES32: int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS>
<android.opengl.GLES32: int GL_MAX_GEOMETRY_UNIFORM_BLOCKS>
<android.opengl.GLES32: int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS>
<android.opengl.GLES32: int GL_MAX_LABEL_LENGTH>
<android.opengl.GLES32: int GL_MAX_PATCH_VERTICES>
<android.opengl.GLES32: int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS>
<android.opengl.GLES32: int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS>
<android.opengl.GLES32: int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS>
<android.opengl.GLES32: int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS>
<android.opengl.GLES32: int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS>
<android.opengl.GLES32: int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS>
<android.opengl.GLES32: int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS>
<android.opengl.GLES32: int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS>
<android.opengl.GLES32: int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS>
<android.opengl.GLES32: int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS>
<android.opengl.GLES32: int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS>
<android.opengl.GLES32: int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS>
<android.opengl.GLES32: int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS>
<android.opengl.GLES32: int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS>
<android.opengl.GLES32: int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS>
<android.opengl.GLES32: int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS>
<android.opengl.GLES32: int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS>
<android.opengl.GLES32: int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS>
<android.opengl.GLES32: int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS>
<android.opengl.GLES32: int GL_MAX_TESS_GEN_LEVEL>
<android.opengl.GLES32: int GL_MAX_TESS_PATCH_COMPONENTS>
<android.opengl.GLES32: int GL_MAX_TEXTURE_BUFFER_SIZE>
<android.opengl.GLES32: int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET>
<android.opengl.GLES32: int GL_MIN_SAMPLE_SHADING_VALUE>
<android.opengl.GLES32: int GL_MULTIPLY>
<android.opengl.GLES32: int GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY>
<android.opengl.GLES32: int GL_MULTISAMPLE_LINE_WIDTH_RANGE>
<android.opengl.GLES32: int GL_NO_RESET_NOTIFICATION>
<android.opengl.GLES32: int GL_OVERLAY>
<android.opengl.GLES32: int GL_PATCHES>
<android.opengl.GLES32: int GL_PATCH_VERTICES>
<android.opengl.GLES32: int GL_PRIMITIVES_GENERATED>
<android.opengl.GLES32: int GL_PRIMITIVE_BOUNDING_BOX>
<android.opengl.GLES32: int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED>
<android.opengl.GLES32: int GL_PROGRAM>
<android.opengl.GLES32: int GL_PROGRAM_PIPELINE>
<android.opengl.GLES32: int GL_QUADS>
<android.opengl.GLES32: int GL_QUERY>
<android.opengl.GLES32: int GL_REFERENCED_BY_GEOMETRY_SHADER>
<android.opengl.GLES32: int GL_REFERENCED_BY_TESS_CONTROL_SHADER>
<android.opengl.GLES32: int GL_REFERENCED_BY_TESS_EVALUATION_SHADER>
<android.opengl.GLES32: int GL_RESET_NOTIFICATION_STRATEGY>
<android.opengl.GLES32: int GL_SAMPLER>
<android.opengl.GLES32: int GL_SAMPLER_2D_MULTISAMPLE_ARRAY>
<android.opengl.GLES32: int GL_SAMPLER_BUFFER>
<android.opengl.GLES32: int GL_SAMPLER_CUBE_MAP_ARRAY>
<android.opengl.GLES32: int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW>
<android.opengl.GLES32: int GL_SAMPLE_SHADING>
<android.opengl.GLES32: int GL_SCREEN>
<android.opengl.GLES32: int GL_SHADER>
<android.opengl.GLES32: int GL_SOFTLIGHT>
<android.opengl.GLES32: int GL_STACK_OVERFLOW>
<android.opengl.GLES32: int GL_STACK_UNDERFLOW>
<android.opengl.GLES32: int GL_TESS_CONTROL_OUTPUT_VERTICES>
<android.opengl.GLES32: int GL_TESS_CONTROL_SHADER>
<android.opengl.GLES32: int GL_TESS_CONTROL_SHADER_BIT>
<android.opengl.GLES32: int GL_TESS_EVALUATION_SHADER>
<android.opengl.GLES32: int GL_TESS_EVALUATION_SHADER_BIT>
<android.opengl.GLES32: int GL_TESS_GEN_MODE>
<android.opengl.GLES32: int GL_TESS_GEN_POINT_MODE>
<android.opengl.GLES32: int GL_TESS_GEN_SPACING>
<android.opengl.GLES32: int GL_TESS_GEN_VERTEX_ORDER>
<android.opengl.GLES32: int GL_TEXTURE_2D_MULTISAMPLE_ARRAY>
<android.opengl.GLES32: int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY>
<android.opengl.GLES32: int GL_TEXTURE_BINDING_BUFFER>
<android.opengl.GLES32: int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY>
<android.opengl.GLES32: int GL_TEXTURE_BORDER_COLOR>
<android.opengl.GLES32: int GL_TEXTURE_BUFFER>
<android.opengl.GLES32: int GL_TEXTURE_BUFFER_BINDING>
<android.opengl.GLES32: int GL_TEXTURE_BUFFER_DATA_STORE_BINDING>
<android.opengl.GLES32: int GL_TEXTURE_BUFFER_OFFSET>
<android.opengl.GLES32: int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT>
<android.opengl.GLES32: int GL_TEXTURE_BUFFER_SIZE>
<android.opengl.GLES32: int GL_TEXTURE_CUBE_MAP_ARRAY>
<android.opengl.GLES32: int GL_TRIANGLES_ADJACENCY>
<android.opengl.GLES32: int GL_TRIANGLE_STRIP_ADJACENCY>
<android.opengl.GLES32: int GL_UNDEFINED_VERTEX>
<android.opengl.GLES32: int GL_UNKNOWN_CONTEXT_RESET>
<android.opengl.GLES32: int GL_UNSIGNED_INT_IMAGE_BUFFER>
<android.opengl.GLES32: int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY>
<android.opengl.GLES32: int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY>
<android.opengl.GLES32: int GL_UNSIGNED_INT_SAMPLER_BUFFER>
<android.opengl.GLES32: int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY>
<android.opengl.GLES32: int GL_VERTEX_ARRAY>
android.opengl.GLES32$DebugProc
<android.opengl.GLES32$DebugProc: void onMessage(int,int,int,int,java.lang.String)>
android.opengl.GLException
<android.opengl.GLException: void <init>(int)>
<android.opengl.GLException: void <init>(int,java.lang.String)>
android.opengl.GLSurfaceView
<android.opengl.GLSurfaceView: void <init>(android.content.Context)>
<android.opengl.GLSurfaceView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.opengl.GLSurfaceView: int getDebugFlags()>
<android.opengl.GLSurfaceView: boolean getPreserveEGLContextOnPause()>
<android.opengl.GLSurfaceView: int getRenderMode()>
<android.opengl.GLSurfaceView: void onPause()>
<android.opengl.GLSurfaceView: void onResume()>
<android.opengl.GLSurfaceView: void queueEvent(java.lang.Runnable)>
<android.opengl.GLSurfaceView: void requestRender()>
<android.opengl.GLSurfaceView: void setDebugFlags(int)>
<android.opengl.GLSurfaceView: void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser)>
<android.opengl.GLSurfaceView: void setEGLConfigChooser(boolean)>
<android.opengl.GLSurfaceView: void setEGLConfigChooser(int,int,int,int,int,int)>
<android.opengl.GLSurfaceView: void setEGLContextClientVersion(int)>
<android.opengl.GLSurfaceView: void setEGLContextFactory(android.opengl.GLSurfaceView$EGLContextFactory)>
<android.opengl.GLSurfaceView: void setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView$EGLWindowSurfaceFactory)>
<android.opengl.GLSurfaceView: void setGLWrapper(android.opengl.GLSurfaceView$GLWrapper)>
<android.opengl.GLSurfaceView: void setPreserveEGLContextOnPause(boolean)>
<android.opengl.GLSurfaceView: void setRenderMode(int)>
<android.opengl.GLSurfaceView: void setRenderer(android.opengl.GLSurfaceView$Renderer)>
<android.opengl.GLSurfaceView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>
<android.opengl.GLSurfaceView: void surfaceCreated(android.view.SurfaceHolder)>
<android.opengl.GLSurfaceView: void surfaceDestroyed(android.view.SurfaceHolder)>
<android.opengl.GLSurfaceView: void surfaceRedrawNeeded(android.view.SurfaceHolder)>
<android.opengl.GLSurfaceView: int DEBUG_CHECK_GL_ERROR>
<android.opengl.GLSurfaceView: int DEBUG_LOG_GL_CALLS>
<android.opengl.GLSurfaceView: int RENDERMODE_CONTINUOUSLY>
<android.opengl.GLSurfaceView: int RENDERMODE_WHEN_DIRTY>
android.opengl.GLSurfaceView$EGLConfigChooser
<android.opengl.GLSurfaceView$EGLConfigChooser: javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay)>
android.opengl.GLSurfaceView$EGLContextFactory
<android.opengl.GLSurfaceView$EGLContextFactory: javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)>
<android.opengl.GLSurfaceView$EGLContextFactory: void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)>
android.opengl.GLSurfaceView$EGLWindowSurfaceFactory
<android.opengl.GLSurfaceView$EGLWindowSurfaceFactory: javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object)>
<android.opengl.GLSurfaceView$EGLWindowSurfaceFactory: void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>
android.opengl.GLSurfaceView$GLWrapper
<android.opengl.GLSurfaceView$GLWrapper: javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL)>
android.opengl.GLSurfaceView$Renderer
<android.opengl.GLSurfaceView$Renderer: void onDrawFrame(javax.microedition.khronos.opengles.GL10)>
<android.opengl.GLSurfaceView$Renderer: void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int)>
<android.opengl.GLSurfaceView$Renderer: void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig)>
android.opengl.GLU
<android.opengl.GLU: void <init>()>
<android.opengl.GLU: java.lang.String gluErrorString(int)>
<android.opengl.GLU: void gluLookAt(javax.microedition.khronos.opengles.GL10,float,float,float,float,float,float,float,float,float)>
<android.opengl.GLU: void gluOrtho2D(javax.microedition.khronos.opengles.GL10,float,float,float,float)>
<android.opengl.GLU: void gluPerspective(javax.microedition.khronos.opengles.GL10,float,float,float,float)>
<android.opengl.GLU: int gluProject(float,float,float,float[],int,float[],int,int[],int,float[],int)>
<android.opengl.GLU: int gluUnProject(float,float,float,float[],int,float[],int,int[],int,float[],int)>
android.opengl.GLUtils
<android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>
<android.opengl.GLUtils: int getInternalFormat(android.graphics.Bitmap)>
<android.opengl.GLUtils: int getType(android.graphics.Bitmap)>
<android.opengl.GLUtils: void texImage2D(int,int,int,android.graphics.Bitmap,int)>
<android.opengl.GLUtils: void texImage2D(int,int,int,android.graphics.Bitmap,int,int)>
<android.opengl.GLUtils: void texImage2D(int,int,android.graphics.Bitmap,int)>
<android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap)>
<android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap,int,int)>
android.opengl.Matrix
<android.opengl.Matrix: void <init>()>
<android.opengl.Matrix: void frustumM(float[],int,float,float,float,float,float,float)>
<android.opengl.Matrix: boolean invertM(float[],int,float[],int)>
<android.opengl.Matrix: float length(float,float,float)>
<android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>
<android.opengl.Matrix: void multiplyMV(float[],int,float[],int,float[],int)>
<android.opengl.Matrix: void orthoM(float[],int,float,float,float,float,float,float)>
<android.opengl.Matrix: void perspectiveM(float[],int,float,float,float,float)>
<android.opengl.Matrix: void rotateM(float[],int,float[],int,float,float,float,float)>
<android.opengl.Matrix: void rotateM(float[],int,float,float,float,float)>
<android.opengl.Matrix: void scaleM(float[],int,float[],int,float,float,float)>
<android.opengl.Matrix: void scaleM(float[],int,float,float,float)>
<android.opengl.Matrix: void setIdentityM(float[],int)>
<android.opengl.Matrix: void setLookAtM(float[],int,float,float,float,float,float,float,float,float,float)>
<android.opengl.Matrix: void setRotateEulerM(float[],int,float,float,float)>
<android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)>
<android.opengl.Matrix: void translateM(float[],int,float[],int,float,float,float)>
<android.opengl.Matrix: void translateM(float[],int,float,float,float)>
<android.opengl.Matrix: void transposeM(float[],int,float[],int)>
android.opengl.Visibility
<android.opengl.Visibility: void <init>()>
<android.opengl.Visibility: void computeBoundingSphere(float[],int,int,float[],int)>
<android.opengl.Visibility: int frustumCullSpheres(float[],int,float[],int,int,int[],int,int)>
<android.opengl.Visibility: int visibilityTest(float[],int,float[],int,char[],int,int)>
android.os.AsyncTask
<android.os.AsyncTask: void <init>()>
<android.os.AsyncTask: boolean cancel(boolean)>
<android.os.AsyncTask: java.lang.Object doInBackground(java.lang.Object[])>
<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
<android.os.AsyncTask: void execute(java.lang.Runnable)>
<android.os.AsyncTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>
<android.os.AsyncTask: java.lang.Object get()>
<android.os.AsyncTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)>
<android.os.AsyncTask: android.os.AsyncTask$Status getStatus()>
<android.os.AsyncTask: boolean isCancelled()>
<android.os.AsyncTask: void onCancelled(java.lang.Object)>
<android.os.AsyncTask: void onCancelled()>
<android.os.AsyncTask: void onPostExecute(java.lang.Object)>
<android.os.AsyncTask: void onPreExecute()>
<android.os.AsyncTask: void onProgressUpdate(java.lang.Object[])>
<android.os.AsyncTask: void publishProgress(java.lang.Object[])>
<android.os.AsyncTask: java.util.concurrent.Executor SERIAL_EXECUTOR>
<android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>
android.os.AsyncTask$Status
<android.os.AsyncTask$Status: android.os.AsyncTask$Status FINISHED>
<android.os.AsyncTask$Status: android.os.AsyncTask$Status PENDING>
<android.os.AsyncTask$Status: android.os.AsyncTask$Status RUNNING>
android.os.BadParcelableException
<android.os.BadParcelableException: void <init>(java.lang.String)>
<android.os.BadParcelableException: void <init>(java.lang.Exception)>
android.os.BaseBundle
<android.os.BaseBundle: void clear()>
<android.os.BaseBundle: boolean containsKey(java.lang.String)>
<android.os.BaseBundle: java.lang.Object get(java.lang.String)>
<android.os.BaseBundle: boolean getBoolean(java.lang.String)>
<android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>
<android.os.BaseBundle: boolean[] getBooleanArray(java.lang.String)>
<android.os.BaseBundle: double getDouble(java.lang.String)>
<android.os.BaseBundle: double getDouble(java.lang.String,double)>
<android.os.BaseBundle: double[] getDoubleArray(java.lang.String)>
<android.os.BaseBundle: int getInt(java.lang.String)>
<android.os.BaseBundle: int getInt(java.lang.String,int)>
<android.os.BaseBundle: int[] getIntArray(java.lang.String)>
<android.os.BaseBundle: long getLong(java.lang.String)>
<android.os.BaseBundle: long getLong(java.lang.String,long)>
<android.os.BaseBundle: long[] getLongArray(java.lang.String)>
<android.os.BaseBundle: java.lang.String getString(java.lang.String)>
<android.os.BaseBundle: java.lang.String getString(java.lang.String,java.lang.String)>
<android.os.BaseBundle: java.lang.String[] getStringArray(java.lang.String)>
<android.os.BaseBundle: boolean isEmpty()>
<android.os.BaseBundle: java.util.Set keySet()>
<android.os.BaseBundle: void putAll(android.os.PersistableBundle)>
<android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>
<android.os.BaseBundle: void putBooleanArray(java.lang.String,boolean[])>
<android.os.BaseBundle: void putDouble(java.lang.String,double)>
<android.os.BaseBundle: void putDoubleArray(java.lang.String,double[])>
<android.os.BaseBundle: void putInt(java.lang.String,int)>
<android.os.BaseBundle: void putIntArray(java.lang.String,int[])>
<android.os.BaseBundle: void putLong(java.lang.String,long)>
<android.os.BaseBundle: void putLongArray(java.lang.String,long[])>
<android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>
<android.os.BaseBundle: void putStringArray(java.lang.String,java.lang.String[])>
<android.os.BaseBundle: void remove(java.lang.String)>
<android.os.BaseBundle: int size()>
android.os.BatteryManager
<android.os.BatteryManager: long computeChargeTimeRemaining()>
<android.os.BatteryManager: int getIntProperty(int)>
<android.os.BatteryManager: long getLongProperty(int)>
<android.os.BatteryManager: boolean isCharging()>
<android.os.BatteryManager: java.lang.String ACTION_CHARGING>
<android.os.BatteryManager: java.lang.String ACTION_DISCHARGING>
<android.os.BatteryManager: int BATTERY_HEALTH_COLD>
<android.os.BatteryManager: int BATTERY_HEALTH_DEAD>
<android.os.BatteryManager: int BATTERY_HEALTH_GOOD>
<android.os.BatteryManager: int BATTERY_HEALTH_OVERHEAT>
<android.os.BatteryManager: int BATTERY_HEALTH_OVER_VOLTAGE>
<android.os.BatteryManager: int BATTERY_HEALTH_UNKNOWN>
<android.os.BatteryManager: int BATTERY_HEALTH_UNSPECIFIED_FAILURE>
<android.os.BatteryManager: int BATTERY_PLUGGED_AC>
<android.os.BatteryManager: int BATTERY_PLUGGED_DOCK>
<android.os.BatteryManager: int BATTERY_PLUGGED_USB>
<android.os.BatteryManager: int BATTERY_PLUGGED_WIRELESS>
<android.os.BatteryManager: int BATTERY_PROPERTY_CAPACITY>
<android.os.BatteryManager: int BATTERY_PROPERTY_CHARGE_COUNTER>
<android.os.BatteryManager: int BATTERY_PROPERTY_CURRENT_AVERAGE>
<android.os.BatteryManager: int BATTERY_PROPERTY_CURRENT_NOW>
<android.os.BatteryManager: int BATTERY_PROPERTY_ENERGY_COUNTER>
<android.os.BatteryManager: int BATTERY_PROPERTY_STATUS>
<android.os.BatteryManager: int BATTERY_STATUS_CHARGING>
<android.os.BatteryManager: int BATTERY_STATUS_DISCHARGING>
<android.os.BatteryManager: int BATTERY_STATUS_FULL>
<android.os.BatteryManager: int BATTERY_STATUS_NOT_CHARGING>
<android.os.BatteryManager: int BATTERY_STATUS_UNKNOWN>
<android.os.BatteryManager: java.lang.String EXTRA_BATTERY_LOW>
<android.os.BatteryManager: java.lang.String EXTRA_HEALTH>
<android.os.BatteryManager: java.lang.String EXTRA_ICON_SMALL>
<android.os.BatteryManager: java.lang.String EXTRA_LEVEL>
<android.os.BatteryManager: java.lang.String EXTRA_PLUGGED>
<android.os.BatteryManager: java.lang.String EXTRA_PRESENT>
<android.os.BatteryManager: java.lang.String EXTRA_SCALE>
<android.os.BatteryManager: java.lang.String EXTRA_STATUS>
<android.os.BatteryManager: java.lang.String EXTRA_TECHNOLOGY>
<android.os.BatteryManager: java.lang.String EXTRA_TEMPERATURE>
<android.os.BatteryManager: java.lang.String EXTRA_VOLTAGE>
android.os.Binder
<android.os.Binder: void <init>()>
<android.os.Binder: void <init>(java.lang.String)>
<android.os.Binder: void attachInterface(android.os.IInterface,java.lang.String)>
<android.os.Binder: long clearCallingIdentity()>
<android.os.Binder: long clearCallingWorkSource()>
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])>
<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.os.Binder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])>
<android.os.Binder: void flushPendingCommands()>
<android.os.Binder: int getCallingPid()>
<android.os.Binder: int getCallingUid()>
<android.os.Binder: int getCallingUidOrThrow()>
<android.os.Binder: android.os.UserHandle getCallingUserHandle()>
<android.os.Binder: int getCallingWorkSourceUid()>
<android.os.Binder: java.lang.String getInterfaceDescriptor()>
<android.os.Binder: boolean isBinderAlive()>
<android.os.Binder: void joinThreadPool()>
<android.os.Binder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>
<android.os.Binder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.os.Binder: boolean pingBinder()>
<android.os.Binder: android.os.IInterface queryLocalInterface(java.lang.String)>
<android.os.Binder: void restoreCallingIdentity(long)>
<android.os.Binder: void restoreCallingWorkSource(long)>
<android.os.Binder: long setCallingWorkSourceUid(int)>
<android.os.Binder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>
<android.os.Binder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>
android.os.BugreportManager
<android.os.BugreportManager: void cancelBugreport()>
<android.os.BugreportManager: void startConnectivityBugreport(android.os.ParcelFileDescriptor,java.util.concurrent.Executor,android.os.BugreportManager$BugreportCallback)>
android.os.BugreportManager$BugreportCallback
<android.os.BugreportManager$BugreportCallback: void <init>()>
<android.os.BugreportManager$BugreportCallback: void onEarlyReportFinished()>
<android.os.BugreportManager$BugreportCallback: void onError(int)>
<android.os.BugreportManager$BugreportCallback: void onFinished()>
<android.os.BugreportManager$BugreportCallback: void onProgress(float)>
<android.os.BugreportManager$BugreportCallback: int BUGREPORT_ERROR_ANOTHER_REPORT_IN_PROGRESS>
<android.os.BugreportManager$BugreportCallback: int BUGREPORT_ERROR_INVALID_INPUT>
<android.os.BugreportManager$BugreportCallback: int BUGREPORT_ERROR_RUNTIME>
<android.os.BugreportManager$BugreportCallback: int BUGREPORT_ERROR_USER_CONSENT_TIMED_OUT>
<android.os.BugreportManager$BugreportCallback: int BUGREPORT_ERROR_USER_DENIED_CONSENT>
android.os.Build
<android.os.Build: void <init>()>
<android.os.Build: java.util.List getFingerprintedPartitions()>
<android.os.Build: java.lang.String getRadioVersion()>
<android.os.Build: java.lang.String getSerial()>
<android.os.Build: java.lang.String BOARD>
<android.os.Build: java.lang.String BOOTLOADER>
<android.os.Build: java.lang.String BRAND>
<android.os.Build: java.lang.String CPU_ABI>
<android.os.Build: java.lang.String CPU_ABI2>
<android.os.Build: java.lang.String DEVICE>
<android.os.Build: java.lang.String DISPLAY>
<android.os.Build: java.lang.String FINGERPRINT>
<android.os.Build: java.lang.String HARDWARE>
<android.os.Build: java.lang.String HOST>
<android.os.Build: java.lang.String ID>
<android.os.Build: java.lang.String MANUFACTURER>
<android.os.Build: java.lang.String MODEL>
<android.os.Build: java.lang.String ODM_SKU>
<android.os.Build: java.lang.String PRODUCT>
<android.os.Build: java.lang.String RADIO>
<android.os.Build: java.lang.String SERIAL>
<android.os.Build: java.lang.String SKU>
<android.os.Build: java.lang.String SOC_MANUFACTURER>
<android.os.Build: java.lang.String SOC_MODEL>
<android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>
<android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>
<android.os.Build: java.lang.String[] SUPPORTED_ABIS>
<android.os.Build: java.lang.String TAGS>
<android.os.Build: long TIME>
<android.os.Build: java.lang.String TYPE>
<android.os.Build: java.lang.String UNKNOWN>
<android.os.Build: java.lang.String USER>
android.os.Build$Partition
<android.os.Build$Partition: long getBuildTimeMillis()>
<android.os.Build$Partition: java.lang.String getFingerprint()>
<android.os.Build$Partition: java.lang.String getName()>
<android.os.Build$Partition: java.lang.String PARTITION_NAME_SYSTEM>
android.os.Build$VERSION
<android.os.Build$VERSION: void <init>()>
<android.os.Build$VERSION: java.lang.String BASE_OS>
<android.os.Build$VERSION: java.lang.String CODENAME>
<android.os.Build$VERSION: java.lang.String INCREMENTAL>
<android.os.Build$VERSION: int MEDIA_PERFORMANCE_CLASS>
<android.os.Build$VERSION: int PREVIEW_SDK_INT>
<android.os.Build$VERSION: java.lang.String RELEASE>
<android.os.Build$VERSION: java.lang.String RELEASE_OR_CODENAME>
<android.os.Build$VERSION: java.lang.String RELEASE_OR_PREVIEW_DISPLAY>
<android.os.Build$VERSION: java.lang.String SDK>
<android.os.Build$VERSION: int SDK_INT>
<android.os.Build$VERSION: java.lang.String SECURITY_PATCH>
android.os.Build$VERSION_CODES
<android.os.Build$VERSION_CODES: void <init>()>
<android.os.Build$VERSION_CODES: int BASE>
<android.os.Build$VERSION_CODES: int BASE_1_1>
<android.os.Build$VERSION_CODES: int CUPCAKE>
<android.os.Build$VERSION_CODES: int CUR_DEVELOPMENT>
<android.os.Build$VERSION_CODES: int DONUT>
<android.os.Build$VERSION_CODES: int ECLAIR>
<android.os.Build$VERSION_CODES: int ECLAIR_0_1>
<android.os.Build$VERSION_CODES: int ECLAIR_MR1>
<android.os.Build$VERSION_CODES: int FROYO>
<android.os.Build$VERSION_CODES: int GINGERBREAD>
<android.os.Build$VERSION_CODES: int GINGERBREAD_MR1>
<android.os.Build$VERSION_CODES: int HONEYCOMB>
<android.os.Build$VERSION_CODES: int HONEYCOMB_MR1>
<android.os.Build$VERSION_CODES: int HONEYCOMB_MR2>
<android.os.Build$VERSION_CODES: int ICE_CREAM_SANDWICH>
<android.os.Build$VERSION_CODES: int ICE_CREAM_SANDWICH_MR1>
<android.os.Build$VERSION_CODES: int JELLY_BEAN>
<android.os.Build$VERSION_CODES: int JELLY_BEAN_MR1>
<android.os.Build$VERSION_CODES: int JELLY_BEAN_MR2>
<android.os.Build$VERSION_CODES: int KITKAT>
<android.os.Build$VERSION_CODES: int KITKAT_WATCH>
<android.os.Build$VERSION_CODES: int LOLLIPOP>
<android.os.Build$VERSION_CODES: int LOLLIPOP_MR1>
<android.os.Build$VERSION_CODES: int M>
<android.os.Build$VERSION_CODES: int N>
<android.os.Build$VERSION_CODES: int N_MR1>
<android.os.Build$VERSION_CODES: int O>
<android.os.Build$VERSION_CODES: int O_MR1>
<android.os.Build$VERSION_CODES: int P>
<android.os.Build$VERSION_CODES: int Q>
<android.os.Build$VERSION_CODES: int R>
<android.os.Build$VERSION_CODES: int S>
<android.os.Build$VERSION_CODES: int S_V2>
<android.os.Build$VERSION_CODES: int TIRAMISU>
android.os.Bundle
<android.os.Bundle: void <init>()>
<android.os.Bundle: void <init>(java.lang.ClassLoader)>
<android.os.Bundle: void <init>(int)>
<android.os.Bundle: void <init>(android.os.Bundle)>
<android.os.Bundle: void <init>(android.os.PersistableBundle)>
<android.os.Bundle: java.lang.Object clone()>
<android.os.Bundle: android.os.Bundle deepCopy()>
<android.os.Bundle: int describeContents()>
<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)>
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>
<android.os.Bundle: byte getByte(java.lang.String)>
<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)>
<android.os.Bundle: byte[] getByteArray(java.lang.String)>
<android.os.Bundle: char getChar(java.lang.String)>
<android.os.Bundle: char getChar(java.lang.String,char)>
<android.os.Bundle: char[] getCharArray(java.lang.String)>
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)>
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)>
<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)>
<android.os.Bundle: java.lang.ClassLoader getClassLoader()>
<android.os.Bundle: float getFloat(java.lang.String)>
<android.os.Bundle: float getFloat(java.lang.String,float)>
<android.os.Bundle: float[] getFloatArray(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)>
<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>
<android.os.Bundle: java.lang.Object getParcelable(java.lang.String,java.lang.Class)>
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)>
<android.os.Bundle: java.lang.Object[] getParcelableArray(java.lang.String,java.lang.Class)>
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String,java.lang.Class)>
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String,java.lang.Class)>
<android.os.Bundle: short getShort(java.lang.String)>
<android.os.Bundle: short getShort(java.lang.String,short)>
<android.os.Bundle: short[] getShortArray(java.lang.String)>
<android.os.Bundle: android.util.Size getSize(java.lang.String)>
<android.os.Bundle: android.util.SizeF getSizeF(java.lang.String)>
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String,java.lang.Class)>
<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>
<android.os.Bundle: boolean hasFileDescriptors()>
<android.os.Bundle: void putAll(android.os.Bundle)>
<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>
<android.os.Bundle: void putByte(java.lang.String,byte)>
<android.os.Bundle: void putByteArray(java.lang.String,byte[])>
<android.os.Bundle: void putChar(java.lang.String,char)>
<android.os.Bundle: void putCharArray(java.lang.String,char[])>
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>
<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])>
<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void putFloat(java.lang.String,float)>
<android.os.Bundle: void putFloatArray(java.lang.String,float[])>
<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>
<android.os.Bundle: void putShort(java.lang.String,short)>
<android.os.Bundle: void putShortArray(java.lang.String,short[])>
<android.os.Bundle: void putSize(java.lang.String,android.util.Size)>
<android.os.Bundle: void putSizeF(java.lang.String,android.util.SizeF)>
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void readFromParcel(android.os.Parcel)>
<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>
<android.os.Bundle: void writeToParcel(android.os.Parcel,int)>
<android.os.Bundle: android.os.Parcelable$Creator CREATOR>
<android.os.Bundle: android.os.Bundle EMPTY>
android.os.CancellationSignal
<android.os.CancellationSignal: void <init>()>
<android.os.CancellationSignal: void cancel()>
<android.os.CancellationSignal: boolean isCanceled()>
<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>
<android.os.CancellationSignal: void throwIfCanceled()>
android.os.CancellationSignal$OnCancelListener
<android.os.CancellationSignal$OnCancelListener: void onCancel()>
android.os.CombinedVibration
<android.os.CombinedVibration: android.os.CombinedVibration createParallel(android.os.VibrationEffect)>
<android.os.CombinedVibration: int describeContents()>
<android.os.CombinedVibration: android.os.CombinedVibration$ParallelCombination startParallel()>
<android.os.CombinedVibration: android.os.Parcelable$Creator CREATOR>
android.os.CombinedVibration$ParallelCombination
<android.os.CombinedVibration$ParallelCombination: android.os.CombinedVibration$ParallelCombination addVibrator(int,android.os.VibrationEffect)>
<android.os.CombinedVibration$ParallelCombination: android.os.CombinedVibration combine()>
android.os.ConditionVariable
<android.os.ConditionVariable: void <init>()>
<android.os.ConditionVariable: void <init>(boolean)>
<android.os.ConditionVariable: void block()>
<android.os.ConditionVariable: boolean block(long)>
<android.os.ConditionVariable: void close()>
<android.os.ConditionVariable: void open()>
android.os.CountDownTimer
<android.os.CountDownTimer: void <init>(long,long)>
<android.os.CountDownTimer: void cancel()>
<android.os.CountDownTimer: void onFinish()>
<android.os.CountDownTimer: void onTick(long)>
<android.os.CountDownTimer: android.os.CountDownTimer start()>
android.os.CpuUsageInfo
<android.os.CpuUsageInfo: int describeContents()>
<android.os.CpuUsageInfo: long getActive()>
<android.os.CpuUsageInfo: long getTotal()>
<android.os.CpuUsageInfo: void writeToParcel(android.os.Parcel,int)>
<android.os.CpuUsageInfo: android.os.Parcelable$Creator CREATOR>
android.os.DeadObjectException
<android.os.DeadObjectException: void <init>()>
<android.os.DeadObjectException: void <init>(java.lang.String)>
android.os.DeadSystemException
<android.os.DeadSystemException: void <init>()>
android.os.Debug
<android.os.Debug: void attachJvmtiAgent(java.lang.String,java.lang.String,java.lang.ClassLoader)>
<android.os.Debug: void changeDebugPort(int)>
<android.os.Debug: void dumpHprofData(java.lang.String)>
<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])>
<android.os.Debug: void enableEmulatorTraceOutput()>
<android.os.Debug: int getBinderDeathObjectCount()>
<android.os.Debug: int getBinderLocalObjectCount()>
<android.os.Debug: int getBinderProxyObjectCount()>
<android.os.Debug: int getBinderReceivedTransactions()>
<android.os.Debug: int getBinderSentTransactions()>
<android.os.Debug: int getGlobalAllocCount()>
<android.os.Debug: int getGlobalAllocSize()>
<android.os.Debug: int getGlobalClassInitCount()>
<android.os.Debug: int getGlobalClassInitTime()>
<android.os.Debug: int getGlobalExternalAllocCount()>
<android.os.Debug: int getGlobalExternalAllocSize()>
<android.os.Debug: int getGlobalExternalFreedCount()>
<android.os.Debug: int getGlobalExternalFreedSize()>
<android.os.Debug: int getGlobalFreedCount()>
<android.os.Debug: int getGlobalFreedSize()>
<android.os.Debug: int getGlobalGcInvocationCount()>
<android.os.Debug: int getLoadedClassCount()>
<android.os.Debug: void getMemoryInfo(android.os.Debug$MemoryInfo)>
<android.os.Debug: long getNativeHeapAllocatedSize()>
<android.os.Debug: long getNativeHeapFreeSize()>
<android.os.Debug: long getNativeHeapSize()>
<android.os.Debug: long getPss()>
<android.os.Debug: java.lang.String getRuntimeStat(java.lang.String)>
<android.os.Debug: java.util.Map getRuntimeStats()>
<android.os.Debug: int getThreadAllocCount()>
<android.os.Debug: int getThreadAllocSize()>
<android.os.Debug: int getThreadExternalAllocCount()>
<android.os.Debug: int getThreadExternalAllocSize()>
<android.os.Debug: int getThreadGcInvocationCount()>
<android.os.Debug: boolean isDebuggerConnected()>
<android.os.Debug: void printLoadedClasses(int)>
<android.os.Debug: void resetAllCounts()>
<android.os.Debug: void resetGlobalAllocCount()>
<android.os.Debug: void resetGlobalAllocSize()>
<android.os.Debug: void resetGlobalClassInitCount()>
<android.os.Debug: void resetGlobalClassInitTime()>
<android.os.Debug: void resetGlobalExternalAllocCount()>
<android.os.Debug: void resetGlobalExternalAllocSize()>
<android.os.Debug: void resetGlobalExternalFreedCount()>
<android.os.Debug: void resetGlobalExternalFreedSize()>
<android.os.Debug: void resetGlobalFreedCount()>
<android.os.Debug: void resetGlobalFreedSize()>
<android.os.Debug: void resetGlobalGcInvocationCount()>
<android.os.Debug: void resetThreadAllocCount()>
<android.os.Debug: void resetThreadAllocSize()>
<android.os.Debug: void resetThreadExternalAllocCount()>
<android.os.Debug: void resetThreadExternalAllocSize()>
<android.os.Debug: void resetThreadGcInvocationCount()>
<android.os.Debug: int setAllocationLimit(int)>
<android.os.Debug: int setGlobalAllocationLimit(int)>
<android.os.Debug: void startAllocCounting()>
<android.os.Debug: void startMethodTracing()>
<android.os.Debug: void startMethodTracing(java.lang.String)>
<android.os.Debug: void startMethodTracing(java.lang.String,int)>
<android.os.Debug: void startMethodTracing(java.lang.String,int,int)>
<android.os.Debug: void startMethodTracingSampling(java.lang.String,int,int)>
<android.os.Debug: void startNativeTracing()>
<android.os.Debug: void stopAllocCounting()>
<android.os.Debug: void stopMethodTracing()>
<android.os.Debug: void stopNativeTracing()>
<android.os.Debug: long threadCpuTimeNanos()>
<android.os.Debug: void waitForDebugger()>
<android.os.Debug: boolean waitingForDebugger()>
<android.os.Debug: int SHOW_CLASSLOADER>
<android.os.Debug: int SHOW_FULL_DETAIL>
<android.os.Debug: int SHOW_INITIALIZED>
<android.os.Debug: int TRACE_COUNT_ALLOCS>
android.os.Debug$InstructionCount
<android.os.Debug$InstructionCount: void <init>()>
<android.os.Debug$InstructionCount: boolean collect()>
<android.os.Debug$InstructionCount: int globalMethodInvocations()>
<android.os.Debug$InstructionCount: int globalTotal()>
<android.os.Debug$InstructionCount: boolean resetAndStart()>
android.os.Debug$MemoryInfo
<android.os.Debug$MemoryInfo: void <init>()>
<android.os.Debug$MemoryInfo: int describeContents()>
<android.os.Debug$MemoryInfo: java.lang.String getMemoryStat(java.lang.String)>
<android.os.Debug$MemoryInfo: java.util.Map getMemoryStats()>
<android.os.Debug$MemoryInfo: int getTotalPrivateClean()>
<android.os.Debug$MemoryInfo: int getTotalPrivateDirty()>
<android.os.Debug$MemoryInfo: int getTotalPss()>
<android.os.Debug$MemoryInfo: int getTotalSharedClean()>
<android.os.Debug$MemoryInfo: int getTotalSharedDirty()>
<android.os.Debug$MemoryInfo: int getTotalSwappablePss()>
<android.os.Debug$MemoryInfo: void readFromParcel(android.os.Parcel)>
<android.os.Debug$MemoryInfo: void writeToParcel(android.os.Parcel,int)>
<android.os.Debug$MemoryInfo: android.os.Parcelable$Creator CREATOR>
<android.os.Debug$MemoryInfo: int dalvikPrivateDirty>
<android.os.Debug$MemoryInfo: int dalvikPss>
<android.os.Debug$MemoryInfo: int dalvikSharedDirty>
<android.os.Debug$MemoryInfo: int nativePrivateDirty>
<android.os.Debug$MemoryInfo: int nativePss>
<android.os.Debug$MemoryInfo: int nativeSharedDirty>
<android.os.Debug$MemoryInfo: int otherPrivateDirty>
<android.os.Debug$MemoryInfo: int otherPss>
<android.os.Debug$MemoryInfo: int otherSharedDirty>
android.os.DropBoxManager
<android.os.DropBoxManager: void <init>()>
<android.os.DropBoxManager: void addData(java.lang.String,byte[],int)>
<android.os.DropBoxManager: void addFile(java.lang.String,java.io.File,int)>
<android.os.DropBoxManager: void addText(java.lang.String,java.lang.String)>
<android.os.DropBoxManager: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)>
<android.os.DropBoxManager: boolean isTagEnabled(java.lang.String)>
<android.os.DropBoxManager: java.lang.String ACTION_DROPBOX_ENTRY_ADDED>
<android.os.DropBoxManager: java.lang.String EXTRA_DROPPED_COUNT>
<android.os.DropBoxManager: java.lang.String EXTRA_TAG>
<android.os.DropBoxManager: java.lang.String EXTRA_TIME>
<android.os.DropBoxManager: int IS_EMPTY>
<android.os.DropBoxManager: int IS_GZIPPED>
<android.os.DropBoxManager: int IS_TEXT>
android.os.DropBoxManager$Entry
<android.os.DropBoxManager$Entry: void <init>(java.lang.String,long)>
<android.os.DropBoxManager$Entry: void <init>(java.lang.String,long,java.lang.String)>
<android.os.DropBoxManager$Entry: void <init>(java.lang.String,long,byte[],int)>
<android.os.DropBoxManager$Entry: void <init>(java.lang.String,long,android.os.ParcelFileDescriptor,int)>
<android.os.DropBoxManager$Entry: void <init>(java.lang.String,long,java.io.File,int)>
<android.os.DropBoxManager$Entry: void close()>
<android.os.DropBoxManager$Entry: int describeContents()>
<android.os.DropBoxManager$Entry: int getFlags()>
<android.os.DropBoxManager$Entry: java.io.InputStream getInputStream()>
<android.os.DropBoxManager$Entry: java.lang.String getTag()>
<android.os.DropBoxManager$Entry: java.lang.String getText(int)>
<android.os.DropBoxManager$Entry: long getTimeMillis()>
<android.os.DropBoxManager$Entry: void writeToParcel(android.os.Parcel,int)>
<android.os.DropBoxManager$Entry: android.os.Parcelable$Creator CREATOR>
android.os.Environment
<android.os.Environment: void <init>()>
<android.os.Environment: java.io.File getDataDirectory()>
<android.os.Environment: java.io.File getDownloadCacheDirectory()>
<android.os.Environment: java.io.File getExternalStorageDirectory()>
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>
<android.os.Environment: java.lang.String getExternalStorageState()>
<android.os.Environment: java.lang.String getExternalStorageState(java.io.File)>
<android.os.Environment: java.io.File getRootDirectory()>
<android.os.Environment: java.io.File getStorageDirectory()>
<android.os.Environment: java.lang.String getStorageState(java.io.File)>
<android.os.Environment: boolean isExternalStorageEmulated()>
<android.os.Environment: boolean isExternalStorageEmulated(java.io.File)>
<android.os.Environment: boolean isExternalStorageLegacy()>
<android.os.Environment: boolean isExternalStorageLegacy(java.io.File)>
<android.os.Environment: boolean isExternalStorageManager()>
<android.os.Environment: boolean isExternalStorageManager(java.io.File)>
<android.os.Environment: boolean isExternalStorageRemovable()>
<android.os.Environment: boolean isExternalStorageRemovable(java.io.File)>
<android.os.Environment: java.lang.String DIRECTORY_ALARMS>
<android.os.Environment: java.lang.String DIRECTORY_AUDIOBOOKS>
<android.os.Environment: java.lang.String DIRECTORY_DCIM>
<android.os.Environment: java.lang.String DIRECTORY_DOCUMENTS>
<android.os.Environment: java.lang.String DIRECTORY_DOWNLOADS>
<android.os.Environment: java.lang.String DIRECTORY_MOVIES>
<android.os.Environment: java.lang.String DIRECTORY_MUSIC>
<android.os.Environment: java.lang.String DIRECTORY_NOTIFICATIONS>
<android.os.Environment: java.lang.String DIRECTORY_PICTURES>
<android.os.Environment: java.lang.String DIRECTORY_PODCASTS>
<android.os.Environment: java.lang.String DIRECTORY_RECORDINGS>
<android.os.Environment: java.lang.String DIRECTORY_RINGTONES>
<android.os.Environment: java.lang.String DIRECTORY_SCREENSHOTS>
<android.os.Environment: java.lang.String MEDIA_BAD_REMOVAL>
<android.os.Environment: java.lang.String MEDIA_CHECKING>
<android.os.Environment: java.lang.String MEDIA_EJECTING>
<android.os.Environment: java.lang.String MEDIA_MOUNTED>
<android.os.Environment: java.lang.String MEDIA_MOUNTED_READ_ONLY>
<android.os.Environment: java.lang.String MEDIA_NOFS>
<android.os.Environment: java.lang.String MEDIA_REMOVED>
<android.os.Environment: java.lang.String MEDIA_SHARED>
<android.os.Environment: java.lang.String MEDIA_UNKNOWN>
<android.os.Environment: java.lang.String MEDIA_UNMOUNTABLE>
<android.os.Environment: java.lang.String MEDIA_UNMOUNTED>
android.os.FileObserver
<android.os.FileObserver: void <init>(java.lang.String)>
<android.os.FileObserver: void <init>(java.io.File)>
<android.os.FileObserver: void <init>(java.util.List)>
<android.os.FileObserver: void <init>(java.lang.String,int)>
<android.os.FileObserver: void <init>(java.io.File,int)>
<android.os.FileObserver: void <init>(java.util.List,int)>
<android.os.FileObserver: void finalize()>
<android.os.FileObserver: void onEvent(int,java.lang.String)>
<android.os.FileObserver: void startWatching()>
<android.os.FileObserver: void stopWatching()>
<android.os.FileObserver: int ACCESS>
<android.os.FileObserver: int ALL_EVENTS>
<android.os.FileObserver: int ATTRIB>
<android.os.FileObserver: int CLOSE_NOWRITE>
<android.os.FileObserver: int CLOSE_WRITE>
<android.os.FileObserver: int CREATE>
<android.os.FileObserver: int DELETE>
<android.os.FileObserver: int DELETE_SELF>
<android.os.FileObserver: int MODIFY>
<android.os.FileObserver: int MOVED_FROM>
<android.os.FileObserver: int MOVED_TO>
<android.os.FileObserver: int MOVE_SELF>
<android.os.FileObserver: int OPEN>
android.os.FileUriExposedException
<android.os.FileUriExposedException: void <init>(java.lang.String)>
android.os.FileUtils
<android.os.FileUtils: void closeQuietly(java.lang.AutoCloseable)>
<android.os.FileUtils: void closeQuietly(java.io.FileDescriptor)>
<android.os.FileUtils: long copy(java.io.InputStream,java.io.OutputStream)>
<android.os.FileUtils: long copy(java.io.InputStream,java.io.OutputStream,android.os.CancellationSignal,java.util.concurrent.Executor,android.os.FileUtils$ProgressListener)>
<android.os.FileUtils: long copy(java.io.FileDescriptor,java.io.FileDescriptor)>
<android.os.FileUtils: long copy(java.io.FileDescriptor,java.io.FileDescriptor,android.os.CancellationSignal,java.util.concurrent.Executor,android.os.FileUtils$ProgressListener)>
android.os.FileUtils$ProgressListener
<android.os.FileUtils$ProgressListener: void onProgress(long)>
android.os.Handler
<android.os.Handler: void <init>()>
<android.os.Handler: void <init>(android.os.Handler$Callback)>
<android.os.Handler: void <init>(android.os.Looper)>
<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>
<android.os.Handler: android.os.Handler createAsync(android.os.Looper)>
<android.os.Handler: android.os.Handler createAsync(android.os.Looper,android.os.Handler$Callback)>
<android.os.Handler: void dispatchMessage(android.os.Message)>
<android.os.Handler: void dump(android.util.Printer,java.lang.String)>
<android.os.Handler: android.os.Looper getLooper()>
<android.os.Handler: java.lang.String getMessageName(android.os.Message)>
<android.os.Handler: void handleMessage(android.os.Message)>
<android.os.Handler: boolean hasCallbacks(java.lang.Runnable)>
<android.os.Handler: boolean hasMessages(int)>
<android.os.Handler: boolean hasMessages(int,java.lang.Object)>
<android.os.Handler: android.os.Message obtainMessage()>
<android.os.Handler: android.os.Message obtainMessage(int)>
<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>
<android.os.Handler: android.os.Message obtainMessage(int,int,int)>
<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>
<android.os.Handler: boolean post(java.lang.Runnable)>
<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>
<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>
<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)>
<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>
<android.os.Handler: boolean postDelayed(java.lang.Runnable,java.lang.Object,long)>
<android.os.Handler: void removeCallbacks(java.lang.Runnable)>
<android.os.Handler: void removeCallbacks(java.lang.Runnable,java.lang.Object)>
<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>
<android.os.Handler: void removeMessages(int)>
<android.os.Handler: void removeMessages(int,java.lang.Object)>
<android.os.Handler: boolean sendEmptyMessage(int)>
<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)>
<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>
<android.os.Handler: boolean sendMessage(android.os.Message)>
<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>
<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>
<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>
android.os.Handler$Callback
<android.os.Handler$Callback: boolean handleMessage(android.os.Message)>
android.os.HandlerThread
<android.os.HandlerThread: void <init>(java.lang.String)>
<android.os.HandlerThread: void <init>(java.lang.String,int)>
<android.os.HandlerThread: android.os.Looper getLooper()>
<android.os.HandlerThread: int getThreadId()>
<android.os.HandlerThread: void onLooperPrepared()>
<android.os.HandlerThread: boolean quit()>
<android.os.HandlerThread: boolean quitSafely()>
android.os.HardwarePropertiesManager
<android.os.HardwarePropertiesManager: android.os.CpuUsageInfo[] getCpuUsages()>
<android.os.HardwarePropertiesManager: float[] getDeviceTemperatures(int,int)>
<android.os.HardwarePropertiesManager: float[] getFanSpeeds()>
<android.os.HardwarePropertiesManager: int DEVICE_TEMPERATURE_BATTERY>
<android.os.HardwarePropertiesManager: int DEVICE_TEMPERATURE_CPU>
<android.os.HardwarePropertiesManager: int DEVICE_TEMPERATURE_GPU>
<android.os.HardwarePropertiesManager: int DEVICE_TEMPERATURE_SKIN>
<android.os.HardwarePropertiesManager: int TEMPERATURE_CURRENT>
<android.os.HardwarePropertiesManager: int TEMPERATURE_SHUTDOWN>
<android.os.HardwarePropertiesManager: int TEMPERATURE_THROTTLING>
<android.os.HardwarePropertiesManager: int TEMPERATURE_THROTTLING_BELOW_VR_MIN>
<android.os.HardwarePropertiesManager: float UNDEFINED_TEMPERATURE>
android.os.IBinder
<android.os.IBinder: void dump(java.io.FileDescriptor,java.lang.String[])>
<android.os.IBinder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])>
<android.os.IBinder: java.lang.String getInterfaceDescriptor()>
<android.os.IBinder: int getSuggestedMaxIpcSizeBytes()>
<android.os.IBinder: boolean isBinderAlive()>
<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>
<android.os.IBinder: boolean pingBinder()>
<android.os.IBinder: android.os.IInterface queryLocalInterface(java.lang.String)>
<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>
<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>
<android.os.IBinder: int DUMP_TRANSACTION>
<android.os.IBinder: int FIRST_CALL_TRANSACTION>
<android.os.IBinder: int FLAG_ONEWAY>
<android.os.IBinder: int INTERFACE_TRANSACTION>
<android.os.IBinder: int LAST_CALL_TRANSACTION>
<android.os.IBinder: int LIKE_TRANSACTION>
<android.os.IBinder: int PING_TRANSACTION>
<android.os.IBinder: int TWEET_TRANSACTION>
android.os.IBinder$DeathRecipient
<android.os.IBinder$DeathRecipient: void binderDied()>
android.os.IInterface
<android.os.IInterface: android.os.IBinder asBinder()>
android.os.LimitExceededException
<android.os.LimitExceededException: void <init>()>
<android.os.LimitExceededException: void <init>(java.lang.String)>
android.os.LocaleList
<android.os.LocaleList: void <init>(java.util.Locale[])>
<android.os.LocaleList: int describeContents()>
<android.os.LocaleList: android.os.LocaleList forLanguageTags(java.lang.String)>
<android.os.LocaleList: java.util.Locale get(int)>
<android.os.LocaleList: android.os.LocaleList getAdjustedDefault()>
<android.os.LocaleList: android.os.LocaleList getDefault()>
<android.os.LocaleList: android.os.LocaleList getEmptyLocaleList()>
<android.os.LocaleList: java.util.Locale getFirstMatch(java.lang.String[])>
<android.os.LocaleList: int indexOf(java.util.Locale)>
<android.os.LocaleList: boolean isEmpty()>
<android.os.LocaleList: boolean isPseudoLocale(android.icu.util.ULocale)>
<android.os.LocaleList: boolean matchesLanguageAndScript(java.util.Locale,java.util.Locale)>
<android.os.LocaleList: void setDefault(android.os.LocaleList)>
<android.os.LocaleList: int size()>
<android.os.LocaleList: java.lang.String toLanguageTags()>
<android.os.LocaleList: void writeToParcel(android.os.Parcel,int)>
<android.os.LocaleList: android.os.Parcelable$Creator CREATOR>
android.os.Looper
<android.os.Looper: void dump(android.util.Printer,java.lang.String)>
<android.os.Looper: android.os.Looper getMainLooper()>
<android.os.Looper: android.os.MessageQueue getQueue()>
<android.os.Looper: java.lang.Thread getThread()>
<android.os.Looper: boolean isCurrentThread()>
<android.os.Looper: void loop()>
<android.os.Looper: android.os.Looper myLooper()>
<android.os.Looper: android.os.MessageQueue myQueue()>
<android.os.Looper: void prepare()>
<android.os.Looper: void prepareMainLooper()>
<android.os.Looper: void quit()>
<android.os.Looper: void quitSafely()>
<android.os.Looper: void setMessageLogging(android.util.Printer)>
android.os.MemoryFile
<android.os.MemoryFile: void <init>(java.lang.String,int)>
<android.os.MemoryFile: boolean allowPurging(boolean)>
<android.os.MemoryFile: void close()>
<android.os.MemoryFile: java.io.InputStream getInputStream()>
<android.os.MemoryFile: java.io.OutputStream getOutputStream()>
<android.os.MemoryFile: boolean isPurgingAllowed()>
<android.os.MemoryFile: int length()>
<android.os.MemoryFile: int readBytes(byte[],int,int,int)>
<android.os.MemoryFile: void writeBytes(byte[],int,int,int)>
android.os.Message
<android.os.Message: void <init>()>
<android.os.Message: void copyFrom(android.os.Message)>
<android.os.Message: int describeContents()>
<android.os.Message: java.lang.Runnable getCallback()>
<android.os.Message: android.os.Bundle getData()>
<android.os.Message: android.os.Handler getTarget()>
<android.os.Message: long getWhen()>
<android.os.Message: boolean isAsynchronous()>
<android.os.Message: android.os.Message obtain()>
<android.os.Message: android.os.Message obtain(android.os.Message)>
<android.os.Message: android.os.Message obtain(android.os.Handler)>
<android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)>
<android.os.Message: android.os.Bundle peekData()>
<android.os.Message: void recycle()>
<android.os.Message: void sendToTarget()>
<android.os.Message: void setAsynchronous(boolean)>
<android.os.Message: void setData(android.os.Bundle)>
<android.os.Message: void setTarget(android.os.Handler)>
<android.os.Message: void writeToParcel(android.os.Parcel,int)>
<android.os.Message: android.os.Parcelable$Creator CREATOR>
<android.os.Message: int arg1>
<android.os.Message: int arg2>
<android.os.Message: java.lang.Object obj>
<android.os.Message: android.os.Messenger replyTo>
<android.os.Message: int sendingUid>
<android.os.Message: int what>
android.os.MessageQueue
<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>
<android.os.MessageQueue: void addOnFileDescriptorEventListener(java.io.FileDescriptor,int,android.os.MessageQueue$OnFileDescriptorEventListener)>
<android.os.MessageQueue: boolean isIdle()>
<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)>
<android.os.MessageQueue: void removeOnFileDescriptorEventListener(java.io.FileDescriptor)>
android.os.MessageQueue$IdleHandler
<android.os.MessageQueue$IdleHandler: boolean queueIdle()>
android.os.MessageQueue$OnFileDescriptorEventListener
<android.os.MessageQueue$OnFileDescriptorEventListener: int onFileDescriptorEvents(java.io.FileDescriptor,int)>
<android.os.MessageQueue$OnFileDescriptorEventListener: int EVENT_ERROR>
<android.os.MessageQueue$OnFileDescriptorEventListener: int EVENT_INPUT>
<android.os.MessageQueue$OnFileDescriptorEventListener: int EVENT_OUTPUT>
android.os.Messenger
<android.os.Messenger: void <init>(android.os.Handler)>
<android.os.Messenger: void <init>(android.os.IBinder)>
<android.os.Messenger: int describeContents()>
<android.os.Messenger: android.os.IBinder getBinder()>
<android.os.Messenger: android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel)>
<android.os.Messenger: void send(android.os.Message)>
<android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)>
<android.os.Messenger: void writeToParcel(android.os.Parcel,int)>
<android.os.Messenger: android.os.Parcelable$Creator CREATOR>
android.os.NetworkOnMainThreadException
<android.os.NetworkOnMainThreadException: void <init>()>
android.os.OperationCanceledException
<android.os.OperationCanceledException: void <init>()>
<android.os.OperationCanceledException: void <init>(java.lang.String)>
android.os.OutcomeReceiver
<android.os.OutcomeReceiver: void onError(java.lang.Throwable)>
<android.os.OutcomeReceiver: void onResult(java.lang.Object)>
android.os.Parcel
<android.os.Parcel: void appendFrom(android.os.Parcel,int,int)>
<android.os.Parcel: android.os.IBinder[] createBinderArray()>
<android.os.Parcel: java.util.ArrayList createBinderArrayList()>
<android.os.Parcel: boolean[] createBooleanArray()>
<android.os.Parcel: byte[] createByteArray()>
<android.os.Parcel: char[] createCharArray()>
<android.os.Parcel: double[] createDoubleArray()>
<android.os.Parcel: java.lang.Object createFixedArray(java.lang.Class,int[])>
<android.os.Parcel: java.lang.Object createFixedArray(java.lang.Class,java.util.function.Function,int[])>
<android.os.Parcel: java.lang.Object createFixedArray(java.lang.Class,android.os.Parcelable$Creator,int[])>
<android.os.Parcel: float[] createFloatArray()>
<android.os.Parcel: int[] createIntArray()>
<android.os.Parcel: android.os.IInterface[] createInterfaceArray(java.util.function.IntFunction,java.util.function.Function)>
<android.os.Parcel: java.util.ArrayList createInterfaceArrayList(java.util.function.Function)>
<android.os.Parcel: long[] createLongArray()>
<android.os.Parcel: java.lang.String[] createStringArray()>
<android.os.Parcel: java.util.ArrayList createStringArrayList()>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>
<android.os.Parcel: android.util.ArrayMap createTypedArrayMap(android.os.Parcelable$Creator)>
<android.os.Parcel: android.util.SparseArray createTypedSparseArray(android.os.Parcelable$Creator)>
<android.os.Parcel: int dataAvail()>
<android.os.Parcel: int dataCapacity()>
<android.os.Parcel: int dataPosition()>
<android.os.Parcel: int dataSize()>
<android.os.Parcel: void enforceInterface(java.lang.String)>
<android.os.Parcel: void enforceNoDataAvail()>
<android.os.Parcel: boolean hasFileDescriptors()>
<android.os.Parcel: boolean hasFileDescriptors(int,int)>
<android.os.Parcel: byte[] marshall()>
<android.os.Parcel: android.os.Parcel obtain()>
<android.os.Parcel: android.os.Parcel obtain(android.os.IBinder)>
<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>
<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader,java.lang.Class)>
<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>
<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader,java.lang.Class)>
<android.os.Parcel: void readBinderArray(android.os.IBinder[])>
<android.os.Parcel: void readBinderList(java.util.List)>
<android.os.Parcel: byte[] readBlob()>
<android.os.Parcel: boolean readBoolean()>
<android.os.Parcel: void readBooleanArray(boolean[])>
<android.os.Parcel: android.os.Bundle readBundle()>
<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)>
<android.os.Parcel: byte readByte()>
<android.os.Parcel: void readByteArray(byte[])>
<android.os.Parcel: void readCharArray(char[])>
<android.os.Parcel: double readDouble()>
<android.os.Parcel: void readDoubleArray(double[])>
<android.os.Parcel: void readException()>
<android.os.Parcel: void readException(int,java.lang.String)>
<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>
<android.os.Parcel: void readFixedArray(java.lang.Object)>
<android.os.Parcel: void readFixedArray(java.lang.Object,java.util.function.Function)>
<android.os.Parcel: void readFixedArray(java.lang.Object,android.os.Parcelable$Creator)>
<android.os.Parcel: float readFloat()>
<android.os.Parcel: void readFloatArray(float[])>
<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>
<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader,java.lang.Class,java.lang.Class)>
<android.os.Parcel: int readInt()>
<android.os.Parcel: void readIntArray(int[])>
<android.os.Parcel: void readInterfaceArray(android.os.IInterface[],java.util.function.Function)>
<android.os.Parcel: void readInterfaceList(java.util.List,java.util.function.Function)>
<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)>
<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader,java.lang.Class)>
<android.os.Parcel: long readLong()>
<android.os.Parcel: void readLongArray(long[])>
<android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader)>
<android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader,java.lang.Class,java.lang.Class)>
<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>
<android.os.Parcel: java.lang.Object readParcelable(java.lang.ClassLoader,java.lang.Class)>
<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>
<android.os.Parcel: java.lang.Object[] readParcelableArray(java.lang.ClassLoader,java.lang.Class)>
<android.os.Parcel: android.os.Parcelable$Creator readParcelableCreator(java.lang.ClassLoader)>
<android.os.Parcel: android.os.Parcelable$Creator readParcelableCreator(java.lang.ClassLoader,java.lang.Class)>
<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader)>
<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader,java.lang.Class)>
<android.os.Parcel: android.os.PersistableBundle readPersistableBundle()>
<android.os.Parcel: android.os.PersistableBundle readPersistableBundle(java.lang.ClassLoader)>
<android.os.Parcel: java.io.Serializable readSerializable()>
<android.os.Parcel: java.lang.Object readSerializable(java.lang.ClassLoader,java.lang.Class)>
<android.os.Parcel: android.util.Size readSize()>
<android.os.Parcel: android.util.SizeF readSizeF()>
<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>
<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader,java.lang.Class)>
<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>
<android.os.Parcel: java.lang.String readString()>
<android.os.Parcel: void readStringArray(java.lang.String[])>
<android.os.Parcel: void readStringList(java.util.List)>
<android.os.Parcel: android.os.IBinder readStrongBinder()>
<android.os.Parcel: void readTypedArray(java.lang.Object[],android.os.Parcelable$Creator)>
<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)>
<android.os.Parcel: java.lang.Object readTypedObject(android.os.Parcelable$Creator)>
<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)>
<android.os.Parcel: void recycle()>
<android.os.Parcel: void setDataCapacity(int)>
<android.os.Parcel: void setDataPosition(int)>
<android.os.Parcel: void setDataSize(int)>
<android.os.Parcel: void setPropagateAllowBlocking()>
<android.os.Parcel: void unmarshall(byte[],int,int)>
<android.os.Parcel: void writeArray(java.lang.Object[])>
<android.os.Parcel: void writeBinderArray(android.os.IBinder[])>
<android.os.Parcel: void writeBinderList(java.util.List)>
<android.os.Parcel: void writeBlob(byte[])>
<android.os.Parcel: void writeBlob(byte[],int,int)>
<android.os.Parcel: void writeBoolean(boolean)>
<android.os.Parcel: void writeBooleanArray(boolean[])>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.os.Parcel: void writeByte(byte)>
<android.os.Parcel: void writeByteArray(byte[])>
<android.os.Parcel: void writeByteArray(byte[],int,int)>
<android.os.Parcel: void writeCharArray(char[])>
<android.os.Parcel: void writeDouble(double)>
<android.os.Parcel: void writeDoubleArray(double[])>
<android.os.Parcel: void writeException(java.lang.Exception)>
<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>
<android.os.Parcel: void writeFixedArray(java.lang.Object,int,int[])>
<android.os.Parcel: void writeFloat(float)>
<android.os.Parcel: void writeFloatArray(float[])>
<android.os.Parcel: void writeInt(int)>
<android.os.Parcel: void writeIntArray(int[])>
<android.os.Parcel: void writeInterfaceArray(android.os.IInterface[])>
<android.os.Parcel: void writeInterfaceList(java.util.List)>
<android.os.Parcel: void writeInterfaceToken(java.lang.String)>
<android.os.Parcel: void writeList(java.util.List)>
<android.os.Parcel: void writeLong(long)>
<android.os.Parcel: void writeLongArray(long[])>
<android.os.Parcel: void writeMap(java.util.Map)>
<android.os.Parcel: void writeNoException()>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)>
<android.os.Parcel: void writeParcelableCreator(android.os.Parcelable)>
<android.os.Parcel: void writeParcelableList(java.util.List,int)>
<android.os.Parcel: void writePersistableBundle(android.os.PersistableBundle)>
<android.os.Parcel: void writeSerializable(java.io.Serializable)>
<android.os.Parcel: void writeSize(android.util.Size)>
<android.os.Parcel: void writeSizeF(android.util.SizeF)>
<android.os.Parcel: void writeSparseArray(android.util.SparseArray)>
<android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)>
<android.os.Parcel: void writeString(java.lang.String)>
<android.os.Parcel: void writeStringArray(java.lang.String[])>
<android.os.Parcel: void writeStringList(java.util.List)>
<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>
<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>
<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>
<android.os.Parcel: void writeTypedArrayMap(android.util.ArrayMap,int)>
<android.os.Parcel: void writeTypedList(java.util.List)>
<android.os.Parcel: void writeTypedObject(android.os.Parcelable,int)>
<android.os.Parcel: void writeTypedSparseArray(android.util.SparseArray,int)>
<android.os.Parcel: void writeValue(java.lang.Object)>
<android.os.Parcel: android.os.Parcelable$Creator STRING_CREATOR>
android.os.ParcelFileDescriptor
<android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>
<android.os.ParcelFileDescriptor: boolean canDetectErrors()>
<android.os.ParcelFileDescriptor: void checkError()>
<android.os.ParcelFileDescriptor: void close()>
<android.os.ParcelFileDescriptor: void closeWithError(java.lang.String)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliablePipe()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliableSocketPair()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createSocketPair()>
<android.os.ParcelFileDescriptor: int describeContents()>
<android.os.ParcelFileDescriptor: int detachFd()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromFd(int)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>
<android.os.ParcelFileDescriptor: int getFd()>
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<android.os.ParcelFileDescriptor: long getStatSize()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int,android.os.Handler,android.os.ParcelFileDescriptor$OnCloseListener)>
<android.os.ParcelFileDescriptor: int parseMode(java.lang.String)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor wrap(android.os.ParcelFileDescriptor,android.os.Handler,android.os.ParcelFileDescriptor$OnCloseListener)>
<android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)>
<android.os.ParcelFileDescriptor: android.os.Parcelable$Creator CREATOR>
<android.os.ParcelFileDescriptor: int MODE_APPEND>
<android.os.ParcelFileDescriptor: int MODE_CREATE>
<android.os.ParcelFileDescriptor: int MODE_READ_ONLY>
<android.os.ParcelFileDescriptor: int MODE_READ_WRITE>
<android.os.ParcelFileDescriptor: int MODE_TRUNCATE>
<android.os.ParcelFileDescriptor: int MODE_WORLD_READABLE>
<android.os.ParcelFileDescriptor: int MODE_WORLD_WRITEABLE>
<android.os.ParcelFileDescriptor: int MODE_WRITE_ONLY>
android.os.ParcelFileDescriptor$AutoCloseInputStream
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>
android.os.ParcelFileDescriptor$AutoCloseOutputStream
<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>
android.os.ParcelFileDescriptor$FileDescriptorDetachedException
<android.os.ParcelFileDescriptor$FileDescriptorDetachedException: void <init>()>
android.os.ParcelFileDescriptor$OnCloseListener
<android.os.ParcelFileDescriptor$OnCloseListener: void onClose(java.io.IOException)>
android.os.ParcelFormatException
<android.os.ParcelFormatException: void <init>()>
<android.os.ParcelFormatException: void <init>(java.lang.String)>
android.os.ParcelUuid
<android.os.ParcelUuid: void <init>(java.util.UUID)>
<android.os.ParcelUuid: int describeContents()>
<android.os.ParcelUuid: android.os.ParcelUuid fromString(java.lang.String)>
<android.os.ParcelUuid: java.util.UUID getUuid()>
<android.os.ParcelUuid: void writeToParcel(android.os.Parcel,int)>
<android.os.ParcelUuid: android.os.Parcelable$Creator CREATOR>
android.os.Parcelable
<android.os.Parcelable: int describeContents()>
<android.os.Parcelable: void writeToParcel(android.os.Parcel,int)>
<android.os.Parcelable: int CONTENTS_FILE_DESCRIPTOR>
<android.os.Parcelable: int PARCELABLE_WRITE_RETURN_VALUE>
android.os.Parcelable$ClassLoaderCreator
<android.os.Parcelable$ClassLoaderCreator: java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
android.os.Parcelable$Creator
<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>
<android.os.Parcelable$Creator: java.lang.Object[] newArray(int)>
android.os.PatternMatcher
<android.os.PatternMatcher: void <init>(java.lang.String,int)>
<android.os.PatternMatcher: void <init>(android.os.Parcel)>
<android.os.PatternMatcher: int describeContents()>
<android.os.PatternMatcher: java.lang.String getPath()>
<android.os.PatternMatcher: int getType()>
<android.os.PatternMatcher: boolean match(java.lang.String)>
<android.os.PatternMatcher: void writeToParcel(android.os.Parcel,int)>
<android.os.PatternMatcher: android.os.Parcelable$Creator CREATOR>
<android.os.PatternMatcher: int PATTERN_ADVANCED_GLOB>
<android.os.PatternMatcher: int PATTERN_LITERAL>
<android.os.PatternMatcher: int PATTERN_PREFIX>
<android.os.PatternMatcher: int PATTERN_SIMPLE_GLOB>
<android.os.PatternMatcher: int PATTERN_SUFFIX>
android.os.PerformanceHintManager
<android.os.PerformanceHintManager: android.os.PerformanceHintManager$Session createHintSession(int[],long)>
<android.os.PerformanceHintManager: long getPreferredUpdateRateNanos()>
android.os.PerformanceHintManager$Session
<android.os.PerformanceHintManager$Session: void close()>
<android.os.PerformanceHintManager$Session: void reportActualWorkDuration(long)>
<android.os.PerformanceHintManager$Session: void updateTargetWorkDuration(long)>
android.os.PersistableBundle
<android.os.PersistableBundle: void <init>()>
<android.os.PersistableBundle: void <init>(int)>
<android.os.PersistableBundle: void <init>(android.os.PersistableBundle)>
<android.os.PersistableBundle: java.lang.Object clone()>
<android.os.PersistableBundle: android.os.PersistableBundle deepCopy()>
<android.os.PersistableBundle: int describeContents()>
<android.os.PersistableBundle: android.os.PersistableBundle getPersistableBundle(java.lang.String)>
<android.os.PersistableBundle: void putPersistableBundle(java.lang.String,android.os.PersistableBundle)>
<android.os.PersistableBundle: android.os.PersistableBundle readFromStream(java.io.InputStream)>
<android.os.PersistableBundle: void writeToParcel(android.os.Parcel,int)>
<android.os.PersistableBundle: void writeToStream(java.io.OutputStream)>
<android.os.PersistableBundle: android.os.Parcelable$Creator CREATOR>
<android.os.PersistableBundle: android.os.PersistableBundle EMPTY>
android.os.PowerManager
<android.os.PowerManager: void addThermalStatusListener(android.os.PowerManager$OnThermalStatusChangedListener)>
<android.os.PowerManager: void addThermalStatusListener(java.util.concurrent.Executor,android.os.PowerManager$OnThermalStatusChangedListener)>
<android.os.PowerManager: java.time.Duration getBatteryDischargePrediction()>
<android.os.PowerManager: int getCurrentThermalStatus()>
<android.os.PowerManager: int getLocationPowerSaveMode()>
<android.os.PowerManager: float getThermalHeadroom(int)>
<android.os.PowerManager: boolean isBatteryDischargePredictionPersonalized()>
<android.os.PowerManager: boolean isDeviceIdleMode()>
<android.os.PowerManager: boolean isDeviceLightIdleMode()>
<android.os.PowerManager: boolean isIgnoringBatteryOptimizations(java.lang.String)>
<android.os.PowerManager: boolean isInteractive()>
<android.os.PowerManager: boolean isLowPowerStandbyEnabled()>
<android.os.PowerManager: boolean isPowerSaveMode()>
<android.os.PowerManager: boolean isRebootingUserspaceSupported()>
<android.os.PowerManager: boolean isScreenOn()>
<android.os.PowerManager: boolean isSustainedPerformanceModeSupported()>
<android.os.PowerManager: boolean isWakeLockLevelSupported(int)>
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>
<android.os.PowerManager: void reboot(java.lang.String)>
<android.os.PowerManager: void removeThermalStatusListener(android.os.PowerManager$OnThermalStatusChangedListener)>
<android.os.PowerManager: int ACQUIRE_CAUSES_WAKEUP>
<android.os.PowerManager: java.lang.String ACTION_DEVICE_IDLE_MODE_CHANGED>
<android.os.PowerManager: java.lang.String ACTION_DEVICE_LIGHT_IDLE_MODE_CHANGED>
<android.os.PowerManager: java.lang.String ACTION_LOW_POWER_STANDBY_ENABLED_CHANGED>
<android.os.PowerManager: java.lang.String ACTION_POWER_SAVE_MODE_CHANGED>
<android.os.PowerManager: int FULL_WAKE_LOCK>
<android.os.PowerManager: int LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF>
<android.os.PowerManager: int LOCATION_MODE_FOREGROUND_ONLY>
<android.os.PowerManager: int LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF>
<android.os.PowerManager: int LOCATION_MODE_NO_CHANGE>
<android.os.PowerManager: int LOCATION_MODE_THROTTLE_REQUESTS_WHEN_SCREEN_OFF>
<android.os.PowerManager: int ON_AFTER_RELEASE>
<android.os.PowerManager: int PARTIAL_WAKE_LOCK>
<android.os.PowerManager: int PROXIMITY_SCREEN_OFF_WAKE_LOCK>
<android.os.PowerManager: int RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY>
<android.os.PowerManager: int SCREEN_BRIGHT_WAKE_LOCK>
<android.os.PowerManager: int SCREEN_DIM_WAKE_LOCK>
<android.os.PowerManager: int THERMAL_STATUS_CRITICAL>
<android.os.PowerManager: int THERMAL_STATUS_EMERGENCY>
<android.os.PowerManager: int THERMAL_STATUS_LIGHT>
<android.os.PowerManager: int THERMAL_STATUS_MODERATE>
<android.os.PowerManager: int THERMAL_STATUS_NONE>
<android.os.PowerManager: int THERMAL_STATUS_SEVERE>
<android.os.PowerManager: int THERMAL_STATUS_SHUTDOWN>
android.os.PowerManager$OnThermalStatusChangedListener
<android.os.PowerManager$OnThermalStatusChangedListener: void onThermalStatusChanged(int)>
android.os.PowerManager$WakeLock
<android.os.PowerManager$WakeLock: void acquire()>
<android.os.PowerManager$WakeLock: void acquire(long)>
<android.os.PowerManager$WakeLock: boolean isHeld()>
<android.os.PowerManager$WakeLock: void release()>
<android.os.PowerManager$WakeLock: void release(int)>
<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>
<android.os.PowerManager$WakeLock: void setStateListener(java.util.concurrent.Executor,android.os.PowerManager$WakeLockStateListener)>
<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>
android.os.PowerManager$WakeLockStateListener
<android.os.PowerManager$WakeLockStateListener: void onStateChanged(boolean)>
android.os.Process
<android.os.Process: void <init>()>
<android.os.Process: long getElapsedCpuTime()>
<android.os.Process: int[] getExclusiveCores()>
<android.os.Process: int getGidForName(java.lang.String)>
<android.os.Process: long getStartElapsedRealtime()>
<android.os.Process: long getStartRequestedElapsedRealtime()>
<android.os.Process: long getStartRequestedUptimeMillis()>
<android.os.Process: long getStartUptimeMillis()>
<android.os.Process: int getThreadPriority(int)>
<android.os.Process: int getUidForName(java.lang.String)>
<android.os.Process: boolean is64Bit()>
<android.os.Process: boolean isApplicationUid(int)>
<android.os.Process: boolean isIsolated()>
<android.os.Process: boolean isSdkSandbox()>
<android.os.Process: void killProcess(int)>
<android.os.Process: int myPid()>
<android.os.Process: java.lang.String myProcessName()>
<android.os.Process: int myTid()>
<android.os.Process: int myUid()>
<android.os.Process: android.os.UserHandle myUserHandle()>
<android.os.Process: void sendSignal(int,int)>
<android.os.Process: void setThreadPriority(int,int)>
<android.os.Process: void setThreadPriority(int)>
<android.os.Process: boolean supportsProcesses()>
<android.os.Process: int BLUETOOTH_UID>
<android.os.Process: int FIRST_APPLICATION_UID>
<android.os.Process: int INVALID_UID>
<android.os.Process: int LAST_APPLICATION_UID>
<android.os.Process: int PHONE_UID>
<android.os.Process: int ROOT_UID>
<android.os.Process: int SHELL_UID>
<android.os.Process: int SIGNAL_KILL>
<android.os.Process: int SIGNAL_QUIT>
<android.os.Process: int SIGNAL_USR1>
<android.os.Process: int SYSTEM_UID>
<android.os.Process: int THREAD_PRIORITY_AUDIO>
<android.os.Process: int THREAD_PRIORITY_BACKGROUND>
<android.os.Process: int THREAD_PRIORITY_DEFAULT>
<android.os.Process: int THREAD_PRIORITY_DISPLAY>
<android.os.Process: int THREAD_PRIORITY_FOREGROUND>
<android.os.Process: int THREAD_PRIORITY_LESS_FAVORABLE>
<android.os.Process: int THREAD_PRIORITY_LOWEST>
<android.os.Process: int THREAD_PRIORITY_MORE_FAVORABLE>
<android.os.Process: int THREAD_PRIORITY_URGENT_AUDIO>
<android.os.Process: int THREAD_PRIORITY_URGENT_DISPLAY>
<android.os.Process: int THREAD_PRIORITY_VIDEO>
<android.os.Process: int WIFI_UID>
android.os.ProxyFileDescriptorCallback
<android.os.ProxyFileDescriptorCallback: void <init>()>
<android.os.ProxyFileDescriptorCallback: void onFsync()>
<android.os.ProxyFileDescriptorCallback: long onGetSize()>
<android.os.ProxyFileDescriptorCallback: int onRead(long,int,byte[])>
<android.os.ProxyFileDescriptorCallback: void onRelease()>
<android.os.ProxyFileDescriptorCallback: int onWrite(long,int,byte[])>
android.os.RecoverySystem
<android.os.RecoverySystem: void installPackage(android.content.Context,java.io.File)>
<android.os.RecoverySystem: void rebootWipeCache(android.content.Context)>
<android.os.RecoverySystem: void rebootWipeUserData(android.content.Context)>
<android.os.RecoverySystem: void verifyPackage(java.io.File,android.os.RecoverySystem$ProgressListener,java.io.File)>
android.os.RecoverySystem$ProgressListener
<android.os.RecoverySystem$ProgressListener: void onProgress(int)>
android.os.RemoteCallbackList
<android.os.RemoteCallbackList: void <init>()>
<android.os.RemoteCallbackList: int beginBroadcast()>
<android.os.RemoteCallbackList: void finishBroadcast()>
<android.os.RemoteCallbackList: java.lang.Object getBroadcastCookie(int)>
<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>
<android.os.RemoteCallbackList: java.lang.Object getRegisteredCallbackCookie(int)>
<android.os.RemoteCallbackList: int getRegisteredCallbackCount()>
<android.os.RemoteCallbackList: android.os.IInterface getRegisteredCallbackItem(int)>
<android.os.RemoteCallbackList: void kill()>
<android.os.RemoteCallbackList: void onCallbackDied(android.os.IInterface)>
<android.os.RemoteCallbackList: void onCallbackDied(android.os.IInterface,java.lang.Object)>
<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>
<android.os.RemoteCallbackList: boolean register(android.os.IInterface,java.lang.Object)>
<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>
android.os.RemoteException
<android.os.RemoteException: void <init>()>
<android.os.RemoteException: void <init>(java.lang.String)>
<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>
<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>
android.os.ResultReceiver
<android.os.ResultReceiver: void <init>(android.os.Handler)>
<android.os.ResultReceiver: int describeContents()>
<android.os.ResultReceiver: void onReceiveResult(int,android.os.Bundle)>
<android.os.ResultReceiver: void send(int,android.os.Bundle)>
<android.os.ResultReceiver: void writeToParcel(android.os.Parcel,int)>
<android.os.ResultReceiver: android.os.Parcelable$Creator CREATOR>
android.os.SharedMemory
<android.os.SharedMemory: void close()>
<android.os.SharedMemory: android.os.SharedMemory create(java.lang.String,int)>
<android.os.SharedMemory: int describeContents()>
<android.os.SharedMemory: android.os.SharedMemory fromFileDescriptor(android.os.ParcelFileDescriptor)>
<android.os.SharedMemory: int getSize()>
<android.os.SharedMemory: java.nio.ByteBuffer map(int,int,int)>
<android.os.SharedMemory: java.nio.ByteBuffer mapReadOnly()>
<android.os.SharedMemory: java.nio.ByteBuffer mapReadWrite()>
<android.os.SharedMemory: boolean setProtect(int)>
<android.os.SharedMemory: void unmap(java.nio.ByteBuffer)>
<android.os.SharedMemory: void writeToParcel(android.os.Parcel,int)>
<android.os.SharedMemory: android.os.Parcelable$Creator CREATOR>
android.os.StatFs
<android.os.StatFs: void <init>(java.lang.String)>
<android.os.StatFs: int getAvailableBlocks()>
<android.os.StatFs: long getAvailableBlocksLong()>
<android.os.StatFs: long getAvailableBytes()>
<android.os.StatFs: int getBlockCount()>
<android.os.StatFs: long getBlockCountLong()>
<android.os.StatFs: int getBlockSize()>
<android.os.StatFs: long getBlockSizeLong()>
<android.os.StatFs: int getFreeBlocks()>
<android.os.StatFs: long getFreeBlocksLong()>
<android.os.StatFs: long getFreeBytes()>
<android.os.StatFs: long getTotalBytes()>
<android.os.StatFs: void restat(java.lang.String)>
android.os.StrictMode
<android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskReads()>
<android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskWrites()>
<android.os.StrictMode: void enableDefaults()>
<android.os.StrictMode: android.os.StrictMode$ThreadPolicy getThreadPolicy()>
<android.os.StrictMode: android.os.StrictMode$VmPolicy getVmPolicy()>
<android.os.StrictMode: void noteSlowCall(java.lang.String)>
<android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>
<android.os.StrictMode: void setVmPolicy(android.os.StrictMode$VmPolicy)>
android.os.StrictMode$OnThreadViolationListener
<android.os.StrictMode$OnThreadViolationListener: void onThreadViolation(android.os.strictmode.Violation)>
android.os.StrictMode$OnVmViolationListener
<android.os.StrictMode$OnVmViolationListener: void onVmViolation(android.os.strictmode.Violation)>
android.os.StrictMode$ThreadPolicy
<android.os.StrictMode$ThreadPolicy: android.os.StrictMode$ThreadPolicy LAX>
android.os.StrictMode$ThreadPolicy$Builder
<android.os.StrictMode$ThreadPolicy$Builder: void <init>()>
<android.os.StrictMode$ThreadPolicy$Builder: void <init>(android.os.StrictMode$ThreadPolicy)>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy build()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectAll()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectCustomSlowCalls()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectDiskReads()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectDiskWrites()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectNetwork()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectResourceMismatches()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectUnbufferedIo()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyDeath()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyDeathOnNetwork()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyDialog()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyDropBox()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyFlashScreen()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyListener(java.util.concurrent.Executor,android.os.StrictMode$OnThreadViolationListener)>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyLog()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitAll()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitCustomSlowCalls()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitDiskReads()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitDiskWrites()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitNetwork()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitResourceMismatches()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitUnbufferedIo()>
android.os.StrictMode$VmPolicy
<android.os.StrictMode$VmPolicy: android.os.StrictMode$VmPolicy LAX>
android.os.StrictMode$VmPolicy$Builder
<android.os.StrictMode$VmPolicy$Builder: void <init>()>
<android.os.StrictMode$VmPolicy$Builder: void <init>(android.os.StrictMode$VmPolicy)>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy build()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectActivityLeaks()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectAll()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectCleartextNetwork()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectContentUriWithoutPermission()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectCredentialProtectedWhileLocked()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectFileUriExposure()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectImplicitDirectBoot()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectIncorrectContextUse()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectLeakedClosableObjects()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectLeakedRegistrationObjects()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectLeakedSqlLiteObjects()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectNonSdkApiUsage()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectUnsafeIntentLaunch()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectUntaggedSockets()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyDeath()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyDeathOnCleartextNetwork()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyDeathOnFileUriExposure()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyDropBox()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyListener(java.util.concurrent.Executor,android.os.StrictMode$OnVmViolationListener)>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyLog()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder permitNonSdkApiUsage()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder permitUnsafeIntentLaunch()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder setClassInstanceLimit(java.lang.Class,int)>
android.os.SystemClock
<android.os.SystemClock: java.time.Clock currentGnssTimeClock()>
<android.os.SystemClock: java.time.Clock currentNetworkTimeClock()>
<android.os.SystemClock: long currentThreadTimeMillis()>
<android.os.SystemClock: long elapsedRealtime()>
<android.os.SystemClock: long elapsedRealtimeNanos()>
<android.os.SystemClock: boolean setCurrentTimeMillis(long)>
<android.os.SystemClock: void sleep(long)>
<android.os.SystemClock: long uptimeMillis()>
android.os.TestLooperManager
<android.os.TestLooperManager: void execute(android.os.Message)>
<android.os.TestLooperManager: android.os.MessageQueue getMessageQueue()>
<android.os.TestLooperManager: boolean hasMessages(android.os.Handler,java.lang.Object,int)>
<android.os.TestLooperManager: boolean hasMessages(android.os.Handler,java.lang.Object,java.lang.Runnable)>
<android.os.TestLooperManager: android.os.Message next()>
<android.os.TestLooperManager: void recycle(android.os.Message)>
<android.os.TestLooperManager: void release()>
android.os.TokenWatcher
<android.os.TokenWatcher: void <init>(android.os.Handler,java.lang.String)>
<android.os.TokenWatcher: void acquire(android.os.IBinder,java.lang.String)>
<android.os.TokenWatcher: void acquired()>
<android.os.TokenWatcher: void cleanup(android.os.IBinder,boolean)>
<android.os.TokenWatcher: void dump()>
<android.os.TokenWatcher: void dump(java.io.PrintWriter)>
<android.os.TokenWatcher: boolean isAcquired()>
<android.os.TokenWatcher: void release(android.os.IBinder)>
<android.os.TokenWatcher: void released()>
android.os.Trace
<android.os.Trace: void beginAsyncSection(java.lang.String,int)>
<android.os.Trace: void beginSection(java.lang.String)>
<android.os.Trace: void endAsyncSection(java.lang.String,int)>
<android.os.Trace: void endSection()>
<android.os.Trace: boolean isEnabled()>
<android.os.Trace: void setCounter(java.lang.String,long)>
android.os.TransactionTooLargeException
<android.os.TransactionTooLargeException: void <init>()>
<android.os.TransactionTooLargeException: void <init>(java.lang.String)>
android.os.UserHandle
<android.os.UserHandle: void <init>(android.os.Parcel)>
<android.os.UserHandle: int describeContents()>
<android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>
<android.os.UserHandle: android.os.UserHandle readFromParcel(android.os.Parcel)>
<android.os.UserHandle: void writeToParcel(android.os.Parcel,int)>
<android.os.UserHandle: void writeToParcel(android.os.UserHandle,android.os.Parcel)>
<android.os.UserHandle: android.os.Parcelable$Creator CREATOR>
android.os.UserManager
<android.os.UserManager: android.content.Intent createUserCreationIntent(java.lang.String,java.lang.String,java.lang.String,android.os.PersistableBundle)>
<android.os.UserManager: android.os.Bundle getApplicationRestrictions(java.lang.String)>
<android.os.UserManager: long getSerialNumberForUser(android.os.UserHandle)>
<android.os.UserManager: int getUserCount()>
<android.os.UserManager: long getUserCreationTime(android.os.UserHandle)>
<android.os.UserManager: android.os.UserHandle getUserForSerialNumber(long)>
<android.os.UserManager: java.lang.String getUserName()>
<android.os.UserManager: java.util.List getUserProfiles()>
<android.os.UserManager: android.os.Bundle getUserRestrictions()>
<android.os.UserManager: android.os.Bundle getUserRestrictions(android.os.UserHandle)>
<android.os.UserManager: boolean hasUserRestriction(java.lang.String)>
<android.os.UserManager: boolean isDemoUser()>
<android.os.UserManager: boolean isHeadlessSystemUserMode()>
<android.os.UserManager: boolean isManagedProfile()>
<android.os.UserManager: boolean isProfile()>
<android.os.UserManager: boolean isQuietModeEnabled(android.os.UserHandle)>
<android.os.UserManager: boolean isSystemUser()>
<android.os.UserManager: boolean isUserAGoat()>
<android.os.UserManager: boolean isUserForeground()>
<android.os.UserManager: boolean isUserRunning(android.os.UserHandle)>
<android.os.UserManager: boolean isUserRunningOrStopping(android.os.UserHandle)>
<android.os.UserManager: boolean isUserUnlocked()>
<android.os.UserManager: boolean isUserUnlocked(android.os.UserHandle)>
<android.os.UserManager: boolean requestQuietModeEnabled(boolean,android.os.UserHandle)>
<android.os.UserManager: boolean requestQuietModeEnabled(boolean,android.os.UserHandle,int)>
<android.os.UserManager: boolean setRestrictionsChallenge(java.lang.String)>
<android.os.UserManager: void setUserRestriction(java.lang.String,boolean)>
<android.os.UserManager: void setUserRestrictions(android.os.Bundle)>
<android.os.UserManager: void setUserRestrictions(android.os.Bundle,android.os.UserHandle)>
<android.os.UserManager: boolean supportsMultipleUsers()>
<android.os.UserManager: java.lang.String ALLOW_PARENT_PROFILE_APP_LINKING>
<android.os.UserManager: java.lang.String DISALLOW_ADD_MANAGED_PROFILE>
<android.os.UserManager: java.lang.String DISALLOW_ADD_USER>
<android.os.UserManager: java.lang.String DISALLOW_ADD_WIFI_CONFIG>
<android.os.UserManager: java.lang.String DISALLOW_ADJUST_VOLUME>
<android.os.UserManager: java.lang.String DISALLOW_AIRPLANE_MODE>
<android.os.UserManager: java.lang.String DISALLOW_AMBIENT_DISPLAY>
<android.os.UserManager: java.lang.String DISALLOW_APPS_CONTROL>
<android.os.UserManager: java.lang.String DISALLOW_AUTOFILL>
<android.os.UserManager: java.lang.String DISALLOW_BLUETOOTH>
<android.os.UserManager: java.lang.String DISALLOW_BLUETOOTH_SHARING>
<android.os.UserManager: java.lang.String DISALLOW_CAMERA_TOGGLE>
<android.os.UserManager: java.lang.String DISALLOW_CHANGE_WIFI_STATE>
<android.os.UserManager: java.lang.String DISALLOW_CONFIG_BLUETOOTH>
<android.os.UserManager: java.lang.String DISALLOW_CONFIG_BRIGHTNESS>
<android.os.UserManager: java.lang.String DISALLOW_CONFIG_CELL_BROADCASTS>
<android.os.UserManager: java.lang.String DISALLOW_CONFIG_CREDENTIALS>
<android.os.UserManager: java.lang.String DISALLOW_CONFIG_DATE_TIME>
<android.os.UserManager: java.lang.String DISALLOW_CONFIG_LOCALE>
<android.os.UserManager: java.lang.String DISALLOW_CONFIG_LOCATION>
<android.os.UserManager: java.lang.String DISALLOW_CONFIG_MOBILE_NETWORKS>
<android.os.UserManager: java.lang.String DISALLOW_CONFIG_PRIVATE_DNS>
<android.os.UserManager: java.lang.String DISALLOW_CONFIG_SCREEN_TIMEOUT>
<android.os.UserManager: java.lang.String DISALLOW_CONFIG_TETHERING>
<android.os.UserManager: java.lang.String DISALLOW_CONFIG_VPN>
<android.os.UserManager: java.lang.String DISALLOW_CONFIG_WIFI>
<android.os.UserManager: java.lang.String DISALLOW_CONTENT_CAPTURE>
<android.os.UserManager: java.lang.String DISALLOW_CONTENT_SUGGESTIONS>
<android.os.UserManager: java.lang.String DISALLOW_CREATE_WINDOWS>
<android.os.UserManager: java.lang.String DISALLOW_CROSS_PROFILE_COPY_PASTE>
<android.os.UserManager: java.lang.String DISALLOW_DATA_ROAMING>
<android.os.UserManager: java.lang.String DISALLOW_DEBUGGING_FEATURES>
<android.os.UserManager: java.lang.String DISALLOW_FACTORY_RESET>
<android.os.UserManager: java.lang.String DISALLOW_FUN>
<android.os.UserManager: java.lang.String DISALLOW_INSTALL_APPS>
<android.os.UserManager: java.lang.String DISALLOW_INSTALL_UNKNOWN_SOURCES>
<android.os.UserManager: java.lang.String DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY>
<android.os.UserManager: java.lang.String DISALLOW_MICROPHONE_TOGGLE>
<android.os.UserManager: java.lang.String DISALLOW_MODIFY_ACCOUNTS>
<android.os.UserManager: java.lang.String DISALLOW_MOUNT_PHYSICAL_MEDIA>
<android.os.UserManager: java.lang.String DISALLOW_NETWORK_RESET>
<android.os.UserManager: java.lang.String DISALLOW_OUTGOING_BEAM>
<android.os.UserManager: java.lang.String DISALLOW_OUTGOING_CALLS>
<android.os.UserManager: java.lang.String DISALLOW_PRINTING>
<android.os.UserManager: java.lang.String DISALLOW_REMOVE_MANAGED_PROFILE>
<android.os.UserManager: java.lang.String DISALLOW_REMOVE_USER>
<android.os.UserManager: java.lang.String DISALLOW_SAFE_BOOT>
<android.os.UserManager: java.lang.String DISALLOW_SET_USER_ICON>
<android.os.UserManager: java.lang.String DISALLOW_SET_WALLPAPER>
<android.os.UserManager: java.lang.String DISALLOW_SHARE_INTO_MANAGED_PROFILE>
<android.os.UserManager: java.lang.String DISALLOW_SHARE_LOCATION>
<android.os.UserManager: java.lang.String DISALLOW_SHARING_ADMIN_CONFIGURED_WIFI>
<android.os.UserManager: java.lang.String DISALLOW_SMS>
<android.os.UserManager: java.lang.String DISALLOW_SYSTEM_ERROR_DIALOGS>
<android.os.UserManager: java.lang.String DISALLOW_UNIFIED_PASSWORD>
<android.os.UserManager: java.lang.String DISALLOW_UNINSTALL_APPS>
<android.os.UserManager: java.lang.String DISALLOW_UNMUTE_MICROPHONE>
<android.os.UserManager: java.lang.String DISALLOW_USB_FILE_TRANSFER>
<android.os.UserManager: java.lang.String DISALLOW_USER_SWITCH>
<android.os.UserManager: java.lang.String DISALLOW_WIFI_DIRECT>
<android.os.UserManager: java.lang.String DISALLOW_WIFI_TETHERING>
<android.os.UserManager: java.lang.String ENSURE_VERIFY_APPS>
<android.os.UserManager: java.lang.String KEY_RESTRICTIONS_PENDING>
<android.os.UserManager: int QUIET_MODE_DISABLE_ONLY_IF_CREDENTIAL_NOT_REQUIRED>
<android.os.UserManager: int USER_CREATION_FAILED_NOT_PERMITTED>
<android.os.UserManager: int USER_CREATION_FAILED_NO_MORE_USERS>
<android.os.UserManager: int USER_OPERATION_ERROR_CURRENT_USER>
<android.os.UserManager: int USER_OPERATION_ERROR_LOW_STORAGE>
<android.os.UserManager: int USER_OPERATION_ERROR_MANAGED_PROFILE>
<android.os.UserManager: int USER_OPERATION_ERROR_MAX_RUNNING_USERS>
<android.os.UserManager: int USER_OPERATION_ERROR_MAX_USERS>
<android.os.UserManager: int USER_OPERATION_ERROR_UNKNOWN>
<android.os.UserManager: int USER_OPERATION_SUCCESS>
android.os.UserManager$UserOperationException
<android.os.UserManager$UserOperationException: int getUserOperationResult()>
android.os.VibrationAttributes
<android.os.VibrationAttributes: android.os.VibrationAttributes createForUsage(int)>
<android.os.VibrationAttributes: int describeContents()>
<android.os.VibrationAttributes: int getFlags()>
<android.os.VibrationAttributes: int getUsage()>
<android.os.VibrationAttributes: int getUsageClass()>
<android.os.VibrationAttributes: boolean isFlagSet(int)>
<android.os.VibrationAttributes: void writeToParcel(android.os.Parcel,int)>
<android.os.VibrationAttributes: android.os.Parcelable$Creator CREATOR>
<android.os.VibrationAttributes: int FLAG_BYPASS_INTERRUPTION_POLICY>
<android.os.VibrationAttributes: int USAGE_ACCESSIBILITY>
<android.os.VibrationAttributes: int USAGE_ALARM>
<android.os.VibrationAttributes: int USAGE_CLASS_ALARM>
<android.os.VibrationAttributes: int USAGE_CLASS_FEEDBACK>
<android.os.VibrationAttributes: int USAGE_CLASS_MASK>
<android.os.VibrationAttributes: int USAGE_CLASS_MEDIA>
<android.os.VibrationAttributes: int USAGE_CLASS_UNKNOWN>
<android.os.VibrationAttributes: int USAGE_COMMUNICATION_REQUEST>
<android.os.VibrationAttributes: int USAGE_HARDWARE_FEEDBACK>
<android.os.VibrationAttributes: int USAGE_MEDIA>
<android.os.VibrationAttributes: int USAGE_NOTIFICATION>
<android.os.VibrationAttributes: int USAGE_PHYSICAL_EMULATION>
<android.os.VibrationAttributes: int USAGE_RINGTONE>
<android.os.VibrationAttributes: int USAGE_TOUCH>
<android.os.VibrationAttributes: int USAGE_UNKNOWN>
android.os.VibrationAttributes$Builder
<android.os.VibrationAttributes$Builder: void <init>()>
<android.os.VibrationAttributes$Builder: void <init>(android.os.VibrationAttributes)>
<android.os.VibrationAttributes$Builder: void <init>(android.media.AudioAttributes)>
<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes build()>
<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes$Builder setFlags(int,int)>
<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes$Builder setUsage(int)>
android.os.VibrationEffect
<android.os.VibrationEffect: android.os.VibrationEffect createOneShot(long,int)>
<android.os.VibrationEffect: android.os.VibrationEffect createPredefined(int)>
<android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int)>
<android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int[],int)>
<android.os.VibrationEffect: int describeContents()>
<android.os.VibrationEffect: android.os.VibrationEffect$Composition startComposition()>
<android.os.VibrationEffect: android.os.Parcelable$Creator CREATOR>
<android.os.VibrationEffect: int DEFAULT_AMPLITUDE>
<android.os.VibrationEffect: int EFFECT_CLICK>
<android.os.VibrationEffect: int EFFECT_DOUBLE_CLICK>
<android.os.VibrationEffect: int EFFECT_HEAVY_CLICK>
<android.os.VibrationEffect: int EFFECT_TICK>
android.os.VibrationEffect$Composition
<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition addPrimitive(int)>
<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition addPrimitive(int,float)>
<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition addPrimitive(int,float,int)>
<android.os.VibrationEffect$Composition: android.os.VibrationEffect compose()>
<android.os.VibrationEffect$Composition: int PRIMITIVE_CLICK>
<android.os.VibrationEffect$Composition: int PRIMITIVE_LOW_TICK>
<android.os.VibrationEffect$Composition: int PRIMITIVE_QUICK_FALL>
<android.os.VibrationEffect$Composition: int PRIMITIVE_QUICK_RISE>
<android.os.VibrationEffect$Composition: int PRIMITIVE_SLOW_RISE>
<android.os.VibrationEffect$Composition: int PRIMITIVE_SPIN>
<android.os.VibrationEffect$Composition: int PRIMITIVE_THUD>
<android.os.VibrationEffect$Composition: int PRIMITIVE_TICK>
android.os.Vibrator
<android.os.Vibrator: int areAllEffectsSupported(int[])>
<android.os.Vibrator: boolean areAllPrimitivesSupported(int[])>
<android.os.Vibrator: int[] areEffectsSupported(int[])>
<android.os.Vibrator: boolean[] arePrimitivesSupported(int[])>
<android.os.Vibrator: void cancel()>
<android.os.Vibrator: int getId()>
<android.os.Vibrator: int[] getPrimitiveDurations(int[])>
<android.os.Vibrator: boolean hasAmplitudeControl()>
<android.os.Vibrator: boolean hasVibrator()>
<android.os.Vibrator: void vibrate(long)>
<android.os.Vibrator: void vibrate(long,android.media.AudioAttributes)>
<android.os.Vibrator: void vibrate(long[],int)>
<android.os.Vibrator: void vibrate(long[],int,android.media.AudioAttributes)>
<android.os.Vibrator: void vibrate(android.os.VibrationEffect)>
<android.os.Vibrator: void vibrate(android.os.VibrationEffect,android.media.AudioAttributes)>
<android.os.Vibrator: void vibrate(android.os.VibrationEffect,android.os.VibrationAttributes)>
<android.os.Vibrator: int VIBRATION_EFFECT_SUPPORT_NO>
<android.os.Vibrator: int VIBRATION_EFFECT_SUPPORT_UNKNOWN>
<android.os.Vibrator: int VIBRATION_EFFECT_SUPPORT_YES>
android.os.VibratorManager
<android.os.VibratorManager: void cancel()>
<android.os.VibratorManager: android.os.Vibrator getDefaultVibrator()>
<android.os.VibratorManager: android.os.Vibrator getVibrator(int)>
<android.os.VibratorManager: int[] getVibratorIds()>
<android.os.VibratorManager: void vibrate(android.os.CombinedVibration)>
<android.os.VibratorManager: void vibrate(android.os.CombinedVibration,android.os.VibrationAttributes)>
android.os.WorkSource
<android.os.WorkSource: void <init>()>
<android.os.WorkSource: void <init>(android.os.WorkSource)>
<android.os.WorkSource: boolean add(android.os.WorkSource)>
<android.os.WorkSource: void clear()>
<android.os.WorkSource: int describeContents()>
<android.os.WorkSource: boolean diff(android.os.WorkSource)>
<android.os.WorkSource: boolean remove(android.os.WorkSource)>
<android.os.WorkSource: void set(android.os.WorkSource)>
<android.os.WorkSource: void writeToParcel(android.os.Parcel,int)>
<android.os.WorkSource: android.os.Parcelable$Creator CREATOR>
android.os.health.HealthStats
<android.os.health.HealthStats: java.lang.String getDataType()>
<android.os.health.HealthStats: long getMeasurement(int)>
<android.os.health.HealthStats: int getMeasurementKeyAt(int)>
<android.os.health.HealthStats: int getMeasurementKeyCount()>
<android.os.health.HealthStats: java.util.Map getMeasurements(int)>
<android.os.health.HealthStats: int getMeasurementsKeyAt(int)>
<android.os.health.HealthStats: int getMeasurementsKeyCount()>
<android.os.health.HealthStats: java.util.Map getStats(int)>
<android.os.health.HealthStats: int getStatsKeyAt(int)>
<android.os.health.HealthStats: int getStatsKeyCount()>
<android.os.health.HealthStats: android.os.health.TimerStat getTimer(int)>
<android.os.health.HealthStats: int getTimerCount(int)>
<android.os.health.HealthStats: int getTimerKeyAt(int)>
<android.os.health.HealthStats: int getTimerKeyCount()>
<android.os.health.HealthStats: long getTimerTime(int)>
<android.os.health.HealthStats: java.util.Map getTimers(int)>
<android.os.health.HealthStats: int getTimersKeyAt(int)>
<android.os.health.HealthStats: int getTimersKeyCount()>
<android.os.health.HealthStats: boolean hasMeasurement(int)>
<android.os.health.HealthStats: boolean hasMeasurements(int)>
<android.os.health.HealthStats: boolean hasStats(int)>
<android.os.health.HealthStats: boolean hasTimer(int)>
<android.os.health.HealthStats: boolean hasTimers(int)>
android.os.health.PackageHealthStats
<android.os.health.PackageHealthStats: int MEASUREMENTS_WAKEUP_ALARMS_COUNT>
<android.os.health.PackageHealthStats: int STATS_SERVICES>
android.os.health.PidHealthStats
<android.os.health.PidHealthStats: int MEASUREMENT_WAKE_NESTING_COUNT>
<android.os.health.PidHealthStats: int MEASUREMENT_WAKE_START_MS>
<android.os.health.PidHealthStats: int MEASUREMENT_WAKE_SUM_MS>
android.os.health.ProcessHealthStats
<android.os.health.ProcessHealthStats: int MEASUREMENT_ANR_COUNT>
<android.os.health.ProcessHealthStats: int MEASUREMENT_CRASHES_COUNT>
<android.os.health.ProcessHealthStats: int MEASUREMENT_FOREGROUND_MS>
<android.os.health.ProcessHealthStats: int MEASUREMENT_STARTS_COUNT>
<android.os.health.ProcessHealthStats: int MEASUREMENT_SYSTEM_TIME_MS>
<android.os.health.ProcessHealthStats: int MEASUREMENT_USER_TIME_MS>
android.os.health.ServiceHealthStats
<android.os.health.ServiceHealthStats: int MEASUREMENT_LAUNCH_COUNT>
<android.os.health.ServiceHealthStats: int MEASUREMENT_START_SERVICE_COUNT>
android.os.health.SystemHealthManager
<android.os.health.SystemHealthManager: android.os.health.HealthStats takeMyUidSnapshot()>
<android.os.health.SystemHealthManager: android.os.health.HealthStats takeUidSnapshot(int)>
<android.os.health.SystemHealthManager: android.os.health.HealthStats[] takeUidSnapshots(int[])>
android.os.health.TimerStat
<android.os.health.TimerStat: void <init>()>
<android.os.health.TimerStat: void <init>(int,long)>
<android.os.health.TimerStat: void <init>(android.os.Parcel)>
<android.os.health.TimerStat: int describeContents()>
<android.os.health.TimerStat: int getCount()>
<android.os.health.TimerStat: long getTime()>
<android.os.health.TimerStat: void setCount(int)>
<android.os.health.TimerStat: void setTime(long)>
<android.os.health.TimerStat: void writeToParcel(android.os.Parcel,int)>
<android.os.health.TimerStat: android.os.Parcelable$Creator CREATOR>
android.os.health.UidHealthStats
<android.os.health.UidHealthStats: int MEASUREMENT_BLUETOOTH_IDLE_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_BLUETOOTH_POWER_MAMS>
<android.os.health.UidHealthStats: int MEASUREMENT_BLUETOOTH_RX_BYTES>
<android.os.health.UidHealthStats: int MEASUREMENT_BLUETOOTH_RX_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_BLUETOOTH_RX_PACKETS>
<android.os.health.UidHealthStats: int MEASUREMENT_BLUETOOTH_TX_BYTES>
<android.os.health.UidHealthStats: int MEASUREMENT_BLUETOOTH_TX_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_BLUETOOTH_TX_PACKETS>
<android.os.health.UidHealthStats: int MEASUREMENT_BUTTON_USER_ACTIVITY_COUNT>
<android.os.health.UidHealthStats: int MEASUREMENT_CPU_POWER_MAMS>
<android.os.health.UidHealthStats: int MEASUREMENT_MOBILE_IDLE_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_MOBILE_POWER_MAMS>
<android.os.health.UidHealthStats: int MEASUREMENT_MOBILE_RX_BYTES>
<android.os.health.UidHealthStats: int MEASUREMENT_MOBILE_RX_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_MOBILE_RX_PACKETS>
<android.os.health.UidHealthStats: int MEASUREMENT_MOBILE_TX_BYTES>
<android.os.health.UidHealthStats: int MEASUREMENT_MOBILE_TX_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_MOBILE_TX_PACKETS>
<android.os.health.UidHealthStats: int MEASUREMENT_OTHER_USER_ACTIVITY_COUNT>
<android.os.health.UidHealthStats: int MEASUREMENT_REALTIME_BATTERY_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_REALTIME_SCREEN_OFF_BATTERY_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_SYSTEM_CPU_TIME_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_TOUCH_USER_ACTIVITY_COUNT>
<android.os.health.UidHealthStats: int MEASUREMENT_UPTIME_BATTERY_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_UPTIME_SCREEN_OFF_BATTERY_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_USER_CPU_TIME_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_WIFI_FULL_LOCK_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_WIFI_IDLE_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_WIFI_MULTICAST_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_WIFI_POWER_MAMS>
<android.os.health.UidHealthStats: int MEASUREMENT_WIFI_RUNNING_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_WIFI_RX_BYTES>
<android.os.health.UidHealthStats: int MEASUREMENT_WIFI_RX_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_WIFI_RX_PACKETS>
<android.os.health.UidHealthStats: int MEASUREMENT_WIFI_TX_BYTES>
<android.os.health.UidHealthStats: int MEASUREMENT_WIFI_TX_MS>
<android.os.health.UidHealthStats: int MEASUREMENT_WIFI_TX_PACKETS>
<android.os.health.UidHealthStats: int STATS_PACKAGES>
<android.os.health.UidHealthStats: int STATS_PIDS>
<android.os.health.UidHealthStats: int STATS_PROCESSES>
<android.os.health.UidHealthStats: int TIMERS_JOBS>
<android.os.health.UidHealthStats: int TIMERS_SENSORS>
<android.os.health.UidHealthStats: int TIMERS_SYNCS>
<android.os.health.UidHealthStats: int TIMERS_WAKELOCKS_DRAW>
<android.os.health.UidHealthStats: int TIMERS_WAKELOCKS_FULL>
<android.os.health.UidHealthStats: int TIMERS_WAKELOCKS_PARTIAL>
<android.os.health.UidHealthStats: int TIMERS_WAKELOCKS_WINDOW>
<android.os.health.UidHealthStats: int TIMER_AUDIO>
<android.os.health.UidHealthStats: int TIMER_BLUETOOTH_SCAN>
<android.os.health.UidHealthStats: int TIMER_CAMERA>
<android.os.health.UidHealthStats: int TIMER_FLASHLIGHT>
<android.os.health.UidHealthStats: int TIMER_FOREGROUND_ACTIVITY>
<android.os.health.UidHealthStats: int TIMER_GPS_SENSOR>
<android.os.health.UidHealthStats: int TIMER_MOBILE_RADIO_ACTIVE>
<android.os.health.UidHealthStats: int TIMER_PROCESS_STATE_BACKGROUND_MS>
<android.os.health.UidHealthStats: int TIMER_PROCESS_STATE_CACHED_MS>
<android.os.health.UidHealthStats: int TIMER_PROCESS_STATE_FOREGROUND_MS>
<android.os.health.UidHealthStats: int TIMER_PROCESS_STATE_FOREGROUND_SERVICE_MS>
<android.os.health.UidHealthStats: int TIMER_PROCESS_STATE_TOP_MS>
<android.os.health.UidHealthStats: int TIMER_PROCESS_STATE_TOP_SLEEPING_MS>
<android.os.health.UidHealthStats: int TIMER_VIBRATOR>
<android.os.health.UidHealthStats: int TIMER_VIDEO>
<android.os.health.UidHealthStats: int TIMER_WIFI_SCAN>
android.os.storage.OnObbStateChangeListener
<android.os.storage.OnObbStateChangeListener: void <init>()>
<android.os.storage.OnObbStateChangeListener: void onObbStateChange(java.lang.String,int)>
<android.os.storage.OnObbStateChangeListener: int ERROR_ALREADY_MOUNTED>
<android.os.storage.OnObbStateChangeListener: int ERROR_COULD_NOT_MOUNT>
<android.os.storage.OnObbStateChangeListener: int ERROR_COULD_NOT_UNMOUNT>
<android.os.storage.OnObbStateChangeListener: int ERROR_INTERNAL>
<android.os.storage.OnObbStateChangeListener: int ERROR_NOT_MOUNTED>
<android.os.storage.OnObbStateChangeListener: int ERROR_PERMISSION_DENIED>
<android.os.storage.OnObbStateChangeListener: int MOUNTED>
<android.os.storage.OnObbStateChangeListener: int UNMOUNTED>
android.os.storage.StorageManager
<android.os.storage.StorageManager: void allocateBytes(java.util.UUID,long)>
<android.os.storage.StorageManager: void allocateBytes(java.io.FileDescriptor,long)>
<android.os.storage.StorageManager: long getAllocatableBytes(java.util.UUID)>
<android.os.storage.StorageManager: long getCacheQuotaBytes(java.util.UUID)>
<android.os.storage.StorageManager: long getCacheSizeBytes(java.util.UUID)>
<android.os.storage.StorageManager: android.app.PendingIntent getManageSpaceActivityIntent(java.lang.String,int)>
<android.os.storage.StorageManager: java.lang.String getMountedObbPath(java.lang.String)>
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryStorageVolume()>
<android.os.storage.StorageManager: java.util.List getRecentStorageVolumes()>
<android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(java.io.File)>
<android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(android.net.Uri)>
<android.os.storage.StorageManager: java.util.List getStorageVolumes()>
<android.os.storage.StorageManager: java.util.List getStorageVolumesIncludingSharedProfiles()>
<android.os.storage.StorageManager: java.util.UUID getUuidForPath(java.io.File)>
<android.os.storage.StorageManager: boolean isAllocationSupported(java.io.FileDescriptor)>
<android.os.storage.StorageManager: boolean isCacheBehaviorGroup(java.io.File)>
<android.os.storage.StorageManager: boolean isCacheBehaviorTombstone(java.io.File)>
<android.os.storage.StorageManager: boolean isCheckpointSupported()>
<android.os.storage.StorageManager: boolean isEncrypted(java.io.File)>
<android.os.storage.StorageManager: boolean isObbMounted(java.lang.String)>
<android.os.storage.StorageManager: boolean mountObb(java.lang.String,java.lang.String,android.os.storage.OnObbStateChangeListener)>
<android.os.storage.StorageManager: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,android.os.ProxyFileDescriptorCallback,android.os.Handler)>
<android.os.storage.StorageManager: void registerStorageVolumeCallback(java.util.concurrent.Executor,android.os.storage.StorageManager$StorageVolumeCallback)>
<android.os.storage.StorageManager: void setCacheBehaviorGroup(java.io.File,boolean)>
<android.os.storage.StorageManager: void setCacheBehaviorTombstone(java.io.File,boolean)>
<android.os.storage.StorageManager: boolean unmountObb(java.lang.String,boolean,android.os.storage.OnObbStateChangeListener)>
<android.os.storage.StorageManager: void unregisterStorageVolumeCallback(android.os.storage.StorageManager$StorageVolumeCallback)>
<android.os.storage.StorageManager: java.lang.String ACTION_CLEAR_APP_CACHE>
<android.os.storage.StorageManager: java.lang.String ACTION_MANAGE_STORAGE>
<android.os.storage.StorageManager: java.lang.String EXTRA_REQUESTED_BYTES>
<android.os.storage.StorageManager: java.lang.String EXTRA_UUID>
<android.os.storage.StorageManager: java.util.UUID UUID_DEFAULT>
android.os.storage.StorageManager$StorageVolumeCallback
<android.os.storage.StorageManager$StorageVolumeCallback: void <init>()>
<android.os.storage.StorageManager$StorageVolumeCallback: void onStateChanged(android.os.storage.StorageVolume)>
android.os.storage.StorageVolume
<android.os.storage.StorageVolume: android.content.Intent createAccessIntent(java.lang.String)>
<android.os.storage.StorageVolume: android.content.Intent createOpenDocumentTreeIntent()>
<android.os.storage.StorageVolume: int describeContents()>
<android.os.storage.StorageVolume: java.lang.String getDescription(android.content.Context)>
<android.os.storage.StorageVolume: java.io.File getDirectory()>
<android.os.storage.StorageVolume: java.lang.String getMediaStoreVolumeName()>
<android.os.storage.StorageVolume: android.os.UserHandle getOwner()>
<android.os.storage.StorageVolume: java.lang.String getState()>
<android.os.storage.StorageVolume: java.util.UUID getStorageUuid()>
<android.os.storage.StorageVolume: java.lang.String getUuid()>
<android.os.storage.StorageVolume: boolean isEmulated()>
<android.os.storage.StorageVolume: boolean isPrimary()>
<android.os.storage.StorageVolume: boolean isRemovable()>
<android.os.storage.StorageVolume: void writeToParcel(android.os.Parcel,int)>
<android.os.storage.StorageVolume: android.os.Parcelable$Creator CREATOR>
<android.os.storage.StorageVolume: java.lang.String EXTRA_STORAGE_VOLUME>
android.os.strictmode.CleartextNetworkViolation
android.os.strictmode.ContentUriWithoutPermissionViolation
android.os.strictmode.CredentialProtectedWhileLockedViolation
android.os.strictmode.CustomViolation
android.os.strictmode.DiskReadViolation
android.os.strictmode.DiskWriteViolation
android.os.strictmode.FileUriExposedViolation
android.os.strictmode.ImplicitDirectBootViolation
android.os.strictmode.IncorrectContextUseViolation
<android.os.strictmode.IncorrectContextUseViolation: void <init>(java.lang.String,java.lang.Throwable)>
android.os.strictmode.InstanceCountViolation
<android.os.strictmode.InstanceCountViolation: long getNumberOfInstances()>
android.os.strictmode.IntentReceiverLeakedViolation
android.os.strictmode.LeakedClosableViolation
android.os.strictmode.NetworkViolation
android.os.strictmode.NonSdkApiUsedViolation
android.os.strictmode.ResourceMismatchViolation
android.os.strictmode.ServiceConnectionLeakedViolation
android.os.strictmode.SqliteObjectLeakedViolation
android.os.strictmode.UnbufferedIoViolation
android.os.strictmode.UnsafeIntentLaunchViolation
<android.os.strictmode.UnsafeIntentLaunchViolation: void <init>(android.content.Intent)>
<android.os.strictmode.UnsafeIntentLaunchViolation: android.content.Intent getIntent()>
android.os.strictmode.UntaggedSocketViolation
android.os.strictmode.Violation
android.os.strictmode.WebViewMethodCalledOnWrongThreadViolation
android.preference.CheckBoxPreference
<android.preference.CheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.CheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.CheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.CheckBoxPreference: void <init>(android.content.Context)>
android.preference.DialogPreference
<android.preference.DialogPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.DialogPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.DialogPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.DialogPreference: void <init>(android.content.Context)>
<android.preference.DialogPreference: android.app.Dialog getDialog()>
<android.preference.DialogPreference: android.graphics.drawable.Drawable getDialogIcon()>
<android.preference.DialogPreference: int getDialogLayoutResource()>
<android.preference.DialogPreference: java.lang.CharSequence getDialogMessage()>
<android.preference.DialogPreference: java.lang.CharSequence getDialogTitle()>
<android.preference.DialogPreference: java.lang.CharSequence getNegativeButtonText()>
<android.preference.DialogPreference: java.lang.CharSequence getPositiveButtonText()>
<android.preference.DialogPreference: void onActivityDestroy()>
<android.preference.DialogPreference: void onBindDialogView(android.view.View)>
<android.preference.DialogPreference: void onClick(android.content.DialogInterface,int)>
<android.preference.DialogPreference: android.view.View onCreateDialogView()>
<android.preference.DialogPreference: void onDialogClosed(boolean)>
<android.preference.DialogPreference: void onDismiss(android.content.DialogInterface)>
<android.preference.DialogPreference: void onPrepareDialogBuilder(android.app.AlertDialog$Builder)>
<android.preference.DialogPreference: void setDialogIcon(android.graphics.drawable.Drawable)>
<android.preference.DialogPreference: void setDialogIcon(int)>
<android.preference.DialogPreference: void setDialogLayoutResource(int)>
<android.preference.DialogPreference: void setDialogMessage(java.lang.CharSequence)>
<android.preference.DialogPreference: void setDialogMessage(int)>
<android.preference.DialogPreference: void setDialogTitle(java.lang.CharSequence)>
<android.preference.DialogPreference: void setDialogTitle(int)>
<android.preference.DialogPreference: void setNegativeButtonText(java.lang.CharSequence)>
<android.preference.DialogPreference: void setNegativeButtonText(int)>
<android.preference.DialogPreference: void setPositiveButtonText(java.lang.CharSequence)>
<android.preference.DialogPreference: void setPositiveButtonText(int)>
<android.preference.DialogPreference: void showDialog(android.os.Bundle)>
android.preference.EditTextPreference
<android.preference.EditTextPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.EditTextPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.EditTextPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.EditTextPreference: void <init>(android.content.Context)>
<android.preference.EditTextPreference: android.widget.EditText getEditText()>
<android.preference.EditTextPreference: java.lang.String getText()>
<android.preference.EditTextPreference: void onAddEditTextToDialogView(android.view.View,android.widget.EditText)>
<android.preference.EditTextPreference: void setText(java.lang.String)>
android.preference.ListPreference
<android.preference.ListPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.ListPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.ListPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.ListPreference: void <init>(android.content.Context)>
<android.preference.ListPreference: int findIndexOfValue(java.lang.String)>
<android.preference.ListPreference: java.lang.CharSequence[] getEntries()>
<android.preference.ListPreference: java.lang.CharSequence getEntry()>
<android.preference.ListPreference: java.lang.CharSequence[] getEntryValues()>
<android.preference.ListPreference: java.lang.String getValue()>
<android.preference.ListPreference: void setEntries(java.lang.CharSequence[])>
<android.preference.ListPreference: void setEntries(int)>
<android.preference.ListPreference: void setEntryValues(java.lang.CharSequence[])>
<android.preference.ListPreference: void setEntryValues(int)>
<android.preference.ListPreference: void setValue(java.lang.String)>
<android.preference.ListPreference: void setValueIndex(int)>
android.preference.MultiSelectListPreference
<android.preference.MultiSelectListPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.MultiSelectListPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.MultiSelectListPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.MultiSelectListPreference: void <init>(android.content.Context)>
<android.preference.MultiSelectListPreference: int findIndexOfValue(java.lang.String)>
<android.preference.MultiSelectListPreference: java.lang.CharSequence[] getEntries()>
<android.preference.MultiSelectListPreference: java.lang.CharSequence[] getEntryValues()>
<android.preference.MultiSelectListPreference: java.util.Set getValues()>
<android.preference.MultiSelectListPreference: void setEntries(java.lang.CharSequence[])>
<android.preference.MultiSelectListPreference: void setEntries(int)>
<android.preference.MultiSelectListPreference: void setEntryValues(java.lang.CharSequence[])>
<android.preference.MultiSelectListPreference: void setEntryValues(int)>
<android.preference.MultiSelectListPreference: void setValues(java.util.Set)>
android.preference.Preference
<android.preference.Preference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.Preference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.Preference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.Preference: void <init>(android.content.Context)>
<android.preference.Preference: boolean callChangeListener(java.lang.Object)>
<android.preference.Preference: int compareTo(android.preference.Preference)>
<android.preference.Preference: android.preference.Preference findPreferenceInHierarchy(java.lang.String)>
<android.preference.Preference: android.content.Context getContext()>
<android.preference.Preference: java.lang.String getDependency()>
<android.preference.Preference: android.content.SharedPreferences$Editor getEditor()>
<android.preference.Preference: android.os.Bundle getExtras()>
<android.preference.Preference: java.lang.String getFragment()>
<android.preference.Preference: android.graphics.drawable.Drawable getIcon()>
<android.preference.Preference: android.content.Intent getIntent()>
<android.preference.Preference: java.lang.String getKey()>
<android.preference.Preference: int getLayoutResource()>
<android.preference.Preference: android.preference.Preference$OnPreferenceChangeListener getOnPreferenceChangeListener()>
<android.preference.Preference: android.preference.Preference$OnPreferenceClickListener getOnPreferenceClickListener()>
<android.preference.Preference: int getOrder()>
<android.preference.Preference: android.preference.PreferenceGroup getParent()>
<android.preference.Preference: boolean getPersistedBoolean(boolean)>
<android.preference.Preference: float getPersistedFloat(float)>
<android.preference.Preference: int getPersistedInt(int)>
<android.preference.Preference: long getPersistedLong(long)>
<android.preference.Preference: java.lang.String getPersistedString(java.lang.String)>
<android.preference.Preference: java.util.Set getPersistedStringSet(java.util.Set)>
<android.preference.Preference: android.preference.PreferenceDataStore getPreferenceDataStore()>
<android.preference.Preference: android.preference.PreferenceManager getPreferenceManager()>
<android.preference.Preference: android.content.SharedPreferences getSharedPreferences()>
<android.preference.Preference: boolean getShouldDisableView()>
<android.preference.Preference: java.lang.CharSequence getSummary()>
<android.preference.Preference: java.lang.CharSequence getTitle()>
<android.preference.Preference: int getTitleRes()>
<android.preference.Preference: android.view.View getView(android.view.View,android.view.ViewGroup)>
<android.preference.Preference: int getWidgetLayoutResource()>
<android.preference.Preference: boolean hasKey()>
<android.preference.Preference: boolean isEnabled()>
<android.preference.Preference: boolean isIconSpaceReserved()>
<android.preference.Preference: boolean isPersistent()>
<android.preference.Preference: boolean isRecycleEnabled()>
<android.preference.Preference: boolean isSelectable()>
<android.preference.Preference: boolean isSingleLineTitle()>
<android.preference.Preference: void notifyChanged()>
<android.preference.Preference: void notifyDependencyChange(boolean)>
<android.preference.Preference: void notifyHierarchyChanged()>
<android.preference.Preference: void onAttachedToActivity()>
<android.preference.Preference: void onAttachedToHierarchy(android.preference.PreferenceManager)>
<android.preference.Preference: void onBindView(android.view.View)>
<android.preference.Preference: void onClick()>
<android.preference.Preference: android.view.View onCreateView(android.view.ViewGroup)>
<android.preference.Preference: void onDependencyChanged(android.preference.Preference,boolean)>
<android.preference.Preference: java.lang.Object onGetDefaultValue(android.content.res.TypedArray,int)>
<android.preference.Preference: void onParentChanged(android.preference.Preference,boolean)>
<android.preference.Preference: void onPrepareForRemoval()>
<android.preference.Preference: void onRestoreInstanceState(android.os.Parcelable)>
<android.preference.Preference: android.os.Parcelable onSaveInstanceState()>
<android.preference.Preference: void onSetInitialValue(boolean,java.lang.Object)>
<android.preference.Preference: android.os.Bundle peekExtras()>
<android.preference.Preference: boolean persistBoolean(boolean)>
<android.preference.Preference: boolean persistFloat(float)>
<android.preference.Preference: boolean persistInt(int)>
<android.preference.Preference: boolean persistLong(long)>
<android.preference.Preference: boolean persistString(java.lang.String)>
<android.preference.Preference: boolean persistStringSet(java.util.Set)>
<android.preference.Preference: void restoreHierarchyState(android.os.Bundle)>
<android.preference.Preference: void saveHierarchyState(android.os.Bundle)>
<android.preference.Preference: void setDefaultValue(java.lang.Object)>
<android.preference.Preference: void setDependency(java.lang.String)>
<android.preference.Preference: void setEnabled(boolean)>
<android.preference.Preference: void setFragment(java.lang.String)>
<android.preference.Preference: void setIcon(android.graphics.drawable.Drawable)>
<android.preference.Preference: void setIcon(int)>
<android.preference.Preference: void setIconSpaceReserved(boolean)>
<android.preference.Preference: void setIntent(android.content.Intent)>
<android.preference.Preference: void setKey(java.lang.String)>
<android.preference.Preference: void setLayoutResource(int)>
<android.preference.Preference: void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)>
<android.preference.Preference: void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener)>
<android.preference.Preference: void setOrder(int)>
<android.preference.Preference: void setPersistent(boolean)>
<android.preference.Preference: void setPreferenceDataStore(android.preference.PreferenceDataStore)>
<android.preference.Preference: void setRecycleEnabled(boolean)>
<android.preference.Preference: void setSelectable(boolean)>
<android.preference.Preference: void setShouldDisableView(boolean)>
<android.preference.Preference: void setSingleLineTitle(boolean)>
<android.preference.Preference: void setSummary(java.lang.CharSequence)>
<android.preference.Preference: void setSummary(int)>
<android.preference.Preference: void setTitle(java.lang.CharSequence)>
<android.preference.Preference: void setTitle(int)>
<android.preference.Preference: void setWidgetLayoutResource(int)>
<android.preference.Preference: boolean shouldCommit()>
<android.preference.Preference: boolean shouldDisableDependents()>
<android.preference.Preference: boolean shouldPersist()>
<android.preference.Preference: int DEFAULT_ORDER>
android.preference.Preference$BaseSavedState
<android.preference.Preference$BaseSavedState: void <init>(android.os.Parcel)>
<android.preference.Preference$BaseSavedState: void <init>(android.os.Parcelable)>
<android.preference.Preference$BaseSavedState: android.os.Parcelable$Creator CREATOR>
android.preference.Preference$OnPreferenceChangeListener
<android.preference.Preference$OnPreferenceChangeListener: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>
android.preference.Preference$OnPreferenceClickListener
<android.preference.Preference$OnPreferenceClickListener: boolean onPreferenceClick(android.preference.Preference)>
android.preference.PreferenceActivity
<android.preference.PreferenceActivity: void <init>()>
<android.preference.PreferenceActivity: void addPreferencesFromIntent(android.content.Intent)>
<android.preference.PreferenceActivity: void addPreferencesFromResource(int)>
<android.preference.PreferenceActivity: android.preference.Preference findPreference(java.lang.CharSequence)>
<android.preference.PreferenceActivity: void finishPreferencePanel(android.app.Fragment,int,android.content.Intent)>
<android.preference.PreferenceActivity: android.preference.PreferenceManager getPreferenceManager()>
<android.preference.PreferenceActivity: android.preference.PreferenceScreen getPreferenceScreen()>
<android.preference.PreferenceActivity: boolean hasHeaders()>
<android.preference.PreferenceActivity: void invalidateHeaders()>
<android.preference.PreferenceActivity: boolean isMultiPane()>
<android.preference.PreferenceActivity: boolean isValidFragment(java.lang.String)>
<android.preference.PreferenceActivity: void loadHeadersFromResource(int,java.util.List)>
<android.preference.PreferenceActivity: void onBackPressed()>
<android.preference.PreferenceActivity: void onBuildHeaders(java.util.List)>
<android.preference.PreferenceActivity: android.content.Intent onBuildStartFragmentIntent(java.lang.String,android.os.Bundle,int,int)>
<android.preference.PreferenceActivity: android.preference.PreferenceActivity$Header onGetInitialHeader()>
<android.preference.PreferenceActivity: android.preference.PreferenceActivity$Header onGetNewHeader()>
<android.preference.PreferenceActivity: void onHeaderClick(android.preference.PreferenceActivity$Header,int)>
<android.preference.PreferenceActivity: boolean onIsHidingHeaders()>
<android.preference.PreferenceActivity: boolean onIsMultiPane()>
<android.preference.PreferenceActivity: boolean onPreferenceStartFragment(android.preference.PreferenceFragment,android.preference.Preference)>
<android.preference.PreferenceActivity: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)>
<android.preference.PreferenceActivity: void setListFooter(android.view.View)>
<android.preference.PreferenceActivity: void setParentTitle(java.lang.CharSequence,java.lang.CharSequence,android.view.View$OnClickListener)>
<android.preference.PreferenceActivity: void setPreferenceScreen(android.preference.PreferenceScreen)>
<android.preference.PreferenceActivity: void showBreadCrumbs(java.lang.CharSequence,java.lang.CharSequence)>
<android.preference.PreferenceActivity: void startPreferenceFragment(android.app.Fragment,boolean)>
<android.preference.PreferenceActivity: void startPreferencePanel(java.lang.String,android.os.Bundle,int,java.lang.CharSequence,android.app.Fragment,int)>
<android.preference.PreferenceActivity: void startWithFragment(java.lang.String,android.os.Bundle,android.app.Fragment,int)>
<android.preference.PreferenceActivity: void startWithFragment(java.lang.String,android.os.Bundle,android.app.Fragment,int,int,int)>
<android.preference.PreferenceActivity: void switchToHeader(java.lang.String,android.os.Bundle)>
<android.preference.PreferenceActivity: void switchToHeader(android.preference.PreferenceActivity$Header)>
<android.preference.PreferenceActivity: java.lang.String EXTRA_NO_HEADERS>
<android.preference.PreferenceActivity: java.lang.String EXTRA_SHOW_FRAGMENT>
<android.preference.PreferenceActivity: java.lang.String EXTRA_SHOW_FRAGMENT_ARGUMENTS>
<android.preference.PreferenceActivity: java.lang.String EXTRA_SHOW_FRAGMENT_SHORT_TITLE>
<android.preference.PreferenceActivity: java.lang.String EXTRA_SHOW_FRAGMENT_TITLE>
<android.preference.PreferenceActivity: long HEADER_ID_UNDEFINED>
android.preference.PreferenceActivity$Header
<android.preference.PreferenceActivity$Header: void <init>()>
<android.preference.PreferenceActivity$Header: int describeContents()>
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getBreadCrumbShortTitle(android.content.res.Resources)>
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getBreadCrumbTitle(android.content.res.Resources)>
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getSummary(android.content.res.Resources)>
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getTitle(android.content.res.Resources)>
<android.preference.PreferenceActivity$Header: void readFromParcel(android.os.Parcel)>
<android.preference.PreferenceActivity$Header: void writeToParcel(android.os.Parcel,int)>
<android.preference.PreferenceActivity$Header: android.os.Parcelable$Creator CREATOR>
<android.preference.PreferenceActivity$Header: java.lang.CharSequence breadCrumbShortTitle>
<android.preference.PreferenceActivity$Header: int breadCrumbShortTitleRes>
<android.preference.PreferenceActivity$Header: java.lang.CharSequence breadCrumbTitle>
<android.preference.PreferenceActivity$Header: int breadCrumbTitleRes>
<android.preference.PreferenceActivity$Header: android.os.Bundle extras>
<android.preference.PreferenceActivity$Header: java.lang.String fragment>
<android.preference.PreferenceActivity$Header: android.os.Bundle fragmentArguments>
<android.preference.PreferenceActivity$Header: int iconRes>
<android.preference.PreferenceActivity$Header: long id>
<android.preference.PreferenceActivity$Header: android.content.Intent intent>
<android.preference.PreferenceActivity$Header: java.lang.CharSequence summary>
<android.preference.PreferenceActivity$Header: int summaryRes>
<android.preference.PreferenceActivity$Header: java.lang.CharSequence title>
<android.preference.PreferenceActivity$Header: int titleRes>
android.preference.PreferenceCategory
<android.preference.PreferenceCategory: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.PreferenceCategory: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.PreferenceCategory: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.PreferenceCategory: void <init>(android.content.Context)>
android.preference.PreferenceDataStore
<android.preference.PreferenceDataStore: boolean getBoolean(java.lang.String,boolean)>
<android.preference.PreferenceDataStore: float getFloat(java.lang.String,float)>
<android.preference.PreferenceDataStore: int getInt(java.lang.String,int)>
<android.preference.PreferenceDataStore: long getLong(java.lang.String,long)>
<android.preference.PreferenceDataStore: java.lang.String getString(java.lang.String,java.lang.String)>
<android.preference.PreferenceDataStore: java.util.Set getStringSet(java.lang.String,java.util.Set)>
<android.preference.PreferenceDataStore: void putBoolean(java.lang.String,boolean)>
<android.preference.PreferenceDataStore: void putFloat(java.lang.String,float)>
<android.preference.PreferenceDataStore: void putInt(java.lang.String,int)>
<android.preference.PreferenceDataStore: void putLong(java.lang.String,long)>
<android.preference.PreferenceDataStore: void putString(java.lang.String,java.lang.String)>
<android.preference.PreferenceDataStore: void putStringSet(java.lang.String,java.util.Set)>
android.preference.PreferenceFragment
<android.preference.PreferenceFragment: void <init>()>
<android.preference.PreferenceFragment: void addPreferencesFromIntent(android.content.Intent)>
<android.preference.PreferenceFragment: void addPreferencesFromResource(int)>
<android.preference.PreferenceFragment: android.preference.Preference findPreference(java.lang.CharSequence)>
<android.preference.PreferenceFragment: android.preference.PreferenceManager getPreferenceManager()>
<android.preference.PreferenceFragment: android.preference.PreferenceScreen getPreferenceScreen()>
<android.preference.PreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)>
<android.preference.PreferenceFragment: void setPreferenceScreen(android.preference.PreferenceScreen)>
android.preference.PreferenceFragment$OnPreferenceStartFragmentCallback
<android.preference.PreferenceFragment$OnPreferenceStartFragmentCallback: boolean onPreferenceStartFragment(android.preference.PreferenceFragment,android.preference.Preference)>
android.preference.PreferenceGroup
<android.preference.PreferenceGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.PreferenceGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.PreferenceGroup: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.PreferenceGroup: void addItemFromInflater(android.preference.Preference)>
<android.preference.PreferenceGroup: boolean addPreference(android.preference.Preference)>
<android.preference.PreferenceGroup: void dispatchRestoreInstanceState(android.os.Bundle)>
<android.preference.PreferenceGroup: void dispatchSaveInstanceState(android.os.Bundle)>
<android.preference.PreferenceGroup: android.preference.Preference findPreference(java.lang.CharSequence)>
<android.preference.PreferenceGroup: android.preference.Preference getPreference(int)>
<android.preference.PreferenceGroup: int getPreferenceCount()>
<android.preference.PreferenceGroup: boolean isOnSameScreenAsChildren()>
<android.preference.PreferenceGroup: boolean isOrderingAsAdded()>
<android.preference.PreferenceGroup: boolean onPrepareAddPreference(android.preference.Preference)>
<android.preference.PreferenceGroup: void removeAll()>
<android.preference.PreferenceGroup: boolean removePreference(android.preference.Preference)>
<android.preference.PreferenceGroup: void setOrderingAsAdded(boolean)>
android.preference.PreferenceManager
<android.preference.PreferenceManager: android.preference.PreferenceScreen createPreferenceScreen(android.content.Context)>
<android.preference.PreferenceManager: android.preference.Preference findPreference(java.lang.CharSequence)>
<android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>
<android.preference.PreferenceManager: java.lang.String getDefaultSharedPreferencesName(android.content.Context)>
<android.preference.PreferenceManager: android.preference.PreferenceDataStore getPreferenceDataStore()>
<android.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>
<android.preference.PreferenceManager: int getSharedPreferencesMode()>
<android.preference.PreferenceManager: java.lang.String getSharedPreferencesName()>
<android.preference.PreferenceManager: boolean isStorageDefault()>
<android.preference.PreferenceManager: boolean isStorageDeviceProtected()>
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,int,boolean)>
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,java.lang.String,int,int,boolean)>
<android.preference.PreferenceManager: void setPreferenceDataStore(android.preference.PreferenceDataStore)>
<android.preference.PreferenceManager: void setSharedPreferencesMode(int)>
<android.preference.PreferenceManager: void setSharedPreferencesName(java.lang.String)>
<android.preference.PreferenceManager: void setStorageDefault()>
<android.preference.PreferenceManager: void setStorageDeviceProtected()>
<android.preference.PreferenceManager: java.lang.String KEY_HAS_SET_DEFAULT_VALUES>
<android.preference.PreferenceManager: java.lang.String METADATA_KEY_PREFERENCES>
android.preference.PreferenceManager$OnActivityDestroyListener
<android.preference.PreferenceManager$OnActivityDestroyListener: void onActivityDestroy()>
android.preference.PreferenceManager$OnActivityResultListener
<android.preference.PreferenceManager$OnActivityResultListener: boolean onActivityResult(int,int,android.content.Intent)>
android.preference.PreferenceManager$OnActivityStopListener
<android.preference.PreferenceManager$OnActivityStopListener: void onActivityStop()>
android.preference.PreferenceScreen
<android.preference.PreferenceScreen: void bind(android.widget.ListView)>
<android.preference.PreferenceScreen: android.app.Dialog getDialog()>
<android.preference.PreferenceScreen: android.widget.ListAdapter getRootAdapter()>
<android.preference.PreferenceScreen: android.widget.ListAdapter onCreateRootAdapter()>
<android.preference.PreferenceScreen: void onDismiss(android.content.DialogInterface)>
<android.preference.PreferenceScreen: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
android.preference.RingtonePreference
<android.preference.RingtonePreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.RingtonePreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.RingtonePreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.RingtonePreference: void <init>(android.content.Context)>
<android.preference.RingtonePreference: int getRingtoneType()>
<android.preference.RingtonePreference: boolean getShowDefault()>
<android.preference.RingtonePreference: boolean getShowSilent()>
<android.preference.RingtonePreference: boolean onActivityResult(int,int,android.content.Intent)>
<android.preference.RingtonePreference: void onPrepareRingtonePickerIntent(android.content.Intent)>
<android.preference.RingtonePreference: android.net.Uri onRestoreRingtone()>
<android.preference.RingtonePreference: void onSaveRingtone(android.net.Uri)>
<android.preference.RingtonePreference: void setRingtoneType(int)>
<android.preference.RingtonePreference: void setShowDefault(boolean)>
<android.preference.RingtonePreference: void setShowSilent(boolean)>
android.preference.SwitchPreference
<android.preference.SwitchPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.SwitchPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.SwitchPreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.SwitchPreference: void <init>(android.content.Context)>
<android.preference.SwitchPreference: java.lang.CharSequence getSwitchTextOff()>
<android.preference.SwitchPreference: java.lang.CharSequence getSwitchTextOn()>
<android.preference.SwitchPreference: void setSwitchTextOff(java.lang.CharSequence)>
<android.preference.SwitchPreference: void setSwitchTextOff(int)>
<android.preference.SwitchPreference: void setSwitchTextOn(java.lang.CharSequence)>
<android.preference.SwitchPreference: void setSwitchTextOn(int)>
android.preference.TwoStatePreference
<android.preference.TwoStatePreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.preference.TwoStatePreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.preference.TwoStatePreference: void <init>(android.content.Context,android.util.AttributeSet)>
<android.preference.TwoStatePreference: void <init>(android.content.Context)>
<android.preference.TwoStatePreference: boolean getDisableDependentsState()>
<android.preference.TwoStatePreference: java.lang.CharSequence getSummaryOff()>
<android.preference.TwoStatePreference: java.lang.CharSequence getSummaryOn()>
<android.preference.TwoStatePreference: boolean isChecked()>
<android.preference.TwoStatePreference: void setChecked(boolean)>
<android.preference.TwoStatePreference: void setDisableDependentsState(boolean)>
<android.preference.TwoStatePreference: void setSummaryOff(java.lang.CharSequence)>
<android.preference.TwoStatePreference: void setSummaryOff(int)>
<android.preference.TwoStatePreference: void setSummaryOn(java.lang.CharSequence)>
<android.preference.TwoStatePreference: void setSummaryOn(int)>
android.print.PageRange
<android.print.PageRange: void <init>(int,int)>
<android.print.PageRange: int describeContents()>
<android.print.PageRange: int getEnd()>
<android.print.PageRange: int getStart()>
<android.print.PageRange: void writeToParcel(android.os.Parcel,int)>
<android.print.PageRange: android.print.PageRange ALL_PAGES>
<android.print.PageRange: android.os.Parcelable$Creator CREATOR>
android.print.PrintAttributes
<android.print.PrintAttributes: int describeContents()>
<android.print.PrintAttributes: int getColorMode()>
<android.print.PrintAttributes: int getDuplexMode()>
<android.print.PrintAttributes: android.print.PrintAttributes$MediaSize getMediaSize()>
<android.print.PrintAttributes: android.print.PrintAttributes$Margins getMinMargins()>
<android.print.PrintAttributes: android.print.PrintAttributes$Resolution getResolution()>
<android.print.PrintAttributes: void writeToParcel(android.os.Parcel,int)>
<android.print.PrintAttributes: int COLOR_MODE_COLOR>
<android.print.PrintAttributes: int COLOR_MODE_MONOCHROME>
<android.print.PrintAttributes: android.os.Parcelable$Creator CREATOR>
<android.print.PrintAttributes: int DUPLEX_MODE_LONG_EDGE>
<android.print.PrintAttributes: int DUPLEX_MODE_NONE>
<android.print.PrintAttributes: int DUPLEX_MODE_SHORT_EDGE>
android.print.PrintAttributes$Builder
<android.print.PrintAttributes$Builder: void <init>()>
<android.print.PrintAttributes$Builder: android.print.PrintAttributes build()>
<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setColorMode(int)>
<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setDuplexMode(int)>
<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setMediaSize(android.print.PrintAttributes$MediaSize)>
<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setMinMargins(android.print.PrintAttributes$Margins)>
<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setResolution(android.print.PrintAttributes$Resolution)>
android.print.PrintAttributes$Margins
<android.print.PrintAttributes$Margins: void <init>(int,int,int,int)>
<android.print.PrintAttributes$Margins: int getBottomMils()>
<android.print.PrintAttributes$Margins: int getLeftMils()>
<android.print.PrintAttributes$Margins: int getRightMils()>
<android.print.PrintAttributes$Margins: int getTopMils()>
<android.print.PrintAttributes$Margins: android.print.PrintAttributes$Margins NO_MARGINS>
android.print.PrintAttributes$MediaSize
<android.print.PrintAttributes$MediaSize: void <init>(java.lang.String,java.lang.String,int,int)>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize asLandscape()>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize asPortrait()>
<android.print.PrintAttributes$MediaSize: int getHeightMils()>
<android.print.PrintAttributes$MediaSize: java.lang.String getId()>
<android.print.PrintAttributes$MediaSize: java.lang.String getLabel(android.content.pm.PackageManager)>
<android.print.PrintAttributes$MediaSize: int getWidthMils()>
<android.print.PrintAttributes$MediaSize: boolean isPortrait()>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ANSI_C>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ANSI_D>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ANSI_E>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ANSI_F>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_A0>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_A1>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_A10>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_A2>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_A3>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_A4>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_A5>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_A6>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_A7>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_A8>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_A9>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_B0>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_B1>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_B10>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_B2>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_B3>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_B4>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_B5>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_B6>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_B7>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_B8>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_B9>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_C0>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_C1>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_C10>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_C2>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_C3>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_C4>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_C5>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_C6>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_C7>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_C8>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ISO_C9>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JIS_B0>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JIS_B1>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JIS_B10>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JIS_B2>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JIS_B3>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JIS_B4>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JIS_B5>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JIS_B6>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JIS_B7>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JIS_B8>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JIS_B9>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JIS_EXEC>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JPN_CHOU2>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JPN_CHOU3>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JPN_CHOU4>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JPN_HAGAKI>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JPN_KAHU>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JPN_KAKU2>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JPN_OE_PHOTO_L>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JPN_OUFUKU>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize JPN_YOU4>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_ARCH_A>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_ARCH_B>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_ARCH_C>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_ARCH_D>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_ARCH_E>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_ARCH_E1>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_FOOLSCAP>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_GOVT_LETTER>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_INDEX_3X5>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_INDEX_4X6>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_INDEX_5X8>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_JUNIOR_LEGAL>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_LEDGER>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_LEGAL>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_LETTER>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_MONARCH>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_QUARTO>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_SUPER_B>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize NA_TABLOID>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize OM_DAI_PA_KAI>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize OM_JUURO_KU_KAI>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize OM_PA_KAI>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize PRC_1>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize PRC_10>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize PRC_16K>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize PRC_2>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize PRC_3>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize PRC_4>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize PRC_5>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize PRC_6>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize PRC_7>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize PRC_8>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize PRC_9>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ROC_16K>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize ROC_8K>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize UNKNOWN_LANDSCAPE>
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize UNKNOWN_PORTRAIT>
android.print.PrintAttributes$Resolution
<android.print.PrintAttributes$Resolution: void <init>(java.lang.String,java.lang.String,int,int)>
<android.print.PrintAttributes$Resolution: int getHorizontalDpi()>
<android.print.PrintAttributes$Resolution: java.lang.String getId()>
<android.print.PrintAttributes$Resolution: java.lang.String getLabel()>
<android.print.PrintAttributes$Resolution: int getVerticalDpi()>
android.print.PrintDocumentAdapter
<android.print.PrintDocumentAdapter: void <init>()>
<android.print.PrintDocumentAdapter: void onFinish()>
<android.print.PrintDocumentAdapter: void onLayout(android.print.PrintAttributes,android.print.PrintAttributes,android.os.CancellationSignal,android.print.PrintDocumentAdapter$LayoutResultCallback,android.os.Bundle)>
<android.print.PrintDocumentAdapter: void onStart()>
<android.print.PrintDocumentAdapter: void onWrite(android.print.PageRange[],android.os.ParcelFileDescriptor,android.os.CancellationSignal,android.print.PrintDocumentAdapter$WriteResultCallback)>
<android.print.PrintDocumentAdapter: java.lang.String EXTRA_PRINT_PREVIEW>
android.print.PrintDocumentAdapter$LayoutResultCallback
<android.print.PrintDocumentAdapter$LayoutResultCallback: void onLayoutCancelled()>
<android.print.PrintDocumentAdapter$LayoutResultCallback: void onLayoutFailed(java.lang.CharSequence)>
<android.print.PrintDocumentAdapter$LayoutResultCallback: void onLayoutFinished(android.print.PrintDocumentInfo,boolean)>
android.print.PrintDocumentAdapter$WriteResultCallback
<android.print.PrintDocumentAdapter$WriteResultCallback: void onWriteCancelled()>
<android.print.PrintDocumentAdapter$WriteResultCallback: void onWriteFailed(java.lang.CharSequence)>
<android.print.PrintDocumentAdapter$WriteResultCallback: void onWriteFinished(android.print.PageRange[])>
android.print.PrintDocumentInfo
<android.print.PrintDocumentInfo: int describeContents()>
<android.print.PrintDocumentInfo: int getContentType()>
<android.print.PrintDocumentInfo: long getDataSize()>
<android.print.PrintDocumentInfo: java.lang.String getName()>
<android.print.PrintDocumentInfo: int getPageCount()>
<android.print.PrintDocumentInfo: void writeToParcel(android.os.Parcel,int)>
<android.print.PrintDocumentInfo: int CONTENT_TYPE_DOCUMENT>
<android.print.PrintDocumentInfo: int CONTENT_TYPE_PHOTO>
<android.print.PrintDocumentInfo: int CONTENT_TYPE_UNKNOWN>
<android.print.PrintDocumentInfo: android.os.Parcelable$Creator CREATOR>
<android.print.PrintDocumentInfo: int PAGE_COUNT_UNKNOWN>
android.print.PrintDocumentInfo$Builder
<android.print.PrintDocumentInfo$Builder: void <init>(java.lang.String)>
<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo build()>
<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo$Builder setContentType(int)>
<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo$Builder setPageCount(int)>
android.print.PrintJob
<android.print.PrintJob: void cancel()>
<android.print.PrintJob: android.print.PrintJobId getId()>
<android.print.PrintJob: android.print.PrintJobInfo getInfo()>
<android.print.PrintJob: boolean isBlocked()>
<android.print.PrintJob: boolean isCancelled()>
<android.print.PrintJob: boolean isCompleted()>
<android.print.PrintJob: boolean isFailed()>
<android.print.PrintJob: boolean isQueued()>
<android.print.PrintJob: boolean isStarted()>
<android.print.PrintJob: void restart()>
android.print.PrintJobId
<android.print.PrintJobId: int describeContents()>
<android.print.PrintJobId: void writeToParcel(android.os.Parcel,int)>
<android.print.PrintJobId: android.os.Parcelable$Creator CREATOR>
android.print.PrintJobInfo
<android.print.PrintJobInfo: int describeContents()>
<android.print.PrintJobInfo: int getAdvancedIntOption(java.lang.String)>
<android.print.PrintJobInfo: java.lang.String getAdvancedStringOption(java.lang.String)>
<android.print.PrintJobInfo: android.print.PrintAttributes getAttributes()>
<android.print.PrintJobInfo: int getCopies()>
<android.print.PrintJobInfo: long getCreationTime()>
<android.print.PrintJobInfo: android.print.PrintJobId getId()>
<android.print.PrintJobInfo: java.lang.String getLabel()>
<android.print.PrintJobInfo: android.print.PageRange[] getPages()>
<android.print.PrintJobInfo: android.print.PrinterId getPrinterId()>
<android.print.PrintJobInfo: int getState()>
<android.print.PrintJobInfo: boolean hasAdvancedOption(java.lang.String)>
<android.print.PrintJobInfo: void writeToParcel(android.os.Parcel,int)>
<android.print.PrintJobInfo: android.os.Parcelable$Creator CREATOR>
<android.print.PrintJobInfo: int STATE_BLOCKED>
<android.print.PrintJobInfo: int STATE_CANCELED>
<android.print.PrintJobInfo: int STATE_COMPLETED>
<android.print.PrintJobInfo: int STATE_CREATED>
<android.print.PrintJobInfo: int STATE_FAILED>
<android.print.PrintJobInfo: int STATE_QUEUED>
<android.print.PrintJobInfo: int STATE_STARTED>
android.print.PrintJobInfo$Builder
<android.print.PrintJobInfo$Builder: void <init>(android.print.PrintJobInfo)>
<android.print.PrintJobInfo$Builder: android.print.PrintJobInfo build()>
<android.print.PrintJobInfo$Builder: void putAdvancedOption(java.lang.String,java.lang.String)>
<android.print.PrintJobInfo$Builder: void putAdvancedOption(java.lang.String,int)>
<android.print.PrintJobInfo$Builder: void setAttributes(android.print.PrintAttributes)>
<android.print.PrintJobInfo$Builder: void setCopies(int)>
<android.print.PrintJobInfo$Builder: void setPages(android.print.PageRange[])>
android.print.PrintManager
<android.print.PrintManager: java.util.List getPrintJobs()>
<android.print.PrintManager: boolean isPrintServiceEnabled(android.content.ComponentName)>
<android.print.PrintManager: android.print.PrintJob print(java.lang.String,android.print.PrintDocumentAdapter,android.print.PrintAttributes)>
android.print.PrinterCapabilitiesInfo
<android.print.PrinterCapabilitiesInfo: int describeContents()>
<android.print.PrinterCapabilitiesInfo: int getColorModes()>
<android.print.PrinterCapabilitiesInfo: android.print.PrintAttributes getDefaults()>
<android.print.PrinterCapabilitiesInfo: int getDuplexModes()>
<android.print.PrinterCapabilitiesInfo: java.util.List getMediaSizes()>
<android.print.PrinterCapabilitiesInfo: android.print.PrintAttributes$Margins getMinMargins()>
<android.print.PrinterCapabilitiesInfo: java.util.List getResolutions()>
<android.print.PrinterCapabilitiesInfo: void writeToParcel(android.os.Parcel,int)>
<android.print.PrinterCapabilitiesInfo: android.os.Parcelable$Creator CREATOR>
android.print.PrinterCapabilitiesInfo$Builder
<android.print.PrinterCapabilitiesInfo$Builder: void <init>(android.print.PrinterId)>
<android.print.PrinterCapabilitiesInfo$Builder: android.print.PrinterCapabilitiesInfo$Builder addMediaSize(android.print.PrintAttributes$MediaSize,boolean)>
<android.print.PrinterCapabilitiesInfo$Builder: android.print.PrinterCapabilitiesInfo$Builder addResolution(android.print.PrintAttributes$Resolution,boolean)>
<android.print.PrinterCapabilitiesInfo$Builder: android.print.PrinterCapabilitiesInfo build()>
<android.print.PrinterCapabilitiesInfo$Builder: android.print.PrinterCapabilitiesInfo$Builder setColorModes(int,int)>
<android.print.PrinterCapabilitiesInfo$Builder: android.print.PrinterCapabilitiesInfo$Builder setDuplexModes(int,int)>
<android.print.PrinterCapabilitiesInfo$Builder: android.print.PrinterCapabilitiesInfo$Builder setMinMargins(android.print.PrintAttributes$Margins)>
android.print.PrinterId
<android.print.PrinterId: int describeContents()>
<android.print.PrinterId: java.lang.String getLocalId()>
<android.print.PrinterId: void writeToParcel(android.os.Parcel,int)>
<android.print.PrinterId: android.os.Parcelable$Creator CREATOR>
android.print.PrinterInfo
<android.print.PrinterInfo: int describeContents()>
<android.print.PrinterInfo: android.print.PrinterCapabilitiesInfo getCapabilities()>
<android.print.PrinterInfo: java.lang.String getDescription()>
<android.print.PrinterInfo: android.print.PrinterId getId()>
<android.print.PrinterInfo: java.lang.String getName()>
<android.print.PrinterInfo: int getStatus()>
<android.print.PrinterInfo: void writeToParcel(android.os.Parcel,int)>
<android.print.PrinterInfo: android.os.Parcelable$Creator CREATOR>
<android.print.PrinterInfo: int STATUS_BUSY>
<android.print.PrinterInfo: int STATUS_IDLE>
<android.print.PrinterInfo: int STATUS_UNAVAILABLE>
android.print.PrinterInfo$Builder
<android.print.PrinterInfo$Builder: void <init>(android.print.PrinterId,java.lang.String,int)>
<android.print.PrinterInfo$Builder: void <init>(android.print.PrinterInfo)>
<android.print.PrinterInfo$Builder: android.print.PrinterInfo build()>
<android.print.PrinterInfo$Builder: android.print.PrinterInfo$Builder setCapabilities(android.print.PrinterCapabilitiesInfo)>
<android.print.PrinterInfo$Builder: android.print.PrinterInfo$Builder setDescription(java.lang.String)>
<android.print.PrinterInfo$Builder: android.print.PrinterInfo$Builder setHasCustomPrinterIcon(boolean)>
<android.print.PrinterInfo$Builder: android.print.PrinterInfo$Builder setIconResourceId(int)>
<android.print.PrinterInfo$Builder: android.print.PrinterInfo$Builder setInfoIntent(android.app.PendingIntent)>
<android.print.PrinterInfo$Builder: android.print.PrinterInfo$Builder setName(java.lang.String)>
<android.print.PrinterInfo$Builder: android.print.PrinterInfo$Builder setStatus(int)>
android.print.pdf.PrintedPdfDocument
<android.print.pdf.PrintedPdfDocument: void <init>(android.content.Context,android.print.PrintAttributes)>
<android.print.pdf.PrintedPdfDocument: android.graphics.Rect getPageContentRect()>
<android.print.pdf.PrintedPdfDocument: int getPageHeight()>
<android.print.pdf.PrintedPdfDocument: int getPageWidth()>
<android.print.pdf.PrintedPdfDocument: android.graphics.pdf.PdfDocument$Page startPage(int)>
android.printservice.CustomPrinterIconCallback
<android.printservice.CustomPrinterIconCallback: boolean onCustomPrinterIconLoaded(android.graphics.drawable.Icon)>
android.printservice.PrintDocument
<android.printservice.PrintDocument: android.os.ParcelFileDescriptor getData()>
<android.printservice.PrintDocument: android.print.PrintDocumentInfo getInfo()>
android.printservice.PrintJob
<android.printservice.PrintJob: boolean block(java.lang.String)>
<android.printservice.PrintJob: boolean cancel()>
<android.printservice.PrintJob: boolean complete()>
<android.printservice.PrintJob: boolean fail(java.lang.String)>
<android.printservice.PrintJob: int getAdvancedIntOption(java.lang.String)>
<android.printservice.PrintJob: java.lang.String getAdvancedStringOption(java.lang.String)>
<android.printservice.PrintJob: android.printservice.PrintDocument getDocument()>
<android.printservice.PrintJob: android.print.PrintJobId getId()>
<android.printservice.PrintJob: android.print.PrintJobInfo getInfo()>
<android.printservice.PrintJob: java.lang.String getTag()>
<android.printservice.PrintJob: boolean hasAdvancedOption(java.lang.String)>
<android.printservice.PrintJob: boolean isBlocked()>
<android.printservice.PrintJob: boolean isCancelled()>
<android.printservice.PrintJob: boolean isCompleted()>
<android.printservice.PrintJob: boolean isFailed()>
<android.printservice.PrintJob: boolean isQueued()>
<android.printservice.PrintJob: boolean isStarted()>
<android.printservice.PrintJob: void setProgress(float)>
<android.printservice.PrintJob: void setStatus(java.lang.CharSequence)>
<android.printservice.PrintJob: void setStatus(int)>
<android.printservice.PrintJob: boolean setTag(java.lang.String)>
<android.printservice.PrintJob: boolean start()>
android.printservice.PrintService
<android.printservice.PrintService: void <init>()>
<android.printservice.PrintService: void attachBaseContext(android.content.Context)>
<android.printservice.PrintService: android.print.PrinterId generatePrinterId(java.lang.String)>
<android.printservice.PrintService: java.util.List getActivePrintJobs()>
<android.printservice.PrintService: android.os.IBinder onBind(android.content.Intent)>
<android.printservice.PrintService: void onConnected()>
<android.printservice.PrintService: android.printservice.PrinterDiscoverySession onCreatePrinterDiscoverySession()>
<android.printservice.PrintService: void onDisconnected()>
<android.printservice.PrintService: void onPrintJobQueued(android.printservice.PrintJob)>
<android.printservice.PrintService: void onRequestCancelPrintJob(android.printservice.PrintJob)>
<android.printservice.PrintService: java.lang.String EXTRA_CAN_SELECT_PRINTER>
<android.printservice.PrintService: java.lang.String EXTRA_PRINTER_INFO>
<android.printservice.PrintService: java.lang.String EXTRA_PRINT_DOCUMENT_INFO>
<android.printservice.PrintService: java.lang.String EXTRA_PRINT_JOB_INFO>
<android.printservice.PrintService: java.lang.String EXTRA_SELECT_PRINTER>
<android.printservice.PrintService: java.lang.String SERVICE_INTERFACE>
<android.printservice.PrintService: java.lang.String SERVICE_META_DATA>
android.printservice.PrinterDiscoverySession
<android.printservice.PrinterDiscoverySession: void <init>()>
<android.printservice.PrinterDiscoverySession: void addPrinters(java.util.List)>
<android.printservice.PrinterDiscoverySession: java.util.List getPrinters()>
<android.printservice.PrinterDiscoverySession: java.util.List getTrackedPrinters()>
<android.printservice.PrinterDiscoverySession: boolean isDestroyed()>
<android.printservice.PrinterDiscoverySession: boolean isPrinterDiscoveryStarted()>
<android.printservice.PrinterDiscoverySession: void onDestroy()>
<android.printservice.PrinterDiscoverySession: void onRequestCustomPrinterIcon(android.print.PrinterId,android.os.CancellationSignal,android.printservice.CustomPrinterIconCallback)>
<android.printservice.PrinterDiscoverySession: void onStartPrinterDiscovery(java.util.List)>
<android.printservice.PrinterDiscoverySession: void onStartPrinterStateTracking(android.print.PrinterId)>
<android.printservice.PrinterDiscoverySession: void onStopPrinterDiscovery()>
<android.printservice.PrinterDiscoverySession: void onStopPrinterStateTracking(android.print.PrinterId)>
<android.printservice.PrinterDiscoverySession: void onValidatePrinters(java.util.List)>
<android.printservice.PrinterDiscoverySession: void removePrinters(java.util.List)>
android.provider.AlarmClock
<android.provider.AlarmClock: void <init>()>
<android.provider.AlarmClock: java.lang.String ACTION_DISMISS_ALARM>
<android.provider.AlarmClock: java.lang.String ACTION_DISMISS_TIMER>
<android.provider.AlarmClock: java.lang.String ACTION_SET_ALARM>
<android.provider.AlarmClock: java.lang.String ACTION_SET_TIMER>
<android.provider.AlarmClock: java.lang.String ACTION_SHOW_ALARMS>
<android.provider.AlarmClock: java.lang.String ACTION_SHOW_TIMERS>
<android.provider.AlarmClock: java.lang.String ACTION_SNOOZE_ALARM>
<android.provider.AlarmClock: java.lang.String ALARM_SEARCH_MODE_ALL>
<android.provider.AlarmClock: java.lang.String ALARM_SEARCH_MODE_LABEL>
<android.provider.AlarmClock: java.lang.String ALARM_SEARCH_MODE_NEXT>
<android.provider.AlarmClock: java.lang.String ALARM_SEARCH_MODE_TIME>
<android.provider.AlarmClock: java.lang.String EXTRA_ALARM_SEARCH_MODE>
<android.provider.AlarmClock: java.lang.String EXTRA_ALARM_SNOOZE_DURATION>
<android.provider.AlarmClock: java.lang.String EXTRA_DAYS>
<android.provider.AlarmClock: java.lang.String EXTRA_HOUR>
<android.provider.AlarmClock: java.lang.String EXTRA_IS_PM>
<android.provider.AlarmClock: java.lang.String EXTRA_LENGTH>
<android.provider.AlarmClock: java.lang.String EXTRA_MESSAGE>
<android.provider.AlarmClock: java.lang.String EXTRA_MINUTES>
<android.provider.AlarmClock: java.lang.String EXTRA_RINGTONE>
<android.provider.AlarmClock: java.lang.String EXTRA_SKIP_UI>
<android.provider.AlarmClock: java.lang.String EXTRA_VIBRATE>
<android.provider.AlarmClock: java.lang.String VALUE_RINGTONE_SILENT>
android.provider.BaseColumns
<android.provider.BaseColumns: java.lang.String _COUNT>
<android.provider.BaseColumns: java.lang.String _ID>
android.provider.BlockedNumberContract
<android.provider.BlockedNumberContract: boolean canCurrentUserBlockNumbers(android.content.Context)>
<android.provider.BlockedNumberContract: boolean isBlocked(android.content.Context,java.lang.String)>
<android.provider.BlockedNumberContract: int unblock(android.content.Context,java.lang.String)>
<android.provider.BlockedNumberContract: java.lang.String AUTHORITY>
<android.provider.BlockedNumberContract: android.net.Uri AUTHORITY_URI>
android.provider.BlockedNumberContract$BlockedNumbers
<android.provider.BlockedNumberContract$BlockedNumbers: java.lang.String COLUMN_E164_NUMBER>
<android.provider.BlockedNumberContract$BlockedNumbers: java.lang.String COLUMN_ID>
<android.provider.BlockedNumberContract$BlockedNumbers: java.lang.String COLUMN_ORIGINAL_NUMBER>
<android.provider.BlockedNumberContract$BlockedNumbers: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.BlockedNumberContract$BlockedNumbers: java.lang.String CONTENT_TYPE>
<android.provider.BlockedNumberContract$BlockedNumbers: android.net.Uri CONTENT_URI>
android.provider.Browser
<android.provider.Browser: void <init>()>
<android.provider.Browser: void sendString(android.content.Context,java.lang.String)>
<android.provider.Browser: java.lang.String EXTRA_APPLICATION_ID>
<android.provider.Browser: java.lang.String EXTRA_CREATE_NEW_TAB>
<android.provider.Browser: java.lang.String EXTRA_HEADERS>
<android.provider.Browser: java.lang.String INITIAL_ZOOM_LEVEL>
android.provider.CalendarContract
<android.provider.CalendarContract: boolean startViewCalendarEventInManagedProfile(android.content.Context,long,long,long,boolean,int)>
<android.provider.CalendarContract: java.lang.String ACCOUNT_TYPE_LOCAL>
<android.provider.CalendarContract: java.lang.String ACTION_EVENT_REMINDER>
<android.provider.CalendarContract: java.lang.String ACTION_HANDLE_CUSTOM_EVENT>
<android.provider.CalendarContract: java.lang.String ACTION_VIEW_MANAGED_PROFILE_CALENDAR_EVENT>
<android.provider.CalendarContract: java.lang.String AUTHORITY>
<android.provider.CalendarContract: java.lang.String CALLER_IS_SYNCADAPTER>
<android.provider.CalendarContract: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract: java.lang.String EXTRA_CUSTOM_APP_URI>
<android.provider.CalendarContract: java.lang.String EXTRA_EVENT_ALL_DAY>
<android.provider.CalendarContract: java.lang.String EXTRA_EVENT_BEGIN_TIME>
<android.provider.CalendarContract: java.lang.String EXTRA_EVENT_END_TIME>
<android.provider.CalendarContract: java.lang.String EXTRA_EVENT_ID>
android.provider.CalendarContract$Attendees
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<android.provider.CalendarContract$Attendees: android.net.Uri CONTENT_URI>
android.provider.CalendarContract$AttendeesColumns
<android.provider.CalendarContract$AttendeesColumns: java.lang.String ATTENDEE_EMAIL>
<android.provider.CalendarContract$AttendeesColumns: java.lang.String ATTENDEE_IDENTITY>
<android.provider.CalendarContract$AttendeesColumns: java.lang.String ATTENDEE_ID_NAMESPACE>
<android.provider.CalendarContract$AttendeesColumns: java.lang.String ATTENDEE_NAME>
<android.provider.CalendarContract$AttendeesColumns: java.lang.String ATTENDEE_RELATIONSHIP>
<android.provider.CalendarContract$AttendeesColumns: java.lang.String ATTENDEE_STATUS>
<android.provider.CalendarContract$AttendeesColumns: int ATTENDEE_STATUS_ACCEPTED>
<android.provider.CalendarContract$AttendeesColumns: int ATTENDEE_STATUS_DECLINED>
<android.provider.CalendarContract$AttendeesColumns: int ATTENDEE_STATUS_INVITED>
<android.provider.CalendarContract$AttendeesColumns: int ATTENDEE_STATUS_NONE>
<android.provider.CalendarContract$AttendeesColumns: int ATTENDEE_STATUS_TENTATIVE>
<android.provider.CalendarContract$AttendeesColumns: java.lang.String ATTENDEE_TYPE>
<android.provider.CalendarContract$AttendeesColumns: java.lang.String EVENT_ID>
<android.provider.CalendarContract$AttendeesColumns: int RELATIONSHIP_ATTENDEE>
<android.provider.CalendarContract$AttendeesColumns: int RELATIONSHIP_NONE>
<android.provider.CalendarContract$AttendeesColumns: int RELATIONSHIP_ORGANIZER>
<android.provider.CalendarContract$AttendeesColumns: int RELATIONSHIP_PERFORMER>
<android.provider.CalendarContract$AttendeesColumns: int RELATIONSHIP_SPEAKER>
<android.provider.CalendarContract$AttendeesColumns: int TYPE_NONE>
<android.provider.CalendarContract$AttendeesColumns: int TYPE_OPTIONAL>
<android.provider.CalendarContract$AttendeesColumns: int TYPE_REQUIRED>
<android.provider.CalendarContract$AttendeesColumns: int TYPE_RESOURCE>
android.provider.CalendarContract$CalendarAlerts
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri CONTENT_URI_BY_INSTANCE>
android.provider.CalendarContract$CalendarAlertsColumns
<android.provider.CalendarContract$CalendarAlertsColumns: java.lang.String ALARM_TIME>
<android.provider.CalendarContract$CalendarAlertsColumns: java.lang.String BEGIN>
<android.provider.CalendarContract$CalendarAlertsColumns: java.lang.String CREATION_TIME>
<android.provider.CalendarContract$CalendarAlertsColumns: java.lang.String DEFAULT_SORT_ORDER>
<android.provider.CalendarContract$CalendarAlertsColumns: java.lang.String END>
<android.provider.CalendarContract$CalendarAlertsColumns: java.lang.String EVENT_ID>
<android.provider.CalendarContract$CalendarAlertsColumns: java.lang.String MINUTES>
<android.provider.CalendarContract$CalendarAlertsColumns: java.lang.String NOTIFY_TIME>
<android.provider.CalendarContract$CalendarAlertsColumns: java.lang.String RECEIVED_TIME>
<android.provider.CalendarContract$CalendarAlertsColumns: java.lang.String STATE>
<android.provider.CalendarContract$CalendarAlertsColumns: int STATE_DISMISSED>
<android.provider.CalendarContract$CalendarAlertsColumns: int STATE_FIRED>
<android.provider.CalendarContract$CalendarAlertsColumns: int STATE_SCHEDULED>
android.provider.CalendarContract$CalendarCache
<android.provider.CalendarContract$CalendarCache: java.lang.String KEY_TIMEZONE_INSTANCES>
<android.provider.CalendarContract$CalendarCache: java.lang.String KEY_TIMEZONE_INSTANCES_PREVIOUS>
<android.provider.CalendarContract$CalendarCache: java.lang.String KEY_TIMEZONE_TYPE>
<android.provider.CalendarContract$CalendarCache: java.lang.String TIMEZONE_TYPE_AUTO>
<android.provider.CalendarContract$CalendarCache: java.lang.String TIMEZONE_TYPE_HOME>
<android.provider.CalendarContract$CalendarCache: android.net.Uri URI>
android.provider.CalendarContract$CalendarCacheColumns
<android.provider.CalendarContract$CalendarCacheColumns: java.lang.String KEY>
<android.provider.CalendarContract$CalendarCacheColumns: java.lang.String VALUE>
android.provider.CalendarContract$CalendarColumns
<android.provider.CalendarContract$CalendarColumns: java.lang.String ALLOWED_ATTENDEE_TYPES>
<android.provider.CalendarContract$CalendarColumns: java.lang.String ALLOWED_AVAILABILITY>
<android.provider.CalendarContract$CalendarColumns: java.lang.String ALLOWED_REMINDERS>
<android.provider.CalendarContract$CalendarColumns: java.lang.String CALENDAR_ACCESS_LEVEL>
<android.provider.CalendarContract$CalendarColumns: java.lang.String CALENDAR_COLOR>
<android.provider.CalendarContract$CalendarColumns: java.lang.String CALENDAR_COLOR_KEY>
<android.provider.CalendarContract$CalendarColumns: java.lang.String CALENDAR_DISPLAY_NAME>
<android.provider.CalendarContract$CalendarColumns: java.lang.String CALENDAR_TIME_ZONE>
<android.provider.CalendarContract$CalendarColumns: int CAL_ACCESS_CONTRIBUTOR>
<android.provider.CalendarContract$CalendarColumns: int CAL_ACCESS_EDITOR>
<android.provider.CalendarContract$CalendarColumns: int CAL_ACCESS_FREEBUSY>
<android.provider.CalendarContract$CalendarColumns: int CAL_ACCESS_NONE>
<android.provider.CalendarContract$CalendarColumns: int CAL_ACCESS_OVERRIDE>
<android.provider.CalendarContract$CalendarColumns: int CAL_ACCESS_OWNER>
<android.provider.CalendarContract$CalendarColumns: int CAL_ACCESS_READ>
<android.provider.CalendarContract$CalendarColumns: int CAL_ACCESS_RESPOND>
<android.provider.CalendarContract$CalendarColumns: int CAL_ACCESS_ROOT>
<android.provider.CalendarContract$CalendarColumns: java.lang.String CAN_MODIFY_TIME_ZONE>
<android.provider.CalendarContract$CalendarColumns: java.lang.String CAN_ORGANIZER_RESPOND>
<android.provider.CalendarContract$CalendarColumns: java.lang.String IS_PRIMARY>
<android.provider.CalendarContract$CalendarColumns: java.lang.String MAX_REMINDERS>
<android.provider.CalendarContract$CalendarColumns: java.lang.String OWNER_ACCOUNT>
<android.provider.CalendarContract$CalendarColumns: java.lang.String SYNC_EVENTS>
<android.provider.CalendarContract$CalendarColumns: java.lang.String VISIBLE>
android.provider.CalendarContract$CalendarEntity
<android.provider.CalendarContract$CalendarEntity: android.content.EntityIterator newEntityIterator(android.database.Cursor)>
<android.provider.CalendarContract$CalendarEntity: android.net.Uri CONTENT_URI>
android.provider.CalendarContract$CalendarSyncColumns
<android.provider.CalendarContract$CalendarSyncColumns: java.lang.String CAL_SYNC1>
<android.provider.CalendarContract$CalendarSyncColumns: java.lang.String CAL_SYNC10>
<android.provider.CalendarContract$CalendarSyncColumns: java.lang.String CAL_SYNC2>
<android.provider.CalendarContract$CalendarSyncColumns: java.lang.String CAL_SYNC3>
<android.provider.CalendarContract$CalendarSyncColumns: java.lang.String CAL_SYNC4>
<android.provider.CalendarContract$CalendarSyncColumns: java.lang.String CAL_SYNC5>
<android.provider.CalendarContract$CalendarSyncColumns: java.lang.String CAL_SYNC6>
<android.provider.CalendarContract$CalendarSyncColumns: java.lang.String CAL_SYNC7>
<android.provider.CalendarContract$CalendarSyncColumns: java.lang.String CAL_SYNC8>
<android.provider.CalendarContract$CalendarSyncColumns: java.lang.String CAL_SYNC9>
android.provider.CalendarContract$Calendars
<android.provider.CalendarContract$Calendars: java.lang.String CALENDAR_LOCATION>
<android.provider.CalendarContract$Calendars: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$Calendars: java.lang.String DEFAULT_SORT_ORDER>
<android.provider.CalendarContract$Calendars: android.net.Uri ENTERPRISE_CONTENT_URI>
<android.provider.CalendarContract$Calendars: java.lang.String NAME>
android.provider.CalendarContract$Colors
<android.provider.CalendarContract$Colors: android.net.Uri CONTENT_URI>
android.provider.CalendarContract$ColorsColumns
<android.provider.CalendarContract$ColorsColumns: java.lang.String COLOR>
<android.provider.CalendarContract$ColorsColumns: java.lang.String COLOR_KEY>
<android.provider.CalendarContract$ColorsColumns: java.lang.String COLOR_TYPE>
<android.provider.CalendarContract$ColorsColumns: int TYPE_CALENDAR>
<android.provider.CalendarContract$ColorsColumns: int TYPE_EVENT>
android.provider.CalendarContract$EventDays
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])>
<android.provider.CalendarContract$EventDays: android.net.Uri CONTENT_URI>
android.provider.CalendarContract$EventDaysColumns
<android.provider.CalendarContract$EventDaysColumns: java.lang.String ENDDAY>
<android.provider.CalendarContract$EventDaysColumns: java.lang.String STARTDAY>
android.provider.CalendarContract$Events
<android.provider.CalendarContract$Events: android.net.Uri CONTENT_EXCEPTION_URI>
<android.provider.CalendarContract$Events: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$Events: android.net.Uri ENTERPRISE_CONTENT_URI>
android.provider.CalendarContract$EventsColumns
<android.provider.CalendarContract$EventsColumns: int ACCESS_CONFIDENTIAL>
<android.provider.CalendarContract$EventsColumns: int ACCESS_DEFAULT>
<android.provider.CalendarContract$EventsColumns: java.lang.String ACCESS_LEVEL>
<android.provider.CalendarContract$EventsColumns: int ACCESS_PRIVATE>
<android.provider.CalendarContract$EventsColumns: int ACCESS_PUBLIC>
<android.provider.CalendarContract$EventsColumns: java.lang.String ALL_DAY>
<android.provider.CalendarContract$EventsColumns: java.lang.String AVAILABILITY>
<android.provider.CalendarContract$EventsColumns: int AVAILABILITY_BUSY>
<android.provider.CalendarContract$EventsColumns: int AVAILABILITY_FREE>
<android.provider.CalendarContract$EventsColumns: int AVAILABILITY_TENTATIVE>
<android.provider.CalendarContract$EventsColumns: java.lang.String CALENDAR_ID>
<android.provider.CalendarContract$EventsColumns: java.lang.String CAN_INVITE_OTHERS>
<android.provider.CalendarContract$EventsColumns: java.lang.String CUSTOM_APP_PACKAGE>
<android.provider.CalendarContract$EventsColumns: java.lang.String CUSTOM_APP_URI>
<android.provider.CalendarContract$EventsColumns: java.lang.String DESCRIPTION>
<android.provider.CalendarContract$EventsColumns: java.lang.String DISPLAY_COLOR>
<android.provider.CalendarContract$EventsColumns: java.lang.String DTEND>
<android.provider.CalendarContract$EventsColumns: java.lang.String DTSTART>
<android.provider.CalendarContract$EventsColumns: java.lang.String DURATION>
<android.provider.CalendarContract$EventsColumns: java.lang.String EVENT_COLOR>
<android.provider.CalendarContract$EventsColumns: java.lang.String EVENT_COLOR_KEY>
<android.provider.CalendarContract$EventsColumns: java.lang.String EVENT_END_TIMEZONE>
<android.provider.CalendarContract$EventsColumns: java.lang.String EVENT_LOCATION>
<android.provider.CalendarContract$EventsColumns: java.lang.String EVENT_TIMEZONE>
<android.provider.CalendarContract$EventsColumns: java.lang.String EXDATE>
<android.provider.CalendarContract$EventsColumns: java.lang.String EXRULE>
<android.provider.CalendarContract$EventsColumns: java.lang.String GUESTS_CAN_INVITE_OTHERS>
<android.provider.CalendarContract$EventsColumns: java.lang.String GUESTS_CAN_MODIFY>
<android.provider.CalendarContract$EventsColumns: java.lang.String GUESTS_CAN_SEE_GUESTS>
<android.provider.CalendarContract$EventsColumns: java.lang.String HAS_ALARM>
<android.provider.CalendarContract$EventsColumns: java.lang.String HAS_ATTENDEE_DATA>
<android.provider.CalendarContract$EventsColumns: java.lang.String HAS_EXTENDED_PROPERTIES>
<android.provider.CalendarContract$EventsColumns: java.lang.String IS_ORGANIZER>
<android.provider.CalendarContract$EventsColumns: java.lang.String LAST_DATE>
<android.provider.CalendarContract$EventsColumns: java.lang.String LAST_SYNCED>
<android.provider.CalendarContract$EventsColumns: java.lang.String ORGANIZER>
<android.provider.CalendarContract$EventsColumns: java.lang.String ORIGINAL_ALL_DAY>
<android.provider.CalendarContract$EventsColumns: java.lang.String ORIGINAL_ID>
<android.provider.CalendarContract$EventsColumns: java.lang.String ORIGINAL_INSTANCE_TIME>
<android.provider.CalendarContract$EventsColumns: java.lang.String ORIGINAL_SYNC_ID>
<android.provider.CalendarContract$EventsColumns: java.lang.String RDATE>
<android.provider.CalendarContract$EventsColumns: java.lang.String RRULE>
<android.provider.CalendarContract$EventsColumns: java.lang.String SELF_ATTENDEE_STATUS>
<android.provider.CalendarContract$EventsColumns: java.lang.String STATUS>
<android.provider.CalendarContract$EventsColumns: int STATUS_CANCELED>
<android.provider.CalendarContract$EventsColumns: int STATUS_CONFIRMED>
<android.provider.CalendarContract$EventsColumns: int STATUS_TENTATIVE>
<android.provider.CalendarContract$EventsColumns: java.lang.String SYNC_DATA1>
<android.provider.CalendarContract$EventsColumns: java.lang.String SYNC_DATA10>
<android.provider.CalendarContract$EventsColumns: java.lang.String SYNC_DATA2>
<android.provider.CalendarContract$EventsColumns: java.lang.String SYNC_DATA3>
<android.provider.CalendarContract$EventsColumns: java.lang.String SYNC_DATA4>
<android.provider.CalendarContract$EventsColumns: java.lang.String SYNC_DATA5>
<android.provider.CalendarContract$EventsColumns: java.lang.String SYNC_DATA6>
<android.provider.CalendarContract$EventsColumns: java.lang.String SYNC_DATA7>
<android.provider.CalendarContract$EventsColumns: java.lang.String SYNC_DATA8>
<android.provider.CalendarContract$EventsColumns: java.lang.String SYNC_DATA9>
<android.provider.CalendarContract$EventsColumns: java.lang.String TITLE>
<android.provider.CalendarContract$EventsColumns: java.lang.String UID_2445>
android.provider.CalendarContract$EventsEntity
<android.provider.CalendarContract$EventsEntity: android.content.EntityIterator newEntityIterator(android.database.Cursor,android.content.ContentResolver)>
<android.provider.CalendarContract$EventsEntity: android.content.EntityIterator newEntityIterator(android.database.Cursor,android.content.ContentProviderClient)>
<android.provider.CalendarContract$EventsEntity: android.net.Uri CONTENT_URI>
android.provider.CalendarContract$ExtendedProperties
<android.provider.CalendarContract$ExtendedProperties: android.net.Uri CONTENT_URI>
android.provider.CalendarContract$ExtendedPropertiesColumns
<android.provider.CalendarContract$ExtendedPropertiesColumns: java.lang.String EVENT_ID>
<android.provider.CalendarContract$ExtendedPropertiesColumns: java.lang.String NAME>
<android.provider.CalendarContract$ExtendedPropertiesColumns: java.lang.String VALUE>
android.provider.CalendarContract$Instances
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)>
<android.provider.CalendarContract$Instances: java.lang.String BEGIN>
<android.provider.CalendarContract$Instances: android.net.Uri CONTENT_BY_DAY_URI>
<android.provider.CalendarContract$Instances: android.net.Uri CONTENT_SEARCH_BY_DAY_URI>
<android.provider.CalendarContract$Instances: android.net.Uri CONTENT_SEARCH_URI>
<android.provider.CalendarContract$Instances: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$Instances: java.lang.String END>
<android.provider.CalendarContract$Instances: java.lang.String END_DAY>
<android.provider.CalendarContract$Instances: java.lang.String END_MINUTE>
<android.provider.CalendarContract$Instances: android.net.Uri ENTERPRISE_CONTENT_BY_DAY_URI>
<android.provider.CalendarContract$Instances: android.net.Uri ENTERPRISE_CONTENT_SEARCH_BY_DAY_URI>
<android.provider.CalendarContract$Instances: android.net.Uri ENTERPRISE_CONTENT_SEARCH_URI>
<android.provider.CalendarContract$Instances: android.net.Uri ENTERPRISE_CONTENT_URI>
<android.provider.CalendarContract$Instances: java.lang.String EVENT_ID>
<android.provider.CalendarContract$Instances: java.lang.String START_DAY>
<android.provider.CalendarContract$Instances: java.lang.String START_MINUTE>
android.provider.CalendarContract$Reminders
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<android.provider.CalendarContract$Reminders: android.net.Uri CONTENT_URI>
android.provider.CalendarContract$RemindersColumns
<android.provider.CalendarContract$RemindersColumns: java.lang.String EVENT_ID>
<android.provider.CalendarContract$RemindersColumns: java.lang.String METHOD>
<android.provider.CalendarContract$RemindersColumns: int METHOD_ALARM>
<android.provider.CalendarContract$RemindersColumns: int METHOD_ALERT>
<android.provider.CalendarContract$RemindersColumns: int METHOD_DEFAULT>
<android.provider.CalendarContract$RemindersColumns: int METHOD_EMAIL>
<android.provider.CalendarContract$RemindersColumns: int METHOD_SMS>
<android.provider.CalendarContract$RemindersColumns: java.lang.String MINUTES>
<android.provider.CalendarContract$RemindersColumns: int MINUTES_DEFAULT>
android.provider.CalendarContract$SyncColumns
<android.provider.CalendarContract$SyncColumns: java.lang.String ACCOUNT_NAME>
<android.provider.CalendarContract$SyncColumns: java.lang.String ACCOUNT_TYPE>
<android.provider.CalendarContract$SyncColumns: java.lang.String CAN_PARTIALLY_UPDATE>
<android.provider.CalendarContract$SyncColumns: java.lang.String DELETED>
<android.provider.CalendarContract$SyncColumns: java.lang.String DIRTY>
<android.provider.CalendarContract$SyncColumns: java.lang.String MUTATORS>
<android.provider.CalendarContract$SyncColumns: java.lang.String _SYNC_ID>
android.provider.CalendarContract$SyncState
<android.provider.CalendarContract$SyncState: android.net.Uri CONTENT_URI>
android.provider.CallLog
<android.provider.CallLog: void <init>()>
<android.provider.CallLog: java.lang.String AUTHORITY>
<android.provider.CallLog: android.net.Uri CONTENT_URI>
android.provider.CallLog$Calls
<android.provider.CallLog$Calls: void <init>()>
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)>
<android.provider.CallLog$Calls: int ANSWERED_EXTERNALLY_TYPE>
<android.provider.CallLog$Calls: long AUTO_MISSED_EMERGENCY_CALL>
<android.provider.CallLog$Calls: long AUTO_MISSED_MAXIMUM_DIALING>
<android.provider.CallLog$Calls: long AUTO_MISSED_MAXIMUM_RINGING>
<android.provider.CallLog$Calls: int BLOCKED_TYPE>
<android.provider.CallLog$Calls: java.lang.String BLOCK_REASON>
<android.provider.CallLog$Calls: int BLOCK_REASON_BLOCKED_NUMBER>
<android.provider.CallLog$Calls: int BLOCK_REASON_CALL_SCREENING_SERVICE>
<android.provider.CallLog$Calls: int BLOCK_REASON_DIRECT_TO_VOICEMAIL>
<android.provider.CallLog$Calls: int BLOCK_REASON_NOT_BLOCKED>
<android.provider.CallLog$Calls: int BLOCK_REASON_NOT_IN_CONTACTS>
<android.provider.CallLog$Calls: int BLOCK_REASON_PAY_PHONE>
<android.provider.CallLog$Calls: int BLOCK_REASON_RESTRICTED_NUMBER>
<android.provider.CallLog$Calls: int BLOCK_REASON_UNKNOWN_NUMBER>
<android.provider.CallLog$Calls: java.lang.String CACHED_FORMATTED_NUMBER>
<android.provider.CallLog$Calls: java.lang.String CACHED_LOOKUP_URI>
<android.provider.CallLog$Calls: java.lang.String CACHED_MATCHED_NUMBER>
<android.provider.CallLog$Calls: java.lang.String CACHED_NAME>
<android.provider.CallLog$Calls: java.lang.String CACHED_NORMALIZED_NUMBER>
<android.provider.CallLog$Calls: java.lang.String CACHED_NUMBER_LABEL>
<android.provider.CallLog$Calls: java.lang.String CACHED_NUMBER_TYPE>
<android.provider.CallLog$Calls: java.lang.String CACHED_PHOTO_ID>
<android.provider.CallLog$Calls: java.lang.String CACHED_PHOTO_URI>
<android.provider.CallLog$Calls: java.lang.String CALL_SCREENING_APP_NAME>
<android.provider.CallLog$Calls: java.lang.String CALL_SCREENING_COMPONENT_NAME>
<android.provider.CallLog$Calls: java.lang.String COMPOSER_PHOTO_URI>
<android.provider.CallLog$Calls: android.net.Uri CONTENT_FILTER_URI>
<android.provider.CallLog$Calls: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.CallLog$Calls: java.lang.String CONTENT_TYPE>
<android.provider.CallLog$Calls: android.net.Uri CONTENT_URI>
<android.provider.CallLog$Calls: android.net.Uri CONTENT_URI_WITH_VOICEMAIL>
<android.provider.CallLog$Calls: java.lang.String COUNTRY_ISO>
<android.provider.CallLog$Calls: java.lang.String DATA_USAGE>
<android.provider.CallLog$Calls: java.lang.String DATE>
<android.provider.CallLog$Calls: java.lang.String DEFAULT_SORT_ORDER>
<android.provider.CallLog$Calls: java.lang.String DURATION>
<android.provider.CallLog$Calls: java.lang.String EXTRA_CALL_TYPE_FILTER>
<android.provider.CallLog$Calls: java.lang.String FEATURES>
<android.provider.CallLog$Calls: int FEATURES_ASSISTED_DIALING_USED>
<android.provider.CallLog$Calls: int FEATURES_HD_CALL>
<android.provider.CallLog$Calls: int FEATURES_PULLED_EXTERNALLY>
<android.provider.CallLog$Calls: int FEATURES_RTT>
<android.provider.CallLog$Calls: int FEATURES_VIDEO>
<android.provider.CallLog$Calls: int FEATURES_VOLTE>
<android.provider.CallLog$Calls: int FEATURES_WIFI>
<android.provider.CallLog$Calls: java.lang.String GEOCODED_LOCATION>
<android.provider.CallLog$Calls: int INCOMING_TYPE>
<android.provider.CallLog$Calls: java.lang.String IS_READ>
<android.provider.CallLog$Calls: java.lang.String LAST_MODIFIED>
<android.provider.CallLog$Calls: java.lang.String LIMIT_PARAM_KEY>
<android.provider.CallLog$Calls: java.lang.String LOCATION>
<android.provider.CallLog$Calls: java.lang.String MISSED_REASON>
<android.provider.CallLog$Calls: long MISSED_REASON_NOT_MISSED>
<android.provider.CallLog$Calls: int MISSED_TYPE>
<android.provider.CallLog$Calls: java.lang.String NEW>
<android.provider.CallLog$Calls: java.lang.String NUMBER>
<android.provider.CallLog$Calls: java.lang.String NUMBER_PRESENTATION>
<android.provider.CallLog$Calls: java.lang.String OFFSET_PARAM_KEY>
<android.provider.CallLog$Calls: int OUTGOING_TYPE>
<android.provider.CallLog$Calls: java.lang.String PHONE_ACCOUNT_COMPONENT_NAME>
<android.provider.CallLog$Calls: java.lang.String PHONE_ACCOUNT_ID>
<android.provider.CallLog$Calls: java.lang.String POST_DIAL_DIGITS>
<android.provider.CallLog$Calls: int PRESENTATION_ALLOWED>
<android.provider.CallLog$Calls: int PRESENTATION_PAYPHONE>
<android.provider.CallLog$Calls: int PRESENTATION_RESTRICTED>
<android.provider.CallLog$Calls: int PRESENTATION_UNAVAILABLE>
<android.provider.CallLog$Calls: int PRESENTATION_UNKNOWN>
<android.provider.CallLog$Calls: java.lang.String PRIORITY>
<android.provider.CallLog$Calls: int PRIORITY_NORMAL>
<android.provider.CallLog$Calls: int PRIORITY_URGENT>
<android.provider.CallLog$Calls: int REJECTED_TYPE>
<android.provider.CallLog$Calls: java.lang.String SUBJECT>
<android.provider.CallLog$Calls: java.lang.String TRANSCRIPTION>
<android.provider.CallLog$Calls: java.lang.String TYPE>
<android.provider.CallLog$Calls: long USER_MISSED_CALL_FILTERS_TIMEOUT>
<android.provider.CallLog$Calls: long USER_MISSED_CALL_SCREENING_SERVICE_SILENCED>
<android.provider.CallLog$Calls: long USER_MISSED_DND_MODE>
<android.provider.CallLog$Calls: long USER_MISSED_LOW_RING_VOLUME>
<android.provider.CallLog$Calls: long USER_MISSED_NO_ANSWER>
<android.provider.CallLog$Calls: long USER_MISSED_NO_VIBRATE>
<android.provider.CallLog$Calls: long USER_MISSED_SHORT_RING>
<android.provider.CallLog$Calls: java.lang.String VIA_NUMBER>
<android.provider.CallLog$Calls: int VOICEMAIL_TYPE>
<android.provider.CallLog$Calls: java.lang.String VOICEMAIL_URI>
android.provider.CallLog$Locations
<android.provider.CallLog$Locations: java.lang.String AUTHORITY>
<android.provider.CallLog$Locations: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.CallLog$Locations: java.lang.String CONTENT_TYPE>
<android.provider.CallLog$Locations: android.net.Uri CONTENT_URI>
<android.provider.CallLog$Locations: java.lang.String LATITUDE>
<android.provider.CallLog$Locations: java.lang.String LONGITUDE>
android.provider.Contacts
<android.provider.Contacts: java.lang.String AUTHORITY>
<android.provider.Contacts: android.net.Uri CONTENT_URI>
<android.provider.Contacts: int KIND_EMAIL>
<android.provider.Contacts: int KIND_IM>
<android.provider.Contacts: int KIND_ORGANIZATION>
<android.provider.Contacts: int KIND_PHONE>
<android.provider.Contacts: int KIND_POSTAL>
android.provider.Contacts$ContactMethods
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
<android.provider.Contacts$ContactMethods: java.lang.Object decodeImProtocol(java.lang.String)>
<android.provider.Contacts$ContactMethods: java.lang.String encodeCustomImProtocol(java.lang.String)>
<android.provider.Contacts$ContactMethods: java.lang.String encodePredefinedImProtocol(int)>
<android.provider.Contacts$ContactMethods: java.lang.CharSequence getDisplayLabel(android.content.Context,int,int,java.lang.CharSequence)>
<android.provider.Contacts$ContactMethods: java.lang.String CONTENT_EMAIL_ITEM_TYPE>
<android.provider.Contacts$ContactMethods: java.lang.String CONTENT_EMAIL_TYPE>
<android.provider.Contacts$ContactMethods: android.net.Uri CONTENT_EMAIL_URI>
<android.provider.Contacts$ContactMethods: java.lang.String CONTENT_IM_ITEM_TYPE>
<android.provider.Contacts$ContactMethods: java.lang.String CONTENT_POSTAL_ITEM_TYPE>
<android.provider.Contacts$ContactMethods: java.lang.String CONTENT_POSTAL_TYPE>
<android.provider.Contacts$ContactMethods: java.lang.String CONTENT_TYPE>
<android.provider.Contacts$ContactMethods: android.net.Uri CONTENT_URI>
<android.provider.Contacts$ContactMethods: java.lang.String DEFAULT_SORT_ORDER>
<android.provider.Contacts$ContactMethods: java.lang.String PERSON_ID>
<android.provider.Contacts$ContactMethods: java.lang.String POSTAL_LOCATION_LATITUDE>
<android.provider.Contacts$ContactMethods: java.lang.String POSTAL_LOCATION_LONGITUDE>
<android.provider.Contacts$ContactMethods: int PROTOCOL_AIM>
<android.provider.Contacts$ContactMethods: int PROTOCOL_GOOGLE_TALK>
<android.provider.Contacts$ContactMethods: int PROTOCOL_ICQ>
<android.provider.Contacts$ContactMethods: int PROTOCOL_JABBER>
<android.provider.Contacts$ContactMethods: int PROTOCOL_MSN>
<android.provider.Contacts$ContactMethods: int PROTOCOL_QQ>
<android.provider.Contacts$ContactMethods: int PROTOCOL_SKYPE>
<android.provider.Contacts$ContactMethods: int PROTOCOL_YAHOO>
android.provider.Contacts$ContactMethodsColumns
<android.provider.Contacts$ContactMethodsColumns: java.lang.String AUX_DATA>
<android.provider.Contacts$ContactMethodsColumns: java.lang.String DATA>
<android.provider.Contacts$ContactMethodsColumns: java.lang.String ISPRIMARY>
<android.provider.Contacts$ContactMethodsColumns: java.lang.String KIND>
<android.provider.Contacts$ContactMethodsColumns: java.lang.String LABEL>
<android.provider.Contacts$ContactMethodsColumns: java.lang.String TYPE>
<android.provider.Contacts$ContactMethodsColumns: int TYPE_CUSTOM>
<android.provider.Contacts$ContactMethodsColumns: int TYPE_HOME>
<android.provider.Contacts$ContactMethodsColumns: int TYPE_OTHER>
<android.provider.Contacts$ContactMethodsColumns: int TYPE_WORK>
android.provider.Contacts$Extensions
<android.provider.Contacts$Extensions: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.Contacts$Extensions: java.lang.String CONTENT_TYPE>
<android.provider.Contacts$Extensions: android.net.Uri CONTENT_URI>
<android.provider.Contacts$Extensions: java.lang.String DEFAULT_SORT_ORDER>
<android.provider.Contacts$Extensions: java.lang.String PERSON_ID>
android.provider.Contacts$ExtensionsColumns
<android.provider.Contacts$ExtensionsColumns: java.lang.String NAME>
<android.provider.Contacts$ExtensionsColumns: java.lang.String VALUE>
android.provider.Contacts$GroupMembership
<android.provider.Contacts$GroupMembership: java.lang.String CONTENT_DIRECTORY>
<android.provider.Contacts$GroupMembership: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.Contacts$GroupMembership: java.lang.String CONTENT_TYPE>
<android.provider.Contacts$GroupMembership: android.net.Uri CONTENT_URI>
<android.provider.Contacts$GroupMembership: java.lang.String DEFAULT_SORT_ORDER>
<android.provider.Contacts$GroupMembership: java.lang.String GROUP_ID>
<android.provider.Contacts$GroupMembership: java.lang.String GROUP_SYNC_ACCOUNT>
<android.provider.Contacts$GroupMembership: java.lang.String GROUP_SYNC_ACCOUNT_TYPE>
<android.provider.Contacts$GroupMembership: java.lang.String GROUP_SYNC_ID>
<android.provider.Contacts$GroupMembership: java.lang.String PERSON_ID>
<android.provider.Contacts$GroupMembership: android.net.Uri RAW_CONTENT_URI>
android.provider.Contacts$Groups
<android.provider.Contacts$Groups: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.Contacts$Groups: java.lang.String CONTENT_TYPE>
<android.provider.Contacts$Groups: android.net.Uri CONTENT_URI>
<android.provider.Contacts$Groups: java.lang.String DEFAULT_SORT_ORDER>
<android.provider.Contacts$Groups: android.net.Uri DELETED_CONTENT_URI>
<android.provider.Contacts$Groups: java.lang.String GROUP_ANDROID_STARRED>
<android.provider.Contacts$Groups: java.lang.String GROUP_MY_CONTACTS>
android.provider.Contacts$GroupsColumns
<android.provider.Contacts$GroupsColumns: java.lang.String NAME>
<android.provider.Contacts$GroupsColumns: java.lang.String NOTES>
<android.provider.Contacts$GroupsColumns: java.lang.String SHOULD_SYNC>
<android.provider.Contacts$GroupsColumns: java.lang.String SYSTEM_ID>
android.provider.Contacts$Intents
<android.provider.Contacts$Intents: void <init>()>
<android.provider.Contacts$Intents: java.lang.String ATTACH_IMAGE>
<android.provider.Contacts$Intents: java.lang.String EXTRA_CREATE_DESCRIPTION>
<android.provider.Contacts$Intents: java.lang.String EXTRA_FORCE_CREATE>
<android.provider.Contacts$Intents: java.lang.String SEARCH_SUGGESTION_CLICKED>
<android.provider.Contacts$Intents: java.lang.String SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED>
<android.provider.Contacts$Intents: java.lang.String SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED>
<android.provider.Contacts$Intents: java.lang.String SHOW_OR_CREATE_CONTACT>
android.provider.Contacts$Intents$Insert
<android.provider.Contacts$Intents$Insert: void <init>()>
<android.provider.Contacts$Intents$Insert: java.lang.String ACTION>
<android.provider.Contacts$Intents$Insert: java.lang.String COMPANY>
<android.provider.Contacts$Intents$Insert: java.lang.String EMAIL>
<android.provider.Contacts$Intents$Insert: java.lang.String EMAIL_ISPRIMARY>
<android.provider.Contacts$Intents$Insert: java.lang.String EMAIL_TYPE>
<android.provider.Contacts$Intents$Insert: java.lang.String FULL_MODE>
<android.provider.Contacts$Intents$Insert: java.lang.String IM_HANDLE>
<android.provider.Contacts$Intents$Insert: java.lang.String IM_ISPRIMARY>
<android.provider.Contacts$Intents$Insert: java.lang.String IM_PROTOCOL>
<android.provider.Contacts$Intents$Insert: java.lang.String JOB_TITLE>
<android.provider.Contacts$Intents$Insert: java.lang.String NAME>
<android.provider.Contacts$Intents$Insert: java.lang.String NOTES>
<android.provider.Contacts$Intents$Insert: java.lang.String PHONE>
<android.provider.Contacts$Intents$Insert: java.lang.String PHONETIC_NAME>
<android.provider.Contacts$Intents$Insert: java.lang.String PHONE_ISPRIMARY>
<android.provider.Contacts$Intents$Insert: java.lang.String PHONE_TYPE>
<android.provider.Contacts$Intents$Insert: java.lang.String POSTAL>
<android.provider.Contacts$Intents$Insert: java.lang.String POSTAL_ISPRIMARY>
<android.provider.Contacts$Intents$Insert: java.lang.String POSTAL_TYPE>
<android.provider.Contacts$Intents$Insert: java.lang.String SECONDARY_EMAIL>
<android.provider.Contacts$Intents$Insert: java.lang.String SECONDARY_EMAIL_TYPE>
<android.provider.Contacts$Intents$Insert: java.lang.String SECONDARY_PHONE>
<android.provider.Contacts$Intents$Insert: java.lang.String SECONDARY_PHONE_TYPE>
<android.provider.Contacts$Intents$Insert: java.lang.String TERTIARY_EMAIL>
<android.provider.Contacts$Intents$Insert: java.lang.String TERTIARY_EMAIL_TYPE>
<android.provider.Contacts$Intents$Insert: java.lang.String TERTIARY_PHONE>
<android.provider.Contacts$Intents$Insert: java.lang.String TERTIARY_PHONE_TYPE>
android.provider.Contacts$Intents$UI
<android.provider.Contacts$Intents$UI: void <init>()>
<android.provider.Contacts$Intents$UI: java.lang.String FILTER_CONTACTS_ACTION>
<android.provider.Contacts$Intents$UI: java.lang.String FILTER_TEXT_EXTRA_KEY>
<android.provider.Contacts$Intents$UI: java.lang.String GROUP_NAME_EXTRA_KEY>
<android.provider.Contacts$Intents$UI: java.lang.String LIST_ALL_CONTACTS_ACTION>
<android.provider.Contacts$Intents$UI: java.lang.String LIST_CONTACTS_WITH_PHONES_ACTION>
<android.provider.Contacts$Intents$UI: java.lang.String LIST_DEFAULT>
<android.provider.Contacts$Intents$UI: java.lang.String LIST_FREQUENT_ACTION>
<android.provider.Contacts$Intents$UI: java.lang.String LIST_GROUP_ACTION>
<android.provider.Contacts$Intents$UI: java.lang.String LIST_STARRED_ACTION>
<android.provider.Contacts$Intents$UI: java.lang.String LIST_STREQUENT_ACTION>
<android.provider.Contacts$Intents$UI: java.lang.String TITLE_EXTRA_KEY>
android.provider.Contacts$OrganizationColumns
<android.provider.Contacts$OrganizationColumns: java.lang.String COMPANY>
<android.provider.Contacts$OrganizationColumns: java.lang.String ISPRIMARY>
<android.provider.Contacts$OrganizationColumns: java.lang.String LABEL>
<android.provider.Contacts$OrganizationColumns: java.lang.String PERSON_ID>
<android.provider.Contacts$OrganizationColumns: java.lang.String TITLE>
<android.provider.Contacts$OrganizationColumns: java.lang.String TYPE>
<android.provider.Contacts$OrganizationColumns: int TYPE_CUSTOM>
<android.provider.Contacts$OrganizationColumns: int TYPE_OTHER>
<android.provider.Contacts$OrganizationColumns: int TYPE_WORK>
android.provider.Contacts$Organizations
<android.provider.Contacts$Organizations: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>
<android.provider.Contacts$Organizations: java.lang.String CONTENT_DIRECTORY>
<android.provider.Contacts$Organizations: android.net.Uri CONTENT_URI>
<android.provider.Contacts$Organizations: java.lang.String DEFAULT_SORT_ORDER>
android.provider.Contacts$People
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.provider.Contacts$People: android.graphics.Bitmap loadContactPhoto(android.content.Context,android.net.Uri,int,android.graphics.BitmapFactory$Options)>
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.Contacts$People: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>
<android.provider.Contacts$People: void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])>
<android.provider.Contacts$People: android.net.Uri CONTENT_FILTER_URI>
<android.provider.Contacts$People: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.Contacts$People: java.lang.String CONTENT_TYPE>
<android.provider.Contacts$People: android.net.Uri CONTENT_URI>
<android.provider.Contacts$People: java.lang.String DEFAULT_SORT_ORDER>
<android.provider.Contacts$People: android.net.Uri DELETED_CONTENT_URI>
<android.provider.Contacts$People: java.lang.String PRIMARY_EMAIL_ID>
<android.provider.Contacts$People: java.lang.String PRIMARY_ORGANIZATION_ID>
<android.provider.Contacts$People: java.lang.String PRIMARY_PHONE_ID>
android.provider.Contacts$People$ContactMethods
<android.provider.Contacts$People$ContactMethods: java.lang.String CONTENT_DIRECTORY>
<android.provider.Contacts$People$ContactMethods: java.lang.String DEFAULT_SORT_ORDER>
android.provider.Contacts$People$Extensions
<android.provider.Contacts$People$Extensions: java.lang.String CONTENT_DIRECTORY>
<android.provider.Contacts$People$Extensions: java.lang.String DEFAULT_SORT_ORDER>
<android.provider.Contacts$People$Extensions: java.lang.String PERSON_ID>
android.provider.Contacts$People$Phones
<android.provider.Contacts$People$Phones: java.lang.String CONTENT_DIRECTORY>
<android.provider.Contacts$People$Phones: java.lang.String DEFAULT_SORT_ORDER>
android.provider.Contacts$PeopleColumns
<android.provider.Contacts$PeopleColumns: java.lang.String CUSTOM_RINGTONE>
<android.provider.Contacts$PeopleColumns: java.lang.String DISPLAY_NAME>
<android.provider.Contacts$PeopleColumns: java.lang.String LAST_TIME_CONTACTED>
<android.provider.Contacts$PeopleColumns: java.lang.String NAME>
<android.provider.Contacts$PeopleColumns: java.lang.String NOTES>
<android.provider.Contacts$PeopleColumns: java.lang.String PHONETIC_NAME>
<android.provider.Contacts$PeopleColumns: java.lang.String PHOTO_VERSION>
<android.provider.Contacts$PeopleColumns: java.lang.String SEND_TO_VOICEMAIL>
<android.provider.Contacts$PeopleColumns: java.lang.String STARRED>
<android.provider.Contacts$PeopleColumns: java.lang.String TIMES_CONTACTED>
android.provider.Contacts$Phones
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])>
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>
<android.provider.Contacts$Phones: android.net.Uri CONTENT_FILTER_URL>
<android.provider.Contacts$Phones: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.Contacts$Phones: java.lang.String CONTENT_TYPE>
<android.provider.Contacts$Phones: android.net.Uri CONTENT_URI>
<android.provider.Contacts$Phones: java.lang.String DEFAULT_SORT_ORDER>
<android.provider.Contacts$Phones: java.lang.String PERSON_ID>
android.provider.Contacts$PhonesColumns
<android.provider.Contacts$PhonesColumns: java.lang.String ISPRIMARY>
<android.provider.Contacts$PhonesColumns: java.lang.String LABEL>
<android.provider.Contacts$PhonesColumns: java.lang.String NUMBER>
<android.provider.Contacts$PhonesColumns: java.lang.String NUMBER_KEY>
<android.provider.Contacts$PhonesColumns: java.lang.String TYPE>
<android.provider.Contacts$PhonesColumns: int TYPE_CUSTOM>
<android.provider.Contacts$PhonesColumns: int TYPE_FAX_HOME>
<android.provider.Contacts$PhonesColumns: int TYPE_FAX_WORK>
<android.provider.Contacts$PhonesColumns: int TYPE_HOME>
<android.provider.Contacts$PhonesColumns: int TYPE_MOBILE>
<android.provider.Contacts$PhonesColumns: int TYPE_OTHER>
<android.provider.Contacts$PhonesColumns: int TYPE_PAGER>
<android.provider.Contacts$PhonesColumns: int TYPE_WORK>
android.provider.Contacts$Photos
<android.provider.Contacts$Photos: java.lang.String CONTENT_DIRECTORY>
<android.provider.Contacts$Photos: android.net.Uri CONTENT_URI>
<android.provider.Contacts$Photos: java.lang.String DEFAULT_SORT_ORDER>
android.provider.Contacts$PhotosColumns
<android.provider.Contacts$PhotosColumns: java.lang.String DATA>
<android.provider.Contacts$PhotosColumns: java.lang.String DOWNLOAD_REQUIRED>
<android.provider.Contacts$PhotosColumns: java.lang.String EXISTS_ON_SERVER>
<android.provider.Contacts$PhotosColumns: java.lang.String LOCAL_VERSION>
<android.provider.Contacts$PhotosColumns: java.lang.String PERSON_ID>
<android.provider.Contacts$PhotosColumns: java.lang.String SYNC_ERROR>
android.provider.Contacts$PresenceColumns
<android.provider.Contacts$PresenceColumns: int AVAILABLE>
<android.provider.Contacts$PresenceColumns: int AWAY>
<android.provider.Contacts$PresenceColumns: int DO_NOT_DISTURB>
<android.provider.Contacts$PresenceColumns: int IDLE>
<android.provider.Contacts$PresenceColumns: java.lang.String IM_ACCOUNT>
<android.provider.Contacts$PresenceColumns: java.lang.String IM_HANDLE>
<android.provider.Contacts$PresenceColumns: java.lang.String IM_PROTOCOL>
<android.provider.Contacts$PresenceColumns: int INVISIBLE>
<android.provider.Contacts$PresenceColumns: int OFFLINE>
<android.provider.Contacts$PresenceColumns: java.lang.String PRESENCE_CUSTOM_STATUS>
<android.provider.Contacts$PresenceColumns: java.lang.String PRESENCE_STATUS>
<android.provider.Contacts$PresenceColumns: java.lang.String PRIORITY>
android.provider.Contacts$Settings
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.Contacts$Settings: java.lang.String CONTENT_DIRECTORY>
<android.provider.Contacts$Settings: android.net.Uri CONTENT_URI>
<android.provider.Contacts$Settings: java.lang.String DEFAULT_SORT_ORDER>
<android.provider.Contacts$Settings: java.lang.String SYNC_EVERYTHING>
android.provider.Contacts$SettingsColumns
<android.provider.Contacts$SettingsColumns: java.lang.String KEY>
<android.provider.Contacts$SettingsColumns: java.lang.String VALUE>
<android.provider.Contacts$SettingsColumns: java.lang.String _SYNC_ACCOUNT>
<android.provider.Contacts$SettingsColumns: java.lang.String _SYNC_ACCOUNT_TYPE>
android.provider.ContactsContract
<android.provider.ContactsContract: void <init>()>
<android.provider.ContactsContract: boolean isProfileId(long)>
<android.provider.ContactsContract: java.lang.String AUTHORITY>
<android.provider.ContactsContract: android.net.Uri AUTHORITY_URI>
<android.provider.ContactsContract: java.lang.String CALLER_IS_SYNCADAPTER>
<android.provider.ContactsContract: java.lang.String DEFERRED_SNIPPETING>
<android.provider.ContactsContract: java.lang.String DEFERRED_SNIPPETING_QUERY>
<android.provider.ContactsContract: java.lang.String DIRECTORY_PARAM_KEY>
<android.provider.ContactsContract: java.lang.String LIMIT_PARAM_KEY>
<android.provider.ContactsContract: java.lang.String PRIMARY_ACCOUNT_NAME>
<android.provider.ContactsContract: java.lang.String PRIMARY_ACCOUNT_TYPE>
<android.provider.ContactsContract: java.lang.String REMOVE_DUPLICATE_ENTRIES>
<android.provider.ContactsContract: java.lang.String STREQUENT_PHONE_ONLY>
android.provider.ContactsContract$AggregationExceptions
<android.provider.ContactsContract$AggregationExceptions: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$AggregationExceptions: java.lang.String CONTENT_TYPE>
<android.provider.ContactsContract$AggregationExceptions: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$AggregationExceptions: java.lang.String RAW_CONTACT_ID1>
<android.provider.ContactsContract$AggregationExceptions: java.lang.String RAW_CONTACT_ID2>
<android.provider.ContactsContract$AggregationExceptions: java.lang.String TYPE>
<android.provider.ContactsContract$AggregationExceptions: int TYPE_AUTOMATIC>
<android.provider.ContactsContract$AggregationExceptions: int TYPE_KEEP_SEPARATE>
<android.provider.ContactsContract$AggregationExceptions: int TYPE_KEEP_TOGETHER>
android.provider.ContactsContract$BaseSyncColumns
<android.provider.ContactsContract$BaseSyncColumns: java.lang.String SYNC1>
<android.provider.ContactsContract$BaseSyncColumns: java.lang.String SYNC2>
<android.provider.ContactsContract$BaseSyncColumns: java.lang.String SYNC3>
<android.provider.ContactsContract$BaseSyncColumns: java.lang.String SYNC4>
android.provider.ContactsContract$CommonDataKinds
android.provider.ContactsContract$CommonDataKinds$BaseTypes
<android.provider.ContactsContract$CommonDataKinds$BaseTypes: int TYPE_CUSTOM>
android.provider.ContactsContract$CommonDataKinds$Callable
<android.provider.ContactsContract$CommonDataKinds$Callable: void <init>()>
<android.provider.ContactsContract$CommonDataKinds$Callable: android.net.Uri CONTENT_FILTER_URI>
<android.provider.ContactsContract$CommonDataKinds$Callable: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$CommonDataKinds$Callable: android.net.Uri ENTERPRISE_CONTENT_FILTER_URI>
<android.provider.ContactsContract$CommonDataKinds$Callable: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$Callable: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$Callable: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
android.provider.ContactsContract$CommonDataKinds$CommonColumns
<android.provider.ContactsContract$CommonDataKinds$CommonColumns: java.lang.String DATA>
<android.provider.ContactsContract$CommonDataKinds$CommonColumns: java.lang.String LABEL>
<android.provider.ContactsContract$CommonDataKinds$CommonColumns: java.lang.String TYPE>
android.provider.ContactsContract$CommonDataKinds$Contactables
<android.provider.ContactsContract$CommonDataKinds$Contactables: void <init>()>
<android.provider.ContactsContract$CommonDataKinds$Contactables: android.net.Uri CONTENT_FILTER_URI>
<android.provider.ContactsContract$CommonDataKinds$Contactables: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$CommonDataKinds$Contactables: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$Contactables: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$Contactables: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$Contactables: java.lang.String VISIBLE_CONTACTS_ONLY>
android.provider.ContactsContract$CommonDataKinds$Email
<android.provider.ContactsContract$CommonDataKinds$Email: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)>
<android.provider.ContactsContract$CommonDataKinds$Email: int getTypeLabelResource(int)>
<android.provider.ContactsContract$CommonDataKinds$Email: java.lang.String ADDRESS>
<android.provider.ContactsContract$CommonDataKinds$Email: android.net.Uri CONTENT_FILTER_URI>
<android.provider.ContactsContract$CommonDataKinds$Email: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$CommonDataKinds$Email: android.net.Uri CONTENT_LOOKUP_URI>
<android.provider.ContactsContract$CommonDataKinds$Email: java.lang.String CONTENT_TYPE>
<android.provider.ContactsContract$CommonDataKinds$Email: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$CommonDataKinds$Email: java.lang.String DISPLAY_NAME>
<android.provider.ContactsContract$CommonDataKinds$Email: android.net.Uri ENTERPRISE_CONTENT_FILTER_URI>
<android.provider.ContactsContract$CommonDataKinds$Email: android.net.Uri ENTERPRISE_CONTENT_LOOKUP_URI>
<android.provider.ContactsContract$CommonDataKinds$Email: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$Email: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$Email: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$Email: int TYPE_HOME>
<android.provider.ContactsContract$CommonDataKinds$Email: int TYPE_MOBILE>
<android.provider.ContactsContract$CommonDataKinds$Email: int TYPE_OTHER>
<android.provider.ContactsContract$CommonDataKinds$Email: int TYPE_WORK>
android.provider.ContactsContract$CommonDataKinds$Event
<android.provider.ContactsContract$CommonDataKinds$Event: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)>
<android.provider.ContactsContract$CommonDataKinds$Event: int getTypeResource(java.lang.Integer)>
<android.provider.ContactsContract$CommonDataKinds$Event: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$CommonDataKinds$Event: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$Event: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$Event: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$Event: java.lang.String START_DATE>
<android.provider.ContactsContract$CommonDataKinds$Event: int TYPE_ANNIVERSARY>
<android.provider.ContactsContract$CommonDataKinds$Event: int TYPE_BIRTHDAY>
<android.provider.ContactsContract$CommonDataKinds$Event: int TYPE_OTHER>
android.provider.ContactsContract$CommonDataKinds$GroupMembership
<android.provider.ContactsContract$CommonDataKinds$GroupMembership: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$CommonDataKinds$GroupMembership: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$GroupMembership: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$GroupMembership: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$GroupMembership: java.lang.String GROUP_ROW_ID>
<android.provider.ContactsContract$CommonDataKinds$GroupMembership: java.lang.String GROUP_SOURCE_ID>
android.provider.ContactsContract$CommonDataKinds$Identity
<android.provider.ContactsContract$CommonDataKinds$Identity: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$CommonDataKinds$Identity: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$Identity: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$Identity: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$Identity: java.lang.String IDENTITY>
<android.provider.ContactsContract$CommonDataKinds$Identity: java.lang.String NAMESPACE>
android.provider.ContactsContract$CommonDataKinds$Im
<android.provider.ContactsContract$CommonDataKinds$Im: java.lang.CharSequence getProtocolLabel(android.content.res.Resources,int,java.lang.CharSequence)>
<android.provider.ContactsContract$CommonDataKinds$Im: int getProtocolLabelResource(int)>
<android.provider.ContactsContract$CommonDataKinds$Im: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)>
<android.provider.ContactsContract$CommonDataKinds$Im: int getTypeLabelResource(int)>
<android.provider.ContactsContract$CommonDataKinds$Im: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$CommonDataKinds$Im: java.lang.String CUSTOM_PROTOCOL>
<android.provider.ContactsContract$CommonDataKinds$Im: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$Im: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$Im: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$Im: java.lang.String PROTOCOL>
<android.provider.ContactsContract$CommonDataKinds$Im: int PROTOCOL_AIM>
<android.provider.ContactsContract$CommonDataKinds$Im: int PROTOCOL_CUSTOM>
<android.provider.ContactsContract$CommonDataKinds$Im: int PROTOCOL_GOOGLE_TALK>
<android.provider.ContactsContract$CommonDataKinds$Im: int PROTOCOL_ICQ>
<android.provider.ContactsContract$CommonDataKinds$Im: int PROTOCOL_JABBER>
<android.provider.ContactsContract$CommonDataKinds$Im: int PROTOCOL_MSN>
<android.provider.ContactsContract$CommonDataKinds$Im: int PROTOCOL_NETMEETING>
<android.provider.ContactsContract$CommonDataKinds$Im: int PROTOCOL_QQ>
<android.provider.ContactsContract$CommonDataKinds$Im: int PROTOCOL_SKYPE>
<android.provider.ContactsContract$CommonDataKinds$Im: int PROTOCOL_YAHOO>
<android.provider.ContactsContract$CommonDataKinds$Im: int TYPE_HOME>
<android.provider.ContactsContract$CommonDataKinds$Im: int TYPE_OTHER>
<android.provider.ContactsContract$CommonDataKinds$Im: int TYPE_WORK>
android.provider.ContactsContract$CommonDataKinds$Nickname
<android.provider.ContactsContract$CommonDataKinds$Nickname: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$CommonDataKinds$Nickname: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$Nickname: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$Nickname: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$Nickname: java.lang.String NAME>
<android.provider.ContactsContract$CommonDataKinds$Nickname: int TYPE_DEFAULT>
<android.provider.ContactsContract$CommonDataKinds$Nickname: int TYPE_INITIALS>
<android.provider.ContactsContract$CommonDataKinds$Nickname: int TYPE_MAIDEN_NAME>
<android.provider.ContactsContract$CommonDataKinds$Nickname: int TYPE_MAINDEN_NAME>
<android.provider.ContactsContract$CommonDataKinds$Nickname: int TYPE_OTHER_NAME>
<android.provider.ContactsContract$CommonDataKinds$Nickname: int TYPE_SHORT_NAME>
android.provider.ContactsContract$CommonDataKinds$Note
<android.provider.ContactsContract$CommonDataKinds$Note: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$CommonDataKinds$Note: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$Note: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$Note: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$Note: java.lang.String NOTE>
android.provider.ContactsContract$CommonDataKinds$Organization
<android.provider.ContactsContract$CommonDataKinds$Organization: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)>
<android.provider.ContactsContract$CommonDataKinds$Organization: int getTypeLabelResource(int)>
<android.provider.ContactsContract$CommonDataKinds$Organization: java.lang.String COMPANY>
<android.provider.ContactsContract$CommonDataKinds$Organization: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$CommonDataKinds$Organization: java.lang.String DEPARTMENT>
<android.provider.ContactsContract$CommonDataKinds$Organization: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$Organization: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$Organization: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$Organization: java.lang.String JOB_DESCRIPTION>
<android.provider.ContactsContract$CommonDataKinds$Organization: java.lang.String OFFICE_LOCATION>
<android.provider.ContactsContract$CommonDataKinds$Organization: java.lang.String PHONETIC_NAME>
<android.provider.ContactsContract$CommonDataKinds$Organization: java.lang.String PHONETIC_NAME_STYLE>
<android.provider.ContactsContract$CommonDataKinds$Organization: java.lang.String SYMBOL>
<android.provider.ContactsContract$CommonDataKinds$Organization: java.lang.String TITLE>
<android.provider.ContactsContract$CommonDataKinds$Organization: int TYPE_OTHER>
<android.provider.ContactsContract$CommonDataKinds$Organization: int TYPE_WORK>
android.provider.ContactsContract$CommonDataKinds$Phone
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)>
<android.provider.ContactsContract$CommonDataKinds$Phone: int getTypeLabelResource(int)>
<android.provider.ContactsContract$CommonDataKinds$Phone: android.net.Uri CONTENT_FILTER_URI>
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.String CONTENT_TYPE>
<android.provider.ContactsContract$CommonDataKinds$Phone: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$CommonDataKinds$Phone: android.net.Uri ENTERPRISE_CONTENT_FILTER_URI>
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.String NORMALIZED_NUMBER>
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.String NUMBER>
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.String SEARCH_DISPLAY_NAME_KEY>
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.String SEARCH_PHONE_NUMBER_KEY>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_ASSISTANT>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_CALLBACK>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_CAR>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_COMPANY_MAIN>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_FAX_HOME>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_FAX_WORK>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_HOME>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_ISDN>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_MAIN>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_MMS>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_MOBILE>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_OTHER>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_OTHER_FAX>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_PAGER>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_RADIO>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_TELEX>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_TTY_TDD>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_WORK>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_WORK_MOBILE>
<android.provider.ContactsContract$CommonDataKinds$Phone: int TYPE_WORK_PAGER>
android.provider.ContactsContract$CommonDataKinds$Photo
<android.provider.ContactsContract$CommonDataKinds$Photo: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$CommonDataKinds$Photo: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$Photo: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$Photo: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$Photo: java.lang.String PHOTO>
<android.provider.ContactsContract$CommonDataKinds$Photo: java.lang.String PHOTO_FILE_ID>
android.provider.ContactsContract$CommonDataKinds$Relation
<android.provider.ContactsContract$CommonDataKinds$Relation: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)>
<android.provider.ContactsContract$CommonDataKinds$Relation: int getTypeLabelResource(int)>
<android.provider.ContactsContract$CommonDataKinds$Relation: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$CommonDataKinds$Relation: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$Relation: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$Relation: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$Relation: java.lang.String NAME>
<android.provider.ContactsContract$CommonDataKinds$Relation: int TYPE_ASSISTANT>
<android.provider.ContactsContract$CommonDataKinds$Relation: int TYPE_BROTHER>
<android.provider.ContactsContract$CommonDataKinds$Relation: int TYPE_CHILD>
<android.provider.ContactsContract$CommonDataKinds$Relation: int TYPE_DOMESTIC_PARTNER>
<android.provider.ContactsContract$CommonDataKinds$Relation: int TYPE_FATHER>
<android.provider.ContactsContract$CommonDataKinds$Relation: int TYPE_FRIEND>
<android.provider.ContactsContract$CommonDataKinds$Relation: int TYPE_MANAGER>
<android.provider.ContactsContract$CommonDataKinds$Relation: int TYPE_MOTHER>
<android.provider.ContactsContract$CommonDataKinds$Relation: int TYPE_PARENT>
<android.provider.ContactsContract$CommonDataKinds$Relation: int TYPE_PARTNER>
<android.provider.ContactsContract$CommonDataKinds$Relation: int TYPE_REFERRED_BY>
<android.provider.ContactsContract$CommonDataKinds$Relation: int TYPE_RELATIVE>
<android.provider.ContactsContract$CommonDataKinds$Relation: int TYPE_SISTER>
<android.provider.ContactsContract$CommonDataKinds$Relation: int TYPE_SPOUSE>
android.provider.ContactsContract$CommonDataKinds$SipAddress
<android.provider.ContactsContract$CommonDataKinds$SipAddress: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)>
<android.provider.ContactsContract$CommonDataKinds$SipAddress: int getTypeLabelResource(int)>
<android.provider.ContactsContract$CommonDataKinds$SipAddress: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$CommonDataKinds$SipAddress: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$SipAddress: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$SipAddress: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$SipAddress: java.lang.String SIP_ADDRESS>
<android.provider.ContactsContract$CommonDataKinds$SipAddress: int TYPE_HOME>
<android.provider.ContactsContract$CommonDataKinds$SipAddress: int TYPE_OTHER>
<android.provider.ContactsContract$CommonDataKinds$SipAddress: int TYPE_WORK>
android.provider.ContactsContract$CommonDataKinds$StructuredName
<android.provider.ContactsContract$CommonDataKinds$StructuredName: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$CommonDataKinds$StructuredName: java.lang.String DISPLAY_NAME>
<android.provider.ContactsContract$CommonDataKinds$StructuredName: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$StructuredName: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$StructuredName: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$StructuredName: java.lang.String FAMILY_NAME>
<android.provider.ContactsContract$CommonDataKinds$StructuredName: java.lang.String FULL_NAME_STYLE>
<android.provider.ContactsContract$CommonDataKinds$StructuredName: java.lang.String GIVEN_NAME>
<android.provider.ContactsContract$CommonDataKinds$StructuredName: java.lang.String MIDDLE_NAME>
<android.provider.ContactsContract$CommonDataKinds$StructuredName: java.lang.String PHONETIC_FAMILY_NAME>
<android.provider.ContactsContract$CommonDataKinds$StructuredName: java.lang.String PHONETIC_GIVEN_NAME>
<android.provider.ContactsContract$CommonDataKinds$StructuredName: java.lang.String PHONETIC_MIDDLE_NAME>
<android.provider.ContactsContract$CommonDataKinds$StructuredName: java.lang.String PHONETIC_NAME_STYLE>
<android.provider.ContactsContract$CommonDataKinds$StructuredName: java.lang.String PREFIX>
<android.provider.ContactsContract$CommonDataKinds$StructuredName: java.lang.String SUFFIX>
android.provider.ContactsContract$CommonDataKinds$StructuredPostal
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: int getTypeLabelResource(int)>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: java.lang.String CITY>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: java.lang.String CONTENT_TYPE>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: java.lang.String COUNTRY>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: java.lang.String FORMATTED_ADDRESS>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: java.lang.String NEIGHBORHOOD>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: java.lang.String POBOX>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: java.lang.String POSTCODE>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: java.lang.String REGION>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: java.lang.String STREET>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: int TYPE_HOME>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: int TYPE_OTHER>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: int TYPE_WORK>
android.provider.ContactsContract$CommonDataKinds$Website
<android.provider.ContactsContract$CommonDataKinds$Website: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$CommonDataKinds$Website: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$CommonDataKinds$Website: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$CommonDataKinds$Website: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$CommonDataKinds$Website: int TYPE_BLOG>
<android.provider.ContactsContract$CommonDataKinds$Website: int TYPE_FTP>
<android.provider.ContactsContract$CommonDataKinds$Website: int TYPE_HOME>
<android.provider.ContactsContract$CommonDataKinds$Website: int TYPE_HOMEPAGE>
<android.provider.ContactsContract$CommonDataKinds$Website: int TYPE_OTHER>
<android.provider.ContactsContract$CommonDataKinds$Website: int TYPE_PROFILE>
<android.provider.ContactsContract$CommonDataKinds$Website: int TYPE_WORK>
<android.provider.ContactsContract$CommonDataKinds$Website: java.lang.String URL>
android.provider.ContactsContract$ContactNameColumns
<android.provider.ContactsContract$ContactNameColumns: java.lang.String DISPLAY_NAME_ALTERNATIVE>
<android.provider.ContactsContract$ContactNameColumns: java.lang.String DISPLAY_NAME_PRIMARY>
<android.provider.ContactsContract$ContactNameColumns: java.lang.String DISPLAY_NAME_SOURCE>
<android.provider.ContactsContract$ContactNameColumns: java.lang.String PHONETIC_NAME>
<android.provider.ContactsContract$ContactNameColumns: java.lang.String PHONETIC_NAME_STYLE>
<android.provider.ContactsContract$ContactNameColumns: java.lang.String SORT_KEY_ALTERNATIVE>
<android.provider.ContactsContract$ContactNameColumns: java.lang.String SORT_KEY_PRIMARY>
android.provider.ContactsContract$ContactOptionsColumns
<android.provider.ContactsContract$ContactOptionsColumns: java.lang.String CUSTOM_RINGTONE>
<android.provider.ContactsContract$ContactOptionsColumns: java.lang.String LAST_TIME_CONTACTED>
<android.provider.ContactsContract$ContactOptionsColumns: java.lang.String PINNED>
<android.provider.ContactsContract$ContactOptionsColumns: java.lang.String SEND_TO_VOICEMAIL>
<android.provider.ContactsContract$ContactOptionsColumns: java.lang.String STARRED>
<android.provider.ContactsContract$ContactOptionsColumns: java.lang.String TIMES_CONTACTED>
android.provider.ContactsContract$ContactStatusColumns
<android.provider.ContactsContract$ContactStatusColumns: java.lang.String CONTACT_CHAT_CAPABILITY>
<android.provider.ContactsContract$ContactStatusColumns: java.lang.String CONTACT_PRESENCE>
<android.provider.ContactsContract$ContactStatusColumns: java.lang.String CONTACT_STATUS>
<android.provider.ContactsContract$ContactStatusColumns: java.lang.String CONTACT_STATUS_ICON>
<android.provider.ContactsContract$ContactStatusColumns: java.lang.String CONTACT_STATUS_LABEL>
<android.provider.ContactsContract$ContactStatusColumns: java.lang.String CONTACT_STATUS_RES_PACKAGE>
<android.provider.ContactsContract$ContactStatusColumns: java.lang.String CONTACT_STATUS_TIMESTAMP>
android.provider.ContactsContract$Contacts
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.provider.ContactsContract$Contacts: boolean isEnterpriseContactId(long)>
<android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)>
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_FILTER_URI>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_FREQUENT_URI>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_GROUP_URI>
<android.provider.ContactsContract$Contacts: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_LOOKUP_URI>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_MULTI_VCARD_URI>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_STREQUENT_FILTER_URI>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_STREQUENT_URI>
<android.provider.ContactsContract$Contacts: java.lang.String CONTENT_TYPE>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$Contacts: java.lang.String CONTENT_VCARD_TYPE>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_VCARD_URI>
<android.provider.ContactsContract$Contacts: android.net.Uri ENTERPRISE_CONTENT_FILTER_URI>
<android.provider.ContactsContract$Contacts: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$Contacts: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$Contacts: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$Contacts: java.lang.String QUERY_PARAMETER_VCARD_NO_PHOTO>
android.provider.ContactsContract$Contacts$AggregationSuggestions
<android.provider.ContactsContract$Contacts$AggregationSuggestions: java.lang.String CONTENT_DIRECTORY>
android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: void <init>()>
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder addNameParameter(java.lang.String)>
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()>
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder setContactId(long)>
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder setLimit(int)>
android.provider.ContactsContract$Contacts$Data
<android.provider.ContactsContract$Contacts$Data: java.lang.String CONTENT_DIRECTORY>
android.provider.ContactsContract$Contacts$Entity
<android.provider.ContactsContract$Contacts$Entity: java.lang.String CONTENT_DIRECTORY>
<android.provider.ContactsContract$Contacts$Entity: java.lang.String DATA_ID>
<android.provider.ContactsContract$Contacts$Entity: java.lang.String RAW_CONTACT_ID>
android.provider.ContactsContract$Contacts$Photo
<android.provider.ContactsContract$Contacts$Photo: java.lang.String CONTENT_DIRECTORY>
<android.provider.ContactsContract$Contacts$Photo: java.lang.String DISPLAY_PHOTO>
<android.provider.ContactsContract$Contacts$Photo: java.lang.String PHOTO>
<android.provider.ContactsContract$Contacts$Photo: java.lang.String PHOTO_FILE_ID>
android.provider.ContactsContract$ContactsColumns
<android.provider.ContactsContract$ContactsColumns: java.lang.String CONTACT_LAST_UPDATED_TIMESTAMP>
<android.provider.ContactsContract$ContactsColumns: java.lang.String DISPLAY_NAME>
<android.provider.ContactsContract$ContactsColumns: java.lang.String HAS_PHONE_NUMBER>
<android.provider.ContactsContract$ContactsColumns: java.lang.String IN_DEFAULT_DIRECTORY>
<android.provider.ContactsContract$ContactsColumns: java.lang.String IN_VISIBLE_GROUP>
<android.provider.ContactsContract$ContactsColumns: java.lang.String IS_USER_PROFILE>
<android.provider.ContactsContract$ContactsColumns: java.lang.String LOOKUP_KEY>
<android.provider.ContactsContract$ContactsColumns: java.lang.String NAME_RAW_CONTACT_ID>
<android.provider.ContactsContract$ContactsColumns: java.lang.String PHOTO_FILE_ID>
<android.provider.ContactsContract$ContactsColumns: java.lang.String PHOTO_ID>
<android.provider.ContactsContract$ContactsColumns: java.lang.String PHOTO_THUMBNAIL_URI>
<android.provider.ContactsContract$ContactsColumns: java.lang.String PHOTO_URI>
android.provider.ContactsContract$Data
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$Data: java.lang.String CONTENT_TYPE>
<android.provider.ContactsContract$Data: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$Data: java.lang.String EXTRA_ADDRESS_BOOK_INDEX>
<android.provider.ContactsContract$Data: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS>
<android.provider.ContactsContract$Data: java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES>
<android.provider.ContactsContract$Data: java.lang.String VISIBLE_CONTACTS_ONLY>
android.provider.ContactsContract$DataColumns
<android.provider.ContactsContract$DataColumns: java.lang.String CARRIER_PRESENCE>
<android.provider.ContactsContract$DataColumns: int CARRIER_PRESENCE_VT_CAPABLE>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA1>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA10>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA11>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA12>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA13>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA14>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA15>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA2>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA3>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA4>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA5>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA6>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA7>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA8>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA9>
<android.provider.ContactsContract$DataColumns: java.lang.String DATA_VERSION>
<android.provider.ContactsContract$DataColumns: java.lang.String IS_PRIMARY>
<android.provider.ContactsContract$DataColumns: java.lang.String IS_READ_ONLY>
<android.provider.ContactsContract$DataColumns: java.lang.String IS_SUPER_PRIMARY>
<android.provider.ContactsContract$DataColumns: java.lang.String MIMETYPE>
<android.provider.ContactsContract$DataColumns: java.lang.String PREFERRED_PHONE_ACCOUNT_COMPONENT_NAME>
<android.provider.ContactsContract$DataColumns: java.lang.String PREFERRED_PHONE_ACCOUNT_ID>
<android.provider.ContactsContract$DataColumns: java.lang.String RAW_CONTACT_ID>
<android.provider.ContactsContract$DataColumns: java.lang.String RES_PACKAGE>
<android.provider.ContactsContract$DataColumns: java.lang.String SYNC1>
<android.provider.ContactsContract$DataColumns: java.lang.String SYNC2>
<android.provider.ContactsContract$DataColumns: java.lang.String SYNC3>
<android.provider.ContactsContract$DataColumns: java.lang.String SYNC4>
android.provider.ContactsContract$DataColumnsWithJoins
android.provider.ContactsContract$DataUsageFeedback
<android.provider.ContactsContract$DataUsageFeedback: void <init>()>
<android.provider.ContactsContract$DataUsageFeedback: android.net.Uri DELETE_USAGE_URI>
<android.provider.ContactsContract$DataUsageFeedback: android.net.Uri FEEDBACK_URI>
<android.provider.ContactsContract$DataUsageFeedback: java.lang.String USAGE_TYPE>
<android.provider.ContactsContract$DataUsageFeedback: java.lang.String USAGE_TYPE_CALL>
<android.provider.ContactsContract$DataUsageFeedback: java.lang.String USAGE_TYPE_LONG_TEXT>
<android.provider.ContactsContract$DataUsageFeedback: java.lang.String USAGE_TYPE_SHORT_TEXT>
android.provider.ContactsContract$DataUsageStatColumns
<android.provider.ContactsContract$DataUsageStatColumns: java.lang.String LAST_TIME_USED>
<android.provider.ContactsContract$DataUsageStatColumns: java.lang.String TIMES_USED>
android.provider.ContactsContract$DeletedContacts
<android.provider.ContactsContract$DeletedContacts: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$DeletedContacts: long DAYS_KEPT_MILLISECONDS>
android.provider.ContactsContract$DeletedContactsColumns
<android.provider.ContactsContract$DeletedContactsColumns: java.lang.String CONTACT_DELETED_TIMESTAMP>
<android.provider.ContactsContract$DeletedContactsColumns: java.lang.String CONTACT_ID>
android.provider.ContactsContract$Directory
<android.provider.ContactsContract$Directory: boolean isEnterpriseDirectoryId(long)>
<android.provider.ContactsContract$Directory: boolean isRemoteDirectoryId(long)>
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)>
<android.provider.ContactsContract$Directory: java.lang.String ACCOUNT_NAME>
<android.provider.ContactsContract$Directory: java.lang.String ACCOUNT_TYPE>
<android.provider.ContactsContract$Directory: java.lang.String CALLER_PACKAGE_PARAM_KEY>
<android.provider.ContactsContract$Directory: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$Directory: java.lang.String CONTENT_TYPE>
<android.provider.ContactsContract$Directory: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$Directory: long DEFAULT>
<android.provider.ContactsContract$Directory: java.lang.String DIRECTORY_AUTHORITY>
<android.provider.ContactsContract$Directory: java.lang.String DISPLAY_NAME>
<android.provider.ContactsContract$Directory: android.net.Uri ENTERPRISE_CONTENT_URI>
<android.provider.ContactsContract$Directory: long ENTERPRISE_DEFAULT>
<android.provider.ContactsContract$Directory: long ENTERPRISE_LOCAL_INVISIBLE>
<android.provider.ContactsContract$Directory: java.lang.String EXPORT_SUPPORT>
<android.provider.ContactsContract$Directory: int EXPORT_SUPPORT_ANY_ACCOUNT>
<android.provider.ContactsContract$Directory: int EXPORT_SUPPORT_NONE>
<android.provider.ContactsContract$Directory: int EXPORT_SUPPORT_SAME_ACCOUNT_ONLY>
<android.provider.ContactsContract$Directory: long LOCAL_INVISIBLE>
<android.provider.ContactsContract$Directory: java.lang.String PACKAGE_NAME>
<android.provider.ContactsContract$Directory: java.lang.String PHOTO_SUPPORT>
<android.provider.ContactsContract$Directory: int PHOTO_SUPPORT_FULL>
<android.provider.ContactsContract$Directory: int PHOTO_SUPPORT_FULL_SIZE_ONLY>
<android.provider.ContactsContract$Directory: int PHOTO_SUPPORT_NONE>
<android.provider.ContactsContract$Directory: int PHOTO_SUPPORT_THUMBNAIL_ONLY>
<android.provider.ContactsContract$Directory: java.lang.String SHORTCUT_SUPPORT>
<android.provider.ContactsContract$Directory: int SHORTCUT_SUPPORT_DATA_ITEMS_ONLY>
<android.provider.ContactsContract$Directory: int SHORTCUT_SUPPORT_FULL>
<android.provider.ContactsContract$Directory: int SHORTCUT_SUPPORT_NONE>
<android.provider.ContactsContract$Directory: java.lang.String TYPE_RESOURCE_ID>
android.provider.ContactsContract$DisplayNameSources
<android.provider.ContactsContract$DisplayNameSources: int EMAIL>
<android.provider.ContactsContract$DisplayNameSources: int NICKNAME>
<android.provider.ContactsContract$DisplayNameSources: int ORGANIZATION>
<android.provider.ContactsContract$DisplayNameSources: int PHONE>
<android.provider.ContactsContract$DisplayNameSources: int STRUCTURED_NAME>
<android.provider.ContactsContract$DisplayNameSources: int STRUCTURED_PHONETIC_NAME>
<android.provider.ContactsContract$DisplayNameSources: int UNDEFINED>
android.provider.ContactsContract$DisplayPhoto
<android.provider.ContactsContract$DisplayPhoto: android.net.Uri CONTENT_MAX_DIMENSIONS_URI>
<android.provider.ContactsContract$DisplayPhoto: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$DisplayPhoto: java.lang.String DISPLAY_MAX_DIM>
<android.provider.ContactsContract$DisplayPhoto: java.lang.String THUMBNAIL_MAX_DIM>
android.provider.ContactsContract$FullNameStyle
<android.provider.ContactsContract$FullNameStyle: int CHINESE>
<android.provider.ContactsContract$FullNameStyle: int CJK>
<android.provider.ContactsContract$FullNameStyle: int JAPANESE>
<android.provider.ContactsContract$FullNameStyle: int KOREAN>
<android.provider.ContactsContract$FullNameStyle: int UNDEFINED>
<android.provider.ContactsContract$FullNameStyle: int WESTERN>
android.provider.ContactsContract$Groups
<android.provider.ContactsContract$Groups: android.content.EntityIterator newEntityIterator(android.database.Cursor)>
<android.provider.ContactsContract$Groups: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$Groups: android.net.Uri CONTENT_SUMMARY_URI>
<android.provider.ContactsContract$Groups: java.lang.String CONTENT_TYPE>
<android.provider.ContactsContract$Groups: android.net.Uri CONTENT_URI>
android.provider.ContactsContract$GroupsColumns
<android.provider.ContactsContract$GroupsColumns: java.lang.String AUTO_ADD>
<android.provider.ContactsContract$GroupsColumns: java.lang.String DATA_SET>
<android.provider.ContactsContract$GroupsColumns: java.lang.String DELETED>
<android.provider.ContactsContract$GroupsColumns: java.lang.String FAVORITES>
<android.provider.ContactsContract$GroupsColumns: java.lang.String GROUP_IS_READ_ONLY>
<android.provider.ContactsContract$GroupsColumns: java.lang.String GROUP_VISIBLE>
<android.provider.ContactsContract$GroupsColumns: java.lang.String NOTES>
<android.provider.ContactsContract$GroupsColumns: java.lang.String RES_PACKAGE>
<android.provider.ContactsContract$GroupsColumns: java.lang.String SHOULD_SYNC>
<android.provider.ContactsContract$GroupsColumns: java.lang.String SUMMARY_COUNT>
<android.provider.ContactsContract$GroupsColumns: java.lang.String SUMMARY_WITH_PHONES>
<android.provider.ContactsContract$GroupsColumns: java.lang.String SYSTEM_ID>
<android.provider.ContactsContract$GroupsColumns: java.lang.String TITLE>
<android.provider.ContactsContract$GroupsColumns: java.lang.String TITLE_RES>
android.provider.ContactsContract$Intents
<android.provider.ContactsContract$Intents: void <init>()>
<android.provider.ContactsContract$Intents: java.lang.String ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS>
<android.provider.ContactsContract$Intents: java.lang.String ATTACH_IMAGE>
<android.provider.ContactsContract$Intents: java.lang.String CONTACTS_DATABASE_CREATED>
<android.provider.ContactsContract$Intents: java.lang.String EXTRA_CREATE_DESCRIPTION>
<android.provider.ContactsContract$Intents: java.lang.String EXTRA_FORCE_CREATE>
<android.provider.ContactsContract$Intents: java.lang.String EXTRA_RECIPIENT_CONTACT_CHAT_ID>
<android.provider.ContactsContract$Intents: java.lang.String EXTRA_RECIPIENT_CONTACT_NAME>
<android.provider.ContactsContract$Intents: java.lang.String EXTRA_RECIPIENT_CONTACT_URI>
<android.provider.ContactsContract$Intents: java.lang.String INVITE_CONTACT>
<android.provider.ContactsContract$Intents: java.lang.String METADATA_ACCOUNT_TYPE>
<android.provider.ContactsContract$Intents: java.lang.String METADATA_MIMETYPE>
<android.provider.ContactsContract$Intents: java.lang.String SEARCH_SUGGESTION_CLICKED>
<android.provider.ContactsContract$Intents: java.lang.String SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED>
<android.provider.ContactsContract$Intents: java.lang.String SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED>
<android.provider.ContactsContract$Intents: java.lang.String SHOW_OR_CREATE_CONTACT>
android.provider.ContactsContract$Intents$Insert
<android.provider.ContactsContract$Intents$Insert: void <init>()>
<android.provider.ContactsContract$Intents$Insert: java.lang.String ACTION>
<android.provider.ContactsContract$Intents$Insert: java.lang.String COMPANY>
<android.provider.ContactsContract$Intents$Insert: java.lang.String DATA>
<android.provider.ContactsContract$Intents$Insert: java.lang.String EMAIL>
<android.provider.ContactsContract$Intents$Insert: java.lang.String EMAIL_ISPRIMARY>
<android.provider.ContactsContract$Intents$Insert: java.lang.String EMAIL_TYPE>
<android.provider.ContactsContract$Intents$Insert: java.lang.String EXTRA_ACCOUNT>
<android.provider.ContactsContract$Intents$Insert: java.lang.String EXTRA_DATA_SET>
<android.provider.ContactsContract$Intents$Insert: java.lang.String FULL_MODE>
<android.provider.ContactsContract$Intents$Insert: java.lang.String IM_HANDLE>
<android.provider.ContactsContract$Intents$Insert: java.lang.String IM_ISPRIMARY>
<android.provider.ContactsContract$Intents$Insert: java.lang.String IM_PROTOCOL>
<android.provider.ContactsContract$Intents$Insert: java.lang.String JOB_TITLE>
<android.provider.ContactsContract$Intents$Insert: java.lang.String NAME>
<android.provider.ContactsContract$Intents$Insert: java.lang.String NOTES>
<android.provider.ContactsContract$Intents$Insert: java.lang.String PHONE>
<android.provider.ContactsContract$Intents$Insert: java.lang.String PHONETIC_NAME>
<android.provider.ContactsContract$Intents$Insert: java.lang.String PHONE_ISPRIMARY>
<android.provider.ContactsContract$Intents$Insert: java.lang.String PHONE_TYPE>
<android.provider.ContactsContract$Intents$Insert: java.lang.String POSTAL>
<android.provider.ContactsContract$Intents$Insert: java.lang.String POSTAL_ISPRIMARY>
<android.provider.ContactsContract$Intents$Insert: java.lang.String POSTAL_TYPE>
<android.provider.ContactsContract$Intents$Insert: java.lang.String SECONDARY_EMAIL>
<android.provider.ContactsContract$Intents$Insert: java.lang.String SECONDARY_EMAIL_TYPE>
<android.provider.ContactsContract$Intents$Insert: java.lang.String SECONDARY_PHONE>
<android.provider.ContactsContract$Intents$Insert: java.lang.String SECONDARY_PHONE_TYPE>
<android.provider.ContactsContract$Intents$Insert: java.lang.String TERTIARY_EMAIL>
<android.provider.ContactsContract$Intents$Insert: java.lang.String TERTIARY_EMAIL_TYPE>
<android.provider.ContactsContract$Intents$Insert: java.lang.String TERTIARY_PHONE>
<android.provider.ContactsContract$Intents$Insert: java.lang.String TERTIARY_PHONE_TYPE>
android.provider.ContactsContract$PhoneLookup
<android.provider.ContactsContract$PhoneLookup: android.net.Uri CONTENT_FILTER_URI>
<android.provider.ContactsContract$PhoneLookup: android.net.Uri ENTERPRISE_CONTENT_FILTER_URI>
<android.provider.ContactsContract$PhoneLookup: java.lang.String QUERY_PARAMETER_SIP_ADDRESS>
android.provider.ContactsContract$PhoneLookupColumns
<android.provider.ContactsContract$PhoneLookupColumns: java.lang.String CONTACT_ID>
<android.provider.ContactsContract$PhoneLookupColumns: java.lang.String DATA_ID>
<android.provider.ContactsContract$PhoneLookupColumns: java.lang.String LABEL>
<android.provider.ContactsContract$PhoneLookupColumns: java.lang.String NORMALIZED_NUMBER>
<android.provider.ContactsContract$PhoneLookupColumns: java.lang.String NUMBER>
<android.provider.ContactsContract$PhoneLookupColumns: java.lang.String TYPE>
android.provider.ContactsContract$PhoneticNameStyle
<android.provider.ContactsContract$PhoneticNameStyle: int JAPANESE>
<android.provider.ContactsContract$PhoneticNameStyle: int KOREAN>
<android.provider.ContactsContract$PhoneticNameStyle: int PINYIN>
<android.provider.ContactsContract$PhoneticNameStyle: int UNDEFINED>
android.provider.ContactsContract$PinnedPositions
<android.provider.ContactsContract$PinnedPositions: void <init>()>
<android.provider.ContactsContract$PinnedPositions: void pin(android.content.ContentResolver,long,int)>
<android.provider.ContactsContract$PinnedPositions: void undemote(android.content.ContentResolver,long)>
<android.provider.ContactsContract$PinnedPositions: int DEMOTED>
<android.provider.ContactsContract$PinnedPositions: int UNPINNED>
android.provider.ContactsContract$Presence
<android.provider.ContactsContract$Presence: void <init>()>
android.provider.ContactsContract$PresenceColumns
<android.provider.ContactsContract$PresenceColumns: java.lang.String CUSTOM_PROTOCOL>
<android.provider.ContactsContract$PresenceColumns: java.lang.String DATA_ID>
<android.provider.ContactsContract$PresenceColumns: java.lang.String IM_ACCOUNT>
<android.provider.ContactsContract$PresenceColumns: java.lang.String IM_HANDLE>
<android.provider.ContactsContract$PresenceColumns: java.lang.String PROTOCOL>
android.provider.ContactsContract$Profile
<android.provider.ContactsContract$Profile: android.net.Uri CONTENT_RAW_CONTACTS_URI>
<android.provider.ContactsContract$Profile: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$Profile: android.net.Uri CONTENT_VCARD_URI>
<android.provider.ContactsContract$Profile: long MIN_ID>
android.provider.ContactsContract$ProfileSyncState
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.provider.ContactsContract$ProfileSyncState: java.lang.String CONTENT_DIRECTORY>
<android.provider.ContactsContract$ProfileSyncState: android.net.Uri CONTENT_URI>
android.provider.ContactsContract$ProviderStatus
<android.provider.ContactsContract$ProviderStatus: java.lang.String CONTENT_TYPE>
<android.provider.ContactsContract$ProviderStatus: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$ProviderStatus: java.lang.String DATABASE_CREATION_TIMESTAMP>
<android.provider.ContactsContract$ProviderStatus: java.lang.String STATUS>
<android.provider.ContactsContract$ProviderStatus: int STATUS_BUSY>
<android.provider.ContactsContract$ProviderStatus: int STATUS_EMPTY>
<android.provider.ContactsContract$ProviderStatus: int STATUS_NORMAL>
android.provider.ContactsContract$QuickContact
<android.provider.ContactsContract$QuickContact: void <init>()>
<android.provider.ContactsContract$QuickContact: void showQuickContact(android.content.Context,android.view.View,android.net.Uri,int,java.lang.String[])>
<android.provider.ContactsContract$QuickContact: void showQuickContact(android.content.Context,android.graphics.Rect,android.net.Uri,int,java.lang.String[])>
<android.provider.ContactsContract$QuickContact: void showQuickContact(android.content.Context,android.view.View,android.net.Uri,java.lang.String[],java.lang.String)>
<android.provider.ContactsContract$QuickContact: void showQuickContact(android.content.Context,android.graphics.Rect,android.net.Uri,java.lang.String[],java.lang.String)>
<android.provider.ContactsContract$QuickContact: java.lang.String ACTION_QUICK_CONTACT>
<android.provider.ContactsContract$QuickContact: java.lang.String EXTRA_EXCLUDE_MIMES>
<android.provider.ContactsContract$QuickContact: java.lang.String EXTRA_MODE>
<android.provider.ContactsContract$QuickContact: java.lang.String EXTRA_PRIORITIZED_MIMETYPE>
<android.provider.ContactsContract$QuickContact: int MODE_LARGE>
<android.provider.ContactsContract$QuickContact: int MODE_MEDIUM>
<android.provider.ContactsContract$QuickContact: int MODE_SMALL>
android.provider.ContactsContract$RawContacts
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$RawContacts: java.lang.String getLocalAccountName(android.content.Context)>
<android.provider.ContactsContract$RawContacts: java.lang.String getLocalAccountType(android.content.Context)>
<android.provider.ContactsContract$RawContacts: android.content.EntityIterator newEntityIterator(android.database.Cursor)>
<android.provider.ContactsContract$RawContacts: int AGGREGATION_MODE_DEFAULT>
<android.provider.ContactsContract$RawContacts: int AGGREGATION_MODE_DISABLED>
<android.provider.ContactsContract$RawContacts: int AGGREGATION_MODE_IMMEDIATE>
<android.provider.ContactsContract$RawContacts: int AGGREGATION_MODE_SUSPENDED>
<android.provider.ContactsContract$RawContacts: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$RawContacts: java.lang.String CONTENT_TYPE>
<android.provider.ContactsContract$RawContacts: android.net.Uri CONTENT_URI>
android.provider.ContactsContract$RawContacts$Data
<android.provider.ContactsContract$RawContacts$Data: java.lang.String CONTENT_DIRECTORY>
android.provider.ContactsContract$RawContacts$DisplayPhoto
<android.provider.ContactsContract$RawContacts$DisplayPhoto: java.lang.String CONTENT_DIRECTORY>
android.provider.ContactsContract$RawContacts$Entity
<android.provider.ContactsContract$RawContacts$Entity: java.lang.String CONTENT_DIRECTORY>
<android.provider.ContactsContract$RawContacts$Entity: java.lang.String DATA_ID>
android.provider.ContactsContract$RawContactsColumns
<android.provider.ContactsContract$RawContactsColumns: java.lang.String ACCOUNT_TYPE_AND_DATA_SET>
<android.provider.ContactsContract$RawContactsColumns: java.lang.String AGGREGATION_MODE>
<android.provider.ContactsContract$RawContactsColumns: java.lang.String BACKUP_ID>
<android.provider.ContactsContract$RawContactsColumns: java.lang.String CONTACT_ID>
<android.provider.ContactsContract$RawContactsColumns: java.lang.String DATA_SET>
<android.provider.ContactsContract$RawContactsColumns: java.lang.String DELETED>
<android.provider.ContactsContract$RawContactsColumns: java.lang.String METADATA_DIRTY>
<android.provider.ContactsContract$RawContactsColumns: java.lang.String RAW_CONTACT_IS_READ_ONLY>
<android.provider.ContactsContract$RawContactsColumns: java.lang.String RAW_CONTACT_IS_USER_PROFILE>
android.provider.ContactsContract$RawContactsEntity
<android.provider.ContactsContract$RawContactsEntity: java.lang.String CONTENT_TYPE>
<android.provider.ContactsContract$RawContactsEntity: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$RawContactsEntity: java.lang.String DATA_ID>
<android.provider.ContactsContract$RawContactsEntity: android.net.Uri PROFILE_CONTENT_URI>
android.provider.ContactsContract$SearchSnippets
<android.provider.ContactsContract$SearchSnippets: void <init>()>
<android.provider.ContactsContract$SearchSnippets: java.lang.String DEFERRED_SNIPPETING_KEY>
<android.provider.ContactsContract$SearchSnippets: java.lang.String SNIPPET>
android.provider.ContactsContract$Settings
<android.provider.ContactsContract$Settings: android.accounts.Account getDefaultAccount(android.content.ContentResolver)>
<android.provider.ContactsContract$Settings: java.lang.String ACTION_SET_DEFAULT_ACCOUNT>
<android.provider.ContactsContract$Settings: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$Settings: java.lang.String CONTENT_TYPE>
<android.provider.ContactsContract$Settings: android.net.Uri CONTENT_URI>
android.provider.ContactsContract$SettingsColumns
<android.provider.ContactsContract$SettingsColumns: java.lang.String ACCOUNT_NAME>
<android.provider.ContactsContract$SettingsColumns: java.lang.String ACCOUNT_TYPE>
<android.provider.ContactsContract$SettingsColumns: java.lang.String ANY_UNSYNCED>
<android.provider.ContactsContract$SettingsColumns: java.lang.String DATA_SET>
<android.provider.ContactsContract$SettingsColumns: java.lang.String SHOULD_SYNC>
<android.provider.ContactsContract$SettingsColumns: java.lang.String UNGROUPED_COUNT>
<android.provider.ContactsContract$SettingsColumns: java.lang.String UNGROUPED_VISIBLE>
<android.provider.ContactsContract$SettingsColumns: java.lang.String UNGROUPED_WITH_PHONES>
android.provider.ContactsContract$SimAccount
<android.provider.ContactsContract$SimAccount: int describeContents()>
<android.provider.ContactsContract$SimAccount: java.lang.String getAccountName()>
<android.provider.ContactsContract$SimAccount: java.lang.String getAccountType()>
<android.provider.ContactsContract$SimAccount: int getEfType()>
<android.provider.ContactsContract$SimAccount: int getSimSlotIndex()>
<android.provider.ContactsContract$SimAccount: void writeToParcel(android.os.Parcel,int)>
<android.provider.ContactsContract$SimAccount: int ADN_EF_TYPE>
<android.provider.ContactsContract$SimAccount: android.os.Parcelable$Creator CREATOR>
<android.provider.ContactsContract$SimAccount: int FDN_EF_TYPE>
<android.provider.ContactsContract$SimAccount: int SDN_EF_TYPE>
<android.provider.ContactsContract$SimAccount: int UNKNOWN_EF_TYPE>
android.provider.ContactsContract$SimContacts
<android.provider.ContactsContract$SimContacts: java.util.List getSimAccounts(android.content.ContentResolver)>
<android.provider.ContactsContract$SimContacts: java.lang.String ACTION_SIM_ACCOUNTS_CHANGED>
android.provider.ContactsContract$StatusColumns
<android.provider.ContactsContract$StatusColumns: int AVAILABLE>
<android.provider.ContactsContract$StatusColumns: int AWAY>
<android.provider.ContactsContract$StatusColumns: int CAPABILITY_HAS_CAMERA>
<android.provider.ContactsContract$StatusColumns: int CAPABILITY_HAS_VIDEO>
<android.provider.ContactsContract$StatusColumns: int CAPABILITY_HAS_VOICE>
<android.provider.ContactsContract$StatusColumns: java.lang.String CHAT_CAPABILITY>
<android.provider.ContactsContract$StatusColumns: int DO_NOT_DISTURB>
<android.provider.ContactsContract$StatusColumns: int IDLE>
<android.provider.ContactsContract$StatusColumns: int INVISIBLE>
<android.provider.ContactsContract$StatusColumns: int OFFLINE>
<android.provider.ContactsContract$StatusColumns: java.lang.String PRESENCE>
<android.provider.ContactsContract$StatusColumns: java.lang.String PRESENCE_CUSTOM_STATUS>
<android.provider.ContactsContract$StatusColumns: java.lang.String PRESENCE_STATUS>
<android.provider.ContactsContract$StatusColumns: java.lang.String STATUS>
<android.provider.ContactsContract$StatusColumns: java.lang.String STATUS_ICON>
<android.provider.ContactsContract$StatusColumns: java.lang.String STATUS_LABEL>
<android.provider.ContactsContract$StatusColumns: java.lang.String STATUS_RES_PACKAGE>
<android.provider.ContactsContract$StatusColumns: java.lang.String STATUS_TIMESTAMP>
android.provider.ContactsContract$StatusUpdates
<android.provider.ContactsContract$StatusUpdates: int getPresenceIconResourceId(int)>
<android.provider.ContactsContract$StatusUpdates: int getPresencePrecedence(int)>
<android.provider.ContactsContract$StatusUpdates: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.ContactsContract$StatusUpdates: java.lang.String CONTENT_TYPE>
<android.provider.ContactsContract$StatusUpdates: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$StatusUpdates: android.net.Uri PROFILE_CONTENT_URI>
android.provider.ContactsContract$SyncColumns
<android.provider.ContactsContract$SyncColumns: java.lang.String ACCOUNT_NAME>
<android.provider.ContactsContract$SyncColumns: java.lang.String ACCOUNT_TYPE>
<android.provider.ContactsContract$SyncColumns: java.lang.String DIRTY>
<android.provider.ContactsContract$SyncColumns: java.lang.String SOURCE_ID>
<android.provider.ContactsContract$SyncColumns: java.lang.String VERSION>
android.provider.ContactsContract$SyncState
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.provider.ContactsContract$SyncState: java.lang.String CONTENT_DIRECTORY>
<android.provider.ContactsContract$SyncState: android.net.Uri CONTENT_URI>
android.provider.DocumentsContract
<android.provider.DocumentsContract: android.net.Uri buildChildDocumentsUri(java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildChildDocumentsUriUsingTree(android.net.Uri,java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildDocumentUri(java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildDocumentUriUsingTree(android.net.Uri,java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildRecentDocumentsUri(java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildRootUri(java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildRootsUri(java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildSearchDocumentsUri(java.lang.String,java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri buildTreeDocumentUri(java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: android.net.Uri copyDocument(android.content.ContentResolver,android.net.Uri,android.net.Uri)>
<android.provider.DocumentsContract: android.net.Uri createDocument(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)>
<android.provider.DocumentsContract: android.content.IntentSender createWebLinkIntent(android.content.ContentResolver,android.net.Uri,android.os.Bundle)>
<android.provider.DocumentsContract: boolean deleteDocument(android.content.ContentResolver,android.net.Uri)>
<android.provider.DocumentsContract: void ejectRoot(android.content.ContentResolver,android.net.Uri)>
<android.provider.DocumentsContract: android.provider.DocumentsContract$Path findDocumentPath(android.content.ContentResolver,android.net.Uri)>
<android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>
<android.provider.DocumentsContract: android.os.Bundle getDocumentMetadata(android.content.ContentResolver,android.net.Uri)>
<android.provider.DocumentsContract: android.graphics.Bitmap getDocumentThumbnail(android.content.ContentResolver,android.net.Uri,android.graphics.Point,android.os.CancellationSignal)>
<android.provider.DocumentsContract: java.lang.String getRootId(android.net.Uri)>
<android.provider.DocumentsContract: java.lang.String getSearchDocumentsQuery(android.net.Uri)>
<android.provider.DocumentsContract: java.lang.String getTreeDocumentId(android.net.Uri)>
<android.provider.DocumentsContract: boolean isChildDocument(android.content.ContentResolver,android.net.Uri,android.net.Uri)>
<android.provider.DocumentsContract: boolean isDocumentUri(android.content.Context,android.net.Uri)>
<android.provider.DocumentsContract: boolean isRootUri(android.content.Context,android.net.Uri)>
<android.provider.DocumentsContract: boolean isRootsUri(android.content.Context,android.net.Uri)>
<android.provider.DocumentsContract: boolean isTreeUri(android.net.Uri)>
<android.provider.DocumentsContract: android.net.Uri moveDocument(android.content.ContentResolver,android.net.Uri,android.net.Uri,android.net.Uri)>
<android.provider.DocumentsContract: boolean removeDocument(android.content.ContentResolver,android.net.Uri,android.net.Uri)>
<android.provider.DocumentsContract: android.net.Uri renameDocument(android.content.ContentResolver,android.net.Uri,java.lang.String)>
<android.provider.DocumentsContract: java.lang.String ACTION_DOCUMENT_SETTINGS>
<android.provider.DocumentsContract: java.lang.String EXTRA_ERROR>
<android.provider.DocumentsContract: java.lang.String EXTRA_EXCLUDE_SELF>
<android.provider.DocumentsContract: java.lang.String EXTRA_INFO>
<android.provider.DocumentsContract: java.lang.String EXTRA_INITIAL_URI>
<android.provider.DocumentsContract: java.lang.String EXTRA_LOADING>
<android.provider.DocumentsContract: java.lang.String EXTRA_ORIENTATION>
<android.provider.DocumentsContract: java.lang.String EXTRA_PROMPT>
<android.provider.DocumentsContract: java.lang.String METADATA_EXIF>
<android.provider.DocumentsContract: java.lang.String METADATA_TREE_COUNT>
<android.provider.DocumentsContract: java.lang.String METADATA_TREE_SIZE>
<android.provider.DocumentsContract: java.lang.String METADATA_TYPES>
<android.provider.DocumentsContract: java.lang.String PROVIDER_INTERFACE>
<android.provider.DocumentsContract: java.lang.String QUERY_ARG_DISPLAY_NAME>
<android.provider.DocumentsContract: java.lang.String QUERY_ARG_EXCLUDE_MEDIA>
<android.provider.DocumentsContract: java.lang.String QUERY_ARG_FILE_SIZE_OVER>
<android.provider.DocumentsContract: java.lang.String QUERY_ARG_LAST_MODIFIED_AFTER>
<android.provider.DocumentsContract: java.lang.String QUERY_ARG_MIME_TYPES>
android.provider.DocumentsContract$Document
<android.provider.DocumentsContract$Document: java.lang.String COLUMN_DISPLAY_NAME>
<android.provider.DocumentsContract$Document: java.lang.String COLUMN_DOCUMENT_ID>
<android.provider.DocumentsContract$Document: java.lang.String COLUMN_FLAGS>
<android.provider.DocumentsContract$Document: java.lang.String COLUMN_ICON>
<android.provider.DocumentsContract$Document: java.lang.String COLUMN_LAST_MODIFIED>
<android.provider.DocumentsContract$Document: java.lang.String COLUMN_MIME_TYPE>
<android.provider.DocumentsContract$Document: java.lang.String COLUMN_SIZE>
<android.provider.DocumentsContract$Document: java.lang.String COLUMN_SUMMARY>
<android.provider.DocumentsContract$Document: int FLAG_DIR_BLOCKS_OPEN_DOCUMENT_TREE>
<android.provider.DocumentsContract$Document: int FLAG_DIR_PREFERS_GRID>
<android.provider.DocumentsContract$Document: int FLAG_DIR_PREFERS_LAST_MODIFIED>
<android.provider.DocumentsContract$Document: int FLAG_DIR_SUPPORTS_CREATE>
<android.provider.DocumentsContract$Document: int FLAG_PARTIAL>
<android.provider.DocumentsContract$Document: int FLAG_SUPPORTS_COPY>
<android.provider.DocumentsContract$Document: int FLAG_SUPPORTS_DELETE>
<android.provider.DocumentsContract$Document: int FLAG_SUPPORTS_METADATA>
<android.provider.DocumentsContract$Document: int FLAG_SUPPORTS_MOVE>
<android.provider.DocumentsContract$Document: int FLAG_SUPPORTS_REMOVE>
<android.provider.DocumentsContract$Document: int FLAG_SUPPORTS_RENAME>
<android.provider.DocumentsContract$Document: int FLAG_SUPPORTS_SETTINGS>
<android.provider.DocumentsContract$Document: int FLAG_SUPPORTS_THUMBNAIL>
<android.provider.DocumentsContract$Document: int FLAG_SUPPORTS_WRITE>
<android.provider.DocumentsContract$Document: int FLAG_VIRTUAL_DOCUMENT>
<android.provider.DocumentsContract$Document: int FLAG_WEB_LINKABLE>
<android.provider.DocumentsContract$Document: java.lang.String MIME_TYPE_DIR>
android.provider.DocumentsContract$Path
<android.provider.DocumentsContract$Path: void <init>(java.lang.String,java.util.List)>
<android.provider.DocumentsContract$Path: int describeContents()>
<android.provider.DocumentsContract$Path: java.util.List getPath()>
<android.provider.DocumentsContract$Path: java.lang.String getRootId()>
<android.provider.DocumentsContract$Path: void writeToParcel(android.os.Parcel,int)>
<android.provider.DocumentsContract$Path: android.os.Parcelable$Creator CREATOR>
android.provider.DocumentsContract$Root
<android.provider.DocumentsContract$Root: java.lang.String COLUMN_AVAILABLE_BYTES>
<android.provider.DocumentsContract$Root: java.lang.String COLUMN_CAPACITY_BYTES>
<android.provider.DocumentsContract$Root: java.lang.String COLUMN_DOCUMENT_ID>
<android.provider.DocumentsContract$Root: java.lang.String COLUMN_FLAGS>
<android.provider.DocumentsContract$Root: java.lang.String COLUMN_ICON>
<android.provider.DocumentsContract$Root: java.lang.String COLUMN_MIME_TYPES>
<android.provider.DocumentsContract$Root: java.lang.String COLUMN_QUERY_ARGS>
<android.provider.DocumentsContract$Root: java.lang.String COLUMN_ROOT_ID>
<android.provider.DocumentsContract$Root: java.lang.String COLUMN_SUMMARY>
<android.provider.DocumentsContract$Root: java.lang.String COLUMN_TITLE>
<android.provider.DocumentsContract$Root: int FLAG_EMPTY>
<android.provider.DocumentsContract$Root: int FLAG_LOCAL_ONLY>
<android.provider.DocumentsContract$Root: int FLAG_SUPPORTS_CREATE>
<android.provider.DocumentsContract$Root: int FLAG_SUPPORTS_EJECT>
<android.provider.DocumentsContract$Root: int FLAG_SUPPORTS_IS_CHILD>
<android.provider.DocumentsContract$Root: int FLAG_SUPPORTS_RECENTS>
<android.provider.DocumentsContract$Root: int FLAG_SUPPORTS_SEARCH>
<android.provider.DocumentsContract$Root: java.lang.String MIME_TYPE_ITEM>
android.provider.DocumentsProvider
<android.provider.DocumentsProvider: void <init>()>
<android.provider.DocumentsProvider: java.lang.String copyDocument(java.lang.String,java.lang.String)>
<android.provider.DocumentsProvider: java.lang.String createDocument(java.lang.String,java.lang.String,java.lang.String)>
<android.provider.DocumentsProvider: android.content.IntentSender createWebLinkIntent(java.lang.String,android.os.Bundle)>
<android.provider.DocumentsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.provider.DocumentsProvider: void deleteDocument(java.lang.String)>
<android.provider.DocumentsProvider: void ejectRoot(java.lang.String)>
<android.provider.DocumentsProvider: android.provider.DocumentsContract$Path findDocumentPath(java.lang.String,java.lang.String)>
<android.provider.DocumentsProvider: android.os.Bundle getDocumentMetadata(java.lang.String)>
<android.provider.DocumentsProvider: java.lang.String[] getDocumentStreamTypes(java.lang.String,java.lang.String)>
<android.provider.DocumentsProvider: java.lang.String getDocumentType(java.lang.String)>
<android.provider.DocumentsProvider: java.lang.String getType(android.net.Uri)>
<android.provider.DocumentsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.provider.DocumentsProvider: boolean isChildDocument(java.lang.String,java.lang.String)>
<android.provider.DocumentsProvider: java.lang.String moveDocument(java.lang.String,java.lang.String,java.lang.String)>
<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>
<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: android.os.ParcelFileDescriptor openDocument(java.lang.String,java.lang.String,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openDocumentThumbnail(java.lang.String,android.graphics.Point,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<android.provider.DocumentsProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>
<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openTypedDocument(java.lang.String,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.provider.DocumentsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: android.database.Cursor queryChildDocuments(java.lang.String,java.lang.String[],java.lang.String)>
<android.provider.DocumentsProvider: android.database.Cursor queryChildDocuments(java.lang.String,java.lang.String[],android.os.Bundle)>
<android.provider.DocumentsProvider: android.database.Cursor queryDocument(java.lang.String,java.lang.String[])>
<android.provider.DocumentsProvider: android.database.Cursor queryRecentDocuments(java.lang.String,java.lang.String[])>
<android.provider.DocumentsProvider: android.database.Cursor queryRecentDocuments(java.lang.String,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>
<android.provider.DocumentsProvider: android.database.Cursor queryRoots(java.lang.String[])>
<android.provider.DocumentsProvider: android.database.Cursor querySearchDocuments(java.lang.String,java.lang.String,java.lang.String[])>
<android.provider.DocumentsProvider: android.database.Cursor querySearchDocuments(java.lang.String,java.lang.String[],android.os.Bundle)>
<android.provider.DocumentsProvider: void removeDocument(java.lang.String,java.lang.String)>
<android.provider.DocumentsProvider: java.lang.String renameDocument(java.lang.String,java.lang.String)>
<android.provider.DocumentsProvider: void revokeDocumentPermission(java.lang.String)>
<android.provider.DocumentsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
android.provider.FontRequest
<android.provider.FontRequest: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<android.provider.FontRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.List)>
<android.provider.FontRequest: java.util.List getCertificates()>
<android.provider.FontRequest: java.lang.String getProviderAuthority()>
<android.provider.FontRequest: java.lang.String getProviderPackage()>
<android.provider.FontRequest: java.lang.String getQuery()>
android.provider.FontsContract
<android.provider.FontsContract: android.graphics.Typeface buildTypeface(android.content.Context,android.os.CancellationSignal,android.provider.FontsContract$FontInfo[])>
<android.provider.FontsContract: android.provider.FontsContract$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,android.provider.FontRequest)>
<android.provider.FontsContract: void requestFonts(android.content.Context,android.provider.FontRequest,android.os.Handler,android.os.CancellationSignal,android.provider.FontsContract$FontRequestCallback)>
android.provider.FontsContract$Columns
<android.provider.FontsContract$Columns: java.lang.String FILE_ID>
<android.provider.FontsContract$Columns: java.lang.String ITALIC>
<android.provider.FontsContract$Columns: java.lang.String RESULT_CODE>
<android.provider.FontsContract$Columns: int RESULT_CODE_FONT_NOT_FOUND>
<android.provider.FontsContract$Columns: int RESULT_CODE_FONT_UNAVAILABLE>
<android.provider.FontsContract$Columns: int RESULT_CODE_MALFORMED_QUERY>
<android.provider.FontsContract$Columns: int RESULT_CODE_OK>
<android.provider.FontsContract$Columns: java.lang.String TTC_INDEX>
<android.provider.FontsContract$Columns: java.lang.String VARIATION_SETTINGS>
<android.provider.FontsContract$Columns: java.lang.String WEIGHT>
android.provider.FontsContract$FontFamilyResult
<android.provider.FontsContract$FontFamilyResult: android.provider.FontsContract$FontInfo[] getFonts()>
<android.provider.FontsContract$FontFamilyResult: int getStatusCode()>
<android.provider.FontsContract$FontFamilyResult: int STATUS_OK>
<android.provider.FontsContract$FontFamilyResult: int STATUS_REJECTED>
<android.provider.FontsContract$FontFamilyResult: int STATUS_UNEXPECTED_DATA_PROVIDED>
<android.provider.FontsContract$FontFamilyResult: int STATUS_WRONG_CERTIFICATES>
android.provider.FontsContract$FontInfo
<android.provider.FontsContract$FontInfo: android.graphics.fonts.FontVariationAxis[] getAxes()>
<android.provider.FontsContract$FontInfo: int getResultCode()>
<android.provider.FontsContract$FontInfo: int getTtcIndex()>
<android.provider.FontsContract$FontInfo: android.net.Uri getUri()>
<android.provider.FontsContract$FontInfo: int getWeight()>
<android.provider.FontsContract$FontInfo: boolean isItalic()>
android.provider.FontsContract$FontRequestCallback
<android.provider.FontsContract$FontRequestCallback: void <init>()>
<android.provider.FontsContract$FontRequestCallback: void onTypefaceRequestFailed(int)>
<android.provider.FontsContract$FontRequestCallback: void onTypefaceRetrieved(android.graphics.Typeface)>
<android.provider.FontsContract$FontRequestCallback: int FAIL_REASON_FONT_LOAD_ERROR>
<android.provider.FontsContract$FontRequestCallback: int FAIL_REASON_FONT_NOT_FOUND>
<android.provider.FontsContract$FontRequestCallback: int FAIL_REASON_FONT_UNAVAILABLE>
<android.provider.FontsContract$FontRequestCallback: int FAIL_REASON_MALFORMED_QUERY>
<android.provider.FontsContract$FontRequestCallback: int FAIL_REASON_PROVIDER_NOT_FOUND>
<android.provider.FontsContract$FontRequestCallback: int FAIL_REASON_WRONG_CERTIFICATES>
android.provider.LiveFolders
<android.provider.LiveFolders: java.lang.String ACTION_CREATE_LIVE_FOLDER>
<android.provider.LiveFolders: java.lang.String DESCRIPTION>
<android.provider.LiveFolders: int DISPLAY_MODE_GRID>
<android.provider.LiveFolders: int DISPLAY_MODE_LIST>
<android.provider.LiveFolders: java.lang.String EXTRA_LIVE_FOLDER_BASE_INTENT>
<android.provider.LiveFolders: java.lang.String EXTRA_LIVE_FOLDER_DISPLAY_MODE>
<android.provider.LiveFolders: java.lang.String EXTRA_LIVE_FOLDER_ICON>
<android.provider.LiveFolders: java.lang.String EXTRA_LIVE_FOLDER_NAME>
<android.provider.LiveFolders: java.lang.String ICON_BITMAP>
<android.provider.LiveFolders: java.lang.String ICON_PACKAGE>
<android.provider.LiveFolders: java.lang.String ICON_RESOURCE>
<android.provider.LiveFolders: java.lang.String INTENT>
<android.provider.LiveFolders: java.lang.String NAME>
android.provider.OpenableColumns
<android.provider.OpenableColumns: java.lang.String DISPLAY_NAME>
<android.provider.OpenableColumns: java.lang.String SIZE>
android.provider.SearchRecentSuggestions
<android.provider.SearchRecentSuggestions: void <init>(android.content.Context,java.lang.String,int)>
<android.provider.SearchRecentSuggestions: void clearHistory()>
<android.provider.SearchRecentSuggestions: void saveRecentQuery(java.lang.String,java.lang.String)>
<android.provider.SearchRecentSuggestions: void truncateHistory(android.content.ContentResolver,int)>
<android.provider.SearchRecentSuggestions: java.lang.String[] QUERIES_PROJECTION_1LINE>
<android.provider.SearchRecentSuggestions: java.lang.String[] QUERIES_PROJECTION_2LINE>
<android.provider.SearchRecentSuggestions: int QUERIES_PROJECTION_DATE_INDEX>
<android.provider.SearchRecentSuggestions: int QUERIES_PROJECTION_DISPLAY1_INDEX>
<android.provider.SearchRecentSuggestions: int QUERIES_PROJECTION_DISPLAY2_INDEX>
<android.provider.SearchRecentSuggestions: int QUERIES_PROJECTION_QUERY_INDEX>
android.provider.Settings
<android.provider.Settings: void <init>()>
<android.provider.Settings: boolean canDrawOverlays(android.content.Context)>
<android.provider.Settings: java.lang.String ACTION_ACCESSIBILITY_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_ADD_ACCOUNT>
<android.provider.Settings: java.lang.String ACTION_AIRPLANE_MODE_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_ALL_APPS_NOTIFICATION_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_APN_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_APPLICATION_DETAILS_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_APPLICATION_DEVELOPMENT_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_APPLICATION_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_APP_LOCALE_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_APP_NOTIFICATION_BUBBLE_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_APP_NOTIFICATION_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_APP_OPEN_BY_DEFAULT_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_APP_SEARCH_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_APP_USAGE_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_AUTO_ROTATE_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_BATTERY_SAVER_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_BIOMETRIC_ENROLL>
<android.provider.Settings: java.lang.String ACTION_BLUETOOTH_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_CAPTIONING_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_CAST_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_CHANNEL_NOTIFICATION_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_CONDITION_PROVIDER_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_DATA_ROAMING_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_DATA_USAGE_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_DATE_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_DEVICE_INFO_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_DISPLAY_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_DREAM_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_FINGERPRINT_ENROLL>
<android.provider.Settings: java.lang.String ACTION_HARD_KEYBOARD_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_HOME_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_INPUT_METHOD_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_INPUT_METHOD_SUBTYPE_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_INTERNAL_STORAGE_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_LOCALE_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_LOCATION_SOURCE_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION>
<android.provider.Settings: java.lang.String ACTION_MANAGE_ALL_SIM_PROFILES_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_MANAGE_APPLICATIONS_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION>
<android.provider.Settings: java.lang.String ACTION_MANAGE_DEFAULT_APPS_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_MANAGE_OVERLAY_PERMISSION>
<android.provider.Settings: java.lang.String ACTION_MANAGE_SUPERVISOR_RESTRICTED_SETTING>
<android.provider.Settings: java.lang.String ACTION_MANAGE_UNKNOWN_APP_SOURCES>
<android.provider.Settings: java.lang.String ACTION_MANAGE_WRITE_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_MEMORY_CARD_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_NETWORK_OPERATOR_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_NFCSHARING_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_NFC_PAYMENT_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_NFC_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_NIGHT_DISPLAY_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_NOTIFICATION_ASSISTANT_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_NOTIFICATION_LISTENER_DETAIL_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_NOTIFICATION_LISTENER_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_PRINT_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_PRIVACY_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_PROCESS_WIFI_EASY_CONNECT_URI>
<android.provider.Settings: java.lang.String ACTION_QUICK_ACCESS_WALLET_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_QUICK_LAUNCH_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS>
<android.provider.Settings: java.lang.String ACTION_REQUEST_MANAGE_MEDIA>
<android.provider.Settings: java.lang.String ACTION_REQUEST_SCHEDULE_EXACT_ALARM>
<android.provider.Settings: java.lang.String ACTION_REQUEST_SET_AUTOFILL_SERVICE>
<android.provider.Settings: java.lang.String ACTION_SEARCH_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_SECURITY_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_SETTINGS_EMBED_DEEP_LINK_ACTIVITY>
<android.provider.Settings: java.lang.String ACTION_SHOW_REGULATORY_INFO>
<android.provider.Settings: java.lang.String ACTION_SHOW_WORK_POLICY_INFO>
<android.provider.Settings: java.lang.String ACTION_SOUND_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_STORAGE_VOLUME_ACCESS_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_SYNC_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_USAGE_ACCESS_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_USER_DICTIONARY_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_VOICE_CONTROL_AIRPLANE_MODE>
<android.provider.Settings: java.lang.String ACTION_VOICE_CONTROL_BATTERY_SAVER_MODE>
<android.provider.Settings: java.lang.String ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE>
<android.provider.Settings: java.lang.String ACTION_VOICE_INPUT_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_VPN_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_VR_LISTENER_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_WEBVIEW_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_WIFI_ADD_NETWORKS>
<android.provider.Settings: java.lang.String ACTION_WIFI_IP_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_WIFI_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_WIRELESS_SETTINGS>
<android.provider.Settings: java.lang.String ACTION_ZEN_MODE_PRIORITY_SETTINGS>
<android.provider.Settings: int ADD_WIFI_RESULT_ADD_OR_UPDATE_FAILED>
<android.provider.Settings: int ADD_WIFI_RESULT_ALREADY_EXISTS>
<android.provider.Settings: int ADD_WIFI_RESULT_SUCCESS>
<android.provider.Settings: java.lang.String AUTHORITY>
<android.provider.Settings: java.lang.String EXTRA_ACCOUNT_TYPES>
<android.provider.Settings: java.lang.String EXTRA_AIRPLANE_MODE_ENABLED>
<android.provider.Settings: java.lang.String EXTRA_APP_PACKAGE>
<android.provider.Settings: java.lang.String EXTRA_AUTHORITIES>
<android.provider.Settings: java.lang.String EXTRA_BATTERY_SAVER_MODE_ENABLED>
<android.provider.Settings: java.lang.String EXTRA_BIOMETRIC_AUTHENTICATORS_ALLOWED>
<android.provider.Settings: java.lang.String EXTRA_CHANNEL_FILTER_LIST>
<android.provider.Settings: java.lang.String EXTRA_CHANNEL_ID>
<android.provider.Settings: java.lang.String EXTRA_CONVERSATION_ID>
<android.provider.Settings: java.lang.String EXTRA_DO_NOT_DISTURB_MODE_ENABLED>
<android.provider.Settings: java.lang.String EXTRA_DO_NOT_DISTURB_MODE_MINUTES>
<android.provider.Settings: java.lang.String EXTRA_EASY_CONNECT_ATTEMPTED_SSID>
<android.provider.Settings: java.lang.String EXTRA_EASY_CONNECT_BAND_LIST>
<android.provider.Settings: java.lang.String EXTRA_EASY_CONNECT_CHANNEL_LIST>
<android.provider.Settings: java.lang.String EXTRA_EASY_CONNECT_ERROR_CODE>
<android.provider.Settings: java.lang.String EXTRA_INPUT_METHOD_ID>
<android.provider.Settings: java.lang.String EXTRA_NOTIFICATION_LISTENER_COMPONENT_NAME>
<android.provider.Settings: java.lang.String EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_HIGHLIGHT_MENU_KEY>
<android.provider.Settings: java.lang.String EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URI>
<android.provider.Settings: java.lang.String EXTRA_SUB_ID>
<android.provider.Settings: java.lang.String EXTRA_SUPERVISOR_RESTRICTED_SETTING_KEY>
<android.provider.Settings: java.lang.String EXTRA_WIFI_NETWORK_LIST>
<android.provider.Settings: java.lang.String EXTRA_WIFI_NETWORK_RESULT_LIST>
<android.provider.Settings: java.lang.String INTENT_CATEGORY_USAGE_ACCESS_CONFIG>
<android.provider.Settings: java.lang.String METADATA_USAGE_ACCESS_REASON>
<android.provider.Settings: int SUPERVISOR_VERIFICATION_SETTING_BIOMETRICS>
<android.provider.Settings: int SUPERVISOR_VERIFICATION_SETTING_UNKNOWN>
android.provider.Settings$Global
<android.provider.Settings$Global: void <init>()>
<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>
<android.provider.Settings$Global: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$Global: boolean putLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Settings$Global: java.lang.String ADB_ENABLED>
<android.provider.Settings$Global: java.lang.String AIRPLANE_MODE_ON>
<android.provider.Settings$Global: java.lang.String AIRPLANE_MODE_RADIOS>
<android.provider.Settings$Global: java.lang.String ALWAYS_FINISH_ACTIVITIES>
<android.provider.Settings$Global: java.lang.String ANIMATOR_DURATION_SCALE>
<android.provider.Settings$Global: java.lang.String APPLY_RAMPING_RINGER>
<android.provider.Settings$Global: java.lang.String AUTO_TIME>
<android.provider.Settings$Global: java.lang.String AUTO_TIME_ZONE>
<android.provider.Settings$Global: java.lang.String BLUETOOTH_ON>
<android.provider.Settings$Global: java.lang.String BOOT_COUNT>
<android.provider.Settings$Global: java.lang.String CONTACT_METADATA_SYNC_ENABLED>
<android.provider.Settings$Global: android.net.Uri CONTENT_URI>
<android.provider.Settings$Global: java.lang.String DATA_ROAMING>
<android.provider.Settings$Global: java.lang.String DEBUG_APP>
<android.provider.Settings$Global: java.lang.String DEVELOPMENT_SETTINGS_ENABLED>
<android.provider.Settings$Global: java.lang.String DEVICE_NAME>
<android.provider.Settings$Global: java.lang.String DEVICE_PROVISIONED>
<android.provider.Settings$Global: java.lang.String HTTP_PROXY>
<android.provider.Settings$Global: java.lang.String INSTALL_NON_MARKET_APPS>
<android.provider.Settings$Global: java.lang.String MODE_RINGER>
<android.provider.Settings$Global: java.lang.String NETWORK_PREFERENCE>
<android.provider.Settings$Global: java.lang.String RADIO_BLUETOOTH>
<android.provider.Settings$Global: java.lang.String RADIO_CELL>
<android.provider.Settings$Global: java.lang.String RADIO_NFC>
<android.provider.Settings$Global: java.lang.String RADIO_WIFI>
<android.provider.Settings$Global: java.lang.String SHOW_PROCESSES>
<android.provider.Settings$Global: java.lang.String STAY_ON_WHILE_PLUGGED_IN>
<android.provider.Settings$Global: java.lang.String TRANSITION_ANIMATION_SCALE>
<android.provider.Settings$Global: java.lang.String USB_MASS_STORAGE_ENABLED>
<android.provider.Settings$Global: java.lang.String USE_GOOGLE_MAIL>
<android.provider.Settings$Global: java.lang.String WAIT_FOR_DEBUGGER>
<android.provider.Settings$Global: java.lang.String WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN>
<android.provider.Settings$Global: java.lang.String WIFI_MAX_DHCP_RETRY_COUNT>
<android.provider.Settings$Global: java.lang.String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS>
<android.provider.Settings$Global: java.lang.String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON>
<android.provider.Settings$Global: java.lang.String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY>
<android.provider.Settings$Global: java.lang.String WIFI_NUM_OPEN_NETWORKS_KEPT>
<android.provider.Settings$Global: java.lang.String WIFI_ON>
<android.provider.Settings$Global: java.lang.String WIFI_SLEEP_POLICY>
<android.provider.Settings$Global: int WIFI_SLEEP_POLICY_DEFAULT>
<android.provider.Settings$Global: int WIFI_SLEEP_POLICY_NEVER>
<android.provider.Settings$Global: int WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED>
<android.provider.Settings$Global: java.lang.String WIFI_WATCHDOG_ON>
<android.provider.Settings$Global: java.lang.String WINDOW_ANIMATION_SCALE>
android.provider.Settings$NameValueTable
<android.provider.Settings$NameValueTable: void <init>()>
<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>
<android.provider.Settings$NameValueTable: boolean putString(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)>
<android.provider.Settings$NameValueTable: java.lang.String NAME>
<android.provider.Settings$NameValueTable: java.lang.String VALUE>
android.provider.Settings$Panel
<android.provider.Settings$Panel: java.lang.String ACTION_INTERNET_CONNECTIVITY>
<android.provider.Settings$Panel: java.lang.String ACTION_NFC>
<android.provider.Settings$Panel: java.lang.String ACTION_VOLUME>
<android.provider.Settings$Panel: java.lang.String ACTION_WIFI>
android.provider.Settings$Secure
<android.provider.Settings$Secure: void <init>()>
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>
<android.provider.Settings$Secure: boolean isLocationProviderEnabled(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$Secure: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$Secure: boolean putLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Settings$Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)>
<android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_DISPLAY_INVERSION_ENABLED>
<android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_ENABLED>
<android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_SPEAK_PASSWORD>
<android.provider.Settings$Secure: java.lang.String ADB_ENABLED>
<android.provider.Settings$Secure: java.lang.String ALLOWED_GEOLOCATION_ORIGINS>
<android.provider.Settings$Secure: java.lang.String ALLOW_MOCK_LOCATION>
<android.provider.Settings$Secure: java.lang.String ANDROID_ID>
<android.provider.Settings$Secure: java.lang.String BACKGROUND_DATA>
<android.provider.Settings$Secure: java.lang.String BLUETOOTH_ON>
<android.provider.Settings$Secure: android.net.Uri CONTENT_URI>
<android.provider.Settings$Secure: java.lang.String DATA_ROAMING>
<android.provider.Settings$Secure: java.lang.String DEFAULT_INPUT_METHOD>
<android.provider.Settings$Secure: java.lang.String DEVELOPMENT_SETTINGS_ENABLED>
<android.provider.Settings$Secure: java.lang.String DEVICE_PROVISIONED>
<android.provider.Settings$Secure: java.lang.String ENABLED_ACCESSIBILITY_SERVICES>
<android.provider.Settings$Secure: java.lang.String ENABLED_INPUT_METHODS>
<android.provider.Settings$Secure: java.lang.String HTTP_PROXY>
<android.provider.Settings$Secure: java.lang.String INPUT_METHOD_SELECTOR_VISIBILITY>
<android.provider.Settings$Secure: java.lang.String INSTALL_NON_MARKET_APPS>
<android.provider.Settings$Secure: java.lang.String LOCATION_MODE>
<android.provider.Settings$Secure: int LOCATION_MODE_BATTERY_SAVING>
<android.provider.Settings$Secure: int LOCATION_MODE_HIGH_ACCURACY>
<android.provider.Settings$Secure: int LOCATION_MODE_OFF>
<android.provider.Settings$Secure: int LOCATION_MODE_SENSORS_ONLY>
<android.provider.Settings$Secure: java.lang.String LOCATION_PROVIDERS_ALLOWED>
<android.provider.Settings$Secure: java.lang.String LOCK_PATTERN_ENABLED>
<android.provider.Settings$Secure: java.lang.String LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED>
<android.provider.Settings$Secure: java.lang.String LOCK_PATTERN_VISIBLE>
<android.provider.Settings$Secure: java.lang.String LOGGING_ID>
<android.provider.Settings$Secure: java.lang.String NETWORK_PREFERENCE>
<android.provider.Settings$Secure: java.lang.String PARENTAL_CONTROL_ENABLED>
<android.provider.Settings$Secure: java.lang.String PARENTAL_CONTROL_LAST_UPDATE>
<android.provider.Settings$Secure: java.lang.String PARENTAL_CONTROL_REDIRECT_URL>
<android.provider.Settings$Secure: java.lang.String RTT_CALLING_MODE>
<android.provider.Settings$Secure: java.lang.String SECURE_FRP_MODE>
<android.provider.Settings$Secure: java.lang.String SELECTED_INPUT_METHOD_SUBTYPE>
<android.provider.Settings$Secure: java.lang.String SETTINGS_CLASSNAME>
<android.provider.Settings$Secure: java.lang.String SKIP_FIRST_USE_HINTS>
<android.provider.Settings$Secure: java.lang.String TOUCH_EXPLORATION_ENABLED>
<android.provider.Settings$Secure: java.lang.String TTS_DEFAULT_COUNTRY>
<android.provider.Settings$Secure: java.lang.String TTS_DEFAULT_LANG>
<android.provider.Settings$Secure: java.lang.String TTS_DEFAULT_PITCH>
<android.provider.Settings$Secure: java.lang.String TTS_DEFAULT_RATE>
<android.provider.Settings$Secure: java.lang.String TTS_DEFAULT_SYNTH>
<android.provider.Settings$Secure: java.lang.String TTS_DEFAULT_VARIANT>
<android.provider.Settings$Secure: java.lang.String TTS_ENABLED_PLUGINS>
<android.provider.Settings$Secure: java.lang.String TTS_USE_DEFAULTS>
<android.provider.Settings$Secure: java.lang.String USB_MASS_STORAGE_ENABLED>
<android.provider.Settings$Secure: java.lang.String USE_GOOGLE_MAIL>
<android.provider.Settings$Secure: java.lang.String WIFI_MAX_DHCP_RETRY_COUNT>
<android.provider.Settings$Secure: java.lang.String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS>
<android.provider.Settings$Secure: java.lang.String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON>
<android.provider.Settings$Secure: java.lang.String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY>
<android.provider.Settings$Secure: java.lang.String WIFI_NUM_OPEN_NETWORKS_KEPT>
<android.provider.Settings$Secure: java.lang.String WIFI_ON>
<android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE>
<android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_AP_COUNT>
<android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS>
<android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED>
<android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS>
<android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT>
<android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_MAX_AP_CHECKS>
<android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_ON>
<android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_PING_COUNT>
<android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_PING_DELAY_MS>
<android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_PING_TIMEOUT_MS>
<android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_WATCH_LIST>
android.provider.Settings$SettingNotFoundException
<android.provider.Settings$SettingNotFoundException: void <init>(java.lang.String)>
android.provider.Settings$System
<android.provider.Settings$System: void <init>()>
<android.provider.Settings$System: boolean canWrite(android.content.Context)>
<android.provider.Settings$System: void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)>
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$System: boolean getShowGTalkServiceStatus(android.content.ContentResolver)>
<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>
<android.provider.Settings$System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)>
<android.provider.Settings$System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$System: boolean putLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings$System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Settings$System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)>
<android.provider.Settings$System: java.lang.String ACCELEROMETER_ROTATION>
<android.provider.Settings$System: java.lang.String ADB_ENABLED>
<android.provider.Settings$System: java.lang.String AIRPLANE_MODE_ON>
<android.provider.Settings$System: java.lang.String AIRPLANE_MODE_RADIOS>
<android.provider.Settings$System: java.lang.String ALARM_ALERT>
<android.provider.Settings$System: java.lang.String ALWAYS_FINISH_ACTIVITIES>
<android.provider.Settings$System: java.lang.String ANDROID_ID>
<android.provider.Settings$System: java.lang.String ANIMATOR_DURATION_SCALE>
<android.provider.Settings$System: java.lang.String AUTO_TIME>
<android.provider.Settings$System: java.lang.String AUTO_TIME_ZONE>
<android.provider.Settings$System: java.lang.String BLUETOOTH_DISCOVERABILITY>
<android.provider.Settings$System: java.lang.String BLUETOOTH_DISCOVERABILITY_TIMEOUT>
<android.provider.Settings$System: java.lang.String BLUETOOTH_ON>
<android.provider.Settings$System: android.net.Uri CONTENT_URI>
<android.provider.Settings$System: java.lang.String DATA_ROAMING>
<android.provider.Settings$System: java.lang.String DATE_FORMAT>
<android.provider.Settings$System: java.lang.String DEBUG_APP>
<android.provider.Settings$System: android.net.Uri DEFAULT_ALARM_ALERT_URI>
<android.provider.Settings$System: android.net.Uri DEFAULT_NOTIFICATION_URI>
<android.provider.Settings$System: android.net.Uri DEFAULT_RINGTONE_URI>
<android.provider.Settings$System: java.lang.String DEVICE_PROVISIONED>
<android.provider.Settings$System: java.lang.String DIM_SCREEN>
<android.provider.Settings$System: java.lang.String DTMF_TONE_TYPE_WHEN_DIALING>
<android.provider.Settings$System: java.lang.String DTMF_TONE_WHEN_DIALING>
<android.provider.Settings$System: java.lang.String END_BUTTON_BEHAVIOR>
<android.provider.Settings$System: java.lang.String FONT_SCALE>
<android.provider.Settings$System: java.lang.String HAPTIC_FEEDBACK_ENABLED>
<android.provider.Settings$System: java.lang.String HTTP_PROXY>
<android.provider.Settings$System: java.lang.String INSTALL_NON_MARKET_APPS>
<android.provider.Settings$System: java.lang.String LOCATION_PROVIDERS_ALLOWED>
<android.provider.Settings$System: java.lang.String LOCK_PATTERN_ENABLED>
<android.provider.Settings$System: java.lang.String LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED>
<android.provider.Settings$System: java.lang.String LOCK_PATTERN_VISIBLE>
<android.provider.Settings$System: java.lang.String LOGGING_ID>
<android.provider.Settings$System: java.lang.String MODE_RINGER>
<android.provider.Settings$System: java.lang.String MODE_RINGER_STREAMS_AFFECTED>
<android.provider.Settings$System: java.lang.String MUTE_STREAMS_AFFECTED>
<android.provider.Settings$System: java.lang.String NETWORK_PREFERENCE>
<android.provider.Settings$System: java.lang.String NEXT_ALARM_FORMATTED>
<android.provider.Settings$System: java.lang.String NOTIFICATION_SOUND>
<android.provider.Settings$System: java.lang.String PARENTAL_CONTROL_ENABLED>
<android.provider.Settings$System: java.lang.String PARENTAL_CONTROL_LAST_UPDATE>
<android.provider.Settings$System: java.lang.String PARENTAL_CONTROL_REDIRECT_URL>
<android.provider.Settings$System: java.lang.String RADIO_BLUETOOTH>
<android.provider.Settings$System: java.lang.String RADIO_CELL>
<android.provider.Settings$System: java.lang.String RADIO_NFC>
<android.provider.Settings$System: java.lang.String RADIO_WIFI>
<android.provider.Settings$System: java.lang.String RINGTONE>
<android.provider.Settings$System: java.lang.String SCREEN_BRIGHTNESS>
<android.provider.Settings$System: java.lang.String SCREEN_BRIGHTNESS_MODE>
<android.provider.Settings$System: int SCREEN_BRIGHTNESS_MODE_AUTOMATIC>
<android.provider.Settings$System: int SCREEN_BRIGHTNESS_MODE_MANUAL>
<android.provider.Settings$System: java.lang.String SCREEN_OFF_TIMEOUT>
<android.provider.Settings$System: java.lang.String SETTINGS_CLASSNAME>
<android.provider.Settings$System: java.lang.String SETUP_WIZARD_HAS_RUN>
<android.provider.Settings$System: java.lang.String SHOW_GTALK_SERVICE_STATUS>
<android.provider.Settings$System: java.lang.String SHOW_PROCESSES>
<android.provider.Settings$System: java.lang.String SHOW_WEB_SUGGESTIONS>
<android.provider.Settings$System: java.lang.String SOUND_EFFECTS_ENABLED>
<android.provider.Settings$System: java.lang.String STAY_ON_WHILE_PLUGGED_IN>
<android.provider.Settings$System: java.lang.String TEXT_AUTO_CAPS>
<android.provider.Settings$System: java.lang.String TEXT_AUTO_PUNCTUATE>
<android.provider.Settings$System: java.lang.String TEXT_AUTO_REPLACE>
<android.provider.Settings$System: java.lang.String TEXT_SHOW_PASSWORD>
<android.provider.Settings$System: java.lang.String TIME_12_24>
<android.provider.Settings$System: java.lang.String TRANSITION_ANIMATION_SCALE>
<android.provider.Settings$System: java.lang.String USB_MASS_STORAGE_ENABLED>
<android.provider.Settings$System: java.lang.String USER_ROTATION>
<android.provider.Settings$System: java.lang.String USE_GOOGLE_MAIL>
<android.provider.Settings$System: java.lang.String VIBRATE_ON>
<android.provider.Settings$System: java.lang.String VIBRATE_WHEN_RINGING>
<android.provider.Settings$System: java.lang.String WAIT_FOR_DEBUGGER>
<android.provider.Settings$System: java.lang.String WALLPAPER_ACTIVITY>
<android.provider.Settings$System: java.lang.String WIFI_MAX_DHCP_RETRY_COUNT>
<android.provider.Settings$System: java.lang.String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS>
<android.provider.Settings$System: java.lang.String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON>
<android.provider.Settings$System: java.lang.String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY>
<android.provider.Settings$System: java.lang.String WIFI_NUM_OPEN_NETWORKS_KEPT>
<android.provider.Settings$System: java.lang.String WIFI_ON>
<android.provider.Settings$System: java.lang.String WIFI_SLEEP_POLICY>
<android.provider.Settings$System: int WIFI_SLEEP_POLICY_DEFAULT>
<android.provider.Settings$System: int WIFI_SLEEP_POLICY_NEVER>
<android.provider.Settings$System: int WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED>
<android.provider.Settings$System: java.lang.String WIFI_STATIC_DNS1>
<android.provider.Settings$System: java.lang.String WIFI_STATIC_DNS2>
<android.provider.Settings$System: java.lang.String WIFI_STATIC_GATEWAY>
<android.provider.Settings$System: java.lang.String WIFI_STATIC_IP>
<android.provider.Settings$System: java.lang.String WIFI_STATIC_NETMASK>
<android.provider.Settings$System: java.lang.String WIFI_USE_STATIC_IP>
<android.provider.Settings$System: java.lang.String WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE>
<android.provider.Settings$System: java.lang.String WIFI_WATCHDOG_AP_COUNT>
<android.provider.Settings$System: java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS>
<android.provider.Settings$System: java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED>
<android.provider.Settings$System: java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS>
<android.provider.Settings$System: java.lang.String WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT>
<android.provider.Settings$System: java.lang.String WIFI_WATCHDOG_MAX_AP_CHECKS>
<android.provider.Settings$System: java.lang.String WIFI_WATCHDOG_ON>
<android.provider.Settings$System: java.lang.String WIFI_WATCHDOG_PING_COUNT>
<android.provider.Settings$System: java.lang.String WIFI_WATCHDOG_PING_DELAY_MS>
<android.provider.Settings$System: java.lang.String WIFI_WATCHDOG_PING_TIMEOUT_MS>
<android.provider.Settings$System: java.lang.String WINDOW_ANIMATION_SCALE>
android.provider.SettingsSlicesContract
<android.provider.SettingsSlicesContract: java.lang.String AUTHORITY>
<android.provider.SettingsSlicesContract: android.net.Uri BASE_URI>
<android.provider.SettingsSlicesContract: java.lang.String KEY_AIRPLANE_MODE>
<android.provider.SettingsSlicesContract: java.lang.String KEY_BATTERY_SAVER>
<android.provider.SettingsSlicesContract: java.lang.String KEY_BLUETOOTH>
<android.provider.SettingsSlicesContract: java.lang.String KEY_LOCATION>
<android.provider.SettingsSlicesContract: java.lang.String KEY_WIFI>
<android.provider.SettingsSlicesContract: java.lang.String PATH_SETTING_ACTION>
<android.provider.SettingsSlicesContract: java.lang.String PATH_SETTING_INTENT>
android.provider.SimPhonebookContract
<android.provider.SimPhonebookContract: java.lang.String AUTHORITY>
<android.provider.SimPhonebookContract: android.net.Uri AUTHORITY_URI>
android.provider.SimPhonebookContract$ElementaryFiles
<android.provider.SimPhonebookContract$ElementaryFiles: android.net.Uri getItemUri(int,int)>
<android.provider.SimPhonebookContract$ElementaryFiles: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.SimPhonebookContract$ElementaryFiles: java.lang.String CONTENT_TYPE>
<android.provider.SimPhonebookContract$ElementaryFiles: android.net.Uri CONTENT_URI>
<android.provider.SimPhonebookContract$ElementaryFiles: int EF_ADN>
<android.provider.SimPhonebookContract$ElementaryFiles: int EF_FDN>
<android.provider.SimPhonebookContract$ElementaryFiles: int EF_SDN>
<android.provider.SimPhonebookContract$ElementaryFiles: java.lang.String EF_TYPE>
<android.provider.SimPhonebookContract$ElementaryFiles: int EF_UNKNOWN>
<android.provider.SimPhonebookContract$ElementaryFiles: java.lang.String MAX_RECORDS>
<android.provider.SimPhonebookContract$ElementaryFiles: java.lang.String NAME_MAX_LENGTH>
<android.provider.SimPhonebookContract$ElementaryFiles: java.lang.String PHONE_NUMBER_MAX_LENGTH>
<android.provider.SimPhonebookContract$ElementaryFiles: java.lang.String RECORD_COUNT>
<android.provider.SimPhonebookContract$ElementaryFiles: java.lang.String SLOT_INDEX>
<android.provider.SimPhonebookContract$ElementaryFiles: java.lang.String SUBSCRIPTION_ID>
android.provider.SimPhonebookContract$SimRecords
<android.provider.SimPhonebookContract$SimRecords: android.net.Uri getContentUri(int,int)>
<android.provider.SimPhonebookContract$SimRecords: int getEncodedNameLength(android.content.ContentResolver,java.lang.String)>
<android.provider.SimPhonebookContract$SimRecords: android.net.Uri getItemUri(int,int,int)>
<android.provider.SimPhonebookContract$SimRecords: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.SimPhonebookContract$SimRecords: java.lang.String CONTENT_TYPE>
<android.provider.SimPhonebookContract$SimRecords: java.lang.String ELEMENTARY_FILE_TYPE>
<android.provider.SimPhonebookContract$SimRecords: int ERROR_NAME_UNSUPPORTED>
<android.provider.SimPhonebookContract$SimRecords: java.lang.String NAME>
<android.provider.SimPhonebookContract$SimRecords: java.lang.String PHONE_NUMBER>
<android.provider.SimPhonebookContract$SimRecords: java.lang.String RECORD_NUMBER>
<android.provider.SimPhonebookContract$SimRecords: java.lang.String SUBSCRIPTION_ID>
android.provider.SyncStateContract
<android.provider.SyncStateContract: void <init>()>
android.provider.SyncStateContract$Columns
<android.provider.SyncStateContract$Columns: java.lang.String ACCOUNT_NAME>
<android.provider.SyncStateContract$Columns: java.lang.String ACCOUNT_TYPE>
<android.provider.SyncStateContract$Columns: java.lang.String DATA>
android.provider.SyncStateContract$Constants
<android.provider.SyncStateContract$Constants: void <init>()>
<android.provider.SyncStateContract$Constants: java.lang.String CONTENT_DIRECTORY>
android.provider.SyncStateContract$Helpers
<android.provider.SyncStateContract$Helpers: void <init>()>
<android.provider.SyncStateContract$Helpers: byte[] get(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)>
<android.provider.SyncStateContract$Helpers: android.util.Pair getWithUri(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)>
<android.provider.SyncStateContract$Helpers: android.net.Uri insert(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account,byte[])>
<android.provider.SyncStateContract$Helpers: android.content.ContentProviderOperation newSetOperation(android.net.Uri,android.accounts.Account,byte[])>
<android.provider.SyncStateContract$Helpers: android.content.ContentProviderOperation newUpdateOperation(android.net.Uri,byte[])>
<android.provider.SyncStateContract$Helpers: void set(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account,byte[])>
<android.provider.SyncStateContract$Helpers: void update(android.content.ContentProviderClient,android.net.Uri,byte[])>
android.provider.Telephony
android.provider.Telephony$BaseMmsColumns
<android.provider.Telephony$BaseMmsColumns: java.lang.String CONTENT_CLASS>
<android.provider.Telephony$BaseMmsColumns: java.lang.String CONTENT_LOCATION>
<android.provider.Telephony$BaseMmsColumns: java.lang.String CONTENT_TYPE>
<android.provider.Telephony$BaseMmsColumns: java.lang.String CREATOR>
<android.provider.Telephony$BaseMmsColumns: java.lang.String DATE>
<android.provider.Telephony$BaseMmsColumns: java.lang.String DATE_SENT>
<android.provider.Telephony$BaseMmsColumns: java.lang.String DELIVERY_REPORT>
<android.provider.Telephony$BaseMmsColumns: java.lang.String DELIVERY_TIME>
<android.provider.Telephony$BaseMmsColumns: java.lang.String EXPIRY>
<android.provider.Telephony$BaseMmsColumns: java.lang.String LOCKED>
<android.provider.Telephony$BaseMmsColumns: java.lang.String MESSAGE_BOX>
<android.provider.Telephony$BaseMmsColumns: int MESSAGE_BOX_ALL>
<android.provider.Telephony$BaseMmsColumns: int MESSAGE_BOX_DRAFTS>
<android.provider.Telephony$BaseMmsColumns: int MESSAGE_BOX_FAILED>
<android.provider.Telephony$BaseMmsColumns: int MESSAGE_BOX_INBOX>
<android.provider.Telephony$BaseMmsColumns: int MESSAGE_BOX_OUTBOX>
<android.provider.Telephony$BaseMmsColumns: int MESSAGE_BOX_SENT>
<android.provider.Telephony$BaseMmsColumns: java.lang.String MESSAGE_CLASS>
<android.provider.Telephony$BaseMmsColumns: java.lang.String MESSAGE_ID>
<android.provider.Telephony$BaseMmsColumns: java.lang.String MESSAGE_SIZE>
<android.provider.Telephony$BaseMmsColumns: java.lang.String MESSAGE_TYPE>
<android.provider.Telephony$BaseMmsColumns: java.lang.String MMS_VERSION>
<android.provider.Telephony$BaseMmsColumns: java.lang.String PRIORITY>
<android.provider.Telephony$BaseMmsColumns: java.lang.String READ>
<android.provider.Telephony$BaseMmsColumns: java.lang.String READ_REPORT>
<android.provider.Telephony$BaseMmsColumns: java.lang.String READ_STATUS>
<android.provider.Telephony$BaseMmsColumns: java.lang.String REPORT_ALLOWED>
<android.provider.Telephony$BaseMmsColumns: java.lang.String RESPONSE_STATUS>
<android.provider.Telephony$BaseMmsColumns: java.lang.String RESPONSE_TEXT>
<android.provider.Telephony$BaseMmsColumns: java.lang.String RETRIEVE_STATUS>
<android.provider.Telephony$BaseMmsColumns: java.lang.String RETRIEVE_TEXT>
<android.provider.Telephony$BaseMmsColumns: java.lang.String RETRIEVE_TEXT_CHARSET>
<android.provider.Telephony$BaseMmsColumns: java.lang.String SEEN>
<android.provider.Telephony$BaseMmsColumns: java.lang.String STATUS>
<android.provider.Telephony$BaseMmsColumns: java.lang.String SUBJECT>
<android.provider.Telephony$BaseMmsColumns: java.lang.String SUBJECT_CHARSET>
<android.provider.Telephony$BaseMmsColumns: java.lang.String SUBSCRIPTION_ID>
<android.provider.Telephony$BaseMmsColumns: java.lang.String TEXT_ONLY>
<android.provider.Telephony$BaseMmsColumns: java.lang.String THREAD_ID>
<android.provider.Telephony$BaseMmsColumns: java.lang.String TRANSACTION_ID>
android.provider.Telephony$CanonicalAddressesColumns
<android.provider.Telephony$CanonicalAddressesColumns: java.lang.String ADDRESS>
android.provider.Telephony$CarrierId
<android.provider.Telephony$CarrierId: android.net.Uri getSpecificCarrierIdUriForSubscriptionId(int)>
<android.provider.Telephony$CarrierId: android.net.Uri getUriForSubscriptionId(int)>
<android.provider.Telephony$CarrierId: java.lang.String CARRIER_ID>
<android.provider.Telephony$CarrierId: java.lang.String CARRIER_NAME>
<android.provider.Telephony$CarrierId: android.net.Uri CONTENT_URI>
<android.provider.Telephony$CarrierId: java.lang.String SPECIFIC_CARRIER_ID>
<android.provider.Telephony$CarrierId: java.lang.String SPECIFIC_CARRIER_ID_NAME>
android.provider.Telephony$Carriers
<android.provider.Telephony$Carriers: java.lang.String APN>
<android.provider.Telephony$Carriers: java.lang.String AUTH_TYPE>
<android.provider.Telephony$Carriers: java.lang.String BEARER>
<android.provider.Telephony$Carriers: java.lang.String CARRIER_ENABLED>
<android.provider.Telephony$Carriers: java.lang.String CARRIER_ID>
<android.provider.Telephony$Carriers: android.net.Uri CONTENT_URI>
<android.provider.Telephony$Carriers: java.lang.String CURRENT>
<android.provider.Telephony$Carriers: java.lang.String DEFAULT_SORT_ORDER>
<android.provider.Telephony$Carriers: java.lang.String MCC>
<android.provider.Telephony$Carriers: java.lang.String MMSC>
<android.provider.Telephony$Carriers: java.lang.String MMSPORT>
<android.provider.Telephony$Carriers: java.lang.String MMSPROXY>
<android.provider.Telephony$Carriers: java.lang.String MNC>
<android.provider.Telephony$Carriers: java.lang.String MVNO_MATCH_DATA>
<android.provider.Telephony$Carriers: java.lang.String MVNO_TYPE>
<android.provider.Telephony$Carriers: java.lang.String NAME>
<android.provider.Telephony$Carriers: java.lang.String NETWORK_TYPE_BITMASK>
<android.provider.Telephony$Carriers: java.lang.String NUMERIC>
<android.provider.Telephony$Carriers: java.lang.String PASSWORD>
<android.provider.Telephony$Carriers: java.lang.String PORT>
<android.provider.Telephony$Carriers: java.lang.String PROTOCOL>
<android.provider.Telephony$Carriers: java.lang.String PROXY>
<android.provider.Telephony$Carriers: java.lang.String ROAMING_PROTOCOL>
<android.provider.Telephony$Carriers: java.lang.String SERVER>
<android.provider.Telephony$Carriers: android.net.Uri SIM_APN_URI>
<android.provider.Telephony$Carriers: java.lang.String SUBSCRIPTION_ID>
<android.provider.Telephony$Carriers: java.lang.String TYPE>
<android.provider.Telephony$Carriers: java.lang.String USER>
android.provider.Telephony$Mms
<android.provider.Telephony$Mms: android.net.Uri CONTENT_URI>
<android.provider.Telephony$Mms: java.lang.String DEFAULT_SORT_ORDER>
<android.provider.Telephony$Mms: android.net.Uri REPORT_REQUEST_URI>
<android.provider.Telephony$Mms: android.net.Uri REPORT_STATUS_URI>
android.provider.Telephony$Mms$Addr
<android.provider.Telephony$Mms$Addr: android.net.Uri getAddrUriForMessage(java.lang.String)>
<android.provider.Telephony$Mms$Addr: java.lang.String ADDRESS>
<android.provider.Telephony$Mms$Addr: java.lang.String CHARSET>
<android.provider.Telephony$Mms$Addr: java.lang.String CONTACT_ID>
<android.provider.Telephony$Mms$Addr: java.lang.String MSG_ID>
<android.provider.Telephony$Mms$Addr: java.lang.String TYPE>
android.provider.Telephony$Mms$Draft
<android.provider.Telephony$Mms$Draft: android.net.Uri CONTENT_URI>
<android.provider.Telephony$Mms$Draft: java.lang.String DEFAULT_SORT_ORDER>
android.provider.Telephony$Mms$Inbox
<android.provider.Telephony$Mms$Inbox: android.net.Uri CONTENT_URI>
<android.provider.Telephony$Mms$Inbox: java.lang.String DEFAULT_SORT_ORDER>
android.provider.Telephony$Mms$Intents
<android.provider.Telephony$Mms$Intents: java.lang.String CONTENT_CHANGED_ACTION>
<android.provider.Telephony$Mms$Intents: java.lang.String DELETED_CONTENTS>
android.provider.Telephony$Mms$Outbox
<android.provider.Telephony$Mms$Outbox: android.net.Uri CONTENT_URI>
<android.provider.Telephony$Mms$Outbox: java.lang.String DEFAULT_SORT_ORDER>
android.provider.Telephony$Mms$Part
<android.provider.Telephony$Mms$Part: android.net.Uri getPartUriForMessage(java.lang.String)>
<android.provider.Telephony$Mms$Part: java.lang.String CHARSET>
<android.provider.Telephony$Mms$Part: java.lang.String CONTENT_DISPOSITION>
<android.provider.Telephony$Mms$Part: java.lang.String CONTENT_ID>
<android.provider.Telephony$Mms$Part: java.lang.String CONTENT_LOCATION>
<android.provider.Telephony$Mms$Part: java.lang.String CONTENT_TYPE>
<android.provider.Telephony$Mms$Part: android.net.Uri CONTENT_URI>
<android.provider.Telephony$Mms$Part: java.lang.String CT_START>
<android.provider.Telephony$Mms$Part: java.lang.String CT_TYPE>
<android.provider.Telephony$Mms$Part: java.lang.String FILENAME>
<android.provider.Telephony$Mms$Part: java.lang.String MSG_ID>
<android.provider.Telephony$Mms$Part: java.lang.String NAME>
<android.provider.Telephony$Mms$Part: java.lang.String SEQ>
<android.provider.Telephony$Mms$Part: java.lang.String TEXT>
<android.provider.Telephony$Mms$Part: java.lang.String _DATA>
android.provider.Telephony$Mms$Rate
<android.provider.Telephony$Mms$Rate: android.net.Uri CONTENT_URI>
<android.provider.Telephony$Mms$Rate: java.lang.String SENT_TIME>
android.provider.Telephony$Mms$Sent
<android.provider.Telephony$Mms$Sent: android.net.Uri CONTENT_URI>
<android.provider.Telephony$Mms$Sent: java.lang.String DEFAULT_SORT_ORDER>
android.provider.Telephony$MmsSms
<android.provider.Telephony$MmsSms: android.net.Uri CONTENT_CONVERSATIONS_URI>
<android.provider.Telephony$MmsSms: android.net.Uri CONTENT_DRAFT_URI>
<android.provider.Telephony$MmsSms: android.net.Uri CONTENT_FILTER_BYPHONE_URI>
<android.provider.Telephony$MmsSms: android.net.Uri CONTENT_LOCKED_URI>
<android.provider.Telephony$MmsSms: android.net.Uri CONTENT_UNDELIVERED_URI>
<android.provider.Telephony$MmsSms: android.net.Uri CONTENT_URI>
<android.provider.Telephony$MmsSms: int ERR_TYPE_GENERIC>
<android.provider.Telephony$MmsSms: int ERR_TYPE_GENERIC_PERMANENT>
<android.provider.Telephony$MmsSms: int ERR_TYPE_MMS_PROTO_PERMANENT>
<android.provider.Telephony$MmsSms: int ERR_TYPE_MMS_PROTO_TRANSIENT>
<android.provider.Telephony$MmsSms: int ERR_TYPE_SMS_PROTO_PERMANENT>
<android.provider.Telephony$MmsSms: int ERR_TYPE_SMS_PROTO_TRANSIENT>
<android.provider.Telephony$MmsSms: int ERR_TYPE_TRANSPORT_FAILURE>
<android.provider.Telephony$MmsSms: int MMS_PROTO>
<android.provider.Telephony$MmsSms: int NO_ERROR>
<android.provider.Telephony$MmsSms: android.net.Uri SEARCH_URI>
<android.provider.Telephony$MmsSms: int SMS_PROTO>
<android.provider.Telephony$MmsSms: java.lang.String TYPE_DISCRIMINATOR_COLUMN>
android.provider.Telephony$MmsSms$PendingMessages
<android.provider.Telephony$MmsSms$PendingMessages: android.net.Uri CONTENT_URI>
<android.provider.Telephony$MmsSms$PendingMessages: java.lang.String DUE_TIME>
<android.provider.Telephony$MmsSms$PendingMessages: java.lang.String ERROR_CODE>
<android.provider.Telephony$MmsSms$PendingMessages: java.lang.String ERROR_TYPE>
<android.provider.Telephony$MmsSms$PendingMessages: java.lang.String LAST_TRY>
<android.provider.Telephony$MmsSms$PendingMessages: java.lang.String MSG_ID>
<android.provider.Telephony$MmsSms$PendingMessages: java.lang.String MSG_TYPE>
<android.provider.Telephony$MmsSms$PendingMessages: java.lang.String PROTO_TYPE>
<android.provider.Telephony$MmsSms$PendingMessages: java.lang.String RETRY_INDEX>
<android.provider.Telephony$MmsSms$PendingMessages: java.lang.String SUBSCRIPTION_ID>
android.provider.Telephony$ServiceStateTable
<android.provider.Telephony$ServiceStateTable: android.net.Uri getUriForSubscriptionId(int)>
<android.provider.Telephony$ServiceStateTable: android.net.Uri getUriForSubscriptionIdAndField(int,java.lang.String)>
<android.provider.Telephony$ServiceStateTable: java.lang.String AUTHORITY>
<android.provider.Telephony$ServiceStateTable: android.net.Uri CONTENT_URI>
<android.provider.Telephony$ServiceStateTable: java.lang.String DATA_NETWORK_TYPE>
<android.provider.Telephony$ServiceStateTable: java.lang.String DATA_REG_STATE>
<android.provider.Telephony$ServiceStateTable: java.lang.String DUPLEX_MODE>
<android.provider.Telephony$ServiceStateTable: java.lang.String IS_MANUAL_NETWORK_SELECTION>
<android.provider.Telephony$ServiceStateTable: java.lang.String VOICE_OPERATOR_NUMERIC>
<android.provider.Telephony$ServiceStateTable: java.lang.String VOICE_REG_STATE>
android.provider.Telephony$Sms
<android.provider.Telephony$Sms: java.lang.String getDefaultSmsPackage(android.content.Context)>
<android.provider.Telephony$Sms: android.net.Uri CONTENT_URI>
<android.provider.Telephony$Sms: java.lang.String DEFAULT_SORT_ORDER>
android.provider.Telephony$Sms$Conversations
<android.provider.Telephony$Sms$Conversations: android.net.Uri CONTENT_URI>
<android.provider.Telephony$Sms$Conversations: java.lang.String DEFAULT_SORT_ORDER>
<android.provider.Telephony$Sms$Conversations: java.lang.String MESSAGE_COUNT>
<android.provider.Telephony$Sms$Conversations: java.lang.String SNIPPET>
android.provider.Telephony$Sms$Draft
<android.provider.Telephony$Sms$Draft: android.net.Uri CONTENT_URI>
<android.provider.Telephony$Sms$Draft: java.lang.String DEFAULT_SORT_ORDER>
android.provider.Telephony$Sms$Inbox
<android.provider.Telephony$Sms$Inbox: android.net.Uri CONTENT_URI>
<android.provider.Telephony$Sms$Inbox: java.lang.String DEFAULT_SORT_ORDER>
android.provider.Telephony$Sms$Intents
<android.provider.Telephony$Sms$Intents: android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)>
<android.provider.Telephony$Sms$Intents: java.lang.String ACTION_CHANGE_DEFAULT>
<android.provider.Telephony$Sms$Intents: java.lang.String ACTION_DEFAULT_SMS_PACKAGE_CHANGED>
<android.provider.Telephony$Sms$Intents: java.lang.String ACTION_EXTERNAL_PROVIDER_CHANGE>
<android.provider.Telephony$Sms$Intents: java.lang.String DATA_SMS_RECEIVED_ACTION>
<android.provider.Telephony$Sms$Intents: java.lang.String EXTRA_IS_DEFAULT_SMS_APP>
<android.provider.Telephony$Sms$Intents: java.lang.String EXTRA_PACKAGE_NAME>
<android.provider.Telephony$Sms$Intents: int RESULT_SMS_DATABASE_ERROR>
<android.provider.Telephony$Sms$Intents: int RESULT_SMS_DISPATCH_FAILURE>
<android.provider.Telephony$Sms$Intents: int RESULT_SMS_DUPLICATED>
<android.provider.Telephony$Sms$Intents: int RESULT_SMS_GENERIC_ERROR>
<android.provider.Telephony$Sms$Intents: int RESULT_SMS_HANDLED>
<android.provider.Telephony$Sms$Intents: int RESULT_SMS_INVALID_URI>
<android.provider.Telephony$Sms$Intents: int RESULT_SMS_NULL_MESSAGE>
<android.provider.Telephony$Sms$Intents: int RESULT_SMS_NULL_PDU>
<android.provider.Telephony$Sms$Intents: int RESULT_SMS_OUT_OF_MEMORY>
<android.provider.Telephony$Sms$Intents: int RESULT_SMS_RECEIVED_WHILE_ENCRYPTED>
<android.provider.Telephony$Sms$Intents: int RESULT_SMS_UNSUPPORTED>
<android.provider.Telephony$Sms$Intents: java.lang.String SECRET_CODE_ACTION>
<android.provider.Telephony$Sms$Intents: java.lang.String SIM_FULL_ACTION>
<android.provider.Telephony$Sms$Intents: java.lang.String SMS_CB_RECEIVED_ACTION>
<android.provider.Telephony$Sms$Intents: java.lang.String SMS_DELIVER_ACTION>
<android.provider.Telephony$Sms$Intents: java.lang.String SMS_RECEIVED_ACTION>
<android.provider.Telephony$Sms$Intents: java.lang.String SMS_REJECTED_ACTION>
<android.provider.Telephony$Sms$Intents: java.lang.String SMS_SERVICE_CATEGORY_PROGRAM_DATA_RECEIVED_ACTION>
<android.provider.Telephony$Sms$Intents: java.lang.String WAP_PUSH_DELIVER_ACTION>
<android.provider.Telephony$Sms$Intents: java.lang.String WAP_PUSH_RECEIVED_ACTION>
android.provider.Telephony$Sms$Outbox
<android.provider.Telephony$Sms$Outbox: android.net.Uri CONTENT_URI>
<android.provider.Telephony$Sms$Outbox: java.lang.String DEFAULT_SORT_ORDER>
android.provider.Telephony$Sms$Sent
<android.provider.Telephony$Sms$Sent: android.net.Uri CONTENT_URI>
<android.provider.Telephony$Sms$Sent: java.lang.String DEFAULT_SORT_ORDER>
android.provider.Telephony$TextBasedSmsColumns
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String ADDRESS>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String BODY>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String CREATOR>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String DATE>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String DATE_SENT>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String ERROR_CODE>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String LOCKED>
<android.provider.Telephony$TextBasedSmsColumns: int MESSAGE_TYPE_ALL>
<android.provider.Telephony$TextBasedSmsColumns: int MESSAGE_TYPE_DRAFT>
<android.provider.Telephony$TextBasedSmsColumns: int MESSAGE_TYPE_FAILED>
<android.provider.Telephony$TextBasedSmsColumns: int MESSAGE_TYPE_INBOX>
<android.provider.Telephony$TextBasedSmsColumns: int MESSAGE_TYPE_OUTBOX>
<android.provider.Telephony$TextBasedSmsColumns: int MESSAGE_TYPE_QUEUED>
<android.provider.Telephony$TextBasedSmsColumns: int MESSAGE_TYPE_SENT>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String PERSON>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String PROTOCOL>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String READ>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String REPLY_PATH_PRESENT>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String SEEN>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String SERVICE_CENTER>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String STATUS>
<android.provider.Telephony$TextBasedSmsColumns: int STATUS_COMPLETE>
<android.provider.Telephony$TextBasedSmsColumns: int STATUS_FAILED>
<android.provider.Telephony$TextBasedSmsColumns: int STATUS_NONE>
<android.provider.Telephony$TextBasedSmsColumns: int STATUS_PENDING>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String SUBJECT>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String SUBSCRIPTION_ID>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String THREAD_ID>
<android.provider.Telephony$TextBasedSmsColumns: java.lang.String TYPE>
android.provider.Telephony$Threads
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.lang.String)>
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.util.Set)>
<android.provider.Telephony$Threads: int BROADCAST_THREAD>
<android.provider.Telephony$Threads: int COMMON_THREAD>
<android.provider.Telephony$Threads: android.net.Uri CONTENT_URI>
<android.provider.Telephony$Threads: android.net.Uri OBSOLETE_THREADS_URI>
android.provider.Telephony$ThreadsColumns
<android.provider.Telephony$ThreadsColumns: java.lang.String ARCHIVED>
<android.provider.Telephony$ThreadsColumns: java.lang.String DATE>
<android.provider.Telephony$ThreadsColumns: java.lang.String ERROR>
<android.provider.Telephony$ThreadsColumns: java.lang.String HAS_ATTACHMENT>
<android.provider.Telephony$ThreadsColumns: java.lang.String MESSAGE_COUNT>
<android.provider.Telephony$ThreadsColumns: java.lang.String READ>
<android.provider.Telephony$ThreadsColumns: java.lang.String RECIPIENT_IDS>
<android.provider.Telephony$ThreadsColumns: java.lang.String SNIPPET>
<android.provider.Telephony$ThreadsColumns: java.lang.String SNIPPET_CHARSET>
<android.provider.Telephony$ThreadsColumns: java.lang.String TYPE>
android.provider.UserDictionary
<android.provider.UserDictionary: void <init>()>
<android.provider.UserDictionary: java.lang.String AUTHORITY>
<android.provider.UserDictionary: android.net.Uri CONTENT_URI>
android.provider.UserDictionary$Words
<android.provider.UserDictionary$Words: void <init>()>
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)>
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)>
<android.provider.UserDictionary$Words: java.lang.String APP_ID>
<android.provider.UserDictionary$Words: java.lang.String CONTENT_ITEM_TYPE>
<android.provider.UserDictionary$Words: java.lang.String CONTENT_TYPE>
<android.provider.UserDictionary$Words: android.net.Uri CONTENT_URI>
<android.provider.UserDictionary$Words: java.lang.String DEFAULT_SORT_ORDER>
<android.provider.UserDictionary$Words: java.lang.String FREQUENCY>
<android.provider.UserDictionary$Words: java.lang.String LOCALE>
<android.provider.UserDictionary$Words: int LOCALE_TYPE_ALL>
<android.provider.UserDictionary$Words: int LOCALE_TYPE_CURRENT>
<android.provider.UserDictionary$Words: java.lang.String SHORTCUT>
<android.provider.UserDictionary$Words: java.lang.String WORD>
<android.provider.UserDictionary$Words: java.lang.String _ID>
android.provider.VoicemailContract
<android.provider.VoicemailContract: java.lang.String ACTION_FETCH_VOICEMAIL>
<android.provider.VoicemailContract: java.lang.String ACTION_NEW_VOICEMAIL>
<android.provider.VoicemailContract: java.lang.String ACTION_SYNC_VOICEMAIL>
<android.provider.VoicemailContract: java.lang.String AUTHORITY>
<android.provider.VoicemailContract: java.lang.String EXTRA_PHONE_ACCOUNT_HANDLE>
<android.provider.VoicemailContract: java.lang.String EXTRA_SELF_CHANGE>
<android.provider.VoicemailContract: java.lang.String PARAM_KEY_SOURCE_PACKAGE>
android.provider.VoicemailContract$Status
<android.provider.VoicemailContract$Status: android.net.Uri buildSourceUri(java.lang.String)>
<android.provider.VoicemailContract$Status: java.lang.String CONFIGURATION_STATE>
<android.provider.VoicemailContract$Status: int CONFIGURATION_STATE_CAN_BE_CONFIGURED>
<android.provider.VoicemailContract$Status: int CONFIGURATION_STATE_CONFIGURING>
<android.provider.VoicemailContract$Status: int CONFIGURATION_STATE_DISABLED>
<android.provider.VoicemailContract$Status: int CONFIGURATION_STATE_FAILED>
<android.provider.VoicemailContract$Status: int CONFIGURATION_STATE_NOT_CONFIGURED>
<android.provider.VoicemailContract$Status: int CONFIGURATION_STATE_OK>
<android.provider.VoicemailContract$Status: android.net.Uri CONTENT_URI>
<android.provider.VoicemailContract$Status: java.lang.String DATA_CHANNEL_STATE>
<android.provider.VoicemailContract$Status: int DATA_CHANNEL_STATE_BAD_CONFIGURATION>
<android.provider.VoicemailContract$Status: int DATA_CHANNEL_STATE_COMMUNICATION_ERROR>
<android.provider.VoicemailContract$Status: int DATA_CHANNEL_STATE_NO_CONNECTION>
<android.provider.VoicemailContract$Status: int DATA_CHANNEL_STATE_NO_CONNECTION_CELLULAR_REQUIRED>
<android.provider.VoicemailContract$Status: int DATA_CHANNEL_STATE_OK>
<android.provider.VoicemailContract$Status: int DATA_CHANNEL_STATE_SERVER_CONNECTION_ERROR>
<android.provider.VoicemailContract$Status: int DATA_CHANNEL_STATE_SERVER_ERROR>
<android.provider.VoicemailContract$Status: java.lang.String DIR_TYPE>
<android.provider.VoicemailContract$Status: java.lang.String ITEM_TYPE>
<android.provider.VoicemailContract$Status: java.lang.String NOTIFICATION_CHANNEL_STATE>
<android.provider.VoicemailContract$Status: int NOTIFICATION_CHANNEL_STATE_MESSAGE_WAITING>
<android.provider.VoicemailContract$Status: int NOTIFICATION_CHANNEL_STATE_NO_CONNECTION>
<android.provider.VoicemailContract$Status: int NOTIFICATION_CHANNEL_STATE_OK>
<android.provider.VoicemailContract$Status: java.lang.String PHONE_ACCOUNT_COMPONENT_NAME>
<android.provider.VoicemailContract$Status: java.lang.String PHONE_ACCOUNT_ID>
<android.provider.VoicemailContract$Status: java.lang.String QUOTA_OCCUPIED>
<android.provider.VoicemailContract$Status: java.lang.String QUOTA_TOTAL>
<android.provider.VoicemailContract$Status: int QUOTA_UNAVAILABLE>
<android.provider.VoicemailContract$Status: java.lang.String SETTINGS_URI>
<android.provider.VoicemailContract$Status: java.lang.String SOURCE_PACKAGE>
<android.provider.VoicemailContract$Status: java.lang.String SOURCE_TYPE>
<android.provider.VoicemailContract$Status: java.lang.String VOICEMAIL_ACCESS_URI>
android.provider.VoicemailContract$Voicemails
<android.provider.VoicemailContract$Voicemails: android.net.Uri buildSourceUri(java.lang.String)>
<android.provider.VoicemailContract$Voicemails: java.lang.String ARCHIVED>
<android.provider.VoicemailContract$Voicemails: java.lang.String BACKED_UP>
<android.provider.VoicemailContract$Voicemails: android.net.Uri CONTENT_URI>
<android.provider.VoicemailContract$Voicemails: java.lang.String DATE>
<android.provider.VoicemailContract$Voicemails: java.lang.String DELETED>
<android.provider.VoicemailContract$Voicemails: java.lang.String DIRTY>
<android.provider.VoicemailContract$Voicemails: int DIRTY_RETAIN>
<android.provider.VoicemailContract$Voicemails: java.lang.String DIR_TYPE>
<android.provider.VoicemailContract$Voicemails: java.lang.String DURATION>
<android.provider.VoicemailContract$Voicemails: java.lang.String HAS_CONTENT>
<android.provider.VoicemailContract$Voicemails: java.lang.String IS_OMTP_VOICEMAIL>
<android.provider.VoicemailContract$Voicemails: java.lang.String IS_READ>
<android.provider.VoicemailContract$Voicemails: java.lang.String ITEM_TYPE>
<android.provider.VoicemailContract$Voicemails: java.lang.String LAST_MODIFIED>
<android.provider.VoicemailContract$Voicemails: java.lang.String MIME_TYPE>
<android.provider.VoicemailContract$Voicemails: java.lang.String NEW>
<android.provider.VoicemailContract$Voicemails: java.lang.String NUMBER>
<android.provider.VoicemailContract$Voicemails: java.lang.String PHONE_ACCOUNT_COMPONENT_NAME>
<android.provider.VoicemailContract$Voicemails: java.lang.String PHONE_ACCOUNT_ID>
<android.provider.VoicemailContract$Voicemails: java.lang.String RESTORED>
<android.provider.VoicemailContract$Voicemails: java.lang.String SOURCE_DATA>
<android.provider.VoicemailContract$Voicemails: java.lang.String SOURCE_PACKAGE>
<android.provider.VoicemailContract$Voicemails: java.lang.String TRANSCRIPTION>
android.renderscript.Allocation
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,java.lang.Object)>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,int[])>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,short[])>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,byte[])>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,float[])>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,android.renderscript.Allocation,int)>
<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,java.lang.Object)>
<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,int[])>
<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,short[])>
<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,byte[])>
<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,float[])>
<android.renderscript.Allocation: void copy1DRangeTo(int,int,java.lang.Object)>
<android.renderscript.Allocation: void copy1DRangeTo(int,int,int[])>
<android.renderscript.Allocation: void copy1DRangeTo(int,int,short[])>
<android.renderscript.Allocation: void copy1DRangeTo(int,int,byte[])>
<android.renderscript.Allocation: void copy1DRangeTo(int,int,float[])>
<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,java.lang.Object)>
<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,int[])>
<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,short[])>
<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,byte[])>
<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,float[])>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,java.lang.Object)>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,byte[])>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,short[])>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,int[])>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,float[])>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,android.renderscript.Allocation,int,int)>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,android.graphics.Bitmap)>
<android.renderscript.Allocation: void copy2DRangeTo(int,int,int,int,java.lang.Object)>
<android.renderscript.Allocation: void copy2DRangeTo(int,int,int,int,byte[])>
<android.renderscript.Allocation: void copy2DRangeTo(int,int,int,int,short[])>
<android.renderscript.Allocation: void copy2DRangeTo(int,int,int,int,int[])>
<android.renderscript.Allocation: void copy2DRangeTo(int,int,int,int,float[])>
<android.renderscript.Allocation: void copy3DRangeFrom(int,int,int,int,int,int,java.lang.Object)>
<android.renderscript.Allocation: void copy3DRangeFrom(int,int,int,int,int,int,android.renderscript.Allocation,int,int,int)>
<android.renderscript.Allocation: void copy3DRangeTo(int,int,int,int,int,int,java.lang.Object)>
<android.renderscript.Allocation: void copyFrom(android.renderscript.BaseObj[])>
<android.renderscript.Allocation: void copyFrom(java.lang.Object)>
<android.renderscript.Allocation: void copyFrom(int[])>
<android.renderscript.Allocation: void copyFrom(short[])>
<android.renderscript.Allocation: void copyFrom(byte[])>
<android.renderscript.Allocation: void copyFrom(float[])>
<android.renderscript.Allocation: void copyFrom(android.graphics.Bitmap)>
<android.renderscript.Allocation: void copyFrom(android.renderscript.Allocation)>
<android.renderscript.Allocation: void copyFromUnchecked(java.lang.Object)>
<android.renderscript.Allocation: void copyFromUnchecked(int[])>
<android.renderscript.Allocation: void copyFromUnchecked(short[])>
<android.renderscript.Allocation: void copyFromUnchecked(byte[])>
<android.renderscript.Allocation: void copyFromUnchecked(float[])>
<android.renderscript.Allocation: void copyTo(android.graphics.Bitmap)>
<android.renderscript.Allocation: void copyTo(java.lang.Object)>
<android.renderscript.Allocation: void copyTo(byte[])>
<android.renderscript.Allocation: void copyTo(short[])>
<android.renderscript.Allocation: void copyTo(int[])>
<android.renderscript.Allocation: void copyTo(float[])>
<android.renderscript.Allocation: android.renderscript.Allocation[] createAllocations(android.renderscript.RenderScript,android.renderscript.Type,int,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)>
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation$MipmapControl,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createFromString(android.renderscript.RenderScript,java.lang.String,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,android.renderscript.Allocation$MipmapControl,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type)>
<android.renderscript.Allocation: void generateMipmaps()>
<android.renderscript.Allocation: java.nio.ByteBuffer getByteBuffer()>
<android.renderscript.Allocation: int getBytesSize()>
<android.renderscript.Allocation: android.renderscript.Element getElement()>
<android.renderscript.Allocation: long getStride()>
<android.renderscript.Allocation: android.view.Surface getSurface()>
<android.renderscript.Allocation: long getTimeStamp()>
<android.renderscript.Allocation: android.renderscript.Type getType()>
<android.renderscript.Allocation: int getUsage()>
<android.renderscript.Allocation: void ioReceive()>
<android.renderscript.Allocation: void ioSend()>
<android.renderscript.Allocation: void resize(int)>
<android.renderscript.Allocation: void setAutoPadding(boolean)>
<android.renderscript.Allocation: void setFromFieldPacker(int,android.renderscript.FieldPacker)>
<android.renderscript.Allocation: void setFromFieldPacker(int,int,android.renderscript.FieldPacker)>
<android.renderscript.Allocation: void setFromFieldPacker(int,int,int,int,android.renderscript.FieldPacker)>
<android.renderscript.Allocation: void setOnBufferAvailableListener(android.renderscript.Allocation$OnBufferAvailableListener)>
<android.renderscript.Allocation: void setSurface(android.view.Surface)>
<android.renderscript.Allocation: void syncAll(int)>
<android.renderscript.Allocation: int USAGE_GRAPHICS_CONSTANTS>
<android.renderscript.Allocation: int USAGE_GRAPHICS_RENDER_TARGET>
<android.renderscript.Allocation: int USAGE_GRAPHICS_TEXTURE>
<android.renderscript.Allocation: int USAGE_GRAPHICS_VERTEX>
<android.renderscript.Allocation: int USAGE_IO_INPUT>
<android.renderscript.Allocation: int USAGE_IO_OUTPUT>
<android.renderscript.Allocation: int USAGE_SCRIPT>
<android.renderscript.Allocation: int USAGE_SHARED>
android.renderscript.Allocation$MipmapControl
<android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_FULL>
<android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>
<android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_ON_SYNC_TO_TEXTURE>
android.renderscript.Allocation$OnBufferAvailableListener
<android.renderscript.Allocation$OnBufferAvailableListener: void onBufferAvailable(android.renderscript.Allocation)>
android.renderscript.AllocationAdapter
<android.renderscript.AllocationAdapter: android.renderscript.AllocationAdapter create1D(android.renderscript.RenderScript,android.renderscript.Allocation)>
<android.renderscript.AllocationAdapter: android.renderscript.AllocationAdapter create2D(android.renderscript.RenderScript,android.renderscript.Allocation)>
<android.renderscript.AllocationAdapter: android.renderscript.AllocationAdapter createTyped(android.renderscript.RenderScript,android.renderscript.Allocation,android.renderscript.Type)>
<android.renderscript.AllocationAdapter: void resize(int)>
<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)>
<android.renderscript.AllocationAdapter: void setLOD(int)>
<android.renderscript.AllocationAdapter: void setX(int)>
<android.renderscript.AllocationAdapter: void setY(int)>
<android.renderscript.AllocationAdapter: void setZ(int)>
android.renderscript.BaseObj
<android.renderscript.BaseObj: void destroy()>
<android.renderscript.BaseObj: java.lang.String getName()>
<android.renderscript.BaseObj: void setName(java.lang.String)>
android.renderscript.Byte2
<android.renderscript.Byte2: void <init>()>
<android.renderscript.Byte2: void <init>(byte,byte)>
<android.renderscript.Byte2: byte x>
<android.renderscript.Byte2: byte y>
android.renderscript.Byte3
<android.renderscript.Byte3: void <init>()>
<android.renderscript.Byte3: void <init>(byte,byte,byte)>
<android.renderscript.Byte3: byte x>
<android.renderscript.Byte3: byte y>
<android.renderscript.Byte3: byte z>
android.renderscript.Byte4
<android.renderscript.Byte4: void <init>()>
<android.renderscript.Byte4: void <init>(byte,byte,byte,byte)>
<android.renderscript.Byte4: byte w>
<android.renderscript.Byte4: byte x>
<android.renderscript.Byte4: byte y>
<android.renderscript.Byte4: byte z>
android.renderscript.Double2
<android.renderscript.Double2: void <init>()>
<android.renderscript.Double2: void <init>(double,double)>
<android.renderscript.Double2: double x>
<android.renderscript.Double2: double y>
android.renderscript.Double3
<android.renderscript.Double3: void <init>()>
<android.renderscript.Double3: void <init>(double,double,double)>
<android.renderscript.Double3: double x>
<android.renderscript.Double3: double y>
<android.renderscript.Double3: double z>
android.renderscript.Double4
<android.renderscript.Double4: void <init>()>
<android.renderscript.Double4: void <init>(double,double,double,double)>
<android.renderscript.Double4: double w>
<android.renderscript.Double4: double x>
<android.renderscript.Double4: double y>
<android.renderscript.Double4: double z>
android.renderscript.Element
<android.renderscript.Element: android.renderscript.Element ALLOCATION(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element A_8(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element BOOLEAN(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element ELEMENT(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F16(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F16_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F16_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F16_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F32_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F32_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F64_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element F64_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element FONT(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I16(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I16_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I16_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I16_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I32(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I32_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I32_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I32_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I64(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I64_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I64_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I64_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I8(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I8_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I8_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element I8_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element MATRIX4X4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element MATRIX_2X2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element MATRIX_3X3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element MATRIX_4X4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element MESH(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element PROGRAM_FRAGMENT(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element PROGRAM_RASTER(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element PROGRAM_STORE(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element PROGRAM_VERTEX(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element RGBA_4444(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element RGBA_5551(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element RGBA_8888(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element RGB_565(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element RGB_888(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element SAMPLER(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element SCRIPT(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element TYPE(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U16(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U16_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U16_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U16_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U32(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U32_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U32_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U32_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U64(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U64_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U64_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U64_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U8(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U8_2(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U8_3(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element U8_4(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element YUV(android.renderscript.RenderScript)>
<android.renderscript.Element: android.renderscript.Element createPixel(android.renderscript.RenderScript,android.renderscript.Element$DataType,android.renderscript.Element$DataKind)>
<android.renderscript.Element: android.renderscript.Element createVector(android.renderscript.RenderScript,android.renderscript.Element$DataType,int)>
<android.renderscript.Element: int getBytesSize()>
<android.renderscript.Element: android.renderscript.Element$DataKind getDataKind()>
<android.renderscript.Element: android.renderscript.Element$DataType getDataType()>
<android.renderscript.Element: android.renderscript.Element getSubElement(int)>
<android.renderscript.Element: int getSubElementArraySize(int)>
<android.renderscript.Element: int getSubElementCount()>
<android.renderscript.Element: java.lang.String getSubElementName(int)>
<android.renderscript.Element: int getSubElementOffsetBytes(int)>
<android.renderscript.Element: int getVectorSize()>
<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>
<android.renderscript.Element: boolean isComplex()>
android.renderscript.Element$Builder
<android.renderscript.Element$Builder: void <init>(android.renderscript.RenderScript)>
<android.renderscript.Element$Builder: android.renderscript.Element$Builder add(android.renderscript.Element,java.lang.String,int)>
<android.renderscript.Element$Builder: android.renderscript.Element$Builder add(android.renderscript.Element,java.lang.String)>
<android.renderscript.Element$Builder: android.renderscript.Element create()>
android.renderscript.Element$DataKind
<android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_A>
<android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_DEPTH>
<android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_L>
<android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_LA>
<android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_RGB>
<android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_RGBA>
<android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_YUV>
<android.renderscript.Element$DataKind: android.renderscript.Element$DataKind USER>
android.renderscript.Element$DataType
<android.renderscript.Element$DataType: android.renderscript.Element$DataType BOOLEAN>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_16>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_32>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_64>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType MATRIX_2X2>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType MATRIX_3X3>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType MATRIX_4X4>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType NONE>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_ALLOCATION>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_ELEMENT>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_FONT>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_MESH>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_PROGRAM_FRAGMENT>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_PROGRAM_RASTER>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_PROGRAM_STORE>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_PROGRAM_VERTEX>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_SAMPLER>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_SCRIPT>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_TYPE>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_16>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_32>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_64>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_8>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_16>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_32>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_4_4_4_4>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_5_5_5_1>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_5_6_5>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_64>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_8>
android.renderscript.FieldPacker
<android.renderscript.FieldPacker: void <init>(int)>
<android.renderscript.FieldPacker: void <init>(byte[])>
<android.renderscript.FieldPacker: void addBoolean(boolean)>
<android.renderscript.FieldPacker: void addF32(float)>
<android.renderscript.FieldPacker: void addF32(android.renderscript.Float2)>
<android.renderscript.FieldPacker: void addF32(android.renderscript.Float3)>
<android.renderscript.FieldPacker: void addF32(android.renderscript.Float4)>
<android.renderscript.FieldPacker: void addF64(double)>
<android.renderscript.FieldPacker: void addF64(android.renderscript.Double2)>
<android.renderscript.FieldPacker: void addF64(android.renderscript.Double3)>
<android.renderscript.FieldPacker: void addF64(android.renderscript.Double4)>
<android.renderscript.FieldPacker: void addI16(short)>
<android.renderscript.FieldPacker: void addI16(android.renderscript.Short2)>
<android.renderscript.FieldPacker: void addI16(android.renderscript.Short3)>
<android.renderscript.FieldPacker: void addI16(android.renderscript.Short4)>
<android.renderscript.FieldPacker: void addI32(int)>
<android.renderscript.FieldPacker: void addI32(android.renderscript.Int2)>
<android.renderscript.FieldPacker: void addI32(android.renderscript.Int3)>
<android.renderscript.FieldPacker: void addI32(android.renderscript.Int4)>
<android.renderscript.FieldPacker: void addI64(long)>
<android.renderscript.FieldPacker: void addI64(android.renderscript.Long2)>
<android.renderscript.FieldPacker: void addI64(android.renderscript.Long3)>
<android.renderscript.FieldPacker: void addI64(android.renderscript.Long4)>
<android.renderscript.FieldPacker: void addI8(byte)>
<android.renderscript.FieldPacker: void addI8(android.renderscript.Byte2)>
<android.renderscript.FieldPacker: void addI8(android.renderscript.Byte3)>
<android.renderscript.FieldPacker: void addI8(android.renderscript.Byte4)>
<android.renderscript.FieldPacker: void addMatrix(android.renderscript.Matrix4f)>
<android.renderscript.FieldPacker: void addMatrix(android.renderscript.Matrix3f)>
<android.renderscript.FieldPacker: void addMatrix(android.renderscript.Matrix2f)>
<android.renderscript.FieldPacker: void addObj(android.renderscript.BaseObj)>
<android.renderscript.FieldPacker: void addU16(int)>
<android.renderscript.FieldPacker: void addU16(android.renderscript.Int2)>
<android.renderscript.FieldPacker: void addU16(android.renderscript.Int3)>
<android.renderscript.FieldPacker: void addU16(android.renderscript.Int4)>
<android.renderscript.FieldPacker: void addU32(long)>
<android.renderscript.FieldPacker: void addU32(android.renderscript.Long2)>
<android.renderscript.FieldPacker: void addU32(android.renderscript.Long3)>
<android.renderscript.FieldPacker: void addU32(android.renderscript.Long4)>
<android.renderscript.FieldPacker: void addU64(long)>
<android.renderscript.FieldPacker: void addU64(android.renderscript.Long2)>
<android.renderscript.FieldPacker: void addU64(android.renderscript.Long3)>
<android.renderscript.FieldPacker: void addU64(android.renderscript.Long4)>
<android.renderscript.FieldPacker: void addU8(short)>
<android.renderscript.FieldPacker: void addU8(android.renderscript.Short2)>
<android.renderscript.FieldPacker: void addU8(android.renderscript.Short3)>
<android.renderscript.FieldPacker: void addU8(android.renderscript.Short4)>
<android.renderscript.FieldPacker: void align(int)>
<android.renderscript.FieldPacker: byte[] getData()>
<android.renderscript.FieldPacker: void reset()>
<android.renderscript.FieldPacker: void reset(int)>
<android.renderscript.FieldPacker: void skip(int)>
<android.renderscript.FieldPacker: boolean subBoolean()>
<android.renderscript.FieldPacker: android.renderscript.Byte2 subByte2()>
<android.renderscript.FieldPacker: android.renderscript.Byte3 subByte3()>
<android.renderscript.FieldPacker: android.renderscript.Byte4 subByte4()>
<android.renderscript.FieldPacker: android.renderscript.Double2 subDouble2()>
<android.renderscript.FieldPacker: android.renderscript.Double3 subDouble3()>
<android.renderscript.FieldPacker: android.renderscript.Double4 subDouble4()>
<android.renderscript.FieldPacker: float subF32()>
<android.renderscript.FieldPacker: double subF64()>
<android.renderscript.FieldPacker: android.renderscript.Float2 subFloat2()>
<android.renderscript.FieldPacker: android.renderscript.Float3 subFloat3()>
<android.renderscript.FieldPacker: android.renderscript.Float4 subFloat4()>
<android.renderscript.FieldPacker: short subI16()>
<android.renderscript.FieldPacker: int subI32()>
<android.renderscript.FieldPacker: long subI64()>
<android.renderscript.FieldPacker: byte subI8()>
<android.renderscript.FieldPacker: android.renderscript.Int2 subInt2()>
<android.renderscript.FieldPacker: android.renderscript.Int3 subInt3()>
<android.renderscript.FieldPacker: android.renderscript.Int4 subInt4()>
<android.renderscript.FieldPacker: android.renderscript.Long2 subLong2()>
<android.renderscript.FieldPacker: android.renderscript.Long3 subLong3()>
<android.renderscript.FieldPacker: android.renderscript.Long4 subLong4()>
<android.renderscript.FieldPacker: android.renderscript.Matrix2f subMatrix2f()>
<android.renderscript.FieldPacker: android.renderscript.Matrix3f subMatrix3f()>
<android.renderscript.FieldPacker: android.renderscript.Matrix4f subMatrix4f()>
<android.renderscript.FieldPacker: android.renderscript.Short2 subShort2()>
<android.renderscript.FieldPacker: android.renderscript.Short3 subShort3()>
<android.renderscript.FieldPacker: android.renderscript.Short4 subShort4()>
<android.renderscript.FieldPacker: void subalign(int)>
android.renderscript.Float2
<android.renderscript.Float2: void <init>()>
<android.renderscript.Float2: void <init>(float,float)>
<android.renderscript.Float2: float x>
<android.renderscript.Float2: float y>
android.renderscript.Float3
<android.renderscript.Float3: void <init>()>
<android.renderscript.Float3: void <init>(float,float,float)>
<android.renderscript.Float3: float x>
<android.renderscript.Float3: float y>
<android.renderscript.Float3: float z>
android.renderscript.Float4
<android.renderscript.Float4: void <init>()>
<android.renderscript.Float4: void <init>(float,float,float,float)>
<android.renderscript.Float4: float w>
<android.renderscript.Float4: float x>
<android.renderscript.Float4: float y>
<android.renderscript.Float4: float z>
android.renderscript.Int2
<android.renderscript.Int2: void <init>()>
<android.renderscript.Int2: void <init>(int,int)>
<android.renderscript.Int2: int x>
<android.renderscript.Int2: int y>
android.renderscript.Int3
<android.renderscript.Int3: void <init>()>
<android.renderscript.Int3: void <init>(int,int,int)>
<android.renderscript.Int3: int x>
<android.renderscript.Int3: int y>
<android.renderscript.Int3: int z>
android.renderscript.Int4
<android.renderscript.Int4: void <init>()>
<android.renderscript.Int4: void <init>(int,int,int,int)>
<android.renderscript.Int4: int w>
<android.renderscript.Int4: int x>
<android.renderscript.Int4: int y>
<android.renderscript.Int4: int z>
android.renderscript.Long2
<android.renderscript.Long2: void <init>()>
<android.renderscript.Long2: void <init>(long,long)>
<android.renderscript.Long2: long x>
<android.renderscript.Long2: long y>
android.renderscript.Long3
<android.renderscript.Long3: void <init>()>
<android.renderscript.Long3: void <init>(long,long,long)>
<android.renderscript.Long3: long x>
<android.renderscript.Long3: long y>
<android.renderscript.Long3: long z>
android.renderscript.Long4
<android.renderscript.Long4: void <init>()>
<android.renderscript.Long4: void <init>(long,long,long,long)>
<android.renderscript.Long4: long w>
<android.renderscript.Long4: long x>
<android.renderscript.Long4: long y>
<android.renderscript.Long4: long z>
android.renderscript.Matrix2f
<android.renderscript.Matrix2f: void <init>()>
<android.renderscript.Matrix2f: void <init>(float[])>
<android.renderscript.Matrix2f: float get(int,int)>
<android.renderscript.Matrix2f: float[] getArray()>
<android.renderscript.Matrix2f: void load(android.renderscript.Matrix2f)>
<android.renderscript.Matrix2f: void loadIdentity()>
<android.renderscript.Matrix2f: void loadMultiply(android.renderscript.Matrix2f,android.renderscript.Matrix2f)>
<android.renderscript.Matrix2f: void loadRotate(float)>
<android.renderscript.Matrix2f: void loadScale(float,float)>
<android.renderscript.Matrix2f: void multiply(android.renderscript.Matrix2f)>
<android.renderscript.Matrix2f: void rotate(float)>
<android.renderscript.Matrix2f: void scale(float,float)>
<android.renderscript.Matrix2f: void set(int,int,float)>
<android.renderscript.Matrix2f: void transpose()>
android.renderscript.Matrix3f
<android.renderscript.Matrix3f: void <init>()>
<android.renderscript.Matrix3f: void <init>(float[])>
<android.renderscript.Matrix3f: float get(int,int)>
<android.renderscript.Matrix3f: float[] getArray()>
<android.renderscript.Matrix3f: void load(android.renderscript.Matrix3f)>
<android.renderscript.Matrix3f: void loadIdentity()>
<android.renderscript.Matrix3f: void loadMultiply(android.renderscript.Matrix3f,android.renderscript.Matrix3f)>
<android.renderscript.Matrix3f: void loadRotate(float,float,float,float)>
<android.renderscript.Matrix3f: void loadRotate(float)>
<android.renderscript.Matrix3f: void loadScale(float,float)>
<android.renderscript.Matrix3f: void loadScale(float,float,float)>
<android.renderscript.Matrix3f: void loadTranslate(float,float)>
<android.renderscript.Matrix3f: void multiply(android.renderscript.Matrix3f)>
<android.renderscript.Matrix3f: void rotate(float,float,float,float)>
<android.renderscript.Matrix3f: void rotate(float)>
<android.renderscript.Matrix3f: void scale(float,float)>
<android.renderscript.Matrix3f: void scale(float,float,float)>
<android.renderscript.Matrix3f: void set(int,int,float)>
<android.renderscript.Matrix3f: void translate(float,float)>
<android.renderscript.Matrix3f: void transpose()>
android.renderscript.Matrix4f
<android.renderscript.Matrix4f: void <init>()>
<android.renderscript.Matrix4f: void <init>(float[])>
<android.renderscript.Matrix4f: float get(int,int)>
<android.renderscript.Matrix4f: float[] getArray()>
<android.renderscript.Matrix4f: boolean inverse()>
<android.renderscript.Matrix4f: boolean inverseTranspose()>
<android.renderscript.Matrix4f: void load(android.renderscript.Matrix4f)>
<android.renderscript.Matrix4f: void loadFrustum(float,float,float,float,float,float)>
<android.renderscript.Matrix4f: void loadIdentity()>
<android.renderscript.Matrix4f: void loadMultiply(android.renderscript.Matrix4f,android.renderscript.Matrix4f)>
<android.renderscript.Matrix4f: void loadOrtho(float,float,float,float,float,float)>
<android.renderscript.Matrix4f: void loadOrthoWindow(int,int)>
<android.renderscript.Matrix4f: void loadPerspective(float,float,float,float)>
<android.renderscript.Matrix4f: void loadProjectionNormalized(int,int)>
<android.renderscript.Matrix4f: void loadRotate(float,float,float,float)>
<android.renderscript.Matrix4f: void loadScale(float,float,float)>
<android.renderscript.Matrix4f: void loadTranslate(float,float,float)>
<android.renderscript.Matrix4f: void multiply(android.renderscript.Matrix4f)>
<android.renderscript.Matrix4f: void rotate(float,float,float,float)>
<android.renderscript.Matrix4f: void scale(float,float,float)>
<android.renderscript.Matrix4f: void set(int,int,float)>
<android.renderscript.Matrix4f: void translate(float,float,float)>
<android.renderscript.Matrix4f: void transpose()>
android.renderscript.RSDriverException
<android.renderscript.RSDriverException: void <init>(java.lang.String)>
android.renderscript.RSIllegalArgumentException
<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>
android.renderscript.RSInvalidStateException
<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>
android.renderscript.RSRuntimeException
<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>
android.renderscript.RenderScript
<android.renderscript.RenderScript: void contextDump()>
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context)>
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context,android.renderscript.RenderScript$ContextType)>
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context,android.renderscript.RenderScript$ContextType,int)>
<android.renderscript.RenderScript: android.renderscript.RenderScript createMultiContext(android.content.Context,android.renderscript.RenderScript$ContextType,int,int)>
<android.renderscript.RenderScript: void destroy()>
<android.renderscript.RenderScript: void finish()>
<android.renderscript.RenderScript: android.content.Context getApplicationContext()>
<android.renderscript.RenderScript: android.renderscript.RenderScript$RSErrorHandler getErrorHandler()>
<android.renderscript.RenderScript: android.renderscript.RenderScript$RSMessageHandler getMessageHandler()>
<android.renderscript.RenderScript: long getMinorVersion()>
<android.renderscript.RenderScript: void releaseAllContexts()>
<android.renderscript.RenderScript: void sendMessage(int,int[])>
<android.renderscript.RenderScript: void setErrorHandler(android.renderscript.RenderScript$RSErrorHandler)>
<android.renderscript.RenderScript: void setMessageHandler(android.renderscript.RenderScript$RSMessageHandler)>
<android.renderscript.RenderScript: void setPriority(android.renderscript.RenderScript$Priority)>
<android.renderscript.RenderScript: int CREATE_FLAG_LOW_LATENCY>
<android.renderscript.RenderScript: int CREATE_FLAG_LOW_POWER>
<android.renderscript.RenderScript: int CREATE_FLAG_NONE>
android.renderscript.RenderScript$ContextType
<android.renderscript.RenderScript$ContextType: android.renderscript.RenderScript$ContextType DEBUG>
<android.renderscript.RenderScript$ContextType: android.renderscript.RenderScript$ContextType NORMAL>
<android.renderscript.RenderScript$ContextType: android.renderscript.RenderScript$ContextType PROFILE>
android.renderscript.RenderScript$Priority
<android.renderscript.RenderScript$Priority: android.renderscript.RenderScript$Priority LOW>
<android.renderscript.RenderScript$Priority: android.renderscript.RenderScript$Priority NORMAL>
android.renderscript.RenderScript$RSErrorHandler
<android.renderscript.RenderScript$RSErrorHandler: void <init>()>
<android.renderscript.RenderScript$RSErrorHandler: void run()>
<android.renderscript.RenderScript$RSErrorHandler: java.lang.String mErrorMessage>
<android.renderscript.RenderScript$RSErrorHandler: int mErrorNum>
android.renderscript.RenderScript$RSMessageHandler
<android.renderscript.RenderScript$RSMessageHandler: void <init>()>
<android.renderscript.RenderScript$RSMessageHandler: void run()>
<android.renderscript.RenderScript$RSMessageHandler: int[] mData>
<android.renderscript.RenderScript$RSMessageHandler: int mID>
<android.renderscript.RenderScript$RSMessageHandler: int mLength>
android.renderscript.Sampler
<android.renderscript.Sampler: android.renderscript.Sampler CLAMP_LINEAR(android.renderscript.RenderScript)>
<android.renderscript.Sampler: android.renderscript.Sampler CLAMP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript)>
<android.renderscript.Sampler: android.renderscript.Sampler CLAMP_NEAREST(android.renderscript.RenderScript)>
<android.renderscript.Sampler: android.renderscript.Sampler MIRRORED_REPEAT_LINEAR(android.renderscript.RenderScript)>
<android.renderscript.Sampler: android.renderscript.Sampler MIRRORED_REPEAT_LINEAR_MIP_LINEAR(android.renderscript.RenderScript)>
<android.renderscript.Sampler: android.renderscript.Sampler MIRRORED_REPEAT_NEAREST(android.renderscript.RenderScript)>
<android.renderscript.Sampler: android.renderscript.Sampler WRAP_LINEAR(android.renderscript.RenderScript)>
<android.renderscript.Sampler: android.renderscript.Sampler WRAP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript)>
<android.renderscript.Sampler: android.renderscript.Sampler WRAP_NEAREST(android.renderscript.RenderScript)>
<android.renderscript.Sampler: float getAnisotropy()>
<android.renderscript.Sampler: android.renderscript.Sampler$Value getMagnification()>
<android.renderscript.Sampler: android.renderscript.Sampler$Value getMinification()>
<android.renderscript.Sampler: android.renderscript.Sampler$Value getWrapS()>
<android.renderscript.Sampler: android.renderscript.Sampler$Value getWrapT()>
android.renderscript.Sampler$Builder
<android.renderscript.Sampler$Builder: void <init>(android.renderscript.RenderScript)>
<android.renderscript.Sampler$Builder: android.renderscript.Sampler create()>
<android.renderscript.Sampler$Builder: void setAnisotropy(float)>
<android.renderscript.Sampler$Builder: void setMagnification(android.renderscript.Sampler$Value)>
<android.renderscript.Sampler$Builder: void setMinification(android.renderscript.Sampler$Value)>
<android.renderscript.Sampler$Builder: void setWrapS(android.renderscript.Sampler$Value)>
<android.renderscript.Sampler$Builder: void setWrapT(android.renderscript.Sampler$Value)>
android.renderscript.Sampler$Value
<android.renderscript.Sampler$Value: android.renderscript.Sampler$Value CLAMP>
<android.renderscript.Sampler$Value: android.renderscript.Sampler$Value LINEAR>
<android.renderscript.Sampler$Value: android.renderscript.Sampler$Value LINEAR_MIP_LINEAR>
<android.renderscript.Sampler$Value: android.renderscript.Sampler$Value LINEAR_MIP_NEAREST>
<android.renderscript.Sampler$Value: android.renderscript.Sampler$Value MIRRORED_REPEAT>
<android.renderscript.Sampler$Value: android.renderscript.Sampler$Value NEAREST>
<android.renderscript.Sampler$Value: android.renderscript.Sampler$Value WRAP>
android.renderscript.Script
<android.renderscript.Script: void bindAllocation(android.renderscript.Allocation,int)>
<android.renderscript.Script: android.renderscript.Script$FieldID createFieldID(int,android.renderscript.Element)>
<android.renderscript.Script: android.renderscript.Script$InvokeID createInvokeID(int)>
<android.renderscript.Script: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>
<android.renderscript.Script: void forEach(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.FieldPacker)>
<android.renderscript.Script: void forEach(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.FieldPacker,android.renderscript.Script$LaunchOptions)>
<android.renderscript.Script: void forEach(int,android.renderscript.Allocation[],android.renderscript.Allocation,android.renderscript.FieldPacker)>
<android.renderscript.Script: void forEach(int,android.renderscript.Allocation[],android.renderscript.Allocation,android.renderscript.FieldPacker,android.renderscript.Script$LaunchOptions)>
<android.renderscript.Script: boolean getVarB(int)>
<android.renderscript.Script: double getVarD(int)>
<android.renderscript.Script: float getVarF(int)>
<android.renderscript.Script: int getVarI(int)>
<android.renderscript.Script: long getVarJ(int)>
<android.renderscript.Script: void getVarV(int,android.renderscript.FieldPacker)>
<android.renderscript.Script: void invoke(int)>
<android.renderscript.Script: void invoke(int,android.renderscript.FieldPacker)>
<android.renderscript.Script: void reduce(int,android.renderscript.Allocation[],android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.Script: void setTimeZone(java.lang.String)>
<android.renderscript.Script: void setVar(int,float)>
<android.renderscript.Script: void setVar(int,double)>
<android.renderscript.Script: void setVar(int,int)>
<android.renderscript.Script: void setVar(int,long)>
<android.renderscript.Script: void setVar(int,boolean)>
<android.renderscript.Script: void setVar(int,android.renderscript.BaseObj)>
<android.renderscript.Script: void setVar(int,android.renderscript.FieldPacker)>
<android.renderscript.Script: void setVar(int,android.renderscript.FieldPacker,android.renderscript.Element,int[])>
android.renderscript.Script$Builder
android.renderscript.Script$FieldBase
<android.renderscript.Script$FieldBase: void <init>()>
<android.renderscript.Script$FieldBase: android.renderscript.Allocation getAllocation()>
<android.renderscript.Script$FieldBase: android.renderscript.Element getElement()>
<android.renderscript.Script$FieldBase: android.renderscript.Type getType()>
<android.renderscript.Script$FieldBase: void init(android.renderscript.RenderScript,int)>
<android.renderscript.Script$FieldBase: void init(android.renderscript.RenderScript,int,int)>
<android.renderscript.Script$FieldBase: void updateAllocation()>
<android.renderscript.Script$FieldBase: android.renderscript.Allocation mAllocation>
<android.renderscript.Script$FieldBase: android.renderscript.Element mElement>
android.renderscript.Script$FieldID
android.renderscript.Script$InvokeID
android.renderscript.Script$KernelID
android.renderscript.Script$LaunchOptions
<android.renderscript.Script$LaunchOptions: void <init>()>
<android.renderscript.Script$LaunchOptions: int getXEnd()>
<android.renderscript.Script$LaunchOptions: int getXStart()>
<android.renderscript.Script$LaunchOptions: int getYEnd()>
<android.renderscript.Script$LaunchOptions: int getYStart()>
<android.renderscript.Script$LaunchOptions: int getZEnd()>
<android.renderscript.Script$LaunchOptions: int getZStart()>
<android.renderscript.Script$LaunchOptions: android.renderscript.Script$LaunchOptions setX(int,int)>
<android.renderscript.Script$LaunchOptions: android.renderscript.Script$LaunchOptions setY(int,int)>
<android.renderscript.Script$LaunchOptions: android.renderscript.Script$LaunchOptions setZ(int,int)>
android.renderscript.ScriptC
<android.renderscript.ScriptC: void <init>(int,android.renderscript.RenderScript)>
<android.renderscript.ScriptC: void <init>(long,android.renderscript.RenderScript)>
<android.renderscript.ScriptC: void <init>(android.renderscript.RenderScript,android.content.res.Resources,int)>
<android.renderscript.ScriptC: void <init>(android.renderscript.RenderScript,java.lang.String,byte[],byte[])>
android.renderscript.ScriptGroup
<android.renderscript.ScriptGroup: java.lang.Object[] execute(java.lang.Object[])>
<android.renderscript.ScriptGroup: void execute()>
<android.renderscript.ScriptGroup: void setInput(android.renderscript.Script$KernelID,android.renderscript.Allocation)>
<android.renderscript.ScriptGroup: void setOutput(android.renderscript.Script$KernelID,android.renderscript.Allocation)>
android.renderscript.ScriptGroup$Binding
<android.renderscript.ScriptGroup$Binding: void <init>(android.renderscript.Script$FieldID,java.lang.Object)>
android.renderscript.ScriptGroup$Builder
<android.renderscript.ScriptGroup$Builder: void <init>(android.renderscript.RenderScript)>
<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Builder addConnection(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$FieldID)>
<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Builder addConnection(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$KernelID)>
<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Builder addKernel(android.renderscript.Script$KernelID)>
<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup create()>
android.renderscript.ScriptGroup$Builder2
<android.renderscript.ScriptGroup$Builder2: void <init>(android.renderscript.RenderScript)>
<android.renderscript.ScriptGroup$Builder2: android.renderscript.ScriptGroup$Input addInput()>
<android.renderscript.ScriptGroup$Builder2: android.renderscript.ScriptGroup$Closure addInvoke(android.renderscript.Script$InvokeID,java.lang.Object[])>
<android.renderscript.ScriptGroup$Builder2: android.renderscript.ScriptGroup$Closure addKernel(android.renderscript.Script$KernelID,android.renderscript.Type,java.lang.Object[])>
<android.renderscript.ScriptGroup$Builder2: android.renderscript.ScriptGroup create(java.lang.String,android.renderscript.ScriptGroup$Future[])>
android.renderscript.ScriptGroup$Closure
<android.renderscript.ScriptGroup$Closure: android.renderscript.ScriptGroup$Future getGlobal(android.renderscript.Script$FieldID)>
<android.renderscript.ScriptGroup$Closure: android.renderscript.ScriptGroup$Future getReturn()>
android.renderscript.ScriptGroup$Future
android.renderscript.ScriptGroup$Input
android.renderscript.ScriptIntrinsic
android.renderscript.ScriptIntrinsic3DLUT
<android.renderscript.ScriptIntrinsic3DLUT: android.renderscript.ScriptIntrinsic3DLUT create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsic3DLUT: void forEach(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsic3DLUT: void forEach(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsic3DLUT: android.renderscript.Script$KernelID getKernelID()>
<android.renderscript.ScriptIntrinsic3DLUT: void setLUT(android.renderscript.Allocation)>
android.renderscript.ScriptIntrinsicBLAS
<android.renderscript.ScriptIntrinsicBLAS: void BNNM(android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CGBMV(int,int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Float2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CGEMM(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CGEMV(int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Float2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CGERC(android.renderscript.Float2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CGERU(android.renderscript.Float2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHBMV(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Float2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CHEMM(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHEMV(int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Float2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CHER(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHER2(int,android.renderscript.Float2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHER2K(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,float,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHERK(int,int,float,android.renderscript.Allocation,float,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHPMV(int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Float2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CHPR(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CHPR2(int,android.renderscript.Float2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CSYMM(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CSYR2K(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CSYRK(int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Float2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CTBMV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CTBSV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CTPMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CTPSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CTRMM(int,int,int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CTRMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void CTRSM(int,int,int,int,android.renderscript.Float2,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void CTRSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DGBMV(int,int,int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DGEMM(int,int,double,android.renderscript.Allocation,android.renderscript.Allocation,double,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DGEMV(int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DGER(double,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DSBMV(int,int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DSPMV(int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DSPR(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DSPR2(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DSYMM(int,int,double,android.renderscript.Allocation,android.renderscript.Allocation,double,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DSYMV(int,double,android.renderscript.Allocation,android.renderscript.Allocation,int,double,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DSYR(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DSYR2(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DSYR2K(int,int,double,android.renderscript.Allocation,android.renderscript.Allocation,double,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DSYRK(int,int,double,android.renderscript.Allocation,double,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DTBMV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DTBSV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DTPMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DTPSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DTRMM(int,int,int,int,double,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DTRMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void DTRSM(int,int,int,int,double,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void DTRSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SGBMV(int,int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SGEMM(int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,float,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void SGEMV(int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SGER(float,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void SSBMV(int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SSPMV(int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SSPR(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void SSPR2(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void SSYMM(int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,float,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void SSYMV(int,float,android.renderscript.Allocation,android.renderscript.Allocation,int,float,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void SSYR(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void SSYR2(int,float,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void SSYR2K(int,int,float,android.renderscript.Allocation,android.renderscript.Allocation,float,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void SSYRK(int,int,float,android.renderscript.Allocation,float,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void STBMV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void STBSV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void STPMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void STPSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void STRMM(int,int,int,int,float,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void STRMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void STRSM(int,int,int,int,float,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void STRSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZGBMV(int,int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZGEMM(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZGEMV(int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZGERC(android.renderscript.Double2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZGERU(android.renderscript.Double2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHBMV(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHEMM(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHEMV(int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHER(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHER2(int,android.renderscript.Double2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHER2K(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,double,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHERK(int,int,double,android.renderscript.Allocation,double,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHPMV(int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Double2,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHPR(int,double,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZHPR2(int,android.renderscript.Double2,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZSYMM(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZSYR2K(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZSYRK(int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Double2,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTBMV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTBSV(int,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTPMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTPSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTRMM(int,int,int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTRMV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTRSM(int,int,int,int,android.renderscript.Double2,android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBLAS: void ZTRSV(int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>
<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.ScriptIntrinsicBLAS create(android.renderscript.RenderScript)>
<android.renderscript.ScriptIntrinsicBLAS: int CONJ_TRANSPOSE>
<android.renderscript.ScriptIntrinsicBLAS: int LEFT>
<android.renderscript.ScriptIntrinsicBLAS: int LOWER>
<android.renderscript.ScriptIntrinsicBLAS: int NON_UNIT>
<android.renderscript.ScriptIntrinsicBLAS: int NO_TRANSPOSE>
<android.renderscript.ScriptIntrinsicBLAS: int RIGHT>
<android.renderscript.ScriptIntrinsicBLAS: int TRANSPOSE>
<android.renderscript.ScriptIntrinsicBLAS: int UNIT>
<android.renderscript.ScriptIntrinsicBLAS: int UPPER>
android.renderscript.ScriptIntrinsicBlend
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.ScriptIntrinsicBlend create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicBlend: void forEachAdd(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachAdd(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachClear(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachClear(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDst(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDst(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstAtop(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstAtop(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstIn(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstIn(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstOut(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstOut(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstOver(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachDstOver(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachMultiply(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachMultiply(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrc(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrc(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcAtop(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcAtop(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcIn(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcIn(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOut(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOut(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOver(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOver(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSubtract(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachSubtract(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: void forEachXor(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlend: void forEachXor(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDAdd()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDClear()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDDst()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDDstAtop()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDDstIn()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDDstOut()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDDstOver()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDMultiply()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDSrc()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDSrcAtop()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDSrcIn()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDSrcOut()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDSrcOver()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDSubtract()>
<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDXor()>
android.renderscript.ScriptIntrinsicBlur
<android.renderscript.ScriptIntrinsicBlur: android.renderscript.ScriptIntrinsicBlur create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicBlur: void forEach(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlur: void forEach(android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicBlur: android.renderscript.Script$FieldID getFieldID_Input()>
<android.renderscript.ScriptIntrinsicBlur: android.renderscript.Script$KernelID getKernelID()>
<android.renderscript.ScriptIntrinsicBlur: void setInput(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicBlur: void setRadius(float)>
android.renderscript.ScriptIntrinsicColorMatrix
<android.renderscript.ScriptIntrinsicColorMatrix: android.renderscript.ScriptIntrinsicColorMatrix create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicColorMatrix: android.renderscript.ScriptIntrinsicColorMatrix create(android.renderscript.RenderScript)>
<android.renderscript.ScriptIntrinsicColorMatrix: void forEach(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicColorMatrix: void forEach(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicColorMatrix: android.renderscript.Script$KernelID getKernelID()>
<android.renderscript.ScriptIntrinsicColorMatrix: void setAdd(android.renderscript.Float4)>
<android.renderscript.ScriptIntrinsicColorMatrix: void setAdd(float,float,float,float)>
<android.renderscript.ScriptIntrinsicColorMatrix: void setColorMatrix(android.renderscript.Matrix4f)>
<android.renderscript.ScriptIntrinsicColorMatrix: void setColorMatrix(android.renderscript.Matrix3f)>
<android.renderscript.ScriptIntrinsicColorMatrix: void setGreyscale()>
<android.renderscript.ScriptIntrinsicColorMatrix: void setRGBtoYUV()>
<android.renderscript.ScriptIntrinsicColorMatrix: void setYUVtoRGB()>
android.renderscript.ScriptIntrinsicConvolve3x3
<android.renderscript.ScriptIntrinsicConvolve3x3: android.renderscript.ScriptIntrinsicConvolve3x3 create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicConvolve3x3: void forEach(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicConvolve3x3: void forEach(android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicConvolve3x3: android.renderscript.Script$FieldID getFieldID_Input()>
<android.renderscript.ScriptIntrinsicConvolve3x3: android.renderscript.Script$KernelID getKernelID()>
<android.renderscript.ScriptIntrinsicConvolve3x3: void setCoefficients(float[])>
<android.renderscript.ScriptIntrinsicConvolve3x3: void setInput(android.renderscript.Allocation)>
android.renderscript.ScriptIntrinsicConvolve5x5
<android.renderscript.ScriptIntrinsicConvolve5x5: android.renderscript.ScriptIntrinsicConvolve5x5 create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicConvolve5x5: void forEach(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicConvolve5x5: void forEach(android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicConvolve5x5: android.renderscript.Script$FieldID getFieldID_Input()>
<android.renderscript.ScriptIntrinsicConvolve5x5: android.renderscript.Script$KernelID getKernelID()>
<android.renderscript.ScriptIntrinsicConvolve5x5: void setCoefficients(float[])>
<android.renderscript.ScriptIntrinsicConvolve5x5: void setInput(android.renderscript.Allocation)>
android.renderscript.ScriptIntrinsicHistogram
<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.ScriptIntrinsicHistogram create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicHistogram: void forEach(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicHistogram: void forEach(android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicHistogram: void forEach_Dot(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicHistogram: void forEach_Dot(android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Script$FieldID getFieldID_Input()>
<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Script$KernelID getKernelID_Separate()>
<android.renderscript.ScriptIntrinsicHistogram: void setDotCoefficients(float,float,float,float)>
<android.renderscript.ScriptIntrinsicHistogram: void setOutput(android.renderscript.Allocation)>
android.renderscript.ScriptIntrinsicLUT
<android.renderscript.ScriptIntrinsicLUT: android.renderscript.ScriptIntrinsicLUT create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicLUT: void forEach(android.renderscript.Allocation,android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicLUT: void forEach(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicLUT: android.renderscript.Script$KernelID getKernelID()>
<android.renderscript.ScriptIntrinsicLUT: void setAlpha(int,int)>
<android.renderscript.ScriptIntrinsicLUT: void setBlue(int,int)>
<android.renderscript.ScriptIntrinsicLUT: void setGreen(int,int)>
<android.renderscript.ScriptIntrinsicLUT: void setRed(int,int)>
android.renderscript.ScriptIntrinsicResize
<android.renderscript.ScriptIntrinsicResize: android.renderscript.ScriptIntrinsicResize create(android.renderscript.RenderScript)>
<android.renderscript.ScriptIntrinsicResize: void forEach_bicubic(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicResize: void forEach_bicubic(android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.renderscript.ScriptIntrinsicResize: android.renderscript.Script$FieldID getFieldID_Input()>
<android.renderscript.ScriptIntrinsicResize: android.renderscript.Script$KernelID getKernelID_bicubic()>
<android.renderscript.ScriptIntrinsicResize: void setInput(android.renderscript.Allocation)>
android.renderscript.ScriptIntrinsicYuvToRGB
<android.renderscript.ScriptIntrinsicYuvToRGB: android.renderscript.ScriptIntrinsicYuvToRGB create(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.ScriptIntrinsicYuvToRGB: void forEach(android.renderscript.Allocation)>
<android.renderscript.ScriptIntrinsicYuvToRGB: android.renderscript.Script$FieldID getFieldID_Input()>
<android.renderscript.ScriptIntrinsicYuvToRGB: android.renderscript.Script$KernelID getKernelID()>
<android.renderscript.ScriptIntrinsicYuvToRGB: void setInput(android.renderscript.Allocation)>
android.renderscript.Short2
<android.renderscript.Short2: void <init>()>
<android.renderscript.Short2: void <init>(short,short)>
<android.renderscript.Short2: short x>
<android.renderscript.Short2: short y>
android.renderscript.Short3
<android.renderscript.Short3: void <init>()>
<android.renderscript.Short3: void <init>(short,short,short)>
<android.renderscript.Short3: short x>
<android.renderscript.Short3: short y>
<android.renderscript.Short3: short z>
android.renderscript.Short4
<android.renderscript.Short4: void <init>()>
<android.renderscript.Short4: void <init>(short,short,short,short)>
<android.renderscript.Short4: short w>
<android.renderscript.Short4: short x>
<android.renderscript.Short4: short y>
<android.renderscript.Short4: short z>
android.renderscript.Type
<android.renderscript.Type: android.renderscript.Type createX(android.renderscript.RenderScript,android.renderscript.Element,int)>
<android.renderscript.Type: android.renderscript.Type createXY(android.renderscript.RenderScript,android.renderscript.Element,int,int)>
<android.renderscript.Type: android.renderscript.Type createXYZ(android.renderscript.RenderScript,android.renderscript.Element,int,int,int)>
<android.renderscript.Type: int getCount()>
<android.renderscript.Type: android.renderscript.Element getElement()>
<android.renderscript.Type: int getX()>
<android.renderscript.Type: int getY()>
<android.renderscript.Type: int getYuv()>
<android.renderscript.Type: int getZ()>
<android.renderscript.Type: boolean hasFaces()>
<android.renderscript.Type: boolean hasMipmaps()>
android.renderscript.Type$Builder
<android.renderscript.Type$Builder: void <init>(android.renderscript.RenderScript,android.renderscript.Element)>
<android.renderscript.Type$Builder: android.renderscript.Type create()>
<android.renderscript.Type$Builder: android.renderscript.Type$Builder setFaces(boolean)>
<android.renderscript.Type$Builder: android.renderscript.Type$Builder setMipmaps(boolean)>
<android.renderscript.Type$Builder: android.renderscript.Type$Builder setX(int)>
<android.renderscript.Type$Builder: android.renderscript.Type$Builder setY(int)>
<android.renderscript.Type$Builder: android.renderscript.Type$Builder setYuvFormat(int)>
<android.renderscript.Type$Builder: android.renderscript.Type$Builder setZ(int)>
android.renderscript.Type$CubemapFace
<android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace NEGATIVE_X>
<android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace NEGATIVE_Y>
<android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace NEGATIVE_Z>
<android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace POSITIVE_X>
<android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace POSITIVE_Y>
<android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace POSITIVE_Z>
<android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace POSITVE_X>
<android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace POSITVE_Y>
<android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace POSITVE_Z>
android.sax.Element
<android.sax.Element: android.sax.Element getChild(java.lang.String)>
<android.sax.Element: android.sax.Element getChild(java.lang.String,java.lang.String)>
<android.sax.Element: android.sax.Element requireChild(java.lang.String)>
<android.sax.Element: android.sax.Element requireChild(java.lang.String,java.lang.String)>
<android.sax.Element: void setElementListener(android.sax.ElementListener)>
<android.sax.Element: void setEndElementListener(android.sax.EndElementListener)>
<android.sax.Element: void setEndTextElementListener(android.sax.EndTextElementListener)>
<android.sax.Element: void setStartElementListener(android.sax.StartElementListener)>
<android.sax.Element: void setTextElementListener(android.sax.TextElementListener)>
android.sax.ElementListener
android.sax.EndElementListener
<android.sax.EndElementListener: void end()>
android.sax.EndTextElementListener
<android.sax.EndTextElementListener: void end(java.lang.String)>
android.sax.RootElement
<android.sax.RootElement: void <init>(java.lang.String,java.lang.String)>
<android.sax.RootElement: void <init>(java.lang.String)>
<android.sax.RootElement: org.xml.sax.ContentHandler getContentHandler()>
android.sax.StartElementListener
<android.sax.StartElementListener: void start(org.xml.sax.Attributes)>
android.sax.TextElementListener
android.se.omapi.Channel
<android.se.omapi.Channel: void close()>
<android.se.omapi.Channel: byte[] getSelectResponse()>
<android.se.omapi.Channel: android.se.omapi.Session getSession()>
<android.se.omapi.Channel: boolean isBasicChannel()>
<android.se.omapi.Channel: boolean isOpen()>
<android.se.omapi.Channel: boolean selectNext()>
<android.se.omapi.Channel: byte[] transmit(byte[])>
android.se.omapi.Reader
<android.se.omapi.Reader: void closeSessions()>
<android.se.omapi.Reader: java.lang.String getName()>
<android.se.omapi.Reader: android.se.omapi.SEService getSEService()>
<android.se.omapi.Reader: boolean isSecureElementPresent()>
<android.se.omapi.Reader: android.se.omapi.Session openSession()>
android.se.omapi.SEService
<android.se.omapi.SEService: void <init>(android.content.Context,java.util.concurrent.Executor,android.se.omapi.SEService$OnConnectedListener)>
<android.se.omapi.SEService: android.se.omapi.Reader[] getReaders()>
<android.se.omapi.SEService: android.se.omapi.Reader getUiccReader(int)>
<android.se.omapi.SEService: java.lang.String getVersion()>
<android.se.omapi.SEService: boolean isConnected()>
<android.se.omapi.SEService: void shutdown()>
<android.se.omapi.SEService: java.lang.String ACTION_SECURE_ELEMENT_STATE_CHANGED>
<android.se.omapi.SEService: java.lang.String EXTRA_READER_NAME>
<android.se.omapi.SEService: java.lang.String EXTRA_READER_STATE>
android.se.omapi.SEService$OnConnectedListener
<android.se.omapi.SEService$OnConnectedListener: void onConnected()>
android.se.omapi.Session
<android.se.omapi.Session: void close()>
<android.se.omapi.Session: void closeChannels()>
<android.se.omapi.Session: byte[] getATR()>
<android.se.omapi.Session: android.se.omapi.Reader getReader()>
<android.se.omapi.Session: boolean isClosed()>
<android.se.omapi.Session: android.se.omapi.Channel openBasicChannel(byte[],byte)>
<android.se.omapi.Session: android.se.omapi.Channel openBasicChannel(byte[])>
<android.se.omapi.Session: android.se.omapi.Channel openLogicalChannel(byte[],byte)>
<android.se.omapi.Session: android.se.omapi.Channel openLogicalChannel(byte[])>
android.security.AppUriAuthenticationPolicy
<android.security.AppUriAuthenticationPolicy: int describeContents()>
<android.security.AppUriAuthenticationPolicy: java.util.Map getAppAndUriMappings()>
<android.security.AppUriAuthenticationPolicy: void writeToParcel(android.os.Parcel,int)>
<android.security.AppUriAuthenticationPolicy: android.os.Parcelable$Creator CREATOR>
android.security.AppUriAuthenticationPolicy$Builder
<android.security.AppUriAuthenticationPolicy$Builder: void <init>()>
<android.security.AppUriAuthenticationPolicy$Builder: android.security.AppUriAuthenticationPolicy$Builder addAppAndUriMapping(java.lang.String,android.net.Uri,java.lang.String)>
<android.security.AppUriAuthenticationPolicy$Builder: android.security.AppUriAuthenticationPolicy build()>
android.security.AttestedKeyPair
<android.security.AttestedKeyPair: void <init>(java.security.KeyPair,java.util.List)>
<android.security.AttestedKeyPair: java.util.List getAttestationRecord()>
<android.security.AttestedKeyPair: java.security.KeyPair getKeyPair()>
android.security.ConfirmationAlreadyPresentingException
<android.security.ConfirmationAlreadyPresentingException: void <init>()>
<android.security.ConfirmationAlreadyPresentingException: void <init>(java.lang.String)>
android.security.ConfirmationCallback
<android.security.ConfirmationCallback: void <init>()>
<android.security.ConfirmationCallback: void onCanceled()>
<android.security.ConfirmationCallback: void onConfirmed(byte[])>
<android.security.ConfirmationCallback: void onDismissed()>
<android.security.ConfirmationCallback: void onError(java.lang.Throwable)>
android.security.ConfirmationNotAvailableException
<android.security.ConfirmationNotAvailableException: void <init>()>
<android.security.ConfirmationNotAvailableException: void <init>(java.lang.String)>
android.security.ConfirmationPrompt
<android.security.ConfirmationPrompt: void cancelPrompt()>
<android.security.ConfirmationPrompt: boolean isSupported(android.content.Context)>
<android.security.ConfirmationPrompt: void presentPrompt(java.util.concurrent.Executor,android.security.ConfirmationCallback)>
android.security.ConfirmationPrompt$Builder
<android.security.ConfirmationPrompt$Builder: void <init>(android.content.Context)>
<android.security.ConfirmationPrompt$Builder: android.security.ConfirmationPrompt build()>
<android.security.ConfirmationPrompt$Builder: android.security.ConfirmationPrompt$Builder setExtraData(byte[])>
<android.security.ConfirmationPrompt$Builder: android.security.ConfirmationPrompt$Builder setPromptText(java.lang.CharSequence)>
android.security.FileIntegrityManager
<android.security.FileIntegrityManager: boolean isApkVeritySupported()>
<android.security.FileIntegrityManager: boolean isAppSourceCertificateTrusted(java.security.cert.X509Certificate)>
android.security.KeyChain
<android.security.KeyChain: void <init>()>
<android.security.KeyChain: void choosePrivateKeyAlias(android.app.Activity,android.security.KeyChainAliasCallback,java.lang.String[],java.security.Principal[],java.lang.String,int,java.lang.String)>
<android.security.KeyChain: void choosePrivateKeyAlias(android.app.Activity,android.security.KeyChainAliasCallback,java.lang.String[],java.security.Principal[],android.net.Uri,java.lang.String)>
<android.security.KeyChain: android.content.Intent createInstallIntent()>
<android.security.KeyChain: android.content.Intent createManageCredentialsIntent(android.security.AppUriAuthenticationPolicy)>
<android.security.KeyChain: java.security.cert.X509Certificate[] getCertificateChain(android.content.Context,java.lang.String)>
<android.security.KeyChain: android.security.AppUriAuthenticationPolicy getCredentialManagementAppPolicy(android.content.Context)>
<android.security.KeyChain: java.security.PrivateKey getPrivateKey(android.content.Context,java.lang.String)>
<android.security.KeyChain: boolean isBoundKeyAlgorithm(java.lang.String)>
<android.security.KeyChain: boolean isCredentialManagementApp(android.content.Context)>
<android.security.KeyChain: boolean isKeyAlgorithmSupported(java.lang.String)>
<android.security.KeyChain: boolean removeCredentialManagementApp(android.content.Context)>
<android.security.KeyChain: java.lang.String ACTION_KEYCHAIN_CHANGED>
<android.security.KeyChain: java.lang.String ACTION_KEY_ACCESS_CHANGED>
<android.security.KeyChain: java.lang.String ACTION_STORAGE_CHANGED>
<android.security.KeyChain: java.lang.String ACTION_TRUST_STORE_CHANGED>
<android.security.KeyChain: java.lang.String EXTRA_CERTIFICATE>
<android.security.KeyChain: java.lang.String EXTRA_KEY_ACCESSIBLE>
<android.security.KeyChain: java.lang.String EXTRA_KEY_ALIAS>
<android.security.KeyChain: java.lang.String EXTRA_NAME>
<android.security.KeyChain: java.lang.String EXTRA_PKCS12>
<android.security.KeyChain: java.lang.String KEY_ALIAS_SELECTION_DENIED>
android.security.KeyChainAliasCallback
<android.security.KeyChainAliasCallback: void alias(java.lang.String)>
android.security.KeyChainException
<android.security.KeyChainException: void <init>()>
<android.security.KeyChainException: void <init>(java.lang.String)>
<android.security.KeyChainException: void <init>(java.lang.String,java.lang.Throwable)>
<android.security.KeyChainException: void <init>(java.lang.Throwable)>
android.security.KeyPairGeneratorSpec
<android.security.KeyPairGeneratorSpec: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()>
<android.security.KeyPairGeneratorSpec: android.content.Context getContext()>
<android.security.KeyPairGeneratorSpec: java.util.Date getEndDate()>
<android.security.KeyPairGeneratorSpec: int getKeySize()>
<android.security.KeyPairGeneratorSpec: java.lang.String getKeyType()>
<android.security.KeyPairGeneratorSpec: java.lang.String getKeystoreAlias()>
<android.security.KeyPairGeneratorSpec: java.math.BigInteger getSerialNumber()>
<android.security.KeyPairGeneratorSpec: java.util.Date getStartDate()>
<android.security.KeyPairGeneratorSpec: javax.security.auth.x500.X500Principal getSubjectDN()>
<android.security.KeyPairGeneratorSpec: boolean isEncryptionRequired()>
android.security.KeyPairGeneratorSpec$Builder
<android.security.KeyPairGeneratorSpec$Builder: void <init>(android.content.Context)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec build()>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setAlgorithmParameterSpec(java.security.spec.AlgorithmParameterSpec)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setAlias(java.lang.String)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setEncryptionRequired()>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setEndDate(java.util.Date)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setKeySize(int)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setKeyType(java.lang.String)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setSerialNumber(java.math.BigInteger)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setStartDate(java.util.Date)>
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setSubject(javax.security.auth.x500.X500Principal)>
android.security.KeyStoreException
<android.security.KeyStoreException: int getNumericErrorCode()>
<android.security.KeyStoreException: int getRetryPolicy()>
<android.security.KeyStoreException: boolean isSystemError()>
<android.security.KeyStoreException: boolean isTransientFailure()>
<android.security.KeyStoreException: boolean requiresUserAuthentication()>
<android.security.KeyStoreException: int ERROR_ATTESTATION_CHALLENGE_TOO_LARGE>
<android.security.KeyStoreException: int ERROR_ATTESTATION_KEYS_UNAVAILABLE>
<android.security.KeyStoreException: int ERROR_ID_ATTESTATION_FAILURE>
<android.security.KeyStoreException: int ERROR_INCORRECT_USAGE>
<android.security.KeyStoreException: int ERROR_INTERNAL_SYSTEM_ERROR>
<android.security.KeyStoreException: int ERROR_KEYMINT_FAILURE>
<android.security.KeyStoreException: int ERROR_KEYSTORE_FAILURE>
<android.security.KeyStoreException: int ERROR_KEYSTORE_UNINITIALIZED>
<android.security.KeyStoreException: int ERROR_KEY_CORRUPTED>
<android.security.KeyStoreException: int ERROR_KEY_DOES_NOT_EXIST>
<android.security.KeyStoreException: int ERROR_KEY_NOT_TEMPORALLY_VALID>
<android.security.KeyStoreException: int ERROR_KEY_OPERATION_EXPIRED>
<android.security.KeyStoreException: int ERROR_OTHER>
<android.security.KeyStoreException: int ERROR_PERMISSION_DENIED>
<android.security.KeyStoreException: int ERROR_UNIMPLEMENTED>
<android.security.KeyStoreException: int ERROR_USER_AUTHENTICATION_REQUIRED>
<android.security.KeyStoreException: int RETRY_NEVER>
<android.security.KeyStoreException: int RETRY_WHEN_CONNECTIVITY_AVAILABLE>
<android.security.KeyStoreException: int RETRY_WITH_EXPONENTIAL_BACKOFF>
android.security.KeyStoreParameter
<android.security.KeyStoreParameter: boolean isEncryptionRequired()>
android.security.KeyStoreParameter$Builder
<android.security.KeyStoreParameter$Builder: void <init>(android.content.Context)>
<android.security.KeyStoreParameter$Builder: android.security.KeyStoreParameter build()>
<android.security.KeyStoreParameter$Builder: android.security.KeyStoreParameter$Builder setEncryptionRequired(boolean)>
android.security.NetworkSecurityPolicy
<android.security.NetworkSecurityPolicy: android.security.NetworkSecurityPolicy getInstance()>
<android.security.NetworkSecurityPolicy: boolean isCleartextTrafficPermitted()>
<android.security.NetworkSecurityPolicy: boolean isCleartextTrafficPermitted(java.lang.String)>
android.security.identity.AccessControlProfile
android.security.identity.AccessControlProfile$Builder
<android.security.identity.AccessControlProfile$Builder: void <init>(android.security.identity.AccessControlProfileId)>
<android.security.identity.AccessControlProfile$Builder: android.security.identity.AccessControlProfile build()>
<android.security.identity.AccessControlProfile$Builder: android.security.identity.AccessControlProfile$Builder setReaderCertificate(java.security.cert.X509Certificate)>
<android.security.identity.AccessControlProfile$Builder: android.security.identity.AccessControlProfile$Builder setUserAuthenticationRequired(boolean)>
<android.security.identity.AccessControlProfile$Builder: android.security.identity.AccessControlProfile$Builder setUserAuthenticationTimeout(long)>
android.security.identity.AccessControlProfileId
<android.security.identity.AccessControlProfileId: void <init>(int)>
<android.security.identity.AccessControlProfileId: int getId()>
android.security.identity.AlreadyPersonalizedException
<android.security.identity.AlreadyPersonalizedException: void <init>(java.lang.String)>
<android.security.identity.AlreadyPersonalizedException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.identity.CipherSuiteNotSupportedException
<android.security.identity.CipherSuiteNotSupportedException: void <init>(java.lang.String)>
<android.security.identity.CipherSuiteNotSupportedException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.identity.CredentialDataRequest
<android.security.identity.CredentialDataRequest: java.util.Map getDeviceSignedEntriesToRequest()>
<android.security.identity.CredentialDataRequest: java.util.Map getIssuerSignedEntriesToRequest()>
<android.security.identity.CredentialDataRequest: byte[] getReaderSignature()>
<android.security.identity.CredentialDataRequest: byte[] getRequestMessage()>
<android.security.identity.CredentialDataRequest: boolean isAllowUsingExhaustedKeys()>
<android.security.identity.CredentialDataRequest: boolean isAllowUsingExpiredKeys()>
<android.security.identity.CredentialDataRequest: boolean isIncrementUseCount()>
android.security.identity.CredentialDataRequest$Builder
<android.security.identity.CredentialDataRequest$Builder: void <init>()>
<android.security.identity.CredentialDataRequest$Builder: android.security.identity.CredentialDataRequest build()>
<android.security.identity.CredentialDataRequest$Builder: android.security.identity.CredentialDataRequest$Builder setAllowUsingExhaustedKeys(boolean)>
<android.security.identity.CredentialDataRequest$Builder: android.security.identity.CredentialDataRequest$Builder setAllowUsingExpiredKeys(boolean)>
<android.security.identity.CredentialDataRequest$Builder: android.security.identity.CredentialDataRequest$Builder setDeviceSignedEntriesToRequest(java.util.Map)>
<android.security.identity.CredentialDataRequest$Builder: android.security.identity.CredentialDataRequest$Builder setIncrementUseCount(boolean)>
<android.security.identity.CredentialDataRequest$Builder: android.security.identity.CredentialDataRequest$Builder setIssuerSignedEntriesToRequest(java.util.Map)>
<android.security.identity.CredentialDataRequest$Builder: android.security.identity.CredentialDataRequest$Builder setReaderSignature(byte[])>
<android.security.identity.CredentialDataRequest$Builder: android.security.identity.CredentialDataRequest$Builder setRequestMessage(byte[])>
android.security.identity.CredentialDataResult
<android.security.identity.CredentialDataResult: byte[] getDeviceMac()>
<android.security.identity.CredentialDataResult: byte[] getDeviceNameSpaces()>
<android.security.identity.CredentialDataResult: android.security.identity.CredentialDataResult$Entries getDeviceSignedEntries()>
<android.security.identity.CredentialDataResult: android.security.identity.CredentialDataResult$Entries getIssuerSignedEntries()>
<android.security.identity.CredentialDataResult: byte[] getStaticAuthenticationData()>
android.security.identity.CredentialDataResult$Entries
<android.security.identity.CredentialDataResult$Entries: byte[] getEntry(java.lang.String,java.lang.String)>
<android.security.identity.CredentialDataResult$Entries: java.util.Collection getEntryNames(java.lang.String)>
<android.security.identity.CredentialDataResult$Entries: java.util.Collection getNamespaces()>
<android.security.identity.CredentialDataResult$Entries: java.util.Collection getRetrievedEntryNames(java.lang.String)>
<android.security.identity.CredentialDataResult$Entries: int getStatus(java.lang.String,java.lang.String)>
<android.security.identity.CredentialDataResult$Entries: int STATUS_NOT_IN_REQUEST_MESSAGE>
<android.security.identity.CredentialDataResult$Entries: int STATUS_NOT_REQUESTED>
<android.security.identity.CredentialDataResult$Entries: int STATUS_NO_ACCESS_CONTROL_PROFILES>
<android.security.identity.CredentialDataResult$Entries: int STATUS_NO_SUCH_ENTRY>
<android.security.identity.CredentialDataResult$Entries: int STATUS_OK>
<android.security.identity.CredentialDataResult$Entries: int STATUS_READER_AUTHENTICATION_FAILED>
<android.security.identity.CredentialDataResult$Entries: int STATUS_USER_AUTHENTICATION_FAILED>
android.security.identity.DocTypeNotSupportedException
<android.security.identity.DocTypeNotSupportedException: void <init>(java.lang.String)>
<android.security.identity.DocTypeNotSupportedException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.identity.EphemeralPublicKeyNotFoundException
<android.security.identity.EphemeralPublicKeyNotFoundException: void <init>(java.lang.String)>
<android.security.identity.EphemeralPublicKeyNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.identity.IdentityCredential
<android.security.identity.IdentityCredential: java.security.KeyPair createEphemeralKeyPair()>
<android.security.identity.IdentityCredential: byte[] decryptMessageFromReader(byte[])>
<android.security.identity.IdentityCredential: byte[] delete(byte[])>
<android.security.identity.IdentityCredential: byte[] encryptMessageToReader(byte[])>
<android.security.identity.IdentityCredential: java.util.Collection getAuthKeysNeedingCertification()>
<android.security.identity.IdentityCredential: int[] getAuthenticationDataUsageCount()>
<android.security.identity.IdentityCredential: java.util.Collection getCredentialKeyCertificateChain()>
<android.security.identity.IdentityCredential: android.security.identity.ResultData getEntries(byte[],java.util.Map,byte[],byte[])>
<android.security.identity.IdentityCredential: byte[] proveOwnership(byte[])>
<android.security.identity.IdentityCredential: void setAllowUsingExhaustedKeys(boolean)>
<android.security.identity.IdentityCredential: void setAllowUsingExpiredKeys(boolean)>
<android.security.identity.IdentityCredential: void setAvailableAuthenticationKeys(int,int)>
<android.security.identity.IdentityCredential: void setReaderEphemeralPublicKey(java.security.PublicKey)>
<android.security.identity.IdentityCredential: void storeStaticAuthenticationData(java.security.cert.X509Certificate,byte[])>
<android.security.identity.IdentityCredential: void storeStaticAuthenticationData(java.security.cert.X509Certificate,java.time.Instant,byte[])>
<android.security.identity.IdentityCredential: byte[] update(android.security.identity.PersonalizationData)>
android.security.identity.IdentityCredentialException
<android.security.identity.IdentityCredentialException: void <init>(java.lang.String)>
<android.security.identity.IdentityCredentialException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.identity.IdentityCredentialStore
<android.security.identity.IdentityCredentialStore: android.security.identity.WritableIdentityCredential createCredential(java.lang.String,java.lang.String)>
<android.security.identity.IdentityCredentialStore: android.security.identity.PresentationSession createPresentationSession(int)>
<android.security.identity.IdentityCredentialStore: byte[] deleteCredentialByName(java.lang.String)>
<android.security.identity.IdentityCredentialStore: android.security.identity.IdentityCredential getCredentialByName(java.lang.String,int)>
<android.security.identity.IdentityCredentialStore: android.security.identity.IdentityCredentialStore getDirectAccessInstance(android.content.Context)>
<android.security.identity.IdentityCredentialStore: android.security.identity.IdentityCredentialStore getInstance(android.content.Context)>
<android.security.identity.IdentityCredentialStore: java.lang.String[] getSupportedDocTypes()>
<android.security.identity.IdentityCredentialStore: int CIPHERSUITE_ECDHE_HKDF_ECDSA_WITH_AES_256_GCM_SHA256>
android.security.identity.InvalidReaderSignatureException
<android.security.identity.InvalidReaderSignatureException: void <init>(java.lang.String)>
<android.security.identity.InvalidReaderSignatureException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.identity.InvalidRequestMessageException
<android.security.identity.InvalidRequestMessageException: void <init>(java.lang.String)>
<android.security.identity.InvalidRequestMessageException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.identity.MessageDecryptionException
<android.security.identity.MessageDecryptionException: void <init>(java.lang.String)>
<android.security.identity.MessageDecryptionException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.identity.NoAuthenticationKeyAvailableException
<android.security.identity.NoAuthenticationKeyAvailableException: void <init>(java.lang.String)>
<android.security.identity.NoAuthenticationKeyAvailableException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.identity.PersonalizationData
android.security.identity.PersonalizationData$Builder
<android.security.identity.PersonalizationData$Builder: void <init>()>
<android.security.identity.PersonalizationData$Builder: android.security.identity.PersonalizationData$Builder addAccessControlProfile(android.security.identity.AccessControlProfile)>
<android.security.identity.PersonalizationData$Builder: android.security.identity.PersonalizationData build()>
<android.security.identity.PersonalizationData$Builder: android.security.identity.PersonalizationData$Builder putEntry(java.lang.String,java.lang.String,java.util.Collection,byte[])>
android.security.identity.PresentationSession
<android.security.identity.PresentationSession: android.security.identity.CredentialDataResult getCredentialData(java.lang.String,android.security.identity.CredentialDataRequest)>
<android.security.identity.PresentationSession: java.security.KeyPair getEphemeralKeyPair()>
<android.security.identity.PresentationSession: void setReaderEphemeralPublicKey(java.security.PublicKey)>
<android.security.identity.PresentationSession: void setSessionTranscript(byte[])>
android.security.identity.ResultData
<android.security.identity.ResultData: byte[] getAuthenticatedData()>
<android.security.identity.ResultData: byte[] getEntry(java.lang.String,java.lang.String)>
<android.security.identity.ResultData: java.util.Collection getEntryNames(java.lang.String)>
<android.security.identity.ResultData: byte[] getMessageAuthenticationCode()>
<android.security.identity.ResultData: java.util.Collection getNamespaces()>
<android.security.identity.ResultData: java.util.Collection getRetrievedEntryNames(java.lang.String)>
<android.security.identity.ResultData: byte[] getStaticAuthenticationData()>
<android.security.identity.ResultData: int getStatus(java.lang.String,java.lang.String)>
<android.security.identity.ResultData: int STATUS_NOT_IN_REQUEST_MESSAGE>
<android.security.identity.ResultData: int STATUS_NOT_REQUESTED>
<android.security.identity.ResultData: int STATUS_NO_ACCESS_CONTROL_PROFILES>
<android.security.identity.ResultData: int STATUS_NO_SUCH_ENTRY>
<android.security.identity.ResultData: int STATUS_OK>
<android.security.identity.ResultData: int STATUS_READER_AUTHENTICATION_FAILED>
<android.security.identity.ResultData: int STATUS_USER_AUTHENTICATION_FAILED>
android.security.identity.SessionTranscriptMismatchException
<android.security.identity.SessionTranscriptMismatchException: void <init>(java.lang.String)>
<android.security.identity.SessionTranscriptMismatchException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.identity.UnknownAuthenticationKeyException
<android.security.identity.UnknownAuthenticationKeyException: void <init>(java.lang.String)>
<android.security.identity.UnknownAuthenticationKeyException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.identity.WritableIdentityCredential
<android.security.identity.WritableIdentityCredential: java.util.Collection getCredentialKeyCertificateChain(byte[])>
<android.security.identity.WritableIdentityCredential: byte[] personalize(android.security.identity.PersonalizationData)>
android.security.keystore.BackendBusyException
<android.security.keystore.BackendBusyException: void <init>(long)>
<android.security.keystore.BackendBusyException: void <init>(long,java.lang.String)>
<android.security.keystore.BackendBusyException: void <init>(long,java.lang.String,java.lang.Throwable)>
<android.security.keystore.BackendBusyException: long getBackOffHintMillis()>
android.security.keystore.KeyExpiredException
<android.security.keystore.KeyExpiredException: void <init>()>
<android.security.keystore.KeyExpiredException: void <init>(java.lang.String)>
<android.security.keystore.KeyExpiredException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.keystore.KeyGenParameterSpec
<android.security.keystore.KeyGenParameterSpec: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()>
<android.security.keystore.KeyGenParameterSpec: java.lang.String getAttestKeyAlias()>
<android.security.keystore.KeyGenParameterSpec: byte[] getAttestationChallenge()>
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getBlockModes()>
<android.security.keystore.KeyGenParameterSpec: java.util.Date getCertificateNotAfter()>
<android.security.keystore.KeyGenParameterSpec: java.util.Date getCertificateNotBefore()>
<android.security.keystore.KeyGenParameterSpec: java.math.BigInteger getCertificateSerialNumber()>
<android.security.keystore.KeyGenParameterSpec: javax.security.auth.x500.X500Principal getCertificateSubject()>
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getDigests()>
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getEncryptionPaddings()>
<android.security.keystore.KeyGenParameterSpec: int getKeySize()>
<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityForConsumptionEnd()>
<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityForOriginationEnd()>
<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityStart()>
<android.security.keystore.KeyGenParameterSpec: java.lang.String getKeystoreAlias()>
<android.security.keystore.KeyGenParameterSpec: int getMaxUsageCount()>
<android.security.keystore.KeyGenParameterSpec: int getPurposes()>
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getSignaturePaddings()>
<android.security.keystore.KeyGenParameterSpec: int getUserAuthenticationType()>
<android.security.keystore.KeyGenParameterSpec: int getUserAuthenticationValidityDurationSeconds()>
<android.security.keystore.KeyGenParameterSpec: boolean isDevicePropertiesAttestationIncluded()>
<android.security.keystore.KeyGenParameterSpec: boolean isDigestsSpecified()>
<android.security.keystore.KeyGenParameterSpec: boolean isInvalidatedByBiometricEnrollment()>
<android.security.keystore.KeyGenParameterSpec: boolean isRandomizedEncryptionRequired()>
<android.security.keystore.KeyGenParameterSpec: boolean isStrongBoxBacked()>
<android.security.keystore.KeyGenParameterSpec: boolean isUnlockedDeviceRequired()>
<android.security.keystore.KeyGenParameterSpec: boolean isUserAuthenticationRequired()>
<android.security.keystore.KeyGenParameterSpec: boolean isUserAuthenticationValidWhileOnBody()>
<android.security.keystore.KeyGenParameterSpec: boolean isUserConfirmationRequired()>
<android.security.keystore.KeyGenParameterSpec: boolean isUserPresenceRequired()>
android.security.keystore.KeyGenParameterSpec$Builder
<android.security.keystore.KeyGenParameterSpec$Builder: void <init>(java.lang.String,int)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec build()>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setAlgorithmParameterSpec(java.security.spec.AlgorithmParameterSpec)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setAttestKeyAlias(java.lang.String)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setAttestationChallenge(byte[])>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setBlockModes(java.lang.String[])>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setCertificateNotAfter(java.util.Date)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setCertificateNotBefore(java.util.Date)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setCertificateSerialNumber(java.math.BigInteger)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setCertificateSubject(javax.security.auth.x500.X500Principal)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setDevicePropertiesAttestationIncluded(boolean)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setDigests(java.lang.String[])>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setEncryptionPaddings(java.lang.String[])>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setInvalidatedByBiometricEnrollment(boolean)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setIsStrongBoxBacked(boolean)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setKeySize(int)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setKeyValidityEnd(java.util.Date)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setKeyValidityForConsumptionEnd(java.util.Date)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setKeyValidityForOriginationEnd(java.util.Date)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setKeyValidityStart(java.util.Date)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setMaxUsageCount(int)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setRandomizedEncryptionRequired(boolean)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setSignaturePaddings(java.lang.String[])>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setUnlockedDeviceRequired(boolean)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setUserAuthenticationParameters(int,int)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setUserAuthenticationRequired(boolean)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setUserAuthenticationValidWhileOnBody(boolean)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setUserAuthenticationValidityDurationSeconds(int)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setUserConfirmationRequired(boolean)>
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setUserPresenceRequired(boolean)>
android.security.keystore.KeyInfo
<android.security.keystore.KeyInfo: java.lang.String[] getBlockModes()>
<android.security.keystore.KeyInfo: java.lang.String[] getDigests()>
<android.security.keystore.KeyInfo: java.lang.String[] getEncryptionPaddings()>
<android.security.keystore.KeyInfo: int getKeySize()>
<android.security.keystore.KeyInfo: java.util.Date getKeyValidityForConsumptionEnd()>
<android.security.keystore.KeyInfo: java.util.Date getKeyValidityForOriginationEnd()>
<android.security.keystore.KeyInfo: java.util.Date getKeyValidityStart()>
<android.security.keystore.KeyInfo: java.lang.String getKeystoreAlias()>
<android.security.keystore.KeyInfo: int getOrigin()>
<android.security.keystore.KeyInfo: int getPurposes()>
<android.security.keystore.KeyInfo: int getRemainingUsageCount()>
<android.security.keystore.KeyInfo: int getSecurityLevel()>
<android.security.keystore.KeyInfo: java.lang.String[] getSignaturePaddings()>
<android.security.keystore.KeyInfo: int getUserAuthenticationType()>
<android.security.keystore.KeyInfo: int getUserAuthenticationValidityDurationSeconds()>
<android.security.keystore.KeyInfo: boolean isInsideSecureHardware()>
<android.security.keystore.KeyInfo: boolean isInvalidatedByBiometricEnrollment()>
<android.security.keystore.KeyInfo: boolean isTrustedUserPresenceRequired()>
<android.security.keystore.KeyInfo: boolean isUserAuthenticationRequired()>
<android.security.keystore.KeyInfo: boolean isUserAuthenticationRequirementEnforcedBySecureHardware()>
<android.security.keystore.KeyInfo: boolean isUserAuthenticationValidWhileOnBody()>
<android.security.keystore.KeyInfo: boolean isUserConfirmationRequired()>
android.security.keystore.KeyNotYetValidException
<android.security.keystore.KeyNotYetValidException: void <init>()>
<android.security.keystore.KeyNotYetValidException: void <init>(java.lang.String)>
<android.security.keystore.KeyNotYetValidException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.keystore.KeyPermanentlyInvalidatedException
<android.security.keystore.KeyPermanentlyInvalidatedException: void <init>()>
<android.security.keystore.KeyPermanentlyInvalidatedException: void <init>(java.lang.String)>
<android.security.keystore.KeyPermanentlyInvalidatedException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.keystore.KeyProperties
<android.security.keystore.KeyProperties: int AUTH_BIOMETRIC_STRONG>
<android.security.keystore.KeyProperties: int AUTH_DEVICE_CREDENTIAL>
<android.security.keystore.KeyProperties: java.lang.String BLOCK_MODE_CBC>
<android.security.keystore.KeyProperties: java.lang.String BLOCK_MODE_CTR>
<android.security.keystore.KeyProperties: java.lang.String BLOCK_MODE_ECB>
<android.security.keystore.KeyProperties: java.lang.String BLOCK_MODE_GCM>
<android.security.keystore.KeyProperties: java.lang.String DIGEST_MD5>
<android.security.keystore.KeyProperties: java.lang.String DIGEST_NONE>
<android.security.keystore.KeyProperties: java.lang.String DIGEST_SHA1>
<android.security.keystore.KeyProperties: java.lang.String DIGEST_SHA224>
<android.security.keystore.KeyProperties: java.lang.String DIGEST_SHA256>
<android.security.keystore.KeyProperties: java.lang.String DIGEST_SHA384>
<android.security.keystore.KeyProperties: java.lang.String DIGEST_SHA512>
<android.security.keystore.KeyProperties: java.lang.String ENCRYPTION_PADDING_NONE>
<android.security.keystore.KeyProperties: java.lang.String ENCRYPTION_PADDING_PKCS7>
<android.security.keystore.KeyProperties: java.lang.String ENCRYPTION_PADDING_RSA_OAEP>
<android.security.keystore.KeyProperties: java.lang.String ENCRYPTION_PADDING_RSA_PKCS1>
<android.security.keystore.KeyProperties: java.lang.String KEY_ALGORITHM_3DES>
<android.security.keystore.KeyProperties: java.lang.String KEY_ALGORITHM_AES>
<android.security.keystore.KeyProperties: java.lang.String KEY_ALGORITHM_EC>
<android.security.keystore.KeyProperties: java.lang.String KEY_ALGORITHM_HMAC_SHA1>
<android.security.keystore.KeyProperties: java.lang.String KEY_ALGORITHM_HMAC_SHA224>
<android.security.keystore.KeyProperties: java.lang.String KEY_ALGORITHM_HMAC_SHA256>
<android.security.keystore.KeyProperties: java.lang.String KEY_ALGORITHM_HMAC_SHA384>
<android.security.keystore.KeyProperties: java.lang.String KEY_ALGORITHM_HMAC_SHA512>
<android.security.keystore.KeyProperties: java.lang.String KEY_ALGORITHM_RSA>
<android.security.keystore.KeyProperties: int ORIGIN_GENERATED>
<android.security.keystore.KeyProperties: int ORIGIN_IMPORTED>
<android.security.keystore.KeyProperties: int ORIGIN_SECURELY_IMPORTED>
<android.security.keystore.KeyProperties: int ORIGIN_UNKNOWN>
<android.security.keystore.KeyProperties: int PURPOSE_AGREE_KEY>
<android.security.keystore.KeyProperties: int PURPOSE_ATTEST_KEY>
<android.security.keystore.KeyProperties: int PURPOSE_DECRYPT>
<android.security.keystore.KeyProperties: int PURPOSE_ENCRYPT>
<android.security.keystore.KeyProperties: int PURPOSE_SIGN>
<android.security.keystore.KeyProperties: int PURPOSE_VERIFY>
<android.security.keystore.KeyProperties: int PURPOSE_WRAP_KEY>
<android.security.keystore.KeyProperties: int SECURITY_LEVEL_SOFTWARE>
<android.security.keystore.KeyProperties: int SECURITY_LEVEL_STRONGBOX>
<android.security.keystore.KeyProperties: int SECURITY_LEVEL_TRUSTED_ENVIRONMENT>
<android.security.keystore.KeyProperties: int SECURITY_LEVEL_UNKNOWN>
<android.security.keystore.KeyProperties: int SECURITY_LEVEL_UNKNOWN_SECURE>
<android.security.keystore.KeyProperties: java.lang.String SIGNATURE_PADDING_RSA_PKCS1>
<android.security.keystore.KeyProperties: java.lang.String SIGNATURE_PADDING_RSA_PSS>
<android.security.keystore.KeyProperties: int UNRESTRICTED_USAGE_COUNT>
android.security.keystore.KeyProtection
<android.security.keystore.KeyProtection: java.lang.String[] getBlockModes()>
<android.security.keystore.KeyProtection: java.lang.String[] getDigests()>
<android.security.keystore.KeyProtection: java.lang.String[] getEncryptionPaddings()>
<android.security.keystore.KeyProtection: java.util.Date getKeyValidityForConsumptionEnd()>
<android.security.keystore.KeyProtection: java.util.Date getKeyValidityForOriginationEnd()>
<android.security.keystore.KeyProtection: java.util.Date getKeyValidityStart()>
<android.security.keystore.KeyProtection: int getMaxUsageCount()>
<android.security.keystore.KeyProtection: int getPurposes()>
<android.security.keystore.KeyProtection: java.lang.String[] getSignaturePaddings()>
<android.security.keystore.KeyProtection: int getUserAuthenticationType()>
<android.security.keystore.KeyProtection: int getUserAuthenticationValidityDurationSeconds()>
<android.security.keystore.KeyProtection: boolean isDigestsSpecified()>
<android.security.keystore.KeyProtection: boolean isInvalidatedByBiometricEnrollment()>
<android.security.keystore.KeyProtection: boolean isRandomizedEncryptionRequired()>
<android.security.keystore.KeyProtection: boolean isUnlockedDeviceRequired()>
<android.security.keystore.KeyProtection: boolean isUserAuthenticationRequired()>
<android.security.keystore.KeyProtection: boolean isUserAuthenticationValidWhileOnBody()>
<android.security.keystore.KeyProtection: boolean isUserConfirmationRequired()>
<android.security.keystore.KeyProtection: boolean isUserPresenceRequired()>
android.security.keystore.KeyProtection$Builder
<android.security.keystore.KeyProtection$Builder: void <init>(int)>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection build()>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setBlockModes(java.lang.String[])>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setDigests(java.lang.String[])>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setEncryptionPaddings(java.lang.String[])>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setInvalidatedByBiometricEnrollment(boolean)>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setIsStrongBoxBacked(boolean)>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setKeyValidityEnd(java.util.Date)>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setKeyValidityForConsumptionEnd(java.util.Date)>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setKeyValidityForOriginationEnd(java.util.Date)>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setKeyValidityStart(java.util.Date)>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setMaxUsageCount(int)>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setRandomizedEncryptionRequired(boolean)>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setSignaturePaddings(java.lang.String[])>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setUnlockedDeviceRequired(boolean)>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setUserAuthenticationParameters(int,int)>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setUserAuthenticationRequired(boolean)>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setUserAuthenticationValidWhileOnBody(boolean)>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setUserAuthenticationValidityDurationSeconds(int)>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setUserConfirmationRequired(boolean)>
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setUserPresenceRequired(boolean)>
android.security.keystore.SecureKeyImportUnavailableException
<android.security.keystore.SecureKeyImportUnavailableException: void <init>()>
<android.security.keystore.SecureKeyImportUnavailableException: void <init>(java.lang.String)>
<android.security.keystore.SecureKeyImportUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>
<android.security.keystore.SecureKeyImportUnavailableException: void <init>(java.lang.Throwable)>
android.security.keystore.StrongBoxUnavailableException
<android.security.keystore.StrongBoxUnavailableException: void <init>()>
<android.security.keystore.StrongBoxUnavailableException: void <init>(java.lang.String)>
<android.security.keystore.StrongBoxUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>
<android.security.keystore.StrongBoxUnavailableException: void <init>(java.lang.Throwable)>
android.security.keystore.UserNotAuthenticatedException
<android.security.keystore.UserNotAuthenticatedException: void <init>()>
<android.security.keystore.UserNotAuthenticatedException: void <init>(java.lang.String)>
<android.security.keystore.UserNotAuthenticatedException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.keystore.UserPresenceUnavailableException
<android.security.keystore.UserPresenceUnavailableException: void <init>()>
<android.security.keystore.UserPresenceUnavailableException: void <init>(java.lang.String)>
<android.security.keystore.UserPresenceUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>
android.security.keystore.WrappedKeyEntry
<android.security.keystore.WrappedKeyEntry: void <init>(byte[],java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec)>
<android.security.keystore.WrappedKeyEntry: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()>
<android.security.keystore.WrappedKeyEntry: java.lang.String getTransformation()>
<android.security.keystore.WrappedKeyEntry: byte[] getWrappedKeyBytes()>
<android.security.keystore.WrappedKeyEntry: java.lang.String getWrappingKeyAlias()>
android.service.autofill.AutofillService
<android.service.autofill.AutofillService: void <init>()>
<android.service.autofill.AutofillService: android.service.autofill.FillEventHistory getFillEventHistory()>
<android.service.autofill.AutofillService: android.os.IBinder onBind(android.content.Intent)>
<android.service.autofill.AutofillService: void onConnected()>
<android.service.autofill.AutofillService: void onDisconnected()>
<android.service.autofill.AutofillService: void onFillRequest(android.service.autofill.FillRequest,android.os.CancellationSignal,android.service.autofill.FillCallback)>
<android.service.autofill.AutofillService: void onSaveRequest(android.service.autofill.SaveRequest,android.service.autofill.SaveCallback)>
<android.service.autofill.AutofillService: void onSavedDatasetsInfoRequest(android.service.autofill.SavedDatasetsInfoCallback)>
<android.service.autofill.AutofillService: java.lang.String EXTRA_FILL_RESPONSE>
<android.service.autofill.AutofillService: java.lang.String SERVICE_INTERFACE>
<android.service.autofill.AutofillService: java.lang.String SERVICE_META_DATA>
android.service.autofill.BatchUpdates
<android.service.autofill.BatchUpdates: int describeContents()>
<android.service.autofill.BatchUpdates: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.BatchUpdates: android.os.Parcelable$Creator CREATOR>
android.service.autofill.BatchUpdates$Builder
<android.service.autofill.BatchUpdates$Builder: void <init>()>
<android.service.autofill.BatchUpdates$Builder: android.service.autofill.BatchUpdates build()>
<android.service.autofill.BatchUpdates$Builder: android.service.autofill.BatchUpdates$Builder transformChild(int,android.service.autofill.Transformation)>
<android.service.autofill.BatchUpdates$Builder: android.service.autofill.BatchUpdates$Builder updateTemplate(android.widget.RemoteViews)>
android.service.autofill.CharSequenceTransformation
<android.service.autofill.CharSequenceTransformation: int describeContents()>
<android.service.autofill.CharSequenceTransformation: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.CharSequenceTransformation: android.os.Parcelable$Creator CREATOR>
android.service.autofill.CharSequenceTransformation$Builder
<android.service.autofill.CharSequenceTransformation$Builder: void <init>(android.view.autofill.AutofillId,java.util.regex.Pattern,java.lang.String)>
<android.service.autofill.CharSequenceTransformation$Builder: android.service.autofill.CharSequenceTransformation$Builder addField(android.view.autofill.AutofillId,java.util.regex.Pattern,java.lang.String)>
<android.service.autofill.CharSequenceTransformation$Builder: android.service.autofill.CharSequenceTransformation build()>
android.service.autofill.CustomDescription
<android.service.autofill.CustomDescription: int describeContents()>
<android.service.autofill.CustomDescription: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.CustomDescription: android.os.Parcelable$Creator CREATOR>
android.service.autofill.CustomDescription$Builder
<android.service.autofill.CustomDescription$Builder: void <init>(android.widget.RemoteViews)>
<android.service.autofill.CustomDescription$Builder: android.service.autofill.CustomDescription$Builder addChild(int,android.service.autofill.Transformation)>
<android.service.autofill.CustomDescription$Builder: android.service.autofill.CustomDescription$Builder addOnClickAction(int,android.service.autofill.OnClickAction)>
<android.service.autofill.CustomDescription$Builder: android.service.autofill.CustomDescription$Builder batchUpdate(android.service.autofill.Validator,android.service.autofill.BatchUpdates)>
<android.service.autofill.CustomDescription$Builder: android.service.autofill.CustomDescription build()>
android.service.autofill.Dataset
<android.service.autofill.Dataset: int describeContents()>
<android.service.autofill.Dataset: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.Dataset: android.os.Parcelable$Creator CREATOR>
android.service.autofill.Dataset$Builder
<android.service.autofill.Dataset$Builder: void <init>(android.widget.RemoteViews)>
<android.service.autofill.Dataset$Builder: void <init>(android.service.autofill.Presentations)>
<android.service.autofill.Dataset$Builder: void <init>()>
<android.service.autofill.Dataset$Builder: android.service.autofill.Dataset build()>
<android.service.autofill.Dataset$Builder: android.service.autofill.Dataset$Builder setAuthentication(android.content.IntentSender)>
<android.service.autofill.Dataset$Builder: android.service.autofill.Dataset$Builder setField(android.view.autofill.AutofillId,android.service.autofill.Field)>
<android.service.autofill.Dataset$Builder: android.service.autofill.Dataset$Builder setId(java.lang.String)>
<android.service.autofill.Dataset$Builder: android.service.autofill.Dataset$Builder setInlinePresentation(android.service.autofill.InlinePresentation)>
<android.service.autofill.Dataset$Builder: android.service.autofill.Dataset$Builder setInlinePresentation(android.service.autofill.InlinePresentation,android.service.autofill.InlinePresentation)>
<android.service.autofill.Dataset$Builder: android.service.autofill.Dataset$Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue)>
<android.service.autofill.Dataset$Builder: android.service.autofill.Dataset$Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,android.widget.RemoteViews)>
<android.service.autofill.Dataset$Builder: android.service.autofill.Dataset$Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,java.util.regex.Pattern)>
<android.service.autofill.Dataset$Builder: android.service.autofill.Dataset$Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,java.util.regex.Pattern,android.widget.RemoteViews)>
<android.service.autofill.Dataset$Builder: android.service.autofill.Dataset$Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,android.widget.RemoteViews,android.service.autofill.InlinePresentation)>
<android.service.autofill.Dataset$Builder: android.service.autofill.Dataset$Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,android.widget.RemoteViews,android.service.autofill.InlinePresentation,android.service.autofill.InlinePresentation)>
<android.service.autofill.Dataset$Builder: android.service.autofill.Dataset$Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,java.util.regex.Pattern,android.widget.RemoteViews,android.service.autofill.InlinePresentation)>
<android.service.autofill.Dataset$Builder: android.service.autofill.Dataset$Builder setValue(android.view.autofill.AutofillId,android.view.autofill.AutofillValue,java.util.regex.Pattern,android.widget.RemoteViews,android.service.autofill.InlinePresentation,android.service.autofill.InlinePresentation)>
android.service.autofill.DateTransformation
<android.service.autofill.DateTransformation: void <init>(android.view.autofill.AutofillId,android.icu.text.DateFormat)>
<android.service.autofill.DateTransformation: int describeContents()>
<android.service.autofill.DateTransformation: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.DateTransformation: android.os.Parcelable$Creator CREATOR>
android.service.autofill.DateValueSanitizer
<android.service.autofill.DateValueSanitizer: void <init>(android.icu.text.DateFormat)>
<android.service.autofill.DateValueSanitizer: int describeContents()>
<android.service.autofill.DateValueSanitizer: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.DateValueSanitizer: android.os.Parcelable$Creator CREATOR>
android.service.autofill.Field
<android.service.autofill.Field: java.util.regex.Pattern getFilter()>
<android.service.autofill.Field: android.service.autofill.Presentations getPresentations()>
<android.service.autofill.Field: android.view.autofill.AutofillValue getValue()>
android.service.autofill.Field$Builder
<android.service.autofill.Field$Builder: void <init>()>
<android.service.autofill.Field$Builder: android.service.autofill.Field build()>
<android.service.autofill.Field$Builder: android.service.autofill.Field$Builder setFilter(java.util.regex.Pattern)>
<android.service.autofill.Field$Builder: android.service.autofill.Field$Builder setPresentations(android.service.autofill.Presentations)>
<android.service.autofill.Field$Builder: android.service.autofill.Field$Builder setValue(android.view.autofill.AutofillValue)>
android.service.autofill.FieldClassification
<android.service.autofill.FieldClassification: java.util.List getMatches()>
android.service.autofill.FieldClassification$Match
<android.service.autofill.FieldClassification$Match: java.lang.String getCategoryId()>
<android.service.autofill.FieldClassification$Match: float getScore()>
android.service.autofill.FillCallback
<android.service.autofill.FillCallback: void onFailure(java.lang.CharSequence)>
<android.service.autofill.FillCallback: void onSuccess(android.service.autofill.FillResponse)>
android.service.autofill.FillContext
<android.service.autofill.FillContext: int describeContents()>
<android.service.autofill.FillContext: android.view.autofill.AutofillId getFocusedId()>
<android.service.autofill.FillContext: int getRequestId()>
<android.service.autofill.FillContext: android.app.assist.AssistStructure getStructure()>
<android.service.autofill.FillContext: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.FillContext: android.os.Parcelable$Creator CREATOR>
android.service.autofill.FillEventHistory
<android.service.autofill.FillEventHistory: int describeContents()>
<android.service.autofill.FillEventHistory: android.os.Bundle getClientState()>
<android.service.autofill.FillEventHistory: java.util.List getEvents()>
<android.service.autofill.FillEventHistory: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.FillEventHistory: android.os.Parcelable$Creator CREATOR>
android.service.autofill.FillEventHistory$Event
<android.service.autofill.FillEventHistory$Event: java.util.Map getChangedFields()>
<android.service.autofill.FillEventHistory$Event: android.os.Bundle getClientState()>
<android.service.autofill.FillEventHistory$Event: java.lang.String getDatasetId()>
<android.service.autofill.FillEventHistory$Event: java.util.Map getFieldsClassification()>
<android.service.autofill.FillEventHistory$Event: java.util.Set getIgnoredDatasetIds()>
<android.service.autofill.FillEventHistory$Event: java.util.Map getManuallyEnteredField()>
<android.service.autofill.FillEventHistory$Event: int getNoSaveUiReason()>
<android.service.autofill.FillEventHistory$Event: java.util.Set getSelectedDatasetIds()>
<android.service.autofill.FillEventHistory$Event: int getType()>
<android.service.autofill.FillEventHistory$Event: int getUiType()>
<android.service.autofill.FillEventHistory$Event: int NO_SAVE_UI_REASON_DATASET_MATCH>
<android.service.autofill.FillEventHistory$Event: int NO_SAVE_UI_REASON_FIELD_VALIDATION_FAILED>
<android.service.autofill.FillEventHistory$Event: int NO_SAVE_UI_REASON_HAS_EMPTY_REQUIRED>
<android.service.autofill.FillEventHistory$Event: int NO_SAVE_UI_REASON_NONE>
<android.service.autofill.FillEventHistory$Event: int NO_SAVE_UI_REASON_NO_SAVE_INFO>
<android.service.autofill.FillEventHistory$Event: int NO_SAVE_UI_REASON_NO_VALUE_CHANGED>
<android.service.autofill.FillEventHistory$Event: int NO_SAVE_UI_REASON_WITH_DELAY_SAVE_FLAG>
<android.service.autofill.FillEventHistory$Event: int TYPE_AUTHENTICATION_SELECTED>
<android.service.autofill.FillEventHistory$Event: int TYPE_CONTEXT_COMMITTED>
<android.service.autofill.FillEventHistory$Event: int TYPE_DATASETS_SHOWN>
<android.service.autofill.FillEventHistory$Event: int TYPE_DATASET_AUTHENTICATION_SELECTED>
<android.service.autofill.FillEventHistory$Event: int TYPE_DATASET_SELECTED>
<android.service.autofill.FillEventHistory$Event: int TYPE_SAVE_SHOWN>
<android.service.autofill.FillEventHistory$Event: int UI_TYPE_DIALOG>
<android.service.autofill.FillEventHistory$Event: int UI_TYPE_INLINE>
<android.service.autofill.FillEventHistory$Event: int UI_TYPE_MENU>
<android.service.autofill.FillEventHistory$Event: int UI_TYPE_UNKNOWN>
android.service.autofill.FillRequest
<android.service.autofill.FillRequest: int describeContents()>
<android.service.autofill.FillRequest: android.os.Bundle getClientState()>
<android.service.autofill.FillRequest: android.content.IntentSender getDelayedFillIntentSender()>
<android.service.autofill.FillRequest: java.util.List getFillContexts()>
<android.service.autofill.FillRequest: int getFlags()>
<android.service.autofill.FillRequest: int getId()>
<android.service.autofill.FillRequest: android.view.inputmethod.InlineSuggestionsRequest getInlineSuggestionsRequest()>
<android.service.autofill.FillRequest: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.FillRequest: android.os.Parcelable$Creator CREATOR>
<android.service.autofill.FillRequest: int FLAG_COMPATIBILITY_MODE_REQUEST>
<android.service.autofill.FillRequest: int FLAG_MANUAL_REQUEST>
<android.service.autofill.FillRequest: int FLAG_SUPPORTS_FILL_DIALOG>
android.service.autofill.FillResponse
<android.service.autofill.FillResponse: int describeContents()>
<android.service.autofill.FillResponse: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.FillResponse: android.os.Parcelable$Creator CREATOR>
<android.service.autofill.FillResponse: int FLAG_DELAY_FILL>
<android.service.autofill.FillResponse: int FLAG_DISABLE_ACTIVITY_ONLY>
<android.service.autofill.FillResponse: int FLAG_TRACK_CONTEXT_COMMITED>
android.service.autofill.FillResponse$Builder
<android.service.autofill.FillResponse$Builder: void <init>()>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder addDataset(android.service.autofill.Dataset)>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse build()>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder disableAutofill(long)>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder setAuthentication(android.view.autofill.AutofillId[],android.content.IntentSender,android.widget.RemoteViews)>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder setAuthentication(android.view.autofill.AutofillId[],android.content.IntentSender,android.widget.RemoteViews,android.service.autofill.InlinePresentation)>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder setAuthentication(android.view.autofill.AutofillId[],android.content.IntentSender,android.widget.RemoteViews,android.service.autofill.InlinePresentation,android.service.autofill.InlinePresentation)>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder setAuthentication(android.view.autofill.AutofillId[],android.content.IntentSender,android.service.autofill.Presentations)>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder setClientState(android.os.Bundle)>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder setDialogHeader(android.widget.RemoteViews)>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder setFieldClassificationIds(android.view.autofill.AutofillId[])>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder setFillDialogTriggerIds(android.view.autofill.AutofillId[])>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder setFlags(int)>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder setFooter(android.widget.RemoteViews)>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder setHeader(android.widget.RemoteViews)>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder setIgnoredIds(android.view.autofill.AutofillId[])>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder setPresentationCancelIds(int[])>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder setSaveInfo(android.service.autofill.SaveInfo)>
<android.service.autofill.FillResponse$Builder: android.service.autofill.FillResponse$Builder setUserData(android.service.autofill.UserData)>
android.service.autofill.ImageTransformation
<android.service.autofill.ImageTransformation: int describeContents()>
<android.service.autofill.ImageTransformation: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.ImageTransformation: android.os.Parcelable$Creator CREATOR>
android.service.autofill.ImageTransformation$Builder
<android.service.autofill.ImageTransformation$Builder: void <init>(android.view.autofill.AutofillId,java.util.regex.Pattern,int)>
<android.service.autofill.ImageTransformation$Builder: void <init>(android.view.autofill.AutofillId,java.util.regex.Pattern,int,java.lang.CharSequence)>
<android.service.autofill.ImageTransformation$Builder: android.service.autofill.ImageTransformation$Builder addOption(java.util.regex.Pattern,int)>
<android.service.autofill.ImageTransformation$Builder: android.service.autofill.ImageTransformation$Builder addOption(java.util.regex.Pattern,int,java.lang.CharSequence)>
<android.service.autofill.ImageTransformation$Builder: android.service.autofill.ImageTransformation build()>
android.service.autofill.InlinePresentation
<android.service.autofill.InlinePresentation: void <init>(android.app.slice.Slice,android.widget.inline.InlinePresentationSpec,boolean)>
<android.service.autofill.InlinePresentation: android.service.autofill.InlinePresentation createTooltipPresentation(android.app.slice.Slice,android.widget.inline.InlinePresentationSpec)>
<android.service.autofill.InlinePresentation: int describeContents()>
<android.service.autofill.InlinePresentation: android.widget.inline.InlinePresentationSpec getInlinePresentationSpec()>
<android.service.autofill.InlinePresentation: android.app.slice.Slice getSlice()>
<android.service.autofill.InlinePresentation: boolean isPinned()>
<android.service.autofill.InlinePresentation: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.InlinePresentation: android.os.Parcelable$Creator CREATOR>
android.service.autofill.LuhnChecksumValidator
<android.service.autofill.LuhnChecksumValidator: void <init>(android.view.autofill.AutofillId[])>
<android.service.autofill.LuhnChecksumValidator: int describeContents()>
<android.service.autofill.LuhnChecksumValidator: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.LuhnChecksumValidator: android.os.Parcelable$Creator CREATOR>
android.service.autofill.OnClickAction
android.service.autofill.Presentations
<android.service.autofill.Presentations: android.widget.RemoteViews getDialogPresentation()>
<android.service.autofill.Presentations: android.service.autofill.InlinePresentation getInlinePresentation()>
<android.service.autofill.Presentations: android.service.autofill.InlinePresentation getInlineTooltipPresentation()>
<android.service.autofill.Presentations: android.widget.RemoteViews getMenuPresentation()>
android.service.autofill.Presentations$Builder
<android.service.autofill.Presentations$Builder: void <init>()>
<android.service.autofill.Presentations$Builder: android.service.autofill.Presentations build()>
<android.service.autofill.Presentations$Builder: android.service.autofill.Presentations$Builder setDialogPresentation(android.widget.RemoteViews)>
<android.service.autofill.Presentations$Builder: android.service.autofill.Presentations$Builder setInlinePresentation(android.service.autofill.InlinePresentation)>
<android.service.autofill.Presentations$Builder: android.service.autofill.Presentations$Builder setInlineTooltipPresentation(android.service.autofill.InlinePresentation)>
<android.service.autofill.Presentations$Builder: android.service.autofill.Presentations$Builder setMenuPresentation(android.widget.RemoteViews)>
android.service.autofill.RegexValidator
<android.service.autofill.RegexValidator: void <init>(android.view.autofill.AutofillId,java.util.regex.Pattern)>
<android.service.autofill.RegexValidator: int describeContents()>
<android.service.autofill.RegexValidator: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.RegexValidator: android.os.Parcelable$Creator CREATOR>
android.service.autofill.Sanitizer
android.service.autofill.SaveCallback
<android.service.autofill.SaveCallback: void onFailure(java.lang.CharSequence)>
<android.service.autofill.SaveCallback: void onSuccess()>
<android.service.autofill.SaveCallback: void onSuccess(android.content.IntentSender)>
android.service.autofill.SaveInfo
<android.service.autofill.SaveInfo: int describeContents()>
<android.service.autofill.SaveInfo: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.SaveInfo: android.os.Parcelable$Creator CREATOR>
<android.service.autofill.SaveInfo: int FLAG_DELAY_SAVE>
<android.service.autofill.SaveInfo: int FLAG_DONT_SAVE_ON_FINISH>
<android.service.autofill.SaveInfo: int FLAG_SAVE_ON_ALL_VIEWS_INVISIBLE>
<android.service.autofill.SaveInfo: int NEGATIVE_BUTTON_STYLE_CANCEL>
<android.service.autofill.SaveInfo: int NEGATIVE_BUTTON_STYLE_NEVER>
<android.service.autofill.SaveInfo: int NEGATIVE_BUTTON_STYLE_REJECT>
<android.service.autofill.SaveInfo: int POSITIVE_BUTTON_STYLE_CONTINUE>
<android.service.autofill.SaveInfo: int POSITIVE_BUTTON_STYLE_SAVE>
<android.service.autofill.SaveInfo: int SAVE_DATA_TYPE_ADDRESS>
<android.service.autofill.SaveInfo: int SAVE_DATA_TYPE_CREDIT_CARD>
<android.service.autofill.SaveInfo: int SAVE_DATA_TYPE_DEBIT_CARD>
<android.service.autofill.SaveInfo: int SAVE_DATA_TYPE_EMAIL_ADDRESS>
<android.service.autofill.SaveInfo: int SAVE_DATA_TYPE_GENERIC>
<android.service.autofill.SaveInfo: int SAVE_DATA_TYPE_GENERIC_CARD>
<android.service.autofill.SaveInfo: int SAVE_DATA_TYPE_PASSWORD>
<android.service.autofill.SaveInfo: int SAVE_DATA_TYPE_PAYMENT_CARD>
<android.service.autofill.SaveInfo: int SAVE_DATA_TYPE_USERNAME>
android.service.autofill.SaveInfo$Builder
<android.service.autofill.SaveInfo$Builder: void <init>(int,android.view.autofill.AutofillId[])>
<android.service.autofill.SaveInfo$Builder: void <init>(int)>
<android.service.autofill.SaveInfo$Builder: android.service.autofill.SaveInfo$Builder addSanitizer(android.service.autofill.Sanitizer,android.view.autofill.AutofillId[])>
<android.service.autofill.SaveInfo$Builder: android.service.autofill.SaveInfo build()>
<android.service.autofill.SaveInfo$Builder: android.service.autofill.SaveInfo$Builder setCustomDescription(android.service.autofill.CustomDescription)>
<android.service.autofill.SaveInfo$Builder: android.service.autofill.SaveInfo$Builder setDescription(java.lang.CharSequence)>
<android.service.autofill.SaveInfo$Builder: android.service.autofill.SaveInfo$Builder setFlags(int)>
<android.service.autofill.SaveInfo$Builder: android.service.autofill.SaveInfo$Builder setNegativeAction(int,android.content.IntentSender)>
<android.service.autofill.SaveInfo$Builder: android.service.autofill.SaveInfo$Builder setOptionalIds(android.view.autofill.AutofillId[])>
<android.service.autofill.SaveInfo$Builder: android.service.autofill.SaveInfo$Builder setPositiveAction(int)>
<android.service.autofill.SaveInfo$Builder: android.service.autofill.SaveInfo$Builder setTriggerId(android.view.autofill.AutofillId)>
<android.service.autofill.SaveInfo$Builder: android.service.autofill.SaveInfo$Builder setValidator(android.service.autofill.Validator)>
android.service.autofill.SaveRequest
<android.service.autofill.SaveRequest: int describeContents()>
<android.service.autofill.SaveRequest: android.os.Bundle getClientState()>
<android.service.autofill.SaveRequest: java.util.List getDatasetIds()>
<android.service.autofill.SaveRequest: java.util.List getFillContexts()>
<android.service.autofill.SaveRequest: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.SaveRequest: android.os.Parcelable$Creator CREATOR>
android.service.autofill.SavedDatasetsInfo
<android.service.autofill.SavedDatasetsInfo: void <init>(java.lang.String,int)>
<android.service.autofill.SavedDatasetsInfo: int getCount()>
<android.service.autofill.SavedDatasetsInfo: java.lang.String getType()>
<android.service.autofill.SavedDatasetsInfo: java.lang.String TYPE_OTHER>
<android.service.autofill.SavedDatasetsInfo: java.lang.String TYPE_PASSWORDS>
android.service.autofill.SavedDatasetsInfoCallback
<android.service.autofill.SavedDatasetsInfoCallback: void onError(int)>
<android.service.autofill.SavedDatasetsInfoCallback: void onSuccess(java.util.Set)>
<android.service.autofill.SavedDatasetsInfoCallback: int ERROR_NEEDS_USER_ACTION>
<android.service.autofill.SavedDatasetsInfoCallback: int ERROR_OTHER>
<android.service.autofill.SavedDatasetsInfoCallback: int ERROR_UNSUPPORTED>
android.service.autofill.TextValueSanitizer
<android.service.autofill.TextValueSanitizer: void <init>(java.util.regex.Pattern,java.lang.String)>
<android.service.autofill.TextValueSanitizer: int describeContents()>
<android.service.autofill.TextValueSanitizer: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.TextValueSanitizer: android.os.Parcelable$Creator CREATOR>
android.service.autofill.Transformation
android.service.autofill.UserData
<android.service.autofill.UserData: int describeContents()>
<android.service.autofill.UserData: java.lang.String getFieldClassificationAlgorithm()>
<android.service.autofill.UserData: java.lang.String getFieldClassificationAlgorithmForCategory(java.lang.String)>
<android.service.autofill.UserData: java.lang.String getId()>
<android.service.autofill.UserData: int getMaxCategoryCount()>
<android.service.autofill.UserData: int getMaxFieldClassificationIdsSize()>
<android.service.autofill.UserData: int getMaxUserDataSize()>
<android.service.autofill.UserData: int getMaxValueLength()>
<android.service.autofill.UserData: int getMinValueLength()>
<android.service.autofill.UserData: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.UserData: android.os.Parcelable$Creator CREATOR>
android.service.autofill.UserData$Builder
<android.service.autofill.UserData$Builder: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<android.service.autofill.UserData$Builder: android.service.autofill.UserData$Builder add(java.lang.String,java.lang.String)>
<android.service.autofill.UserData$Builder: android.service.autofill.UserData build()>
<android.service.autofill.UserData$Builder: android.service.autofill.UserData$Builder setFieldClassificationAlgorithm(java.lang.String,android.os.Bundle)>
<android.service.autofill.UserData$Builder: android.service.autofill.UserData$Builder setFieldClassificationAlgorithmForCategory(java.lang.String,java.lang.String,android.os.Bundle)>
android.service.autofill.Validator
android.service.autofill.Validators
<android.service.autofill.Validators: android.service.autofill.Validator and(android.service.autofill.Validator[])>
<android.service.autofill.Validators: android.service.autofill.Validator not(android.service.autofill.Validator)>
<android.service.autofill.Validators: android.service.autofill.Validator or(android.service.autofill.Validator[])>
android.service.autofill.VisibilitySetterAction
<android.service.autofill.VisibilitySetterAction: int describeContents()>
<android.service.autofill.VisibilitySetterAction: void writeToParcel(android.os.Parcel,int)>
<android.service.autofill.VisibilitySetterAction: android.os.Parcelable$Creator CREATOR>
android.service.autofill.VisibilitySetterAction$Builder
<android.service.autofill.VisibilitySetterAction$Builder: void <init>(int,int)>
<android.service.autofill.VisibilitySetterAction$Builder: android.service.autofill.VisibilitySetterAction build()>
<android.service.autofill.VisibilitySetterAction$Builder: android.service.autofill.VisibilitySetterAction$Builder setVisibility(int,int)>
android.service.carrier.CarrierIdentifier
<android.service.carrier.CarrierIdentifier: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.service.carrier.CarrierIdentifier: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int)>
<android.service.carrier.CarrierIdentifier: void <init>(byte[],java.lang.String,java.lang.String)>
<android.service.carrier.CarrierIdentifier: int describeContents()>
<android.service.carrier.CarrierIdentifier: int getCarrierId()>
<android.service.carrier.CarrierIdentifier: java.lang.String getGid1()>
<android.service.carrier.CarrierIdentifier: java.lang.String getGid2()>
<android.service.carrier.CarrierIdentifier: java.lang.String getImsi()>
<android.service.carrier.CarrierIdentifier: java.lang.String getMcc()>
<android.service.carrier.CarrierIdentifier: java.lang.String getMnc()>
<android.service.carrier.CarrierIdentifier: int getSpecificCarrierId()>
<android.service.carrier.CarrierIdentifier: java.lang.String getSpn()>
<android.service.carrier.CarrierIdentifier: void writeToParcel(android.os.Parcel,int)>
<android.service.carrier.CarrierIdentifier: android.os.Parcelable$Creator CREATOR>
android.service.carrier.CarrierMessagingClientService
<android.service.carrier.CarrierMessagingClientService: void <init>()>
<android.service.carrier.CarrierMessagingClientService: android.os.IBinder onBind(android.content.Intent)>
android.service.carrier.CarrierMessagingService
<android.service.carrier.CarrierMessagingService: void <init>()>
<android.service.carrier.CarrierMessagingService: android.os.IBinder onBind(android.content.Intent)>
<android.service.carrier.CarrierMessagingService: void onDownloadMms(android.net.Uri,int,android.net.Uri,android.service.carrier.CarrierMessagingService$ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onFilterSms(android.service.carrier.MessagePdu,java.lang.String,int,int,android.service.carrier.CarrierMessagingService$ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onReceiveTextSms(android.service.carrier.MessagePdu,java.lang.String,int,int,android.service.carrier.CarrierMessagingService$ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onSendDataSms(byte[],int,java.lang.String,int,android.service.carrier.CarrierMessagingService$ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onSendDataSms(byte[],int,java.lang.String,int,int,android.service.carrier.CarrierMessagingService$ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onSendMms(android.net.Uri,int,android.net.Uri,android.service.carrier.CarrierMessagingService$ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onSendMultipartTextSms(java.util.List,int,java.lang.String,android.service.carrier.CarrierMessagingService$ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onSendMultipartTextSms(java.util.List,int,java.lang.String,int,android.service.carrier.CarrierMessagingService$ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onSendTextSms(java.lang.String,int,java.lang.String,android.service.carrier.CarrierMessagingService$ResultCallback)>
<android.service.carrier.CarrierMessagingService: void onSendTextSms(java.lang.String,int,java.lang.String,int,android.service.carrier.CarrierMessagingService$ResultCallback)>
<android.service.carrier.CarrierMessagingService: int DOWNLOAD_STATUS_ERROR>
<android.service.carrier.CarrierMessagingService: int DOWNLOAD_STATUS_OK>
<android.service.carrier.CarrierMessagingService: int DOWNLOAD_STATUS_RETRY_ON_CARRIER_NETWORK>
<android.service.carrier.CarrierMessagingService: int RECEIVE_OPTIONS_DEFAULT>
<android.service.carrier.CarrierMessagingService: int RECEIVE_OPTIONS_DROP>
<android.service.carrier.CarrierMessagingService: int RECEIVE_OPTIONS_SKIP_NOTIFY_WHEN_CREDENTIAL_PROTECTED_STORAGE_UNAVAILABLE>
<android.service.carrier.CarrierMessagingService: int SEND_FLAG_REQUEST_DELIVERY_STATUS>
<android.service.carrier.CarrierMessagingService: int SEND_STATUS_ERROR>
<android.service.carrier.CarrierMessagingService: int SEND_STATUS_OK>
<android.service.carrier.CarrierMessagingService: int SEND_STATUS_RETRY_ON_CARRIER_NETWORK>
<android.service.carrier.CarrierMessagingService: java.lang.String SERVICE_INTERFACE>
android.service.carrier.CarrierMessagingService$ResultCallback
<android.service.carrier.CarrierMessagingService$ResultCallback: void onReceiveResult(java.lang.Object)>
android.service.carrier.CarrierMessagingService$SendMmsResult
<android.service.carrier.CarrierMessagingService$SendMmsResult: void <init>(int,byte[])>
<android.service.carrier.CarrierMessagingService$SendMmsResult: byte[] getSendConfPdu()>
<android.service.carrier.CarrierMessagingService$SendMmsResult: int getSendStatus()>
android.service.carrier.CarrierMessagingService$SendMultipartSmsResult
<android.service.carrier.CarrierMessagingService$SendMultipartSmsResult: void <init>(int,int[])>
<android.service.carrier.CarrierMessagingService$SendMultipartSmsResult: int[] getMessageRefs()>
<android.service.carrier.CarrierMessagingService$SendMultipartSmsResult: int getSendStatus()>
android.service.carrier.CarrierMessagingService$SendSmsResult
<android.service.carrier.CarrierMessagingService$SendSmsResult: void <init>(int,int)>
<android.service.carrier.CarrierMessagingService$SendSmsResult: int getMessageRef()>
<android.service.carrier.CarrierMessagingService$SendSmsResult: int getSendStatus()>
android.service.carrier.CarrierService
<android.service.carrier.CarrierService: void <init>()>
<android.service.carrier.CarrierService: void notifyCarrierNetworkChange(boolean)>
<android.service.carrier.CarrierService: void notifyCarrierNetworkChange(int,boolean)>
<android.service.carrier.CarrierService: android.os.IBinder onBind(android.content.Intent)>
<android.service.carrier.CarrierService: android.os.PersistableBundle onLoadConfig(android.service.carrier.CarrierIdentifier)>
<android.service.carrier.CarrierService: android.os.PersistableBundle onLoadConfig(int,android.service.carrier.CarrierIdentifier)>
<android.service.carrier.CarrierService: java.lang.String CARRIER_SERVICE_INTERFACE>
android.service.carrier.MessagePdu
<android.service.carrier.MessagePdu: void <init>(java.util.List)>
<android.service.carrier.MessagePdu: int describeContents()>
<android.service.carrier.MessagePdu: java.util.List getPdus()>
<android.service.carrier.MessagePdu: void writeToParcel(android.os.Parcel,int)>
<android.service.carrier.MessagePdu: android.os.Parcelable$Creator CREATOR>
android.service.chooser.ChooserTarget
<android.service.chooser.ChooserTarget: void <init>(java.lang.CharSequence,android.graphics.drawable.Icon,float,android.content.ComponentName,android.os.Bundle)>
<android.service.chooser.ChooserTarget: int describeContents()>
<android.service.chooser.ChooserTarget: android.content.ComponentName getComponentName()>
<android.service.chooser.ChooserTarget: android.graphics.drawable.Icon getIcon()>
<android.service.chooser.ChooserTarget: android.os.Bundle getIntentExtras()>
<android.service.chooser.ChooserTarget: float getScore()>
<android.service.chooser.ChooserTarget: java.lang.CharSequence getTitle()>
<android.service.chooser.ChooserTarget: void writeToParcel(android.os.Parcel,int)>
<android.service.chooser.ChooserTarget: android.os.Parcelable$Creator CREATOR>
android.service.chooser.ChooserTargetService
<android.service.chooser.ChooserTargetService: void <init>()>
<android.service.chooser.ChooserTargetService: android.os.IBinder onBind(android.content.Intent)>
<android.service.chooser.ChooserTargetService: java.util.List onGetChooserTargets(android.content.ComponentName,android.content.IntentFilter)>
<android.service.chooser.ChooserTargetService: java.lang.String BIND_PERMISSION>
<android.service.chooser.ChooserTargetService: java.lang.String META_DATA_NAME>
<android.service.chooser.ChooserTargetService: java.lang.String SERVICE_INTERFACE>
android.service.controls.Control
<android.service.controls.Control: int describeContents()>
<android.service.controls.Control: android.app.PendingIntent getAppIntent()>
<android.service.controls.Control: java.lang.String getControlId()>
<android.service.controls.Control: android.service.controls.templates.ControlTemplate getControlTemplate()>
<android.service.controls.Control: android.content.res.ColorStateList getCustomColor()>
<android.service.controls.Control: android.graphics.drawable.Icon getCustomIcon()>
<android.service.controls.Control: int getDeviceType()>
<android.service.controls.Control: int getStatus()>
<android.service.controls.Control: java.lang.CharSequence getStatusText()>
<android.service.controls.Control: java.lang.CharSequence getStructure()>
<android.service.controls.Control: java.lang.CharSequence getSubtitle()>
<android.service.controls.Control: java.lang.CharSequence getTitle()>
<android.service.controls.Control: java.lang.CharSequence getZone()>
<android.service.controls.Control: boolean isAuthRequired()>
<android.service.controls.Control: void writeToParcel(android.os.Parcel,int)>
<android.service.controls.Control: android.os.Parcelable$Creator CREATOR>
<android.service.controls.Control: int STATUS_DISABLED>
<android.service.controls.Control: int STATUS_ERROR>
<android.service.controls.Control: int STATUS_NOT_FOUND>
<android.service.controls.Control: int STATUS_OK>
<android.service.controls.Control: int STATUS_UNKNOWN>
android.service.controls.Control$StatefulBuilder
<android.service.controls.Control$StatefulBuilder: void <init>(java.lang.String,android.app.PendingIntent)>
<android.service.controls.Control$StatefulBuilder: void <init>(android.service.controls.Control)>
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control build()>
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control$StatefulBuilder setAppIntent(android.app.PendingIntent)>
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control$StatefulBuilder setAuthRequired(boolean)>
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control$StatefulBuilder setControlId(java.lang.String)>
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control$StatefulBuilder setControlTemplate(android.service.controls.templates.ControlTemplate)>
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control$StatefulBuilder setCustomColor(android.content.res.ColorStateList)>
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control$StatefulBuilder setCustomIcon(android.graphics.drawable.Icon)>
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control$StatefulBuilder setDeviceType(int)>
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control$StatefulBuilder setStatus(int)>
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control$StatefulBuilder setStatusText(java.lang.CharSequence)>
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control$StatefulBuilder setStructure(java.lang.CharSequence)>
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control$StatefulBuilder setSubtitle(java.lang.CharSequence)>
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control$StatefulBuilder setTitle(java.lang.CharSequence)>
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control$StatefulBuilder setZone(java.lang.CharSequence)>
android.service.controls.Control$StatelessBuilder
<android.service.controls.Control$StatelessBuilder: void <init>(java.lang.String,android.app.PendingIntent)>
<android.service.controls.Control$StatelessBuilder: void <init>(android.service.controls.Control)>
<android.service.controls.Control$StatelessBuilder: android.service.controls.Control build()>
<android.service.controls.Control$StatelessBuilder: android.service.controls.Control$StatelessBuilder setAppIntent(android.app.PendingIntent)>
<android.service.controls.Control$StatelessBuilder: android.service.controls.Control$StatelessBuilder setControlId(java.lang.String)>
<android.service.controls.Control$StatelessBuilder: android.service.controls.Control$StatelessBuilder setCustomColor(android.content.res.ColorStateList)>
<android.service.controls.Control$StatelessBuilder: android.service.controls.Control$StatelessBuilder setCustomIcon(android.graphics.drawable.Icon)>
<android.service.controls.Control$StatelessBuilder: android.service.controls.Control$StatelessBuilder setDeviceType(int)>
<android.service.controls.Control$StatelessBuilder: android.service.controls.Control$StatelessBuilder setStructure(java.lang.CharSequence)>
<android.service.controls.Control$StatelessBuilder: android.service.controls.Control$StatelessBuilder setSubtitle(java.lang.CharSequence)>
<android.service.controls.Control$StatelessBuilder: android.service.controls.Control$StatelessBuilder setTitle(java.lang.CharSequence)>
<android.service.controls.Control$StatelessBuilder: android.service.controls.Control$StatelessBuilder setZone(java.lang.CharSequence)>
android.service.controls.ControlsProviderService
<android.service.controls.ControlsProviderService: void <init>()>
<android.service.controls.ControlsProviderService: java.util.concurrent.Flow$Publisher createPublisherFor(java.util.List)>
<android.service.controls.ControlsProviderService: java.util.concurrent.Flow$Publisher createPublisherForAllAvailable()>
<android.service.controls.ControlsProviderService: java.util.concurrent.Flow$Publisher createPublisherForSuggested()>
<android.service.controls.ControlsProviderService: android.os.IBinder onBind(android.content.Intent)>
<android.service.controls.ControlsProviderService: boolean onUnbind(android.content.Intent)>
<android.service.controls.ControlsProviderService: void performControlAction(java.lang.String,android.service.controls.actions.ControlAction,java.util.function.Consumer)>
<android.service.controls.ControlsProviderService: void requestAddControl(android.content.Context,android.content.ComponentName,android.service.controls.Control)>
<android.service.controls.ControlsProviderService: java.lang.String SERVICE_CONTROLS>
<android.service.controls.ControlsProviderService: java.lang.String TAG>
android.service.controls.DeviceTypes
<android.service.controls.DeviceTypes: boolean validDeviceType(int)>
<android.service.controls.DeviceTypes: int TYPE_AC_HEATER>
<android.service.controls.DeviceTypes: int TYPE_AC_UNIT>
<android.service.controls.DeviceTypes: int TYPE_AIR_FRESHENER>
<android.service.controls.DeviceTypes: int TYPE_AIR_PURIFIER>
<android.service.controls.DeviceTypes: int TYPE_AWNING>
<android.service.controls.DeviceTypes: int TYPE_BLINDS>
<android.service.controls.DeviceTypes: int TYPE_CAMERA>
<android.service.controls.DeviceTypes: int TYPE_CLOSET>
<android.service.controls.DeviceTypes: int TYPE_COFFEE_MAKER>
<android.service.controls.DeviceTypes: int TYPE_CURTAIN>
<android.service.controls.DeviceTypes: int TYPE_DEHUMIDIFIER>
<android.service.controls.DeviceTypes: int TYPE_DISHWASHER>
<android.service.controls.DeviceTypes: int TYPE_DISPLAY>
<android.service.controls.DeviceTypes: int TYPE_DOOR>
<android.service.controls.DeviceTypes: int TYPE_DOORBELL>
<android.service.controls.DeviceTypes: int TYPE_DRAWER>
<android.service.controls.DeviceTypes: int TYPE_DRYER>
<android.service.controls.DeviceTypes: int TYPE_FAN>
<android.service.controls.DeviceTypes: int TYPE_GARAGE>
<android.service.controls.DeviceTypes: int TYPE_GATE>
<android.service.controls.DeviceTypes: int TYPE_GENERIC_ARM_DISARM>
<android.service.controls.DeviceTypes: int TYPE_GENERIC_LOCK_UNLOCK>
<android.service.controls.DeviceTypes: int TYPE_GENERIC_ON_OFF>
<android.service.controls.DeviceTypes: int TYPE_GENERIC_OPEN_CLOSE>
<android.service.controls.DeviceTypes: int TYPE_GENERIC_START_STOP>
<android.service.controls.DeviceTypes: int TYPE_GENERIC_TEMP_SETTING>
<android.service.controls.DeviceTypes: int TYPE_GENERIC_VIEWSTREAM>
<android.service.controls.DeviceTypes: int TYPE_HEATER>
<android.service.controls.DeviceTypes: int TYPE_HOOD>
<android.service.controls.DeviceTypes: int TYPE_HUMIDIFIER>
<android.service.controls.DeviceTypes: int TYPE_KETTLE>
<android.service.controls.DeviceTypes: int TYPE_LIGHT>
<android.service.controls.DeviceTypes: int TYPE_LOCK>
<android.service.controls.DeviceTypes: int TYPE_MICROWAVE>
<android.service.controls.DeviceTypes: int TYPE_MOP>
<android.service.controls.DeviceTypes: int TYPE_MOWER>
<android.service.controls.DeviceTypes: int TYPE_MULTICOOKER>
<android.service.controls.DeviceTypes: int TYPE_OUTLET>
<android.service.controls.DeviceTypes: int TYPE_PERGOLA>
<android.service.controls.DeviceTypes: int TYPE_RADIATOR>
<android.service.controls.DeviceTypes: int TYPE_REFRIGERATOR>
<android.service.controls.DeviceTypes: int TYPE_REMOTE_CONTROL>
<android.service.controls.DeviceTypes: int TYPE_ROUTINE>
<android.service.controls.DeviceTypes: int TYPE_SECURITY_SYSTEM>
<android.service.controls.DeviceTypes: int TYPE_SET_TOP>
<android.service.controls.DeviceTypes: int TYPE_SHOWER>
<android.service.controls.DeviceTypes: int TYPE_SHUTTER>
<android.service.controls.DeviceTypes: int TYPE_SPRINKLER>
<android.service.controls.DeviceTypes: int TYPE_STANDMIXER>
<android.service.controls.DeviceTypes: int TYPE_STYLER>
<android.service.controls.DeviceTypes: int TYPE_SWITCH>
<android.service.controls.DeviceTypes: int TYPE_THERMOSTAT>
<android.service.controls.DeviceTypes: int TYPE_TV>
<android.service.controls.DeviceTypes: int TYPE_UNKNOWN>
<android.service.controls.DeviceTypes: int TYPE_VACUUM>
<android.service.controls.DeviceTypes: int TYPE_VALVE>
<android.service.controls.DeviceTypes: int TYPE_WASHER>
<android.service.controls.DeviceTypes: int TYPE_WATER_HEATER>
<android.service.controls.DeviceTypes: int TYPE_WINDOW>
android.service.controls.actions.BooleanAction
<android.service.controls.actions.BooleanAction: void <init>(java.lang.String,boolean)>
<android.service.controls.actions.BooleanAction: void <init>(java.lang.String,boolean,java.lang.String)>
<android.service.controls.actions.BooleanAction: int getActionType()>
<android.service.controls.actions.BooleanAction: boolean getNewState()>
android.service.controls.actions.CommandAction
<android.service.controls.actions.CommandAction: void <init>(java.lang.String,java.lang.String)>
<android.service.controls.actions.CommandAction: void <init>(java.lang.String)>
<android.service.controls.actions.CommandAction: int getActionType()>
android.service.controls.actions.ControlAction
<android.service.controls.actions.ControlAction: int getActionType()>
<android.service.controls.actions.ControlAction: java.lang.String getChallengeValue()>
<android.service.controls.actions.ControlAction: android.service.controls.actions.ControlAction getErrorAction()>
<android.service.controls.actions.ControlAction: java.lang.String getTemplateId()>
<android.service.controls.actions.ControlAction: boolean isValidResponse(int)>
<android.service.controls.actions.ControlAction: int RESPONSE_CHALLENGE_ACK>
<android.service.controls.actions.ControlAction: int RESPONSE_CHALLENGE_PASSPHRASE>
<android.service.controls.actions.ControlAction: int RESPONSE_CHALLENGE_PIN>
<android.service.controls.actions.ControlAction: int RESPONSE_FAIL>
<android.service.controls.actions.ControlAction: int RESPONSE_OK>
<android.service.controls.actions.ControlAction: int RESPONSE_UNKNOWN>
<android.service.controls.actions.ControlAction: int TYPE_BOOLEAN>
<android.service.controls.actions.ControlAction: int TYPE_COMMAND>
<android.service.controls.actions.ControlAction: int TYPE_ERROR>
<android.service.controls.actions.ControlAction: int TYPE_FLOAT>
<android.service.controls.actions.ControlAction: int TYPE_MODE>
android.service.controls.actions.FloatAction
<android.service.controls.actions.FloatAction: void <init>(java.lang.String,float)>
<android.service.controls.actions.FloatAction: void <init>(java.lang.String,float,java.lang.String)>
<android.service.controls.actions.FloatAction: int getActionType()>
<android.service.controls.actions.FloatAction: float getNewValue()>
android.service.controls.actions.ModeAction
<android.service.controls.actions.ModeAction: void <init>(java.lang.String,int,java.lang.String)>
<android.service.controls.actions.ModeAction: void <init>(java.lang.String,int)>
<android.service.controls.actions.ModeAction: int getActionType()>
<android.service.controls.actions.ModeAction: int getNewMode()>
android.service.controls.templates.ControlButton
<android.service.controls.templates.ControlButton: void <init>(boolean,java.lang.CharSequence)>
<android.service.controls.templates.ControlButton: int describeContents()>
<android.service.controls.templates.ControlButton: java.lang.CharSequence getActionDescription()>
<android.service.controls.templates.ControlButton: boolean isChecked()>
<android.service.controls.templates.ControlButton: void writeToParcel(android.os.Parcel,int)>
<android.service.controls.templates.ControlButton: android.os.Parcelable$Creator CREATOR>
android.service.controls.templates.ControlTemplate
<android.service.controls.templates.ControlTemplate: android.service.controls.templates.ControlTemplate getErrorTemplate()>
<android.service.controls.templates.ControlTemplate: android.service.controls.templates.ControlTemplate getNoTemplateObject()>
<android.service.controls.templates.ControlTemplate: java.lang.String getTemplateId()>
<android.service.controls.templates.ControlTemplate: int getTemplateType()>
<android.service.controls.templates.ControlTemplate: int TYPE_ERROR>
<android.service.controls.templates.ControlTemplate: int TYPE_NO_TEMPLATE>
<android.service.controls.templates.ControlTemplate: int TYPE_RANGE>
<android.service.controls.templates.ControlTemplate: int TYPE_STATELESS>
<android.service.controls.templates.ControlTemplate: int TYPE_TEMPERATURE>
<android.service.controls.templates.ControlTemplate: int TYPE_THUMBNAIL>
<android.service.controls.templates.ControlTemplate: int TYPE_TOGGLE>
<android.service.controls.templates.ControlTemplate: int TYPE_TOGGLE_RANGE>
android.service.controls.templates.RangeTemplate
<android.service.controls.templates.RangeTemplate: void <init>(java.lang.String,float,float,float,float,java.lang.CharSequence)>
<android.service.controls.templates.RangeTemplate: float getCurrentValue()>
<android.service.controls.templates.RangeTemplate: java.lang.CharSequence getFormatString()>
<android.service.controls.templates.RangeTemplate: float getMaxValue()>
<android.service.controls.templates.RangeTemplate: float getMinValue()>
<android.service.controls.templates.RangeTemplate: float getStepValue()>
<android.service.controls.templates.RangeTemplate: int getTemplateType()>
android.service.controls.templates.StatelessTemplate
<android.service.controls.templates.StatelessTemplate: void <init>(java.lang.String)>
<android.service.controls.templates.StatelessTemplate: int getTemplateType()>
android.service.controls.templates.TemperatureControlTemplate
<android.service.controls.templates.TemperatureControlTemplate: void <init>(java.lang.String,android.service.controls.templates.ControlTemplate,int,int,int)>
<android.service.controls.templates.TemperatureControlTemplate: int getCurrentActiveMode()>
<android.service.controls.templates.TemperatureControlTemplate: int getCurrentMode()>
<android.service.controls.templates.TemperatureControlTemplate: int getModes()>
<android.service.controls.templates.TemperatureControlTemplate: android.service.controls.templates.ControlTemplate getTemplate()>
<android.service.controls.templates.TemperatureControlTemplate: int getTemplateType()>
<android.service.controls.templates.TemperatureControlTemplate: int FLAG_MODE_COOL>
<android.service.controls.templates.TemperatureControlTemplate: int FLAG_MODE_ECO>
<android.service.controls.templates.TemperatureControlTemplate: int FLAG_MODE_HEAT>
<android.service.controls.templates.TemperatureControlTemplate: int FLAG_MODE_HEAT_COOL>
<android.service.controls.templates.TemperatureControlTemplate: int FLAG_MODE_OFF>
<android.service.controls.templates.TemperatureControlTemplate: int MODE_COOL>
<android.service.controls.templates.TemperatureControlTemplate: int MODE_ECO>
<android.service.controls.templates.TemperatureControlTemplate: int MODE_HEAT>
<android.service.controls.templates.TemperatureControlTemplate: int MODE_HEAT_COOL>
<android.service.controls.templates.TemperatureControlTemplate: int MODE_OFF>
<android.service.controls.templates.TemperatureControlTemplate: int MODE_UNKNOWN>
android.service.controls.templates.ThumbnailTemplate
<android.service.controls.templates.ThumbnailTemplate: void <init>(java.lang.String,boolean,android.graphics.drawable.Icon,java.lang.CharSequence)>
<android.service.controls.templates.ThumbnailTemplate: java.lang.CharSequence getContentDescription()>
<android.service.controls.templates.ThumbnailTemplate: int getTemplateType()>
<android.service.controls.templates.ThumbnailTemplate: android.graphics.drawable.Icon getThumbnail()>
<android.service.controls.templates.ThumbnailTemplate: boolean isActive()>
android.service.controls.templates.ToggleRangeTemplate
<android.service.controls.templates.ToggleRangeTemplate: void <init>(java.lang.String,android.service.controls.templates.ControlButton,android.service.controls.templates.RangeTemplate)>
<android.service.controls.templates.ToggleRangeTemplate: void <init>(java.lang.String,boolean,java.lang.CharSequence,android.service.controls.templates.RangeTemplate)>
<android.service.controls.templates.ToggleRangeTemplate: java.lang.CharSequence getActionDescription()>
<android.service.controls.templates.ToggleRangeTemplate: android.service.controls.templates.RangeTemplate getRange()>
<android.service.controls.templates.ToggleRangeTemplate: int getTemplateType()>
<android.service.controls.templates.ToggleRangeTemplate: boolean isChecked()>
android.service.controls.templates.ToggleTemplate
<android.service.controls.templates.ToggleTemplate: void <init>(java.lang.String,android.service.controls.templates.ControlButton)>
<android.service.controls.templates.ToggleTemplate: java.lang.CharSequence getContentDescription()>
<android.service.controls.templates.ToggleTemplate: int getTemplateType()>
<android.service.controls.templates.ToggleTemplate: boolean isChecked()>
android.service.dreams.DreamService
<android.service.dreams.DreamService: void <init>()>
<android.service.dreams.DreamService: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.service.dreams.DreamService: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.service.dreams.DreamService: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.service.dreams.DreamService: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.service.dreams.DreamService: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.service.dreams.DreamService: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.service.dreams.DreamService: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.service.dreams.DreamService: android.view.View findViewById(int)>
<android.service.dreams.DreamService: void finish()>
<android.service.dreams.DreamService: android.view.Window getWindow()>
<android.service.dreams.DreamService: android.view.WindowManager getWindowManager()>
<android.service.dreams.DreamService: boolean isFullscreen()>
<android.service.dreams.DreamService: boolean isInteractive()>
<android.service.dreams.DreamService: boolean isScreenBright()>
<android.service.dreams.DreamService: void onActionModeFinished(android.view.ActionMode)>
<android.service.dreams.DreamService: void onActionModeStarted(android.view.ActionMode)>
<android.service.dreams.DreamService: void onAttachedToWindow()>
<android.service.dreams.DreamService: android.os.IBinder onBind(android.content.Intent)>
<android.service.dreams.DreamService: void onContentChanged()>
<android.service.dreams.DreamService: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.service.dreams.DreamService: android.view.View onCreatePanelView(int)>
<android.service.dreams.DreamService: void onDetachedFromWindow()>
<android.service.dreams.DreamService: void onDreamingStarted()>
<android.service.dreams.DreamService: void onDreamingStopped()>
<android.service.dreams.DreamService: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.service.dreams.DreamService: boolean onMenuOpened(int,android.view.Menu)>
<android.service.dreams.DreamService: void onPanelClosed(int,android.view.Menu)>
<android.service.dreams.DreamService: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.service.dreams.DreamService: boolean onSearchRequested(android.view.SearchEvent)>
<android.service.dreams.DreamService: boolean onSearchRequested()>
<android.service.dreams.DreamService: void onWakeUp()>
<android.service.dreams.DreamService: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>
<android.service.dreams.DreamService: void onWindowFocusChanged(boolean)>
<android.service.dreams.DreamService: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>
<android.service.dreams.DreamService: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>
<android.service.dreams.DreamService: android.view.View requireViewById(int)>
<android.service.dreams.DreamService: void setContentView(int)>
<android.service.dreams.DreamService: void setContentView(android.view.View)>
<android.service.dreams.DreamService: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.service.dreams.DreamService: void setFullscreen(boolean)>
<android.service.dreams.DreamService: void setInteractive(boolean)>
<android.service.dreams.DreamService: void setScreenBright(boolean)>
<android.service.dreams.DreamService: void wakeUp()>
<android.service.dreams.DreamService: java.lang.String DREAM_META_DATA>
<android.service.dreams.DreamService: java.lang.String SERVICE_INTERFACE>
android.service.media.CameraPrewarmService
<android.service.media.CameraPrewarmService: void <init>()>
<android.service.media.CameraPrewarmService: android.os.IBinder onBind(android.content.Intent)>
<android.service.media.CameraPrewarmService: void onCooldown(boolean)>
<android.service.media.CameraPrewarmService: void onPrewarm()>
android.service.media.MediaBrowserService
<android.service.media.MediaBrowserService: void <init>()>
<android.service.media.MediaBrowserService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.service.media.MediaBrowserService: android.os.Bundle getBrowserRootHints()>
<android.service.media.MediaBrowserService: android.media.session.MediaSessionManager$RemoteUserInfo getCurrentBrowserInfo()>
<android.service.media.MediaBrowserService: android.media.session.MediaSession$Token getSessionToken()>
<android.service.media.MediaBrowserService: void notifyChildrenChanged(java.lang.String)>
<android.service.media.MediaBrowserService: void notifyChildrenChanged(java.lang.String,android.os.Bundle)>
<android.service.media.MediaBrowserService: android.os.IBinder onBind(android.content.Intent)>
<android.service.media.MediaBrowserService: android.service.media.MediaBrowserService$BrowserRoot onGetRoot(java.lang.String,int,android.os.Bundle)>
<android.service.media.MediaBrowserService: void onLoadChildren(java.lang.String,android.service.media.MediaBrowserService$Result)>
<android.service.media.MediaBrowserService: void onLoadChildren(java.lang.String,android.service.media.MediaBrowserService$Result,android.os.Bundle)>
<android.service.media.MediaBrowserService: void onLoadItem(java.lang.String,android.service.media.MediaBrowserService$Result)>
<android.service.media.MediaBrowserService: void setSessionToken(android.media.session.MediaSession$Token)>
<android.service.media.MediaBrowserService: java.lang.String SERVICE_INTERFACE>
android.service.media.MediaBrowserService$BrowserRoot
<android.service.media.MediaBrowserService$BrowserRoot: void <init>(java.lang.String,android.os.Bundle)>
<android.service.media.MediaBrowserService$BrowserRoot: android.os.Bundle getExtras()>
<android.service.media.MediaBrowserService$BrowserRoot: java.lang.String getRootId()>
<android.service.media.MediaBrowserService$BrowserRoot: java.lang.String EXTRA_OFFLINE>
<android.service.media.MediaBrowserService$BrowserRoot: java.lang.String EXTRA_RECENT>
<android.service.media.MediaBrowserService$BrowserRoot: java.lang.String EXTRA_SUGGESTED>
android.service.media.MediaBrowserService$Result
<android.service.media.MediaBrowserService$Result: void detach()>
<android.service.media.MediaBrowserService$Result: void sendResult(java.lang.Object)>
android.service.notification.Condition
<android.service.notification.Condition: void <init>(android.net.Uri,java.lang.String,int)>
<android.service.notification.Condition: void <init>(android.net.Uri,java.lang.String,java.lang.String,java.lang.String,int,int,int)>
<android.service.notification.Condition: void <init>(android.os.Parcel)>
<android.service.notification.Condition: android.service.notification.Condition copy()>
<android.service.notification.Condition: int describeContents()>
<android.service.notification.Condition: boolean isValidId(android.net.Uri,java.lang.String)>
<android.service.notification.Condition: android.net.Uri$Builder newId(android.content.Context)>
<android.service.notification.Condition: java.lang.String relevanceToString(int)>
<android.service.notification.Condition: java.lang.String stateToString(int)>
<android.service.notification.Condition: void writeToParcel(android.os.Parcel,int)>
<android.service.notification.Condition: android.os.Parcelable$Creator CREATOR>
<android.service.notification.Condition: int FLAG_RELEVANT_ALWAYS>
<android.service.notification.Condition: int FLAG_RELEVANT_NOW>
<android.service.notification.Condition: java.lang.String SCHEME>
<android.service.notification.Condition: int STATE_ERROR>
<android.service.notification.Condition: int STATE_FALSE>
<android.service.notification.Condition: int STATE_TRUE>
<android.service.notification.Condition: int STATE_UNKNOWN>
<android.service.notification.Condition: int flags>
<android.service.notification.Condition: int icon>
<android.service.notification.Condition: android.net.Uri id>
<android.service.notification.Condition: java.lang.String line1>
<android.service.notification.Condition: java.lang.String line2>
<android.service.notification.Condition: int state>
<android.service.notification.Condition: java.lang.String summary>
android.service.notification.ConditionProviderService
<android.service.notification.ConditionProviderService: void <init>()>
<android.service.notification.ConditionProviderService: void notifyCondition(android.service.notification.Condition)>
<android.service.notification.ConditionProviderService: void notifyConditions(android.service.notification.Condition[])>
<android.service.notification.ConditionProviderService: android.os.IBinder onBind(android.content.Intent)>
<android.service.notification.ConditionProviderService: void onConnected()>
<android.service.notification.ConditionProviderService: void onRequestConditions(int)>
<android.service.notification.ConditionProviderService: void onSubscribe(android.net.Uri)>
<android.service.notification.ConditionProviderService: void onUnsubscribe(android.net.Uri)>
<android.service.notification.ConditionProviderService: void requestRebind(android.content.ComponentName)>
<android.service.notification.ConditionProviderService: void requestUnbind()>
<android.service.notification.ConditionProviderService: java.lang.String EXTRA_RULE_ID>
<android.service.notification.ConditionProviderService: java.lang.String META_DATA_CONFIGURATION_ACTIVITY>
<android.service.notification.ConditionProviderService: java.lang.String META_DATA_RULE_INSTANCE_LIMIT>
<android.service.notification.ConditionProviderService: java.lang.String META_DATA_RULE_TYPE>
<android.service.notification.ConditionProviderService: java.lang.String SERVICE_INTERFACE>
android.service.notification.NotificationListenerService
<android.service.notification.NotificationListenerService: void <init>()>
<android.service.notification.NotificationListenerService: void cancelAllNotifications()>
<android.service.notification.NotificationListenerService: void cancelNotification(java.lang.String,java.lang.String,int)>
<android.service.notification.NotificationListenerService: void cancelNotification(java.lang.String)>
<android.service.notification.NotificationListenerService: void cancelNotifications(java.lang.String[])>
<android.service.notification.NotificationListenerService: void clearRequestedListenerHints()>
<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getActiveNotifications()>
<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String[])>
<android.service.notification.NotificationListenerService: int getCurrentInterruptionFilter()>
<android.service.notification.NotificationListenerService: int getCurrentListenerHints()>
<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$RankingMap getCurrentRanking()>
<android.service.notification.NotificationListenerService: java.util.List getNotificationChannelGroups(java.lang.String,android.os.UserHandle)>
<android.service.notification.NotificationListenerService: java.util.List getNotificationChannels(java.lang.String,android.os.UserHandle)>
<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getSnoozedNotifications()>
<android.service.notification.NotificationListenerService: void migrateNotificationFilter(int,java.util.List)>
<android.service.notification.NotificationListenerService: android.os.IBinder onBind(android.content.Intent)>
<android.service.notification.NotificationListenerService: void onInterruptionFilterChanged(int)>
<android.service.notification.NotificationListenerService: void onListenerConnected()>
<android.service.notification.NotificationListenerService: void onListenerDisconnected()>
<android.service.notification.NotificationListenerService: void onListenerHintsChanged(int)>
<android.service.notification.NotificationListenerService: void onNotificationChannelGroupModified(java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup,int)>
<android.service.notification.NotificationListenerService: void onNotificationChannelModified(java.lang.String,android.os.UserHandle,android.app.NotificationChannel,int)>
<android.service.notification.NotificationListenerService: void onNotificationPosted(android.service.notification.StatusBarNotification)>
<android.service.notification.NotificationListenerService: void onNotificationPosted(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService$RankingMap)>
<android.service.notification.NotificationListenerService: void onNotificationRankingUpdate(android.service.notification.NotificationListenerService$RankingMap)>
<android.service.notification.NotificationListenerService: void onNotificationRemoved(android.service.notification.StatusBarNotification)>
<android.service.notification.NotificationListenerService: void onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService$RankingMap)>
<android.service.notification.NotificationListenerService: void onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService$RankingMap,int)>
<android.service.notification.NotificationListenerService: void onSilentStatusBarIconsVisibilityChanged(boolean)>
<android.service.notification.NotificationListenerService: void requestInterruptionFilter(int)>
<android.service.notification.NotificationListenerService: void requestListenerHints(int)>
<android.service.notification.NotificationListenerService: void requestRebind(android.content.ComponentName)>
<android.service.notification.NotificationListenerService: void requestUnbind()>
<android.service.notification.NotificationListenerService: void setNotificationsShown(java.lang.String[])>
<android.service.notification.NotificationListenerService: void snoozeNotification(java.lang.String,long)>
<android.service.notification.NotificationListenerService: void updateNotificationChannel(java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
<android.service.notification.NotificationListenerService: int FLAG_FILTER_TYPE_ALERTING>
<android.service.notification.NotificationListenerService: int FLAG_FILTER_TYPE_CONVERSATIONS>
<android.service.notification.NotificationListenerService: int FLAG_FILTER_TYPE_ONGOING>
<android.service.notification.NotificationListenerService: int FLAG_FILTER_TYPE_SILENT>
<android.service.notification.NotificationListenerService: int HINT_HOST_DISABLE_CALL_EFFECTS>
<android.service.notification.NotificationListenerService: int HINT_HOST_DISABLE_EFFECTS>
<android.service.notification.NotificationListenerService: int HINT_HOST_DISABLE_NOTIFICATION_EFFECTS>
<android.service.notification.NotificationListenerService: int INTERRUPTION_FILTER_ALARMS>
<android.service.notification.NotificationListenerService: int INTERRUPTION_FILTER_ALL>
<android.service.notification.NotificationListenerService: int INTERRUPTION_FILTER_NONE>
<android.service.notification.NotificationListenerService: int INTERRUPTION_FILTER_PRIORITY>
<android.service.notification.NotificationListenerService: int INTERRUPTION_FILTER_UNKNOWN>
<android.service.notification.NotificationListenerService: java.lang.String META_DATA_DEFAULT_FILTER_TYPES>
<android.service.notification.NotificationListenerService: java.lang.String META_DATA_DISABLED_FILTER_TYPES>
<android.service.notification.NotificationListenerService: int NOTIFICATION_CHANNEL_OR_GROUP_ADDED>
<android.service.notification.NotificationListenerService: int NOTIFICATION_CHANNEL_OR_GROUP_DELETED>
<android.service.notification.NotificationListenerService: int NOTIFICATION_CHANNEL_OR_GROUP_UPDATED>
<android.service.notification.NotificationListenerService: int REASON_APP_CANCEL>
<android.service.notification.NotificationListenerService: int REASON_APP_CANCEL_ALL>
<android.service.notification.NotificationListenerService: int REASON_ASSISTANT_CANCEL>
<android.service.notification.NotificationListenerService: int REASON_CANCEL>
<android.service.notification.NotificationListenerService: int REASON_CANCEL_ALL>
<android.service.notification.NotificationListenerService: int REASON_CHANNEL_BANNED>
<android.service.notification.NotificationListenerService: int REASON_CHANNEL_REMOVED>
<android.service.notification.NotificationListenerService: int REASON_CLEAR_DATA>
<android.service.notification.NotificationListenerService: int REASON_CLICK>
<android.service.notification.NotificationListenerService: int REASON_ERROR>
<android.service.notification.NotificationListenerService: int REASON_GROUP_OPTIMIZATION>
<android.service.notification.NotificationListenerService: int REASON_GROUP_SUMMARY_CANCELED>
<android.service.notification.NotificationListenerService: int REASON_LISTENER_CANCEL>
<android.service.notification.NotificationListenerService: int REASON_LISTENER_CANCEL_ALL>
<android.service.notification.NotificationListenerService: int REASON_PACKAGE_BANNED>
<android.service.notification.NotificationListenerService: int REASON_PACKAGE_CHANGED>
<android.service.notification.NotificationListenerService: int REASON_PACKAGE_SUSPENDED>
<android.service.notification.NotificationListenerService: int REASON_PROFILE_TURNED_OFF>
<android.service.notification.NotificationListenerService: int REASON_SNOOZED>
<android.service.notification.NotificationListenerService: int REASON_TIMEOUT>
<android.service.notification.NotificationListenerService: int REASON_UNAUTOBUNDLED>
<android.service.notification.NotificationListenerService: int REASON_USER_STOPPED>
<android.service.notification.NotificationListenerService: java.lang.String SERVICE_INTERFACE>
<android.service.notification.NotificationListenerService: int SUPPRESSED_EFFECT_SCREEN_OFF>
<android.service.notification.NotificationListenerService: int SUPPRESSED_EFFECT_SCREEN_ON>
android.service.notification.NotificationListenerService$Ranking
<android.service.notification.NotificationListenerService$Ranking: void <init>()>
<android.service.notification.NotificationListenerService$Ranking: boolean canBubble()>
<android.service.notification.NotificationListenerService$Ranking: boolean canShowBadge()>
<android.service.notification.NotificationListenerService$Ranking: android.app.NotificationChannel getChannel()>
<android.service.notification.NotificationListenerService$Ranking: android.content.pm.ShortcutInfo getConversationShortcutInfo()>
<android.service.notification.NotificationListenerService$Ranking: int getImportance()>
<android.service.notification.NotificationListenerService$Ranking: java.lang.CharSequence getImportanceExplanation()>
<android.service.notification.NotificationListenerService$Ranking: java.lang.String getKey()>
<android.service.notification.NotificationListenerService$Ranking: long getLastAudiblyAlertedMillis()>
<android.service.notification.NotificationListenerService$Ranking: int getLockscreenVisibilityOverride()>
<android.service.notification.NotificationListenerService$Ranking: java.lang.String getOverrideGroupKey()>
<android.service.notification.NotificationListenerService$Ranking: int getRank()>
<android.service.notification.NotificationListenerService$Ranking: java.util.List getSmartActions()>
<android.service.notification.NotificationListenerService$Ranking: java.util.List getSmartReplies()>
<android.service.notification.NotificationListenerService$Ranking: int getSuppressedVisualEffects()>
<android.service.notification.NotificationListenerService$Ranking: int getUserSentiment()>
<android.service.notification.NotificationListenerService$Ranking: boolean isAmbient()>
<android.service.notification.NotificationListenerService$Ranking: boolean isConversation()>
<android.service.notification.NotificationListenerService$Ranking: boolean isSuspended()>
<android.service.notification.NotificationListenerService$Ranking: boolean matchesInterruptionFilter()>
<android.service.notification.NotificationListenerService$Ranking: int USER_SENTIMENT_NEGATIVE>
<android.service.notification.NotificationListenerService$Ranking: int USER_SENTIMENT_NEUTRAL>
<android.service.notification.NotificationListenerService$Ranking: int USER_SENTIMENT_POSITIVE>
<android.service.notification.NotificationListenerService$Ranking: int VISIBILITY_NO_OVERRIDE>
android.service.notification.NotificationListenerService$RankingMap
<android.service.notification.NotificationListenerService$RankingMap: int describeContents()>
<android.service.notification.NotificationListenerService$RankingMap: java.lang.String[] getOrderedKeys()>
<android.service.notification.NotificationListenerService$RankingMap: boolean getRanking(java.lang.String,android.service.notification.NotificationListenerService$Ranking)>
<android.service.notification.NotificationListenerService$RankingMap: void writeToParcel(android.os.Parcel,int)>
<android.service.notification.NotificationListenerService$RankingMap: android.os.Parcelable$Creator CREATOR>
android.service.notification.StatusBarNotification
<android.service.notification.StatusBarNotification: void <init>(java.lang.String,java.lang.String,int,java.lang.String,int,int,int,android.app.Notification,android.os.UserHandle,long)>
<android.service.notification.StatusBarNotification: void <init>(android.os.Parcel)>
<android.service.notification.StatusBarNotification: android.service.notification.StatusBarNotification clone()>
<android.service.notification.StatusBarNotification: int describeContents()>
<android.service.notification.StatusBarNotification: java.lang.String getGroupKey()>
<android.service.notification.StatusBarNotification: int getId()>
<android.service.notification.StatusBarNotification: java.lang.String getKey()>
<android.service.notification.StatusBarNotification: android.app.Notification getNotification()>
<android.service.notification.StatusBarNotification: java.lang.String getOpPkg()>
<android.service.notification.StatusBarNotification: java.lang.String getOverrideGroupKey()>
<android.service.notification.StatusBarNotification: java.lang.String getPackageName()>
<android.service.notification.StatusBarNotification: long getPostTime()>
<android.service.notification.StatusBarNotification: java.lang.String getTag()>
<android.service.notification.StatusBarNotification: int getUid()>
<android.service.notification.StatusBarNotification: android.os.UserHandle getUser()>
<android.service.notification.StatusBarNotification: int getUserId()>
<android.service.notification.StatusBarNotification: boolean isAppGroup()>
<android.service.notification.StatusBarNotification: boolean isClearable()>
<android.service.notification.StatusBarNotification: boolean isGroup()>
<android.service.notification.StatusBarNotification: boolean isOngoing()>
<android.service.notification.StatusBarNotification: void setOverrideGroupKey(java.lang.String)>
<android.service.notification.StatusBarNotification: void writeToParcel(android.os.Parcel,int)>
<android.service.notification.StatusBarNotification: android.os.Parcelable$Creator CREATOR>
android.service.notification.ZenPolicy
<android.service.notification.ZenPolicy: int describeContents()>
<android.service.notification.ZenPolicy: int getPriorityCallSenders()>
<android.service.notification.ZenPolicy: int getPriorityCategoryAlarms()>
<android.service.notification.ZenPolicy: int getPriorityCategoryCalls()>
<android.service.notification.ZenPolicy: int getPriorityCategoryConversations()>
<android.service.notification.ZenPolicy: int getPriorityCategoryEvents()>
<android.service.notification.ZenPolicy: int getPriorityCategoryMedia()>
<android.service.notification.ZenPolicy: int getPriorityCategoryMessages()>
<android.service.notification.ZenPolicy: int getPriorityCategoryReminders()>
<android.service.notification.ZenPolicy: int getPriorityCategoryRepeatCallers()>
<android.service.notification.ZenPolicy: int getPriorityCategorySystem()>
<android.service.notification.ZenPolicy: int getPriorityConversationSenders()>
<android.service.notification.ZenPolicy: int getPriorityMessageSenders()>
<android.service.notification.ZenPolicy: int getVisualEffectAmbient()>
<android.service.notification.ZenPolicy: int getVisualEffectBadge()>
<android.service.notification.ZenPolicy: int getVisualEffectFullScreenIntent()>
<android.service.notification.ZenPolicy: int getVisualEffectLights()>
<android.service.notification.ZenPolicy: int getVisualEffectNotificationList()>
<android.service.notification.ZenPolicy: int getVisualEffectPeek()>
<android.service.notification.ZenPolicy: int getVisualEffectStatusBar()>
<android.service.notification.ZenPolicy: void writeToParcel(android.os.Parcel,int)>
<android.service.notification.ZenPolicy: int CONVERSATION_SENDERS_ANYONE>
<android.service.notification.ZenPolicy: int CONVERSATION_SENDERS_IMPORTANT>
<android.service.notification.ZenPolicy: int CONVERSATION_SENDERS_NONE>
<android.service.notification.ZenPolicy: int CONVERSATION_SENDERS_UNSET>
<android.service.notification.ZenPolicy: android.os.Parcelable$Creator CREATOR>
<android.service.notification.ZenPolicy: int PEOPLE_TYPE_ANYONE>
<android.service.notification.ZenPolicy: int PEOPLE_TYPE_CONTACTS>
<android.service.notification.ZenPolicy: int PEOPLE_TYPE_NONE>
<android.service.notification.ZenPolicy: int PEOPLE_TYPE_STARRED>
<android.service.notification.ZenPolicy: int PEOPLE_TYPE_UNSET>
<android.service.notification.ZenPolicy: int STATE_ALLOW>
<android.service.notification.ZenPolicy: int STATE_DISALLOW>
<android.service.notification.ZenPolicy: int STATE_UNSET>
android.service.notification.ZenPolicy$Builder
<android.service.notification.ZenPolicy$Builder: void <init>()>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder allowAlarms(boolean)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder allowAllSounds()>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder allowCalls(int)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder allowConversations(int)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder allowEvents(boolean)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder allowMedia(boolean)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder allowMessages(int)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder allowReminders(boolean)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder allowRepeatCallers(boolean)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder allowSystem(boolean)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy build()>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder disallowAllSounds()>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder hideAllVisualEffects()>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder showAllVisualEffects()>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder showBadges(boolean)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder showFullScreenIntent(boolean)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder showInAmbientDisplay(boolean)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder showInNotificationList(boolean)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder showLights(boolean)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder showPeeking(boolean)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder showStatusBarIcons(boolean)>
android.service.quickaccesswallet.GetWalletCardsCallback
<android.service.quickaccesswallet.GetWalletCardsCallback: void onFailure(android.service.quickaccesswallet.GetWalletCardsError)>
<android.service.quickaccesswallet.GetWalletCardsCallback: void onSuccess(android.service.quickaccesswallet.GetWalletCardsResponse)>
android.service.quickaccesswallet.GetWalletCardsError
<android.service.quickaccesswallet.GetWalletCardsError: void <init>(android.graphics.drawable.Icon,java.lang.CharSequence)>
<android.service.quickaccesswallet.GetWalletCardsError: int describeContents()>
<android.service.quickaccesswallet.GetWalletCardsError: android.graphics.drawable.Icon getIcon()>
<android.service.quickaccesswallet.GetWalletCardsError: java.lang.CharSequence getMessage()>
<android.service.quickaccesswallet.GetWalletCardsError: void writeToParcel(android.os.Parcel,int)>
<android.service.quickaccesswallet.GetWalletCardsError: android.os.Parcelable$Creator CREATOR>
android.service.quickaccesswallet.GetWalletCardsRequest
<android.service.quickaccesswallet.GetWalletCardsRequest: void <init>(int,int,int,int)>
<android.service.quickaccesswallet.GetWalletCardsRequest: int describeContents()>
<android.service.quickaccesswallet.GetWalletCardsRequest: int getCardHeightPx()>
<android.service.quickaccesswallet.GetWalletCardsRequest: int getCardWidthPx()>
<android.service.quickaccesswallet.GetWalletCardsRequest: int getIconSizePx()>
<android.service.quickaccesswallet.GetWalletCardsRequest: int getMaxCards()>
<android.service.quickaccesswallet.GetWalletCardsRequest: void writeToParcel(android.os.Parcel,int)>
<android.service.quickaccesswallet.GetWalletCardsRequest: android.os.Parcelable$Creator CREATOR>
android.service.quickaccesswallet.GetWalletCardsResponse
<android.service.quickaccesswallet.GetWalletCardsResponse: void <init>(java.util.List,int)>
<android.service.quickaccesswallet.GetWalletCardsResponse: int describeContents()>
<android.service.quickaccesswallet.GetWalletCardsResponse: int getSelectedIndex()>
<android.service.quickaccesswallet.GetWalletCardsResponse: java.util.List getWalletCards()>
<android.service.quickaccesswallet.GetWalletCardsResponse: void writeToParcel(android.os.Parcel,int)>
<android.service.quickaccesswallet.GetWalletCardsResponse: android.os.Parcelable$Creator CREATOR>
android.service.quickaccesswallet.QuickAccessWalletService
<android.service.quickaccesswallet.QuickAccessWalletService: void <init>()>
<android.service.quickaccesswallet.QuickAccessWalletService: android.app.PendingIntent getTargetActivityPendingIntent()>
<android.service.quickaccesswallet.QuickAccessWalletService: android.os.IBinder onBind(android.content.Intent)>
<android.service.quickaccesswallet.QuickAccessWalletService: void onWalletCardSelected(android.service.quickaccesswallet.SelectWalletCardRequest)>
<android.service.quickaccesswallet.QuickAccessWalletService: void onWalletCardsRequested(android.service.quickaccesswallet.GetWalletCardsRequest,android.service.quickaccesswallet.GetWalletCardsCallback)>
<android.service.quickaccesswallet.QuickAccessWalletService: void onWalletDismissed()>
<android.service.quickaccesswallet.QuickAccessWalletService: void sendWalletServiceEvent(android.service.quickaccesswallet.WalletServiceEvent)>
<android.service.quickaccesswallet.QuickAccessWalletService: java.lang.String ACTION_VIEW_WALLET>
<android.service.quickaccesswallet.QuickAccessWalletService: java.lang.String ACTION_VIEW_WALLET_SETTINGS>
<android.service.quickaccesswallet.QuickAccessWalletService: java.lang.String SERVICE_INTERFACE>
<android.service.quickaccesswallet.QuickAccessWalletService: java.lang.String SERVICE_META_DATA>
android.service.quickaccesswallet.SelectWalletCardRequest
<android.service.quickaccesswallet.SelectWalletCardRequest: void <init>(java.lang.String)>
<android.service.quickaccesswallet.SelectWalletCardRequest: int describeContents()>
<android.service.quickaccesswallet.SelectWalletCardRequest: java.lang.String getCardId()>
<android.service.quickaccesswallet.SelectWalletCardRequest: void writeToParcel(android.os.Parcel,int)>
<android.service.quickaccesswallet.SelectWalletCardRequest: android.os.Parcelable$Creator CREATOR>
android.service.quickaccesswallet.WalletCard
<android.service.quickaccesswallet.WalletCard: int describeContents()>
<android.service.quickaccesswallet.WalletCard: android.graphics.drawable.Icon getCardIcon()>
<android.service.quickaccesswallet.WalletCard: java.lang.String getCardId()>
<android.service.quickaccesswallet.WalletCard: android.graphics.drawable.Icon getCardImage()>
<android.service.quickaccesswallet.WalletCard: java.lang.CharSequence getCardLabel()>
<android.service.quickaccesswallet.WalletCard: java.lang.CharSequence getContentDescription()>
<android.service.quickaccesswallet.WalletCard: android.app.PendingIntent getPendingIntent()>
<android.service.quickaccesswallet.WalletCard: void writeToParcel(android.os.Parcel,int)>
<android.service.quickaccesswallet.WalletCard: android.os.Parcelable$Creator CREATOR>
android.service.quickaccesswallet.WalletCard$Builder
<android.service.quickaccesswallet.WalletCard$Builder: void <init>(java.lang.String,android.graphics.drawable.Icon,java.lang.CharSequence,android.app.PendingIntent)>
<android.service.quickaccesswallet.WalletCard$Builder: android.service.quickaccesswallet.WalletCard build()>
<android.service.quickaccesswallet.WalletCard$Builder: android.service.quickaccesswallet.WalletCard$Builder setCardIcon(android.graphics.drawable.Icon)>
<android.service.quickaccesswallet.WalletCard$Builder: android.service.quickaccesswallet.WalletCard$Builder setCardLabel(java.lang.CharSequence)>
android.service.quickaccesswallet.WalletServiceEvent
<android.service.quickaccesswallet.WalletServiceEvent: void <init>(int)>
<android.service.quickaccesswallet.WalletServiceEvent: int describeContents()>
<android.service.quickaccesswallet.WalletServiceEvent: int getEventType()>
<android.service.quickaccesswallet.WalletServiceEvent: void writeToParcel(android.os.Parcel,int)>
<android.service.quickaccesswallet.WalletServiceEvent: android.os.Parcelable$Creator CREATOR>
<android.service.quickaccesswallet.WalletServiceEvent: int TYPE_NFC_PAYMENT_STARTED>
android.service.quicksettings.Tile
<android.service.quicksettings.Tile: int describeContents()>
<android.service.quicksettings.Tile: java.lang.CharSequence getContentDescription()>
<android.service.quicksettings.Tile: android.graphics.drawable.Icon getIcon()>
<android.service.quicksettings.Tile: java.lang.CharSequence getLabel()>
<android.service.quicksettings.Tile: int getState()>
<android.service.quicksettings.Tile: java.lang.CharSequence getStateDescription()>
<android.service.quicksettings.Tile: java.lang.CharSequence getSubtitle()>
<android.service.quicksettings.Tile: void setContentDescription(java.lang.CharSequence)>
<android.service.quicksettings.Tile: void setIcon(android.graphics.drawable.Icon)>
<android.service.quicksettings.Tile: void setLabel(java.lang.CharSequence)>
<android.service.quicksettings.Tile: void setState(int)>
<android.service.quicksettings.Tile: void setStateDescription(java.lang.CharSequence)>
<android.service.quicksettings.Tile: void setSubtitle(java.lang.CharSequence)>
<android.service.quicksettings.Tile: void updateTile()>
<android.service.quicksettings.Tile: void writeToParcel(android.os.Parcel,int)>
<android.service.quicksettings.Tile: android.os.Parcelable$Creator CREATOR>
<android.service.quicksettings.Tile: int STATE_ACTIVE>
<android.service.quicksettings.Tile: int STATE_INACTIVE>
<android.service.quicksettings.Tile: int STATE_UNAVAILABLE>
android.service.quicksettings.TileService
<android.service.quicksettings.TileService: void <init>()>
<android.service.quicksettings.TileService: android.service.quicksettings.Tile getQsTile()>
<android.service.quicksettings.TileService: boolean isLocked()>
<android.service.quicksettings.TileService: boolean isSecure()>
<android.service.quicksettings.TileService: android.os.IBinder onBind(android.content.Intent)>
<android.service.quicksettings.TileService: void onClick()>
<android.service.quicksettings.TileService: void onStartListening()>
<android.service.quicksettings.TileService: void onStopListening()>
<android.service.quicksettings.TileService: void onTileAdded()>
<android.service.quicksettings.TileService: void onTileRemoved()>
<android.service.quicksettings.TileService: void requestListeningState(android.content.Context,android.content.ComponentName)>
<android.service.quicksettings.TileService: void showDialog(android.app.Dialog)>
<android.service.quicksettings.TileService: void startActivityAndCollapse(android.content.Intent)>
<android.service.quicksettings.TileService: void unlockAndRun(java.lang.Runnable)>
<android.service.quicksettings.TileService: java.lang.String ACTION_QS_TILE>
<android.service.quicksettings.TileService: java.lang.String ACTION_QS_TILE_PREFERENCES>
<android.service.quicksettings.TileService: java.lang.String META_DATA_ACTIVE_TILE>
<android.service.quicksettings.TileService: java.lang.String META_DATA_TOGGLEABLE_TILE>
android.service.restrictions.RestrictionsReceiver
<android.service.restrictions.RestrictionsReceiver: void <init>()>
<android.service.restrictions.RestrictionsReceiver: void onReceive(android.content.Context,android.content.Intent)>
<android.service.restrictions.RestrictionsReceiver: void onRequestPermission(android.content.Context,java.lang.String,java.lang.String,java.lang.String,android.os.PersistableBundle)>
android.service.textservice.SpellCheckerService
<android.service.textservice.SpellCheckerService: void <init>()>
<android.service.textservice.SpellCheckerService: android.service.textservice.SpellCheckerService$Session createSession()>
<android.service.textservice.SpellCheckerService: android.os.IBinder onBind(android.content.Intent)>
<android.service.textservice.SpellCheckerService: java.lang.String SERVICE_INTERFACE>
android.service.textservice.SpellCheckerService$Session
<android.service.textservice.SpellCheckerService$Session: void <init>()>
<android.service.textservice.SpellCheckerService$Session: android.os.Bundle getBundle()>
<android.service.textservice.SpellCheckerService$Session: java.lang.String getLocale()>
<android.service.textservice.SpellCheckerService$Session: int getSupportedAttributes()>
<android.service.textservice.SpellCheckerService$Session: void onCancel()>
<android.service.textservice.SpellCheckerService$Session: void onClose()>
<android.service.textservice.SpellCheckerService$Session: void onCreate()>
<android.service.textservice.SpellCheckerService$Session: android.view.textservice.SentenceSuggestionsInfo[] onGetSentenceSuggestionsMultiple(android.view.textservice.TextInfo[],int)>
<android.service.textservice.SpellCheckerService$Session: android.view.textservice.SuggestionsInfo onGetSuggestions(android.view.textservice.TextInfo,int)>
<android.service.textservice.SpellCheckerService$Session: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)>
android.service.voice.VisibleActivityInfo
<android.service.voice.VisibleActivityInfo: int describeContents()>
<android.service.voice.VisibleActivityInfo: android.service.voice.VoiceInteractionSession$ActivityId getActivityId()>
<android.service.voice.VisibleActivityInfo: void writeToParcel(android.os.Parcel,int)>
<android.service.voice.VisibleActivityInfo: android.os.Parcelable$Creator CREATOR>
android.service.voice.VoiceInteractionService
<android.service.voice.VoiceInteractionService: void <init>()>
<android.service.voice.VoiceInteractionService: int getDisabledShowContext()>
<android.service.voice.VoiceInteractionService: boolean isActiveService(android.content.Context,android.content.ComponentName)>
<android.service.voice.VoiceInteractionService: android.os.IBinder onBind(android.content.Intent)>
<android.service.voice.VoiceInteractionService: java.util.Set onGetSupportedVoiceActions(java.util.Set)>
<android.service.voice.VoiceInteractionService: void onLaunchVoiceAssistFromKeyguard()>
<android.service.voice.VoiceInteractionService: void onReady()>
<android.service.voice.VoiceInteractionService: void onShutdown()>
<android.service.voice.VoiceInteractionService: void setDisabledShowContext(int)>
<android.service.voice.VoiceInteractionService: void setUiHints(android.os.Bundle)>
<android.service.voice.VoiceInteractionService: void showSession(android.os.Bundle,int)>
<android.service.voice.VoiceInteractionService: java.lang.String SERVICE_INTERFACE>
<android.service.voice.VoiceInteractionService: java.lang.String SERVICE_META_DATA>
android.service.voice.VoiceInteractionSession
<android.service.voice.VoiceInteractionSession: void <init>(android.content.Context)>
<android.service.voice.VoiceInteractionSession: void <init>(android.content.Context,android.os.Handler)>
<android.service.voice.VoiceInteractionSession: void closeSystemDialogs()>
<android.service.voice.VoiceInteractionSession: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.service.voice.VoiceInteractionSession: void finish()>
<android.service.voice.VoiceInteractionSession: android.content.Context getContext()>
<android.service.voice.VoiceInteractionSession: int getDisabledShowContext()>
<android.service.voice.VoiceInteractionSession: android.view.LayoutInflater getLayoutInflater()>
<android.service.voice.VoiceInteractionSession: int getUserDisabledShowContext()>
<android.service.voice.VoiceInteractionSession: android.app.Dialog getWindow()>
<android.service.voice.VoiceInteractionSession: void hide()>
<android.service.voice.VoiceInteractionSession: void onAssistStructureFailure(java.lang.Throwable)>
<android.service.voice.VoiceInteractionSession: void onBackPressed()>
<android.service.voice.VoiceInteractionSession: void onCancelRequest(android.service.voice.VoiceInteractionSession$Request)>
<android.service.voice.VoiceInteractionSession: void onCloseSystemDialogs()>
<android.service.voice.VoiceInteractionSession: void onComputeInsets(android.service.voice.VoiceInteractionSession$Insets)>
<android.service.voice.VoiceInteractionSession: void onConfigurationChanged(android.content.res.Configuration)>
<android.service.voice.VoiceInteractionSession: void onCreate()>
<android.service.voice.VoiceInteractionSession: android.view.View onCreateContentView()>
<android.service.voice.VoiceInteractionSession: void onDestroy()>
<android.service.voice.VoiceInteractionSession: void onDirectActionsInvalidated(android.service.voice.VoiceInteractionSession$ActivityId)>
<android.service.voice.VoiceInteractionSession: boolean[] onGetSupportedCommands(java.lang.String[])>
<android.service.voice.VoiceInteractionSession: void onHandleAssist(android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent)>
<android.service.voice.VoiceInteractionSession: void onHandleAssist(android.service.voice.VoiceInteractionSession$AssistState)>
<android.service.voice.VoiceInteractionSession: void onHandleAssistSecondary(android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,int,int)>
<android.service.voice.VoiceInteractionSession: void onHandleScreenshot(android.graphics.Bitmap)>
<android.service.voice.VoiceInteractionSession: void onHide()>
<android.service.voice.VoiceInteractionSession: boolean onKeyDown(int,android.view.KeyEvent)>
<android.service.voice.VoiceInteractionSession: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.service.voice.VoiceInteractionSession: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.service.voice.VoiceInteractionSession: boolean onKeyUp(int,android.view.KeyEvent)>
<android.service.voice.VoiceInteractionSession: void onLockscreenShown()>
<android.service.voice.VoiceInteractionSession: void onLowMemory()>
<android.service.voice.VoiceInteractionSession: void onPrepareShow(android.os.Bundle,int)>
<android.service.voice.VoiceInteractionSession: void onRequestAbortVoice(android.service.voice.VoiceInteractionSession$AbortVoiceRequest)>
<android.service.voice.VoiceInteractionSession: void onRequestCommand(android.service.voice.VoiceInteractionSession$CommandRequest)>
<android.service.voice.VoiceInteractionSession: void onRequestCompleteVoice(android.service.voice.VoiceInteractionSession$CompleteVoiceRequest)>
<android.service.voice.VoiceInteractionSession: void onRequestConfirmation(android.service.voice.VoiceInteractionSession$ConfirmationRequest)>
<android.service.voice.VoiceInteractionSession: void onRequestPickOption(android.service.voice.VoiceInteractionSession$PickOptionRequest)>
<android.service.voice.VoiceInteractionSession: void onShow(android.os.Bundle,int)>
<android.service.voice.VoiceInteractionSession: void onTaskFinished(android.content.Intent,int)>
<android.service.voice.VoiceInteractionSession: void onTaskStarted(android.content.Intent,int)>
<android.service.voice.VoiceInteractionSession: void onTrimMemory(int)>
<android.service.voice.VoiceInteractionSession: void performDirectAction(android.app.DirectAction,android.os.Bundle,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.service.voice.VoiceInteractionSession: void registerVisibleActivityCallback(java.util.concurrent.Executor,android.service.voice.VoiceInteractionSession$VisibleActivityCallback)>
<android.service.voice.VoiceInteractionSession: void requestDirectActions(android.service.voice.VoiceInteractionSession$ActivityId,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.service.voice.VoiceInteractionSession: void setContentView(android.view.View)>
<android.service.voice.VoiceInteractionSession: void setDisabledShowContext(int)>
<android.service.voice.VoiceInteractionSession: void setKeepAwake(boolean)>
<android.service.voice.VoiceInteractionSession: void setTheme(int)>
<android.service.voice.VoiceInteractionSession: void setUiEnabled(boolean)>
<android.service.voice.VoiceInteractionSession: void show(android.os.Bundle,int)>
<android.service.voice.VoiceInteractionSession: void startAssistantActivity(android.content.Intent)>
<android.service.voice.VoiceInteractionSession: void startVoiceActivity(android.content.Intent)>
<android.service.voice.VoiceInteractionSession: void unregisterVisibleActivityCallback(android.service.voice.VoiceInteractionSession$VisibleActivityCallback)>
<android.service.voice.VoiceInteractionSession: int SHOW_SOURCE_ACTIVITY>
<android.service.voice.VoiceInteractionSession: int SHOW_SOURCE_APPLICATION>
<android.service.voice.VoiceInteractionSession: int SHOW_SOURCE_ASSIST_GESTURE>
<android.service.voice.VoiceInteractionSession: int SHOW_SOURCE_AUTOMOTIVE_SYSTEM_UI>
<android.service.voice.VoiceInteractionSession: int SHOW_SOURCE_NOTIFICATION>
<android.service.voice.VoiceInteractionSession: int SHOW_SOURCE_PUSH_TO_TALK>
<android.service.voice.VoiceInteractionSession: int SHOW_WITH_ASSIST>
<android.service.voice.VoiceInteractionSession: int SHOW_WITH_SCREENSHOT>
android.service.voice.VoiceInteractionSession$AbortVoiceRequest
<android.service.voice.VoiceInteractionSession$AbortVoiceRequest: java.lang.CharSequence getMessage()>
<android.service.voice.VoiceInteractionSession$AbortVoiceRequest: android.app.VoiceInteractor$Prompt getVoicePrompt()>
<android.service.voice.VoiceInteractionSession$AbortVoiceRequest: void sendAbortResult(android.os.Bundle)>
android.service.voice.VoiceInteractionSession$ActivityId
android.service.voice.VoiceInteractionSession$AssistState
<android.service.voice.VoiceInteractionSession$AssistState: android.service.voice.VoiceInteractionSession$ActivityId getActivityId()>
<android.service.voice.VoiceInteractionSession$AssistState: android.app.assist.AssistContent getAssistContent()>
<android.service.voice.VoiceInteractionSession$AssistState: android.os.Bundle getAssistData()>
<android.service.voice.VoiceInteractionSession$AssistState: android.app.assist.AssistStructure getAssistStructure()>
<android.service.voice.VoiceInteractionSession$AssistState: int getCount()>
<android.service.voice.VoiceInteractionSession$AssistState: int getIndex()>
<android.service.voice.VoiceInteractionSession$AssistState: boolean isFocused()>
android.service.voice.VoiceInteractionSession$CommandRequest
<android.service.voice.VoiceInteractionSession$CommandRequest: java.lang.String getCommand()>
<android.service.voice.VoiceInteractionSession$CommandRequest: void sendIntermediateResult(android.os.Bundle)>
<android.service.voice.VoiceInteractionSession$CommandRequest: void sendResult(android.os.Bundle)>
android.service.voice.VoiceInteractionSession$CompleteVoiceRequest
<android.service.voice.VoiceInteractionSession$CompleteVoiceRequest: java.lang.CharSequence getMessage()>
<android.service.voice.VoiceInteractionSession$CompleteVoiceRequest: android.app.VoiceInteractor$Prompt getVoicePrompt()>
<android.service.voice.VoiceInteractionSession$CompleteVoiceRequest: void sendCompleteResult(android.os.Bundle)>
android.service.voice.VoiceInteractionSession$ConfirmationRequest
<android.service.voice.VoiceInteractionSession$ConfirmationRequest: java.lang.CharSequence getPrompt()>
<android.service.voice.VoiceInteractionSession$ConfirmationRequest: android.app.VoiceInteractor$Prompt getVoicePrompt()>
<android.service.voice.VoiceInteractionSession$ConfirmationRequest: void sendConfirmationResult(boolean,android.os.Bundle)>
android.service.voice.VoiceInteractionSession$Insets
<android.service.voice.VoiceInteractionSession$Insets: void <init>()>
<android.service.voice.VoiceInteractionSession$Insets: int TOUCHABLE_INSETS_CONTENT>
<android.service.voice.VoiceInteractionSession$Insets: int TOUCHABLE_INSETS_FRAME>
<android.service.voice.VoiceInteractionSession$Insets: int TOUCHABLE_INSETS_REGION>
<android.service.voice.VoiceInteractionSession$Insets: android.graphics.Rect contentInsets>
<android.service.voice.VoiceInteractionSession$Insets: int touchableInsets>
<android.service.voice.VoiceInteractionSession$Insets: android.graphics.Region touchableRegion>
android.service.voice.VoiceInteractionSession$PickOptionRequest
<android.service.voice.VoiceInteractionSession$PickOptionRequest: android.app.VoiceInteractor$PickOptionRequest$Option[] getOptions()>
<android.service.voice.VoiceInteractionSession$PickOptionRequest: java.lang.CharSequence getPrompt()>
<android.service.voice.VoiceInteractionSession$PickOptionRequest: android.app.VoiceInteractor$Prompt getVoicePrompt()>
<android.service.voice.VoiceInteractionSession$PickOptionRequest: void sendIntermediatePickOptionResult(android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>
<android.service.voice.VoiceInteractionSession$PickOptionRequest: void sendPickOptionResult(android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>
android.service.voice.VoiceInteractionSession$Request
<android.service.voice.VoiceInteractionSession$Request: void cancel()>
<android.service.voice.VoiceInteractionSession$Request: java.lang.String getCallingPackage()>
<android.service.voice.VoiceInteractionSession$Request: int getCallingUid()>
<android.service.voice.VoiceInteractionSession$Request: android.os.Bundle getExtras()>
<android.service.voice.VoiceInteractionSession$Request: boolean isActive()>
android.service.voice.VoiceInteractionSession$VisibleActivityCallback
<android.service.voice.VoiceInteractionSession$VisibleActivityCallback: void onInvisible(android.service.voice.VoiceInteractionSession$ActivityId)>
<android.service.voice.VoiceInteractionSession$VisibleActivityCallback: void onVisible(android.service.voice.VisibleActivityInfo)>
android.service.voice.VoiceInteractionSessionService
<android.service.voice.VoiceInteractionSessionService: void <init>()>
<android.service.voice.VoiceInteractionSessionService: android.os.IBinder onBind(android.content.Intent)>
<android.service.voice.VoiceInteractionSessionService: android.service.voice.VoiceInteractionSession onNewSession(android.os.Bundle)>
android.service.vr.VrListenerService
<android.service.vr.VrListenerService: void <init>()>
<android.service.vr.VrListenerService: boolean isVrModePackageEnabled(android.content.Context,android.content.ComponentName)>
<android.service.vr.VrListenerService: android.os.IBinder onBind(android.content.Intent)>
<android.service.vr.VrListenerService: void onCurrentVrActivityChanged(android.content.ComponentName)>
<android.service.vr.VrListenerService: java.lang.String SERVICE_INTERFACE>
android.service.wallpaper.WallpaperService
<android.service.wallpaper.WallpaperService: void <init>()>
<android.service.wallpaper.WallpaperService: android.os.IBinder onBind(android.content.Intent)>
<android.service.wallpaper.WallpaperService: android.service.wallpaper.WallpaperService$Engine onCreateEngine()>
<android.service.wallpaper.WallpaperService: java.lang.String SERVICE_INTERFACE>
<android.service.wallpaper.WallpaperService: java.lang.String SERVICE_META_DATA>
android.service.wallpaper.WallpaperService$Engine
<android.service.wallpaper.WallpaperService$Engine: void <init>(android.service.wallpaper.WallpaperService)>
<android.service.wallpaper.WallpaperService$Engine: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.service.wallpaper.WallpaperService$Engine: int getDesiredMinimumHeight()>
<android.service.wallpaper.WallpaperService$Engine: int getDesiredMinimumWidth()>
<android.service.wallpaper.WallpaperService$Engine: android.content.Context getDisplayContext()>
<android.service.wallpaper.WallpaperService$Engine: android.view.SurfaceHolder getSurfaceHolder()>
<android.service.wallpaper.WallpaperService$Engine: boolean isPreview()>
<android.service.wallpaper.WallpaperService$Engine: boolean isVisible()>
<android.service.wallpaper.WallpaperService$Engine: void notifyColorsChanged()>
<android.service.wallpaper.WallpaperService$Engine: void onApplyWindowInsets(android.view.WindowInsets)>
<android.service.wallpaper.WallpaperService$Engine: android.os.Bundle onCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)>
<android.service.wallpaper.WallpaperService$Engine: android.app.WallpaperColors onComputeColors()>
<android.service.wallpaper.WallpaperService$Engine: void onCreate(android.view.SurfaceHolder)>
<android.service.wallpaper.WallpaperService$Engine: void onDesiredSizeChanged(int,int)>
<android.service.wallpaper.WallpaperService$Engine: void onDestroy()>
<android.service.wallpaper.WallpaperService$Engine: void onOffsetsChanged(float,float,float,float,int,int)>
<android.service.wallpaper.WallpaperService$Engine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)>
<android.service.wallpaper.WallpaperService$Engine: void onSurfaceCreated(android.view.SurfaceHolder)>
<android.service.wallpaper.WallpaperService$Engine: void onSurfaceDestroyed(android.view.SurfaceHolder)>
<android.service.wallpaper.WallpaperService$Engine: void onSurfaceRedrawNeeded(android.view.SurfaceHolder)>
<android.service.wallpaper.WallpaperService$Engine: void onTouchEvent(android.view.MotionEvent)>
<android.service.wallpaper.WallpaperService$Engine: void onVisibilityChanged(boolean)>
<android.service.wallpaper.WallpaperService$Engine: void onZoomChanged(float)>
<android.service.wallpaper.WallpaperService$Engine: void setOffsetNotificationsEnabled(boolean)>
<android.service.wallpaper.WallpaperService$Engine: void setTouchEventsEnabled(boolean)>
android.speech.RecognitionListener
<android.speech.RecognitionListener: void onBeginningOfSpeech()>
<android.speech.RecognitionListener: void onBufferReceived(byte[])>
<android.speech.RecognitionListener: void onEndOfSegmentedSession()>
<android.speech.RecognitionListener: void onEndOfSpeech()>
<android.speech.RecognitionListener: void onError(int)>
<android.speech.RecognitionListener: void onEvent(int,android.os.Bundle)>
<android.speech.RecognitionListener: void onPartialResults(android.os.Bundle)>
<android.speech.RecognitionListener: void onReadyForSpeech(android.os.Bundle)>
<android.speech.RecognitionListener: void onResults(android.os.Bundle)>
<android.speech.RecognitionListener: void onRmsChanged(float)>
<android.speech.RecognitionListener: void onSegmentResults(android.os.Bundle)>
android.speech.RecognitionService
<android.speech.RecognitionService: void <init>()>
<android.speech.RecognitionService: android.os.IBinder onBind(android.content.Intent)>
<android.speech.RecognitionService: void onCancel(android.speech.RecognitionService$Callback)>
<android.speech.RecognitionService: void onCheckRecognitionSupport(android.content.Intent,android.speech.RecognitionService$SupportCallback)>
<android.speech.RecognitionService: void onStartListening(android.content.Intent,android.speech.RecognitionService$Callback)>
<android.speech.RecognitionService: void onStopListening(android.speech.RecognitionService$Callback)>
<android.speech.RecognitionService: void onTriggerModelDownload(android.content.Intent)>
<android.speech.RecognitionService: java.lang.String SERVICE_INTERFACE>
<android.speech.RecognitionService: java.lang.String SERVICE_META_DATA>
android.speech.RecognitionService$Callback
<android.speech.RecognitionService$Callback: void beginningOfSpeech()>
<android.speech.RecognitionService$Callback: void bufferReceived(byte[])>
<android.speech.RecognitionService$Callback: void endOfSegmentedSession()>
<android.speech.RecognitionService$Callback: void endOfSpeech()>
<android.speech.RecognitionService$Callback: void error(int)>
<android.speech.RecognitionService$Callback: android.content.AttributionSource getCallingAttributionSource()>
<android.speech.RecognitionService$Callback: int getCallingUid()>
<android.speech.RecognitionService$Callback: void partialResults(android.os.Bundle)>
<android.speech.RecognitionService$Callback: void readyForSpeech(android.os.Bundle)>
<android.speech.RecognitionService$Callback: void results(android.os.Bundle)>
<android.speech.RecognitionService$Callback: void rmsChanged(float)>
<android.speech.RecognitionService$Callback: void segmentResults(android.os.Bundle)>
android.speech.RecognitionService$SupportCallback
<android.speech.RecognitionService$SupportCallback: void onError(int)>
<android.speech.RecognitionService$SupportCallback: void onSupportResult(android.speech.RecognitionSupport)>
android.speech.RecognitionSupport
<android.speech.RecognitionSupport: int describeContents()>
<android.speech.RecognitionSupport: java.util.List getInstalledOnDeviceLanguages()>
<android.speech.RecognitionSupport: java.util.List getOnlineLanguages()>
<android.speech.RecognitionSupport: java.util.List getPendingOnDeviceLanguages()>
<android.speech.RecognitionSupport: java.util.List getSupportedOnDeviceLanguages()>
<android.speech.RecognitionSupport: void writeToParcel(android.os.Parcel,int)>
<android.speech.RecognitionSupport: android.os.Parcelable$Creator CREATOR>
android.speech.RecognitionSupport$Builder
<android.speech.RecognitionSupport$Builder: void <init>()>
<android.speech.RecognitionSupport$Builder: android.speech.RecognitionSupport$Builder addInstalledOnDeviceLanguage(java.lang.String)>
<android.speech.RecognitionSupport$Builder: android.speech.RecognitionSupport$Builder addOnlineLanguage(java.lang.String)>
<android.speech.RecognitionSupport$Builder: android.speech.RecognitionSupport$Builder addPendingOnDeviceLanguage(java.lang.String)>
<android.speech.RecognitionSupport$Builder: android.speech.RecognitionSupport$Builder addSupportedOnDeviceLanguage(java.lang.String)>
<android.speech.RecognitionSupport$Builder: android.speech.RecognitionSupport build()>
<android.speech.RecognitionSupport$Builder: android.speech.RecognitionSupport$Builder setInstalledOnDeviceLanguages(java.util.List)>
<android.speech.RecognitionSupport$Builder: android.speech.RecognitionSupport$Builder setOnlineLanguages(java.util.List)>
<android.speech.RecognitionSupport$Builder: android.speech.RecognitionSupport$Builder setPendingOnDeviceLanguages(java.util.List)>
<android.speech.RecognitionSupport$Builder: android.speech.RecognitionSupport$Builder setSupportedOnDeviceLanguages(java.util.List)>
android.speech.RecognitionSupportCallback
<android.speech.RecognitionSupportCallback: void onError(int)>
<android.speech.RecognitionSupportCallback: void onSupportResult(android.speech.RecognitionSupport)>
android.speech.RecognizerIntent
<android.speech.RecognizerIntent: android.content.Intent getVoiceDetailsIntent(android.content.Context)>
<android.speech.RecognizerIntent: java.lang.String ACTION_GET_LANGUAGE_DETAILS>
<android.speech.RecognizerIntent: java.lang.String ACTION_RECOGNIZE_SPEECH>
<android.speech.RecognizerIntent: java.lang.String ACTION_VOICE_SEARCH_HANDS_FREE>
<android.speech.RecognizerIntent: java.lang.String ACTION_WEB_SEARCH>
<android.speech.RecognizerIntent: java.lang.String DETAILS_META_DATA>
<android.speech.RecognizerIntent: java.lang.String EXTRA_AUDIO_INJECT_SOURCE>
<android.speech.RecognizerIntent: java.lang.String EXTRA_AUDIO_SOURCE>
<android.speech.RecognizerIntent: java.lang.String EXTRA_AUDIO_SOURCE_CHANNEL_COUNT>
<android.speech.RecognizerIntent: java.lang.String EXTRA_AUDIO_SOURCE_ENCODING>
<android.speech.RecognizerIntent: java.lang.String EXTRA_AUDIO_SOURCE_SAMPLING_RATE>
<android.speech.RecognizerIntent: java.lang.String EXTRA_BIASING_STRINGS>
<android.speech.RecognizerIntent: java.lang.String EXTRA_CALLING_PACKAGE>
<android.speech.RecognizerIntent: java.lang.String EXTRA_CONFIDENCE_SCORES>
<android.speech.RecognizerIntent: java.lang.String EXTRA_ENABLE_BIASING_DEVICE_CONTEXT>
<android.speech.RecognizerIntent: java.lang.String EXTRA_ENABLE_FORMATTING>
<android.speech.RecognizerIntent: java.lang.String EXTRA_HIDE_PARTIAL_TRAILING_PUNCTUATION>
<android.speech.RecognizerIntent: java.lang.String EXTRA_LANGUAGE>
<android.speech.RecognizerIntent: java.lang.String EXTRA_LANGUAGE_MODEL>
<android.speech.RecognizerIntent: java.lang.String EXTRA_LANGUAGE_PREFERENCE>
<android.speech.RecognizerIntent: java.lang.String EXTRA_MASK_OFFENSIVE_WORDS>
<android.speech.RecognizerIntent: java.lang.String EXTRA_MAX_RESULTS>
<android.speech.RecognizerIntent: java.lang.String EXTRA_ONLY_RETURN_LANGUAGE_PREFERENCE>
<android.speech.RecognizerIntent: java.lang.String EXTRA_ORIGIN>
<android.speech.RecognizerIntent: java.lang.String EXTRA_PARTIAL_RESULTS>
<android.speech.RecognizerIntent: java.lang.String EXTRA_PREFER_OFFLINE>
<android.speech.RecognizerIntent: java.lang.String EXTRA_PROMPT>
<android.speech.RecognizerIntent: java.lang.String EXTRA_RESULTS>
<android.speech.RecognizerIntent: java.lang.String EXTRA_RESULTS_PENDINGINTENT>
<android.speech.RecognizerIntent: java.lang.String EXTRA_RESULTS_PENDINGINTENT_BUNDLE>
<android.speech.RecognizerIntent: java.lang.String EXTRA_SECURE>
<android.speech.RecognizerIntent: java.lang.String EXTRA_SEGMENTED_SESSION>
<android.speech.RecognizerIntent: java.lang.String EXTRA_SPEECH_INPUT_COMPLETE_SILENCE_LENGTH_MILLIS>
<android.speech.RecognizerIntent: java.lang.String EXTRA_SPEECH_INPUT_MINIMUM_LENGTH_MILLIS>
<android.speech.RecognizerIntent: java.lang.String EXTRA_SPEECH_INPUT_POSSIBLY_COMPLETE_SILENCE_LENGTH_MILLIS>
<android.speech.RecognizerIntent: java.lang.String EXTRA_SUPPORTED_LANGUAGES>
<android.speech.RecognizerIntent: java.lang.String EXTRA_WEB_SEARCH_ONLY>
<android.speech.RecognizerIntent: java.lang.String FORMATTING_OPTIMIZE_LATENCY>
<android.speech.RecognizerIntent: java.lang.String FORMATTING_OPTIMIZE_QUALITY>
<android.speech.RecognizerIntent: java.lang.String LANGUAGE_MODEL_FREE_FORM>
<android.speech.RecognizerIntent: java.lang.String LANGUAGE_MODEL_WEB_SEARCH>
<android.speech.RecognizerIntent: int RESULT_AUDIO_ERROR>
<android.speech.RecognizerIntent: int RESULT_CLIENT_ERROR>
<android.speech.RecognizerIntent: int RESULT_NETWORK_ERROR>
<android.speech.RecognizerIntent: int RESULT_NO_MATCH>
<android.speech.RecognizerIntent: int RESULT_SERVER_ERROR>
android.speech.RecognizerResultsIntent
<android.speech.RecognizerResultsIntent: java.lang.String ACTION_VOICE_SEARCH_RESULTS>
<android.speech.RecognizerResultsIntent: java.lang.String EXTRA_VOICE_SEARCH_RESULT_HTML>
<android.speech.RecognizerResultsIntent: java.lang.String EXTRA_VOICE_SEARCH_RESULT_HTML_BASE_URLS>
<android.speech.RecognizerResultsIntent: java.lang.String EXTRA_VOICE_SEARCH_RESULT_HTTP_HEADERS>
<android.speech.RecognizerResultsIntent: java.lang.String EXTRA_VOICE_SEARCH_RESULT_STRINGS>
<android.speech.RecognizerResultsIntent: java.lang.String EXTRA_VOICE_SEARCH_RESULT_URLS>
<android.speech.RecognizerResultsIntent: java.lang.String URI_SCHEME_INLINE>
android.speech.SpeechRecognizer
<android.speech.SpeechRecognizer: void cancel()>
<android.speech.SpeechRecognizer: void checkRecognitionSupport(android.content.Intent,java.util.concurrent.Executor,android.speech.RecognitionSupportCallback)>
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createOnDeviceSpeechRecognizer(android.content.Context)>
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context)>
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context,android.content.ComponentName)>
<android.speech.SpeechRecognizer: void destroy()>
<android.speech.SpeechRecognizer: boolean isOnDeviceRecognitionAvailable(android.content.Context)>
<android.speech.SpeechRecognizer: boolean isRecognitionAvailable(android.content.Context)>
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)>
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)>
<android.speech.SpeechRecognizer: void stopListening()>
<android.speech.SpeechRecognizer: void triggerModelDownload(android.content.Intent)>
<android.speech.SpeechRecognizer: java.lang.String CONFIDENCE_SCORES>
<android.speech.SpeechRecognizer: int ERROR_AUDIO>
<android.speech.SpeechRecognizer: int ERROR_CANNOT_CHECK_SUPPORT>
<android.speech.SpeechRecognizer: int ERROR_CLIENT>
<android.speech.SpeechRecognizer: int ERROR_INSUFFICIENT_PERMISSIONS>
<android.speech.SpeechRecognizer: int ERROR_LANGUAGE_NOT_SUPPORTED>
<android.speech.SpeechRecognizer: int ERROR_LANGUAGE_UNAVAILABLE>
<android.speech.SpeechRecognizer: int ERROR_NETWORK>
<android.speech.SpeechRecognizer: int ERROR_NETWORK_TIMEOUT>
<android.speech.SpeechRecognizer: int ERROR_NO_MATCH>
<android.speech.SpeechRecognizer: int ERROR_RECOGNIZER_BUSY>
<android.speech.SpeechRecognizer: int ERROR_SERVER>
<android.speech.SpeechRecognizer: int ERROR_SERVER_DISCONNECTED>
<android.speech.SpeechRecognizer: int ERROR_SPEECH_TIMEOUT>
<android.speech.SpeechRecognizer: int ERROR_TOO_MANY_REQUESTS>
<android.speech.SpeechRecognizer: java.lang.String RESULTS_RECOGNITION>
android.speech.tts.SynthesisCallback
<android.speech.tts.SynthesisCallback: int audioAvailable(byte[],int,int)>
<android.speech.tts.SynthesisCallback: int done()>
<android.speech.tts.SynthesisCallback: void error()>
<android.speech.tts.SynthesisCallback: void error(int)>
<android.speech.tts.SynthesisCallback: int getMaxBufferSize()>
<android.speech.tts.SynthesisCallback: boolean hasFinished()>
<android.speech.tts.SynthesisCallback: boolean hasStarted()>
<android.speech.tts.SynthesisCallback: void rangeStart(int,int,int)>
<android.speech.tts.SynthesisCallback: int start(int,int,int)>
android.speech.tts.SynthesisRequest
<android.speech.tts.SynthesisRequest: void <init>(java.lang.String,android.os.Bundle)>
<android.speech.tts.SynthesisRequest: void <init>(java.lang.CharSequence,android.os.Bundle)>
<android.speech.tts.SynthesisRequest: int getCallerUid()>
<android.speech.tts.SynthesisRequest: java.lang.CharSequence getCharSequenceText()>
<android.speech.tts.SynthesisRequest: java.lang.String getCountry()>
<android.speech.tts.SynthesisRequest: java.lang.String getLanguage()>
<android.speech.tts.SynthesisRequest: android.os.Bundle getParams()>
<android.speech.tts.SynthesisRequest: int getPitch()>
<android.speech.tts.SynthesisRequest: int getSpeechRate()>
<android.speech.tts.SynthesisRequest: java.lang.String getText()>
<android.speech.tts.SynthesisRequest: java.lang.String getVariant()>
<android.speech.tts.SynthesisRequest: java.lang.String getVoiceName()>
android.speech.tts.TextToSpeech
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener)>
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener,java.lang.String)>
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.lang.String,int)>
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.lang.String)>
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.io.File)>
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,android.net.Uri)>
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.String,java.lang.String,int)>
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.CharSequence,java.lang.String,int)>
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.String,java.lang.String)>
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.CharSequence,java.io.File)>
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.CharSequence,android.net.Uri)>
<android.speech.tts.TextToSpeech: boolean areDefaultsEnforced()>
<android.speech.tts.TextToSpeech: java.util.Set getAvailableLanguages()>
<android.speech.tts.TextToSpeech: java.lang.String getDefaultEngine()>
<android.speech.tts.TextToSpeech: java.util.Locale getDefaultLanguage()>
<android.speech.tts.TextToSpeech: android.speech.tts.Voice getDefaultVoice()>
<android.speech.tts.TextToSpeech: java.util.List getEngines()>
<android.speech.tts.TextToSpeech: java.util.Set getFeatures(java.util.Locale)>
<android.speech.tts.TextToSpeech: java.util.Locale getLanguage()>
<android.speech.tts.TextToSpeech: int getMaxSpeechInputLength()>
<android.speech.tts.TextToSpeech: android.speech.tts.Voice getVoice()>
<android.speech.tts.TextToSpeech: java.util.Set getVoices()>
<android.speech.tts.TextToSpeech: int isLanguageAvailable(java.util.Locale)>
<android.speech.tts.TextToSpeech: boolean isSpeaking()>
<android.speech.tts.TextToSpeech: int playEarcon(java.lang.String,int,android.os.Bundle,java.lang.String)>
<android.speech.tts.TextToSpeech: int playEarcon(java.lang.String,int,java.util.HashMap)>
<android.speech.tts.TextToSpeech: int playSilence(long,int,java.util.HashMap)>
<android.speech.tts.TextToSpeech: int playSilentUtterance(long,int,java.lang.String)>
<android.speech.tts.TextToSpeech: int setAudioAttributes(android.media.AudioAttributes)>
<android.speech.tts.TextToSpeech: int setEngineByPackageName(java.lang.String)>
<android.speech.tts.TextToSpeech: int setLanguage(java.util.Locale)>
<android.speech.tts.TextToSpeech: int setOnUtteranceCompletedListener(android.speech.tts.TextToSpeech$OnUtteranceCompletedListener)>
<android.speech.tts.TextToSpeech: int setOnUtteranceProgressListener(android.speech.tts.UtteranceProgressListener)>
<android.speech.tts.TextToSpeech: int setPitch(float)>
<android.speech.tts.TextToSpeech: int setSpeechRate(float)>
<android.speech.tts.TextToSpeech: int setVoice(android.speech.tts.Voice)>
<android.speech.tts.TextToSpeech: void shutdown()>
<android.speech.tts.TextToSpeech: int speak(java.lang.CharSequence,int,android.os.Bundle,java.lang.String)>
<android.speech.tts.TextToSpeech: int speak(java.lang.String,int,java.util.HashMap)>
<android.speech.tts.TextToSpeech: int stop()>
<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.CharSequence,android.os.Bundle,android.os.ParcelFileDescriptor,java.lang.String)>
<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.CharSequence,android.os.Bundle,java.io.File,java.lang.String)>
<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.String,java.util.HashMap,java.lang.String)>
<android.speech.tts.TextToSpeech: java.lang.String ACTION_TTS_QUEUE_PROCESSING_COMPLETED>
<android.speech.tts.TextToSpeech: int ERROR>
<android.speech.tts.TextToSpeech: int ERROR_INVALID_REQUEST>
<android.speech.tts.TextToSpeech: int ERROR_NETWORK>
<android.speech.tts.TextToSpeech: int ERROR_NETWORK_TIMEOUT>
<android.speech.tts.TextToSpeech: int ERROR_NOT_INSTALLED_YET>
<android.speech.tts.TextToSpeech: int ERROR_OUTPUT>
<android.speech.tts.TextToSpeech: int ERROR_SERVICE>
<android.speech.tts.TextToSpeech: int ERROR_SYNTHESIS>
<android.speech.tts.TextToSpeech: int LANG_AVAILABLE>
<android.speech.tts.TextToSpeech: int LANG_COUNTRY_AVAILABLE>
<android.speech.tts.TextToSpeech: int LANG_COUNTRY_VAR_AVAILABLE>
<android.speech.tts.TextToSpeech: int LANG_MISSING_DATA>
<android.speech.tts.TextToSpeech: int LANG_NOT_SUPPORTED>
<android.speech.tts.TextToSpeech: int QUEUE_ADD>
<android.speech.tts.TextToSpeech: int QUEUE_FLUSH>
<android.speech.tts.TextToSpeech: int STOPPED>
<android.speech.tts.TextToSpeech: int SUCCESS>
android.speech.tts.TextToSpeech$Engine
<android.speech.tts.TextToSpeech$Engine: void <init>(android.speech.tts.TextToSpeech)>
<android.speech.tts.TextToSpeech$Engine: java.lang.String ACTION_CHECK_TTS_DATA>
<android.speech.tts.TextToSpeech$Engine: java.lang.String ACTION_GET_SAMPLE_TEXT>
<android.speech.tts.TextToSpeech$Engine: java.lang.String ACTION_INSTALL_TTS_DATA>
<android.speech.tts.TextToSpeech$Engine: java.lang.String ACTION_TTS_DATA_INSTALLED>
<android.speech.tts.TextToSpeech$Engine: int CHECK_VOICE_DATA_BAD_DATA>
<android.speech.tts.TextToSpeech$Engine: int CHECK_VOICE_DATA_FAIL>
<android.speech.tts.TextToSpeech$Engine: int CHECK_VOICE_DATA_MISSING_DATA>
<android.speech.tts.TextToSpeech$Engine: int CHECK_VOICE_DATA_MISSING_VOLUME>
<android.speech.tts.TextToSpeech$Engine: int CHECK_VOICE_DATA_PASS>
<android.speech.tts.TextToSpeech$Engine: int DEFAULT_STREAM>
<android.speech.tts.TextToSpeech$Engine: java.lang.String EXTRA_AVAILABLE_VOICES>
<android.speech.tts.TextToSpeech$Engine: java.lang.String EXTRA_CHECK_VOICE_DATA_FOR>
<android.speech.tts.TextToSpeech$Engine: java.lang.String EXTRA_SAMPLE_TEXT>
<android.speech.tts.TextToSpeech$Engine: java.lang.String EXTRA_TTS_DATA_INSTALLED>
<android.speech.tts.TextToSpeech$Engine: java.lang.String EXTRA_UNAVAILABLE_VOICES>
<android.speech.tts.TextToSpeech$Engine: java.lang.String EXTRA_VOICE_DATA_FILES>
<android.speech.tts.TextToSpeech$Engine: java.lang.String EXTRA_VOICE_DATA_FILES_INFO>
<android.speech.tts.TextToSpeech$Engine: java.lang.String EXTRA_VOICE_DATA_ROOT_DIRECTORY>
<android.speech.tts.TextToSpeech$Engine: java.lang.String INTENT_ACTION_TTS_SERVICE>
<android.speech.tts.TextToSpeech$Engine: java.lang.String KEY_FEATURE_EMBEDDED_SYNTHESIS>
<android.speech.tts.TextToSpeech$Engine: java.lang.String KEY_FEATURE_NETWORK_RETRIES_COUNT>
<android.speech.tts.TextToSpeech$Engine: java.lang.String KEY_FEATURE_NETWORK_SYNTHESIS>
<android.speech.tts.TextToSpeech$Engine: java.lang.String KEY_FEATURE_NETWORK_TIMEOUT_MS>
<android.speech.tts.TextToSpeech$Engine: java.lang.String KEY_FEATURE_NOT_INSTALLED>
<android.speech.tts.TextToSpeech$Engine: java.lang.String KEY_PARAM_PAN>
<android.speech.tts.TextToSpeech$Engine: java.lang.String KEY_PARAM_SESSION_ID>
<android.speech.tts.TextToSpeech$Engine: java.lang.String KEY_PARAM_STREAM>
<android.speech.tts.TextToSpeech$Engine: java.lang.String KEY_PARAM_UTTERANCE_ID>
<android.speech.tts.TextToSpeech$Engine: java.lang.String KEY_PARAM_VOLUME>
<android.speech.tts.TextToSpeech$Engine: java.lang.String SERVICE_META_DATA>
android.speech.tts.TextToSpeech$EngineInfo
<android.speech.tts.TextToSpeech$EngineInfo: void <init>()>
<android.speech.tts.TextToSpeech$EngineInfo: int icon>
<android.speech.tts.TextToSpeech$EngineInfo: java.lang.String label>
<android.speech.tts.TextToSpeech$EngineInfo: java.lang.String name>
android.speech.tts.TextToSpeech$OnInitListener
<android.speech.tts.TextToSpeech$OnInitListener: void onInit(int)>
android.speech.tts.TextToSpeech$OnUtteranceCompletedListener
<android.speech.tts.TextToSpeech$OnUtteranceCompletedListener: void onUtteranceCompleted(java.lang.String)>
android.speech.tts.TextToSpeechService
<android.speech.tts.TextToSpeechService: void <init>()>
<android.speech.tts.TextToSpeechService: android.os.IBinder onBind(android.content.Intent)>
<android.speech.tts.TextToSpeechService: java.lang.String onGetDefaultVoiceNameFor(java.lang.String,java.lang.String,java.lang.String)>
<android.speech.tts.TextToSpeechService: java.util.Set onGetFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>
<android.speech.tts.TextToSpeechService: java.lang.String[] onGetLanguage()>
<android.speech.tts.TextToSpeechService: java.util.List onGetVoices()>
<android.speech.tts.TextToSpeechService: int onIsLanguageAvailable(java.lang.String,java.lang.String,java.lang.String)>
<android.speech.tts.TextToSpeechService: int onIsValidVoiceName(java.lang.String)>
<android.speech.tts.TextToSpeechService: int onLoadLanguage(java.lang.String,java.lang.String,java.lang.String)>
<android.speech.tts.TextToSpeechService: int onLoadVoice(java.lang.String)>
<android.speech.tts.TextToSpeechService: void onStop()>
<android.speech.tts.TextToSpeechService: void onSynthesizeText(android.speech.tts.SynthesisRequest,android.speech.tts.SynthesisCallback)>
android.speech.tts.UtteranceProgressListener
<android.speech.tts.UtteranceProgressListener: void <init>()>
<android.speech.tts.UtteranceProgressListener: void onAudioAvailable(java.lang.String,byte[])>
<android.speech.tts.UtteranceProgressListener: void onBeginSynthesis(java.lang.String,int,int,int)>
<android.speech.tts.UtteranceProgressListener: void onDone(java.lang.String)>
<android.speech.tts.UtteranceProgressListener: void onError(java.lang.String)>
<android.speech.tts.UtteranceProgressListener: void onError(java.lang.String,int)>
<android.speech.tts.UtteranceProgressListener: void onRangeStart(java.lang.String,int,int,int)>
<android.speech.tts.UtteranceProgressListener: void onStart(java.lang.String)>
<android.speech.tts.UtteranceProgressListener: void onStop(java.lang.String,boolean)>
android.speech.tts.Voice
<android.speech.tts.Voice: void <init>(java.lang.String,java.util.Locale,int,int,boolean,java.util.Set)>
<android.speech.tts.Voice: int describeContents()>
<android.speech.tts.Voice: java.util.Set getFeatures()>
<android.speech.tts.Voice: int getLatency()>
<android.speech.tts.Voice: java.util.Locale getLocale()>
<android.speech.tts.Voice: java.lang.String getName()>
<android.speech.tts.Voice: int getQuality()>
<android.speech.tts.Voice: boolean isNetworkConnectionRequired()>
<android.speech.tts.Voice: void writeToParcel(android.os.Parcel,int)>
<android.speech.tts.Voice: android.os.Parcelable$Creator CREATOR>
<android.speech.tts.Voice: int LATENCY_HIGH>
<android.speech.tts.Voice: int LATENCY_LOW>
<android.speech.tts.Voice: int LATENCY_NORMAL>
<android.speech.tts.Voice: int LATENCY_VERY_HIGH>
<android.speech.tts.Voice: int LATENCY_VERY_LOW>
<android.speech.tts.Voice: int QUALITY_HIGH>
<android.speech.tts.Voice: int QUALITY_LOW>
<android.speech.tts.Voice: int QUALITY_NORMAL>
<android.speech.tts.Voice: int QUALITY_VERY_HIGH>
<android.speech.tts.Voice: int QUALITY_VERY_LOW>
android.telecom.Call
<android.telecom.Call: void addConferenceParticipants(java.util.List)>
<android.telecom.Call: void answer(int)>
<android.telecom.Call: void conference(android.telecom.Call)>
<android.telecom.Call: void deflect(android.net.Uri)>
<android.telecom.Call: void disconnect()>
<android.telecom.Call: java.util.List getCannedTextResponses()>
<android.telecom.Call: java.util.List getChildren()>
<android.telecom.Call: java.util.List getConferenceableCalls()>
<android.telecom.Call: android.telecom.Call$Details getDetails()>
<android.telecom.Call: android.telecom.Call getGenericConferenceActiveChildCall()>
<android.telecom.Call: android.telecom.Call getParent()>
<android.telecom.Call: java.lang.String getRemainingPostDialSequence()>
<android.telecom.Call: android.telecom.Call$RttCall getRttCall()>
<android.telecom.Call: int getState()>
<android.telecom.Call: android.telecom.InCallService$VideoCall getVideoCall()>
<android.telecom.Call: void handoverTo(android.telecom.PhoneAccountHandle,int,android.os.Bundle)>
<android.telecom.Call: void hold()>
<android.telecom.Call: boolean isRttActive()>
<android.telecom.Call: void mergeConference()>
<android.telecom.Call: void phoneAccountSelected(android.telecom.PhoneAccountHandle,boolean)>
<android.telecom.Call: void playDtmfTone(char)>
<android.telecom.Call: void postDialContinue(boolean)>
<android.telecom.Call: void pullExternalCall()>
<android.telecom.Call: void putExtras(android.os.Bundle)>
<android.telecom.Call: void registerCallback(android.telecom.Call$Callback)>
<android.telecom.Call: void registerCallback(android.telecom.Call$Callback,android.os.Handler)>
<android.telecom.Call: void reject(boolean,java.lang.String)>
<android.telecom.Call: void reject(int)>
<android.telecom.Call: void removeExtras(java.util.List)>
<android.telecom.Call: void removeExtras(java.lang.String[])>
<android.telecom.Call: void respondToRttRequest(int,boolean)>
<android.telecom.Call: void sendCallEvent(java.lang.String,android.os.Bundle)>
<android.telecom.Call: void sendRttRequest()>
<android.telecom.Call: void splitFromConference()>
<android.telecom.Call: void stopDtmfTone()>
<android.telecom.Call: void stopRtt()>
<android.telecom.Call: void swapConference()>
<android.telecom.Call: void unhold()>
<android.telecom.Call: void unregisterCallback(android.telecom.Call$Callback)>
<android.telecom.Call: java.lang.String AVAILABLE_PHONE_ACCOUNTS>
<android.telecom.Call: java.lang.String EVENT_CLEAR_DIAGNOSTIC_MESSAGE>
<android.telecom.Call: java.lang.String EVENT_DISPLAY_DIAGNOSTIC_MESSAGE>
<android.telecom.Call: java.lang.String EXTRA_DIAGNOSTIC_MESSAGE>
<android.telecom.Call: java.lang.String EXTRA_DIAGNOSTIC_MESSAGE_ID>
<android.telecom.Call: java.lang.String EXTRA_LAST_EMERGENCY_CALLBACK_TIME_MILLIS>
<android.telecom.Call: java.lang.String EXTRA_SILENT_RINGING_REQUESTED>
<android.telecom.Call: java.lang.String EXTRA_SUGGESTED_PHONE_ACCOUNTS>
<android.telecom.Call: int REJECT_REASON_DECLINED>
<android.telecom.Call: int REJECT_REASON_UNWANTED>
<android.telecom.Call: int STATE_ACTIVE>
<android.telecom.Call: int STATE_AUDIO_PROCESSING>
<android.telecom.Call: int STATE_CONNECTING>
<android.telecom.Call: int STATE_DIALING>
<android.telecom.Call: int STATE_DISCONNECTED>
<android.telecom.Call: int STATE_DISCONNECTING>
<android.telecom.Call: int STATE_HOLDING>
<android.telecom.Call: int STATE_NEW>
<android.telecom.Call: int STATE_PULLING_CALL>
<android.telecom.Call: int STATE_RINGING>
<android.telecom.Call: int STATE_SELECT_PHONE_ACCOUNT>
<android.telecom.Call: int STATE_SIMULATED_RINGING>
android.telecom.Call$Callback
<android.telecom.Call$Callback: void <init>()>
<android.telecom.Call$Callback: void onCallDestroyed(android.telecom.Call)>
<android.telecom.Call$Callback: void onCannedTextResponsesLoaded(android.telecom.Call,java.util.List)>
<android.telecom.Call$Callback: void onChildrenChanged(android.telecom.Call,java.util.List)>
<android.telecom.Call$Callback: void onConferenceableCallsChanged(android.telecom.Call,java.util.List)>
<android.telecom.Call$Callback: void onConnectionEvent(android.telecom.Call,java.lang.String,android.os.Bundle)>
<android.telecom.Call$Callback: void onDetailsChanged(android.telecom.Call,android.telecom.Call$Details)>
<android.telecom.Call$Callback: void onHandoverComplete(android.telecom.Call)>
<android.telecom.Call$Callback: void onHandoverFailed(android.telecom.Call,int)>
<android.telecom.Call$Callback: void onParentChanged(android.telecom.Call,android.telecom.Call)>
<android.telecom.Call$Callback: void onPostDialWait(android.telecom.Call,java.lang.String)>
<android.telecom.Call$Callback: void onRttInitiationFailure(android.telecom.Call,int)>
<android.telecom.Call$Callback: void onRttModeChanged(android.telecom.Call,int)>
<android.telecom.Call$Callback: void onRttRequest(android.telecom.Call,int)>
<android.telecom.Call$Callback: void onRttStatusChanged(android.telecom.Call,boolean,android.telecom.Call$RttCall)>
<android.telecom.Call$Callback: void onStateChanged(android.telecom.Call,int)>
<android.telecom.Call$Callback: void onVideoCallChanged(android.telecom.Call,android.telecom.InCallService$VideoCall)>
<android.telecom.Call$Callback: int HANDOVER_FAILURE_DEST_APP_REJECTED>
<android.telecom.Call$Callback: int HANDOVER_FAILURE_NOT_SUPPORTED>
<android.telecom.Call$Callback: int HANDOVER_FAILURE_ONGOING_EMERGENCY_CALL>
<android.telecom.Call$Callback: int HANDOVER_FAILURE_UNKNOWN>
<android.telecom.Call$Callback: int HANDOVER_FAILURE_USER_REJECTED>
android.telecom.Call$Details
<android.telecom.Call$Details: boolean can(int,int)>
<android.telecom.Call$Details: boolean can(int)>
<android.telecom.Call$Details: java.lang.String capabilitiesToString(int)>
<android.telecom.Call$Details: android.telecom.PhoneAccountHandle getAccountHandle()>
<android.telecom.Call$Details: int getCallCapabilities()>
<android.telecom.Call$Details: int getCallDirection()>
<android.telecom.Call$Details: int getCallProperties()>
<android.telecom.Call$Details: java.lang.String getCallerDisplayName()>
<android.telecom.Call$Details: int getCallerDisplayNamePresentation()>
<android.telecom.Call$Details: int getCallerNumberVerificationStatus()>
<android.telecom.Call$Details: long getConnectTimeMillis()>
<android.telecom.Call$Details: java.lang.String getContactDisplayName()>
<android.telecom.Call$Details: long getCreationTimeMillis()>
<android.telecom.Call$Details: android.telecom.DisconnectCause getDisconnectCause()>
<android.telecom.Call$Details: android.os.Bundle getExtras()>
<android.telecom.Call$Details: android.telecom.GatewayInfo getGatewayInfo()>
<android.telecom.Call$Details: android.net.Uri getHandle()>
<android.telecom.Call$Details: int getHandlePresentation()>
<android.telecom.Call$Details: android.os.Bundle getIntentExtras()>
<android.telecom.Call$Details: int getState()>
<android.telecom.Call$Details: android.telecom.StatusHints getStatusHints()>
<android.telecom.Call$Details: int getVideoState()>
<android.telecom.Call$Details: boolean hasProperty(int,int)>
<android.telecom.Call$Details: boolean hasProperty(int)>
<android.telecom.Call$Details: java.lang.String propertiesToString(int)>
<android.telecom.Call$Details: int CAPABILITY_ADD_PARTICIPANT>
<android.telecom.Call$Details: int CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO>
<android.telecom.Call$Details: int CAPABILITY_CAN_PAUSE_VIDEO>
<android.telecom.Call$Details: int CAPABILITY_CAN_PULL_CALL>
<android.telecom.Call$Details: int CAPABILITY_DISCONNECT_FROM_CONFERENCE>
<android.telecom.Call$Details: int CAPABILITY_HOLD>
<android.telecom.Call$Details: int CAPABILITY_MANAGE_CONFERENCE>
<android.telecom.Call$Details: int CAPABILITY_MERGE_CONFERENCE>
<android.telecom.Call$Details: int CAPABILITY_MUTE>
<android.telecom.Call$Details: int CAPABILITY_REMOTE_PARTY_SUPPORTS_RTT>
<android.telecom.Call$Details: int CAPABILITY_RESPOND_VIA_TEXT>
<android.telecom.Call$Details: int CAPABILITY_SEPARATE_FROM_CONFERENCE>
<android.telecom.Call$Details: int CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL>
<android.telecom.Call$Details: int CAPABILITY_SUPPORTS_VT_LOCAL_RX>
<android.telecom.Call$Details: int CAPABILITY_SUPPORTS_VT_LOCAL_TX>
<android.telecom.Call$Details: int CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL>
<android.telecom.Call$Details: int CAPABILITY_SUPPORTS_VT_REMOTE_RX>
<android.telecom.Call$Details: int CAPABILITY_SUPPORTS_VT_REMOTE_TX>
<android.telecom.Call$Details: int CAPABILITY_SUPPORT_DEFLECT>
<android.telecom.Call$Details: int CAPABILITY_SUPPORT_HOLD>
<android.telecom.Call$Details: int CAPABILITY_SWAP_CONFERENCE>
<android.telecom.Call$Details: int DIRECTION_INCOMING>
<android.telecom.Call$Details: int DIRECTION_OUTGOING>
<android.telecom.Call$Details: int DIRECTION_UNKNOWN>
<android.telecom.Call$Details: int PROPERTY_ASSISTED_DIALING>
<android.telecom.Call$Details: int PROPERTY_CONFERENCE>
<android.telecom.Call$Details: int PROPERTY_CROSS_SIM>
<android.telecom.Call$Details: int PROPERTY_EMERGENCY_CALLBACK_MODE>
<android.telecom.Call$Details: int PROPERTY_ENTERPRISE_CALL>
<android.telecom.Call$Details: int PROPERTY_GENERIC_CONFERENCE>
<android.telecom.Call$Details: int PROPERTY_HAS_CDMA_VOICE_PRIVACY>
<android.telecom.Call$Details: int PROPERTY_HIGH_DEF_AUDIO>
<android.telecom.Call$Details: int PROPERTY_IS_ADHOC_CONFERENCE>
<android.telecom.Call$Details: int PROPERTY_IS_EXTERNAL_CALL>
<android.telecom.Call$Details: int PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALL>
<android.telecom.Call$Details: int PROPERTY_RTT>
<android.telecom.Call$Details: int PROPERTY_SELF_MANAGED>
<android.telecom.Call$Details: int PROPERTY_VOIP_AUDIO_MODE>
<android.telecom.Call$Details: int PROPERTY_WIFI>
android.telecom.Call$RttCall
<android.telecom.Call$RttCall: int getRttAudioMode()>
<android.telecom.Call$RttCall: java.lang.String read()>
<android.telecom.Call$RttCall: java.lang.String readImmediately()>
<android.telecom.Call$RttCall: void setRttMode(int)>
<android.telecom.Call$RttCall: void write(java.lang.String)>
<android.telecom.Call$RttCall: int RTT_MODE_FULL>
<android.telecom.Call$RttCall: int RTT_MODE_HCO>
<android.telecom.Call$RttCall: int RTT_MODE_VCO>
android.telecom.CallAudioState
<android.telecom.CallAudioState: void <init>(boolean,int,int)>
<android.telecom.CallAudioState: java.lang.String audioRouteToString(int)>
<android.telecom.CallAudioState: int describeContents()>
<android.telecom.CallAudioState: android.bluetooth.BluetoothDevice getActiveBluetoothDevice()>
<android.telecom.CallAudioState: int getRoute()>
<android.telecom.CallAudioState: java.util.Collection getSupportedBluetoothDevices()>
<android.telecom.CallAudioState: int getSupportedRouteMask()>
<android.telecom.CallAudioState: boolean isMuted()>
<android.telecom.CallAudioState: void writeToParcel(android.os.Parcel,int)>
<android.telecom.CallAudioState: android.os.Parcelable$Creator CREATOR>
<android.telecom.CallAudioState: int ROUTE_BLUETOOTH>
<android.telecom.CallAudioState: int ROUTE_EARPIECE>
<android.telecom.CallAudioState: int ROUTE_SPEAKER>
<android.telecom.CallAudioState: int ROUTE_WIRED_HEADSET>
<android.telecom.CallAudioState: int ROUTE_WIRED_OR_EARPIECE>
android.telecom.CallRedirectionService
<android.telecom.CallRedirectionService: void <init>()>
<android.telecom.CallRedirectionService: void cancelCall()>
<android.telecom.CallRedirectionService: android.os.IBinder onBind(android.content.Intent)>
<android.telecom.CallRedirectionService: void onPlaceCall(android.net.Uri,android.telecom.PhoneAccountHandle,boolean)>
<android.telecom.CallRedirectionService: void onRedirectionTimeout()>
<android.telecom.CallRedirectionService: boolean onUnbind(android.content.Intent)>
<android.telecom.CallRedirectionService: void placeCallUnmodified()>
<android.telecom.CallRedirectionService: void redirectCall(android.net.Uri,android.telecom.PhoneAccountHandle,boolean)>
<android.telecom.CallRedirectionService: java.lang.String SERVICE_INTERFACE>
android.telecom.CallScreeningService
<android.telecom.CallScreeningService: void <init>()>
<android.telecom.CallScreeningService: android.os.IBinder onBind(android.content.Intent)>
<android.telecom.CallScreeningService: void onScreenCall(android.telecom.Call$Details)>
<android.telecom.CallScreeningService: void respondToCall(android.telecom.Call$Details,android.telecom.CallScreeningService$CallResponse)>
<android.telecom.CallScreeningService: java.lang.String SERVICE_INTERFACE>
android.telecom.CallScreeningService$CallResponse
<android.telecom.CallScreeningService$CallResponse: int getCallComposerAttachmentsToShow()>
<android.telecom.CallScreeningService$CallResponse: boolean getDisallowCall()>
<android.telecom.CallScreeningService$CallResponse: boolean getRejectCall()>
<android.telecom.CallScreeningService$CallResponse: boolean getSilenceCall()>
<android.telecom.CallScreeningService$CallResponse: boolean getSkipCallLog()>
<android.telecom.CallScreeningService$CallResponse: boolean getSkipNotification()>
<android.telecom.CallScreeningService$CallResponse: int CALL_COMPOSER_ATTACHMENT_LOCATION>
<android.telecom.CallScreeningService$CallResponse: int CALL_COMPOSER_ATTACHMENT_PICTURE>
<android.telecom.CallScreeningService$CallResponse: int CALL_COMPOSER_ATTACHMENT_PRIORITY>
<android.telecom.CallScreeningService$CallResponse: int CALL_COMPOSER_ATTACHMENT_SUBJECT>
android.telecom.CallScreeningService$CallResponse$Builder
<android.telecom.CallScreeningService$CallResponse$Builder: void <init>()>
<android.telecom.CallScreeningService$CallResponse$Builder: android.telecom.CallScreeningService$CallResponse build()>
<android.telecom.CallScreeningService$CallResponse$Builder: android.telecom.CallScreeningService$CallResponse$Builder setCallComposerAttachmentsToShow(int)>
<android.telecom.CallScreeningService$CallResponse$Builder: android.telecom.CallScreeningService$CallResponse$Builder setDisallowCall(boolean)>
<android.telecom.CallScreeningService$CallResponse$Builder: android.telecom.CallScreeningService$CallResponse$Builder setRejectCall(boolean)>
<android.telecom.CallScreeningService$CallResponse$Builder: android.telecom.CallScreeningService$CallResponse$Builder setSilenceCall(boolean)>
<android.telecom.CallScreeningService$CallResponse$Builder: android.telecom.CallScreeningService$CallResponse$Builder setSkipCallLog(boolean)>
<android.telecom.CallScreeningService$CallResponse$Builder: android.telecom.CallScreeningService$CallResponse$Builder setSkipNotification(boolean)>
android.telecom.Conference
<android.telecom.Conference: void <init>(android.telecom.PhoneAccountHandle)>
<android.telecom.Conference: boolean addConnection(android.telecom.Connection)>
<android.telecom.Conference: android.telecom.Conference createFailedConference(android.telecom.DisconnectCause,android.telecom.PhoneAccountHandle)>
<android.telecom.Conference: void destroy()>
<android.telecom.Conference: android.telecom.CallAudioState getCallAudioState()>
<android.telecom.Conference: java.util.List getConferenceableConnections()>
<android.telecom.Conference: int getConnectionCapabilities()>
<android.telecom.Conference: int getConnectionProperties()>
<android.telecom.Conference: long getConnectionStartElapsedRealtimeMillis()>
<android.telecom.Conference: long getConnectionTime()>
<android.telecom.Conference: java.util.List getConnections()>
<android.telecom.Conference: android.telecom.DisconnectCause getDisconnectCause()>
<android.telecom.Conference: android.os.Bundle getExtras()>
<android.telecom.Conference: android.telecom.PhoneAccountHandle getPhoneAccountHandle()>
<android.telecom.Conference: int getState()>
<android.telecom.Conference: android.telecom.StatusHints getStatusHints()>
<android.telecom.Conference: android.telecom.Connection$VideoProvider getVideoProvider()>
<android.telecom.Conference: int getVideoState()>
<android.telecom.Conference: boolean isRingbackRequested()>
<android.telecom.Conference: void onAddConferenceParticipants(java.util.List)>
<android.telecom.Conference: void onAnswer(int)>
<android.telecom.Conference: void onCallAudioStateChanged(android.telecom.CallAudioState)>
<android.telecom.Conference: void onConnectionAdded(android.telecom.Connection)>
<android.telecom.Conference: void onDisconnect()>
<android.telecom.Conference: void onExtrasChanged(android.os.Bundle)>
<android.telecom.Conference: void onHold()>
<android.telecom.Conference: void onMerge(android.telecom.Connection)>
<android.telecom.Conference: void onMerge()>
<android.telecom.Conference: void onPlayDtmfTone(char)>
<android.telecom.Conference: void onReject()>
<android.telecom.Conference: void onSeparate(android.telecom.Connection)>
<android.telecom.Conference: void onStopDtmfTone()>
<android.telecom.Conference: void onSwap()>
<android.telecom.Conference: void onUnhold()>
<android.telecom.Conference: void putExtras(android.os.Bundle)>
<android.telecom.Conference: void removeConnection(android.telecom.Connection)>
<android.telecom.Conference: void removeExtras(java.util.List)>
<android.telecom.Conference: void removeExtras(java.lang.String[])>
<android.telecom.Conference: void sendConferenceEvent(java.lang.String,android.os.Bundle)>
<android.telecom.Conference: void setActive()>
<android.telecom.Conference: void setConferenceableConnections(java.util.List)>
<android.telecom.Conference: void setConnectionCapabilities(int)>
<android.telecom.Conference: void setConnectionProperties(int)>
<android.telecom.Conference: void setConnectionStartElapsedRealTime(long)>
<android.telecom.Conference: void setConnectionStartElapsedRealtimeMillis(long)>
<android.telecom.Conference: void setConnectionTime(long)>
<android.telecom.Conference: void setDialing()>
<android.telecom.Conference: void setDisconnected(android.telecom.DisconnectCause)>
<android.telecom.Conference: void setExtras(android.os.Bundle)>
<android.telecom.Conference: void setOnHold()>
<android.telecom.Conference: void setRingbackRequested(boolean)>
<android.telecom.Conference: void setRinging()>
<android.telecom.Conference: void setStatusHints(android.telecom.StatusHints)>
<android.telecom.Conference: void setVideoProvider(android.telecom.Connection,android.telecom.Connection$VideoProvider)>
<android.telecom.Conference: void setVideoState(android.telecom.Connection,int)>
<android.telecom.Conference: long CONNECT_TIME_NOT_SPECIFIED>
android.telecom.Conferenceable
android.telecom.Connection
<android.telecom.Connection: void <init>()>
<android.telecom.Connection: java.lang.String capabilitiesToString(int)>
<android.telecom.Connection: android.telecom.Connection createCanceledConnection()>
<android.telecom.Connection: android.telecom.Connection createFailedConnection(android.telecom.DisconnectCause)>
<android.telecom.Connection: void destroy()>
<android.telecom.Connection: android.net.Uri getAddress()>
<android.telecom.Connection: int getAddressPresentation()>
<android.telecom.Connection: boolean getAudioModeIsVoip()>
<android.telecom.Connection: android.telecom.CallAudioState getCallAudioState()>
<android.telecom.Connection: java.lang.String getCallerDisplayName()>
<android.telecom.Connection: int getCallerDisplayNamePresentation()>
<android.telecom.Connection: int getCallerNumberVerificationStatus()>
<android.telecom.Connection: android.telecom.Conference getConference()>
<android.telecom.Connection: java.util.List getConferenceables()>
<android.telecom.Connection: int getConnectionCapabilities()>
<android.telecom.Connection: int getConnectionProperties()>
<android.telecom.Connection: android.telecom.DisconnectCause getDisconnectCause()>
<android.telecom.Connection: android.os.Bundle getExtras()>
<android.telecom.Connection: int getState()>
<android.telecom.Connection: android.telecom.StatusHints getStatusHints()>
<android.telecom.Connection: android.telecom.Connection$VideoProvider getVideoProvider()>
<android.telecom.Connection: int getVideoState()>
<android.telecom.Connection: void handleRttUpgradeResponse(android.telecom.Connection$RttTextStream)>
<android.telecom.Connection: boolean isRingbackRequested()>
<android.telecom.Connection: void notifyConferenceMergeFailed()>
<android.telecom.Connection: void onAbort()>
<android.telecom.Connection: void onAddConferenceParticipants(java.util.List)>
<android.telecom.Connection: void onAnswer(int)>
<android.telecom.Connection: void onAnswer()>
<android.telecom.Connection: void onCallAudioStateChanged(android.telecom.CallAudioState)>
<android.telecom.Connection: void onCallEvent(java.lang.String,android.os.Bundle)>
<android.telecom.Connection: void onDeflect(android.net.Uri)>
<android.telecom.Connection: void onDisconnect()>
<android.telecom.Connection: void onExtrasChanged(android.os.Bundle)>
<android.telecom.Connection: void onHandoverComplete()>
<android.telecom.Connection: void onHold()>
<android.telecom.Connection: void onPlayDtmfTone(char)>
<android.telecom.Connection: void onPostDialContinue(boolean)>
<android.telecom.Connection: void onPullExternalCall()>
<android.telecom.Connection: void onReject()>
<android.telecom.Connection: void onReject(int)>
<android.telecom.Connection: void onReject(java.lang.String)>
<android.telecom.Connection: void onSeparate()>
<android.telecom.Connection: void onShowIncomingCallUi()>
<android.telecom.Connection: void onSilence()>
<android.telecom.Connection: void onStartRtt(android.telecom.Connection$RttTextStream)>
<android.telecom.Connection: void onStateChanged(int)>
<android.telecom.Connection: void onStopDtmfTone()>
<android.telecom.Connection: void onStopRtt()>
<android.telecom.Connection: void onTrackedByNonUiService(boolean)>
<android.telecom.Connection: void onUnhold()>
<android.telecom.Connection: void onUsingAlternativeUi(boolean)>
<android.telecom.Connection: java.lang.String propertiesToString(int)>
<android.telecom.Connection: void putExtras(android.os.Bundle)>
<android.telecom.Connection: void removeExtras(java.util.List)>
<android.telecom.Connection: void removeExtras(java.lang.String[])>
<android.telecom.Connection: void requestBluetoothAudio(android.bluetooth.BluetoothDevice)>
<android.telecom.Connection: void sendConnectionEvent(java.lang.String,android.os.Bundle)>
<android.telecom.Connection: void sendRemoteRttRequest()>
<android.telecom.Connection: void sendRttInitiationFailure(int)>
<android.telecom.Connection: void sendRttInitiationSuccess()>
<android.telecom.Connection: void sendRttSessionRemotelyTerminated()>
<android.telecom.Connection: void setActive()>
<android.telecom.Connection: void setAddress(android.net.Uri,int)>
<android.telecom.Connection: void setAudioModeIsVoip(boolean)>
<android.telecom.Connection: void setAudioRoute(int)>
<android.telecom.Connection: void setCallerDisplayName(java.lang.String,int)>
<android.telecom.Connection: void setCallerNumberVerificationStatus(int)>
<android.telecom.Connection: void setConferenceableConnections(java.util.List)>
<android.telecom.Connection: void setConferenceables(java.util.List)>
<android.telecom.Connection: void setConnectionCapabilities(int)>
<android.telecom.Connection: void setConnectionProperties(int)>
<android.telecom.Connection: void setDialing()>
<android.telecom.Connection: void setDisconnected(android.telecom.DisconnectCause)>
<android.telecom.Connection: void setExtras(android.os.Bundle)>
<android.telecom.Connection: void setInitialized()>
<android.telecom.Connection: void setInitializing()>
<android.telecom.Connection: void setNextPostDialChar(char)>
<android.telecom.Connection: void setOnHold()>
<android.telecom.Connection: void setPostDialWait(java.lang.String)>
<android.telecom.Connection: void setPulling()>
<android.telecom.Connection: void setRingbackRequested(boolean)>
<android.telecom.Connection: void setRinging()>
<android.telecom.Connection: void setStatusHints(android.telecom.StatusHints)>
<android.telecom.Connection: void setVideoProvider(android.telecom.Connection$VideoProvider)>
<android.telecom.Connection: void setVideoState(int)>
<android.telecom.Connection: java.lang.String stateToString(int)>
<android.telecom.Connection: int AUDIO_CODEC_AMR>
<android.telecom.Connection: int AUDIO_CODEC_AMR_WB>
<android.telecom.Connection: int AUDIO_CODEC_EVRC>
<android.telecom.Connection: int AUDIO_CODEC_EVRC_B>
<android.telecom.Connection: int AUDIO_CODEC_EVRC_NW>
<android.telecom.Connection: int AUDIO_CODEC_EVRC_WB>
<android.telecom.Connection: int AUDIO_CODEC_EVS_FB>
<android.telecom.Connection: int AUDIO_CODEC_EVS_NB>
<android.telecom.Connection: int AUDIO_CODEC_EVS_SWB>
<android.telecom.Connection: int AUDIO_CODEC_EVS_WB>
<android.telecom.Connection: int AUDIO_CODEC_G711A>
<android.telecom.Connection: int AUDIO_CODEC_G711AB>
<android.telecom.Connection: int AUDIO_CODEC_G711U>
<android.telecom.Connection: int AUDIO_CODEC_G722>
<android.telecom.Connection: int AUDIO_CODEC_G723>
<android.telecom.Connection: int AUDIO_CODEC_G729>
<android.telecom.Connection: int AUDIO_CODEC_GSM_EFR>
<android.telecom.Connection: int AUDIO_CODEC_GSM_FR>
<android.telecom.Connection: int AUDIO_CODEC_GSM_HR>
<android.telecom.Connection: int AUDIO_CODEC_NONE>
<android.telecom.Connection: int AUDIO_CODEC_QCELP13K>
<android.telecom.Connection: int CAPABILITY_ADD_PARTICIPANT>
<android.telecom.Connection: int CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO>
<android.telecom.Connection: int CAPABILITY_CAN_PAUSE_VIDEO>
<android.telecom.Connection: int CAPABILITY_CAN_PULL_CALL>
<android.telecom.Connection: int CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTION>
<android.telecom.Connection: int CAPABILITY_CAN_UPGRADE_TO_VIDEO>
<android.telecom.Connection: int CAPABILITY_DISCONNECT_FROM_CONFERENCE>
<android.telecom.Connection: int CAPABILITY_HOLD>
<android.telecom.Connection: int CAPABILITY_MANAGE_CONFERENCE>
<android.telecom.Connection: int CAPABILITY_MERGE_CONFERENCE>
<android.telecom.Connection: int CAPABILITY_MUTE>
<android.telecom.Connection: int CAPABILITY_REMOTE_PARTY_SUPPORTS_RTT>
<android.telecom.Connection: int CAPABILITY_RESPOND_VIA_TEXT>
<android.telecom.Connection: int CAPABILITY_SEPARATE_FROM_CONFERENCE>
<android.telecom.Connection: int CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL>
<android.telecom.Connection: int CAPABILITY_SUPPORTS_VT_LOCAL_RX>
<android.telecom.Connection: int CAPABILITY_SUPPORTS_VT_LOCAL_TX>
<android.telecom.Connection: int CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL>
<android.telecom.Connection: int CAPABILITY_SUPPORTS_VT_REMOTE_RX>
<android.telecom.Connection: int CAPABILITY_SUPPORTS_VT_REMOTE_TX>
<android.telecom.Connection: int CAPABILITY_SUPPORT_DEFLECT>
<android.telecom.Connection: int CAPABILITY_SUPPORT_HOLD>
<android.telecom.Connection: int CAPABILITY_SWAP_CONFERENCE>
<android.telecom.Connection: java.lang.String EVENT_CALL_HOLD_FAILED>
<android.telecom.Connection: java.lang.String EVENT_CALL_MERGE_FAILED>
<android.telecom.Connection: java.lang.String EVENT_CALL_PULL_FAILED>
<android.telecom.Connection: java.lang.String EVENT_CALL_REMOTELY_HELD>
<android.telecom.Connection: java.lang.String EVENT_CALL_REMOTELY_UNHELD>
<android.telecom.Connection: java.lang.String EVENT_CALL_SWITCH_FAILED>
<android.telecom.Connection: java.lang.String EVENT_MERGE_COMPLETE>
<android.telecom.Connection: java.lang.String EVENT_MERGE_START>
<android.telecom.Connection: java.lang.String EVENT_ON_HOLD_TONE_END>
<android.telecom.Connection: java.lang.String EVENT_ON_HOLD_TONE_START>
<android.telecom.Connection: java.lang.String EVENT_RTT_AUDIO_INDICATION_CHANGED>
<android.telecom.Connection: java.lang.String EXTRA_ANSWERING_DROPS_FG_CALL>
<android.telecom.Connection: java.lang.String EXTRA_ANSWERING_DROPS_FG_CALL_APP_NAME>
<android.telecom.Connection: java.lang.String EXTRA_AUDIO_CODEC>
<android.telecom.Connection: java.lang.String EXTRA_AUDIO_CODEC_BANDWIDTH_KHZ>
<android.telecom.Connection: java.lang.String EXTRA_AUDIO_CODEC_BITRATE_KBPS>
<android.telecom.Connection: java.lang.String EXTRA_CALL_SUBJECT>
<android.telecom.Connection: java.lang.String EXTRA_CHILD_ADDRESS>
<android.telecom.Connection: java.lang.String EXTRA_IS_RTT_AUDIO_PRESENT>
<android.telecom.Connection: java.lang.String EXTRA_LAST_FORWARDED_NUMBER>
<android.telecom.Connection: java.lang.String EXTRA_LAST_KNOWN_CELL_IDENTITY>
<android.telecom.Connection: java.lang.String EXTRA_SIP_INVITE>
<android.telecom.Connection: int PROPERTY_ASSISTED_DIALING>
<android.telecom.Connection: int PROPERTY_CROSS_SIM>
<android.telecom.Connection: int PROPERTY_HAS_CDMA_VOICE_PRIVACY>
<android.telecom.Connection: int PROPERTY_HIGH_DEF_AUDIO>
<android.telecom.Connection: int PROPERTY_IS_ADHOC_CONFERENCE>
<android.telecom.Connection: int PROPERTY_IS_EXTERNAL_CALL>
<android.telecom.Connection: int PROPERTY_IS_RTT>
<android.telecom.Connection: int PROPERTY_NETWORK_IDENTIFIED_EMERGENCY_CALL>
<android.telecom.Connection: int PROPERTY_SELF_MANAGED>
<android.telecom.Connection: int PROPERTY_WIFI>
<android.telecom.Connection: int STATE_ACTIVE>
<android.telecom.Connection: int STATE_DIALING>
<android.telecom.Connection: int STATE_DISCONNECTED>
<android.telecom.Connection: int STATE_HOLDING>
<android.telecom.Connection: int STATE_INITIALIZING>
<android.telecom.Connection: int STATE_NEW>
<android.telecom.Connection: int STATE_PULLING_CALL>
<android.telecom.Connection: int STATE_RINGING>
<android.telecom.Connection: int VERIFICATION_STATUS_FAILED>
<android.telecom.Connection: int VERIFICATION_STATUS_NOT_VERIFIED>
<android.telecom.Connection: int VERIFICATION_STATUS_PASSED>
android.telecom.Connection$RttModifyStatus
<android.telecom.Connection$RttModifyStatus: int SESSION_MODIFY_REQUEST_FAIL>
<android.telecom.Connection$RttModifyStatus: int SESSION_MODIFY_REQUEST_INVALID>
<android.telecom.Connection$RttModifyStatus: int SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE>
<android.telecom.Connection$RttModifyStatus: int SESSION_MODIFY_REQUEST_SUCCESS>
<android.telecom.Connection$RttModifyStatus: int SESSION_MODIFY_REQUEST_TIMED_OUT>
android.telecom.Connection$RttTextStream
<android.telecom.Connection$RttTextStream: java.lang.String read()>
<android.telecom.Connection$RttTextStream: java.lang.String readImmediately()>
<android.telecom.Connection$RttTextStream: void write(java.lang.String)>
android.telecom.Connection$VideoProvider
<android.telecom.Connection$VideoProvider: void <init>()>
<android.telecom.Connection$VideoProvider: void changeCameraCapabilities(android.telecom.VideoProfile$CameraCapabilities)>
<android.telecom.Connection$VideoProvider: void changePeerDimensions(int,int)>
<android.telecom.Connection$VideoProvider: void changeVideoQuality(int)>
<android.telecom.Connection$VideoProvider: void handleCallSessionEvent(int)>
<android.telecom.Connection$VideoProvider: void onRequestCameraCapabilities()>
<android.telecom.Connection$VideoProvider: void onRequestConnectionDataUsage()>
<android.telecom.Connection$VideoProvider: void onSendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>
<android.telecom.Connection$VideoProvider: void onSendSessionModifyResponse(android.telecom.VideoProfile)>
<android.telecom.Connection$VideoProvider: void onSetCamera(java.lang.String)>
<android.telecom.Connection$VideoProvider: void onSetDeviceOrientation(int)>
<android.telecom.Connection$VideoProvider: void onSetDisplaySurface(android.view.Surface)>
<android.telecom.Connection$VideoProvider: void onSetPauseImage(android.net.Uri)>
<android.telecom.Connection$VideoProvider: void onSetPreviewSurface(android.view.Surface)>
<android.telecom.Connection$VideoProvider: void onSetZoom(float)>
<android.telecom.Connection$VideoProvider: void receiveSessionModifyRequest(android.telecom.VideoProfile)>
<android.telecom.Connection$VideoProvider: void receiveSessionModifyResponse(int,android.telecom.VideoProfile,android.telecom.VideoProfile)>
<android.telecom.Connection$VideoProvider: void setCallDataUsage(long)>
<android.telecom.Connection$VideoProvider: int SESSION_EVENT_CAMERA_FAILURE>
<android.telecom.Connection$VideoProvider: int SESSION_EVENT_CAMERA_PERMISSION_ERROR>
<android.telecom.Connection$VideoProvider: int SESSION_EVENT_CAMERA_READY>
<android.telecom.Connection$VideoProvider: int SESSION_EVENT_RX_PAUSE>
<android.telecom.Connection$VideoProvider: int SESSION_EVENT_RX_RESUME>
<android.telecom.Connection$VideoProvider: int SESSION_EVENT_TX_START>
<android.telecom.Connection$VideoProvider: int SESSION_EVENT_TX_STOP>
<android.telecom.Connection$VideoProvider: int SESSION_MODIFY_REQUEST_FAIL>
<android.telecom.Connection$VideoProvider: int SESSION_MODIFY_REQUEST_INVALID>
<android.telecom.Connection$VideoProvider: int SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE>
<android.telecom.Connection$VideoProvider: int SESSION_MODIFY_REQUEST_SUCCESS>
<android.telecom.Connection$VideoProvider: int SESSION_MODIFY_REQUEST_TIMED_OUT>
android.telecom.ConnectionRequest
<android.telecom.ConnectionRequest: void <init>(android.telecom.PhoneAccountHandle,android.net.Uri,android.os.Bundle)>
<android.telecom.ConnectionRequest: void <init>(android.telecom.PhoneAccountHandle,android.net.Uri,android.os.Bundle,int)>
<android.telecom.ConnectionRequest: int describeContents()>
<android.telecom.ConnectionRequest: android.telecom.PhoneAccountHandle getAccountHandle()>
<android.telecom.ConnectionRequest: android.net.Uri getAddress()>
<android.telecom.ConnectionRequest: android.os.Bundle getExtras()>
<android.telecom.ConnectionRequest: java.util.List getParticipants()>
<android.telecom.ConnectionRequest: android.telecom.Connection$RttTextStream getRttTextStream()>
<android.telecom.ConnectionRequest: int getVideoState()>
<android.telecom.ConnectionRequest: boolean isAdhocConferenceCall()>
<android.telecom.ConnectionRequest: boolean isRequestingRtt()>
<android.telecom.ConnectionRequest: void writeToParcel(android.os.Parcel,int)>
<android.telecom.ConnectionRequest: android.os.Parcelable$Creator CREATOR>
android.telecom.ConnectionService
<android.telecom.ConnectionService: void <init>()>
<android.telecom.ConnectionService: void addConference(android.telecom.Conference)>
<android.telecom.ConnectionService: void addExistingConnection(android.telecom.PhoneAccountHandle,android.telecom.Connection)>
<android.telecom.ConnectionService: void conferenceRemoteConnections(android.telecom.RemoteConnection,android.telecom.RemoteConnection)>
<android.telecom.ConnectionService: void connectionServiceFocusReleased()>
<android.telecom.ConnectionService: android.telecom.RemoteConference createRemoteIncomingConference(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: android.telecom.RemoteConnection createRemoteIncomingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: android.telecom.RemoteConference createRemoteOutgoingConference(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: android.telecom.RemoteConnection createRemoteOutgoingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: java.util.Collection getAllConferences()>
<android.telecom.ConnectionService: java.util.Collection getAllConnections()>
<android.telecom.ConnectionService: android.os.IBinder onBind(android.content.Intent)>
<android.telecom.ConnectionService: void onConference(android.telecom.Connection,android.telecom.Connection)>
<android.telecom.ConnectionService: void onConnectionServiceFocusGained()>
<android.telecom.ConnectionService: void onConnectionServiceFocusLost()>
<android.telecom.ConnectionService: android.telecom.Conference onCreateIncomingConference(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: void onCreateIncomingConferenceFailed(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: android.telecom.Connection onCreateIncomingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: void onCreateIncomingConnectionFailed(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: android.telecom.Connection onCreateIncomingHandoverConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: android.telecom.Conference onCreateOutgoingConference(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: void onCreateOutgoingConferenceFailed(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: android.telecom.Connection onCreateOutgoingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: void onCreateOutgoingConnectionFailed(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: android.telecom.Connection onCreateOutgoingHandoverConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>
<android.telecom.ConnectionService: void onHandoverFailed(android.telecom.ConnectionRequest,int)>
<android.telecom.ConnectionService: void onRemoteConferenceAdded(android.telecom.RemoteConference)>
<android.telecom.ConnectionService: void onRemoteExistingConnectionAdded(android.telecom.RemoteConnection)>
<android.telecom.ConnectionService: java.lang.String SERVICE_INTERFACE>
android.telecom.DisconnectCause
<android.telecom.DisconnectCause: void <init>(int)>
<android.telecom.DisconnectCause: void <init>(int,java.lang.String)>
<android.telecom.DisconnectCause: void <init>(int,java.lang.CharSequence,java.lang.CharSequence,java.lang.String)>
<android.telecom.DisconnectCause: void <init>(int,java.lang.CharSequence,java.lang.CharSequence,java.lang.String,int)>
<android.telecom.DisconnectCause: int describeContents()>
<android.telecom.DisconnectCause: int getCode()>
<android.telecom.DisconnectCause: java.lang.CharSequence getDescription()>
<android.telecom.DisconnectCause: java.lang.CharSequence getLabel()>
<android.telecom.DisconnectCause: java.lang.String getReason()>
<android.telecom.DisconnectCause: int getTone()>
<android.telecom.DisconnectCause: void writeToParcel(android.os.Parcel,int)>
<android.telecom.DisconnectCause: int ANSWERED_ELSEWHERE>
<android.telecom.DisconnectCause: int BUSY>
<android.telecom.DisconnectCause: int CALL_PULLED>
<android.telecom.DisconnectCause: int CANCELED>
<android.telecom.DisconnectCause: int CONNECTION_MANAGER_NOT_SUPPORTED>
<android.telecom.DisconnectCause: android.os.Parcelable$Creator CREATOR>
<android.telecom.DisconnectCause: int ERROR>
<android.telecom.DisconnectCause: int LOCAL>
<android.telecom.DisconnectCause: int MISSED>
<android.telecom.DisconnectCause: int OTHER>
<android.telecom.DisconnectCause: java.lang.String REASON_EMERGENCY_CALL_PLACED>
<android.telecom.DisconnectCause: java.lang.String REASON_EMULATING_SINGLE_CALL>
<android.telecom.DisconnectCause: java.lang.String REASON_IMS_ACCESS_BLOCKED>
<android.telecom.DisconnectCause: java.lang.String REASON_WIFI_ON_BUT_WFC_OFF>
<android.telecom.DisconnectCause: int REJECTED>
<android.telecom.DisconnectCause: int REMOTE>
<android.telecom.DisconnectCause: int RESTRICTED>
<android.telecom.DisconnectCause: int UNKNOWN>
android.telecom.GatewayInfo
<android.telecom.GatewayInfo: void <init>(java.lang.String,android.net.Uri,android.net.Uri)>
<android.telecom.GatewayInfo: int describeContents()>
<android.telecom.GatewayInfo: android.net.Uri getGatewayAddress()>
<android.telecom.GatewayInfo: java.lang.String getGatewayProviderPackageName()>
<android.telecom.GatewayInfo: android.net.Uri getOriginalAddress()>
<android.telecom.GatewayInfo: boolean isEmpty()>
<android.telecom.GatewayInfo: void writeToParcel(android.os.Parcel,int)>
<android.telecom.GatewayInfo: android.os.Parcelable$Creator CREATOR>
android.telecom.InCallService
<android.telecom.InCallService: void <init>()>
<android.telecom.InCallService: boolean canAddCall()>
<android.telecom.InCallService: android.telecom.CallAudioState getCallAudioState()>
<android.telecom.InCallService: java.util.List getCalls()>
<android.telecom.InCallService: android.os.IBinder onBind(android.content.Intent)>
<android.telecom.InCallService: void onBringToForeground(boolean)>
<android.telecom.InCallService: void onCallAdded(android.telecom.Call)>
<android.telecom.InCallService: void onCallAudioStateChanged(android.telecom.CallAudioState)>
<android.telecom.InCallService: void onCallRemoved(android.telecom.Call)>
<android.telecom.InCallService: void onCanAddCallChanged(boolean)>
<android.telecom.InCallService: void onConnectionEvent(android.telecom.Call,java.lang.String,android.os.Bundle)>
<android.telecom.InCallService: void onSilenceRinger()>
<android.telecom.InCallService: void requestBluetoothAudio(android.bluetooth.BluetoothDevice)>
<android.telecom.InCallService: void setAudioRoute(int)>
<android.telecom.InCallService: void setMuted(boolean)>
<android.telecom.InCallService: java.lang.String SERVICE_INTERFACE>
android.telecom.InCallService$VideoCall
<android.telecom.InCallService$VideoCall: void <init>()>
<android.telecom.InCallService$VideoCall: void registerCallback(android.telecom.InCallService$VideoCall$Callback)>
<android.telecom.InCallService$VideoCall: void registerCallback(android.telecom.InCallService$VideoCall$Callback,android.os.Handler)>
<android.telecom.InCallService$VideoCall: void requestCallDataUsage()>
<android.telecom.InCallService$VideoCall: void requestCameraCapabilities()>
<android.telecom.InCallService$VideoCall: void sendSessionModifyRequest(android.telecom.VideoProfile)>
<android.telecom.InCallService$VideoCall: void sendSessionModifyResponse(android.telecom.VideoProfile)>
<android.telecom.InCallService$VideoCall: void setCamera(java.lang.String)>
<android.telecom.InCallService$VideoCall: void setDeviceOrientation(int)>
<android.telecom.InCallService$VideoCall: void setDisplaySurface(android.view.Surface)>
<android.telecom.InCallService$VideoCall: void setPauseImage(android.net.Uri)>
<android.telecom.InCallService$VideoCall: void setPreviewSurface(android.view.Surface)>
<android.telecom.InCallService$VideoCall: void setZoom(float)>
<android.telecom.InCallService$VideoCall: void unregisterCallback(android.telecom.InCallService$VideoCall$Callback)>
android.telecom.InCallService$VideoCall$Callback
<android.telecom.InCallService$VideoCall$Callback: void <init>()>
<android.telecom.InCallService$VideoCall$Callback: void onCallDataUsageChanged(long)>
<android.telecom.InCallService$VideoCall$Callback: void onCallSessionEvent(int)>
<android.telecom.InCallService$VideoCall$Callback: void onCameraCapabilitiesChanged(android.telecom.VideoProfile$CameraCapabilities)>
<android.telecom.InCallService$VideoCall$Callback: void onPeerDimensionsChanged(int,int)>
<android.telecom.InCallService$VideoCall$Callback: void onSessionModifyRequestReceived(android.telecom.VideoProfile)>
<android.telecom.InCallService$VideoCall$Callback: void onSessionModifyResponseReceived(int,android.telecom.VideoProfile,android.telecom.VideoProfile)>
<android.telecom.InCallService$VideoCall$Callback: void onVideoQualityChanged(int)>
android.telecom.PhoneAccount
<android.telecom.PhoneAccount: android.telecom.PhoneAccount$Builder builder(android.telecom.PhoneAccountHandle,java.lang.CharSequence)>
<android.telecom.PhoneAccount: int describeContents()>
<android.telecom.PhoneAccount: android.telecom.PhoneAccountHandle getAccountHandle()>
<android.telecom.PhoneAccount: android.net.Uri getAddress()>
<android.telecom.PhoneAccount: int getCapabilities()>
<android.telecom.PhoneAccount: android.os.Bundle getExtras()>
<android.telecom.PhoneAccount: int getHighlightColor()>
<android.telecom.PhoneAccount: android.graphics.drawable.Icon getIcon()>
<android.telecom.PhoneAccount: java.lang.CharSequence getLabel()>
<android.telecom.PhoneAccount: java.lang.CharSequence getShortDescription()>
<android.telecom.PhoneAccount: android.net.Uri getSubscriptionAddress()>
<android.telecom.PhoneAccount: java.util.List getSupportedUriSchemes()>
<android.telecom.PhoneAccount: boolean hasCapabilities(int)>
<android.telecom.PhoneAccount: boolean isEnabled()>
<android.telecom.PhoneAccount: boolean supportsUriScheme(java.lang.String)>
<android.telecom.PhoneAccount: android.telecom.PhoneAccount$Builder toBuilder()>
<android.telecom.PhoneAccount: void writeToParcel(android.os.Parcel,int)>
<android.telecom.PhoneAccount: int CAPABILITY_ADHOC_CONFERENCE_CALLING>
<android.telecom.PhoneAccount: int CAPABILITY_CALL_COMPOSER>
<android.telecom.PhoneAccount: int CAPABILITY_CALL_PROVIDER>
<android.telecom.PhoneAccount: int CAPABILITY_CALL_SUBJECT>
<android.telecom.PhoneAccount: int CAPABILITY_CONNECTION_MANAGER>
<android.telecom.PhoneAccount: int CAPABILITY_PLACE_EMERGENCY_CALLS>
<android.telecom.PhoneAccount: int CAPABILITY_RTT>
<android.telecom.PhoneAccount: int CAPABILITY_SELF_MANAGED>
<android.telecom.PhoneAccount: int CAPABILITY_SIM_SUBSCRIPTION>
<android.telecom.PhoneAccount: int CAPABILITY_SUPPORTS_VIDEO_CALLING>
<android.telecom.PhoneAccount: int CAPABILITY_SUPPORTS_VOICE_CALLING_INDICATIONS>
<android.telecom.PhoneAccount: int CAPABILITY_VIDEO_CALLING>
<android.telecom.PhoneAccount: int CAPABILITY_VIDEO_CALLING_RELIES_ON_PRESENCE>
<android.telecom.PhoneAccount: int CAPABILITY_VOICE_CALLING_AVAILABLE>
<android.telecom.PhoneAccount: android.os.Parcelable$Creator CREATOR>
<android.telecom.PhoneAccount: java.lang.String EXTRA_ADD_SELF_MANAGED_CALLS_TO_INCALLSERVICE>
<android.telecom.PhoneAccount: java.lang.String EXTRA_ALWAYS_USE_VOIP_AUDIO_MODE>
<android.telecom.PhoneAccount: java.lang.String EXTRA_CALL_SUBJECT_CHARACTER_ENCODING>
<android.telecom.PhoneAccount: java.lang.String EXTRA_CALL_SUBJECT_MAX_LENGTH>
<android.telecom.PhoneAccount: java.lang.String EXTRA_LOG_SELF_MANAGED_CALLS>
<android.telecom.PhoneAccount: java.lang.String EXTRA_SUPPORTS_HANDOVER_FROM>
<android.telecom.PhoneAccount: java.lang.String EXTRA_SUPPORTS_HANDOVER_TO>
<android.telecom.PhoneAccount: int NO_HIGHLIGHT_COLOR>
<android.telecom.PhoneAccount: int NO_RESOURCE_ID>
<android.telecom.PhoneAccount: java.lang.String SCHEME_SIP>
<android.telecom.PhoneAccount: java.lang.String SCHEME_TEL>
<android.telecom.PhoneAccount: java.lang.String SCHEME_VOICEMAIL>
android.telecom.PhoneAccount$Builder
<android.telecom.PhoneAccount$Builder: void <init>(android.telecom.PhoneAccountHandle,java.lang.CharSequence)>
<android.telecom.PhoneAccount$Builder: void <init>(android.telecom.PhoneAccount)>
<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder addSupportedUriScheme(java.lang.String)>
<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount build()>
<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setAddress(android.net.Uri)>
<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setCapabilities(int)>
<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setExtras(android.os.Bundle)>
<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setHighlightColor(int)>
<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setIcon(android.graphics.drawable.Icon)>
<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setShortDescription(java.lang.CharSequence)>
<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setSubscriptionAddress(android.net.Uri)>
<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setSupportedUriSchemes(java.util.List)>
android.telecom.PhoneAccountHandle
<android.telecom.PhoneAccountHandle: void <init>(android.content.ComponentName,java.lang.String)>
<android.telecom.PhoneAccountHandle: void <init>(android.content.ComponentName,java.lang.String,android.os.UserHandle)>
<android.telecom.PhoneAccountHandle: int describeContents()>
<android.telecom.PhoneAccountHandle: android.content.ComponentName getComponentName()>
<android.telecom.PhoneAccountHandle: java.lang.String getId()>
<android.telecom.PhoneAccountHandle: android.os.UserHandle getUserHandle()>
<android.telecom.PhoneAccountHandle: void writeToParcel(android.os.Parcel,int)>
<android.telecom.PhoneAccountHandle: android.os.Parcelable$Creator CREATOR>
android.telecom.PhoneAccountSuggestion
<android.telecom.PhoneAccountSuggestion: void <init>(android.telecom.PhoneAccountHandle,int,boolean)>
<android.telecom.PhoneAccountSuggestion: int describeContents()>
<android.telecom.PhoneAccountSuggestion: android.telecom.PhoneAccountHandle getPhoneAccountHandle()>
<android.telecom.PhoneAccountSuggestion: int getReason()>
<android.telecom.PhoneAccountSuggestion: boolean shouldAutoSelect()>
<android.telecom.PhoneAccountSuggestion: void writeToParcel(android.os.Parcel,int)>
<android.telecom.PhoneAccountSuggestion: android.os.Parcelable$Creator CREATOR>
<android.telecom.PhoneAccountSuggestion: int REASON_FREQUENT>
<android.telecom.PhoneAccountSuggestion: int REASON_INTRA_CARRIER>
<android.telecom.PhoneAccountSuggestion: int REASON_NONE>
<android.telecom.PhoneAccountSuggestion: int REASON_OTHER>
<android.telecom.PhoneAccountSuggestion: int REASON_USER_SET>
android.telecom.RemoteConference
<android.telecom.RemoteConference: void disconnect()>
<android.telecom.RemoteConference: java.util.List getConferenceableConnections()>
<android.telecom.RemoteConference: int getConnectionCapabilities()>
<android.telecom.RemoteConference: int getConnectionProperties()>
<android.telecom.RemoteConference: java.util.List getConnections()>
<android.telecom.RemoteConference: android.telecom.DisconnectCause getDisconnectCause()>
<android.telecom.RemoteConference: android.os.Bundle getExtras()>
<android.telecom.RemoteConference: int getState()>
<android.telecom.RemoteConference: void hold()>
<android.telecom.RemoteConference: void merge()>
<android.telecom.RemoteConference: void playDtmfTone(char)>
<android.telecom.RemoteConference: void registerCallback(android.telecom.RemoteConference$Callback)>
<android.telecom.RemoteConference: void registerCallback(android.telecom.RemoteConference$Callback,android.os.Handler)>
<android.telecom.RemoteConference: void separate(android.telecom.RemoteConnection)>
<android.telecom.RemoteConference: void setCallAudioState(android.telecom.CallAudioState)>
<android.telecom.RemoteConference: void stopDtmfTone()>
<android.telecom.RemoteConference: void swap()>
<android.telecom.RemoteConference: void unhold()>
<android.telecom.RemoteConference: void unregisterCallback(android.telecom.RemoteConference$Callback)>
android.telecom.RemoteConference$Callback
<android.telecom.RemoteConference$Callback: void <init>()>
<android.telecom.RemoteConference$Callback: void onConferenceableConnectionsChanged(android.telecom.RemoteConference,java.util.List)>
<android.telecom.RemoteConference$Callback: void onConnectionAdded(android.telecom.RemoteConference,android.telecom.RemoteConnection)>
<android.telecom.RemoteConference$Callback: void onConnectionCapabilitiesChanged(android.telecom.RemoteConference,int)>
<android.telecom.RemoteConference$Callback: void onConnectionPropertiesChanged(android.telecom.RemoteConference,int)>
<android.telecom.RemoteConference$Callback: void onConnectionRemoved(android.telecom.RemoteConference,android.telecom.RemoteConnection)>
<android.telecom.RemoteConference$Callback: void onDestroyed(android.telecom.RemoteConference)>
<android.telecom.RemoteConference$Callback: void onDisconnected(android.telecom.RemoteConference,android.telecom.DisconnectCause)>
<android.telecom.RemoteConference$Callback: void onExtrasChanged(android.telecom.RemoteConference,android.os.Bundle)>
<android.telecom.RemoteConference$Callback: void onStateChanged(android.telecom.RemoteConference,int,int)>
android.telecom.RemoteConnection
<android.telecom.RemoteConnection: void abort()>
<android.telecom.RemoteConnection: void addConferenceParticipants(java.util.List)>
<android.telecom.RemoteConnection: void answer()>
<android.telecom.RemoteConnection: void disconnect()>
<android.telecom.RemoteConnection: android.net.Uri getAddress()>
<android.telecom.RemoteConnection: int getAddressPresentation()>
<android.telecom.RemoteConnection: java.lang.CharSequence getCallerDisplayName()>
<android.telecom.RemoteConnection: int getCallerDisplayNamePresentation()>
<android.telecom.RemoteConnection: android.telecom.RemoteConference getConference()>
<android.telecom.RemoteConnection: java.util.List getConferenceableConnections()>
<android.telecom.RemoteConnection: int getConnectionCapabilities()>
<android.telecom.RemoteConnection: int getConnectionProperties()>
<android.telecom.RemoteConnection: android.telecom.DisconnectCause getDisconnectCause()>
<android.telecom.RemoteConnection: android.os.Bundle getExtras()>
<android.telecom.RemoteConnection: int getState()>
<android.telecom.RemoteConnection: android.telecom.StatusHints getStatusHints()>
<android.telecom.RemoteConnection: android.telecom.RemoteConnection$VideoProvider getVideoProvider()>
<android.telecom.RemoteConnection: int getVideoState()>
<android.telecom.RemoteConnection: void hold()>
<android.telecom.RemoteConnection: boolean isRingbackRequested()>
<android.telecom.RemoteConnection: boolean isVoipAudioMode()>
<android.telecom.RemoteConnection: void playDtmfTone(char)>
<android.telecom.RemoteConnection: void postDialContinue(boolean)>
<android.telecom.RemoteConnection: void pullExternalCall()>
<android.telecom.RemoteConnection: void registerCallback(android.telecom.RemoteConnection$Callback)>
<android.telecom.RemoteConnection: void registerCallback(android.telecom.RemoteConnection$Callback,android.os.Handler)>
<android.telecom.RemoteConnection: void reject()>
<android.telecom.RemoteConnection: void setCallAudioState(android.telecom.CallAudioState)>
<android.telecom.RemoteConnection: void stopDtmfTone()>
<android.telecom.RemoteConnection: void unhold()>
<android.telecom.RemoteConnection: void unregisterCallback(android.telecom.RemoteConnection$Callback)>
android.telecom.RemoteConnection$Callback
<android.telecom.RemoteConnection$Callback: void <init>()>
<android.telecom.RemoteConnection$Callback: void onAddressChanged(android.telecom.RemoteConnection,android.net.Uri,int)>
<android.telecom.RemoteConnection$Callback: void onCallerDisplayNameChanged(android.telecom.RemoteConnection,java.lang.String,int)>
<android.telecom.RemoteConnection$Callback: void onConferenceChanged(android.telecom.RemoteConnection,android.telecom.RemoteConference)>
<android.telecom.RemoteConnection$Callback: void onConferenceableConnectionsChanged(android.telecom.RemoteConnection,java.util.List)>
<android.telecom.RemoteConnection$Callback: void onConnectionCapabilitiesChanged(android.telecom.RemoteConnection,int)>
<android.telecom.RemoteConnection$Callback: void onConnectionEvent(android.telecom.RemoteConnection,java.lang.String,android.os.Bundle)>
<android.telecom.RemoteConnection$Callback: void onConnectionPropertiesChanged(android.telecom.RemoteConnection,int)>
<android.telecom.RemoteConnection$Callback: void onDestroyed(android.telecom.RemoteConnection)>
<android.telecom.RemoteConnection$Callback: void onDisconnected(android.telecom.RemoteConnection,android.telecom.DisconnectCause)>
<android.telecom.RemoteConnection$Callback: void onExtrasChanged(android.telecom.RemoteConnection,android.os.Bundle)>
<android.telecom.RemoteConnection$Callback: void onPostDialChar(android.telecom.RemoteConnection,char)>
<android.telecom.RemoteConnection$Callback: void onPostDialWait(android.telecom.RemoteConnection,java.lang.String)>
<android.telecom.RemoteConnection$Callback: void onRingbackRequested(android.telecom.RemoteConnection,boolean)>
<android.telecom.RemoteConnection$Callback: void onStateChanged(android.telecom.RemoteConnection,int)>
<android.telecom.RemoteConnection$Callback: void onStatusHintsChanged(android.telecom.RemoteConnection,android.telecom.StatusHints)>
<android.telecom.RemoteConnection$Callback: void onVideoProviderChanged(android.telecom.RemoteConnection,android.telecom.RemoteConnection$VideoProvider)>
<android.telecom.RemoteConnection$Callback: void onVideoStateChanged(android.telecom.RemoteConnection,int)>
<android.telecom.RemoteConnection$Callback: void onVoipAudioChanged(android.telecom.RemoteConnection,boolean)>
android.telecom.RemoteConnection$VideoProvider
<android.telecom.RemoteConnection$VideoProvider: void registerCallback(android.telecom.RemoteConnection$VideoProvider$Callback)>
<android.telecom.RemoteConnection$VideoProvider: void requestCallDataUsage()>
<android.telecom.RemoteConnection$VideoProvider: void requestCameraCapabilities()>
<android.telecom.RemoteConnection$VideoProvider: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>
<android.telecom.RemoteConnection$VideoProvider: void sendSessionModifyResponse(android.telecom.VideoProfile)>
<android.telecom.RemoteConnection$VideoProvider: void setCamera(java.lang.String)>
<android.telecom.RemoteConnection$VideoProvider: void setDeviceOrientation(int)>
<android.telecom.RemoteConnection$VideoProvider: void setDisplaySurface(android.view.Surface)>
<android.telecom.RemoteConnection$VideoProvider: void setPauseImage(android.net.Uri)>
<android.telecom.RemoteConnection$VideoProvider: void setPreviewSurface(android.view.Surface)>
<android.telecom.RemoteConnection$VideoProvider: void setZoom(float)>
<android.telecom.RemoteConnection$VideoProvider: void unregisterCallback(android.telecom.RemoteConnection$VideoProvider$Callback)>
android.telecom.RemoteConnection$VideoProvider$Callback
<android.telecom.RemoteConnection$VideoProvider$Callback: void <init>()>
<android.telecom.RemoteConnection$VideoProvider$Callback: void onCallDataUsageChanged(android.telecom.RemoteConnection$VideoProvider,long)>
<android.telecom.RemoteConnection$VideoProvider$Callback: void onCallSessionEvent(android.telecom.RemoteConnection$VideoProvider,int)>
<android.telecom.RemoteConnection$VideoProvider$Callback: void onCameraCapabilitiesChanged(android.telecom.RemoteConnection$VideoProvider,android.telecom.VideoProfile$CameraCapabilities)>
<android.telecom.RemoteConnection$VideoProvider$Callback: void onPeerDimensionsChanged(android.telecom.RemoteConnection$VideoProvider,int,int)>
<android.telecom.RemoteConnection$VideoProvider$Callback: void onSessionModifyRequestReceived(android.telecom.RemoteConnection$VideoProvider,android.telecom.VideoProfile)>
<android.telecom.RemoteConnection$VideoProvider$Callback: void onSessionModifyResponseReceived(android.telecom.RemoteConnection$VideoProvider,int,android.telecom.VideoProfile,android.telecom.VideoProfile)>
<android.telecom.RemoteConnection$VideoProvider$Callback: void onVideoQualityChanged(android.telecom.RemoteConnection$VideoProvider,int)>
android.telecom.StatusHints
<android.telecom.StatusHints: void <init>(java.lang.CharSequence,android.graphics.drawable.Icon,android.os.Bundle)>
<android.telecom.StatusHints: int describeContents()>
<android.telecom.StatusHints: android.os.Bundle getExtras()>
<android.telecom.StatusHints: android.graphics.drawable.Icon getIcon()>
<android.telecom.StatusHints: java.lang.CharSequence getLabel()>
<android.telecom.StatusHints: void writeToParcel(android.os.Parcel,int)>
<android.telecom.StatusHints: android.os.Parcelable$Creator CREATOR>
android.telecom.TelecomManager
<android.telecom.TelecomManager: void acceptHandover(android.net.Uri,int,android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: void acceptRingingCall()>
<android.telecom.TelecomManager: void acceptRingingCall(int)>
<android.telecom.TelecomManager: void addNewIncomingCall(android.telecom.PhoneAccountHandle,android.os.Bundle)>
<android.telecom.TelecomManager: void addNewIncomingConference(android.telecom.PhoneAccountHandle,android.os.Bundle)>
<android.telecom.TelecomManager: void cancelMissedCallsNotification()>
<android.telecom.TelecomManager: android.content.Intent createManageBlockedNumbersIntent()>
<android.telecom.TelecomManager: boolean endCall()>
<android.telecom.TelecomManager: android.net.Uri getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: java.util.List getCallCapablePhoneAccounts()>
<android.telecom.TelecomManager: java.lang.String getDefaultDialerPackage()>
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getDefaultOutgoingPhoneAccount(java.lang.String)>
<android.telecom.TelecomManager: java.lang.String getLine1Number(android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: java.util.List getOwnSelfManagedPhoneAccounts()>
<android.telecom.TelecomManager: android.telecom.PhoneAccount getPhoneAccount(android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: java.util.List getSelfManagedPhoneAccounts()>
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getSimCallManager()>
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getSimCallManagerForSubscription(int)>
<android.telecom.TelecomManager: java.lang.String getSystemDialerPackage()>
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getUserSelectedOutgoingPhoneAccount()>
<android.telecom.TelecomManager: java.lang.String getVoiceMailNumber(android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: boolean handleMmi(java.lang.String)>
<android.telecom.TelecomManager: boolean handleMmi(java.lang.String,android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: boolean hasManageOngoingCallsPermission()>
<android.telecom.TelecomManager: boolean isInCall()>
<android.telecom.TelecomManager: boolean isInManagedCall()>
<android.telecom.TelecomManager: boolean isIncomingCallPermitted(android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: boolean isOutgoingCallPermitted(android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: boolean isTtySupported()>
<android.telecom.TelecomManager: boolean isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)>
<android.telecom.TelecomManager: void placeCall(android.net.Uri,android.os.Bundle)>
<android.telecom.TelecomManager: void registerPhoneAccount(android.telecom.PhoneAccount)>
<android.telecom.TelecomManager: void showInCallScreen(boolean)>
<android.telecom.TelecomManager: void silenceRinger()>
<android.telecom.TelecomManager: void startConference(java.util.List,android.os.Bundle)>
<android.telecom.TelecomManager: void unregisterPhoneAccount(android.telecom.PhoneAccountHandle)>
<android.telecom.TelecomManager: java.lang.String ACTION_CHANGE_DEFAULT_DIALER>
<android.telecom.TelecomManager: java.lang.String ACTION_CHANGE_PHONE_ACCOUNTS>
<android.telecom.TelecomManager: java.lang.String ACTION_CONFIGURE_PHONE_ACCOUNT>
<android.telecom.TelecomManager: java.lang.String ACTION_DEFAULT_CALL_SCREENING_APP_CHANGED>
<android.telecom.TelecomManager: java.lang.String ACTION_DEFAULT_DIALER_CHANGED>
<android.telecom.TelecomManager: java.lang.String ACTION_INCOMING_CALL>
<android.telecom.TelecomManager: java.lang.String ACTION_PHONE_ACCOUNT_REGISTERED>
<android.telecom.TelecomManager: java.lang.String ACTION_PHONE_ACCOUNT_UNREGISTERED>
<android.telecom.TelecomManager: java.lang.String ACTION_POST_CALL>
<android.telecom.TelecomManager: java.lang.String ACTION_SHOW_CALL_ACCESSIBILITY_SETTINGS>
<android.telecom.TelecomManager: java.lang.String ACTION_SHOW_CALL_SETTINGS>
<android.telecom.TelecomManager: java.lang.String ACTION_SHOW_MISSED_CALLS_NOTIFICATION>
<android.telecom.TelecomManager: java.lang.String ACTION_SHOW_RESPOND_VIA_SMS_SETTINGS>
<android.telecom.TelecomManager: char DTMF_CHARACTER_PAUSE>
<android.telecom.TelecomManager: char DTMF_CHARACTER_WAIT>
<android.telecom.TelecomManager: int DURATION_LONG>
<android.telecom.TelecomManager: int DURATION_MEDIUM>
<android.telecom.TelecomManager: int DURATION_SHORT>
<android.telecom.TelecomManager: int DURATION_VERY_SHORT>
<android.telecom.TelecomManager: java.lang.String EXTRA_CALL_BACK_NUMBER>
<android.telecom.TelecomManager: java.lang.String EXTRA_CALL_DISCONNECT_CAUSE>
<android.telecom.TelecomManager: java.lang.String EXTRA_CALL_DISCONNECT_MESSAGE>
<android.telecom.TelecomManager: java.lang.String EXTRA_CALL_DURATION>
<android.telecom.TelecomManager: java.lang.String EXTRA_CALL_NETWORK_TYPE>
<android.telecom.TelecomManager: java.lang.String EXTRA_CALL_SUBJECT>
<android.telecom.TelecomManager: java.lang.String EXTRA_CHANGE_DEFAULT_DIALER_PACKAGE_NAME>
<android.telecom.TelecomManager: java.lang.String EXTRA_DEFAULT_CALL_SCREENING_APP_COMPONENT_NAME>
<android.telecom.TelecomManager: java.lang.String EXTRA_DISCONNECT_CAUSE>
<android.telecom.TelecomManager: java.lang.String EXTRA_HANDLE>
<android.telecom.TelecomManager: java.lang.String EXTRA_HAS_PICTURE>
<android.telecom.TelecomManager: java.lang.String EXTRA_INCOMING_CALL_ADDRESS>
<android.telecom.TelecomManager: java.lang.String EXTRA_INCOMING_CALL_EXTRAS>
<android.telecom.TelecomManager: java.lang.String EXTRA_INCOMING_VIDEO_STATE>
<android.telecom.TelecomManager: java.lang.String EXTRA_IS_DEFAULT_CALL_SCREENING_APP>
<android.telecom.TelecomManager: java.lang.String EXTRA_LOCATION>
<android.telecom.TelecomManager: java.lang.String EXTRA_NOTIFICATION_COUNT>
<android.telecom.TelecomManager: java.lang.String EXTRA_NOTIFICATION_PHONE_NUMBER>
<android.telecom.TelecomManager: java.lang.String EXTRA_OUTGOING_CALL_EXTRAS>
<android.telecom.TelecomManager: java.lang.String EXTRA_OUTGOING_PICTURE>
<android.telecom.TelecomManager: java.lang.String EXTRA_PHONE_ACCOUNT_HANDLE>
<android.telecom.TelecomManager: java.lang.String EXTRA_PICTURE_URI>
<android.telecom.TelecomManager: java.lang.String EXTRA_PRIORITY>
<android.telecom.TelecomManager: java.lang.String EXTRA_START_CALL_WITH_RTT>
<android.telecom.TelecomManager: java.lang.String EXTRA_START_CALL_WITH_SPEAKERPHONE>
<android.telecom.TelecomManager: java.lang.String EXTRA_START_CALL_WITH_VIDEO_STATE>
<android.telecom.TelecomManager: java.lang.String EXTRA_USE_ASSISTED_DIALING>
<android.telecom.TelecomManager: java.lang.String GATEWAY_ORIGINAL_ADDRESS>
<android.telecom.TelecomManager: java.lang.String GATEWAY_PROVIDER_PACKAGE>
<android.telecom.TelecomManager: java.lang.String METADATA_INCLUDE_EXTERNAL_CALLS>
<android.telecom.TelecomManager: java.lang.String METADATA_INCLUDE_SELF_MANAGED_CALLS>
<android.telecom.TelecomManager: java.lang.String METADATA_IN_CALL_SERVICE_CAR_MODE_UI>
<android.telecom.TelecomManager: java.lang.String METADATA_IN_CALL_SERVICE_RINGING>
<android.telecom.TelecomManager: java.lang.String METADATA_IN_CALL_SERVICE_UI>
<android.telecom.TelecomManager: int PRESENTATION_ALLOWED>
<android.telecom.TelecomManager: int PRESENTATION_PAYPHONE>
<android.telecom.TelecomManager: int PRESENTATION_RESTRICTED>
<android.telecom.TelecomManager: int PRESENTATION_UNAVAILABLE>
<android.telecom.TelecomManager: int PRESENTATION_UNKNOWN>
<android.telecom.TelecomManager: int PRIORITY_NORMAL>
<android.telecom.TelecomManager: int PRIORITY_URGENT>
android.telecom.VideoProfile
<android.telecom.VideoProfile: void <init>(int)>
<android.telecom.VideoProfile: void <init>(int,int)>
<android.telecom.VideoProfile: int describeContents()>
<android.telecom.VideoProfile: int getQuality()>
<android.telecom.VideoProfile: int getVideoState()>
<android.telecom.VideoProfile: boolean isAudioOnly(int)>
<android.telecom.VideoProfile: boolean isBidirectional(int)>
<android.telecom.VideoProfile: boolean isPaused(int)>
<android.telecom.VideoProfile: boolean isReceptionEnabled(int)>
<android.telecom.VideoProfile: boolean isTransmissionEnabled(int)>
<android.telecom.VideoProfile: boolean isVideo(int)>
<android.telecom.VideoProfile: java.lang.String videoStateToString(int)>
<android.telecom.VideoProfile: void writeToParcel(android.os.Parcel,int)>
<android.telecom.VideoProfile: android.os.Parcelable$Creator CREATOR>
<android.telecom.VideoProfile: int QUALITY_DEFAULT>
<android.telecom.VideoProfile: int QUALITY_HIGH>
<android.telecom.VideoProfile: int QUALITY_LOW>
<android.telecom.VideoProfile: int QUALITY_MEDIUM>
<android.telecom.VideoProfile: int STATE_AUDIO_ONLY>
<android.telecom.VideoProfile: int STATE_BIDIRECTIONAL>
<android.telecom.VideoProfile: int STATE_PAUSED>
<android.telecom.VideoProfile: int STATE_RX_ENABLED>
<android.telecom.VideoProfile: int STATE_TX_ENABLED>
android.telecom.VideoProfile$CameraCapabilities
<android.telecom.VideoProfile$CameraCapabilities: void <init>(int,int)>
<android.telecom.VideoProfile$CameraCapabilities: void <init>(int,int,boolean,float)>
<android.telecom.VideoProfile$CameraCapabilities: int describeContents()>
<android.telecom.VideoProfile$CameraCapabilities: int getHeight()>
<android.telecom.VideoProfile$CameraCapabilities: float getMaxZoom()>
<android.telecom.VideoProfile$CameraCapabilities: int getWidth()>
<android.telecom.VideoProfile$CameraCapabilities: boolean isZoomSupported()>
<android.telecom.VideoProfile$CameraCapabilities: void writeToParcel(android.os.Parcel,int)>
<android.telecom.VideoProfile$CameraCapabilities: android.os.Parcelable$Creator CREATOR>
android.telephony.AccessNetworkConstants
<android.telephony.AccessNetworkConstants: int TRANSPORT_TYPE_WLAN>
<android.telephony.AccessNetworkConstants: int TRANSPORT_TYPE_WWAN>
android.telephony.AccessNetworkConstants$AccessNetworkType
<android.telephony.AccessNetworkConstants$AccessNetworkType: int CDMA2000>
<android.telephony.AccessNetworkConstants$AccessNetworkType: int EUTRAN>
<android.telephony.AccessNetworkConstants$AccessNetworkType: int GERAN>
<android.telephony.AccessNetworkConstants$AccessNetworkType: int IWLAN>
<android.telephony.AccessNetworkConstants$AccessNetworkType: int NGRAN>
<android.telephony.AccessNetworkConstants$AccessNetworkType: int UNKNOWN>
<android.telephony.AccessNetworkConstants$AccessNetworkType: int UTRAN>
android.telephony.AccessNetworkConstants$EutranBand
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_1>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_10>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_11>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_12>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_13>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_14>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_17>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_18>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_19>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_2>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_20>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_21>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_22>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_23>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_24>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_25>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_26>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_27>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_28>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_3>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_30>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_31>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_33>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_34>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_35>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_36>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_37>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_38>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_39>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_4>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_40>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_41>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_42>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_43>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_44>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_45>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_46>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_47>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_48>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_49>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_5>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_50>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_51>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_52>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_53>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_6>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_65>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_66>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_68>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_7>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_70>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_71>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_72>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_73>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_74>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_8>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_85>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_87>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_88>
<android.telephony.AccessNetworkConstants$EutranBand: int BAND_9>
android.telephony.AccessNetworkConstants$GeranBand
<android.telephony.AccessNetworkConstants$GeranBand: int BAND_450>
<android.telephony.AccessNetworkConstants$GeranBand: int BAND_480>
<android.telephony.AccessNetworkConstants$GeranBand: int BAND_710>
<android.telephony.AccessNetworkConstants$GeranBand: int BAND_750>
<android.telephony.AccessNetworkConstants$GeranBand: int BAND_850>
<android.telephony.AccessNetworkConstants$GeranBand: int BAND_DCS1800>
<android.telephony.AccessNetworkConstants$GeranBand: int BAND_E900>
<android.telephony.AccessNetworkConstants$GeranBand: int BAND_ER900>
<android.telephony.AccessNetworkConstants$GeranBand: int BAND_P900>
<android.telephony.AccessNetworkConstants$GeranBand: int BAND_PCS1900>
<android.telephony.AccessNetworkConstants$GeranBand: int BAND_R900>
<android.telephony.AccessNetworkConstants$GeranBand: int BAND_T380>
<android.telephony.AccessNetworkConstants$GeranBand: int BAND_T410>
<android.telephony.AccessNetworkConstants$GeranBand: int BAND_T810>
android.telephony.AccessNetworkConstants$NgranBands
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_1>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_12>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_14>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_18>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_2>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_20>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_25>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_257>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_258>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_26>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_260>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_261>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_28>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_29>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_3>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_30>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_34>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_38>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_39>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_40>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_41>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_46>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_48>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_5>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_50>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_51>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_53>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_65>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_66>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_7>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_70>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_71>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_74>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_75>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_76>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_77>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_78>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_79>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_8>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_80>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_81>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_82>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_83>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_84>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_86>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_89>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_90>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_91>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_92>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_93>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_94>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_95>
<android.telephony.AccessNetworkConstants$NgranBands: int BAND_96>
android.telephony.AccessNetworkConstants$UtranBand
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_1>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_10>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_11>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_12>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_13>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_14>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_19>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_2>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_20>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_21>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_22>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_25>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_26>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_3>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_4>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_5>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_6>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_7>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_8>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_9>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_A>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_B>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_C>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_D>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_E>
<android.telephony.AccessNetworkConstants$UtranBand: int BAND_F>
android.telephony.AvailableNetworkInfo
<android.telephony.AvailableNetworkInfo: void <init>(int,int,java.util.List,java.util.List)>
<android.telephony.AvailableNetworkInfo: int describeContents()>
<android.telephony.AvailableNetworkInfo: java.util.List getBands()>
<android.telephony.AvailableNetworkInfo: java.util.List getMccMncs()>
<android.telephony.AvailableNetworkInfo: int getPriority()>
<android.telephony.AvailableNetworkInfo: java.util.List getRadioAccessSpecifiers()>
<android.telephony.AvailableNetworkInfo: int getSubId()>
<android.telephony.AvailableNetworkInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.AvailableNetworkInfo: android.os.Parcelable$Creator CREATOR>
<android.telephony.AvailableNetworkInfo: int PRIORITY_HIGH>
<android.telephony.AvailableNetworkInfo: int PRIORITY_LOW>
<android.telephony.AvailableNetworkInfo: int PRIORITY_MED>
android.telephony.AvailableNetworkInfo$Builder
<android.telephony.AvailableNetworkInfo$Builder: void <init>(int)>
<android.telephony.AvailableNetworkInfo$Builder: android.telephony.AvailableNetworkInfo build()>
<android.telephony.AvailableNetworkInfo$Builder: android.telephony.AvailableNetworkInfo$Builder setMccMncs(java.util.List)>
<android.telephony.AvailableNetworkInfo$Builder: android.telephony.AvailableNetworkInfo$Builder setPriority(int)>
<android.telephony.AvailableNetworkInfo$Builder: android.telephony.AvailableNetworkInfo$Builder setRadioAccessSpecifiers(java.util.List)>
android.telephony.BarringInfo
<android.telephony.BarringInfo: int describeContents()>
<android.telephony.BarringInfo: android.telephony.BarringInfo$BarringServiceInfo getBarringServiceInfo(int)>
<android.telephony.BarringInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.BarringInfo: int BARRING_SERVICE_TYPE_CS_FALLBACK>
<android.telephony.BarringInfo: int BARRING_SERVICE_TYPE_CS_SERVICE>
<android.telephony.BarringInfo: int BARRING_SERVICE_TYPE_CS_VOICE>
<android.telephony.BarringInfo: int BARRING_SERVICE_TYPE_EMERGENCY>
<android.telephony.BarringInfo: int BARRING_SERVICE_TYPE_MMTEL_VIDEO>
<android.telephony.BarringInfo: int BARRING_SERVICE_TYPE_MMTEL_VOICE>
<android.telephony.BarringInfo: int BARRING_SERVICE_TYPE_MO_DATA>
<android.telephony.BarringInfo: int BARRING_SERVICE_TYPE_MO_SIGNALLING>
<android.telephony.BarringInfo: int BARRING_SERVICE_TYPE_PS_SERVICE>
<android.telephony.BarringInfo: int BARRING_SERVICE_TYPE_SMS>
<android.telephony.BarringInfo: android.os.Parcelable$Creator CREATOR>
android.telephony.BarringInfo$BarringServiceInfo
<android.telephony.BarringInfo$BarringServiceInfo: int describeContents()>
<android.telephony.BarringInfo$BarringServiceInfo: int getBarringType()>
<android.telephony.BarringInfo$BarringServiceInfo: int getConditionalBarringFactor()>
<android.telephony.BarringInfo$BarringServiceInfo: int getConditionalBarringTimeSeconds()>
<android.telephony.BarringInfo$BarringServiceInfo: boolean isBarred()>
<android.telephony.BarringInfo$BarringServiceInfo: boolean isConditionallyBarred()>
<android.telephony.BarringInfo$BarringServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.BarringInfo$BarringServiceInfo: int BARRING_TYPE_CONDITIONAL>
<android.telephony.BarringInfo$BarringServiceInfo: int BARRING_TYPE_NONE>
<android.telephony.BarringInfo$BarringServiceInfo: int BARRING_TYPE_UNCONDITIONAL>
<android.telephony.BarringInfo$BarringServiceInfo: int BARRING_TYPE_UNKNOWN>
<android.telephony.BarringInfo$BarringServiceInfo: android.os.Parcelable$Creator CREATOR>
android.telephony.CarrierConfigManager
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfig()>
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigByComponentForSubId(java.lang.String,int)>
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>
<android.telephony.CarrierConfigManager: boolean isConfigForIdentifiedCarrier(android.os.PersistableBundle)>
<android.telephony.CarrierConfigManager: void notifyConfigChangedForSubId(int)>
<android.telephony.CarrierConfigManager: java.lang.String ACTION_CARRIER_CONFIG_CHANGED>
<android.telephony.CarrierConfigManager: int CARRIER_NR_AVAILABILITY_NSA>
<android.telephony.CarrierConfigManager: int CARRIER_NR_AVAILABILITY_SA>
<android.telephony.CarrierConfigManager: int CROSS_SIM_SPN_FORMAT_CARRIER_NAME_ONLY>
<android.telephony.CarrierConfigManager: int CROSS_SIM_SPN_FORMAT_CARRIER_NAME_WITH_BRANDING>
<android.telephony.CarrierConfigManager: int DATA_CYCLE_THRESHOLD_DISABLED>
<android.telephony.CarrierConfigManager: int DATA_CYCLE_USE_PLATFORM_DEFAULT>
<android.telephony.CarrierConfigManager: java.lang.String ENABLE_EAP_METHOD_PREFIX_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String EXTRA_REBROADCAST_ON_UNLOCK>
<android.telephony.CarrierConfigManager: java.lang.String EXTRA_SLOT_INDEX>
<android.telephony.CarrierConfigManager: java.lang.String EXTRA_SUBSCRIPTION_INDEX>
<android.telephony.CarrierConfigManager: java.lang.String IMSI_KEY_AVAILABILITY_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_5G_NR_SSRSRP_THRESHOLDS_INT_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_5G_NR_SSRSRQ_THRESHOLDS_INT_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_5G_NR_SSSINR_THRESHOLDS_INT_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ADDITIONAL_CALL_SETTING_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ALLOW_ADDING_APNS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ALLOW_ADD_CALL_DURING_VIDEO_CALL_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ALLOW_EMERGENCY_NUMBERS_IN_CALL_LOG_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ALLOW_EMERGENCY_VIDEO_CALLS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ALLOW_HOLD_CALL_DURING_EMERGENCY_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ALLOW_HOLD_VIDEO_CALL_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ALLOW_LOCAL_DTMF_TONES_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ALLOW_MERGE_WIFI_CALLS_WHEN_VOWIFI_OFF_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ALLOW_NON_EMERGENCY_CALLS_IN_ECM_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ALLOW_VIDEO_CALLING_FALLBACK_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ALWAYS_SHOW_DATA_RAT_ICON_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ALWAYS_SHOW_EMERGENCY_ALERT_ONOFF_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ALWAYS_SHOW_PRIMARY_SIGNAL_BAR_IN_OPPORTUNISTIC_NETWORK_BOOLEAN>
<android.telephony.CarrierConfigManager: java.lang.String KEY_APN_EXPAND_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_APN_SETTINGS_DEFAULT_APN_TYPES_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_AUTO_RETRY_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CALL_BARRING_DEFAULT_SERVICE_CLASS_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CALL_BARRING_SUPPORTS_DEACTIVATE_ALL_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CALL_BARRING_SUPPORTS_PASSWORD_CHANGE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CALL_BARRING_VISIBILITY_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CALL_COMPOSER_PICTURE_SERVER_URL_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CALL_FORWARDING_BLOCKS_WHILE_ROAMING_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CALL_REDIRECTION_SERVICE_COMPONENT_NAME_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_ALLOW_DEFLECT_IMS_CALL_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_ALLOW_TURNOFF_IMS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_APP_REQUIRED_DURING_SIM_SETUP_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_CALL_SCREENING_APP_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_CERTIFICATE_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_CONFIG_APPLIED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_CONFIG_VERSION_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_CROSS_SIM_IMS_AVAILABLE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_DATA_CALL_PERMANENT_FAILURE_STRINGS>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_DEFAULT_ACTIONS_ON_DCFAILURE_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_DEFAULT_ACTIONS_ON_DEFAULT_NETWORK_AVAILABLE>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_DEFAULT_ACTIONS_ON_REDIRECTION_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_DEFAULT_ACTIONS_ON_RESET>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_DEFAULT_REDIRECTION_URL_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_DEFAULT_WFC_IMS_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_DEFAULT_WFC_IMS_MODE_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_MODE_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_FORCE_DISABLE_ETWS_CMAS_TEST_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_IMS_GBA_REQUIRED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_INSTANT_LETTERING_AVAILABLE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_INSTANT_LETTERING_ENCODING_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_INSTANT_LETTERING_ESCAPED_CHARS_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_INSTANT_LETTERING_INVALID_CHARS_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_INSTANT_LETTERING_LENGTH_LIMIT_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_NAME_OVERRIDE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_NAME_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_NR_AVAILABILITIES_INT_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_PROVISIONS_WIFI_MERGED_NETWORKS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_RCS_PROVISIONING_REQUIRED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_SETTINGS_ACTIVITY_COMPONENT_NAME_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_SETTINGS_ENABLE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_SUPPORTS_OPP_DATA_AUTO_PROVISIONING_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_SUPPORTS_SS_OVER_UT_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_SUPPORTS_TETHERING_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_USE_IMS_FIRST_FOR_EMERGENCY_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_USSD_METHOD_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_UT_PROVISIONING_REQUIRED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_VOLTE_AVAILABLE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_VOLTE_OVERRIDE_WFC_PROVISIONING_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_VOLTE_PROVISIONED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_VOLTE_PROVISIONING_REQUIRED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_VT_AVAILABLE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_VVM_PACKAGE_NAME_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_VVM_PACKAGE_NAME_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_WFC_IMS_AVAILABLE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CARRIER_WFC_SUPPORTS_WIFI_ONLY_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CDMA_3WAYCALL_FLASH_DELAY_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CDMA_DTMF_TONE_DELAY_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CDMA_NONROAMING_NETWORKS_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CDMA_ROAMING_MODE_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CDMA_ROAMING_NETWORKS_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CELLULAR_USAGE_SETTING_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CHECK_PRICING_WITH_CARRIER_FOR_DATA_ROAMING_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CI_ACTION_ON_SYS_UPDATE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CI_ACTION_ON_SYS_UPDATE_EXTRA_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CI_ACTION_ON_SYS_UPDATE_EXTRA_VAL_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CI_ACTION_ON_SYS_UPDATE_INTENT_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CONFIG_IMS_MMTEL_PACKAGE_OVERRIDE_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CONFIG_IMS_RCS_PACKAGE_OVERRIDE_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CONFIG_PLANS_PACKAGE_OVERRIDE_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CONFIG_TELEPHONY_USE_OWN_NUMBER_FOR_VOICEMAIL_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CONFIG_WIFI_DISABLE_IN_ECBM>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CROSS_SIM_SPN_FORMAT_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_CSP_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DATA_LIMIT_NOTIFICATION_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DATA_LIMIT_THRESHOLD_BYTES_LONG>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DATA_RAPID_NOTIFICATION_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DATA_SWITCH_VALIDATION_TIMEOUT_LONG>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DATA_WARNING_NOTIFICATION_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DATA_WARNING_THRESHOLD_BYTES_LONG>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DEFAULT_SIM_CALL_MANAGER_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DEFAULT_VM_NUMBER_ROAMING_AND_IMS_UNREGISTERED_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DEFAULT_VM_NUMBER_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DIAL_STRING_REPLACE_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DISABLE_CDMA_ACTIVATION_CODE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DISABLE_CHARGE_INDICATION_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DISABLE_SUPPLEMENTARY_SERVICES_IN_AIRPLANE_MODE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DISCONNECT_CAUSE_PLAY_BUSYTONE_INT_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DISPLAY_CALL_STRENGTH_INDICATOR_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DISPLAY_HD_AUDIO_PROPERTY_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DROP_VIDEO_CALL_WHEN_ANSWERING_AUDIO_CALL_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DTMF_TYPE_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_DURATION_BLOCKING_DISABLED_AFTER_EMERGENCY_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_EDITABLE_ENHANCED_4G_LTE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_EDITABLE_VOICEMAIL_NUMBER_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_EDITABLE_VOICEMAIL_NUMBER_SETTING_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_EDITABLE_WFC_MODE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_EDITABLE_WFC_ROAMING_MODE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_EMERGENCY_NOTIFICATION_DELAY_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_EMERGENCY_NUMBER_PREFIX_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ENABLE_CROSS_SIM_CALLING_ON_OPPORTUNISTIC_DATA_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ENABLE_DIALER_KEY_VIBRATION_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ENHANCED_4G_LTE_ON_BY_DEFAULT_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ENHANCED_4G_LTE_TITLE_VARIANT_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ESIM_DOWNLOAD_RETRY_BACKOFF_TIMER_SEC_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ESIM_MAX_DOWNLOAD_RETRY_ATTEMPTS_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_FORCE_HOME_NETWORK_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_GSM_DTMF_TONE_DELAY_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_GSM_NONROAMING_NETWORKS_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_GSM_ROAMING_NETWORKS_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_HAS_IN_CALL_NOISE_SUPPRESSION_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_HIDE_CARRIER_NETWORK_SETTINGS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_HIDE_ENABLE_2G>
<android.telephony.CarrierConfigManager: java.lang.String KEY_HIDE_ENHANCED_4G_LTE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_HIDE_IMS_APN_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_HIDE_LTE_PLUS_DATA_ICON_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_HIDE_PREFERRED_NETWORK_TYPE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_HIDE_PRESET_APN_DETAILS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_HIDE_SIM_LOCK_SETTINGS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_HIDE_TTY_HCO_VCO_WITH_RTT_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_IGNORE_DATA_ENABLED_CHANGED_FOR_VIDEO_CALLS>
<android.telephony.CarrierConfigManager: java.lang.String KEY_IGNORE_RTT_MODE_SETTING_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_IGNORE_SIM_NETWORK_LOCKED_EVENTS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_IMS_CONFERENCE_SIZE_LIMIT_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_IMS_DTMF_TONE_DELAY_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_IS_IMS_CONFERENCE_SIZE_ENFORCED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_IS_OPPORTUNISTIC_SUBSCRIPTION_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_LTE_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_LTE_RSRQ_THRESHOLDS_INT_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_LTE_RSSNR_THRESHOLDS_INT_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MDN_IS_ADDITIONAL_VOICEMAIL_NUMBER_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_ALIAS_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_ALIAS_MAX_CHARS_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_ALIAS_MIN_CHARS_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_ALLOW_ATTACH_AUDIO_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_APPEND_TRANSACTION_ID_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_CLOSE_CONNECTION_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_EMAIL_GATEWAY_NUMBER_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_GROUP_MMS_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_HTTP_PARAMS_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_HTTP_SOCKET_TIMEOUT_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_MAX_IMAGE_HEIGHT_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_MAX_IMAGE_WIDTH_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_MAX_MESSAGE_SIZE_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_MESSAGE_TEXT_MAX_SIZE_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_MMS_DELIVERY_REPORT_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_MMS_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_MMS_READ_REPORT_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_MULTIPART_SMS_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_NAI_SUFFIX_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_NOTIFY_WAP_MMSC_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_RECIPIENT_LIMIT_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGES_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_SHOW_CELL_BROADCAST_APP_LINKS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_SMS_DELIVERY_REPORT_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_SMS_TO_MMS_TEXT_LENGTH_THRESHOLD_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_SMS_TO_MMS_TEXT_THRESHOLD_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_SUBJECT_MAX_LENGTH_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_SUPPORT_HTTP_CHARSET_HEADER_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_SUPPORT_MMS_CONTENT_DISPOSITION_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_UA_PROF_TAG_NAME_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_UA_PROF_URL_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MMS_USER_AGENT_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_MONTHLY_DATA_CYCLE_DAY_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ONLY_AUTO_SELECT_IN_HOME_NETWORK_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_ONLY_SINGLE_DC_ALLOWED_INT_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_OPERATOR_SELECTION_EXPAND_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_OPPORTUNISTIC_NETWORK_BACKOFF_TIME_LONG>
<android.telephony.CarrierConfigManager: java.lang.String KEY_OPPORTUNISTIC_NETWORK_DATA_SWITCH_EXIT_HYSTERESIS_TIME_LONG>
<android.telephony.CarrierConfigManager: java.lang.String KEY_OPPORTUNISTIC_NETWORK_DATA_SWITCH_HYSTERESIS_TIME_LONG>
<android.telephony.CarrierConfigManager: java.lang.String KEY_OPPORTUNISTIC_NETWORK_ENTRY_OR_EXIT_HYSTERESIS_TIME_LONG>
<android.telephony.CarrierConfigManager: java.lang.String KEY_OPPORTUNISTIC_NETWORK_ENTRY_THRESHOLD_BANDWIDTH_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_OPPORTUNISTIC_NETWORK_ENTRY_THRESHOLD_RSRP_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_OPPORTUNISTIC_NETWORK_ENTRY_THRESHOLD_RSSNR_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_OPPORTUNISTIC_NETWORK_EXIT_THRESHOLD_RSRP_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_OPPORTUNISTIC_NETWORK_EXIT_THRESHOLD_RSSNR_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_OPPORTUNISTIC_NETWORK_MAX_BACKOFF_TIME_LONG>
<android.telephony.CarrierConfigManager: java.lang.String KEY_OPPORTUNISTIC_NETWORK_PING_PONG_TIME_LONG>
<android.telephony.CarrierConfigManager: java.lang.String KEY_PING_TEST_BEFORE_DATA_SWITCH_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_PREFER_2G_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_PREVENT_CLIR_ACTIVATION_AND_DEACTIVATION_CODE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_RADIO_RESTART_FAILURE_CAUSES_INT_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_RCS_CONFIG_SERVER_URL_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_READ_ONLY_APN_FIELDS_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_READ_ONLY_APN_TYPES_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_REQUIRE_ENTITLEMENT_CHECKS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_RESTART_RADIO_ON_PDP_FAIL_REGULAR_DEACTIVATION_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_RTT_AUTO_UPGRADE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_RTT_DOWNGRADE_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_RTT_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_RTT_SUPPORTED_FOR_VT_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_RTT_SUPPORTED_WHILE_ROAMING_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_RTT_UPGRADE_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_RTT_UPGRADE_SUPPORTED_FOR_DOWNGRADED_VT_CALL_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SHOW_4G_FOR_3G_DATA_ICON_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SHOW_4G_FOR_LTE_DATA_ICON_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SHOW_APN_SETTING_CDMA_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SHOW_BLOCKING_PAY_PHONE_OPTION_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SHOW_CALL_BLOCKING_DISABLED_NOTIFICATION_ALWAYS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SHOW_CDMA_CHOICES_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SHOW_FORWARDED_NUMBER_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SHOW_ICCID_IN_SIM_STATUS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SHOW_IMS_REGISTRATION_STATUS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SHOW_ONSCREEN_DIAL_BUTTON_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SHOW_SIGNAL_STRENGTH_IN_SIM_STATUS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SHOW_VIDEO_CALL_CHARGES_ALERT_DIALOG_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SHOW_WFC_LOCATION_PRIVACY_POLICY_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SIMPLIFIED_NETWORK_SETTINGS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SIM_NETWORK_UNLOCK_ALLOW_DISMISS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SMDP_SERVER_ADDRESS_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SMS_REQUIRES_DESTINATION_NUMBER_CONVERSION_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUBSCRIPTION_GROUP_UUID_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORTS_CALL_COMPOSER_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORTS_DEVICE_TO_DEVICE_COMMUNICATION_USING_DTMF_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORTS_DEVICE_TO_DEVICE_COMMUNICATION_USING_RTP_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORTS_SDP_NEGOTIATION_OF_D2D_RTP_HEADER_EXTENSIONS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORT_3GPP_CALL_FORWARDING_WHILE_ROAMING_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORT_ADD_CONFERENCE_PARTICIPANTS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORT_ADHOC_CONFERENCE_CALLS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORT_CLIR_NETWORK_DEFAULT_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORT_CONFERENCE_CALL_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORT_EMERGENCY_SMS_OVER_IMS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORT_ENHANCED_CALL_BLOCKING_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORT_IMS_CONFERENCE_EVENT_PACKAGE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORT_PAUSE_IMS_VIDEO_CALLS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORT_SWAP_AFTER_MERGE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORT_TDSCDMA_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SUPPORT_TDSCDMA_ROAMING_NETWORKS_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_SWITCH_DATA_TO_PRIMARY_IF_PRIMARY_IS_OOS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_TREAT_DOWNGRADED_VIDEO_CALLS_AS_VIDEO_CALLS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_TTY_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_UNLOGGABLE_NUMBERS_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_USE_ACS_FOR_RCS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_USE_HFA_FOR_PROVISIONING_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_USE_IP_FOR_CALLING_INDICATOR_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_USE_OTASP_FOR_PROVISIONING_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_USE_RCS_PRESENCE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_USE_RCS_SIP_OPTIONS_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_USE_WFC_HOME_NETWORK_MODE_IN_ROAMING_NETWORK_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_VOICEMAIL_NOTIFICATION_PERSISTENT_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_VOICE_PRIVACY_DISABLE_UI_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_VOLTE_REPLACEMENT_RAT_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_VT_UPGRADE_SUPPORTED_FOR_DOWNGRADED_RTT_CALL_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_VVM_CELLULAR_DATA_REQUIRED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_VVM_CLIENT_PREFIX_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_VVM_DESTINATION_NUMBER_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_VVM_DISABLED_CAPABILITIES_STRING_ARRAY>
<android.telephony.CarrierConfigManager: java.lang.String KEY_VVM_LEGACY_MODE_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_VVM_PORT_NUMBER_INT>
<android.telephony.CarrierConfigManager: java.lang.String KEY_VVM_PREFETCH_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_VVM_SSL_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_VVM_TYPE_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_WFC_EMERGENCY_ADDRESS_CARRIER_APP_STRING>
<android.telephony.CarrierConfigManager: java.lang.String KEY_WORLD_MODE_ENABLED_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String KEY_WORLD_PHONE_BOOL>
<android.telephony.CarrierConfigManager: java.lang.String REMOVE_GROUP_UUID_STRING>
<android.telephony.CarrierConfigManager: int SERVICE_CLASS_NONE>
<android.telephony.CarrierConfigManager: int SERVICE_CLASS_VOICE>
<android.telephony.CarrierConfigManager: int USSD_OVER_CS_ONLY>
<android.telephony.CarrierConfigManager: int USSD_OVER_CS_PREFERRED>
<android.telephony.CarrierConfigManager: int USSD_OVER_IMS_ONLY>
<android.telephony.CarrierConfigManager: int USSD_OVER_IMS_PREFERRED>
android.telephony.CarrierConfigManager$Apn
<android.telephony.CarrierConfigManager$Apn: java.lang.String KEY_PREFIX>
<android.telephony.CarrierConfigManager$Apn: java.lang.String KEY_SETTINGS_DEFAULT_PROTOCOL_STRING>
<android.telephony.CarrierConfigManager$Apn: java.lang.String KEY_SETTINGS_DEFAULT_ROAMING_PROTOCOL_STRING>
<android.telephony.CarrierConfigManager$Apn: java.lang.String PROTOCOL_IPV4>
<android.telephony.CarrierConfigManager$Apn: java.lang.String PROTOCOL_IPV4V6>
<android.telephony.CarrierConfigManager$Apn: java.lang.String PROTOCOL_IPV6>
android.telephony.CarrierConfigManager$Bsf
<android.telephony.CarrierConfigManager$Bsf: java.lang.String KEY_BSF_SERVER_FQDN_STRING>
<android.telephony.CarrierConfigManager$Bsf: java.lang.String KEY_BSF_SERVER_PORT_INT>
<android.telephony.CarrierConfigManager$Bsf: java.lang.String KEY_BSF_TRANSPORT_TYPE_INT>
<android.telephony.CarrierConfigManager$Bsf: java.lang.String KEY_PREFIX>
android.telephony.CarrierConfigManager$Gps
<android.telephony.CarrierConfigManager$Gps: java.lang.String KEY_PERSIST_LPP_MODE_BOOL>
<android.telephony.CarrierConfigManager$Gps: java.lang.String KEY_PREFIX>
android.telephony.CarrierConfigManager$Ims
<android.telephony.CarrierConfigManager$Ims: int E911_RTCP_INACTIVITY_ON_CONNECTED>
<android.telephony.CarrierConfigManager$Ims: int E911_RTP_INACTIVITY_ON_CONNECTED>
<android.telephony.CarrierConfigManager$Ims: int GEOLOCATION_PIDF_FOR_EMERGENCY_ON_CELLULAR>
<android.telephony.CarrierConfigManager$Ims: int GEOLOCATION_PIDF_FOR_EMERGENCY_ON_WIFI>
<android.telephony.CarrierConfigManager$Ims: int GEOLOCATION_PIDF_FOR_NON_EMERGENCY_ON_CELLULAR>
<android.telephony.CarrierConfigManager$Ims: int GEOLOCATION_PIDF_FOR_NON_EMERGENCY_ON_WIFI>
<android.telephony.CarrierConfigManager$Ims: int IPSEC_AUTHENTICATION_ALGORITHM_HMAC_MD5>
<android.telephony.CarrierConfigManager$Ims: int IPSEC_AUTHENTICATION_ALGORITHM_HMAC_SHA1>
<android.telephony.CarrierConfigManager$Ims: int IPSEC_ENCRYPTION_ALGORITHM_AES_CBC>
<android.telephony.CarrierConfigManager$Ims: int IPSEC_ENCRYPTION_ALGORITHM_DES_EDE3_CBC>
<android.telephony.CarrierConfigManager$Ims: int IPSEC_ENCRYPTION_ALGORITHM_NULL>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_CAPABILITY_TYPE_CALL_COMPOSER_INT_ARRAY>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_CAPABILITY_TYPE_OPTIONS_UCE_INT_ARRAY>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_CAPABILITY_TYPE_PRESENCE_UCE_INT_ARRAY>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_CAPABILITY_TYPE_SMS_INT_ARRAY>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_CAPABILITY_TYPE_UT_INT_ARRAY>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_CAPABILITY_TYPE_VIDEO_INT_ARRAY>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_CAPABILITY_TYPE_VOICE_INT_ARRAY>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_ENABLE_PRESENCE_CAPABILITY_EXCHANGE_BOOL>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_ENABLE_PRESENCE_GROUP_SUBSCRIBE_BOOL>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_ENABLE_PRESENCE_PUBLISH_BOOL>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_GEOLOCATION_PIDF_IN_SIP_INVITE_SUPPORT_INT_ARRAY>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_GEOLOCATION_PIDF_IN_SIP_REGISTER_SUPPORT_INT_ARRAY>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_GRUU_ENABLED_BOOL>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_IMS_PDN_ENABLED_IN_NO_VOPS_SUPPORT_INT_ARRAY>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_IMS_SINGLE_REGISTRATION_REQUIRED_BOOL>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_IMS_USER_AGENT_STRING>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_IPSEC_AUTHENTICATION_ALGORITHMS_INT_ARRAY>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_IPSEC_ENCRYPTION_ALGORITHMS_INT_ARRAY>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_IPV4_SIP_MTU_SIZE_CELLULAR_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_IPV6_SIP_MTU_SIZE_CELLULAR_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_KEEP_PDN_UP_IN_NO_VOPS_BOOL>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_MMTEL_REQUIRES_PROVISIONING_BUNDLE>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_NON_RCS_CAPABILITIES_CACHE_EXPIRATION_SEC_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_PHONE_CONTEXT_DOMAIN_NAME_STRING>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_PREFIX>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_RCS_BULK_CAPABILITY_EXCHANGE_BOOL>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_RCS_FEATURE_TAG_ALLOWED_STRING_ARRAY>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_RCS_REQUIRES_PROVISIONING_BUNDLE>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_REGISTRATION_EVENT_PACKAGE_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_REGISTRATION_EXPIRY_TIMER_SEC_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_REGISTRATION_RETRY_BASE_TIMER_MILLIS_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_REGISTRATION_RETRY_MAX_TIMER_MILLIS_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_REGISTRATION_SUBSCRIBE_EXPIRY_TIMER_SEC_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_REQUEST_URI_TYPE_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_SIP_OVER_IPSEC_ENABLED_BOOL>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_SIP_PREFERRED_TRANSPORT_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_SIP_SERVER_PORT_NUMBER_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_SIP_TIMER_B_MILLIS_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_SIP_TIMER_C_MILLIS_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_SIP_TIMER_D_MILLIS_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_SIP_TIMER_F_MILLIS_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_SIP_TIMER_H_MILLIS_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_SIP_TIMER_J_MILLIS_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_SIP_TIMER_T1_MILLIS_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_SIP_TIMER_T2_MILLIS_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_SIP_TIMER_T4_MILLIS_INT>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_SUPPORTED_RATS_INT_ARRAY>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_USE_SIP_URI_FOR_PRESENCE_SUBSCRIBE_BOOL>
<android.telephony.CarrierConfigManager$Ims: java.lang.String KEY_WIFI_OFF_DEFERRING_TIME_MILLIS_INT>
<android.telephony.CarrierConfigManager$Ims: int NETWORK_TYPE_HOME>
<android.telephony.CarrierConfigManager$Ims: int NETWORK_TYPE_ROAMING>
<android.telephony.CarrierConfigManager$Ims: int PREFERRED_TRANSPORT_DYNAMIC_UDP_TCP>
<android.telephony.CarrierConfigManager$Ims: int PREFERRED_TRANSPORT_TCP>
<android.telephony.CarrierConfigManager$Ims: int PREFERRED_TRANSPORT_TLS>
<android.telephony.CarrierConfigManager$Ims: int PREFERRED_TRANSPORT_UDP>
<android.telephony.CarrierConfigManager$Ims: int REQUEST_URI_FORMAT_SIP>
<android.telephony.CarrierConfigManager$Ims: int REQUEST_URI_FORMAT_TEL>
<android.telephony.CarrierConfigManager$Ims: int RTCP_INACTIVITY_ON_CONNECTED>
<android.telephony.CarrierConfigManager$Ims: int RTCP_INACTIVITY_ON_HOLD>
<android.telephony.CarrierConfigManager$Ims: int RTP_INACTIVITY_ON_CONNECTED>
android.telephony.CarrierConfigManager$ImsEmergency
<android.telephony.CarrierConfigManager$ImsEmergency: java.lang.String KEY_EMERGENCY_CALLBACK_MODE_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager$ImsEmergency: java.lang.String KEY_EMERGENCY_OVER_IMS_SUPPORTED_RATS_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsEmergency: java.lang.String KEY_EMERGENCY_QOS_PRECONDITION_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager$ImsEmergency: java.lang.String KEY_EMERGENCY_REGISTRATION_TIMER_MILLIS_INT>
<android.telephony.CarrierConfigManager$ImsEmergency: java.lang.String KEY_PREFIX>
<android.telephony.CarrierConfigManager$ImsEmergency: java.lang.String KEY_REFRESH_GEOLOCATION_TIMEOUT_MILLIS_INT>
<android.telephony.CarrierConfigManager$ImsEmergency: java.lang.String KEY_RETRY_EMERGENCY_ON_IMS_PDN_BOOL>
android.telephony.CarrierConfigManager$ImsRtt
<android.telephony.CarrierConfigManager$ImsRtt: java.lang.String KEY_PREFIX>
<android.telephony.CarrierConfigManager$ImsRtt: java.lang.String KEY_RED_PAYLOAD_TYPE_INT>
<android.telephony.CarrierConfigManager$ImsRtt: java.lang.String KEY_T140_PAYLOAD_TYPE_INT>
<android.telephony.CarrierConfigManager$ImsRtt: java.lang.String KEY_TEXT_AS_BANDWIDTH_KBPS_INT>
<android.telephony.CarrierConfigManager$ImsRtt: java.lang.String KEY_TEXT_CODEC_CAPABILITY_PAYLOAD_TYPES_BUNDLE>
<android.telephony.CarrierConfigManager$ImsRtt: java.lang.String KEY_TEXT_ON_DEFAULT_BEARER_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager$ImsRtt: java.lang.String KEY_TEXT_QOS_PRECONDITION_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager$ImsRtt: java.lang.String KEY_TEXT_RR_BANDWIDTH_BPS_INT>
<android.telephony.CarrierConfigManager$ImsRtt: java.lang.String KEY_TEXT_RS_BANDWIDTH_BPS_INT>
android.telephony.CarrierConfigManager$ImsServiceEntitlement
<android.telephony.CarrierConfigManager$ImsServiceEntitlement: java.lang.String KEY_ENTITLEMENT_SERVER_URL_STRING>
<android.telephony.CarrierConfigManager$ImsServiceEntitlement: java.lang.String KEY_FCM_SENDER_ID_STRING>
<android.telephony.CarrierConfigManager$ImsServiceEntitlement: java.lang.String KEY_IMS_PROVISIONING_BOOL>
<android.telephony.CarrierConfigManager$ImsServiceEntitlement: java.lang.String KEY_PREFIX>
<android.telephony.CarrierConfigManager$ImsServiceEntitlement: java.lang.String KEY_SHOW_VOWIFI_WEBVIEW_BOOL>
android.telephony.CarrierConfigManager$ImsSms
<android.telephony.CarrierConfigManager$ImsSms: java.lang.String KEY_PREFIX>
<android.telephony.CarrierConfigManager$ImsSms: java.lang.String KEY_SMS_CSFB_RETRY_ON_FAILURE_BOOL>
<android.telephony.CarrierConfigManager$ImsSms: java.lang.String KEY_SMS_OVER_IMS_FORMAT_INT>
<android.telephony.CarrierConfigManager$ImsSms: java.lang.String KEY_SMS_OVER_IMS_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager$ImsSms: java.lang.String KEY_SMS_OVER_IMS_SUPPORTED_RATS_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsSms: int SMS_FORMAT_3GPP>
<android.telephony.CarrierConfigManager$ImsSms: int SMS_FORMAT_3GPP2>
android.telephony.CarrierConfigManager$ImsSs
<android.telephony.CarrierConfigManager$ImsSs: java.lang.String KEY_NETWORK_INITIATED_USSD_OVER_IMS_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager$ImsSs: java.lang.String KEY_PREFIX>
<android.telephony.CarrierConfigManager$ImsSs: java.lang.String KEY_USE_CSFB_ON_XCAP_OVER_UT_FAILURE_BOOL>
<android.telephony.CarrierConfigManager$ImsSs: java.lang.String KEY_UT_AS_SERVER_FQDN_STRING>
<android.telephony.CarrierConfigManager$ImsSs: java.lang.String KEY_UT_AS_SERVER_PORT_INT>
<android.telephony.CarrierConfigManager$ImsSs: java.lang.String KEY_UT_IPTYPE_HOME_INT>
<android.telephony.CarrierConfigManager$ImsSs: java.lang.String KEY_UT_IPTYPE_ROAMING_INT>
<android.telephony.CarrierConfigManager$ImsSs: java.lang.String KEY_UT_REQUIRES_IMS_REGISTRATION_BOOL>
<android.telephony.CarrierConfigManager$ImsSs: java.lang.String KEY_UT_SERVER_BASED_SERVICES_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsSs: java.lang.String KEY_UT_SUPPORTED_WHEN_PS_DATA_OFF_BOOL>
<android.telephony.CarrierConfigManager$ImsSs: java.lang.String KEY_UT_SUPPORTED_WHEN_ROAMING_BOOL>
<android.telephony.CarrierConfigManager$ImsSs: java.lang.String KEY_UT_TERMINAL_BASED_SERVICES_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsSs: java.lang.String KEY_UT_TRANSPORT_TYPE_INT>
<android.telephony.CarrierConfigManager$ImsSs: java.lang.String KEY_XCAP_OVER_UT_SUPPORTED_RATS_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CB_ACR>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CB_ALL>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CB_BAIC>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CB_BAOC>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CB_BIC_ROAM>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CB_BIL>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CB_BOIC>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CB_BOIC_EXHC>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CB_IBS>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CB_OBS>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CF_ALL>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CF_ALL_CONDITONAL_FORWARDING>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CF_CFB>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CF_CFNL>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CF_CFNRC>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CF_CFNRY>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CF_CFU>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_CW>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_IDENTIFICATION_OIP>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_IDENTIFICATION_OIR>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_IDENTIFICATION_TIP>
<android.telephony.CarrierConfigManager$ImsSs: int SUPPLEMENTARY_SERVICE_IDENTIFICATION_TIR>
android.telephony.CarrierConfigManager$ImsVoice
<android.telephony.CarrierConfigManager$ImsVoice: int ALERTING_SRVCC_SUPPORT>
<android.telephony.CarrierConfigManager$ImsVoice: int BANDWIDTH_EFFICIENT>
<android.telephony.CarrierConfigManager$ImsVoice: int BASIC_SRVCC_SUPPORT>
<android.telephony.CarrierConfigManager$ImsVoice: int CONFERENCE_SUBSCRIBE_TYPE_IN_DIALOG>
<android.telephony.CarrierConfigManager$ImsVoice: int CONFERENCE_SUBSCRIBE_TYPE_OUT_OF_DIALOG>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_ENCODED_BW_TYPE_FB>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_ENCODED_BW_TYPE_NB>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_ENCODED_BW_TYPE_NB_WB>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_ENCODED_BW_TYPE_NB_WB_SWB>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_ENCODED_BW_TYPE_NB_WB_SWB_FB>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_ENCODED_BW_TYPE_SWB>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_ENCODED_BW_TYPE_WB>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_ENCODED_BW_TYPE_WB_SWB>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_ENCODED_BW_TYPE_WB_SWB_FB>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_OPERATIONAL_MODE_AMRWB_IO>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_OPERATIONAL_MODE_PRIMARY>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_PRIMARY_MODE_BITRATE_128_0_KBPS>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_PRIMARY_MODE_BITRATE_13_2_KBPS>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_PRIMARY_MODE_BITRATE_16_4_KBPS>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_PRIMARY_MODE_BITRATE_24_4_KBPS>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_PRIMARY_MODE_BITRATE_32_0_KBPS>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_PRIMARY_MODE_BITRATE_48_0_KBPS>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_PRIMARY_MODE_BITRATE_5_9_KBPS>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_PRIMARY_MODE_BITRATE_64_0_KBPS>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_PRIMARY_MODE_BITRATE_7_2_KBPS>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_PRIMARY_MODE_BITRATE_8_0_KBPS>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_PRIMARY_MODE_BITRATE_96_0_KBPS>
<android.telephony.CarrierConfigManager$ImsVoice: int EVS_PRIMARY_MODE_BITRATE_9_6_KBPS>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_AMRNB_PAYLOAD_DESCRIPTION_BUNDLE>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_AMRNB_PAYLOAD_TYPE_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_AMRWB_PAYLOAD_DESCRIPTION_BUNDLE>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_AMRWB_PAYLOAD_TYPE_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_AMR_CODEC_ATTRIBUTE_MODESET_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_AMR_CODEC_ATTRIBUTE_PAYLOAD_FORMAT_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_AUDIO_AS_BANDWIDTH_KBPS_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_AUDIO_CODEC_CAPABILITY_PAYLOAD_TYPES_BUNDLE>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_AUDIO_INACTIVITY_CALL_END_REASONS_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_AUDIO_RR_BANDWIDTH_BPS_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_AUDIO_RS_BANDWIDTH_BPS_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_AUDIO_RTCP_INACTIVITY_TIMER_MILLIS_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_AUDIO_RTP_INACTIVITY_TIMER_MILLIS_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_CARRIER_VOLTE_ROAMING_AVAILABLE_BOOL>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_CODEC_ATTRIBUTE_MODE_CHANGE_CAPABILITY_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_CODEC_ATTRIBUTE_MODE_CHANGE_NEIGHBOR_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_CODEC_ATTRIBUTE_MODE_CHANGE_PERIOD_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_CONFERENCE_FACTORY_URI_STRING>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_CONFERENCE_SUBSCRIBE_TYPE_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_DEDICATED_BEARER_WAIT_TIMER_MILLIS_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_DTMFNB_PAYLOAD_TYPE_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_DTMFWB_PAYLOAD_TYPE_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_EVS_CODEC_ATTRIBUTE_BANDWIDTH_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_EVS_CODEC_ATTRIBUTE_BITRATE_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_EVS_CODEC_ATTRIBUTE_CHANNELS_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_EVS_CODEC_ATTRIBUTE_CH_AW_RECV_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_EVS_CODEC_ATTRIBUTE_CMR_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_EVS_CODEC_ATTRIBUTE_DTX_BOOL>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_EVS_CODEC_ATTRIBUTE_DTX_RECV_BOOL>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_EVS_CODEC_ATTRIBUTE_HF_ONLY_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_EVS_CODEC_ATTRIBUTE_MODE_SWITCH_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_EVS_PAYLOAD_DESCRIPTION_BUNDLE>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_EVS_PAYLOAD_TYPE_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_INCLUDE_CALLER_ID_SERVICE_CODES_IN_SIP_INVITE_BOOL>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_MINIMUM_SESSION_EXPIRES_TIMER_SEC_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_MO_CALL_REQUEST_TIMEOUT_MILLIS_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_MULTIENDPOINT_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_OIP_SOURCE_FROM_HEADER_BOOL>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_PRACK_SUPPORTED_FOR_18X_BOOL>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_PREFIX>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_RINGBACK_TIMER_MILLIS_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_RINGING_TIMER_MILLIS_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_SESSION_EXPIRES_TIMER_SEC_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_SESSION_PRIVACY_TYPE_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_SESSION_REFRESHER_TYPE_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_SESSION_REFRESH_METHOD_INT>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_SESSION_TIMER_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_SRVCC_TYPE_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_VOICE_ON_DEFAULT_BEARER_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager$ImsVoice: java.lang.String KEY_VOICE_QOS_PRECONDITION_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager$ImsVoice: int MIDCALL_SRVCC_SUPPORT>
<android.telephony.CarrierConfigManager$ImsVoice: int OCTET_ALIGNED>
<android.telephony.CarrierConfigManager$ImsVoice: int PREALERTING_SRVCC_SUPPORT>
<android.telephony.CarrierConfigManager$ImsVoice: int SESSION_PRIVACY_TYPE_HEADER>
<android.telephony.CarrierConfigManager$ImsVoice: int SESSION_PRIVACY_TYPE_ID>
<android.telephony.CarrierConfigManager$ImsVoice: int SESSION_PRIVACY_TYPE_NONE>
<android.telephony.CarrierConfigManager$ImsVoice: int SESSION_REFRESHER_TYPE_UAC>
<android.telephony.CarrierConfigManager$ImsVoice: int SESSION_REFRESHER_TYPE_UAS>
<android.telephony.CarrierConfigManager$ImsVoice: int SESSION_REFRESHER_TYPE_UNKNOWN>
<android.telephony.CarrierConfigManager$ImsVoice: int SESSION_REFRESH_METHOD_INVITE>
<android.telephony.CarrierConfigManager$ImsVoice: int SESSION_REFRESH_METHOD_UPDATE_PREFERRED>
android.telephony.CarrierConfigManager$ImsVt
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_H264_PAYLOAD_DESCRIPTION_BUNDLE>
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_H264_PAYLOAD_TYPE_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_H264_VIDEO_CODEC_ATTRIBUTE_PROFILE_LEVEL_ID_STRING>
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_PREFIX>
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_VIDEO_AS_BANDWIDTH_KBPS_INT>
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_VIDEO_CODEC_ATTRIBUTE_FRAME_RATE_INT>
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_VIDEO_CODEC_ATTRIBUTE_PACKETIZATION_MODE_INT>
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_VIDEO_CODEC_ATTRIBUTE_RESOLUTION_INT_ARRAY>
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_VIDEO_CODEC_CAPABILITY_PAYLOAD_TYPES_BUNDLE>
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_VIDEO_ON_DEFAULT_BEARER_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_VIDEO_QOS_PRECONDITION_SUPPORTED_BOOL>
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_VIDEO_RR_BANDWIDTH_BPS_INT>
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_VIDEO_RS_BANDWIDTH_BPS_INT>
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_VIDEO_RTCP_INACTIVITY_TIMER_MILLIS_INT>
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_VIDEO_RTP_DSCP_INT>
<android.telephony.CarrierConfigManager$ImsVt: java.lang.String KEY_VIDEO_RTP_INACTIVITY_TIMER_MILLIS_INT>
android.telephony.CarrierConfigManager$ImsWfc
<android.telephony.CarrierConfigManager$ImsWfc: java.lang.String KEY_EMERGENCY_CALL_OVER_EMERGENCY_PDN_BOOL>
<android.telephony.CarrierConfigManager$ImsWfc: java.lang.String KEY_PIDF_SHORT_CODE_STRING_ARRAY>
<android.telephony.CarrierConfigManager$ImsWfc: java.lang.String KEY_PREFIX>
android.telephony.CarrierConfigManager$Iwlan
<android.telephony.CarrierConfigManager$Iwlan: int AUTHENTICATION_METHOD_CERT>
<android.telephony.CarrierConfigManager$Iwlan: int AUTHENTICATION_METHOD_EAP_ONLY>
<android.telephony.CarrierConfigManager$Iwlan: int EPDG_ADDRESS_CELLULAR_LOC>
<android.telephony.CarrierConfigManager$Iwlan: int EPDG_ADDRESS_PCO>
<android.telephony.CarrierConfigManager$Iwlan: int EPDG_ADDRESS_PLMN>
<android.telephony.CarrierConfigManager$Iwlan: int EPDG_ADDRESS_STATIC>
<android.telephony.CarrierConfigManager$Iwlan: int EPDG_ADDRESS_VISITED_COUNTRY>
<android.telephony.CarrierConfigManager$Iwlan: int ID_TYPE_FQDN>
<android.telephony.CarrierConfigManager$Iwlan: int ID_TYPE_KEY_ID>
<android.telephony.CarrierConfigManager$Iwlan: int ID_TYPE_RFC822_ADDR>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_ADD_KE_TO_CHILD_SESSION_REKEY_BOOL>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_CHILD_SA_REKEY_HARD_TIMER_SEC_INT>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_CHILD_SA_REKEY_SOFT_TIMER_SEC_INT>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_CHILD_SESSION_AES_CBC_KEY_SIZE_INT_ARRAY>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_CHILD_SESSION_AES_CTR_KEY_SIZE_INT_ARRAY>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_DIFFIE_HELLMAN_GROUPS_INT_ARRAY>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_DPD_TIMER_SEC_INT>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_EPDG_ADDRESS_PRIORITY_INT_ARRAY>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_EPDG_AUTHENTICATION_METHOD_INT>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_EPDG_PCO_ID_IPV4_INT>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_EPDG_PCO_ID_IPV6_INT>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_EPDG_STATIC_ADDRESS_ROAMING_STRING>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_EPDG_STATIC_ADDRESS_STRING>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_IKE_LOCAL_ID_TYPE_INT>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_IKE_REKEY_HARD_TIMER_SEC_INT>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_IKE_REKEY_SOFT_TIMER_SEC_INT>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_IKE_REMOTE_ID_TYPE_INT>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_IKE_SESSION_AES_CBC_KEY_SIZE_INT_ARRAY>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_IKE_SESSION_AES_CTR_KEY_SIZE_INT_ARRAY>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_MAX_RETRIES_INT>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_MCC_MNCS_STRING_ARRAY>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_NATT_KEEP_ALIVE_TIMER_SEC_INT>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_PREFIX>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_RETRANSMIT_TIMER_MSEC_INT_ARRAY>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_SUPPORTED_CHILD_SESSION_ENCRYPTION_ALGORITHMS_INT_ARRAY>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_SUPPORTED_IKE_SESSION_ENCRYPTION_ALGORITHMS_INT_ARRAY>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_SUPPORTED_INTEGRITY_ALGORITHMS_INT_ARRAY>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_SUPPORTED_PRF_ALGORITHMS_INT_ARRAY>
<android.telephony.CarrierConfigManager$Iwlan: java.lang.String KEY_SUPPORTS_EAP_AKA_FAST_REAUTH_BOOL>
android.telephony.CellIdentity
<android.telephony.CellIdentity: int describeContents()>
<android.telephony.CellIdentity: java.lang.CharSequence getOperatorAlphaLong()>
<android.telephony.CellIdentity: java.lang.CharSequence getOperatorAlphaShort()>
<android.telephony.CellIdentity: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellIdentity: android.os.Parcelable$Creator CREATOR>
android.telephony.CellIdentityCdma
<android.telephony.CellIdentityCdma: int getBasestationId()>
<android.telephony.CellIdentityCdma: int getLatitude()>
<android.telephony.CellIdentityCdma: int getLongitude()>
<android.telephony.CellIdentityCdma: int getNetworkId()>
<android.telephony.CellIdentityCdma: int getSystemId()>
<android.telephony.CellIdentityCdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellIdentityCdma: android.os.Parcelable$Creator CREATOR>
android.telephony.CellIdentityGsm
<android.telephony.CellIdentityGsm: java.util.Set getAdditionalPlmns()>
<android.telephony.CellIdentityGsm: int getArfcn()>
<android.telephony.CellIdentityGsm: int getBsic()>
<android.telephony.CellIdentityGsm: int getCid()>
<android.telephony.CellIdentityGsm: int getLac()>
<android.telephony.CellIdentityGsm: int getMcc()>
<android.telephony.CellIdentityGsm: java.lang.String getMccString()>
<android.telephony.CellIdentityGsm: int getMnc()>
<android.telephony.CellIdentityGsm: java.lang.String getMncString()>
<android.telephony.CellIdentityGsm: java.lang.String getMobileNetworkOperator()>
<android.telephony.CellIdentityGsm: int getPsc()>
<android.telephony.CellIdentityGsm: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellIdentityGsm: android.os.Parcelable$Creator CREATOR>
android.telephony.CellIdentityLte
<android.telephony.CellIdentityLte: java.util.Set getAdditionalPlmns()>
<android.telephony.CellIdentityLte: int[] getBands()>
<android.telephony.CellIdentityLte: int getBandwidth()>
<android.telephony.CellIdentityLte: int getCi()>
<android.telephony.CellIdentityLte: android.telephony.ClosedSubscriberGroupInfo getClosedSubscriberGroupInfo()>
<android.telephony.CellIdentityLte: int getEarfcn()>
<android.telephony.CellIdentityLte: int getMcc()>
<android.telephony.CellIdentityLte: java.lang.String getMccString()>
<android.telephony.CellIdentityLte: int getMnc()>
<android.telephony.CellIdentityLte: java.lang.String getMncString()>
<android.telephony.CellIdentityLte: java.lang.String getMobileNetworkOperator()>
<android.telephony.CellIdentityLte: int getPci()>
<android.telephony.CellIdentityLte: int getTac()>
<android.telephony.CellIdentityLte: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellIdentityLte: android.os.Parcelable$Creator CREATOR>
android.telephony.CellIdentityNr
<android.telephony.CellIdentityNr: java.util.Set getAdditionalPlmns()>
<android.telephony.CellIdentityNr: int[] getBands()>
<android.telephony.CellIdentityNr: java.lang.String getMccString()>
<android.telephony.CellIdentityNr: java.lang.String getMncString()>
<android.telephony.CellIdentityNr: long getNci()>
<android.telephony.CellIdentityNr: int getNrarfcn()>
<android.telephony.CellIdentityNr: int getPci()>
<android.telephony.CellIdentityNr: int getTac()>
<android.telephony.CellIdentityNr: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellIdentityNr: android.os.Parcelable$Creator CREATOR>
android.telephony.CellIdentityTdscdma
<android.telephony.CellIdentityTdscdma: java.util.Set getAdditionalPlmns()>
<android.telephony.CellIdentityTdscdma: int getCid()>
<android.telephony.CellIdentityTdscdma: android.telephony.ClosedSubscriberGroupInfo getClosedSubscriberGroupInfo()>
<android.telephony.CellIdentityTdscdma: int getCpid()>
<android.telephony.CellIdentityTdscdma: int getLac()>
<android.telephony.CellIdentityTdscdma: java.lang.String getMccString()>
<android.telephony.CellIdentityTdscdma: java.lang.String getMncString()>
<android.telephony.CellIdentityTdscdma: java.lang.String getMobileNetworkOperator()>
<android.telephony.CellIdentityTdscdma: int getUarfcn()>
<android.telephony.CellIdentityTdscdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellIdentityTdscdma: android.os.Parcelable$Creator CREATOR>
android.telephony.CellIdentityWcdma
<android.telephony.CellIdentityWcdma: java.util.Set getAdditionalPlmns()>
<android.telephony.CellIdentityWcdma: int getCid()>
<android.telephony.CellIdentityWcdma: android.telephony.ClosedSubscriberGroupInfo getClosedSubscriberGroupInfo()>
<android.telephony.CellIdentityWcdma: int getLac()>
<android.telephony.CellIdentityWcdma: int getMcc()>
<android.telephony.CellIdentityWcdma: java.lang.String getMccString()>
<android.telephony.CellIdentityWcdma: int getMnc()>
<android.telephony.CellIdentityWcdma: java.lang.String getMncString()>
<android.telephony.CellIdentityWcdma: java.lang.String getMobileNetworkOperator()>
<android.telephony.CellIdentityWcdma: int getPsc()>
<android.telephony.CellIdentityWcdma: int getUarfcn()>
<android.telephony.CellIdentityWcdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellIdentityWcdma: android.os.Parcelable$Creator CREATOR>
android.telephony.CellInfo
<android.telephony.CellInfo: int describeContents()>
<android.telephony.CellInfo: int getCellConnectionStatus()>
<android.telephony.CellInfo: android.telephony.CellIdentity getCellIdentity()>
<android.telephony.CellInfo: android.telephony.CellSignalStrength getCellSignalStrength()>
<android.telephony.CellInfo: long getTimeStamp()>
<android.telephony.CellInfo: long getTimestampMillis()>
<android.telephony.CellInfo: boolean isRegistered()>
<android.telephony.CellInfo: int CONNECTION_NONE>
<android.telephony.CellInfo: int CONNECTION_PRIMARY_SERVING>
<android.telephony.CellInfo: int CONNECTION_SECONDARY_SERVING>
<android.telephony.CellInfo: int CONNECTION_UNKNOWN>
<android.telephony.CellInfo: android.os.Parcelable$Creator CREATOR>
<android.telephony.CellInfo: int UNAVAILABLE>
<android.telephony.CellInfo: long UNAVAILABLE_LONG>
android.telephony.CellInfoCdma
<android.telephony.CellInfoCdma: android.telephony.CellIdentityCdma getCellIdentity()>
<android.telephony.CellInfoCdma: android.telephony.CellSignalStrengthCdma getCellSignalStrength()>
<android.telephony.CellInfoCdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellInfoCdma: android.os.Parcelable$Creator CREATOR>
android.telephony.CellInfoGsm
<android.telephony.CellInfoGsm: android.telephony.CellIdentityGsm getCellIdentity()>
<android.telephony.CellInfoGsm: android.telephony.CellSignalStrengthGsm getCellSignalStrength()>
<android.telephony.CellInfoGsm: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellInfoGsm: android.os.Parcelable$Creator CREATOR>
android.telephony.CellInfoLte
<android.telephony.CellInfoLte: android.telephony.CellIdentityLte getCellIdentity()>
<android.telephony.CellInfoLte: android.telephony.CellSignalStrengthLte getCellSignalStrength()>
<android.telephony.CellInfoLte: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellInfoLte: android.os.Parcelable$Creator CREATOR>
android.telephony.CellInfoNr
<android.telephony.CellInfoNr: android.telephony.CellIdentity getCellIdentity()>
<android.telephony.CellInfoNr: android.telephony.CellSignalStrength getCellSignalStrength()>
<android.telephony.CellInfoNr: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellInfoNr: android.os.Parcelable$Creator CREATOR>
android.telephony.CellInfoTdscdma
<android.telephony.CellInfoTdscdma: android.telephony.CellIdentityTdscdma getCellIdentity()>
<android.telephony.CellInfoTdscdma: android.telephony.CellSignalStrengthTdscdma getCellSignalStrength()>
<android.telephony.CellInfoTdscdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellInfoTdscdma: android.os.Parcelable$Creator CREATOR>
android.telephony.CellInfoWcdma
<android.telephony.CellInfoWcdma: android.telephony.CellIdentityWcdma getCellIdentity()>
<android.telephony.CellInfoWcdma: android.telephony.CellSignalStrengthWcdma getCellSignalStrength()>
<android.telephony.CellInfoWcdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellInfoWcdma: android.os.Parcelable$Creator CREATOR>
android.telephony.CellLocation
<android.telephony.CellLocation: void <init>()>
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()>
<android.telephony.CellLocation: void requestLocationUpdate()>
android.telephony.CellSignalStrength
<android.telephony.CellSignalStrength: boolean equals(java.lang.Object)>
<android.telephony.CellSignalStrength: int getAsuLevel()>
<android.telephony.CellSignalStrength: int getDbm()>
<android.telephony.CellSignalStrength: int getLevel()>
<android.telephony.CellSignalStrength: int hashCode()>
<android.telephony.CellSignalStrength: int SIGNAL_STRENGTH_GOOD>
<android.telephony.CellSignalStrength: int SIGNAL_STRENGTH_GREAT>
<android.telephony.CellSignalStrength: int SIGNAL_STRENGTH_MODERATE>
<android.telephony.CellSignalStrength: int SIGNAL_STRENGTH_NONE_OR_UNKNOWN>
<android.telephony.CellSignalStrength: int SIGNAL_STRENGTH_POOR>
android.telephony.CellSignalStrengthCdma
<android.telephony.CellSignalStrengthCdma: int describeContents()>
<android.telephony.CellSignalStrengthCdma: int getAsuLevel()>
<android.telephony.CellSignalStrengthCdma: int getCdmaDbm()>
<android.telephony.CellSignalStrengthCdma: int getCdmaEcio()>
<android.telephony.CellSignalStrengthCdma: int getCdmaLevel()>
<android.telephony.CellSignalStrengthCdma: int getDbm()>
<android.telephony.CellSignalStrengthCdma: int getEvdoDbm()>
<android.telephony.CellSignalStrengthCdma: int getEvdoEcio()>
<android.telephony.CellSignalStrengthCdma: int getEvdoLevel()>
<android.telephony.CellSignalStrengthCdma: int getEvdoSnr()>
<android.telephony.CellSignalStrengthCdma: int getLevel()>
<android.telephony.CellSignalStrengthCdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellSignalStrengthCdma: android.os.Parcelable$Creator CREATOR>
android.telephony.CellSignalStrengthGsm
<android.telephony.CellSignalStrengthGsm: int describeContents()>
<android.telephony.CellSignalStrengthGsm: int getAsuLevel()>
<android.telephony.CellSignalStrengthGsm: int getBitErrorRate()>
<android.telephony.CellSignalStrengthGsm: int getDbm()>
<android.telephony.CellSignalStrengthGsm: int getLevel()>
<android.telephony.CellSignalStrengthGsm: int getRssi()>
<android.telephony.CellSignalStrengthGsm: int getTimingAdvance()>
<android.telephony.CellSignalStrengthGsm: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellSignalStrengthGsm: android.os.Parcelable$Creator CREATOR>
android.telephony.CellSignalStrengthLte
<android.telephony.CellSignalStrengthLte: int describeContents()>
<android.telephony.CellSignalStrengthLte: int getAsuLevel()>
<android.telephony.CellSignalStrengthLte: int getCqi()>
<android.telephony.CellSignalStrengthLte: int getCqiTableIndex()>
<android.telephony.CellSignalStrengthLte: int getDbm()>
<android.telephony.CellSignalStrengthLte: int getLevel()>
<android.telephony.CellSignalStrengthLte: int getRsrp()>
<android.telephony.CellSignalStrengthLte: int getRsrq()>
<android.telephony.CellSignalStrengthLte: int getRssi()>
<android.telephony.CellSignalStrengthLte: int getRssnr()>
<android.telephony.CellSignalStrengthLte: int getTimingAdvance()>
<android.telephony.CellSignalStrengthLte: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellSignalStrengthLte: android.os.Parcelable$Creator CREATOR>
android.telephony.CellSignalStrengthNr
<android.telephony.CellSignalStrengthNr: int describeContents()>
<android.telephony.CellSignalStrengthNr: int getAsuLevel()>
<android.telephony.CellSignalStrengthNr: java.util.List getCsiCqiReport()>
<android.telephony.CellSignalStrengthNr: int getCsiCqiTableIndex()>
<android.telephony.CellSignalStrengthNr: int getCsiRsrp()>
<android.telephony.CellSignalStrengthNr: int getCsiRsrq()>
<android.telephony.CellSignalStrengthNr: int getCsiSinr()>
<android.telephony.CellSignalStrengthNr: int getDbm()>
<android.telephony.CellSignalStrengthNr: int getLevel()>
<android.telephony.CellSignalStrengthNr: int getSsRsrp()>
<android.telephony.CellSignalStrengthNr: int getSsRsrq()>
<android.telephony.CellSignalStrengthNr: int getSsSinr()>
<android.telephony.CellSignalStrengthNr: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellSignalStrengthNr: android.os.Parcelable$Creator CREATOR>
android.telephony.CellSignalStrengthTdscdma
<android.telephony.CellSignalStrengthTdscdma: int describeContents()>
<android.telephony.CellSignalStrengthTdscdma: int getAsuLevel()>
<android.telephony.CellSignalStrengthTdscdma: int getDbm()>
<android.telephony.CellSignalStrengthTdscdma: int getLevel()>
<android.telephony.CellSignalStrengthTdscdma: int getRscp()>
<android.telephony.CellSignalStrengthTdscdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellSignalStrengthTdscdma: android.os.Parcelable$Creator CREATOR>
android.telephony.CellSignalStrengthWcdma
<android.telephony.CellSignalStrengthWcdma: int describeContents()>
<android.telephony.CellSignalStrengthWcdma: int getAsuLevel()>
<android.telephony.CellSignalStrengthWcdma: int getDbm()>
<android.telephony.CellSignalStrengthWcdma: int getEcNo()>
<android.telephony.CellSignalStrengthWcdma: int getLevel()>
<android.telephony.CellSignalStrengthWcdma: void writeToParcel(android.os.Parcel,int)>
<android.telephony.CellSignalStrengthWcdma: android.os.Parcelable$Creator CREATOR>
android.telephony.ClosedSubscriberGroupInfo
<android.telephony.ClosedSubscriberGroupInfo: int describeContents()>
<android.telephony.ClosedSubscriberGroupInfo: int getCsgIdentity()>
<android.telephony.ClosedSubscriberGroupInfo: boolean getCsgIndicator()>
<android.telephony.ClosedSubscriberGroupInfo: java.lang.String getHomeNodebName()>
<android.telephony.ClosedSubscriberGroupInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ClosedSubscriberGroupInfo: android.os.Parcelable$Creator CREATOR>
android.telephony.DataFailCause
<android.telephony.DataFailCause: int ACCESS_ATTEMPT_ALREADY_IN_PROGRESS>
<android.telephony.DataFailCause: int ACCESS_BLOCK>
<android.telephony.DataFailCause: int ACCESS_BLOCK_ALL>
<android.telephony.DataFailCause: int ACCESS_CLASS_DSAC_REJECTION>
<android.telephony.DataFailCause: int ACCESS_CONTROL_LIST_CHECK_FAILURE>
<android.telephony.DataFailCause: int ACTIVATION_REJECTED_BCM_VIOLATION>
<android.telephony.DataFailCause: int ACTIVATION_REJECT_GGSN>
<android.telephony.DataFailCause: int ACTIVATION_REJECT_UNSPECIFIED>
<android.telephony.DataFailCause: int ACTIVE_PDP_CONTEXT_MAX_NUMBER_REACHED>
<android.telephony.DataFailCause: int ALL_MATCHING_RULES_FAILED>
<android.telephony.DataFailCause: int APN_DISABLED>
<android.telephony.DataFailCause: int APN_DISALLOWED_ON_ROAMING>
<android.telephony.DataFailCause: int APN_MISMATCH>
<android.telephony.DataFailCause: int APN_PARAMETERS_CHANGED>
<android.telephony.DataFailCause: int APN_PENDING_HANDOVER>
<android.telephony.DataFailCause: int APN_TYPE_CONFLICT>
<android.telephony.DataFailCause: int AUTH_FAILURE_ON_EMERGENCY_CALL>
<android.telephony.DataFailCause: int BEARER_HANDLING_NOT_SUPPORTED>
<android.telephony.DataFailCause: int CALL_DISALLOWED_IN_ROAMING>
<android.telephony.DataFailCause: int CALL_PREEMPT_BY_EMERGENCY_APN>
<android.telephony.DataFailCause: int CANNOT_ENCODE_OTA_MESSAGE>
<android.telephony.DataFailCause: int CDMA_ALERT_STOP>
<android.telephony.DataFailCause: int CDMA_INCOMING_CALL>
<android.telephony.DataFailCause: int CDMA_INTERCEPT>
<android.telephony.DataFailCause: int CDMA_LOCK>
<android.telephony.DataFailCause: int CDMA_RELEASE_DUE_TO_SO_REJECTION>
<android.telephony.DataFailCause: int CDMA_REORDER>
<android.telephony.DataFailCause: int CDMA_RETRY_ORDER>
<android.telephony.DataFailCause: int CHANNEL_ACQUISITION_FAILURE>
<android.telephony.DataFailCause: int CLOSE_IN_PROGRESS>
<android.telephony.DataFailCause: int COLLISION_WITH_NETWORK_INITIATED_REQUEST>
<android.telephony.DataFailCause: int COMPANION_IFACE_IN_USE>
<android.telephony.DataFailCause: int CONCURRENT_SERVICES_INCOMPATIBLE>
<android.telephony.DataFailCause: int CONCURRENT_SERVICES_NOT_ALLOWED>
<android.telephony.DataFailCause: int CONCURRENT_SERVICE_NOT_SUPPORTED_BY_BASE_STATION>
<android.telephony.DataFailCause: int CONDITIONAL_IE_ERROR>
<android.telephony.DataFailCause: int CONGESTION>
<android.telephony.DataFailCause: int CONNECTION_RELEASED>
<android.telephony.DataFailCause: int CS_DOMAIN_NOT_AVAILABLE>
<android.telephony.DataFailCause: int CS_FALLBACK_CALL_ESTABLISHMENT_NOT_ALLOWED>
<android.telephony.DataFailCause: int DATA_PLAN_EXPIRED>
<android.telephony.DataFailCause: int DATA_ROAMING_SETTINGS_DISABLED>
<android.telephony.DataFailCause: int DATA_SETTINGS_DISABLED>
<android.telephony.DataFailCause: int DBM_OR_SMS_IN_PROGRESS>
<android.telephony.DataFailCause: int DDS_SWITCHED>
<android.telephony.DataFailCause: int DDS_SWITCH_IN_PROGRESS>
<android.telephony.DataFailCause: int DRB_RELEASED_BY_RRC>
<android.telephony.DataFailCause: int DS_EXPLICIT_DEACTIVATION>
<android.telephony.DataFailCause: int DUAL_SWITCH>
<android.telephony.DataFailCause: int DUN_CALL_DISALLOWED>
<android.telephony.DataFailCause: int DUPLICATE_BEARER_ID>
<android.telephony.DataFailCause: int EHRPD_TO_HRPD_FALLBACK>
<android.telephony.DataFailCause: int EMBMS_NOT_ENABLED>
<android.telephony.DataFailCause: int EMBMS_REGULAR_DEACTIVATION>
<android.telephony.DataFailCause: int EMERGENCY_IFACE_ONLY>
<android.telephony.DataFailCause: int EMERGENCY_MODE>
<android.telephony.DataFailCause: int EMM_ACCESS_BARRED>
<android.telephony.DataFailCause: int EMM_ACCESS_BARRED_INFINITE_RETRY>
<android.telephony.DataFailCause: int EMM_ATTACH_FAILED>
<android.telephony.DataFailCause: int EMM_ATTACH_STARTED>
<android.telephony.DataFailCause: int EMM_DETACHED>
<android.telephony.DataFailCause: int EMM_T3417_EXPIRED>
<android.telephony.DataFailCause: int EMM_T3417_EXT_EXPIRED>
<android.telephony.DataFailCause: int EPS_SERVICES_AND_NON_EPS_SERVICES_NOT_ALLOWED>
<android.telephony.DataFailCause: int EPS_SERVICES_NOT_ALLOWED_IN_PLMN>
<android.telephony.DataFailCause: int ERROR_UNSPECIFIED>
<android.telephony.DataFailCause: int ESM_BAD_OTA_MESSAGE>
<android.telephony.DataFailCause: int ESM_BEARER_DEACTIVATED_TO_SYNC_WITH_NETWORK>
<android.telephony.DataFailCause: int ESM_COLLISION_SCENARIOS>
<android.telephony.DataFailCause: int ESM_CONTEXT_TRANSFERRED_DUE_TO_IRAT>
<android.telephony.DataFailCause: int ESM_DOWNLOAD_SERVER_REJECTED_THE_CALL>
<android.telephony.DataFailCause: int ESM_FAILURE>
<android.telephony.DataFailCause: int ESM_INFO_NOT_RECEIVED>
<android.telephony.DataFailCause: int ESM_LOCAL_CAUSE_NONE>
<android.telephony.DataFailCause: int ESM_NW_ACTIVATED_DED_BEARER_WITH_ID_OF_DEF_BEARER>
<android.telephony.DataFailCause: int ESM_PROCEDURE_TIME_OUT>
<android.telephony.DataFailCause: int ESM_UNKNOWN_EPS_BEARER_CONTEXT>
<android.telephony.DataFailCause: int EVDO_CONNECTION_DENY_BY_BILLING_OR_AUTHENTICATION_FAILURE>
<android.telephony.DataFailCause: int EVDO_CONNECTION_DENY_BY_GENERAL_OR_NETWORK_BUSY>
<android.telephony.DataFailCause: int EVDO_HDR_CHANGED>
<android.telephony.DataFailCause: int EVDO_HDR_CONNECTION_SETUP_TIMEOUT>
<android.telephony.DataFailCause: int EVDO_HDR_EXITED>
<android.telephony.DataFailCause: int EVDO_HDR_NO_SESSION>
<android.telephony.DataFailCause: int EVDO_USING_GPS_FIX_INSTEAD_OF_HDR_CALL>
<android.telephony.DataFailCause: int FADE>
<android.telephony.DataFailCause: int FAILED_TO_ACQUIRE_COLOCATED_HDR>
<android.telephony.DataFailCause: int FEATURE_NOT_SUPP>
<android.telephony.DataFailCause: int FILTER_SEMANTIC_ERROR>
<android.telephony.DataFailCause: int FILTER_SYTAX_ERROR>
<android.telephony.DataFailCause: int FORBIDDEN_APN_NAME>
<android.telephony.DataFailCause: int GPRS_REGISTRATION_FAIL>
<android.telephony.DataFailCause: int GPRS_SERVICES_AND_NON_GPRS_SERVICES_NOT_ALLOWED>
<android.telephony.DataFailCause: int GPRS_SERVICES_NOT_ALLOWED>
<android.telephony.DataFailCause: int GPRS_SERVICES_NOT_ALLOWED_IN_THIS_PLMN>
<android.telephony.DataFailCause: int HANDOFF_PREFERENCE_CHANGED>
<android.telephony.DataFailCause: int HDR_ACCESS_FAILURE>
<android.telephony.DataFailCause: int HDR_FADE>
<android.telephony.DataFailCause: int HDR_NO_LOCK_GRANTED>
<android.telephony.DataFailCause: int IFACE_AND_POL_FAMILY_MISMATCH>
<android.telephony.DataFailCause: int IFACE_MISMATCH>
<android.telephony.DataFailCause: int ILLEGAL_ME>
<android.telephony.DataFailCause: int ILLEGAL_MS>
<android.telephony.DataFailCause: int IMEI_NOT_ACCEPTED>
<android.telephony.DataFailCause: int IMPLICITLY_DETACHED>
<android.telephony.DataFailCause: int IMSI_UNKNOWN_IN_HOME_SUBSCRIBER_SERVER>
<android.telephony.DataFailCause: int INCOMING_CALL_REJECTED>
<android.telephony.DataFailCause: int INSUFFICIENT_RESOURCES>
<android.telephony.DataFailCause: int INTERFACE_IN_USE>
<android.telephony.DataFailCause: int INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN>
<android.telephony.DataFailCause: int INTERNAL_EPC_NONEPC_TRANSITION>
<android.telephony.DataFailCause: int INVALID_CONNECTION_ID>
<android.telephony.DataFailCause: int INVALID_DNS_ADDR>
<android.telephony.DataFailCause: int INVALID_EMM_STATE>
<android.telephony.DataFailCause: int INVALID_MANDATORY_INFO>
<android.telephony.DataFailCause: int INVALID_MODE>
<android.telephony.DataFailCause: int INVALID_PCSCF_ADDR>
<android.telephony.DataFailCause: int INVALID_PCSCF_OR_DNS_ADDRESS>
<android.telephony.DataFailCause: int INVALID_PRIMARY_NSAPI>
<android.telephony.DataFailCause: int INVALID_SIM_STATE>
<android.telephony.DataFailCause: int INVALID_TRANSACTION_ID>
<android.telephony.DataFailCause: int IPV6_ADDRESS_TRANSFER_FAILED>
<android.telephony.DataFailCause: int IPV6_PREFIX_UNAVAILABLE>
<android.telephony.DataFailCause: int IP_ADDRESS_MISMATCH>
<android.telephony.DataFailCause: int IP_VERSION_MISMATCH>
<android.telephony.DataFailCause: int IRAT_HANDOVER_FAILED>
<android.telephony.DataFailCause: int IS707B_MAX_ACCESS_PROBES>
<android.telephony.DataFailCause: int IWLAN_AUTHORIZATION_REJECTED>
<android.telephony.DataFailCause: int IWLAN_DNS_RESOLUTION_NAME_FAILURE>
<android.telephony.DataFailCause: int IWLAN_DNS_RESOLUTION_TIMEOUT>
<android.telephony.DataFailCause: int IWLAN_IKEV2_AUTH_FAILURE>
<android.telephony.DataFailCause: int IWLAN_IKEV2_CERT_INVALID>
<android.telephony.DataFailCause: int IWLAN_IKEV2_CONFIG_FAILURE>
<android.telephony.DataFailCause: int IWLAN_IKEV2_MSG_TIMEOUT>
<android.telephony.DataFailCause: int IWLAN_ILLEGAL_ME>
<android.telephony.DataFailCause: int IWLAN_IMEI_NOT_ACCEPTED>
<android.telephony.DataFailCause: int IWLAN_MAX_CONNECTION_REACHED>
<android.telephony.DataFailCause: int IWLAN_NETWORK_FAILURE>
<android.telephony.DataFailCause: int IWLAN_NON_3GPP_ACCESS_TO_EPC_NOT_ALLOWED>
<android.telephony.DataFailCause: int IWLAN_NO_APN_SUBSCRIPTION>
<android.telephony.DataFailCause: int IWLAN_PDN_CONNECTION_REJECTION>
<android.telephony.DataFailCause: int IWLAN_PLMN_NOT_ALLOWED>
<android.telephony.DataFailCause: int IWLAN_RAT_TYPE_NOT_ALLOWED>
<android.telephony.DataFailCause: int IWLAN_SEMANTIC_ERRORS_IN_PACKET_FILTERS>
<android.telephony.DataFailCause: int IWLAN_SEMANTIC_ERROR_IN_THE_TFT_OPERATION>
<android.telephony.DataFailCause: int IWLAN_SYNTACTICAL_ERRORS_IN_PACKET_FILTERS>
<android.telephony.DataFailCause: int IWLAN_SYNTACTICAL_ERROR_IN_THE_TFT_OPERATION>
<android.telephony.DataFailCause: int IWLAN_UNAUTHENTICATED_EMERGENCY_NOT_SUPPORTED>
<android.telephony.DataFailCause: int IWLAN_USER_UNKNOWN>
<android.telephony.DataFailCause: int LIMITED_TO_IPV4>
<android.telephony.DataFailCause: int LIMITED_TO_IPV6>
<android.telephony.DataFailCause: int LLC_SNDCP>
<android.telephony.DataFailCause: int LOCAL_END>
<android.telephony.DataFailCause: int LOCATION_AREA_NOT_ALLOWED>
<android.telephony.DataFailCause: int LOST_CONNECTION>
<android.telephony.DataFailCause: int LOWER_LAYER_REGISTRATION_FAILURE>
<android.telephony.DataFailCause: int LOW_POWER_MODE_OR_POWERING_DOWN>
<android.telephony.DataFailCause: int LTE_NAS_SERVICE_REQUEST_FAILED>
<android.telephony.DataFailCause: int LTE_THROTTLING_NOT_REQUIRED>
<android.telephony.DataFailCause: int MAC_FAILURE>
<android.telephony.DataFailCause: int MATCH_ALL_RULE_NOT_ALLOWED>
<android.telephony.DataFailCause: int MAXIMIUM_NSAPIS_EXCEEDED>
<android.telephony.DataFailCause: int MAXINUM_SIZE_OF_L2_MESSAGE_EXCEEDED>
<android.telephony.DataFailCause: int MAX_ACCESS_PROBE>
<android.telephony.DataFailCause: int MAX_IPV4_CONNECTIONS>
<android.telephony.DataFailCause: int MAX_IPV6_CONNECTIONS>
<android.telephony.DataFailCause: int MAX_PPP_INACTIVITY_TIMER_EXPIRED>
<android.telephony.DataFailCause: int MESSAGE_INCORRECT_SEMANTIC>
<android.telephony.DataFailCause: int MESSAGE_TYPE_UNSUPPORTED>
<android.telephony.DataFailCause: int MIP_CONFIG_FAILURE>
<android.telephony.DataFailCause: int MIP_FA_ADMIN_PROHIBITED>
<android.telephony.DataFailCause: int MIP_FA_DELIVERY_STYLE_NOT_SUPPORTED>
<android.telephony.DataFailCause: int MIP_FA_ENCAPSULATION_UNAVAILABLE>
<android.telephony.DataFailCause: int MIP_FA_HOME_AGENT_AUTHENTICATION_FAILURE>
<android.telephony.DataFailCause: int MIP_FA_INSUFFICIENT_RESOURCES>
<android.telephony.DataFailCause: int MIP_FA_MALFORMED_REPLY>
<android.telephony.DataFailCause: int MIP_FA_MALFORMED_REQUEST>
<android.telephony.DataFailCause: int MIP_FA_MISSING_CHALLENGE>
<android.telephony.DataFailCause: int MIP_FA_MISSING_HOME_ADDRESS>
<android.telephony.DataFailCause: int MIP_FA_MISSING_HOME_AGENT>
<android.telephony.DataFailCause: int MIP_FA_MISSING_NAI>
<android.telephony.DataFailCause: int MIP_FA_MOBILE_NODE_AUTHENTICATION_FAILURE>
<android.telephony.DataFailCause: int MIP_FA_REASON_UNSPECIFIED>
<android.telephony.DataFailCause: int MIP_FA_REQUESTED_LIFETIME_TOO_LONG>
<android.telephony.DataFailCause: int MIP_FA_REVERSE_TUNNEL_IS_MANDATORY>
<android.telephony.DataFailCause: int MIP_FA_REVERSE_TUNNEL_UNAVAILABLE>
<android.telephony.DataFailCause: int MIP_FA_STALE_CHALLENGE>
<android.telephony.DataFailCause: int MIP_FA_UNKNOWN_CHALLENGE>
<android.telephony.DataFailCause: int MIP_FA_VJ_HEADER_COMPRESSION_UNAVAILABLE>
<android.telephony.DataFailCause: int MIP_HA_ADMIN_PROHIBITED>
<android.telephony.DataFailCause: int MIP_HA_ENCAPSULATION_UNAVAILABLE>
<android.telephony.DataFailCause: int MIP_HA_FOREIGN_AGENT_AUTHENTICATION_FAILURE>
<android.telephony.DataFailCause: int MIP_HA_INSUFFICIENT_RESOURCES>
<android.telephony.DataFailCause: int MIP_HA_MALFORMED_REQUEST>
<android.telephony.DataFailCause: int MIP_HA_MOBILE_NODE_AUTHENTICATION_FAILURE>
<android.telephony.DataFailCause: int MIP_HA_REASON_UNSPECIFIED>
<android.telephony.DataFailCause: int MIP_HA_REGISTRATION_ID_MISMATCH>
<android.telephony.DataFailCause: int MIP_HA_REVERSE_TUNNEL_IS_MANDATORY>
<android.telephony.DataFailCause: int MIP_HA_REVERSE_TUNNEL_UNAVAILABLE>
<android.telephony.DataFailCause: int MIP_HA_UNKNOWN_HOME_AGENT_ADDRESS>
<android.telephony.DataFailCause: int MISSING_UNKNOWN_APN>
<android.telephony.DataFailCause: int MODEM_APP_PREEMPTED>
<android.telephony.DataFailCause: int MODEM_RESTART>
<android.telephony.DataFailCause: int MSC_TEMPORARILY_NOT_REACHABLE>
<android.telephony.DataFailCause: int MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE>
<android.telephony.DataFailCause: int MSG_TYPE_NONCOMPATIBLE_STATE>
<android.telephony.DataFailCause: int MS_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK>
<android.telephony.DataFailCause: int MULTIPLE_PDP_CALL_NOT_ALLOWED>
<android.telephony.DataFailCause: int MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED>
<android.telephony.DataFailCause: int NAS_LAYER_FAILURE>
<android.telephony.DataFailCause: int NAS_REQUEST_REJECTED_BY_NETWORK>
<android.telephony.DataFailCause: int NAS_SIGNALLING>
<android.telephony.DataFailCause: int NETWORK_FAILURE>
<android.telephony.DataFailCause: int NETWORK_INITIATED_DETACH_NO_AUTO_REATTACH>
<android.telephony.DataFailCause: int NETWORK_INITIATED_DETACH_WITH_AUTO_REATTACH>
<android.telephony.DataFailCause: int NETWORK_INITIATED_TERMINATION>
<android.telephony.DataFailCause: int NONE>
<android.telephony.DataFailCause: int NON_IP_NOT_SUPPORTED>
<android.telephony.DataFailCause: int NORMAL_RELEASE>
<android.telephony.DataFailCause: int NO_CDMA_SERVICE>
<android.telephony.DataFailCause: int NO_COLLOCATED_HDR>
<android.telephony.DataFailCause: int NO_EPS_BEARER_CONTEXT_ACTIVATED>
<android.telephony.DataFailCause: int NO_GPRS_CONTEXT>
<android.telephony.DataFailCause: int NO_HYBRID_HDR_SERVICE>
<android.telephony.DataFailCause: int NO_PDP_CONTEXT_ACTIVATED>
<android.telephony.DataFailCause: int NO_RESPONSE_FROM_BASE_STATION>
<android.telephony.DataFailCause: int NO_SERVICE>
<android.telephony.DataFailCause: int NO_SERVICE_ON_GATEWAY>
<android.telephony.DataFailCause: int NSAPI_IN_USE>
<android.telephony.DataFailCause: int NULL_APN_DISALLOWED>
<android.telephony.DataFailCause: int OEM_DCFAILCAUSE_1>
<android.telephony.DataFailCause: int OEM_DCFAILCAUSE_10>
<android.telephony.DataFailCause: int OEM_DCFAILCAUSE_11>
<android.telephony.DataFailCause: int OEM_DCFAILCAUSE_12>
<android.telephony.DataFailCause: int OEM_DCFAILCAUSE_13>
<android.telephony.DataFailCause: int OEM_DCFAILCAUSE_14>
<android.telephony.DataFailCause: int OEM_DCFAILCAUSE_15>
<android.telephony.DataFailCause: int OEM_DCFAILCAUSE_2>
<android.telephony.DataFailCause: int OEM_DCFAILCAUSE_3>
<android.telephony.DataFailCause: int OEM_DCFAILCAUSE_4>
<android.telephony.DataFailCause: int OEM_DCFAILCAUSE_5>
<android.telephony.DataFailCause: int OEM_DCFAILCAUSE_6>
<android.telephony.DataFailCause: int OEM_DCFAILCAUSE_7>
<android.telephony.DataFailCause: int OEM_DCFAILCAUSE_8>
<android.telephony.DataFailCause: int OEM_DCFAILCAUSE_9>
<android.telephony.DataFailCause: int ONLY_IPV4V6_ALLOWED>
<android.telephony.DataFailCause: int ONLY_IPV4_ALLOWED>
<android.telephony.DataFailCause: int ONLY_IPV6_ALLOWED>
<android.telephony.DataFailCause: int ONLY_NON_IP_ALLOWED>
<android.telephony.DataFailCause: int ONLY_SINGLE_BEARER_ALLOWED>
<android.telephony.DataFailCause: int OPERATOR_BARRED>
<android.telephony.DataFailCause: int OTASP_COMMIT_IN_PROGRESS>
<android.telephony.DataFailCause: int PDN_CONN_DOES_NOT_EXIST>
<android.telephony.DataFailCause: int PDN_INACTIVITY_TIMER_EXPIRED>
<android.telephony.DataFailCause: int PDN_IPV4_CALL_DISALLOWED>
<android.telephony.DataFailCause: int PDN_IPV4_CALL_THROTTLED>
<android.telephony.DataFailCause: int PDN_IPV6_CALL_DISALLOWED>
<android.telephony.DataFailCause: int PDN_IPV6_CALL_THROTTLED>
<android.telephony.DataFailCause: int PDN_NON_IP_CALL_DISALLOWED>
<android.telephony.DataFailCause: int PDN_NON_IP_CALL_THROTTLED>
<android.telephony.DataFailCause: int PDP_ACTIVATE_MAX_RETRY_FAILED>
<android.telephony.DataFailCause: int PDP_DUPLICATE>
<android.telephony.DataFailCause: int PDP_ESTABLISH_TIMEOUT_EXPIRED>
<android.telephony.DataFailCause: int PDP_INACTIVE_TIMEOUT_EXPIRED>
<android.telephony.DataFailCause: int PDP_LOWERLAYER_ERROR>
<android.telephony.DataFailCause: int PDP_MODIFY_COLLISION>
<android.telephony.DataFailCause: int PDP_MODIFY_TIMEOUT_EXPIRED>
<android.telephony.DataFailCause: int PDP_PPP_NOT_SUPPORTED>
<android.telephony.DataFailCause: int PDP_WITHOUT_ACTIVE_TFT>
<android.telephony.DataFailCause: int PHONE_IN_USE>
<android.telephony.DataFailCause: int PHYSICAL_LINK_CLOSE_IN_PROGRESS>
<android.telephony.DataFailCause: int PLMN_NOT_ALLOWED>
<android.telephony.DataFailCause: int PPP_AUTH_FAILURE>
<android.telephony.DataFailCause: int PPP_CHAP_FAILURE>
<android.telephony.DataFailCause: int PPP_CLOSE_IN_PROGRESS>
<android.telephony.DataFailCause: int PPP_OPTION_MISMATCH>
<android.telephony.DataFailCause: int PPP_PAP_FAILURE>
<android.telephony.DataFailCause: int PPP_TIMEOUT>
<android.telephony.DataFailCause: int PREF_RADIO_TECH_CHANGED>
<android.telephony.DataFailCause: int PROFILE_BEARER_INCOMPATIBLE>
<android.telephony.DataFailCause: int PROTOCOL_ERRORS>
<android.telephony.DataFailCause: int QOS_NOT_ACCEPTED>
<android.telephony.DataFailCause: int RADIO_ACCESS_BEARER_FAILURE>
<android.telephony.DataFailCause: int RADIO_ACCESS_BEARER_SETUP_FAILURE>
<android.telephony.DataFailCause: int RADIO_NOT_AVAILABLE>
<android.telephony.DataFailCause: int RADIO_POWER_OFF>
<android.telephony.DataFailCause: int REDIRECTION_OR_HANDOFF_IN_PROGRESS>
<android.telephony.DataFailCause: int REGISTRATION_FAIL>
<android.telephony.DataFailCause: int REGULAR_DEACTIVATION>
<android.telephony.DataFailCause: int REJECTED_BY_BASE_STATION>
<android.telephony.DataFailCause: int RRC_CONNECTION_ABORTED_AFTER_HANDOVER>
<android.telephony.DataFailCause: int RRC_CONNECTION_ABORTED_AFTER_IRAT_CELL_CHANGE>
<android.telephony.DataFailCause: int RRC_CONNECTION_ABORTED_DUE_TO_IRAT_CHANGE>
<android.telephony.DataFailCause: int RRC_CONNECTION_ABORTED_DURING_IRAT_CELL_CHANGE>
<android.telephony.DataFailCause: int RRC_CONNECTION_ABORT_REQUEST>
<android.telephony.DataFailCause: int RRC_CONNECTION_ACCESS_BARRED>
<android.telephony.DataFailCause: int RRC_CONNECTION_ACCESS_STRATUM_FAILURE>
<android.telephony.DataFailCause: int RRC_CONNECTION_ANOTHER_PROCEDURE_IN_PROGRESS>
<android.telephony.DataFailCause: int RRC_CONNECTION_CELL_NOT_CAMPED>
<android.telephony.DataFailCause: int RRC_CONNECTION_CELL_RESELECTION>
<android.telephony.DataFailCause: int RRC_CONNECTION_CONFIG_FAILURE>
<android.telephony.DataFailCause: int RRC_CONNECTION_INVALID_REQUEST>
<android.telephony.DataFailCause: int RRC_CONNECTION_LINK_FAILURE>
<android.telephony.DataFailCause: int RRC_CONNECTION_NORMAL_RELEASE>
<android.telephony.DataFailCause: int RRC_CONNECTION_OUT_OF_SERVICE_DURING_CELL_REGISTER>
<android.telephony.DataFailCause: int RRC_CONNECTION_RADIO_LINK_FAILURE>
<android.telephony.DataFailCause: int RRC_CONNECTION_REESTABLISHMENT_FAILURE>
<android.telephony.DataFailCause: int RRC_CONNECTION_REJECT_BY_NETWORK>
<android.telephony.DataFailCause: int RRC_CONNECTION_RELEASED_SECURITY_NOT_ACTIVE>
<android.telephony.DataFailCause: int RRC_CONNECTION_RF_UNAVAILABLE>
<android.telephony.DataFailCause: int RRC_CONNECTION_SYSTEM_INFORMATION_BLOCK_READ_ERROR>
<android.telephony.DataFailCause: int RRC_CONNECTION_SYSTEM_INTERVAL_FAILURE>
<android.telephony.DataFailCause: int RRC_CONNECTION_TIMER_EXPIRED>
<android.telephony.DataFailCause: int RRC_CONNECTION_TRACKING_AREA_ID_CHANGED>
<android.telephony.DataFailCause: int RRC_UPLINK_CONNECTION_RELEASE>
<android.telephony.DataFailCause: int RRC_UPLINK_DATA_TRANSMISSION_FAILURE>
<android.telephony.DataFailCause: int RRC_UPLINK_DELIVERY_FAILED_DUE_TO_HANDOVER>
<android.telephony.DataFailCause: int RRC_UPLINK_ERROR_REQUEST_FROM_NAS>
<android.telephony.DataFailCause: int RRC_UPLINK_RADIO_LINK_FAILURE>
<android.telephony.DataFailCause: int RUIM_NOT_PRESENT>
<android.telephony.DataFailCause: int SECURITY_MODE_REJECTED>
<android.telephony.DataFailCause: int SERVICE_NOT_ALLOWED_ON_PLMN>
<android.telephony.DataFailCause: int SERVICE_OPTION_NOT_SUBSCRIBED>
<android.telephony.DataFailCause: int SERVICE_OPTION_NOT_SUPPORTED>
<android.telephony.DataFailCause: int SERVICE_OPTION_OUT_OF_ORDER>
<android.telephony.DataFailCause: int SIGNAL_LOST>
<android.telephony.DataFailCause: int SIM_CARD_CHANGED>
<android.telephony.DataFailCause: int SLICE_REJECTED>
<android.telephony.DataFailCause: int SYNCHRONIZATION_FAILURE>
<android.telephony.DataFailCause: int TEST_LOOPBACK_REGULAR_DEACTIVATION>
<android.telephony.DataFailCause: int TETHERED_CALL_ACTIVE>
<android.telephony.DataFailCause: int TFT_SEMANTIC_ERROR>
<android.telephony.DataFailCause: int TFT_SYTAX_ERROR>
<android.telephony.DataFailCause: int THERMAL_EMERGENCY>
<android.telephony.DataFailCause: int THERMAL_MITIGATION>
<android.telephony.DataFailCause: int TRAT_SWAP_FAILED>
<android.telephony.DataFailCause: int UE_INITIATED_DETACH_OR_DISCONNECT>
<android.telephony.DataFailCause: int UE_IS_ENTERING_POWERSAVE_MODE>
<android.telephony.DataFailCause: int UE_RAT_CHANGE>
<android.telephony.DataFailCause: int UE_SECURITY_CAPABILITIES_MISMATCH>
<android.telephony.DataFailCause: int UMTS_HANDOVER_TO_IWLAN>
<android.telephony.DataFailCause: int UMTS_REACTIVATION_REQ>
<android.telephony.DataFailCause: int UNACCEPTABLE_NETWORK_PARAMETER>
<android.telephony.DataFailCause: int UNACCEPTABLE_NON_EPS_AUTHENTICATION>
<android.telephony.DataFailCause: int UNKNOWN>
<android.telephony.DataFailCause: int UNKNOWN_INFO_ELEMENT>
<android.telephony.DataFailCause: int UNKNOWN_PDP_ADDRESS_TYPE>
<android.telephony.DataFailCause: int UNKNOWN_PDP_CONTEXT>
<android.telephony.DataFailCause: int UNPREFERRED_RAT>
<android.telephony.DataFailCause: int UNSUPPORTED_1X_PREV>
<android.telephony.DataFailCause: int UNSUPPORTED_APN_IN_CURRENT_PLMN>
<android.telephony.DataFailCause: int UNSUPPORTED_QCI_VALUE>
<android.telephony.DataFailCause: int USER_AUTHENTICATION>
<android.telephony.DataFailCause: int VSNCP_ADMINISTRATIVELY_PROHIBITED>
<android.telephony.DataFailCause: int VSNCP_APN_UNAUTHORIZED>
<android.telephony.DataFailCause: int VSNCP_GEN_ERROR>
<android.telephony.DataFailCause: int VSNCP_INSUFFICIENT_PARAMETERS>
<android.telephony.DataFailCause: int VSNCP_NO_PDN_GATEWAY_ADDRESS>
<android.telephony.DataFailCause: int VSNCP_PDN_EXISTS_FOR_THIS_APN>
<android.telephony.DataFailCause: int VSNCP_PDN_GATEWAY_REJECT>
<android.telephony.DataFailCause: int VSNCP_PDN_GATEWAY_UNREACHABLE>
<android.telephony.DataFailCause: int VSNCP_PDN_ID_IN_USE>
<android.telephony.DataFailCause: int VSNCP_PDN_LIMIT_EXCEEDED>
<android.telephony.DataFailCause: int VSNCP_RECONNECT_NOT_ALLOWED>
<android.telephony.DataFailCause: int VSNCP_RESOURCE_UNAVAILABLE>
<android.telephony.DataFailCause: int VSNCP_SUBSCRIBER_LIMITATION>
<android.telephony.DataFailCause: int VSNCP_TIMEOUT>
android.telephony.DisconnectCause
<android.telephony.DisconnectCause: int ALREADY_DIALING>
<android.telephony.DisconnectCause: int ANSWERED_ELSEWHERE>
<android.telephony.DisconnectCause: int BUSY>
<android.telephony.DisconnectCause: int CALLING_DISABLED>
<android.telephony.DisconnectCause: int CALL_BARRED>
<android.telephony.DisconnectCause: int CALL_PULLED>
<android.telephony.DisconnectCause: int CANT_CALL_WHILE_RINGING>
<android.telephony.DisconnectCause: int CDMA_ACCESS_BLOCKED>
<android.telephony.DisconnectCause: int CDMA_ACCESS_FAILURE>
<android.telephony.DisconnectCause: int CDMA_ALREADY_ACTIVATED>
<android.telephony.DisconnectCause: int CDMA_DROP>
<android.telephony.DisconnectCause: int CDMA_INTERCEPT>
<android.telephony.DisconnectCause: int CDMA_LOCKED_UNTIL_POWER_CYCLE>
<android.telephony.DisconnectCause: int CDMA_NOT_EMERGENCY>
<android.telephony.DisconnectCause: int CDMA_PREEMPTED>
<android.telephony.DisconnectCause: int CDMA_REORDER>
<android.telephony.DisconnectCause: int CDMA_RETRY_ORDER>
<android.telephony.DisconnectCause: int CDMA_SO_REJECT>
<android.telephony.DisconnectCause: int CONGESTION>
<android.telephony.DisconnectCause: int CS_RESTRICTED>
<android.telephony.DisconnectCause: int CS_RESTRICTED_EMERGENCY>
<android.telephony.DisconnectCause: int CS_RESTRICTED_NORMAL>
<android.telephony.DisconnectCause: int DATA_DISABLED>
<android.telephony.DisconnectCause: int DATA_LIMIT_REACHED>
<android.telephony.DisconnectCause: int DIALED_CALL_FORWARDING_WHILE_ROAMING>
<android.telephony.DisconnectCause: int DIALED_MMI>
<android.telephony.DisconnectCause: int DIAL_LOW_BATTERY>
<android.telephony.DisconnectCause: int DIAL_MODIFIED_TO_DIAL>
<android.telephony.DisconnectCause: int DIAL_MODIFIED_TO_DIAL_VIDEO>
<android.telephony.DisconnectCause: int DIAL_MODIFIED_TO_SS>
<android.telephony.DisconnectCause: int DIAL_MODIFIED_TO_USSD>
<android.telephony.DisconnectCause: int DIAL_VIDEO_MODIFIED_TO_DIAL>
<android.telephony.DisconnectCause: int DIAL_VIDEO_MODIFIED_TO_DIAL_VIDEO>
<android.telephony.DisconnectCause: int DIAL_VIDEO_MODIFIED_TO_SS>
<android.telephony.DisconnectCause: int DIAL_VIDEO_MODIFIED_TO_USSD>
<android.telephony.DisconnectCause: int EMERGENCY_CALL_OVER_WFC_NOT_AVAILABLE>
<android.telephony.DisconnectCause: int EMERGENCY_PERM_FAILURE>
<android.telephony.DisconnectCause: int EMERGENCY_TEMP_FAILURE>
<android.telephony.DisconnectCause: int ERROR_UNSPECIFIED>
<android.telephony.DisconnectCause: int FDN_BLOCKED>
<android.telephony.DisconnectCause: int ICC_ERROR>
<android.telephony.DisconnectCause: int IMEI_NOT_ACCEPTED>
<android.telephony.DisconnectCause: int IMS_ACCESS_BLOCKED>
<android.telephony.DisconnectCause: int IMS_MERGED_SUCCESSFULLY>
<android.telephony.DisconnectCause: int IMS_SIP_ALTERNATE_EMERGENCY_CALL>
<android.telephony.DisconnectCause: int INCOMING_AUTO_REJECTED>
<android.telephony.DisconnectCause: int INCOMING_MISSED>
<android.telephony.DisconnectCause: int INCOMING_REJECTED>
<android.telephony.DisconnectCause: int INVALID_CREDENTIALS>
<android.telephony.DisconnectCause: int INVALID_NUMBER>
<android.telephony.DisconnectCause: int LIMIT_EXCEEDED>
<android.telephony.DisconnectCause: int LOCAL>
<android.telephony.DisconnectCause: int LOST_SIGNAL>
<android.telephony.DisconnectCause: int LOW_BATTERY>
<android.telephony.DisconnectCause: int MAXIMUM_NUMBER_OF_CALLS_REACHED>
<android.telephony.DisconnectCause: int MEDIA_TIMEOUT>
<android.telephony.DisconnectCause: int MMI>
<android.telephony.DisconnectCause: int NORMAL>
<android.telephony.DisconnectCause: int NORMAL_UNSPECIFIED>
<android.telephony.DisconnectCause: int NOT_DISCONNECTED>
<android.telephony.DisconnectCause: int NOT_VALID>
<android.telephony.DisconnectCause: int NO_PHONE_NUMBER_SUPPLIED>
<android.telephony.DisconnectCause: int NUMBER_UNREACHABLE>
<android.telephony.DisconnectCause: int OTASP_PROVISIONING_IN_PROCESS>
<android.telephony.DisconnectCause: int OUTGOING_CANCELED>
<android.telephony.DisconnectCause: int OUTGOING_EMERGENCY_CALL_PLACED>
<android.telephony.DisconnectCause: int OUTGOING_FAILURE>
<android.telephony.DisconnectCause: int OUT_OF_NETWORK>
<android.telephony.DisconnectCause: int OUT_OF_SERVICE>
<android.telephony.DisconnectCause: int POWER_OFF>
<android.telephony.DisconnectCause: int SERVER_ERROR>
<android.telephony.DisconnectCause: int SERVER_UNREACHABLE>
<android.telephony.DisconnectCause: int TIMED_OUT>
<android.telephony.DisconnectCause: int TOO_MANY_ONGOING_CALLS>
<android.telephony.DisconnectCause: int UNOBTAINABLE_NUMBER>
<android.telephony.DisconnectCause: int VIDEO_CALL_NOT_ALLOWED_WHILE_TTY_ENABLED>
<android.telephony.DisconnectCause: int VOICEMAIL_NUMBER_MISSING>
<android.telephony.DisconnectCause: int WFC_SERVICE_NOT_AVAILABLE_IN_THIS_LOCATION>
<android.telephony.DisconnectCause: int WIFI_LOST>
android.telephony.IccOpenLogicalChannelResponse
<android.telephony.IccOpenLogicalChannelResponse: int describeContents()>
<android.telephony.IccOpenLogicalChannelResponse: int getChannel()>
<android.telephony.IccOpenLogicalChannelResponse: byte[] getSelectResponse()>
<android.telephony.IccOpenLogicalChannelResponse: int getStatus()>
<android.telephony.IccOpenLogicalChannelResponse: void writeToParcel(android.os.Parcel,int)>
<android.telephony.IccOpenLogicalChannelResponse: android.os.Parcelable$Creator CREATOR>
<android.telephony.IccOpenLogicalChannelResponse: int INVALID_CHANNEL>
<android.telephony.IccOpenLogicalChannelResponse: int STATUS_MISSING_RESOURCE>
<android.telephony.IccOpenLogicalChannelResponse: int STATUS_NO_ERROR>
<android.telephony.IccOpenLogicalChannelResponse: int STATUS_NO_SUCH_ELEMENT>
<android.telephony.IccOpenLogicalChannelResponse: int STATUS_UNKNOWN_ERROR>
android.telephony.MbmsDownloadSession
<android.telephony.MbmsDownloadSession: void addProgressListener(android.telephony.mbms.DownloadRequest,java.util.concurrent.Executor,android.telephony.mbms.DownloadProgressListener)>
<android.telephony.MbmsDownloadSession: void addServiceAnnouncement(byte[])>
<android.telephony.MbmsDownloadSession: void addStatusListener(android.telephony.mbms.DownloadRequest,java.util.concurrent.Executor,android.telephony.mbms.DownloadStatusListener)>
<android.telephony.MbmsDownloadSession: void cancelDownload(android.telephony.mbms.DownloadRequest)>
<android.telephony.MbmsDownloadSession: void close()>
<android.telephony.MbmsDownloadSession: android.telephony.MbmsDownloadSession create(android.content.Context,java.util.concurrent.Executor,android.telephony.mbms.MbmsDownloadSessionCallback)>
<android.telephony.MbmsDownloadSession: android.telephony.MbmsDownloadSession create(android.content.Context,java.util.concurrent.Executor,int,android.telephony.mbms.MbmsDownloadSessionCallback)>
<android.telephony.MbmsDownloadSession: void download(android.telephony.mbms.DownloadRequest)>
<android.telephony.MbmsDownloadSession: int getMaximumServiceAnnouncementSize()>
<android.telephony.MbmsDownloadSession: java.io.File getTempFileRootDirectory()>
<android.telephony.MbmsDownloadSession: java.util.List listPendingDownloads()>
<android.telephony.MbmsDownloadSession: void removeProgressListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.DownloadProgressListener)>
<android.telephony.MbmsDownloadSession: void removeStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.DownloadStatusListener)>
<android.telephony.MbmsDownloadSession: void requestDownloadState(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo)>
<android.telephony.MbmsDownloadSession: void requestUpdateFileServices(java.util.List)>
<android.telephony.MbmsDownloadSession: void resetDownloadKnowledge(android.telephony.mbms.DownloadRequest)>
<android.telephony.MbmsDownloadSession: void setTempFileRootDirectory(java.io.File)>
<android.telephony.MbmsDownloadSession: java.lang.String DEFAULT_TOP_LEVEL_TEMP_DIRECTORY>
<android.telephony.MbmsDownloadSession: java.lang.String EXTRA_MBMS_COMPLETED_FILE_URI>
<android.telephony.MbmsDownloadSession: java.lang.String EXTRA_MBMS_DOWNLOAD_REQUEST>
<android.telephony.MbmsDownloadSession: java.lang.String EXTRA_MBMS_DOWNLOAD_RESULT>
<android.telephony.MbmsDownloadSession: java.lang.String EXTRA_MBMS_FILE_INFO>
<android.telephony.MbmsDownloadSession: int RESULT_CANCELLED>
<android.telephony.MbmsDownloadSession: int RESULT_DOWNLOAD_FAILURE>
<android.telephony.MbmsDownloadSession: int RESULT_EXPIRED>
<android.telephony.MbmsDownloadSession: int RESULT_FILE_ROOT_UNREACHABLE>
<android.telephony.MbmsDownloadSession: int RESULT_IO_ERROR>
<android.telephony.MbmsDownloadSession: int RESULT_OUT_OF_STORAGE>
<android.telephony.MbmsDownloadSession: int RESULT_SERVICE_ID_NOT_DEFINED>
<android.telephony.MbmsDownloadSession: int RESULT_SUCCESSFUL>
<android.telephony.MbmsDownloadSession: int STATUS_ACTIVELY_DOWNLOADING>
<android.telephony.MbmsDownloadSession: int STATUS_PENDING_DOWNLOAD>
<android.telephony.MbmsDownloadSession: int STATUS_PENDING_DOWNLOAD_WINDOW>
<android.telephony.MbmsDownloadSession: int STATUS_PENDING_REPAIR>
<android.telephony.MbmsDownloadSession: int STATUS_UNKNOWN>
android.telephony.MbmsGroupCallSession
<android.telephony.MbmsGroupCallSession: void close()>
<android.telephony.MbmsGroupCallSession: android.telephony.MbmsGroupCallSession create(android.content.Context,int,java.util.concurrent.Executor,android.telephony.mbms.MbmsGroupCallSessionCallback)>
<android.telephony.MbmsGroupCallSession: android.telephony.MbmsGroupCallSession create(android.content.Context,java.util.concurrent.Executor,android.telephony.mbms.MbmsGroupCallSessionCallback)>
<android.telephony.MbmsGroupCallSession: android.telephony.mbms.GroupCall startGroupCall(long,java.util.List,java.util.List,java.util.concurrent.Executor,android.telephony.mbms.GroupCallCallback)>
android.telephony.MbmsStreamingSession
<android.telephony.MbmsStreamingSession: void close()>
<android.telephony.MbmsStreamingSession: android.telephony.MbmsStreamingSession create(android.content.Context,java.util.concurrent.Executor,int,android.telephony.mbms.MbmsStreamingSessionCallback)>
<android.telephony.MbmsStreamingSession: android.telephony.MbmsStreamingSession create(android.content.Context,java.util.concurrent.Executor,android.telephony.mbms.MbmsStreamingSessionCallback)>
<android.telephony.MbmsStreamingSession: void requestUpdateStreamingServices(java.util.List)>
<android.telephony.MbmsStreamingSession: android.telephony.mbms.StreamingService startStreaming(android.telephony.mbms.StreamingServiceInfo,java.util.concurrent.Executor,android.telephony.mbms.StreamingServiceCallback)>
android.telephony.NeighboringCellInfo
<android.telephony.NeighboringCellInfo: void <init>()>
<android.telephony.NeighboringCellInfo: void <init>(int,int)>
<android.telephony.NeighboringCellInfo: void <init>(int,java.lang.String,int)>
<android.telephony.NeighboringCellInfo: void <init>(android.os.Parcel)>
<android.telephony.NeighboringCellInfo: int describeContents()>
<android.telephony.NeighboringCellInfo: int getCid()>
<android.telephony.NeighboringCellInfo: int getLac()>
<android.telephony.NeighboringCellInfo: int getNetworkType()>
<android.telephony.NeighboringCellInfo: int getPsc()>
<android.telephony.NeighboringCellInfo: int getRssi()>
<android.telephony.NeighboringCellInfo: void setCid(int)>
<android.telephony.NeighboringCellInfo: void setRssi(int)>
<android.telephony.NeighboringCellInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.NeighboringCellInfo: android.os.Parcelable$Creator CREATOR>
<android.telephony.NeighboringCellInfo: int UNKNOWN_CID>
<android.telephony.NeighboringCellInfo: int UNKNOWN_RSSI>
android.telephony.NetworkRegistrationInfo
<android.telephony.NetworkRegistrationInfo: int describeContents()>
<android.telephony.NetworkRegistrationInfo: int getAccessNetworkTechnology()>
<android.telephony.NetworkRegistrationInfo: java.util.List getAvailableServices()>
<android.telephony.NetworkRegistrationInfo: android.telephony.CellIdentity getCellIdentity()>
<android.telephony.NetworkRegistrationInfo: int getDomain()>
<android.telephony.NetworkRegistrationInfo: java.lang.String getRegisteredPlmn()>
<android.telephony.NetworkRegistrationInfo: int getTransportType()>
<android.telephony.NetworkRegistrationInfo: boolean isRegistered()>
<android.telephony.NetworkRegistrationInfo: boolean isRoaming()>
<android.telephony.NetworkRegistrationInfo: boolean isSearching()>
<android.telephony.NetworkRegistrationInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.NetworkRegistrationInfo: android.os.Parcelable$Creator CREATOR>
<android.telephony.NetworkRegistrationInfo: int DOMAIN_CS>
<android.telephony.NetworkRegistrationInfo: int DOMAIN_CS_PS>
<android.telephony.NetworkRegistrationInfo: int DOMAIN_PS>
<android.telephony.NetworkRegistrationInfo: int DOMAIN_UNKNOWN>
<android.telephony.NetworkRegistrationInfo: int NR_STATE_CONNECTED>
<android.telephony.NetworkRegistrationInfo: int NR_STATE_NONE>
<android.telephony.NetworkRegistrationInfo: int NR_STATE_NOT_RESTRICTED>
<android.telephony.NetworkRegistrationInfo: int NR_STATE_RESTRICTED>
<android.telephony.NetworkRegistrationInfo: int SERVICE_TYPE_DATA>
<android.telephony.NetworkRegistrationInfo: int SERVICE_TYPE_EMERGENCY>
<android.telephony.NetworkRegistrationInfo: int SERVICE_TYPE_SMS>
<android.telephony.NetworkRegistrationInfo: int SERVICE_TYPE_UNKNOWN>
<android.telephony.NetworkRegistrationInfo: int SERVICE_TYPE_VIDEO>
<android.telephony.NetworkRegistrationInfo: int SERVICE_TYPE_VOICE>
android.telephony.NetworkScan
<android.telephony.NetworkScan: void stopScan()>
<android.telephony.NetworkScan: int ERROR_INTERRUPTED>
<android.telephony.NetworkScan: int ERROR_INVALID_SCAN>
<android.telephony.NetworkScan: int ERROR_INVALID_SCANID>
<android.telephony.NetworkScan: int ERROR_MODEM_ERROR>
<android.telephony.NetworkScan: int ERROR_MODEM_UNAVAILABLE>
<android.telephony.NetworkScan: int ERROR_RADIO_INTERFACE_ERROR>
<android.telephony.NetworkScan: int ERROR_UNSUPPORTED>
<android.telephony.NetworkScan: int SUCCESS>
android.telephony.NetworkScanRequest
<android.telephony.NetworkScanRequest: void <init>(int,android.telephony.RadioAccessSpecifier[],int,int,boolean,int,java.util.ArrayList)>
<android.telephony.NetworkScanRequest: int describeContents()>
<android.telephony.NetworkScanRequest: boolean getIncrementalResults()>
<android.telephony.NetworkScanRequest: int getIncrementalResultsPeriodicity()>
<android.telephony.NetworkScanRequest: int getMaxSearchTime()>
<android.telephony.NetworkScanRequest: java.util.ArrayList getPlmns()>
<android.telephony.NetworkScanRequest: int getScanType()>
<android.telephony.NetworkScanRequest: int getSearchPeriodicity()>
<android.telephony.NetworkScanRequest: android.telephony.RadioAccessSpecifier[] getSpecifiers()>
<android.telephony.NetworkScanRequest: void writeToParcel(android.os.Parcel,int)>
<android.telephony.NetworkScanRequest: android.os.Parcelable$Creator CREATOR>
<android.telephony.NetworkScanRequest: int SCAN_TYPE_ONE_SHOT>
<android.telephony.NetworkScanRequest: int SCAN_TYPE_PERIODIC>
android.telephony.PhoneNumberFormattingTextWatcher
<android.telephony.PhoneNumberFormattingTextWatcher: void <init>()>
<android.telephony.PhoneNumberFormattingTextWatcher: void <init>(java.lang.String)>
<android.telephony.PhoneNumberFormattingTextWatcher: void afterTextChanged(android.text.Editable)>
<android.telephony.PhoneNumberFormattingTextWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<android.telephony.PhoneNumberFormattingTextWatcher: void onTextChanged(java.lang.CharSequence,int,int,int)>
android.telephony.PhoneNumberUtils
<android.telephony.PhoneNumberUtils: void <init>()>
<android.telephony.PhoneNumberUtils: void addTtsSpan(android.text.Spannable,int,int)>
<android.telephony.PhoneNumberUtils: boolean areSamePhoneNumber(java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDFragmentToString(byte[],int,int)>
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDFragmentToString(byte[],int,int,int)>
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDToString(byte[],int,int)>
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDToString(byte[],int,int,int)>
<android.telephony.PhoneNumberUtils: boolean compare(java.lang.String,java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean compare(android.content.Context,java.lang.String,java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String convertKeypadLettersToDigits(java.lang.String)>
<android.telephony.PhoneNumberUtils: android.text.style.TtsSpan createTtsSpan(java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.CharSequence createTtsSpannable(java.lang.CharSequence)>
<android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortion(java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String extractPostDialPortion(java.lang.String)>
<android.telephony.PhoneNumberUtils: void formatJapaneseNumber(android.text.Editable)>
<android.telephony.PhoneNumberUtils: void formatNanpNumber(android.text.Editable)>
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String)>
<android.telephony.PhoneNumberUtils: void formatNumber(android.text.Editable,int)>
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String,java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String formatNumberToE164(java.lang.String,java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String formatNumberToRFC3966(java.lang.String,java.lang.String)>
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(java.util.Locale)>
<android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)>
<android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean is12Key(char)>
<android.telephony.PhoneNumberUtils: boolean isDialable(char)>
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isGlobalPhoneNumber(java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isISODigit(char)>
<android.telephony.PhoneNumberUtils: boolean isLocalEmergencyNumber(android.content.Context,java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isNonSeparator(char)>
<android.telephony.PhoneNumberUtils: boolean isReallyDialable(char)>
<android.telephony.PhoneNumberUtils: boolean isStartsPostDial(char)>
<android.telephony.PhoneNumberUtils: boolean isVoiceMailNumber(java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isWellFormedSmsAddress(java.lang.String)>
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCD(java.lang.String)>
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCDWithLength(java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String normalizeNumber(java.lang.String)>
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String)>
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String,int)>
<android.telephony.PhoneNumberUtils: java.lang.String replaceUnicodeDigits(java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String stringFromStringAndTOA(java.lang.String,int)>
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String toCallerIDMinMatch(java.lang.String)>
<android.telephony.PhoneNumberUtils: int toaFromString(java.lang.String)>
<android.telephony.PhoneNumberUtils: int BCD_EXTENDED_TYPE_CALLED_PARTY>
<android.telephony.PhoneNumberUtils: int BCD_EXTENDED_TYPE_EF_ADN>
<android.telephony.PhoneNumberUtils: int FORMAT_JAPAN>
<android.telephony.PhoneNumberUtils: int FORMAT_NANP>
<android.telephony.PhoneNumberUtils: int FORMAT_UNKNOWN>
<android.telephony.PhoneNumberUtils: char PAUSE>
<android.telephony.PhoneNumberUtils: int TOA_International>
<android.telephony.PhoneNumberUtils: int TOA_Unknown>
<android.telephony.PhoneNumberUtils: char WAIT>
<android.telephony.PhoneNumberUtils: char WILD>
android.telephony.PhoneStateListener
<android.telephony.PhoneStateListener: void <init>()>
<android.telephony.PhoneStateListener: void <init>(java.util.concurrent.Executor)>
<android.telephony.PhoneStateListener: void onActiveDataSubscriptionIdChanged(int)>
<android.telephony.PhoneStateListener: void onBarringInfoChanged(android.telephony.BarringInfo)>
<android.telephony.PhoneStateListener: void onCallDisconnectCauseChanged(int,int)>
<android.telephony.PhoneStateListener: void onCallForwardingIndicatorChanged(boolean)>
<android.telephony.PhoneStateListener: void onCallStateChanged(int,java.lang.String)>
<android.telephony.PhoneStateListener: void onCellInfoChanged(java.util.List)>
<android.telephony.PhoneStateListener: void onCellLocationChanged(android.telephony.CellLocation)>
<android.telephony.PhoneStateListener: void onDataActivity(int)>
<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int)>
<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int,int)>
<android.telephony.PhoneStateListener: void onDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)>
<android.telephony.PhoneStateListener: void onEmergencyNumberListChanged(java.util.Map)>
<android.telephony.PhoneStateListener: void onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)>
<android.telephony.PhoneStateListener: void onMessageWaitingIndicatorChanged(boolean)>
<android.telephony.PhoneStateListener: void onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)>
<android.telephony.PhoneStateListener: void onRegistrationFailed(android.telephony.CellIdentity,java.lang.String,int,int,int)>
<android.telephony.PhoneStateListener: void onServiceStateChanged(android.telephony.ServiceState)>
<android.telephony.PhoneStateListener: void onSignalStrengthChanged(int)>
<android.telephony.PhoneStateListener: void onSignalStrengthsChanged(android.telephony.SignalStrength)>
<android.telephony.PhoneStateListener: void onUserMobileDataStateChanged(boolean)>
<android.telephony.PhoneStateListener: int LISTEN_ACTIVE_DATA_SUBSCRIPTION_ID_CHANGE>
<android.telephony.PhoneStateListener: int LISTEN_BARRING_INFO>
<android.telephony.PhoneStateListener: int LISTEN_CALL_DISCONNECT_CAUSES>
<android.telephony.PhoneStateListener: int LISTEN_CALL_FORWARDING_INDICATOR>
<android.telephony.PhoneStateListener: int LISTEN_CALL_STATE>
<android.telephony.PhoneStateListener: int LISTEN_CELL_INFO>
<android.telephony.PhoneStateListener: int LISTEN_CELL_LOCATION>
<android.telephony.PhoneStateListener: int LISTEN_DATA_ACTIVITY>
<android.telephony.PhoneStateListener: int LISTEN_DATA_CONNECTION_STATE>
<android.telephony.PhoneStateListener: int LISTEN_DISPLAY_INFO_CHANGED>
<android.telephony.PhoneStateListener: int LISTEN_EMERGENCY_NUMBER_LIST>
<android.telephony.PhoneStateListener: int LISTEN_IMS_CALL_DISCONNECT_CAUSES>
<android.telephony.PhoneStateListener: int LISTEN_MESSAGE_WAITING_INDICATOR>
<android.telephony.PhoneStateListener: int LISTEN_NONE>
<android.telephony.PhoneStateListener: int LISTEN_PRECISE_DATA_CONNECTION_STATE>
<android.telephony.PhoneStateListener: int LISTEN_REGISTRATION_FAILURE>
<android.telephony.PhoneStateListener: int LISTEN_SERVICE_STATE>
<android.telephony.PhoneStateListener: int LISTEN_SIGNAL_STRENGTH>
<android.telephony.PhoneStateListener: int LISTEN_SIGNAL_STRENGTHS>
<android.telephony.PhoneStateListener: int LISTEN_USER_MOBILE_DATA_STATE>
android.telephony.PhysicalChannelConfig
<android.telephony.PhysicalChannelConfig: int describeContents()>
<android.telephony.PhysicalChannelConfig: int getBand()>
<android.telephony.PhysicalChannelConfig: int getCellBandwidthDownlinkKhz()>
<android.telephony.PhysicalChannelConfig: int getCellBandwidthUplinkKhz()>
<android.telephony.PhysicalChannelConfig: int getConnectionStatus()>
<android.telephony.PhysicalChannelConfig: int getDownlinkChannelNumber()>
<android.telephony.PhysicalChannelConfig: int getDownlinkFrequencyKhz()>
<android.telephony.PhysicalChannelConfig: int getNetworkType()>
<android.telephony.PhysicalChannelConfig: int getPhysicalCellId()>
<android.telephony.PhysicalChannelConfig: int getUplinkChannelNumber()>
<android.telephony.PhysicalChannelConfig: int getUplinkFrequencyKhz()>
<android.telephony.PhysicalChannelConfig: void writeToParcel(android.os.Parcel,int)>
<android.telephony.PhysicalChannelConfig: int BAND_UNKNOWN>
<android.telephony.PhysicalChannelConfig: int CELL_BANDWIDTH_UNKNOWN>
<android.telephony.PhysicalChannelConfig: int CHANNEL_NUMBER_UNKNOWN>
<android.telephony.PhysicalChannelConfig: int CONNECTION_PRIMARY_SERVING>
<android.telephony.PhysicalChannelConfig: int CONNECTION_SECONDARY_SERVING>
<android.telephony.PhysicalChannelConfig: int CONNECTION_UNKNOWN>
<android.telephony.PhysicalChannelConfig: android.os.Parcelable$Creator CREATOR>
<android.telephony.PhysicalChannelConfig: int FREQUENCY_UNKNOWN>
<android.telephony.PhysicalChannelConfig: int PHYSICAL_CELL_ID_MAXIMUM_VALUE>
<android.telephony.PhysicalChannelConfig: int PHYSICAL_CELL_ID_UNKNOWN>
android.telephony.PreciseDataConnectionState
<android.telephony.PreciseDataConnectionState: int describeContents()>
<android.telephony.PreciseDataConnectionState: android.telephony.data.ApnSetting getApnSetting()>
<android.telephony.PreciseDataConnectionState: int getId()>
<android.telephony.PreciseDataConnectionState: int getLastCauseCode()>
<android.telephony.PreciseDataConnectionState: android.net.LinkProperties getLinkProperties()>
<android.telephony.PreciseDataConnectionState: int getNetworkType()>
<android.telephony.PreciseDataConnectionState: int getState()>
<android.telephony.PreciseDataConnectionState: int getTransportType()>
<android.telephony.PreciseDataConnectionState: void writeToParcel(android.os.Parcel,int)>
<android.telephony.PreciseDataConnectionState: android.os.Parcelable$Creator CREATOR>
android.telephony.RadioAccessSpecifier
<android.telephony.RadioAccessSpecifier: void <init>(int,int[],int[])>
<android.telephony.RadioAccessSpecifier: int describeContents()>
<android.telephony.RadioAccessSpecifier: int[] getBands()>
<android.telephony.RadioAccessSpecifier: int[] getChannels()>
<android.telephony.RadioAccessSpecifier: int getRadioAccessNetwork()>
<android.telephony.RadioAccessSpecifier: void writeToParcel(android.os.Parcel,int)>
<android.telephony.RadioAccessSpecifier: android.os.Parcelable$Creator CREATOR>
android.telephony.ServiceState
<android.telephony.ServiceState: void <init>()>
<android.telephony.ServiceState: void <init>(android.telephony.ServiceState)>
<android.telephony.ServiceState: void <init>(android.os.Parcel)>
<android.telephony.ServiceState: void copyFrom(android.telephony.ServiceState)>
<android.telephony.ServiceState: int describeContents()>
<android.telephony.ServiceState: int getCdmaNetworkId()>
<android.telephony.ServiceState: int getCdmaSystemId()>
<android.telephony.ServiceState: int[] getCellBandwidths()>
<android.telephony.ServiceState: int getChannelNumber()>
<android.telephony.ServiceState: int getDuplexMode()>
<android.telephony.ServiceState: boolean getIsManualSelection()>
<android.telephony.ServiceState: java.util.List getNetworkRegistrationInfoList()>
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()>
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()>
<android.telephony.ServiceState: java.lang.String getOperatorNumeric()>
<android.telephony.ServiceState: boolean getRoaming()>
<android.telephony.ServiceState: int getState()>
<android.telephony.ServiceState: boolean isSearching()>
<android.telephony.ServiceState: void setIsManualSelection(boolean)>
<android.telephony.ServiceState: void setOperatorName(java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.ServiceState: void setRoaming(boolean)>
<android.telephony.ServiceState: void setState(int)>
<android.telephony.ServiceState: void setStateOff()>
<android.telephony.ServiceState: void setStateOutOfService()>
<android.telephony.ServiceState: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ServiceState: android.os.Parcelable$Creator CREATOR>
<android.telephony.ServiceState: int DUPLEX_MODE_FDD>
<android.telephony.ServiceState: int DUPLEX_MODE_TDD>
<android.telephony.ServiceState: int DUPLEX_MODE_UNKNOWN>
<android.telephony.ServiceState: int STATE_EMERGENCY_ONLY>
<android.telephony.ServiceState: int STATE_IN_SERVICE>
<android.telephony.ServiceState: int STATE_OUT_OF_SERVICE>
<android.telephony.ServiceState: int STATE_POWER_OFF>
<android.telephony.ServiceState: int UNKNOWN_ID>
android.telephony.SignalStrength
<android.telephony.SignalStrength: void <init>(android.telephony.SignalStrength)>
<android.telephony.SignalStrength: int describeContents()>
<android.telephony.SignalStrength: int getCdmaDbm()>
<android.telephony.SignalStrength: int getCdmaEcio()>
<android.telephony.SignalStrength: java.util.List getCellSignalStrengths()>
<android.telephony.SignalStrength: java.util.List getCellSignalStrengths(java.lang.Class)>
<android.telephony.SignalStrength: int getEvdoDbm()>
<android.telephony.SignalStrength: int getEvdoEcio()>
<android.telephony.SignalStrength: int getEvdoSnr()>
<android.telephony.SignalStrength: int getGsmBitErrorRate()>
<android.telephony.SignalStrength: int getGsmSignalStrength()>
<android.telephony.SignalStrength: int getLevel()>
<android.telephony.SignalStrength: long getTimestampMillis()>
<android.telephony.SignalStrength: boolean isGsm()>
<android.telephony.SignalStrength: void writeToParcel(android.os.Parcel,int)>
<android.telephony.SignalStrength: android.os.Parcelable$Creator CREATOR>
<android.telephony.SignalStrength: int INVALID>
android.telephony.SignalStrengthUpdateRequest
<android.telephony.SignalStrengthUpdateRequest: int describeContents()>
<android.telephony.SignalStrengthUpdateRequest: java.util.Collection getSignalThresholdInfos()>
<android.telephony.SignalStrengthUpdateRequest: boolean isReportingRequestedWhileIdle()>
<android.telephony.SignalStrengthUpdateRequest: void writeToParcel(android.os.Parcel,int)>
<android.telephony.SignalStrengthUpdateRequest: android.os.Parcelable$Creator CREATOR>
android.telephony.SignalStrengthUpdateRequest$Builder
<android.telephony.SignalStrengthUpdateRequest$Builder: void <init>()>
<android.telephony.SignalStrengthUpdateRequest$Builder: android.telephony.SignalStrengthUpdateRequest build()>
<android.telephony.SignalStrengthUpdateRequest$Builder: android.telephony.SignalStrengthUpdateRequest$Builder setReportingRequestedWhileIdle(boolean)>
<android.telephony.SignalStrengthUpdateRequest$Builder: android.telephony.SignalStrengthUpdateRequest$Builder setSignalThresholdInfos(java.util.Collection)>
android.telephony.SignalThresholdInfo
<android.telephony.SignalThresholdInfo: int describeContents()>
<android.telephony.SignalThresholdInfo: int getMaximumNumberOfThresholdsAllowed()>
<android.telephony.SignalThresholdInfo: int getMinimumNumberOfThresholdsAllowed()>
<android.telephony.SignalThresholdInfo: int getRadioAccessNetworkType()>
<android.telephony.SignalThresholdInfo: int getSignalMeasurementType()>
<android.telephony.SignalThresholdInfo: int[] getThresholds()>
<android.telephony.SignalThresholdInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.SignalThresholdInfo: android.os.Parcelable$Creator CREATOR>
<android.telephony.SignalThresholdInfo: int SIGNAL_MEASUREMENT_TYPE_RSCP>
<android.telephony.SignalThresholdInfo: int SIGNAL_MEASUREMENT_TYPE_RSRP>
<android.telephony.SignalThresholdInfo: int SIGNAL_MEASUREMENT_TYPE_RSRQ>
<android.telephony.SignalThresholdInfo: int SIGNAL_MEASUREMENT_TYPE_RSSI>
<android.telephony.SignalThresholdInfo: int SIGNAL_MEASUREMENT_TYPE_RSSNR>
<android.telephony.SignalThresholdInfo: int SIGNAL_MEASUREMENT_TYPE_SSRSRP>
<android.telephony.SignalThresholdInfo: int SIGNAL_MEASUREMENT_TYPE_SSRSRQ>
<android.telephony.SignalThresholdInfo: int SIGNAL_MEASUREMENT_TYPE_SSSINR>
<android.telephony.SignalThresholdInfo: int SIGNAL_MEASUREMENT_TYPE_UNKNOWN>
android.telephony.SignalThresholdInfo$Builder
<android.telephony.SignalThresholdInfo$Builder: void <init>()>
<android.telephony.SignalThresholdInfo$Builder: android.telephony.SignalThresholdInfo build()>
<android.telephony.SignalThresholdInfo$Builder: android.telephony.SignalThresholdInfo$Builder setRadioAccessNetworkType(int)>
<android.telephony.SignalThresholdInfo$Builder: android.telephony.SignalThresholdInfo$Builder setSignalMeasurementType(int)>
<android.telephony.SignalThresholdInfo$Builder: android.telephony.SignalThresholdInfo$Builder setThresholds(int[])>
android.telephony.SmsManager
<android.telephony.SmsManager: java.lang.String createAppSpecificSmsToken(android.app.PendingIntent)>
<android.telephony.SmsManager: java.lang.String createAppSpecificSmsTokenWithPackageInfo(java.lang.String,android.app.PendingIntent)>
<android.telephony.SmsManager: android.telephony.SmsManager createForSubscriptionId(int)>
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>
<android.telephony.SmsManager: void downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
<android.telephony.SmsManager: void downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>
<android.telephony.SmsManager: android.os.Bundle getCarrierConfigValues()>
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
<android.telephony.SmsManager: int getDefaultSmsSubscriptionId()>
<android.telephony.SmsManager: int getSmsCapacityOnIcc()>
<android.telephony.SmsManager: android.telephony.SmsManager getSmsManagerForSubscriptionId(int)>
<android.telephony.SmsManager: void getSmsMessagesForFinancialApp(android.os.Bundle,java.util.concurrent.Executor,android.telephony.SmsManager$FinancialSmsCallback)>
<android.telephony.SmsManager: java.lang.String getSmscAddress()>
<android.telephony.SmsManager: int getSubscriptionId()>
<android.telephony.SmsManager: void injectSmsPdu(byte[],java.lang.String,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendMultimediaMessage(android.content.Context,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendMultimediaMessage(android.content.Context,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,long)>
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,java.lang.String,java.lang.String)>
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,long)>
<android.telephony.SmsManager: void sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: boolean setSmscAddress(java.lang.String)>
<android.telephony.SmsManager: java.lang.String EXTRA_MMS_DATA>
<android.telephony.SmsManager: java.lang.String EXTRA_MMS_HTTP_STATUS>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_ALIAS_ENABLED>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_ALIAS_MAX_CHARS>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_ALIAS_MIN_CHARS>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_ALLOW_ATTACH_AUDIO>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_APPEND_TRANSACTION_ID>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_EMAIL_GATEWAY_NUMBER>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_GROUP_MMS_ENABLED>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_HTTP_PARAMS>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_HTTP_SOCKET_TIMEOUT>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_MAX_IMAGE_HEIGHT>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_MAX_IMAGE_WIDTH>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_MAX_MESSAGE_SIZE>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_MESSAGE_TEXT_MAX_SIZE>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLED>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_MMS_ENABLED>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_MMS_READ_REPORT_ENABLED>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_MULTIPART_SMS_ENABLED>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_NAI_SUFFIX>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLED>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_RECIPIENT_LIMIT>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGES>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKS>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLED>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLD>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLD>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_SUBJECT_MAX_LENGTH>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADER>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITION>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_UA_PROF_TAG_NAME>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_UA_PROF_URL>
<android.telephony.SmsManager: java.lang.String MMS_CONFIG_USER_AGENT>
<android.telephony.SmsManager: int MMS_ERROR_CONFIGURATION_ERROR>
<android.telephony.SmsManager: int MMS_ERROR_DATA_DISABLED>
<android.telephony.SmsManager: int MMS_ERROR_HTTP_FAILURE>
<android.telephony.SmsManager: int MMS_ERROR_INACTIVE_SUBSCRIPTION>
<android.telephony.SmsManager: int MMS_ERROR_INVALID_APN>
<android.telephony.SmsManager: int MMS_ERROR_INVALID_SUBSCRIPTION_ID>
<android.telephony.SmsManager: int MMS_ERROR_IO_ERROR>
<android.telephony.SmsManager: int MMS_ERROR_NO_DATA_NETWORK>
<android.telephony.SmsManager: int MMS_ERROR_RETRY>
<android.telephony.SmsManager: int MMS_ERROR_UNABLE_CONNECT_MMS>
<android.telephony.SmsManager: int MMS_ERROR_UNSPECIFIED>
<android.telephony.SmsManager: int RESULT_BLUETOOTH_DISCONNECTED>
<android.telephony.SmsManager: int RESULT_CANCELLED>
<android.telephony.SmsManager: int RESULT_ENCODING_ERROR>
<android.telephony.SmsManager: int RESULT_ERROR_FDN_CHECK_FAILURE>
<android.telephony.SmsManager: int RESULT_ERROR_GENERIC_FAILURE>
<android.telephony.SmsManager: int RESULT_ERROR_LIMIT_EXCEEDED>
<android.telephony.SmsManager: int RESULT_ERROR_NONE>
<android.telephony.SmsManager: int RESULT_ERROR_NO_SERVICE>
<android.telephony.SmsManager: int RESULT_ERROR_NULL_PDU>
<android.telephony.SmsManager: int RESULT_ERROR_RADIO_OFF>
<android.telephony.SmsManager: int RESULT_ERROR_SHORT_CODE_NEVER_ALLOWED>
<android.telephony.SmsManager: int RESULT_ERROR_SHORT_CODE_NOT_ALLOWED>
<android.telephony.SmsManager: int RESULT_INTERNAL_ERROR>
<android.telephony.SmsManager: int RESULT_INVALID_ARGUMENTS>
<android.telephony.SmsManager: int RESULT_INVALID_BLUETOOTH_ADDRESS>
<android.telephony.SmsManager: int RESULT_INVALID_SMSC_ADDRESS>
<android.telephony.SmsManager: int RESULT_INVALID_SMS_FORMAT>
<android.telephony.SmsManager: int RESULT_INVALID_STATE>
<android.telephony.SmsManager: int RESULT_MODEM_ERROR>
<android.telephony.SmsManager: int RESULT_NETWORK_ERROR>
<android.telephony.SmsManager: int RESULT_NETWORK_REJECT>
<android.telephony.SmsManager: int RESULT_NO_BLUETOOTH_SERVICE>
<android.telephony.SmsManager: int RESULT_NO_DEFAULT_SMS_APP>
<android.telephony.SmsManager: int RESULT_NO_MEMORY>
<android.telephony.SmsManager: int RESULT_NO_RESOURCES>
<android.telephony.SmsManager: int RESULT_OPERATION_NOT_ALLOWED>
<android.telephony.SmsManager: int RESULT_RADIO_NOT_AVAILABLE>
<android.telephony.SmsManager: int RESULT_RECEIVE_DISPATCH_FAILURE>
<android.telephony.SmsManager: int RESULT_RECEIVE_INJECTED_NULL_PDU>
<android.telephony.SmsManager: int RESULT_RECEIVE_NULL_MESSAGE_FROM_RIL>
<android.telephony.SmsManager: int RESULT_RECEIVE_RUNTIME_EXCEPTION>
<android.telephony.SmsManager: int RESULT_RECEIVE_SQL_EXCEPTION>
<android.telephony.SmsManager: int RESULT_RECEIVE_URI_EXCEPTION>
<android.telephony.SmsManager: int RESULT_RECEIVE_WHILE_ENCRYPTED>
<android.telephony.SmsManager: int RESULT_REMOTE_EXCEPTION>
<android.telephony.SmsManager: int RESULT_REQUEST_NOT_SUPPORTED>
<android.telephony.SmsManager: int RESULT_RIL_ACCESS_BARRED>
<android.telephony.SmsManager: int RESULT_RIL_BLOCKED_DUE_TO_CALL>
<android.telephony.SmsManager: int RESULT_RIL_CANCELLED>
<android.telephony.SmsManager: int RESULT_RIL_ENCODING_ERR>
<android.telephony.SmsManager: int RESULT_RIL_GENERIC_ERROR>
<android.telephony.SmsManager: int RESULT_RIL_INTERNAL_ERR>
<android.telephony.SmsManager: int RESULT_RIL_INVALID_ARGUMENTS>
<android.telephony.SmsManager: int RESULT_RIL_INVALID_MODEM_STATE>
<android.telephony.SmsManager: int RESULT_RIL_INVALID_SMSC_ADDRESS>
<android.telephony.SmsManager: int RESULT_RIL_INVALID_SMS_FORMAT>
<android.telephony.SmsManager: int RESULT_RIL_INVALID_STATE>
<android.telephony.SmsManager: int RESULT_RIL_MODEM_ERR>
<android.telephony.SmsManager: int RESULT_RIL_NETWORK_ERR>
<android.telephony.SmsManager: int RESULT_RIL_NETWORK_NOT_READY>
<android.telephony.SmsManager: int RESULT_RIL_NETWORK_REJECT>
<android.telephony.SmsManager: int RESULT_RIL_NO_MEMORY>
<android.telephony.SmsManager: int RESULT_RIL_NO_RESOURCES>
<android.telephony.SmsManager: int RESULT_RIL_OPERATION_NOT_ALLOWED>
<android.telephony.SmsManager: int RESULT_RIL_RADIO_NOT_AVAILABLE>
<android.telephony.SmsManager: int RESULT_RIL_REQUEST_NOT_SUPPORTED>
<android.telephony.SmsManager: int RESULT_RIL_REQUEST_RATE_LIMITED>
<android.telephony.SmsManager: int RESULT_RIL_SIMULTANEOUS_SMS_AND_CALL_NOT_ALLOWED>
<android.telephony.SmsManager: int RESULT_RIL_SIM_ABSENT>
<android.telephony.SmsManager: int RESULT_RIL_SMS_SEND_FAIL_RETRY>
<android.telephony.SmsManager: int RESULT_RIL_SYSTEM_ERR>
<android.telephony.SmsManager: int RESULT_SMS_BLOCKED_DURING_EMERGENCY>
<android.telephony.SmsManager: int RESULT_SMS_SEND_RETRY_FAILED>
<android.telephony.SmsManager: int RESULT_SYSTEM_ERROR>
<android.telephony.SmsManager: int RESULT_UNEXPECTED_EVENT_STOP_SENDING>
<android.telephony.SmsManager: int STATUS_ON_ICC_FREE>
<android.telephony.SmsManager: int STATUS_ON_ICC_READ>
<android.telephony.SmsManager: int STATUS_ON_ICC_SENT>
<android.telephony.SmsManager: int STATUS_ON_ICC_UNREAD>
<android.telephony.SmsManager: int STATUS_ON_ICC_UNSENT>
android.telephony.SmsManager$FinancialSmsCallback
<android.telephony.SmsManager$FinancialSmsCallback: void <init>()>
<android.telephony.SmsManager$FinancialSmsCallback: void onFinancialSmsMessages(android.database.CursorWindow)>
android.telephony.SmsMessage
<android.telephony.SmsMessage: int[] calculateLength(java.lang.CharSequence,boolean)>
<android.telephony.SmsMessage: int[] calculateLength(java.lang.String,boolean)>
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[],java.lang.String)>
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()>
<android.telephony.SmsMessage: java.lang.String getEmailBody()>
<android.telephony.SmsMessage: java.lang.String getEmailFrom()>
<android.telephony.SmsMessage: int getIndexOnIcc()>
<android.telephony.SmsMessage: int getIndexOnSim()>
<android.telephony.SmsMessage: java.lang.String getMessageBody()>
<android.telephony.SmsMessage: android.telephony.SmsMessage$MessageClass getMessageClass()>
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()>
<android.telephony.SmsMessage: byte[] getPdu()>
<android.telephony.SmsMessage: int getProtocolIdentifier()>
<android.telephony.SmsMessage: java.lang.String getPseudoSubject()>
<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()>
<android.telephony.SmsMessage: int getStatus()>
<android.telephony.SmsMessage: int getStatusOnIcc()>
<android.telephony.SmsMessage: int getStatusOnSim()>
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,short,byte[],boolean)>
<android.telephony.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>
<android.telephony.SmsMessage: long getTimestampMillis()>
<android.telephony.SmsMessage: byte[] getUserData()>
<android.telephony.SmsMessage: boolean isCphsMwiMessage()>
<android.telephony.SmsMessage: boolean isEmail()>
<android.telephony.SmsMessage: boolean isMWIClearMessage()>
<android.telephony.SmsMessage: boolean isMWISetMessage()>
<android.telephony.SmsMessage: boolean isMwiDontStore()>
<android.telephony.SmsMessage: boolean isReplace()>
<android.telephony.SmsMessage: boolean isReplyPathPresent()>
<android.telephony.SmsMessage: boolean isStatusReportMessage()>
<android.telephony.SmsMessage: int ENCODING_16BIT>
<android.telephony.SmsMessage: int ENCODING_7BIT>
<android.telephony.SmsMessage: int ENCODING_8BIT>
<android.telephony.SmsMessage: int ENCODING_KSC5601>
<android.telephony.SmsMessage: int ENCODING_UNKNOWN>
<android.telephony.SmsMessage: java.lang.String FORMAT_3GPP>
<android.telephony.SmsMessage: java.lang.String FORMAT_3GPP2>
<android.telephony.SmsMessage: int MAX_USER_DATA_BYTES>
<android.telephony.SmsMessage: int MAX_USER_DATA_BYTES_WITH_HEADER>
<android.telephony.SmsMessage: int MAX_USER_DATA_SEPTETS>
<android.telephony.SmsMessage: int MAX_USER_DATA_SEPTETS_WITH_HEADER>
android.telephony.SmsMessage$MessageClass
<android.telephony.SmsMessage$MessageClass: android.telephony.SmsMessage$MessageClass CLASS_0>
<android.telephony.SmsMessage$MessageClass: android.telephony.SmsMessage$MessageClass CLASS_1>
<android.telephony.SmsMessage$MessageClass: android.telephony.SmsMessage$MessageClass CLASS_2>
<android.telephony.SmsMessage$MessageClass: android.telephony.SmsMessage$MessageClass CLASS_3>
<android.telephony.SmsMessage$MessageClass: android.telephony.SmsMessage$MessageClass UNKNOWN>
android.telephony.SmsMessage$SubmitPdu
<android.telephony.SmsMessage$SubmitPdu: byte[] encodedMessage>
<android.telephony.SmsMessage$SubmitPdu: byte[] encodedScAddress>
android.telephony.SubscriptionInfo
<android.telephony.SubscriptionInfo: android.graphics.Bitmap createIconBitmap(android.content.Context)>
<android.telephony.SubscriptionInfo: int describeContents()>
<android.telephony.SubscriptionInfo: int getCardId()>
<android.telephony.SubscriptionInfo: int getCarrierId()>
<android.telephony.SubscriptionInfo: java.lang.CharSequence getCarrierName()>
<android.telephony.SubscriptionInfo: java.lang.String getCountryIso()>
<android.telephony.SubscriptionInfo: int getDataRoaming()>
<android.telephony.SubscriptionInfo: java.lang.CharSequence getDisplayName()>
<android.telephony.SubscriptionInfo: android.os.ParcelUuid getGroupUuid()>
<android.telephony.SubscriptionInfo: java.lang.String getIccId()>
<android.telephony.SubscriptionInfo: int getIconTint()>
<android.telephony.SubscriptionInfo: int getMcc()>
<android.telephony.SubscriptionInfo: java.lang.String getMccString()>
<android.telephony.SubscriptionInfo: int getMnc()>
<android.telephony.SubscriptionInfo: java.lang.String getMncString()>
<android.telephony.SubscriptionInfo: java.lang.String getNumber()>
<android.telephony.SubscriptionInfo: int getPortIndex()>
<android.telephony.SubscriptionInfo: int getSimSlotIndex()>
<android.telephony.SubscriptionInfo: int getSubscriptionId()>
<android.telephony.SubscriptionInfo: int getSubscriptionType()>
<android.telephony.SubscriptionInfo: int getUsageSetting()>
<android.telephony.SubscriptionInfo: boolean isEmbedded()>
<android.telephony.SubscriptionInfo: boolean isOpportunistic()>
<android.telephony.SubscriptionInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.SubscriptionInfo: android.os.Parcelable$Creator CREATOR>
android.telephony.SubscriptionManager
<android.telephony.SubscriptionManager: void addOnOpportunisticSubscriptionsChangedListener(java.util.concurrent.Executor,android.telephony.SubscriptionManager$OnOpportunisticSubscriptionsChangedListener)>
<android.telephony.SubscriptionManager: void addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnSubscriptionsChangedListener)>
<android.telephony.SubscriptionManager: void addOnSubscriptionsChangedListener(java.util.concurrent.Executor,android.telephony.SubscriptionManager$OnSubscriptionsChangedListener)>
<android.telephony.SubscriptionManager: void addSubscriptionsIntoGroup(java.util.List,android.os.ParcelUuid)>
<android.telephony.SubscriptionManager: boolean canManageSubscription(android.telephony.SubscriptionInfo)>
<android.telephony.SubscriptionManager: android.os.ParcelUuid createSubscriptionGroup(java.util.List)>
<android.telephony.SubscriptionManager: android.telephony.SubscriptionManager from(android.content.Context)>
<android.telephony.SubscriptionManager: java.util.List getAccessibleSubscriptionInfoList()>
<android.telephony.SubscriptionManager: int getActiveDataSubscriptionId()>
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int)>
<android.telephony.SubscriptionManager: int getActiveSubscriptionInfoCount()>
<android.telephony.SubscriptionManager: int getActiveSubscriptionInfoCountMax()>
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int)>
<android.telephony.SubscriptionManager: java.util.List getActiveSubscriptionInfoList()>
<android.telephony.SubscriptionManager: java.util.List getCompleteActiveSubscriptionInfoList()>
<android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>
<android.telephony.SubscriptionManager: int getDefaultSmsSubscriptionId()>
<android.telephony.SubscriptionManager: int getDefaultSubscriptionId()>
<android.telephony.SubscriptionManager: int getDefaultVoiceSubscriptionId()>
<android.telephony.SubscriptionManager: java.util.List getDeviceToDeviceStatusSharingContacts(int)>
<android.telephony.SubscriptionManager: int getDeviceToDeviceStatusSharingPreference(int)>
<android.telephony.SubscriptionManager: java.util.List getOpportunisticSubscriptions()>
<android.telephony.SubscriptionManager: java.lang.String getPhoneNumber(int,int)>
<android.telephony.SubscriptionManager: java.lang.String getPhoneNumber(int)>
<android.telephony.SubscriptionManager: int getSlotIndex(int)>
<android.telephony.SubscriptionManager: int[] getSubscriptionIds(int)>
<android.telephony.SubscriptionManager: java.util.List getSubscriptionPlans(int)>
<android.telephony.SubscriptionManager: java.util.List getSubscriptionsInGroup(android.os.ParcelUuid)>
<android.telephony.SubscriptionManager: boolean isActiveSubscriptionId(int)>
<android.telephony.SubscriptionManager: boolean isNetworkRoaming(int)>
<android.telephony.SubscriptionManager: boolean isUsableSubscriptionId(int)>
<android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)>
<android.telephony.SubscriptionManager: void removeOnOpportunisticSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnOpportunisticSubscriptionsChangedListener)>
<android.telephony.SubscriptionManager: void removeOnSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnSubscriptionsChangedListener)>
<android.telephony.SubscriptionManager: void removeSubscriptionsFromGroup(java.util.List,android.os.ParcelUuid)>
<android.telephony.SubscriptionManager: void setCarrierPhoneNumber(int,java.lang.String)>
<android.telephony.SubscriptionManager: void setDeviceToDeviceStatusSharingContacts(int,java.util.List)>
<android.telephony.SubscriptionManager: void setDeviceToDeviceStatusSharingPreference(int,int)>
<android.telephony.SubscriptionManager: boolean setOpportunistic(boolean,int)>
<android.telephony.SubscriptionManager: void setSubscriptionOverrideCongested(int,boolean,long)>
<android.telephony.SubscriptionManager: void setSubscriptionOverrideCongested(int,boolean,int[],long)>
<android.telephony.SubscriptionManager: void setSubscriptionOverrideUnmetered(int,boolean,long)>
<android.telephony.SubscriptionManager: void setSubscriptionOverrideUnmetered(int,boolean,int[],long)>
<android.telephony.SubscriptionManager: void setSubscriptionPlans(int,java.util.List)>
<android.telephony.SubscriptionManager: void setSubscriptionPlans(int,java.util.List,long)>
<android.telephony.SubscriptionManager: void switchToSubscription(int,android.app.PendingIntent)>
<android.telephony.SubscriptionManager: java.lang.String ACTION_DEFAULT_SMS_SUBSCRIPTION_CHANGED>
<android.telephony.SubscriptionManager: java.lang.String ACTION_DEFAULT_SUBSCRIPTION_CHANGED>
<android.telephony.SubscriptionManager: java.lang.String ACTION_MANAGE_SUBSCRIPTION_PLANS>
<android.telephony.SubscriptionManager: java.lang.String ACTION_REFRESH_SUBSCRIPTION_PLANS>
<android.telephony.SubscriptionManager: int D2D_SHARING_ALL>
<android.telephony.SubscriptionManager: int D2D_SHARING_ALL_CONTACTS>
<android.telephony.SubscriptionManager: int D2D_SHARING_DISABLED>
<android.telephony.SubscriptionManager: int D2D_SHARING_SELECTED_CONTACTS>
<android.telephony.SubscriptionManager: java.lang.String D2D_STATUS_SHARING>
<android.telephony.SubscriptionManager: java.lang.String D2D_STATUS_SHARING_SELECTED_CONTACTS>
<android.telephony.SubscriptionManager: int DATA_ROAMING_DISABLE>
<android.telephony.SubscriptionManager: int DATA_ROAMING_ENABLE>
<android.telephony.SubscriptionManager: int DEFAULT_SUBSCRIPTION_ID>
<android.telephony.SubscriptionManager: java.lang.String EXTRA_SLOT_INDEX>
<android.telephony.SubscriptionManager: java.lang.String EXTRA_SUBSCRIPTION_INDEX>
<android.telephony.SubscriptionManager: int INVALID_SIM_SLOT_INDEX>
<android.telephony.SubscriptionManager: int INVALID_SUBSCRIPTION_ID>
<android.telephony.SubscriptionManager: int PHONE_NUMBER_SOURCE_CARRIER>
<android.telephony.SubscriptionManager: int PHONE_NUMBER_SOURCE_IMS>
<android.telephony.SubscriptionManager: int PHONE_NUMBER_SOURCE_UICC>
<android.telephony.SubscriptionManager: int SUBSCRIPTION_TYPE_LOCAL_SIM>
<android.telephony.SubscriptionManager: int SUBSCRIPTION_TYPE_REMOTE_SIM>
<android.telephony.SubscriptionManager: int USAGE_SETTING_DATA_CENTRIC>
<android.telephony.SubscriptionManager: int USAGE_SETTING_DEFAULT>
<android.telephony.SubscriptionManager: int USAGE_SETTING_UNKNOWN>
<android.telephony.SubscriptionManager: int USAGE_SETTING_VOICE_CENTRIC>
android.telephony.SubscriptionManager$OnOpportunisticSubscriptionsChangedListener
<android.telephony.SubscriptionManager$OnOpportunisticSubscriptionsChangedListener: void <init>()>
<android.telephony.SubscriptionManager$OnOpportunisticSubscriptionsChangedListener: void onOpportunisticSubscriptionsChanged()>
android.telephony.SubscriptionManager$OnSubscriptionsChangedListener
<android.telephony.SubscriptionManager$OnSubscriptionsChangedListener: void <init>()>
<android.telephony.SubscriptionManager$OnSubscriptionsChangedListener: void onSubscriptionsChanged()>
android.telephony.SubscriptionPlan
<android.telephony.SubscriptionPlan: java.util.Iterator cycleIterator()>
<android.telephony.SubscriptionPlan: int describeContents()>
<android.telephony.SubscriptionPlan: int getDataLimitBehavior()>
<android.telephony.SubscriptionPlan: long getDataLimitBytes()>
<android.telephony.SubscriptionPlan: long getDataUsageBytes()>
<android.telephony.SubscriptionPlan: long getDataUsageTime()>
<android.telephony.SubscriptionPlan: int[] getNetworkTypes()>
<android.telephony.SubscriptionPlan: java.lang.CharSequence getSummary()>
<android.telephony.SubscriptionPlan: java.lang.CharSequence getTitle()>
<android.telephony.SubscriptionPlan: void writeToParcel(android.os.Parcel,int)>
<android.telephony.SubscriptionPlan: long BYTES_UNKNOWN>
<android.telephony.SubscriptionPlan: long BYTES_UNLIMITED>
<android.telephony.SubscriptionPlan: android.os.Parcelable$Creator CREATOR>
<android.telephony.SubscriptionPlan: int LIMIT_BEHAVIOR_BILLED>
<android.telephony.SubscriptionPlan: int LIMIT_BEHAVIOR_DISABLED>
<android.telephony.SubscriptionPlan: int LIMIT_BEHAVIOR_THROTTLED>
<android.telephony.SubscriptionPlan: int LIMIT_BEHAVIOR_UNKNOWN>
<android.telephony.SubscriptionPlan: long TIME_UNKNOWN>
android.telephony.SubscriptionPlan$Builder
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createNonrecurring(java.time.ZonedDateTime,java.time.ZonedDateTime)>
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurring(java.time.ZonedDateTime,java.time.Period)>
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder resetNetworkTypes()>
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setNetworkTypes(int[])>
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setSummary(java.lang.CharSequence)>
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>
android.telephony.TelephonyCallback
<android.telephony.TelephonyCallback: void <init>()>
android.telephony.TelephonyCallback$ActiveDataSubscriptionIdListener
<android.telephony.TelephonyCallback$ActiveDataSubscriptionIdListener: void onActiveDataSubscriptionIdChanged(int)>
android.telephony.TelephonyCallback$BarringInfoListener
<android.telephony.TelephonyCallback$BarringInfoListener: void onBarringInfoChanged(android.telephony.BarringInfo)>
android.telephony.TelephonyCallback$CallDisconnectCauseListener
<android.telephony.TelephonyCallback$CallDisconnectCauseListener: void onCallDisconnectCauseChanged(int,int)>
android.telephony.TelephonyCallback$CallForwardingIndicatorListener
<android.telephony.TelephonyCallback$CallForwardingIndicatorListener: void onCallForwardingIndicatorChanged(boolean)>
android.telephony.TelephonyCallback$CallStateListener
<android.telephony.TelephonyCallback$CallStateListener: void onCallStateChanged(int)>
android.telephony.TelephonyCallback$CarrierNetworkListener
<android.telephony.TelephonyCallback$CarrierNetworkListener: void onCarrierNetworkChange(boolean)>
android.telephony.TelephonyCallback$CellInfoListener
<android.telephony.TelephonyCallback$CellInfoListener: void onCellInfoChanged(java.util.List)>
android.telephony.TelephonyCallback$CellLocationListener
<android.telephony.TelephonyCallback$CellLocationListener: void onCellLocationChanged(android.telephony.CellLocation)>
android.telephony.TelephonyCallback$DataActivationStateListener
<android.telephony.TelephonyCallback$DataActivationStateListener: void onDataActivationStateChanged(int)>
android.telephony.TelephonyCallback$DataActivityListener
<android.telephony.TelephonyCallback$DataActivityListener: void onDataActivity(int)>
android.telephony.TelephonyCallback$DataConnectionStateListener
<android.telephony.TelephonyCallback$DataConnectionStateListener: void onDataConnectionStateChanged(int,int)>
android.telephony.TelephonyCallback$DisplayInfoListener
<android.telephony.TelephonyCallback$DisplayInfoListener: void onDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)>
android.telephony.TelephonyCallback$EmergencyNumberListListener
<android.telephony.TelephonyCallback$EmergencyNumberListListener: void onEmergencyNumberListChanged(java.util.Map)>
android.telephony.TelephonyCallback$ImsCallDisconnectCauseListener
<android.telephony.TelephonyCallback$ImsCallDisconnectCauseListener: void onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)>
android.telephony.TelephonyCallback$MessageWaitingIndicatorListener
<android.telephony.TelephonyCallback$MessageWaitingIndicatorListener: void onMessageWaitingIndicatorChanged(boolean)>
android.telephony.TelephonyCallback$PhysicalChannelConfigListener
<android.telephony.TelephonyCallback$PhysicalChannelConfigListener: void onPhysicalChannelConfigChanged(java.util.List)>
android.telephony.TelephonyCallback$PreciseDataConnectionStateListener
<android.telephony.TelephonyCallback$PreciseDataConnectionStateListener: void onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)>
android.telephony.TelephonyCallback$RegistrationFailedListener
<android.telephony.TelephonyCallback$RegistrationFailedListener: void onRegistrationFailed(android.telephony.CellIdentity,java.lang.String,int,int,int)>
android.telephony.TelephonyCallback$ServiceStateListener
<android.telephony.TelephonyCallback$ServiceStateListener: void onServiceStateChanged(android.telephony.ServiceState)>
android.telephony.TelephonyCallback$SignalStrengthsListener
<android.telephony.TelephonyCallback$SignalStrengthsListener: void onSignalStrengthsChanged(android.telephony.SignalStrength)>
android.telephony.TelephonyCallback$UserMobileDataStateListener
<android.telephony.TelephonyCallback$UserMobileDataStateListener: void onUserMobileDataStateChanged(boolean)>
android.telephony.TelephonyDisplayInfo
<android.telephony.TelephonyDisplayInfo: int describeContents()>
<android.telephony.TelephonyDisplayInfo: int getNetworkType()>
<android.telephony.TelephonyDisplayInfo: int getOverrideNetworkType()>
<android.telephony.TelephonyDisplayInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.TelephonyDisplayInfo: android.os.Parcelable$Creator CREATOR>
<android.telephony.TelephonyDisplayInfo: int OVERRIDE_NETWORK_TYPE_LTE_ADVANCED_PRO>
<android.telephony.TelephonyDisplayInfo: int OVERRIDE_NETWORK_TYPE_LTE_CA>
<android.telephony.TelephonyDisplayInfo: int OVERRIDE_NETWORK_TYPE_NONE>
<android.telephony.TelephonyDisplayInfo: int OVERRIDE_NETWORK_TYPE_NR_ADVANCED>
<android.telephony.TelephonyDisplayInfo: int OVERRIDE_NETWORK_TYPE_NR_NSA>
<android.telephony.TelephonyDisplayInfo: int OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVE>
android.telephony.TelephonyManager
<android.telephony.TelephonyManager: boolean canChangeDtmfToneLength()>
<android.telephony.TelephonyManager: void clearSignalStrengthUpdateRequest(android.telephony.SignalStrengthUpdateRequest)>
<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForPhoneAccountHandle(android.telecom.PhoneAccountHandle)>
<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForSubscriptionId(int)>
<android.telephony.TelephonyManager: boolean doesSwitchMultiSimConfigTriggerReboot()>
<android.telephony.TelephonyManager: int getActiveModemCount()>
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()>
<android.telephony.TelephonyManager: long getAllowedNetworkTypesForReason(int)>
<android.telephony.TelephonyManager: int getCallComposerStatus()>
<android.telephony.TelephonyManager: int getCallState()>
<android.telephony.TelephonyManager: int getCallStateForSubscription()>
<android.telephony.TelephonyManager: int getCardIdForDefaultEuicc()>
<android.telephony.TelephonyManager: android.os.PersistableBundle getCarrierConfig()>
<android.telephony.TelephonyManager: int getCarrierIdFromSimMccMnc()>
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
<android.telephony.TelephonyManager: int getDataActivity()>
<android.telephony.TelephonyManager: int getDataNetworkType()>
<android.telephony.TelephonyManager: int getDataState()>
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>
<android.telephony.TelephonyManager: java.lang.String getDeviceId(int)>
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>
<android.telephony.TelephonyManager: java.util.Map getEmergencyNumberList()>
<android.telephony.TelephonyManager: java.util.Map getEmergencyNumberList(int)>
<android.telephony.TelephonyManager: java.util.List getEquivalentHomePlmns()>
<android.telephony.TelephonyManager: java.lang.String[] getForbiddenPlmns()>
<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1()>
<android.telephony.TelephonyManager: java.lang.String getIccAuthentication(int,int,java.lang.String)>
<android.telephony.TelephonyManager: java.lang.String getImei()>
<android.telephony.TelephonyManager: java.lang.String getImei(int)>
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>
<android.telephony.TelephonyManager: java.lang.String getManualNetworkSelectionPlmn()>
<android.telephony.TelephonyManager: java.lang.String getManufacturerCode()>
<android.telephony.TelephonyManager: java.lang.String getManufacturerCode(int)>
<android.telephony.TelephonyManager: long getMaximumCallComposerPictureSize()>
<android.telephony.TelephonyManager: java.lang.String getMeid()>
<android.telephony.TelephonyManager: java.lang.String getMeid(int)>
<android.telephony.TelephonyManager: java.lang.String getMmsUAProfUrl()>
<android.telephony.TelephonyManager: java.lang.String getMmsUserAgent()>
<android.telephony.TelephonyManager: java.lang.String getNai()>
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso(int)>
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>
<android.telephony.TelephonyManager: int getNetworkSelectionMode()>
<android.telephony.TelephonyManager: void getNetworkSlicingConfiguration(java.util.concurrent.Executor,android.os.OutcomeReceiver)>
<android.telephony.TelephonyManager: java.lang.String getNetworkSpecifier()>
<android.telephony.TelephonyManager: int getNetworkType()>
<android.telephony.TelephonyManager: android.telecom.PhoneAccountHandle getPhoneAccountHandle()>
<android.telephony.TelephonyManager: int getPhoneCount()>
<android.telephony.TelephonyManager: int getPhoneType()>
<android.telephony.TelephonyManager: int getPreferredOpportunisticDataSubscription()>
<android.telephony.TelephonyManager: android.telephony.ServiceState getServiceState()>
<android.telephony.TelephonyManager: android.telephony.ServiceState getServiceState(int)>
<android.telephony.TelephonyManager: android.telephony.SignalStrength getSignalStrength()>
<android.telephony.TelephonyManager: int getSimCarrierId()>
<android.telephony.TelephonyManager: java.lang.CharSequence getSimCarrierIdName()>
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>
<android.telephony.TelephonyManager: int getSimSpecificCarrierId()>
<android.telephony.TelephonyManager: java.lang.CharSequence getSimSpecificCarrierIdName()>
<android.telephony.TelephonyManager: int getSimState()>
<android.telephony.TelephonyManager: int getSimState(int)>
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>
<android.telephony.TelephonyManager: int getSubscriptionId()>
<android.telephony.TelephonyManager: int getSubscriptionId(android.telecom.PhoneAccountHandle)>
<android.telephony.TelephonyManager: int getSupportedModemCount()>
<android.telephony.TelephonyManager: long getSupportedRadioAccessFamily()>
<android.telephony.TelephonyManager: java.lang.String getTypeAllocationCode()>
<android.telephony.TelephonyManager: java.lang.String getTypeAllocationCode(int)>
<android.telephony.TelephonyManager: java.util.List getUiccCardsInfo()>
<android.telephony.TelephonyManager: java.lang.String getVisualVoicemailPackageName()>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>
<android.telephony.TelephonyManager: int getVoiceNetworkType()>
<android.telephony.TelephonyManager: android.net.Uri getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle)>
<android.telephony.TelephonyManager: boolean hasCarrierPrivileges()>
<android.telephony.TelephonyManager: boolean hasIccCard()>
<android.telephony.TelephonyManager: boolean iccCloseLogicalChannel(int)>
<android.telephony.TelephonyManager: byte[] iccExchangeSimIO(int,int,int,int,int,java.lang.String)>
<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String)>
<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String,int)>
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String)>
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String)>
<android.telephony.TelephonyManager: boolean isConcurrentVoiceAndDataSupported()>
<android.telephony.TelephonyManager: boolean isDataCapable()>
<android.telephony.TelephonyManager: boolean isDataConnectionAllowed()>
<android.telephony.TelephonyManager: boolean isDataEnabled()>
<android.telephony.TelephonyManager: boolean isDataEnabledForReason(int)>
<android.telephony.TelephonyManager: boolean isDataRoamingEnabled()>
<android.telephony.TelephonyManager: boolean isEmergencyNumber(java.lang.String)>
<android.telephony.TelephonyManager: boolean isHearingAidCompatibilitySupported()>
<android.telephony.TelephonyManager: boolean isManualNetworkSelectionAllowed()>
<android.telephony.TelephonyManager: boolean isModemEnabledForSlot(int)>
<android.telephony.TelephonyManager: int isMultiSimSupported()>
<android.telephony.TelephonyManager: boolean isNetworkRoaming()>
<android.telephony.TelephonyManager: boolean isRadioInterfaceCapabilitySupported(java.lang.String)>
<android.telephony.TelephonyManager: boolean isRttSupported()>
<android.telephony.TelephonyManager: boolean isSmsCapable()>
<android.telephony.TelephonyManager: boolean isTtyModeSupported()>
<android.telephony.TelephonyManager: boolean isVoiceCapable()>
<android.telephony.TelephonyManager: boolean isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle)>
<android.telephony.TelephonyManager: boolean isWorldPhone()>
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>
<android.telephony.TelephonyManager: void rebootModem()>
<android.telephony.TelephonyManager: void registerTelephonyCallback(java.util.concurrent.Executor,android.telephony.TelephonyCallback)>
<android.telephony.TelephonyManager: void registerTelephonyCallback(int,java.util.concurrent.Executor,android.telephony.TelephonyCallback)>
<android.telephony.TelephonyManager: void requestCellInfoUpdate(java.util.concurrent.Executor,android.telephony.TelephonyManager$CellInfoCallback)>
<android.telephony.TelephonyManager: android.telephony.NetworkScan requestNetworkScan(android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback)>
<android.telephony.TelephonyManager: android.telephony.NetworkScan requestNetworkScan(int,android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback)>
<android.telephony.TelephonyManager: void sendDialerSpecialCode(java.lang.String)>
<android.telephony.TelephonyManager: java.lang.String sendEnvelopeWithStatus(java.lang.String)>
<android.telephony.TelephonyManager: void sendUssdRequest(java.lang.String,android.telephony.TelephonyManager$UssdResponseCallback,android.os.Handler)>
<android.telephony.TelephonyManager: void sendVisualVoicemailSms(java.lang.String,int,java.lang.String,android.app.PendingIntent)>
<android.telephony.TelephonyManager: void setAllowedNetworkTypesForReason(int,long)>
<android.telephony.TelephonyManager: void setCallComposerStatus(int)>
<android.telephony.TelephonyManager: void setDataEnabled(boolean)>
<android.telephony.TelephonyManager: void setDataEnabledForReason(int,boolean)>
<android.telephony.TelephonyManager: int setForbiddenPlmns(java.util.List)>
<android.telephony.TelephonyManager: boolean setLine1NumberForDisplay(java.lang.String,java.lang.String)>
<android.telephony.TelephonyManager: void setNetworkSelectionModeAutomatic()>
<android.telephony.TelephonyManager: boolean setNetworkSelectionModeManual(java.lang.String,boolean)>
<android.telephony.TelephonyManager: boolean setNetworkSelectionModeManual(java.lang.String,boolean,int)>
<android.telephony.TelephonyManager: boolean setOperatorBrandOverride(java.lang.String)>
<android.telephony.TelephonyManager: boolean setPreferredNetworkTypeToGlobal()>
<android.telephony.TelephonyManager: void setPreferredOpportunisticDataSubscription(int,boolean,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.telephony.TelephonyManager: void setSignalStrengthUpdateRequest(android.telephony.SignalStrengthUpdateRequest)>
<android.telephony.TelephonyManager: void setVisualVoicemailSmsFilterSettings(android.telephony.VisualVoicemailSmsFilterSettings)>
<android.telephony.TelephonyManager: boolean setVoiceMailNumber(java.lang.String,java.lang.String)>
<android.telephony.TelephonyManager: void setVoicemailRingtoneUri(android.telecom.PhoneAccountHandle,android.net.Uri)>
<android.telephony.TelephonyManager: void setVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle,boolean)>
<android.telephony.TelephonyManager: void switchMultiSimConfig(int)>
<android.telephony.TelephonyManager: void unregisterTelephonyCallback(android.telephony.TelephonyCallback)>
<android.telephony.TelephonyManager: void updateAvailableNetworks(java.util.List,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.telephony.TelephonyManager: void uploadCallComposerPicture(java.nio.file.Path,java.lang.String,java.util.concurrent.Executor,android.os.OutcomeReceiver)>
<android.telephony.TelephonyManager: void uploadCallComposerPicture(java.io.InputStream,java.lang.String,java.util.concurrent.Executor,android.os.OutcomeReceiver)>
<android.telephony.TelephonyManager: java.lang.String ACTION_CARRIER_MESSAGING_CLIENT_SERVICE>
<android.telephony.TelephonyManager: java.lang.String ACTION_CARRIER_SIGNAL_DEFAULT_NETWORK_AVAILABLE>
<android.telephony.TelephonyManager: java.lang.String ACTION_CARRIER_SIGNAL_PCO_VALUE>
<android.telephony.TelephonyManager: java.lang.String ACTION_CARRIER_SIGNAL_REDIRECTED>
<android.telephony.TelephonyManager: java.lang.String ACTION_CARRIER_SIGNAL_REQUEST_NETWORK_FAILED>
<android.telephony.TelephonyManager: java.lang.String ACTION_CARRIER_SIGNAL_RESET>
<android.telephony.TelephonyManager: java.lang.String ACTION_CONFIGURE_VOICEMAIL>
<android.telephony.TelephonyManager: java.lang.String ACTION_MULTI_SIM_CONFIG_CHANGED>
<android.telephony.TelephonyManager: java.lang.String ACTION_NETWORK_COUNTRY_CHANGED>
<android.telephony.TelephonyManager: java.lang.String ACTION_PHONE_STATE_CHANGED>
<android.telephony.TelephonyManager: java.lang.String ACTION_RESPOND_VIA_MESSAGE>
<android.telephony.TelephonyManager: java.lang.String ACTION_SECRET_CODE>
<android.telephony.TelephonyManager: java.lang.String ACTION_SHOW_VOICEMAIL_NOTIFICATION>
<android.telephony.TelephonyManager: java.lang.String ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED>
<android.telephony.TelephonyManager: java.lang.String ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGED>
<android.telephony.TelephonyManager: int ALLOWED_NETWORK_TYPES_REASON_CARRIER>
<android.telephony.TelephonyManager: int ALLOWED_NETWORK_TYPES_REASON_USER>
<android.telephony.TelephonyManager: int APPTYPE_CSIM>
<android.telephony.TelephonyManager: int APPTYPE_ISIM>
<android.telephony.TelephonyManager: int APPTYPE_RUIM>
<android.telephony.TelephonyManager: int APPTYPE_SIM>
<android.telephony.TelephonyManager: int APPTYPE_UNKNOWN>
<android.telephony.TelephonyManager: int APPTYPE_USIM>
<android.telephony.TelephonyManager: int AUTHTYPE_EAP_AKA>
<android.telephony.TelephonyManager: int AUTHTYPE_EAP_SIM>
<android.telephony.TelephonyManager: int CALL_COMPOSER_STATUS_OFF>
<android.telephony.TelephonyManager: int CALL_COMPOSER_STATUS_ON>
<android.telephony.TelephonyManager: int CALL_STATE_IDLE>
<android.telephony.TelephonyManager: int CALL_STATE_OFFHOOK>
<android.telephony.TelephonyManager: int CALL_STATE_RINGING>
<android.telephony.TelephonyManager: java.lang.String CAPABILITY_SLICING_CONFIG_SUPPORTED>
<android.telephony.TelephonyManager: int CDMA_ROAMING_MODE_AFFILIATED>
<android.telephony.TelephonyManager: int CDMA_ROAMING_MODE_ANY>
<android.telephony.TelephonyManager: int CDMA_ROAMING_MODE_HOME>
<android.telephony.TelephonyManager: int CDMA_ROAMING_MODE_RADIO_DEFAULT>
<android.telephony.TelephonyManager: int DATA_ACTIVITY_DORMANT>
<android.telephony.TelephonyManager: int DATA_ACTIVITY_IN>
<android.telephony.TelephonyManager: int DATA_ACTIVITY_INOUT>
<android.telephony.TelephonyManager: int DATA_ACTIVITY_NONE>
<android.telephony.TelephonyManager: int DATA_ACTIVITY_OUT>
<android.telephony.TelephonyManager: int DATA_CONNECTED>
<android.telephony.TelephonyManager: int DATA_CONNECTING>
<android.telephony.TelephonyManager: int DATA_DISCONNECTED>
<android.telephony.TelephonyManager: int DATA_DISCONNECTING>
<android.telephony.TelephonyManager: int DATA_ENABLED_REASON_CARRIER>
<android.telephony.TelephonyManager: int DATA_ENABLED_REASON_OVERRIDE>
<android.telephony.TelephonyManager: int DATA_ENABLED_REASON_POLICY>
<android.telephony.TelephonyManager: int DATA_ENABLED_REASON_THERMAL>
<android.telephony.TelephonyManager: int DATA_ENABLED_REASON_UNKNOWN>
<android.telephony.TelephonyManager: int DATA_ENABLED_REASON_USER>
<android.telephony.TelephonyManager: int DATA_HANDOVER_IN_PROGRESS>
<android.telephony.TelephonyManager: int DATA_SUSPENDED>
<android.telephony.TelephonyManager: int DATA_UNKNOWN>
<android.telephony.TelephonyManager: int DEFAULT_PORT_INDEX>
<android.telephony.TelephonyManager: int ERI_FLASH>
<android.telephony.TelephonyManager: int ERI_OFF>
<android.telephony.TelephonyManager: int ERI_ON>
<android.telephony.TelephonyManager: java.lang.String EXTRA_ACTIVE_SIM_SUPPORTED_COUNT>
<android.telephony.TelephonyManager: java.lang.String EXTRA_APN_PROTOCOL>
<android.telephony.TelephonyManager: java.lang.String EXTRA_APN_TYPE>
<android.telephony.TelephonyManager: java.lang.String EXTRA_CALL_VOICEMAIL_INTENT>
<android.telephony.TelephonyManager: java.lang.String EXTRA_CARRIER_ID>
<android.telephony.TelephonyManager: java.lang.String EXTRA_CARRIER_NAME>
<android.telephony.TelephonyManager: java.lang.String EXTRA_DATA_FAIL_CAUSE>
<android.telephony.TelephonyManager: java.lang.String EXTRA_DEFAULT_NETWORK_AVAILABLE>
<android.telephony.TelephonyManager: java.lang.String EXTRA_HIDE_PUBLIC_SETTINGS>
<android.telephony.TelephonyManager: java.lang.String EXTRA_INCOMING_NUMBER>
<android.telephony.TelephonyManager: java.lang.String EXTRA_IS_REFRESH>
<android.telephony.TelephonyManager: java.lang.String EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT>
<android.telephony.TelephonyManager: java.lang.String EXTRA_NETWORK_COUNTRY>
<android.telephony.TelephonyManager: java.lang.String EXTRA_NOTIFICATION_COUNT>
<android.telephony.TelephonyManager: java.lang.String EXTRA_PCO_ID>
<android.telephony.TelephonyManager: java.lang.String EXTRA_PCO_VALUE>
<android.telephony.TelephonyManager: java.lang.String EXTRA_PHONE_ACCOUNT_HANDLE>
<android.telephony.TelephonyManager: java.lang.String EXTRA_REDIRECTION_URL>
<android.telephony.TelephonyManager: java.lang.String EXTRA_SPECIFIC_CARRIER_ID>
<android.telephony.TelephonyManager: java.lang.String EXTRA_SPECIFIC_CARRIER_NAME>
<android.telephony.TelephonyManager: java.lang.String EXTRA_STATE>
<android.telephony.TelephonyManager: java.lang.String EXTRA_STATE_IDLE>
<android.telephony.TelephonyManager: java.lang.String EXTRA_STATE_OFFHOOK>
<android.telephony.TelephonyManager: java.lang.String EXTRA_STATE_RINGING>
<android.telephony.TelephonyManager: java.lang.String EXTRA_SUBSCRIPTION_ID>
<android.telephony.TelephonyManager: java.lang.String EXTRA_VOICEMAIL_NUMBER>
<android.telephony.TelephonyManager: int INCLUDE_LOCATION_DATA_COARSE>
<android.telephony.TelephonyManager: int INCLUDE_LOCATION_DATA_FINE>
<android.telephony.TelephonyManager: int INCLUDE_LOCATION_DATA_NONE>
<android.telephony.TelephonyManager: java.lang.String METADATA_HIDE_VOICEMAIL_SETTINGS_MENU>
<android.telephony.TelephonyManager: int MULTISIM_ALLOWED>
<android.telephony.TelephonyManager: int MULTISIM_NOT_SUPPORTED_BY_CARRIER>
<android.telephony.TelephonyManager: int MULTISIM_NOT_SUPPORTED_BY_HARDWARE>
<android.telephony.TelephonyManager: int NETWORK_SELECTION_MODE_AUTO>
<android.telephony.TelephonyManager: int NETWORK_SELECTION_MODE_MANUAL>
<android.telephony.TelephonyManager: int NETWORK_SELECTION_MODE_UNKNOWN>
<android.telephony.TelephonyManager: int NETWORK_TYPE_1xRTT>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_1xRTT>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_CDMA>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_EDGE>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_EHRPD>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_EVDO_0>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_EVDO_A>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_EVDO_B>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_GPRS>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_GSM>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_HSDPA>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_HSPA>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_HSPAP>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_HSUPA>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_IWLAN>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_LTE>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_LTE_CA>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_NR>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_TD_SCDMA>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_UMTS>
<android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_UNKNOWN>
<android.telephony.TelephonyManager: int NETWORK_TYPE_CDMA>
<android.telephony.TelephonyManager: int NETWORK_TYPE_EDGE>
<android.telephony.TelephonyManager: int NETWORK_TYPE_EHRPD>
<android.telephony.TelephonyManager: int NETWORK_TYPE_EVDO_0>
<android.telephony.TelephonyManager: int NETWORK_TYPE_EVDO_A>
<android.telephony.TelephonyManager: int NETWORK_TYPE_EVDO_B>
<android.telephony.TelephonyManager: int NETWORK_TYPE_GPRS>
<android.telephony.TelephonyManager: int NETWORK_TYPE_GSM>
<android.telephony.TelephonyManager: int NETWORK_TYPE_HSDPA>
<android.telephony.TelephonyManager: int NETWORK_TYPE_HSPA>
<android.telephony.TelephonyManager: int NETWORK_TYPE_HSPAP>
<android.telephony.TelephonyManager: int NETWORK_TYPE_HSUPA>
<android.telephony.TelephonyManager: int NETWORK_TYPE_IDEN>
<android.telephony.TelephonyManager: int NETWORK_TYPE_IWLAN>
<android.telephony.TelephonyManager: int NETWORK_TYPE_LTE>
<android.telephony.TelephonyManager: int NETWORK_TYPE_NR>
<android.telephony.TelephonyManager: int NETWORK_TYPE_TD_SCDMA>
<android.telephony.TelephonyManager: int NETWORK_TYPE_UMTS>
<android.telephony.TelephonyManager: int NETWORK_TYPE_UNKNOWN>
<android.telephony.TelephonyManager: int PHONE_TYPE_CDMA>
<android.telephony.TelephonyManager: int PHONE_TYPE_GSM>
<android.telephony.TelephonyManager: int PHONE_TYPE_NONE>
<android.telephony.TelephonyManager: int PHONE_TYPE_SIP>
<android.telephony.TelephonyManager: int SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTION>
<android.telephony.TelephonyManager: int SET_OPPORTUNISTIC_SUB_NO_OPPORTUNISTIC_SUB_AVAILABLE>
<android.telephony.TelephonyManager: int SET_OPPORTUNISTIC_SUB_REMOTE_SERVICE_EXCEPTION>
<android.telephony.TelephonyManager: int SET_OPPORTUNISTIC_SUB_SUCCESS>
<android.telephony.TelephonyManager: int SET_OPPORTUNISTIC_SUB_VALIDATION_FAILED>
<android.telephony.TelephonyManager: int SIM_STATE_ABSENT>
<android.telephony.TelephonyManager: int SIM_STATE_CARD_IO_ERROR>
<android.telephony.TelephonyManager: int SIM_STATE_CARD_RESTRICTED>
<android.telephony.TelephonyManager: int SIM_STATE_NETWORK_LOCKED>
<android.telephony.TelephonyManager: int SIM_STATE_NOT_READY>
<android.telephony.TelephonyManager: int SIM_STATE_PERM_DISABLED>
<android.telephony.TelephonyManager: int SIM_STATE_PIN_REQUIRED>
<android.telephony.TelephonyManager: int SIM_STATE_PUK_REQUIRED>
<android.telephony.TelephonyManager: int SIM_STATE_READY>
<android.telephony.TelephonyManager: int SIM_STATE_UNKNOWN>
<android.telephony.TelephonyManager: int UNINITIALIZED_CARD_ID>
<android.telephony.TelephonyManager: int UNKNOWN_CARRIER_ID>
<android.telephony.TelephonyManager: int UNSUPPORTED_CARD_ID>
<android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_ABORTED>
<android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_DISABLE_MODEM_FAIL>
<android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_ENABLE_MODEM_FAIL>
<android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS>
<android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_MULTIPLE_NETWORKS_NOT_SUPPORTED>
<android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGE>
<android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_NO_OPPORTUNISTIC_SUB_AVAILABLE>
<android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_REMOTE_SERVICE_EXCEPTION>
<android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_SERVICE_IS_DISABLED>
<android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_SUCCESS>
<android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE>
<android.telephony.TelephonyManager: int USSD_ERROR_SERVICE_UNAVAIL>
<android.telephony.TelephonyManager: int USSD_RETURN_FAILURE>
<android.telephony.TelephonyManager: java.lang.String VVM_TYPE_CVVM>
<android.telephony.TelephonyManager: java.lang.String VVM_TYPE_OMTP>
android.telephony.TelephonyManager$CallComposerException
<android.telephony.TelephonyManager$CallComposerException: void <init>(int,java.io.IOException)>
<android.telephony.TelephonyManager$CallComposerException: int getErrorCode()>
<android.telephony.TelephonyManager$CallComposerException: java.io.IOException getIOException()>
<android.telephony.TelephonyManager$CallComposerException: int ERROR_AUTHENTICATION_FAILED>
<android.telephony.TelephonyManager$CallComposerException: int ERROR_FILE_TOO_LARGE>
<android.telephony.TelephonyManager$CallComposerException: int ERROR_INPUT_CLOSED>
<android.telephony.TelephonyManager$CallComposerException: int ERROR_IO_EXCEPTION>
<android.telephony.TelephonyManager$CallComposerException: int ERROR_NETWORK_UNAVAILABLE>
<android.telephony.TelephonyManager$CallComposerException: int ERROR_REMOTE_END_CLOSED>
<android.telephony.TelephonyManager$CallComposerException: int ERROR_UNKNOWN>
android.telephony.TelephonyManager$CellInfoCallback
<android.telephony.TelephonyManager$CellInfoCallback: void <init>()>
<android.telephony.TelephonyManager$CellInfoCallback: void onCellInfo(java.util.List)>
<android.telephony.TelephonyManager$CellInfoCallback: void onError(int,java.lang.Throwable)>
<android.telephony.TelephonyManager$CellInfoCallback: int ERROR_MODEM_ERROR>
<android.telephony.TelephonyManager$CellInfoCallback: int ERROR_TIMEOUT>
android.telephony.TelephonyManager$ModemErrorException
android.telephony.TelephonyManager$NetworkSlicingException
android.telephony.TelephonyManager$TimeoutException
android.telephony.TelephonyManager$UssdResponseCallback
<android.telephony.TelephonyManager$UssdResponseCallback: void <init>()>
<android.telephony.TelephonyManager$UssdResponseCallback: void onReceiveUssdResponse(android.telephony.TelephonyManager,java.lang.String,java.lang.CharSequence)>
<android.telephony.TelephonyManager$UssdResponseCallback: void onReceiveUssdResponseFailed(android.telephony.TelephonyManager,java.lang.String,int)>
android.telephony.TelephonyScanManager
<android.telephony.TelephonyScanManager: void <init>()>
android.telephony.TelephonyScanManager$NetworkScanCallback
<android.telephony.TelephonyScanManager$NetworkScanCallback: void <init>()>
<android.telephony.TelephonyScanManager$NetworkScanCallback: void onComplete()>
<android.telephony.TelephonyScanManager$NetworkScanCallback: void onError(int)>
<android.telephony.TelephonyScanManager$NetworkScanCallback: void onResults(java.util.List)>
android.telephony.UiccCardInfo
<android.telephony.UiccCardInfo: int describeContents()>
<android.telephony.UiccCardInfo: int getCardId()>
<android.telephony.UiccCardInfo: java.lang.String getEid()>
<android.telephony.UiccCardInfo: java.lang.String getIccId()>
<android.telephony.UiccCardInfo: int getPhysicalSlotIndex()>
<android.telephony.UiccCardInfo: java.util.Collection getPorts()>
<android.telephony.UiccCardInfo: int getSlotIndex()>
<android.telephony.UiccCardInfo: boolean isEuicc()>
<android.telephony.UiccCardInfo: boolean isMultipleEnabledProfilesSupported()>
<android.telephony.UiccCardInfo: boolean isRemovable()>
<android.telephony.UiccCardInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.UiccCardInfo: android.os.Parcelable$Creator CREATOR>
android.telephony.UiccPortInfo
<android.telephony.UiccPortInfo: int describeContents()>
<android.telephony.UiccPortInfo: java.lang.String getIccId()>
<android.telephony.UiccPortInfo: int getLogicalSlotIndex()>
<android.telephony.UiccPortInfo: int getPortIndex()>
<android.telephony.UiccPortInfo: boolean isActive()>
<android.telephony.UiccPortInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.UiccPortInfo: android.os.Parcelable$Creator CREATOR>
<android.telephony.UiccPortInfo: java.lang.String ICCID_REDACTED>
android.telephony.VisualVoicemailService
<android.telephony.VisualVoicemailService: void <init>()>
<android.telephony.VisualVoicemailService: android.os.IBinder onBind(android.content.Intent)>
<android.telephony.VisualVoicemailService: void onCellServiceConnected(android.telephony.VisualVoicemailService$VisualVoicemailTask,android.telecom.PhoneAccountHandle)>
<android.telephony.VisualVoicemailService: void onSimRemoved(android.telephony.VisualVoicemailService$VisualVoicemailTask,android.telecom.PhoneAccountHandle)>
<android.telephony.VisualVoicemailService: void onSmsReceived(android.telephony.VisualVoicemailService$VisualVoicemailTask,android.telephony.VisualVoicemailSms)>
<android.telephony.VisualVoicemailService: void onStopped(android.telephony.VisualVoicemailService$VisualVoicemailTask)>
<android.telephony.VisualVoicemailService: java.lang.String SERVICE_INTERFACE>
android.telephony.VisualVoicemailService$VisualVoicemailTask
<android.telephony.VisualVoicemailService$VisualVoicemailTask: void finish()>
android.telephony.VisualVoicemailSms
<android.telephony.VisualVoicemailSms: int describeContents()>
<android.telephony.VisualVoicemailSms: android.os.Bundle getFields()>
<android.telephony.VisualVoicemailSms: java.lang.String getMessageBody()>
<android.telephony.VisualVoicemailSms: android.telecom.PhoneAccountHandle getPhoneAccountHandle()>
<android.telephony.VisualVoicemailSms: java.lang.String getPrefix()>
<android.telephony.VisualVoicemailSms: void writeToParcel(android.os.Parcel,int)>
<android.telephony.VisualVoicemailSms: android.os.Parcelable$Creator CREATOR>
android.telephony.VisualVoicemailSmsFilterSettings
<android.telephony.VisualVoicemailSmsFilterSettings: int describeContents()>
<android.telephony.VisualVoicemailSmsFilterSettings: void writeToParcel(android.os.Parcel,int)>
<android.telephony.VisualVoicemailSmsFilterSettings: android.os.Parcelable$Creator CREATOR>
<android.telephony.VisualVoicemailSmsFilterSettings: int DESTINATION_PORT_ANY>
<android.telephony.VisualVoicemailSmsFilterSettings: int DESTINATION_PORT_DATA_SMS>
<android.telephony.VisualVoicemailSmsFilterSettings: java.lang.String clientPrefix>
<android.telephony.VisualVoicemailSmsFilterSettings: int destinationPort>
<android.telephony.VisualVoicemailSmsFilterSettings: java.util.List originatingNumbers>
android.telephony.VisualVoicemailSmsFilterSettings$Builder
<android.telephony.VisualVoicemailSmsFilterSettings$Builder: void <init>()>
<android.telephony.VisualVoicemailSmsFilterSettings$Builder: android.telephony.VisualVoicemailSmsFilterSettings build()>
<android.telephony.VisualVoicemailSmsFilterSettings$Builder: android.telephony.VisualVoicemailSmsFilterSettings$Builder setClientPrefix(java.lang.String)>
<android.telephony.VisualVoicemailSmsFilterSettings$Builder: android.telephony.VisualVoicemailSmsFilterSettings$Builder setDestinationPort(int)>
<android.telephony.VisualVoicemailSmsFilterSettings$Builder: android.telephony.VisualVoicemailSmsFilterSettings$Builder setOriginatingNumbers(java.util.List)>
android.telephony.cdma.CdmaCellLocation
<android.telephony.cdma.CdmaCellLocation: void <init>()>
<android.telephony.cdma.CdmaCellLocation: void <init>(android.os.Bundle)>
<android.telephony.cdma.CdmaCellLocation: double convertQuartSecToDecDegrees(int)>
<android.telephony.cdma.CdmaCellLocation: void fillInNotifierBundle(android.os.Bundle)>
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()>
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()>
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()>
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()>
<android.telephony.cdma.CdmaCellLocation: int getSystemId()>
<android.telephony.cdma.CdmaCellLocation: void setCellLocationData(int,int,int)>
<android.telephony.cdma.CdmaCellLocation: void setCellLocationData(int,int,int,int,int)>
<android.telephony.cdma.CdmaCellLocation: void setStateInvalid()>
android.telephony.data.ApnSetting
<android.telephony.data.ApnSetting: int describeContents()>
<android.telephony.data.ApnSetting: java.lang.String getApnName()>
<android.telephony.data.ApnSetting: int getApnTypeBitmask()>
<android.telephony.data.ApnSetting: int getAuthType()>
<android.telephony.data.ApnSetting: int getCarrierId()>
<android.telephony.data.ApnSetting: java.lang.String getEntryName()>
<android.telephony.data.ApnSetting: int getId()>
<android.telephony.data.ApnSetting: java.net.InetAddress getMmsProxyAddress()>
<android.telephony.data.ApnSetting: java.lang.String getMmsProxyAddressAsString()>
<android.telephony.data.ApnSetting: int getMmsProxyPort()>
<android.telephony.data.ApnSetting: android.net.Uri getMmsc()>
<android.telephony.data.ApnSetting: int getMtuV4()>
<android.telephony.data.ApnSetting: int getMtuV6()>
<android.telephony.data.ApnSetting: int getMvnoType()>
<android.telephony.data.ApnSetting: int getNetworkTypeBitmask()>
<android.telephony.data.ApnSetting: java.lang.String getOperatorNumeric()>
<android.telephony.data.ApnSetting: java.lang.String getPassword()>
<android.telephony.data.ApnSetting: int getProfileId()>
<android.telephony.data.ApnSetting: int getProtocol()>
<android.telephony.data.ApnSetting: java.net.InetAddress getProxyAddress()>
<android.telephony.data.ApnSetting: java.lang.String getProxyAddressAsString()>
<android.telephony.data.ApnSetting: int getProxyPort()>
<android.telephony.data.ApnSetting: int getRoamingProtocol()>
<android.telephony.data.ApnSetting: java.lang.String getUser()>
<android.telephony.data.ApnSetting: boolean isEnabled()>
<android.telephony.data.ApnSetting: boolean isPersistent()>
<android.telephony.data.ApnSetting: void writeToParcel(android.os.Parcel,int)>
<android.telephony.data.ApnSetting: int AUTH_TYPE_CHAP>
<android.telephony.data.ApnSetting: int AUTH_TYPE_NONE>
<android.telephony.data.ApnSetting: int AUTH_TYPE_PAP>
<android.telephony.data.ApnSetting: int AUTH_TYPE_PAP_OR_CHAP>
<android.telephony.data.ApnSetting: android.os.Parcelable$Creator CREATOR>
<android.telephony.data.ApnSetting: int MVNO_TYPE_GID>
<android.telephony.data.ApnSetting: int MVNO_TYPE_ICCID>
<android.telephony.data.ApnSetting: int MVNO_TYPE_IMSI>
<android.telephony.data.ApnSetting: int MVNO_TYPE_SPN>
<android.telephony.data.ApnSetting: int PROTOCOL_IP>
<android.telephony.data.ApnSetting: int PROTOCOL_IPV4V6>
<android.telephony.data.ApnSetting: int PROTOCOL_IPV6>
<android.telephony.data.ApnSetting: int PROTOCOL_NON_IP>
<android.telephony.data.ApnSetting: int PROTOCOL_PPP>
<android.telephony.data.ApnSetting: int PROTOCOL_UNSTRUCTURED>
<android.telephony.data.ApnSetting: int TYPE_BIP>
<android.telephony.data.ApnSetting: int TYPE_CBS>
<android.telephony.data.ApnSetting: int TYPE_DEFAULT>
<android.telephony.data.ApnSetting: int TYPE_DUN>
<android.telephony.data.ApnSetting: int TYPE_EMERGENCY>
<android.telephony.data.ApnSetting: int TYPE_ENTERPRISE>
<android.telephony.data.ApnSetting: int TYPE_FOTA>
<android.telephony.data.ApnSetting: int TYPE_HIPRI>
<android.telephony.data.ApnSetting: int TYPE_IA>
<android.telephony.data.ApnSetting: int TYPE_IMS>
<android.telephony.data.ApnSetting: int TYPE_MCX>
<android.telephony.data.ApnSetting: int TYPE_MMS>
<android.telephony.data.ApnSetting: int TYPE_SUPL>
<android.telephony.data.ApnSetting: int TYPE_VSIM>
<android.telephony.data.ApnSetting: int TYPE_XCAP>
android.telephony.data.ApnSetting$Builder
<android.telephony.data.ApnSetting$Builder: void <init>()>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting build()>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setApnName(java.lang.String)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setApnTypeBitmask(int)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setAuthType(int)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setCarrierEnabled(boolean)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setCarrierId(int)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setEntryName(java.lang.String)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMmsProxyAddress(java.net.InetAddress)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMmsProxyAddress(java.lang.String)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMmsProxyPort(int)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMmsc(android.net.Uri)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMtuV4(int)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMtuV6(int)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMvnoType(int)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setNetworkTypeBitmask(int)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setOperatorNumeric(java.lang.String)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setPassword(java.lang.String)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setPersistent(boolean)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setProfileId(int)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setProtocol(int)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setProxyAddress(java.net.InetAddress)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setProxyAddress(java.lang.String)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setProxyPort(int)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setRoamingProtocol(int)>
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setUser(java.lang.String)>
android.telephony.data.NetworkSliceInfo
<android.telephony.data.NetworkSliceInfo: int describeContents()>
<android.telephony.data.NetworkSliceInfo: int getMappedHplmnSliceDifferentiator()>
<android.telephony.data.NetworkSliceInfo: int getMappedHplmnSliceServiceType()>
<android.telephony.data.NetworkSliceInfo: int getSliceDifferentiator()>
<android.telephony.data.NetworkSliceInfo: int getSliceServiceType()>
<android.telephony.data.NetworkSliceInfo: int getStatus()>
<android.telephony.data.NetworkSliceInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.data.NetworkSliceInfo: android.os.Parcelable$Creator CREATOR>
<android.telephony.data.NetworkSliceInfo: int SLICE_DIFFERENTIATOR_NO_SLICE>
<android.telephony.data.NetworkSliceInfo: int SLICE_SERVICE_TYPE_EMBB>
<android.telephony.data.NetworkSliceInfo: int SLICE_SERVICE_TYPE_MIOT>
<android.telephony.data.NetworkSliceInfo: int SLICE_SERVICE_TYPE_NONE>
<android.telephony.data.NetworkSliceInfo: int SLICE_SERVICE_TYPE_URLLC>
<android.telephony.data.NetworkSliceInfo: int SLICE_STATUS_ALLOWED>
<android.telephony.data.NetworkSliceInfo: int SLICE_STATUS_CONFIGURED>
<android.telephony.data.NetworkSliceInfo: int SLICE_STATUS_DEFAULT_CONFIGURED>
<android.telephony.data.NetworkSliceInfo: int SLICE_STATUS_REJECTED_NOT_AVAILABLE_IN_PLMN>
<android.telephony.data.NetworkSliceInfo: int SLICE_STATUS_REJECTED_NOT_AVAILABLE_IN_REGISTERED_AREA>
<android.telephony.data.NetworkSliceInfo: int SLICE_STATUS_UNKNOWN>
android.telephony.data.NetworkSliceInfo$Builder
<android.telephony.data.NetworkSliceInfo$Builder: void <init>()>
<android.telephony.data.NetworkSliceInfo$Builder: android.telephony.data.NetworkSliceInfo build()>
<android.telephony.data.NetworkSliceInfo$Builder: android.telephony.data.NetworkSliceInfo$Builder setMappedHplmnSliceDifferentiator(int)>
<android.telephony.data.NetworkSliceInfo$Builder: android.telephony.data.NetworkSliceInfo$Builder setMappedHplmnSliceServiceType(int)>
<android.telephony.data.NetworkSliceInfo$Builder: android.telephony.data.NetworkSliceInfo$Builder setSliceDifferentiator(int)>
<android.telephony.data.NetworkSliceInfo$Builder: android.telephony.data.NetworkSliceInfo$Builder setSliceServiceType(int)>
<android.telephony.data.NetworkSliceInfo$Builder: android.telephony.data.NetworkSliceInfo$Builder setStatus(int)>
android.telephony.data.NetworkSlicingConfig
<android.telephony.data.NetworkSlicingConfig: void <init>()>
<android.telephony.data.NetworkSlicingConfig: int describeContents()>
<android.telephony.data.NetworkSlicingConfig: java.util.List getSliceInfo()>
<android.telephony.data.NetworkSlicingConfig: java.util.List getUrspRules()>
<android.telephony.data.NetworkSlicingConfig: void writeToParcel(android.os.Parcel,int)>
<android.telephony.data.NetworkSlicingConfig: android.os.Parcelable$Creator CREATOR>
android.telephony.data.RouteSelectionDescriptor
<android.telephony.data.RouteSelectionDescriptor: int describeContents()>
<android.telephony.data.RouteSelectionDescriptor: java.util.List getDataNetworkName()>
<android.telephony.data.RouteSelectionDescriptor: int getPrecedence()>
<android.telephony.data.RouteSelectionDescriptor: int getSessionType()>
<android.telephony.data.RouteSelectionDescriptor: java.util.List getSliceInfo()>
<android.telephony.data.RouteSelectionDescriptor: int getSscMode()>
<android.telephony.data.RouteSelectionDescriptor: void writeToParcel(android.os.Parcel,int)>
<android.telephony.data.RouteSelectionDescriptor: android.os.Parcelable$Creator CREATOR>
<android.telephony.data.RouteSelectionDescriptor: int ROUTE_SSC_MODE_1>
<android.telephony.data.RouteSelectionDescriptor: int ROUTE_SSC_MODE_2>
<android.telephony.data.RouteSelectionDescriptor: int ROUTE_SSC_MODE_3>
<android.telephony.data.RouteSelectionDescriptor: int SESSION_TYPE_IPV4>
<android.telephony.data.RouteSelectionDescriptor: int SESSION_TYPE_IPV4V6>
<android.telephony.data.RouteSelectionDescriptor: int SESSION_TYPE_IPV6>
android.telephony.data.TrafficDescriptor
<android.telephony.data.TrafficDescriptor: int describeContents()>
<android.telephony.data.TrafficDescriptor: java.lang.String getDataNetworkName()>
<android.telephony.data.TrafficDescriptor: byte[] getOsAppId()>
<android.telephony.data.TrafficDescriptor: void writeToParcel(android.os.Parcel,int)>
<android.telephony.data.TrafficDescriptor: android.os.Parcelable$Creator CREATOR>
android.telephony.data.TrafficDescriptor$Builder
<android.telephony.data.TrafficDescriptor$Builder: void <init>()>
<android.telephony.data.TrafficDescriptor$Builder: android.telephony.data.TrafficDescriptor build()>
<android.telephony.data.TrafficDescriptor$Builder: android.telephony.data.TrafficDescriptor$Builder setDataNetworkName(java.lang.String)>
<android.telephony.data.TrafficDescriptor$Builder: android.telephony.data.TrafficDescriptor$Builder setOsAppId(byte[])>
android.telephony.data.UrspRule
<android.telephony.data.UrspRule: int describeContents()>
<android.telephony.data.UrspRule: int getPrecedence()>
<android.telephony.data.UrspRule: java.util.List getRouteSelectionDescriptor()>
<android.telephony.data.UrspRule: java.util.List getTrafficDescriptors()>
<android.telephony.data.UrspRule: void writeToParcel(android.os.Parcel,int)>
<android.telephony.data.UrspRule: android.os.Parcelable$Creator CREATOR>
android.telephony.emergency.EmergencyNumber
<android.telephony.emergency.EmergencyNumber: int compareTo(android.telephony.emergency.EmergencyNumber)>
<android.telephony.emergency.EmergencyNumber: int describeContents()>
<android.telephony.emergency.EmergencyNumber: java.lang.String getCountryIso()>
<android.telephony.emergency.EmergencyNumber: int getEmergencyCallRouting()>
<android.telephony.emergency.EmergencyNumber: java.util.List getEmergencyNumberSources()>
<android.telephony.emergency.EmergencyNumber: java.util.List getEmergencyServiceCategories()>
<android.telephony.emergency.EmergencyNumber: java.util.List getEmergencyUrns()>
<android.telephony.emergency.EmergencyNumber: java.lang.String getMnc()>
<android.telephony.emergency.EmergencyNumber: java.lang.String getNumber()>
<android.telephony.emergency.EmergencyNumber: boolean isFromSources(int)>
<android.telephony.emergency.EmergencyNumber: boolean isInEmergencyServiceCategories(int)>
<android.telephony.emergency.EmergencyNumber: void writeToParcel(android.os.Parcel,int)>
<android.telephony.emergency.EmergencyNumber: android.os.Parcelable$Creator CREATOR>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_CALL_ROUTING_EMERGENCY>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_CALL_ROUTING_NORMAL>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_CALL_ROUTING_UNKNOWN>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_NUMBER_SOURCE_DATABASE>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_NUMBER_SOURCE_DEFAULT>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_NUMBER_SOURCE_MODEM_CONFIG>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_NUMBER_SOURCE_NETWORK_SIGNALING>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_NUMBER_SOURCE_SIM>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_SERVICE_CATEGORY_AIEC>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_SERVICE_CATEGORY_AMBULANCE>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_SERVICE_CATEGORY_FIRE_BRIGADE>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_SERVICE_CATEGORY_MARINE_GUARD>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_SERVICE_CATEGORY_MIEC>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_SERVICE_CATEGORY_MOUNTAIN_RESCUE>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_SERVICE_CATEGORY_POLICE>
<android.telephony.emergency.EmergencyNumber: int EMERGENCY_SERVICE_CATEGORY_UNSPECIFIED>
android.telephony.euicc.DownloadableSubscription
<android.telephony.euicc.DownloadableSubscription: int describeContents()>
<android.telephony.euicc.DownloadableSubscription: android.telephony.euicc.DownloadableSubscription forActivationCode(java.lang.String)>
<android.telephony.euicc.DownloadableSubscription: java.lang.String getConfirmationCode()>
<android.telephony.euicc.DownloadableSubscription: java.lang.String getEncodedActivationCode()>
<android.telephony.euicc.DownloadableSubscription: void writeToParcel(android.os.Parcel,int)>
<android.telephony.euicc.DownloadableSubscription: android.os.Parcelable$Creator CREATOR>
android.telephony.euicc.DownloadableSubscription$Builder
<android.telephony.euicc.DownloadableSubscription$Builder: void <init>(android.telephony.euicc.DownloadableSubscription)>
<android.telephony.euicc.DownloadableSubscription$Builder: void <init>(java.lang.String)>
<android.telephony.euicc.DownloadableSubscription$Builder: android.telephony.euicc.DownloadableSubscription build()>
<android.telephony.euicc.DownloadableSubscription$Builder: android.telephony.euicc.DownloadableSubscription$Builder setConfirmationCode(java.lang.String)>
<android.telephony.euicc.DownloadableSubscription$Builder: android.telephony.euicc.DownloadableSubscription$Builder setEncodedActivationCode(java.lang.String)>
android.telephony.euicc.EuiccInfo
<android.telephony.euicc.EuiccInfo: void <init>(java.lang.String)>
<android.telephony.euicc.EuiccInfo: int describeContents()>
<android.telephony.euicc.EuiccInfo: java.lang.String getOsVersion()>
<android.telephony.euicc.EuiccInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.euicc.EuiccInfo: android.os.Parcelable$Creator CREATOR>
android.telephony.euicc.EuiccManager
<android.telephony.euicc.EuiccManager: android.telephony.euicc.EuiccManager createForCardId(int)>
<android.telephony.euicc.EuiccManager: void deleteSubscription(int,android.app.PendingIntent)>
<android.telephony.euicc.EuiccManager: void downloadSubscription(android.telephony.euicc.DownloadableSubscription,boolean,android.app.PendingIntent)>
<android.telephony.euicc.EuiccManager: java.lang.String getEid()>
<android.telephony.euicc.EuiccManager: android.telephony.euicc.EuiccInfo getEuiccInfo()>
<android.telephony.euicc.EuiccManager: boolean isEnabled()>
<android.telephony.euicc.EuiccManager: boolean isSimPortAvailable(int)>
<android.telephony.euicc.EuiccManager: void startResolutionActivity(android.app.Activity,int,android.content.Intent,android.app.PendingIntent)>
<android.telephony.euicc.EuiccManager: void switchToSubscription(int,android.app.PendingIntent)>
<android.telephony.euicc.EuiccManager: void switchToSubscription(int,int,android.app.PendingIntent)>
<android.telephony.euicc.EuiccManager: void updateSubscriptionNickname(int,java.lang.String,android.app.PendingIntent)>
<android.telephony.euicc.EuiccManager: java.lang.String ACTION_MANAGE_EMBEDDED_SUBSCRIPTIONS>
<android.telephony.euicc.EuiccManager: java.lang.String ACTION_NOTIFY_CARRIER_SETUP_INCOMPLETE>
<android.telephony.euicc.EuiccManager: java.lang.String ACTION_START_EUICC_ACTIVATION>
<android.telephony.euicc.EuiccManager: int EMBEDDED_SUBSCRIPTION_RESULT_ERROR>
<android.telephony.euicc.EuiccManager: int EMBEDDED_SUBSCRIPTION_RESULT_OK>
<android.telephony.euicc.EuiccManager: int EMBEDDED_SUBSCRIPTION_RESULT_RESOLVABLE_ERROR>
<android.telephony.euicc.EuiccManager: int ERROR_ADDRESS_MISSING>
<android.telephony.euicc.EuiccManager: int ERROR_CARRIER_LOCKED>
<android.telephony.euicc.EuiccManager: int ERROR_CERTIFICATE_ERROR>
<android.telephony.euicc.EuiccManager: int ERROR_CONNECTION_ERROR>
<android.telephony.euicc.EuiccManager: int ERROR_DISALLOWED_BY_PPR>
<android.telephony.euicc.EuiccManager: int ERROR_EUICC_INSUFFICIENT_MEMORY>
<android.telephony.euicc.EuiccManager: int ERROR_EUICC_MISSING>
<android.telephony.euicc.EuiccManager: int ERROR_INCOMPATIBLE_CARRIER>
<android.telephony.euicc.EuiccManager: int ERROR_INSTALL_PROFILE>
<android.telephony.euicc.EuiccManager: int ERROR_INVALID_ACTIVATION_CODE>
<android.telephony.euicc.EuiccManager: int ERROR_INVALID_CONFIRMATION_CODE>
<android.telephony.euicc.EuiccManager: int ERROR_INVALID_PORT>
<android.telephony.euicc.EuiccManager: int ERROR_INVALID_RESPONSE>
<android.telephony.euicc.EuiccManager: int ERROR_NO_PROFILES_AVAILABLE>
<android.telephony.euicc.EuiccManager: int ERROR_OPERATION_BUSY>
<android.telephony.euicc.EuiccManager: int ERROR_SIM_MISSING>
<android.telephony.euicc.EuiccManager: int ERROR_TIME_OUT>
<android.telephony.euicc.EuiccManager: int ERROR_UNSUPPORTED_VERSION>
<android.telephony.euicc.EuiccManager: java.lang.String EXTRA_EMBEDDED_SUBSCRIPTION_DETAILED_CODE>
<android.telephony.euicc.EuiccManager: java.lang.String EXTRA_EMBEDDED_SUBSCRIPTION_DOWNLOADABLE_SUBSCRIPTION>
<android.telephony.euicc.EuiccManager: java.lang.String EXTRA_EMBEDDED_SUBSCRIPTION_ERROR_CODE>
<android.telephony.euicc.EuiccManager: java.lang.String EXTRA_EMBEDDED_SUBSCRIPTION_OPERATION_CODE>
<android.telephony.euicc.EuiccManager: java.lang.String EXTRA_EMBEDDED_SUBSCRIPTION_SMDX_REASON_CODE>
<android.telephony.euicc.EuiccManager: java.lang.String EXTRA_EMBEDDED_SUBSCRIPTION_SMDX_SUBJECT_CODE>
<android.telephony.euicc.EuiccManager: java.lang.String EXTRA_USE_QR_SCANNER>
<android.telephony.euicc.EuiccManager: java.lang.String META_DATA_CARRIER_ICON>
<android.telephony.euicc.EuiccManager: int OPERATION_APDU>
<android.telephony.euicc.EuiccManager: int OPERATION_DOWNLOAD>
<android.telephony.euicc.EuiccManager: int OPERATION_EUICC_CARD>
<android.telephony.euicc.EuiccManager: int OPERATION_EUICC_GSMA>
<android.telephony.euicc.EuiccManager: int OPERATION_HTTP>
<android.telephony.euicc.EuiccManager: int OPERATION_METADATA>
<android.telephony.euicc.EuiccManager: int OPERATION_SIM_SLOT>
<android.telephony.euicc.EuiccManager: int OPERATION_SMDX>
<android.telephony.euicc.EuiccManager: int OPERATION_SMDX_SUBJECT_REASON_CODE>
<android.telephony.euicc.EuiccManager: int OPERATION_SWITCH>
<android.telephony.euicc.EuiccManager: int OPERATION_SYSTEM>
android.telephony.gsm.GsmCellLocation
<android.telephony.gsm.GsmCellLocation: void <init>()>
<android.telephony.gsm.GsmCellLocation: void <init>(android.os.Bundle)>
<android.telephony.gsm.GsmCellLocation: void fillInNotifierBundle(android.os.Bundle)>
<android.telephony.gsm.GsmCellLocation: int getCid()>
<android.telephony.gsm.GsmCellLocation: int getLac()>
<android.telephony.gsm.GsmCellLocation: int getPsc()>
<android.telephony.gsm.GsmCellLocation: void setLacAndCid(int,int)>
<android.telephony.gsm.GsmCellLocation: void setStateInvalid()>
android.telephony.gsm.SmsManager
<android.telephony.gsm.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()>
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.gsm.SmsManager: int RESULT_ERROR_GENERIC_FAILURE>
<android.telephony.gsm.SmsManager: int RESULT_ERROR_NO_SERVICE>
<android.telephony.gsm.SmsManager: int RESULT_ERROR_NULL_PDU>
<android.telephony.gsm.SmsManager: int RESULT_ERROR_RADIO_OFF>
<android.telephony.gsm.SmsManager: int STATUS_ON_SIM_FREE>
<android.telephony.gsm.SmsManager: int STATUS_ON_SIM_READ>
<android.telephony.gsm.SmsManager: int STATUS_ON_SIM_SENT>
<android.telephony.gsm.SmsManager: int STATUS_ON_SIM_UNREAD>
<android.telephony.gsm.SmsManager: int STATUS_ON_SIM_UNSENT>
android.telephony.gsm.SmsMessage
<android.telephony.gsm.SmsMessage: void <init>()>
<android.telephony.gsm.SmsMessage: int[] calculateLength(java.lang.CharSequence,boolean)>
<android.telephony.gsm.SmsMessage: int[] calculateLength(java.lang.String,boolean)>
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage createFromPdu(byte[])>
<android.telephony.gsm.SmsMessage: java.lang.String getDisplayMessageBody()>
<android.telephony.gsm.SmsMessage: java.lang.String getDisplayOriginatingAddress()>
<android.telephony.gsm.SmsMessage: java.lang.String getEmailBody()>
<android.telephony.gsm.SmsMessage: java.lang.String getEmailFrom()>
<android.telephony.gsm.SmsMessage: int getIndexOnSim()>
<android.telephony.gsm.SmsMessage: java.lang.String getMessageBody()>
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage$MessageClass getMessageClass()>
<android.telephony.gsm.SmsMessage: java.lang.String getOriginatingAddress()>
<android.telephony.gsm.SmsMessage: byte[] getPdu()>
<android.telephony.gsm.SmsMessage: int getProtocolIdentifier()>
<android.telephony.gsm.SmsMessage: java.lang.String getPseudoSubject()>
<android.telephony.gsm.SmsMessage: java.lang.String getServiceCenterAddress()>
<android.telephony.gsm.SmsMessage: int getStatus()>
<android.telephony.gsm.SmsMessage: int getStatusOnSim()>
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,short,byte[],boolean)>
<android.telephony.gsm.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>
<android.telephony.gsm.SmsMessage: long getTimestampMillis()>
<android.telephony.gsm.SmsMessage: byte[] getUserData()>
<android.telephony.gsm.SmsMessage: boolean isCphsMwiMessage()>
<android.telephony.gsm.SmsMessage: boolean isEmail()>
<android.telephony.gsm.SmsMessage: boolean isMWIClearMessage()>
<android.telephony.gsm.SmsMessage: boolean isMWISetMessage()>
<android.telephony.gsm.SmsMessage: boolean isMwiDontStore()>
<android.telephony.gsm.SmsMessage: boolean isReplace()>
<android.telephony.gsm.SmsMessage: boolean isReplyPathPresent()>
<android.telephony.gsm.SmsMessage: boolean isStatusReportMessage()>
<android.telephony.gsm.SmsMessage: int ENCODING_16BIT>
<android.telephony.gsm.SmsMessage: int ENCODING_7BIT>
<android.telephony.gsm.SmsMessage: int ENCODING_8BIT>
<android.telephony.gsm.SmsMessage: int ENCODING_UNKNOWN>
<android.telephony.gsm.SmsMessage: int MAX_USER_DATA_BYTES>
<android.telephony.gsm.SmsMessage: int MAX_USER_DATA_SEPTETS>
<android.telephony.gsm.SmsMessage: int MAX_USER_DATA_SEPTETS_WITH_HEADER>
android.telephony.gsm.SmsMessage$MessageClass
<android.telephony.gsm.SmsMessage$MessageClass: android.telephony.gsm.SmsMessage$MessageClass CLASS_0>
<android.telephony.gsm.SmsMessage$MessageClass: android.telephony.gsm.SmsMessage$MessageClass CLASS_1>
<android.telephony.gsm.SmsMessage$MessageClass: android.telephony.gsm.SmsMessage$MessageClass CLASS_2>
<android.telephony.gsm.SmsMessage$MessageClass: android.telephony.gsm.SmsMessage$MessageClass CLASS_3>
<android.telephony.gsm.SmsMessage$MessageClass: android.telephony.gsm.SmsMessage$MessageClass UNKNOWN>
android.telephony.gsm.SmsMessage$SubmitPdu
<android.telephony.gsm.SmsMessage$SubmitPdu: void <init>()>
<android.telephony.gsm.SmsMessage$SubmitPdu: byte[] encodedMessage>
<android.telephony.gsm.SmsMessage$SubmitPdu: byte[] encodedScAddress>
android.telephony.ims.ImsException
<android.telephony.ims.ImsException: int getCode()>
<android.telephony.ims.ImsException: int CODE_ERROR_INVALID_SUBSCRIPTION>
<android.telephony.ims.ImsException: int CODE_ERROR_SERVICE_UNAVAILABLE>
<android.telephony.ims.ImsException: int CODE_ERROR_UNSPECIFIED>
<android.telephony.ims.ImsException: int CODE_ERROR_UNSUPPORTED_OPERATION>
android.telephony.ims.ImsManager
<android.telephony.ims.ImsManager: android.telephony.ims.ImsMmTelManager getImsMmTelManager(int)>
<android.telephony.ims.ImsManager: android.telephony.ims.ImsRcsManager getImsRcsManager(int)>
<android.telephony.ims.ImsManager: android.telephony.ims.ProvisioningManager getProvisioningManager(int)>
<android.telephony.ims.ImsManager: java.lang.String ACTION_WFC_IMS_REGISTRATION_ERROR>
<android.telephony.ims.ImsManager: java.lang.String EXTRA_WFC_REGISTRATION_FAILURE_MESSAGE>
<android.telephony.ims.ImsManager: java.lang.String EXTRA_WFC_REGISTRATION_FAILURE_TITLE>
android.telephony.ims.ImsMmTelManager
<android.telephony.ims.ImsMmTelManager: void getRegistrationState(java.util.concurrent.Executor,java.util.function.Consumer)>
<android.telephony.ims.ImsMmTelManager: void getRegistrationTransportType(java.util.concurrent.Executor,java.util.function.Consumer)>
<android.telephony.ims.ImsMmTelManager: int getVoWiFiModeSetting()>
<android.telephony.ims.ImsMmTelManager: boolean isAdvancedCallingSettingEnabled()>
<android.telephony.ims.ImsMmTelManager: boolean isCrossSimCallingEnabled()>
<android.telephony.ims.ImsMmTelManager: boolean isTtyOverVolteEnabled()>
<android.telephony.ims.ImsMmTelManager: boolean isVoWiFiRoamingSettingEnabled()>
<android.telephony.ims.ImsMmTelManager: boolean isVoWiFiSettingEnabled()>
<android.telephony.ims.ImsMmTelManager: boolean isVtSettingEnabled()>
<android.telephony.ims.ImsMmTelManager: void registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.RegistrationManager$RegistrationCallback)>
<android.telephony.ims.ImsMmTelManager: void registerImsStateCallback(java.util.concurrent.Executor,android.telephony.ims.ImsStateCallback)>
<android.telephony.ims.ImsMmTelManager: void registerMmTelCapabilityCallback(java.util.concurrent.Executor,android.telephony.ims.ImsMmTelManager$CapabilityCallback)>
<android.telephony.ims.ImsMmTelManager: void unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback)>
<android.telephony.ims.ImsMmTelManager: void unregisterImsStateCallback(android.telephony.ims.ImsStateCallback)>
<android.telephony.ims.ImsMmTelManager: void unregisterMmTelCapabilityCallback(android.telephony.ims.ImsMmTelManager$CapabilityCallback)>
<android.telephony.ims.ImsMmTelManager: int WIFI_MODE_CELLULAR_PREFERRED>
<android.telephony.ims.ImsMmTelManager: int WIFI_MODE_WIFI_ONLY>
<android.telephony.ims.ImsMmTelManager: int WIFI_MODE_WIFI_PREFERRED>
android.telephony.ims.ImsMmTelManager$CapabilityCallback
<android.telephony.ims.ImsMmTelManager$CapabilityCallback: void <init>()>
<android.telephony.ims.ImsMmTelManager$CapabilityCallback: void onCapabilitiesStatusChanged(android.telephony.ims.feature.MmTelFeature$MmTelCapabilities)>
android.telephony.ims.ImsRcsManager
<android.telephony.ims.ImsRcsManager: void getRegistrationState(java.util.concurrent.Executor,java.util.function.Consumer)>
<android.telephony.ims.ImsRcsManager: void getRegistrationTransportType(java.util.concurrent.Executor,java.util.function.Consumer)>
<android.telephony.ims.ImsRcsManager: android.telephony.ims.RcsUceAdapter getUceAdapter()>
<android.telephony.ims.ImsRcsManager: void registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.RegistrationManager$RegistrationCallback)>
<android.telephony.ims.ImsRcsManager: void registerImsStateCallback(java.util.concurrent.Executor,android.telephony.ims.ImsStateCallback)>
<android.telephony.ims.ImsRcsManager: void unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback)>
<android.telephony.ims.ImsRcsManager: void unregisterImsStateCallback(android.telephony.ims.ImsStateCallback)>
<android.telephony.ims.ImsRcsManager: java.lang.String ACTION_SHOW_CAPABILITY_DISCOVERY_OPT_IN>
<android.telephony.ims.ImsRcsManager: int CAPABILITY_TYPE_NONE>
<android.telephony.ims.ImsRcsManager: int CAPABILITY_TYPE_OPTIONS_UCE>
<android.telephony.ims.ImsRcsManager: int CAPABILITY_TYPE_PRESENCE_UCE>
android.telephony.ims.ImsReasonInfo
<android.telephony.ims.ImsReasonInfo: void <init>(int,int,java.lang.String)>
<android.telephony.ims.ImsReasonInfo: int describeContents()>
<android.telephony.ims.ImsReasonInfo: int getCode()>
<android.telephony.ims.ImsReasonInfo: int getExtraCode()>
<android.telephony.ims.ImsReasonInfo: java.lang.String getExtraMessage()>
<android.telephony.ims.ImsReasonInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ims.ImsReasonInfo: int CODE_ACCESS_CLASS_BLOCKED>
<android.telephony.ims.ImsReasonInfo: int CODE_ANSWERED_ELSEWHERE>
<android.telephony.ims.ImsReasonInfo: int CODE_BLACKLISTED_CALL_ID>
<android.telephony.ims.ImsReasonInfo: int CODE_CALL_BARRED>
<android.telephony.ims.ImsReasonInfo: int CODE_CALL_DROP_IWLAN_TO_LTE_UNAVAILABLE>
<android.telephony.ims.ImsReasonInfo: int CODE_CALL_END_CAUSE_CALL_PULL>
<android.telephony.ims.ImsReasonInfo: int CODE_CALL_PULL_OUT_OF_SYNC>
<android.telephony.ims.ImsReasonInfo: int CODE_DATA_DISABLED>
<android.telephony.ims.ImsReasonInfo: int CODE_DATA_LIMIT_REACHED>
<android.telephony.ims.ImsReasonInfo: int CODE_DIAL_MODIFIED_TO_DIAL>
<android.telephony.ims.ImsReasonInfo: int CODE_DIAL_MODIFIED_TO_DIAL_VIDEO>
<android.telephony.ims.ImsReasonInfo: int CODE_DIAL_MODIFIED_TO_SS>
<android.telephony.ims.ImsReasonInfo: int CODE_DIAL_MODIFIED_TO_USSD>
<android.telephony.ims.ImsReasonInfo: int CODE_DIAL_VIDEO_MODIFIED_TO_DIAL>
<android.telephony.ims.ImsReasonInfo: int CODE_DIAL_VIDEO_MODIFIED_TO_DIAL_VIDEO>
<android.telephony.ims.ImsReasonInfo: int CODE_DIAL_VIDEO_MODIFIED_TO_SS>
<android.telephony.ims.ImsReasonInfo: int CODE_DIAL_VIDEO_MODIFIED_TO_USSD>
<android.telephony.ims.ImsReasonInfo: int CODE_ECBM_NOT_SUPPORTED>
<android.telephony.ims.ImsReasonInfo: int CODE_EMERGENCY_PERM_FAILURE>
<android.telephony.ims.ImsReasonInfo: int CODE_EMERGENCY_TEMP_FAILURE>
<android.telephony.ims.ImsReasonInfo: int CODE_EPDG_TUNNEL_ESTABLISH_FAILURE>
<android.telephony.ims.ImsReasonInfo: int CODE_EPDG_TUNNEL_LOST_CONNECTION>
<android.telephony.ims.ImsReasonInfo: int CODE_EPDG_TUNNEL_REKEY_FAILURE>
<android.telephony.ims.ImsReasonInfo: int CODE_FDN_BLOCKED>
<android.telephony.ims.ImsReasonInfo: int CODE_IKEV2_AUTH_FAILURE>
<android.telephony.ims.ImsReasonInfo: int CODE_IMEI_NOT_ACCEPTED>
<android.telephony.ims.ImsReasonInfo: int CODE_IWLAN_DPD_FAILURE>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_CALL_BUSY>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_CALL_CS_RETRY_REQUIRED>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_CALL_DECLINE>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_CALL_EXCEEDED>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_CALL_RESOURCE_RESERVATION_FAILED>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_CALL_TERMINATED>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_CALL_VCC_ON_PROGRESSING>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_CALL_VOLTE_RETRY_REQUIRED>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_ENDED_BY_CONFERENCE_MERGE>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_HO_NOT_FEASIBLE>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_ILLEGAL_ARGUMENT>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_ILLEGAL_STATE>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_IMS_SERVICE_DOWN>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_INTERNAL_ERROR>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_LOW_BATTERY>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_NETWORK_IP_CHANGED>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_NETWORK_NO_LTE_COVERAGE>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_NETWORK_NO_SERVICE>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_NETWORK_ROAMING>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_NOT_REGISTERED>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_NO_PENDING_CALL>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_POWER_OFF>
<android.telephony.ims.ImsReasonInfo: int CODE_LOCAL_SERVICE_UNAVAILABLE>
<android.telephony.ims.ImsReasonInfo: int CODE_LOW_BATTERY>
<android.telephony.ims.ImsReasonInfo: int CODE_MAXIMUM_NUMBER_OF_CALLS_REACHED>
<android.telephony.ims.ImsReasonInfo: int CODE_MEDIA_INIT_FAILED>
<android.telephony.ims.ImsReasonInfo: int CODE_MEDIA_NOT_ACCEPTABLE>
<android.telephony.ims.ImsReasonInfo: int CODE_MEDIA_NO_DATA>
<android.telephony.ims.ImsReasonInfo: int CODE_MEDIA_UNSPECIFIED>
<android.telephony.ims.ImsReasonInfo: int CODE_MULTIENDPOINT_NOT_SUPPORTED>
<android.telephony.ims.ImsReasonInfo: int CODE_NETWORK_CONGESTION>
<android.telephony.ims.ImsReasonInfo: int CODE_NETWORK_DETACH>
<android.telephony.ims.ImsReasonInfo: int CODE_NETWORK_REJECT>
<android.telephony.ims.ImsReasonInfo: int CODE_NETWORK_RESP_TIMEOUT>
<android.telephony.ims.ImsReasonInfo: int CODE_NO_CSFB_IN_CS_ROAM>
<android.telephony.ims.ImsReasonInfo: int CODE_NO_VALID_SIM>
<android.telephony.ims.ImsReasonInfo: int CODE_OEM_CAUSE_1>
<android.telephony.ims.ImsReasonInfo: int CODE_OEM_CAUSE_10>
<android.telephony.ims.ImsReasonInfo: int CODE_OEM_CAUSE_11>
<android.telephony.ims.ImsReasonInfo: int CODE_OEM_CAUSE_12>
<android.telephony.ims.ImsReasonInfo: int CODE_OEM_CAUSE_13>
<android.telephony.ims.ImsReasonInfo: int CODE_OEM_CAUSE_14>
<android.telephony.ims.ImsReasonInfo: int CODE_OEM_CAUSE_15>
<android.telephony.ims.ImsReasonInfo: int CODE_OEM_CAUSE_2>
<android.telephony.ims.ImsReasonInfo: int CODE_OEM_CAUSE_3>
<android.telephony.ims.ImsReasonInfo: int CODE_OEM_CAUSE_4>
<android.telephony.ims.ImsReasonInfo: int CODE_OEM_CAUSE_5>
<android.telephony.ims.ImsReasonInfo: int CODE_OEM_CAUSE_6>
<android.telephony.ims.ImsReasonInfo: int CODE_OEM_CAUSE_7>
<android.telephony.ims.ImsReasonInfo: int CODE_OEM_CAUSE_8>
<android.telephony.ims.ImsReasonInfo: int CODE_OEM_CAUSE_9>
<android.telephony.ims.ImsReasonInfo: int CODE_RADIO_ACCESS_FAILURE>
<android.telephony.ims.ImsReasonInfo: int CODE_RADIO_INTERNAL_ERROR>
<android.telephony.ims.ImsReasonInfo: int CODE_RADIO_LINK_FAILURE>
<android.telephony.ims.ImsReasonInfo: int CODE_RADIO_LINK_LOST>
<android.telephony.ims.ImsReasonInfo: int CODE_RADIO_OFF>
<android.telephony.ims.ImsReasonInfo: int CODE_RADIO_RELEASE_ABNORMAL>
<android.telephony.ims.ImsReasonInfo: int CODE_RADIO_RELEASE_NORMAL>
<android.telephony.ims.ImsReasonInfo: int CODE_RADIO_SETUP_FAILURE>
<android.telephony.ims.ImsReasonInfo: int CODE_RADIO_UPLINK_FAILURE>
<android.telephony.ims.ImsReasonInfo: int CODE_REGISTRATION_ERROR>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECTED_ELSEWHERE>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_1X_COLLISION>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_CALL_ON_OTHER_SUB>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_CALL_TYPE_NOT_ALLOWED>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_CONFERENCE_TTY_NOT_ALLOWED>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_INTERNAL_ERROR>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_MAX_CALL_LIMIT_REACHED>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_ONGOING_CALL_SETUP>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_ONGOING_CALL_TRANSFER>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_ONGOING_CALL_UPGRADE>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_ONGOING_CALL_WAITING_DISABLED>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_ONGOING_CONFERENCE_CALL>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_ONGOING_CS_CALL>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_ONGOING_E911_CALL>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_ONGOING_ENCRYPTED_CALL>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_ONGOING_HANDOVER>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_QOS_FAILURE>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_SERVICE_NOT_REGISTERED>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_UNKNOWN>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_UNSUPPORTED_SDP_HEADERS>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_UNSUPPORTED_SIP_HEADERS>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_VT_AVPF_NOT_ALLOWED>
<android.telephony.ims.ImsReasonInfo: int CODE_REJECT_VT_TTY_NOT_ALLOWED>
<android.telephony.ims.ImsReasonInfo: int CODE_REMOTE_CALL_DECLINE>
<android.telephony.ims.ImsReasonInfo: int CODE_SESSION_MODIFICATION_FAILED>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_ALTERNATE_EMERGENCY_CALL>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_AMBIGUOUS>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_BAD_ADDRESS>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_BAD_REQUEST>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_BUSY>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_CALL_OR_TRANS_DOES_NOT_EXIST>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_CLIENT_ERROR>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_EXTENSION_REQUIRED>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_FORBIDDEN>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_GLOBAL_ERROR>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_INTERVAL_TOO_BRIEF>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_LOOP_DETECTED>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_METHOD_NOT_ALLOWED>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_NOT_ACCEPTABLE>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_NOT_FOUND>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_NOT_REACHABLE>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_NOT_SUPPORTED>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_PROXY_AUTHENTICATION_REQUIRED>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_REDIRECTED>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_REQUEST_CANCELLED>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_REQUEST_ENTITY_TOO_LARGE>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_REQUEST_PENDING>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_REQUEST_TIMEOUT>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_REQUEST_URI_TOO_LARGE>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_SERVER_ERROR>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_SERVER_INTERNAL_ERROR>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_SERVER_TIMEOUT>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_SERVICE_UNAVAILABLE>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_TEMPRARILY_UNAVAILABLE>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_TOO_MANY_HOPS>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_TRANSACTION_DOES_NOT_EXIST>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_UNDECIPHERABLE>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_USER_MARKED_UNWANTED>
<android.telephony.ims.ImsReasonInfo: int CODE_SIP_USER_REJECTED>
<android.telephony.ims.ImsReasonInfo: int CODE_SUPP_SVC_CANCELLED>
<android.telephony.ims.ImsReasonInfo: int CODE_SUPP_SVC_FAILED>
<android.telephony.ims.ImsReasonInfo: int CODE_SUPP_SVC_REINVITE_COLLISION>
<android.telephony.ims.ImsReasonInfo: int CODE_TIMEOUT_1XX_WAITING>
<android.telephony.ims.ImsReasonInfo: int CODE_TIMEOUT_NO_ANSWER>
<android.telephony.ims.ImsReasonInfo: int CODE_TIMEOUT_NO_ANSWER_CALL_UPDATE>
<android.telephony.ims.ImsReasonInfo: int CODE_UNSPECIFIED>
<android.telephony.ims.ImsReasonInfo: int CODE_USER_CANCELLED_SESSION_MODIFICATION>
<android.telephony.ims.ImsReasonInfo: int CODE_USER_DECLINE>
<android.telephony.ims.ImsReasonInfo: int CODE_USER_IGNORE>
<android.telephony.ims.ImsReasonInfo: int CODE_USER_NOANSWER>
<android.telephony.ims.ImsReasonInfo: int CODE_USER_REJECTED_SESSION_MODIFICATION>
<android.telephony.ims.ImsReasonInfo: int CODE_USER_TERMINATED>
<android.telephony.ims.ImsReasonInfo: int CODE_USER_TERMINATED_BY_REMOTE>
<android.telephony.ims.ImsReasonInfo: int CODE_UT_CB_PASSWORD_MISMATCH>
<android.telephony.ims.ImsReasonInfo: int CODE_UT_NETWORK_ERROR>
<android.telephony.ims.ImsReasonInfo: int CODE_UT_NOT_SUPPORTED>
<android.telephony.ims.ImsReasonInfo: int CODE_UT_OPERATION_NOT_ALLOWED>
<android.telephony.ims.ImsReasonInfo: int CODE_UT_SERVICE_UNAVAILABLE>
<android.telephony.ims.ImsReasonInfo: int CODE_UT_SS_MODIFIED_TO_DIAL>
<android.telephony.ims.ImsReasonInfo: int CODE_UT_SS_MODIFIED_TO_DIAL_VIDEO>
<android.telephony.ims.ImsReasonInfo: int CODE_UT_SS_MODIFIED_TO_SS>
<android.telephony.ims.ImsReasonInfo: int CODE_UT_SS_MODIFIED_TO_USSD>
<android.telephony.ims.ImsReasonInfo: int CODE_WIFI_LOST>
<android.telephony.ims.ImsReasonInfo: android.os.Parcelable$Creator CREATOR>
<android.telephony.ims.ImsReasonInfo: int EXTRA_CODE_CALL_RETRY_BY_SETTINGS>
<android.telephony.ims.ImsReasonInfo: int EXTRA_CODE_CALL_RETRY_EMERGENCY>
<android.telephony.ims.ImsReasonInfo: int EXTRA_CODE_CALL_RETRY_NORMAL>
<android.telephony.ims.ImsReasonInfo: int EXTRA_CODE_CALL_RETRY_SILENT_REDIAL>
android.telephony.ims.ImsRegistrationAttributes
<android.telephony.ims.ImsRegistrationAttributes: int describeContents()>
<android.telephony.ims.ImsRegistrationAttributes: int getAttributeFlags()>
<android.telephony.ims.ImsRegistrationAttributes: java.util.Set getFeatureTags()>
<android.telephony.ims.ImsRegistrationAttributes: int getTransportType()>
<android.telephony.ims.ImsRegistrationAttributes: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ims.ImsRegistrationAttributes: int ATTR_EPDG_OVER_CELL_INTERNET>
<android.telephony.ims.ImsRegistrationAttributes: android.os.Parcelable$Creator CREATOR>
android.telephony.ims.ImsStateCallback
<android.telephony.ims.ImsStateCallback: void <init>()>
<android.telephony.ims.ImsStateCallback: void onAvailable()>
<android.telephony.ims.ImsStateCallback: void onError()>
<android.telephony.ims.ImsStateCallback: void onUnavailable(int)>
<android.telephony.ims.ImsStateCallback: int REASON_IMS_SERVICE_DISCONNECTED>
<android.telephony.ims.ImsStateCallback: int REASON_IMS_SERVICE_NOT_READY>
<android.telephony.ims.ImsStateCallback: int REASON_NO_IMS_SERVICE_CONFIGURED>
<android.telephony.ims.ImsStateCallback: int REASON_SUBSCRIPTION_INACTIVE>
<android.telephony.ims.ImsStateCallback: int REASON_UNKNOWN_PERMANENT_ERROR>
<android.telephony.ims.ImsStateCallback: int REASON_UNKNOWN_TEMPORARY_ERROR>
android.telephony.ims.ProvisioningManager
<android.telephony.ims.ProvisioningManager: boolean getProvisioningStatusForCapability(int,int)>
<android.telephony.ims.ProvisioningManager: boolean getRcsProvisioningStatusForCapability(int,int)>
<android.telephony.ims.ProvisioningManager: boolean isProvisioningRequiredForCapability(int,int)>
<android.telephony.ims.ProvisioningManager: boolean isRcsProvisioningRequiredForCapability(int,int)>
<android.telephony.ims.ProvisioningManager: void registerFeatureProvisioningChangedCallback(java.util.concurrent.Executor,android.telephony.ims.ProvisioningManager$FeatureProvisioningCallback)>
<android.telephony.ims.ProvisioningManager: void setProvisioningStatusForCapability(int,int,boolean)>
<android.telephony.ims.ProvisioningManager: void setRcsProvisioningStatusForCapability(int,int,boolean)>
<android.telephony.ims.ProvisioningManager: void unregisterFeatureProvisioningChangedCallback(android.telephony.ims.ProvisioningManager$FeatureProvisioningCallback)>
android.telephony.ims.ProvisioningManager$FeatureProvisioningCallback
<android.telephony.ims.ProvisioningManager$FeatureProvisioningCallback: void <init>()>
<android.telephony.ims.ProvisioningManager$FeatureProvisioningCallback: void onFeatureProvisioningChanged(int,int,boolean)>
<android.telephony.ims.ProvisioningManager$FeatureProvisioningCallback: void onRcsFeatureProvisioningChanged(int,int,boolean)>
android.telephony.ims.RcsUceAdapter
<android.telephony.ims.RcsUceAdapter: boolean isUceSettingEnabled()>
android.telephony.ims.RegistrationManager
<android.telephony.ims.RegistrationManager: void getRegistrationState(java.util.concurrent.Executor,java.util.function.Consumer)>
<android.telephony.ims.RegistrationManager: void getRegistrationTransportType(java.util.concurrent.Executor,java.util.function.Consumer)>
<android.telephony.ims.RegistrationManager: void registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.RegistrationManager$RegistrationCallback)>
<android.telephony.ims.RegistrationManager: void unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback)>
<android.telephony.ims.RegistrationManager: int REGISTRATION_STATE_NOT_REGISTERED>
<android.telephony.ims.RegistrationManager: int REGISTRATION_STATE_REGISTERED>
<android.telephony.ims.RegistrationManager: int REGISTRATION_STATE_REGISTERING>
android.telephony.ims.RegistrationManager$RegistrationCallback
<android.telephony.ims.RegistrationManager$RegistrationCallback: void <init>()>
<android.telephony.ims.RegistrationManager$RegistrationCallback: void onRegistered(int)>
<android.telephony.ims.RegistrationManager$RegistrationCallback: void onRegistered(android.telephony.ims.ImsRegistrationAttributes)>
<android.telephony.ims.RegistrationManager$RegistrationCallback: void onRegistering(int)>
<android.telephony.ims.RegistrationManager$RegistrationCallback: void onRegistering(android.telephony.ims.ImsRegistrationAttributes)>
<android.telephony.ims.RegistrationManager$RegistrationCallback: void onTechnologyChangeFailed(int,android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.RegistrationManager$RegistrationCallback: void onUnregistered(android.telephony.ims.ImsReasonInfo)>
android.telephony.ims.feature.MmTelFeature
android.telephony.ims.feature.MmTelFeature$MmTelCapabilities
<android.telephony.ims.feature.MmTelFeature$MmTelCapabilities: boolean isCapable(int)>
<android.telephony.ims.feature.MmTelFeature$MmTelCapabilities: int CAPABILITY_TYPE_CALL_COMPOSER>
<android.telephony.ims.feature.MmTelFeature$MmTelCapabilities: int CAPABILITY_TYPE_SMS>
<android.telephony.ims.feature.MmTelFeature$MmTelCapabilities: int CAPABILITY_TYPE_UT>
<android.telephony.ims.feature.MmTelFeature$MmTelCapabilities: int CAPABILITY_TYPE_VIDEO>
<android.telephony.ims.feature.MmTelFeature$MmTelCapabilities: int CAPABILITY_TYPE_VOICE>
android.telephony.ims.stub.ImsRegistrationImplBase
<android.telephony.ims.stub.ImsRegistrationImplBase: int REGISTRATION_TECH_CROSS_SIM>
<android.telephony.ims.stub.ImsRegistrationImplBase: int REGISTRATION_TECH_IWLAN>
<android.telephony.ims.stub.ImsRegistrationImplBase: int REGISTRATION_TECH_LTE>
<android.telephony.ims.stub.ImsRegistrationImplBase: int REGISTRATION_TECH_NONE>
<android.telephony.ims.stub.ImsRegistrationImplBase: int REGISTRATION_TECH_NR>
android.telephony.mbms.DownloadProgressListener
<android.telephony.mbms.DownloadProgressListener: void <init>()>
<android.telephony.mbms.DownloadProgressListener: void onProgressUpdated(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo,int,int,int,int)>
android.telephony.mbms.DownloadRequest
<android.telephony.mbms.DownloadRequest: int describeContents()>
<android.telephony.mbms.DownloadRequest: android.net.Uri getDestinationUri()>
<android.telephony.mbms.DownloadRequest: java.lang.String getFileServiceId()>
<android.telephony.mbms.DownloadRequest: int getMaxAppIntentSize()>
<android.telephony.mbms.DownloadRequest: int getMaxDestinationUriSize()>
<android.telephony.mbms.DownloadRequest: android.net.Uri getSourceUri()>
<android.telephony.mbms.DownloadRequest: int getSubscriptionId()>
<android.telephony.mbms.DownloadRequest: byte[] toByteArray()>
<android.telephony.mbms.DownloadRequest: void writeToParcel(android.os.Parcel,int)>
<android.telephony.mbms.DownloadRequest: android.os.Parcelable$Creator CREATOR>
android.telephony.mbms.DownloadRequest$Builder
<android.telephony.mbms.DownloadRequest$Builder: void <init>(android.net.Uri,android.net.Uri)>
<android.telephony.mbms.DownloadRequest$Builder: android.telephony.mbms.DownloadRequest build()>
<android.telephony.mbms.DownloadRequest$Builder: android.telephony.mbms.DownloadRequest$Builder fromDownloadRequest(android.telephony.mbms.DownloadRequest)>
<android.telephony.mbms.DownloadRequest$Builder: android.telephony.mbms.DownloadRequest$Builder fromSerializedRequest(byte[])>
<android.telephony.mbms.DownloadRequest$Builder: android.telephony.mbms.DownloadRequest$Builder setAppIntent(android.content.Intent)>
<android.telephony.mbms.DownloadRequest$Builder: android.telephony.mbms.DownloadRequest$Builder setServiceInfo(android.telephony.mbms.FileServiceInfo)>
<android.telephony.mbms.DownloadRequest$Builder: android.telephony.mbms.DownloadRequest$Builder setSubscriptionId(int)>
android.telephony.mbms.DownloadStatusListener
<android.telephony.mbms.DownloadStatusListener: void <init>()>
<android.telephony.mbms.DownloadStatusListener: void onStatusUpdated(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo,int)>
android.telephony.mbms.FileInfo
<android.telephony.mbms.FileInfo: int describeContents()>
<android.telephony.mbms.FileInfo: java.lang.String getMimeType()>
<android.telephony.mbms.FileInfo: android.net.Uri getUri()>
<android.telephony.mbms.FileInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.mbms.FileInfo: android.os.Parcelable$Creator CREATOR>
android.telephony.mbms.FileServiceInfo
<android.telephony.mbms.FileServiceInfo: int describeContents()>
<android.telephony.mbms.FileServiceInfo: java.util.List getFiles()>
<android.telephony.mbms.FileServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.mbms.FileServiceInfo: android.os.Parcelable$Creator CREATOR>
android.telephony.mbms.GroupCall
<android.telephony.mbms.GroupCall: void close()>
<android.telephony.mbms.GroupCall: long getTmgi()>
<android.telephony.mbms.GroupCall: void updateGroupCall(java.util.List,java.util.List)>
<android.telephony.mbms.GroupCall: int REASON_BY_USER_REQUEST>
<android.telephony.mbms.GroupCall: int REASON_FREQUENCY_CONFLICT>
<android.telephony.mbms.GroupCall: int REASON_LEFT_MBMS_BROADCAST_AREA>
<android.telephony.mbms.GroupCall: int REASON_NONE>
<android.telephony.mbms.GroupCall: int REASON_NOT_CONNECTED_TO_HOMECARRIER_LTE>
<android.telephony.mbms.GroupCall: int REASON_OUT_OF_MEMORY>
<android.telephony.mbms.GroupCall: int STATE_STALLED>
<android.telephony.mbms.GroupCall: int STATE_STARTED>
<android.telephony.mbms.GroupCall: int STATE_STOPPED>
android.telephony.mbms.GroupCallCallback
<android.telephony.mbms.GroupCallCallback: void onBroadcastSignalStrengthUpdated(int)>
<android.telephony.mbms.GroupCallCallback: void onError(int,java.lang.String)>
<android.telephony.mbms.GroupCallCallback: void onGroupCallStateChanged(int,int)>
<android.telephony.mbms.GroupCallCallback: int SIGNAL_STRENGTH_UNAVAILABLE>
android.telephony.mbms.MbmsDownloadReceiver
<android.telephony.mbms.MbmsDownloadReceiver: void <init>()>
<android.telephony.mbms.MbmsDownloadReceiver: void onReceive(android.content.Context,android.content.Intent)>
android.telephony.mbms.MbmsDownloadSessionCallback
<android.telephony.mbms.MbmsDownloadSessionCallback: void <init>()>
<android.telephony.mbms.MbmsDownloadSessionCallback: void onError(int,java.lang.String)>
<android.telephony.mbms.MbmsDownloadSessionCallback: void onFileServicesUpdated(java.util.List)>
<android.telephony.mbms.MbmsDownloadSessionCallback: void onMiddlewareReady()>
android.telephony.mbms.MbmsErrors
<android.telephony.mbms.MbmsErrors: int ERROR_MIDDLEWARE_LOST>
<android.telephony.mbms.MbmsErrors: int ERROR_MIDDLEWARE_NOT_BOUND>
<android.telephony.mbms.MbmsErrors: int ERROR_NO_UNIQUE_MIDDLEWARE>
<android.telephony.mbms.MbmsErrors: int SUCCESS>
<android.telephony.mbms.MbmsErrors: int UNKNOWN>
android.telephony.mbms.MbmsErrors$DownloadErrors
<android.telephony.mbms.MbmsErrors$DownloadErrors: int ERROR_CANNOT_CHANGE_TEMP_FILE_ROOT>
<android.telephony.mbms.MbmsErrors$DownloadErrors: int ERROR_MALFORMED_SERVICE_ANNOUNCEMENT>
<android.telephony.mbms.MbmsErrors$DownloadErrors: int ERROR_UNKNOWN_DOWNLOAD_REQUEST>
<android.telephony.mbms.MbmsErrors$DownloadErrors: int ERROR_UNKNOWN_FILE_INFO>
android.telephony.mbms.MbmsErrors$GeneralErrors
<android.telephony.mbms.MbmsErrors$GeneralErrors: int ERROR_CARRIER_CHANGE_NOT_ALLOWED>
<android.telephony.mbms.MbmsErrors$GeneralErrors: int ERROR_IN_E911>
<android.telephony.mbms.MbmsErrors$GeneralErrors: int ERROR_MIDDLEWARE_NOT_YET_READY>
<android.telephony.mbms.MbmsErrors$GeneralErrors: int ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLE>
<android.telephony.mbms.MbmsErrors$GeneralErrors: int ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTE>
<android.telephony.mbms.MbmsErrors$GeneralErrors: int ERROR_OUT_OF_MEMORY>
<android.telephony.mbms.MbmsErrors$GeneralErrors: int ERROR_UNABLE_TO_READ_SIM>
android.telephony.mbms.MbmsErrors$GroupCallErrors
<android.telephony.mbms.MbmsErrors$GroupCallErrors: int ERROR_DUPLICATE_START_GROUP_CALL>
<android.telephony.mbms.MbmsErrors$GroupCallErrors: int ERROR_UNABLE_TO_START_SERVICE>
android.telephony.mbms.MbmsErrors$InitializationErrors
<android.telephony.mbms.MbmsErrors$InitializationErrors: int ERROR_APP_PERMISSIONS_NOT_GRANTED>
<android.telephony.mbms.MbmsErrors$InitializationErrors: int ERROR_DUPLICATE_INITIALIZE>
<android.telephony.mbms.MbmsErrors$InitializationErrors: int ERROR_UNABLE_TO_INITIALIZE>
android.telephony.mbms.MbmsErrors$StreamingErrors
<android.telephony.mbms.MbmsErrors$StreamingErrors: int ERROR_CONCURRENT_SERVICE_LIMIT_REACHED>
<android.telephony.mbms.MbmsErrors$StreamingErrors: int ERROR_DUPLICATE_START_STREAM>
<android.telephony.mbms.MbmsErrors$StreamingErrors: int ERROR_UNABLE_TO_START_SERVICE>
android.telephony.mbms.MbmsGroupCallSessionCallback
<android.telephony.mbms.MbmsGroupCallSessionCallback: void onAvailableSaisUpdated(java.util.List,java.util.List)>
<android.telephony.mbms.MbmsGroupCallSessionCallback: void onError(int,java.lang.String)>
<android.telephony.mbms.MbmsGroupCallSessionCallback: void onMiddlewareReady()>
<android.telephony.mbms.MbmsGroupCallSessionCallback: void onServiceInterfaceAvailable(java.lang.String,int)>
android.telephony.mbms.MbmsStreamingSessionCallback
<android.telephony.mbms.MbmsStreamingSessionCallback: void <init>()>
<android.telephony.mbms.MbmsStreamingSessionCallback: void onError(int,java.lang.String)>
<android.telephony.mbms.MbmsStreamingSessionCallback: void onMiddlewareReady()>
<android.telephony.mbms.MbmsStreamingSessionCallback: void onStreamingServicesUpdated(java.util.List)>
android.telephony.mbms.ServiceInfo
<android.telephony.mbms.ServiceInfo: java.util.List getLocales()>
<android.telephony.mbms.ServiceInfo: java.lang.CharSequence getNameForLocale(java.util.Locale)>
<android.telephony.mbms.ServiceInfo: java.util.Set getNamedContentLocales()>
<android.telephony.mbms.ServiceInfo: java.lang.String getServiceClassName()>
<android.telephony.mbms.ServiceInfo: java.lang.String getServiceId()>
<android.telephony.mbms.ServiceInfo: java.util.Date getSessionEndTime()>
<android.telephony.mbms.ServiceInfo: java.util.Date getSessionStartTime()>
android.telephony.mbms.StreamingService
<android.telephony.mbms.StreamingService: void close()>
<android.telephony.mbms.StreamingService: android.telephony.mbms.StreamingServiceInfo getInfo()>
<android.telephony.mbms.StreamingService: android.net.Uri getPlaybackUri()>
<android.telephony.mbms.StreamingService: int BROADCAST_METHOD>
<android.telephony.mbms.StreamingService: int REASON_BY_USER_REQUEST>
<android.telephony.mbms.StreamingService: int REASON_END_OF_SESSION>
<android.telephony.mbms.StreamingService: int REASON_FREQUENCY_CONFLICT>
<android.telephony.mbms.StreamingService: int REASON_LEFT_MBMS_BROADCAST_AREA>
<android.telephony.mbms.StreamingService: int REASON_NONE>
<android.telephony.mbms.StreamingService: int REASON_NOT_CONNECTED_TO_HOMECARRIER_LTE>
<android.telephony.mbms.StreamingService: int REASON_OUT_OF_MEMORY>
<android.telephony.mbms.StreamingService: int STATE_STALLED>
<android.telephony.mbms.StreamingService: int STATE_STARTED>
<android.telephony.mbms.StreamingService: int STATE_STOPPED>
<android.telephony.mbms.StreamingService: int UNICAST_METHOD>
android.telephony.mbms.StreamingServiceCallback
<android.telephony.mbms.StreamingServiceCallback: void <init>()>
<android.telephony.mbms.StreamingServiceCallback: void onBroadcastSignalStrengthUpdated(int)>
<android.telephony.mbms.StreamingServiceCallback: void onError(int,java.lang.String)>
<android.telephony.mbms.StreamingServiceCallback: void onMediaDescriptionUpdated()>
<android.telephony.mbms.StreamingServiceCallback: void onStreamMethodUpdated(int)>
<android.telephony.mbms.StreamingServiceCallback: void onStreamStateUpdated(int,int)>
<android.telephony.mbms.StreamingServiceCallback: int SIGNAL_STRENGTH_UNAVAILABLE>
android.telephony.mbms.StreamingServiceInfo
<android.telephony.mbms.StreamingServiceInfo: int describeContents()>
<android.telephony.mbms.StreamingServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.telephony.mbms.StreamingServiceInfo: android.os.Parcelable$Creator CREATOR>
android.text.AlteredCharSequence
<android.text.AlteredCharSequence: char charAt(int)>
<android.text.AlteredCharSequence: void getChars(int,int,char[],int)>
<android.text.AlteredCharSequence: int length()>
<android.text.AlteredCharSequence: android.text.AlteredCharSequence make(java.lang.CharSequence,char[],int,int)>
<android.text.AlteredCharSequence: java.lang.CharSequence subSequence(int,int)>
android.text.AndroidCharacter
<android.text.AndroidCharacter: void <init>()>
<android.text.AndroidCharacter: void getDirectionalities(char[],byte[],int)>
<android.text.AndroidCharacter: int getEastAsianWidth(char)>
<android.text.AndroidCharacter: void getEastAsianWidths(char[],int,int,byte[])>
<android.text.AndroidCharacter: char getMirror(char)>
<android.text.AndroidCharacter: boolean mirror(char[],int,int)>
<android.text.AndroidCharacter: int EAST_ASIAN_WIDTH_AMBIGUOUS>
<android.text.AndroidCharacter: int EAST_ASIAN_WIDTH_FULL_WIDTH>
<android.text.AndroidCharacter: int EAST_ASIAN_WIDTH_HALF_WIDTH>
<android.text.AndroidCharacter: int EAST_ASIAN_WIDTH_NARROW>
<android.text.AndroidCharacter: int EAST_ASIAN_WIDTH_NEUTRAL>
<android.text.AndroidCharacter: int EAST_ASIAN_WIDTH_WIDE>
android.text.Annotation
<android.text.Annotation: void <init>(java.lang.String,java.lang.String)>
<android.text.Annotation: void <init>(android.os.Parcel)>
<android.text.Annotation: int describeContents()>
<android.text.Annotation: java.lang.String getKey()>
<android.text.Annotation: int getSpanTypeId()>
<android.text.Annotation: java.lang.String getValue()>
<android.text.Annotation: void writeToParcel(android.os.Parcel,int)>
android.text.AutoText
<android.text.AutoText: java.lang.String get(java.lang.CharSequence,int,int,android.view.View)>
<android.text.AutoText: int getSize(android.view.View)>
android.text.BidiFormatter
<android.text.BidiFormatter: android.text.BidiFormatter getInstance()>
<android.text.BidiFormatter: android.text.BidiFormatter getInstance(boolean)>
<android.text.BidiFormatter: android.text.BidiFormatter getInstance(java.util.Locale)>
<android.text.BidiFormatter: boolean getStereoReset()>
<android.text.BidiFormatter: boolean isRtl(java.lang.String)>
<android.text.BidiFormatter: boolean isRtl(java.lang.CharSequence)>
<android.text.BidiFormatter: boolean isRtlContext()>
<android.text.BidiFormatter: java.lang.String unicodeWrap(java.lang.String,android.text.TextDirectionHeuristic,boolean)>
<android.text.BidiFormatter: java.lang.CharSequence unicodeWrap(java.lang.CharSequence,android.text.TextDirectionHeuristic,boolean)>
<android.text.BidiFormatter: java.lang.String unicodeWrap(java.lang.String,android.text.TextDirectionHeuristic)>
<android.text.BidiFormatter: java.lang.CharSequence unicodeWrap(java.lang.CharSequence,android.text.TextDirectionHeuristic)>
<android.text.BidiFormatter: java.lang.String unicodeWrap(java.lang.String,boolean)>
<android.text.BidiFormatter: java.lang.CharSequence unicodeWrap(java.lang.CharSequence,boolean)>
<android.text.BidiFormatter: java.lang.String unicodeWrap(java.lang.String)>
<android.text.BidiFormatter: java.lang.CharSequence unicodeWrap(java.lang.CharSequence)>
android.text.BidiFormatter$Builder
<android.text.BidiFormatter$Builder: void <init>()>
<android.text.BidiFormatter$Builder: void <init>(boolean)>
<android.text.BidiFormatter$Builder: void <init>(java.util.Locale)>
<android.text.BidiFormatter$Builder: android.text.BidiFormatter build()>
<android.text.BidiFormatter$Builder: android.text.BidiFormatter$Builder setTextDirectionHeuristic(android.text.TextDirectionHeuristic)>
<android.text.BidiFormatter$Builder: android.text.BidiFormatter$Builder stereoReset(boolean)>
android.text.BoringLayout
<android.text.BoringLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean)>
<android.text.BoringLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)>
<android.text.BoringLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int,boolean)>
<android.text.BoringLayout: void ellipsized(int,int)>
<android.text.BoringLayout: int getBottomPadding()>
<android.text.BoringLayout: int getEllipsisCount(int)>
<android.text.BoringLayout: int getEllipsisStart(int)>
<android.text.BoringLayout: boolean getLineContainsTab(int)>
<android.text.BoringLayout: int getLineCount()>
<android.text.BoringLayout: int getLineDescent(int)>
<android.text.BoringLayout: android.text.Layout$Directions getLineDirections(int)>
<android.text.BoringLayout: int getLineStart(int)>
<android.text.BoringLayout: int getLineTop(int)>
<android.text.BoringLayout: int getParagraphDirection(int)>
<android.text.BoringLayout: int getTopPadding()>
<android.text.BoringLayout: android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint)>
<android.text.BoringLayout: android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.BoringLayout$Metrics)>
<android.text.BoringLayout: android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.TextDirectionHeuristic,boolean,android.text.BoringLayout$Metrics)>
<android.text.BoringLayout: android.text.BoringLayout make(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean)>
<android.text.BoringLayout: android.text.BoringLayout make(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)>
<android.text.BoringLayout: android.text.BoringLayout make(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int,boolean)>
<android.text.BoringLayout: android.text.BoringLayout replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean)>
<android.text.BoringLayout: android.text.BoringLayout replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int,boolean)>
<android.text.BoringLayout: android.text.BoringLayout replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)>
android.text.BoringLayout$Metrics
<android.text.BoringLayout$Metrics: void <init>()>
<android.text.BoringLayout$Metrics: int width>
android.text.ClipboardManager
<android.text.ClipboardManager: void <init>()>
<android.text.ClipboardManager: java.lang.CharSequence getText()>
<android.text.ClipboardManager: boolean hasText()>
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>
android.text.DynamicLayout
<android.text.DynamicLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean)>
<android.text.DynamicLayout: void <init>(java.lang.CharSequence,java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean)>
<android.text.DynamicLayout: void <init>(java.lang.CharSequence,java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean,android.text.TextUtils$TruncateAt,int)>
<android.text.DynamicLayout: int getBottomPadding()>
<android.text.DynamicLayout: int getEllipsisCount(int)>
<android.text.DynamicLayout: int getEllipsisStart(int)>
<android.text.DynamicLayout: boolean getLineContainsTab(int)>
<android.text.DynamicLayout: int getLineCount()>
<android.text.DynamicLayout: int getLineDescent(int)>
<android.text.DynamicLayout: android.text.Layout$Directions getLineDirections(int)>
<android.text.DynamicLayout: int getLineStart(int)>
<android.text.DynamicLayout: int getLineTop(int)>
<android.text.DynamicLayout: int getParagraphDirection(int)>
<android.text.DynamicLayout: int getTopPadding()>
android.text.DynamicLayout$Builder
<android.text.DynamicLayout$Builder: android.text.DynamicLayout build()>
<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder obtain(java.lang.CharSequence,android.text.TextPaint,int)>
<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setAlignment(android.text.Layout$Alignment)>
<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setBreakStrategy(int)>
<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setDisplayText(java.lang.CharSequence)>
<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setEllipsize(android.text.TextUtils$TruncateAt)>
<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setEllipsizedWidth(int)>
<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setHyphenationFrequency(int)>
<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setIncludePad(boolean)>
<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setJustificationMode(int)>
<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setLineSpacing(float,float)>
<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setTextDirection(android.text.TextDirectionHeuristic)>
<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setUseLineSpacingFromFallbacks(boolean)>
android.text.Editable
<android.text.Editable: android.text.Editable append(java.lang.CharSequence)>
<android.text.Editable: android.text.Editable append(java.lang.CharSequence,int,int)>
<android.text.Editable: android.text.Editable append(char)>
<android.text.Editable: void clear()>
<android.text.Editable: void clearSpans()>
<android.text.Editable: android.text.Editable delete(int,int)>
<android.text.Editable: android.text.InputFilter[] getFilters()>
<android.text.Editable: android.text.Editable insert(int,java.lang.CharSequence,int,int)>
<android.text.Editable: android.text.Editable insert(int,java.lang.CharSequence)>
<android.text.Editable: android.text.Editable replace(int,int,java.lang.CharSequence,int,int)>
<android.text.Editable: android.text.Editable replace(int,int,java.lang.CharSequence)>
<android.text.Editable: void setFilters(android.text.InputFilter[])>
android.text.Editable$Factory
<android.text.Editable$Factory: void <init>()>
<android.text.Editable$Factory: android.text.Editable$Factory getInstance()>
<android.text.Editable$Factory: android.text.Editable newEditable(java.lang.CharSequence)>
android.text.GetChars
<android.text.GetChars: void getChars(int,int,char[],int)>
android.text.Html
<android.text.Html: java.lang.String escapeHtml(java.lang.CharSequence)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String,int)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String,android.text.Html$ImageGetter,android.text.Html$TagHandler)>
<android.text.Html: android.text.Spanned fromHtml(java.lang.String,int,android.text.Html$ImageGetter,android.text.Html$TagHandler)>
<android.text.Html: java.lang.String toHtml(android.text.Spanned)>
<android.text.Html: java.lang.String toHtml(android.text.Spanned,int)>
<android.text.Html: int FROM_HTML_MODE_COMPACT>
<android.text.Html: int FROM_HTML_MODE_LEGACY>
<android.text.Html: int FROM_HTML_OPTION_USE_CSS_COLORS>
<android.text.Html: int FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE>
<android.text.Html: int FROM_HTML_SEPARATOR_LINE_BREAK_DIV>
<android.text.Html: int FROM_HTML_SEPARATOR_LINE_BREAK_HEADING>
<android.text.Html: int FROM_HTML_SEPARATOR_LINE_BREAK_LIST>
<android.text.Html: int FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM>
<android.text.Html: int FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH>
<android.text.Html: int TO_HTML_PARAGRAPH_LINES_CONSECUTIVE>
<android.text.Html: int TO_HTML_PARAGRAPH_LINES_INDIVIDUAL>
android.text.Html$ImageGetter
<android.text.Html$ImageGetter: android.graphics.drawable.Drawable getDrawable(java.lang.String)>
android.text.Html$TagHandler
<android.text.Html$TagHandler: void handleTag(boolean,java.lang.String,android.text.Editable,org.xml.sax.XMLReader)>
android.text.InputFilter
<android.text.InputFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
android.text.InputFilter$AllCaps
<android.text.InputFilter$AllCaps: void <init>()>
<android.text.InputFilter$AllCaps: void <init>(java.util.Locale)>
<android.text.InputFilter$AllCaps: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
android.text.InputFilter$LengthFilter
<android.text.InputFilter$LengthFilter: void <init>(int)>
<android.text.InputFilter$LengthFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.InputFilter$LengthFilter: int getMax()>
android.text.InputType
<android.text.InputType: int TYPE_CLASS_DATETIME>
<android.text.InputType: int TYPE_CLASS_NUMBER>
<android.text.InputType: int TYPE_CLASS_PHONE>
<android.text.InputType: int TYPE_CLASS_TEXT>
<android.text.InputType: int TYPE_DATETIME_VARIATION_DATE>
<android.text.InputType: int TYPE_DATETIME_VARIATION_NORMAL>
<android.text.InputType: int TYPE_DATETIME_VARIATION_TIME>
<android.text.InputType: int TYPE_MASK_CLASS>
<android.text.InputType: int TYPE_MASK_FLAGS>
<android.text.InputType: int TYPE_MASK_VARIATION>
<android.text.InputType: int TYPE_NULL>
<android.text.InputType: int TYPE_NUMBER_FLAG_DECIMAL>
<android.text.InputType: int TYPE_NUMBER_FLAG_SIGNED>
<android.text.InputType: int TYPE_NUMBER_VARIATION_NORMAL>
<android.text.InputType: int TYPE_NUMBER_VARIATION_PASSWORD>
<android.text.InputType: int TYPE_TEXT_FLAG_AUTO_COMPLETE>
<android.text.InputType: int TYPE_TEXT_FLAG_AUTO_CORRECT>
<android.text.InputType: int TYPE_TEXT_FLAG_CAP_CHARACTERS>
<android.text.InputType: int TYPE_TEXT_FLAG_CAP_SENTENCES>
<android.text.InputType: int TYPE_TEXT_FLAG_CAP_WORDS>
<android.text.InputType: int TYPE_TEXT_FLAG_ENABLE_TEXT_CONVERSION_SUGGESTIONS>
<android.text.InputType: int TYPE_TEXT_FLAG_IME_MULTI_LINE>
<android.text.InputType: int TYPE_TEXT_FLAG_MULTI_LINE>
<android.text.InputType: int TYPE_TEXT_FLAG_NO_SUGGESTIONS>
<android.text.InputType: int TYPE_TEXT_VARIATION_EMAIL_ADDRESS>
<android.text.InputType: int TYPE_TEXT_VARIATION_EMAIL_SUBJECT>
<android.text.InputType: int TYPE_TEXT_VARIATION_FILTER>
<android.text.InputType: int TYPE_TEXT_VARIATION_LONG_MESSAGE>
<android.text.InputType: int TYPE_TEXT_VARIATION_NORMAL>
<android.text.InputType: int TYPE_TEXT_VARIATION_PASSWORD>
<android.text.InputType: int TYPE_TEXT_VARIATION_PERSON_NAME>
<android.text.InputType: int TYPE_TEXT_VARIATION_PHONETIC>
<android.text.InputType: int TYPE_TEXT_VARIATION_POSTAL_ADDRESS>
<android.text.InputType: int TYPE_TEXT_VARIATION_SHORT_MESSAGE>
<android.text.InputType: int TYPE_TEXT_VARIATION_URI>
<android.text.InputType: int TYPE_TEXT_VARIATION_VISIBLE_PASSWORD>
<android.text.InputType: int TYPE_TEXT_VARIATION_WEB_EDIT_TEXT>
<android.text.InputType: int TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS>
<android.text.InputType: int TYPE_TEXT_VARIATION_WEB_PASSWORD>
android.text.Layout
<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>
<android.text.Layout: void draw(android.graphics.Canvas)>
<android.text.Layout: void draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)>
<android.text.Layout: android.text.Layout$Alignment getAlignment()>
<android.text.Layout: int getBottomPadding()>
<android.text.Layout: void getCursorPath(int,android.graphics.Path,java.lang.CharSequence)>
<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,android.text.TextPaint)>
<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint)>
<android.text.Layout: int getEllipsisCount(int)>
<android.text.Layout: int getEllipsisStart(int)>
<android.text.Layout: int getEllipsizedWidth()>
<android.text.Layout: int getHeight()>
<android.text.Layout: int getLineAscent(int)>
<android.text.Layout: int getLineBaseline(int)>
<android.text.Layout: int getLineBottom(int)>
<android.text.Layout: int getLineBounds(int,android.graphics.Rect)>
<android.text.Layout: boolean getLineContainsTab(int)>
<android.text.Layout: int getLineCount()>
<android.text.Layout: int getLineDescent(int)>
<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>
<android.text.Layout: int getLineEnd(int)>
<android.text.Layout: int getLineForOffset(int)>
<android.text.Layout: int getLineForVertical(int)>
<android.text.Layout: float getLineLeft(int)>
<android.text.Layout: float getLineMax(int)>
<android.text.Layout: float getLineRight(int)>
<android.text.Layout: int getLineStart(int)>
<android.text.Layout: int getLineTop(int)>
<android.text.Layout: int getLineVisibleEnd(int)>
<android.text.Layout: float getLineWidth(int)>
<android.text.Layout: int getOffsetForHorizontal(int,float)>
<android.text.Layout: int getOffsetToLeftOf(int)>
<android.text.Layout: int getOffsetToRightOf(int)>
<android.text.Layout: android.text.TextPaint getPaint()>
<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>
<android.text.Layout: int getParagraphDirection(int)>
<android.text.Layout: int getParagraphLeft(int)>
<android.text.Layout: int getParagraphRight(int)>
<android.text.Layout: float getPrimaryHorizontal(int)>
<android.text.Layout: float getSecondaryHorizontal(int)>
<android.text.Layout: void getSelectionPath(int,int,android.graphics.Path)>
<android.text.Layout: float getSpacingAdd()>
<android.text.Layout: float getSpacingMultiplier()>
<android.text.Layout: java.lang.CharSequence getText()>
<android.text.Layout: int getTopPadding()>
<android.text.Layout: int getWidth()>
<android.text.Layout: void increaseWidthTo(int)>
<android.text.Layout: boolean isFallbackLineSpacingEnabled()>
<android.text.Layout: boolean isRtlCharAt(int)>
<android.text.Layout: boolean isSpanned()>
<android.text.Layout: int BREAK_STRATEGY_BALANCED>
<android.text.Layout: int BREAK_STRATEGY_HIGH_QUALITY>
<android.text.Layout: int BREAK_STRATEGY_SIMPLE>
<android.text.Layout: float DEFAULT_LINESPACING_ADDITION>
<android.text.Layout: float DEFAULT_LINESPACING_MULTIPLIER>
<android.text.Layout: int DIR_LEFT_TO_RIGHT>
<android.text.Layout: int DIR_RIGHT_TO_LEFT>
<android.text.Layout: int HYPHENATION_FREQUENCY_FULL>
<android.text.Layout: int HYPHENATION_FREQUENCY_FULL_FAST>
<android.text.Layout: int HYPHENATION_FREQUENCY_NONE>
<android.text.Layout: int HYPHENATION_FREQUENCY_NORMAL>
<android.text.Layout: int HYPHENATION_FREQUENCY_NORMAL_FAST>
<android.text.Layout: int JUSTIFICATION_MODE_INTER_WORD>
<android.text.Layout: int JUSTIFICATION_MODE_NONE>
android.text.Layout$Alignment
<android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_CENTER>
<android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>
<android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>
android.text.Layout$Directions
android.text.LoginFilter
<android.text.LoginFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.LoginFilter: boolean isAllowed(char)>
<android.text.LoginFilter: void onInvalidCharacter(char)>
<android.text.LoginFilter: void onStart()>
<android.text.LoginFilter: void onStop()>
android.text.LoginFilter$PasswordFilterGMail
<android.text.LoginFilter$PasswordFilterGMail: void <init>()>
<android.text.LoginFilter$PasswordFilterGMail: void <init>(boolean)>
<android.text.LoginFilter$PasswordFilterGMail: boolean isAllowed(char)>
android.text.LoginFilter$UsernameFilterGMail
<android.text.LoginFilter$UsernameFilterGMail: void <init>()>
<android.text.LoginFilter$UsernameFilterGMail: void <init>(boolean)>
<android.text.LoginFilter$UsernameFilterGMail: boolean isAllowed(char)>
android.text.LoginFilter$UsernameFilterGeneric
<android.text.LoginFilter$UsernameFilterGeneric: void <init>()>
<android.text.LoginFilter$UsernameFilterGeneric: void <init>(boolean)>
<android.text.LoginFilter$UsernameFilterGeneric: boolean isAllowed(char)>
android.text.NoCopySpan
android.text.NoCopySpan$Concrete
<android.text.NoCopySpan$Concrete: void <init>()>
android.text.ParcelableSpan
<android.text.ParcelableSpan: int getSpanTypeId()>
android.text.PrecomputedText
<android.text.PrecomputedText: char charAt(int)>
<android.text.PrecomputedText: android.text.PrecomputedText create(java.lang.CharSequence,android.text.PrecomputedText$Params)>
<android.text.PrecomputedText: void getBounds(int,int,android.graphics.Rect)>
<android.text.PrecomputedText: void getFontMetricsInt(int,int,android.graphics.Paint$FontMetricsInt)>
<android.text.PrecomputedText: int getParagraphCount()>
<android.text.PrecomputedText: int getParagraphEnd(int)>
<android.text.PrecomputedText: int getParagraphStart(int)>
<android.text.PrecomputedText: android.text.PrecomputedText$Params getParams()>
<android.text.PrecomputedText: int getSpanEnd(java.lang.Object)>
<android.text.PrecomputedText: int getSpanFlags(java.lang.Object)>
<android.text.PrecomputedText: int getSpanStart(java.lang.Object)>
<android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<android.text.PrecomputedText: float getWidth(int,int)>
<android.text.PrecomputedText: int length()>
<android.text.PrecomputedText: int nextSpanTransition(int,int,java.lang.Class)>
<android.text.PrecomputedText: void removeSpan(java.lang.Object)>
<android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>
<android.text.PrecomputedText: java.lang.CharSequence subSequence(int,int)>
android.text.PrecomputedText$Params
<android.text.PrecomputedText$Params: int getBreakStrategy()>
<android.text.PrecomputedText$Params: int getHyphenationFrequency()>
<android.text.PrecomputedText$Params: android.graphics.text.LineBreakConfig getLineBreakConfig()>
<android.text.PrecomputedText$Params: android.text.TextDirectionHeuristic getTextDirection()>
<android.text.PrecomputedText$Params: android.text.TextPaint getTextPaint()>
android.text.PrecomputedText$Params$Builder
<android.text.PrecomputedText$Params$Builder: void <init>(android.text.TextPaint)>
<android.text.PrecomputedText$Params$Builder: void <init>(android.text.PrecomputedText$Params)>
<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params build()>
<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setBreakStrategy(int)>
<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setHyphenationFrequency(int)>
<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setLineBreakConfig(android.graphics.text.LineBreakConfig)>
<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setTextDirection(android.text.TextDirectionHeuristic)>
android.text.Selection
<android.text.Selection: boolean extendDown(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean extendLeft(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean extendRight(android.text.Spannable,android.text.Layout)>
<android.text.Selection: void extendSelection(android.text.Spannable,int)>
<android.text.Selection: boolean extendToLeftEdge(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean extendToRightEdge(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean extendUp(android.text.Spannable,android.text.Layout)>
<android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>
<android.text.Selection: int getSelectionStart(java.lang.CharSequence)>
<android.text.Selection: boolean moveDown(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean moveLeft(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean moveRight(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean moveToLeftEdge(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean moveToRightEdge(android.text.Spannable,android.text.Layout)>
<android.text.Selection: boolean moveUp(android.text.Spannable,android.text.Layout)>
<android.text.Selection: void removeSelection(android.text.Spannable)>
<android.text.Selection: void selectAll(android.text.Spannable)>
<android.text.Selection: void setSelection(android.text.Spannable,int,int)>
<android.text.Selection: void setSelection(android.text.Spannable,int)>
<android.text.Selection: java.lang.Object SELECTION_END>
<android.text.Selection: java.lang.Object SELECTION_START>
android.text.SpanWatcher
<android.text.SpanWatcher: void onSpanAdded(android.text.Spannable,java.lang.Object,int,int)>
<android.text.SpanWatcher: void onSpanChanged(android.text.Spannable,java.lang.Object,int,int,int,int)>
<android.text.SpanWatcher: void onSpanRemoved(android.text.Spannable,java.lang.Object,int,int)>
android.text.Spannable
<android.text.Spannable: void removeSpan(java.lang.Object)>
<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>
android.text.Spannable$Factory
<android.text.Spannable$Factory: void <init>()>
<android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()>
<android.text.Spannable$Factory: android.text.Spannable newSpannable(java.lang.CharSequence)>
android.text.SpannableString
<android.text.SpannableString: void <init>(java.lang.CharSequence)>
<android.text.SpannableString: char charAt(int)>
<android.text.SpannableString: void getChars(int,int,char[],int)>
<android.text.SpannableString: int getSpanEnd(java.lang.Object)>
<android.text.SpannableString: int getSpanFlags(java.lang.Object)>
<android.text.SpannableString: int getSpanStart(java.lang.Object)>
<android.text.SpannableString: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<android.text.SpannableString: int length()>
<android.text.SpannableString: int nextSpanTransition(int,int,java.lang.Class)>
<android.text.SpannableString: void removeSpan(java.lang.Object)>
<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)>
<android.text.SpannableString: java.lang.CharSequence subSequence(int,int)>
<android.text.SpannableString: java.lang.String toString()>
<android.text.SpannableString: android.text.SpannableString valueOf(java.lang.CharSequence)>
android.text.SpannableStringBuilder
<android.text.SpannableStringBuilder: void <init>()>
<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence,int,int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,java.lang.Object,int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,int,int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(char)>
<android.text.SpannableStringBuilder: char charAt(int)>
<android.text.SpannableStringBuilder: void clear()>
<android.text.SpannableStringBuilder: void clearSpans()>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder delete(int,int)>
<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>
<android.text.SpannableStringBuilder: android.text.InputFilter[] getFilters()>
<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)>
<android.text.SpannableStringBuilder: int getSpanFlags(java.lang.Object)>
<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>
<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<android.text.SpannableStringBuilder: int getTextRunCursor(int,int,int,int,int,android.graphics.Paint)>
<android.text.SpannableStringBuilder: int getTextWatcherDepth()>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence,int,int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence)>
<android.text.SpannableStringBuilder: int length()>
<android.text.SpannableStringBuilder: int nextSpanTransition(int,int,java.lang.Class)>
<android.text.SpannableStringBuilder: void removeSpan(java.lang.Object)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)>
<android.text.SpannableStringBuilder: void setFilters(android.text.InputFilter[])>
<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>
<android.text.SpannableStringBuilder: java.lang.CharSequence subSequence(int,int)>
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder valueOf(java.lang.CharSequence)>
android.text.Spanned
<android.text.Spanned: int getSpanEnd(java.lang.Object)>
<android.text.Spanned: int getSpanFlags(java.lang.Object)>
<android.text.Spanned: int getSpanStart(java.lang.Object)>
<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>
<android.text.Spanned: int SPAN_COMPOSING>
<android.text.Spanned: int SPAN_EXCLUSIVE_EXCLUSIVE>
<android.text.Spanned: int SPAN_EXCLUSIVE_INCLUSIVE>
<android.text.Spanned: int SPAN_INCLUSIVE_EXCLUSIVE>
<android.text.Spanned: int SPAN_INCLUSIVE_INCLUSIVE>
<android.text.Spanned: int SPAN_INTERMEDIATE>
<android.text.Spanned: int SPAN_MARK_MARK>
<android.text.Spanned: int SPAN_MARK_POINT>
<android.text.Spanned: int SPAN_PARAGRAPH>
<android.text.Spanned: int SPAN_POINT_MARK>
<android.text.Spanned: int SPAN_POINT_MARK_MASK>
<android.text.Spanned: int SPAN_POINT_POINT>
<android.text.Spanned: int SPAN_PRIORITY>
<android.text.Spanned: int SPAN_PRIORITY_SHIFT>
<android.text.Spanned: int SPAN_USER>
<android.text.Spanned: int SPAN_USER_SHIFT>
android.text.SpannedString
<android.text.SpannedString: void <init>(java.lang.CharSequence)>
<android.text.SpannedString: char charAt(int)>
<android.text.SpannedString: void getChars(int,int,char[],int)>
<android.text.SpannedString: int getSpanEnd(java.lang.Object)>
<android.text.SpannedString: int getSpanFlags(java.lang.Object)>
<android.text.SpannedString: int getSpanStart(java.lang.Object)>
<android.text.SpannedString: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<android.text.SpannedString: int length()>
<android.text.SpannedString: int nextSpanTransition(int,int,java.lang.Class)>
<android.text.SpannedString: java.lang.CharSequence subSequence(int,int)>
<android.text.SpannedString: android.text.SpannedString valueOf(java.lang.CharSequence)>
android.text.StaticLayout
<android.text.StaticLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean)>
<android.text.StaticLayout: void <init>(java.lang.CharSequence,int,int,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean)>
<android.text.StaticLayout: void <init>(java.lang.CharSequence,int,int,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean,android.text.TextUtils$TruncateAt,int)>
<android.text.StaticLayout: int getBottomPadding()>
<android.text.StaticLayout: int getEllipsisCount(int)>
<android.text.StaticLayout: int getEllipsisStart(int)>
<android.text.StaticLayout: boolean getLineContainsTab(int)>
<android.text.StaticLayout: int getLineCount()>
<android.text.StaticLayout: int getLineDescent(int)>
<android.text.StaticLayout: android.text.Layout$Directions getLineDirections(int)>
<android.text.StaticLayout: int getLineStart(int)>
<android.text.StaticLayout: int getLineTop(int)>
<android.text.StaticLayout: int getParagraphDirection(int)>
<android.text.StaticLayout: int getTopPadding()>
android.text.StaticLayout$Builder
<android.text.StaticLayout$Builder: android.text.StaticLayout build()>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder obtain(java.lang.CharSequence,int,int,android.text.TextPaint,int)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setAlignment(android.text.Layout$Alignment)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setBreakStrategy(int)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setEllipsize(android.text.TextUtils$TruncateAt)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setEllipsizedWidth(int)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setHyphenationFrequency(int)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setIncludePad(boolean)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setIndents(int[],int[])>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setJustificationMode(int)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setLineBreakConfig(android.graphics.text.LineBreakConfig)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setLineSpacing(float,float)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setMaxLines(int)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setText(java.lang.CharSequence)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setTextDirection(android.text.TextDirectionHeuristic)>
<android.text.StaticLayout$Builder: android.text.StaticLayout$Builder setUseLineSpacingFromFallbacks(boolean)>
android.text.TextDirectionHeuristic
<android.text.TextDirectionHeuristic: boolean isRtl(char[],int,int)>
<android.text.TextDirectionHeuristic: boolean isRtl(java.lang.CharSequence,int,int)>
android.text.TextDirectionHeuristics
<android.text.TextDirectionHeuristics: void <init>()>
<android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic ANYRTL_LTR>
<android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_LTR>
<android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_RTL>
<android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic LOCALE>
<android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic LTR>
<android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic RTL>
android.text.TextPaint
<android.text.TextPaint: void <init>()>
<android.text.TextPaint: void <init>(int)>
<android.text.TextPaint: void <init>(android.graphics.Paint)>
<android.text.TextPaint: void set(android.text.TextPaint)>
<android.text.TextPaint: int baselineShift>
<android.text.TextPaint: int bgColor>
<android.text.TextPaint: float density>
<android.text.TextPaint: int[] drawableState>
<android.text.TextPaint: int linkColor>
<android.text.TextPaint: int underlineColor>
<android.text.TextPaint: float underlineThickness>
android.text.TextShaper
<android.text.TextShaper: void shapeText(java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic,android.text.TextPaint,android.text.TextShaper$GlyphsConsumer)>
android.text.TextShaper$GlyphsConsumer
<android.text.TextShaper$GlyphsConsumer: void accept(int,int,android.graphics.text.PositionedGlyphs,android.text.TextPaint)>
android.text.TextUtils
<android.text.TextUtils: java.lang.CharSequence commaEllipsize(java.lang.CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String)>
<android.text.TextUtils: java.lang.CharSequence concat(java.lang.CharSequence[])>
<android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>
<android.text.TextUtils: void dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)>
<android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt)>
<android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)>
<android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<android.text.TextUtils: java.lang.CharSequence expandTemplate(java.lang.CharSequence,java.lang.CharSequence[])>
<android.text.TextUtils: int getCapsMode(java.lang.CharSequence,int,int)>
<android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>
<android.text.TextUtils: int getLayoutDirectionFromLocale(java.util.Locale)>
<android.text.TextUtils: int getOffsetAfter(java.lang.CharSequence,int)>
<android.text.TextUtils: int getOffsetBefore(java.lang.CharSequence,int)>
<android.text.TextUtils: java.lang.CharSequence getReverse(java.lang.CharSequence,int,int)>
<android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)>
<android.text.TextUtils: java.lang.String htmlEncode(java.lang.String)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,char)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int,int)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>
<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)>
<android.text.TextUtils: boolean isDigitsOnly(java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: boolean isGraphic(java.lang.CharSequence)>
<android.text.TextUtils: boolean isGraphic(char)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char)>
<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int)>
<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int,int)>
<android.text.TextUtils: java.lang.CharSequence listEllipsize(android.content.Context,java.util.List,java.lang.String,android.text.TextPaint,float,int)>
<android.text.TextUtils: java.lang.CharSequence makeSafeForPresentation(java.lang.String,int,float,int)>
<android.text.TextUtils: boolean regionMatches(java.lang.CharSequence,int,java.lang.CharSequence,int,int)>
<android.text.TextUtils: java.lang.CharSequence replace(java.lang.CharSequence,java.lang.String[],java.lang.CharSequence[])>
<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)>
<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.util.regex.Pattern)>
<android.text.TextUtils: java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence)>
<android.text.TextUtils: java.lang.String substring(java.lang.CharSequence,int,int)>
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>
<android.text.TextUtils: int CAP_MODE_CHARACTERS>
<android.text.TextUtils: int CAP_MODE_SENTENCES>
<android.text.TextUtils: int CAP_MODE_WORDS>
<android.text.TextUtils: android.os.Parcelable$Creator CHAR_SEQUENCE_CREATOR>
<android.text.TextUtils: int SAFE_STRING_FLAG_FIRST_LINE>
<android.text.TextUtils: int SAFE_STRING_FLAG_SINGLE_LINE>
<android.text.TextUtils: int SAFE_STRING_FLAG_TRIM>
android.text.TextUtils$EllipsizeCallback
<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>
android.text.TextUtils$SimpleStringSplitter
<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>
<android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
<android.text.TextUtils$SimpleStringSplitter: java.util.Iterator iterator()>
<android.text.TextUtils$SimpleStringSplitter: java.lang.String next()>
<android.text.TextUtils$SimpleStringSplitter: void setString(java.lang.String)>
android.text.TextUtils$StringSplitter
<android.text.TextUtils$StringSplitter: void setString(java.lang.String)>
android.text.TextUtils$TruncateAt
<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt END>
<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt MARQUEE>
<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt MIDDLE>
<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt START>
android.text.TextWatcher
<android.text.TextWatcher: void afterTextChanged(android.text.Editable)>
<android.text.TextWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<android.text.TextWatcher: void onTextChanged(java.lang.CharSequence,int,int,int)>
android.text.format.DateFormat
<android.text.format.DateFormat: void <init>()>
<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,long)>
<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Date)>
<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Calendar)>
<android.text.format.DateFormat: java.lang.String getBestDateTimePattern(java.util.Locale,java.lang.String)>
<android.text.format.DateFormat: java.text.DateFormat getDateFormat(android.content.Context)>
<android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)>
<android.text.format.DateFormat: java.text.DateFormat getLongDateFormat(android.content.Context)>
<android.text.format.DateFormat: java.text.DateFormat getMediumDateFormat(android.content.Context)>
<android.text.format.DateFormat: java.text.DateFormat getTimeFormat(android.content.Context)>
<android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)>
android.text.format.DateUtils
<android.text.format.DateUtils: void <init>()>
<android.text.format.DateUtils: java.lang.String formatDateRange(android.content.Context,long,long,int)>
<android.text.format.DateUtils: java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int)>
<android.text.format.DateUtils: java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int,java.lang.String)>
<android.text.format.DateUtils: java.lang.String formatDateTime(android.content.Context,long,int)>
<android.text.format.DateUtils: java.lang.String formatElapsedTime(long)>
<android.text.format.DateUtils: java.lang.String formatElapsedTime(java.lang.StringBuilder,long)>
<android.text.format.DateUtils: java.lang.CharSequence formatSameDayTime(long,long,int,int)>
<android.text.format.DateUtils: java.lang.String getAMPMString(int)>
<android.text.format.DateUtils: java.lang.String getDayOfWeekString(int,int)>
<android.text.format.DateUtils: java.lang.String getMonthString(int,int)>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeDateTimeString(android.content.Context,long,long,long,int)>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long)>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long,long,long)>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long,long,long,int)>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long,boolean)>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long)>
<android.text.format.DateUtils: boolean isToday(long)>
<android.text.format.DateUtils: java.lang.String ABBREV_MONTH_FORMAT>
<android.text.format.DateUtils: java.lang.String ABBREV_WEEKDAY_FORMAT>
<android.text.format.DateUtils: long DAY_IN_MILLIS>
<android.text.format.DateUtils: int FORMAT_12HOUR>
<android.text.format.DateUtils: int FORMAT_24HOUR>
<android.text.format.DateUtils: int FORMAT_ABBREV_ALL>
<android.text.format.DateUtils: int FORMAT_ABBREV_MONTH>
<android.text.format.DateUtils: int FORMAT_ABBREV_RELATIVE>
<android.text.format.DateUtils: int FORMAT_ABBREV_TIME>
<android.text.format.DateUtils: int FORMAT_ABBREV_WEEKDAY>
<android.text.format.DateUtils: int FORMAT_CAP_AMPM>
<android.text.format.DateUtils: int FORMAT_CAP_MIDNIGHT>
<android.text.format.DateUtils: int FORMAT_CAP_NOON>
<android.text.format.DateUtils: int FORMAT_CAP_NOON_MIDNIGHT>
<android.text.format.DateUtils: int FORMAT_NO_MIDNIGHT>
<android.text.format.DateUtils: int FORMAT_NO_MONTH_DAY>
<android.text.format.DateUtils: int FORMAT_NO_NOON>
<android.text.format.DateUtils: int FORMAT_NO_NOON_MIDNIGHT>
<android.text.format.DateUtils: int FORMAT_NO_YEAR>
<android.text.format.DateUtils: int FORMAT_NUMERIC_DATE>
<android.text.format.DateUtils: int FORMAT_SHOW_DATE>
<android.text.format.DateUtils: int FORMAT_SHOW_TIME>
<android.text.format.DateUtils: int FORMAT_SHOW_WEEKDAY>
<android.text.format.DateUtils: int FORMAT_SHOW_YEAR>
<android.text.format.DateUtils: int FORMAT_UTC>
<android.text.format.DateUtils: long HOUR_IN_MILLIS>
<android.text.format.DateUtils: java.lang.String HOUR_MINUTE_24>
<android.text.format.DateUtils: int LENGTH_LONG>
<android.text.format.DateUtils: int LENGTH_MEDIUM>
<android.text.format.DateUtils: int LENGTH_SHORT>
<android.text.format.DateUtils: int LENGTH_SHORTER>
<android.text.format.DateUtils: int LENGTH_SHORTEST>
<android.text.format.DateUtils: long MINUTE_IN_MILLIS>
<android.text.format.DateUtils: java.lang.String MONTH_DAY_FORMAT>
<android.text.format.DateUtils: java.lang.String MONTH_FORMAT>
<android.text.format.DateUtils: java.lang.String NUMERIC_MONTH_FORMAT>
<android.text.format.DateUtils: long SECOND_IN_MILLIS>
<android.text.format.DateUtils: java.lang.String WEEKDAY_FORMAT>
<android.text.format.DateUtils: long WEEK_IN_MILLIS>
<android.text.format.DateUtils: java.lang.String YEAR_FORMAT>
<android.text.format.DateUtils: java.lang.String YEAR_FORMAT_TWO_DIGITS>
<android.text.format.DateUtils: long YEAR_IN_MILLIS>
<android.text.format.DateUtils: int[] sameMonthTable>
<android.text.format.DateUtils: int[] sameYearTable>
android.text.format.Formatter
<android.text.format.Formatter: void <init>()>
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>
<android.text.format.Formatter: java.lang.String formatIpAddress(int)>
<android.text.format.Formatter: java.lang.String formatShortFileSize(android.content.Context,long)>
android.text.format.Time
<android.text.format.Time: void <init>(java.lang.String)>
<android.text.format.Time: void <init>()>
<android.text.format.Time: void <init>(android.text.format.Time)>
<android.text.format.Time: boolean after(android.text.format.Time)>
<android.text.format.Time: boolean before(android.text.format.Time)>
<android.text.format.Time: void clear(java.lang.String)>
<android.text.format.Time: int compare(android.text.format.Time,android.text.format.Time)>
<android.text.format.Time: java.lang.String format(java.lang.String)>
<android.text.format.Time: java.lang.String format2445()>
<android.text.format.Time: java.lang.String format3339(boolean)>
<android.text.format.Time: int getActualMaximum(int)>
<android.text.format.Time: java.lang.String getCurrentTimezone()>
<android.text.format.Time: int getJulianDay(long,long)>
<android.text.format.Time: int getJulianMondayFromWeeksSinceEpoch(int)>
<android.text.format.Time: int getWeekNumber()>
<android.text.format.Time: int getWeeksSinceEpochFromJulianDay(int,int)>
<android.text.format.Time: boolean isEpoch(android.text.format.Time)>
<android.text.format.Time: long normalize(boolean)>
<android.text.format.Time: boolean parse(java.lang.String)>
<android.text.format.Time: boolean parse3339(java.lang.String)>
<android.text.format.Time: void set(long)>
<android.text.format.Time: void set(android.text.format.Time)>
<android.text.format.Time: void set(int,int,int,int,int,int)>
<android.text.format.Time: void set(int,int,int)>
<android.text.format.Time: long setJulianDay(int)>
<android.text.format.Time: void setToNow()>
<android.text.format.Time: void switchTimezone(java.lang.String)>
<android.text.format.Time: long toMillis(boolean)>
<android.text.format.Time: int EPOCH_JULIAN_DAY>
<android.text.format.Time: int FRIDAY>
<android.text.format.Time: int HOUR>
<android.text.format.Time: int MINUTE>
<android.text.format.Time: int MONDAY>
<android.text.format.Time: int MONDAY_BEFORE_JULIAN_EPOCH>
<android.text.format.Time: int MONTH>
<android.text.format.Time: int MONTH_DAY>
<android.text.format.Time: int SATURDAY>
<android.text.format.Time: int SECOND>
<android.text.format.Time: int SUNDAY>
<android.text.format.Time: int THURSDAY>
<android.text.format.Time: java.lang.String TIMEZONE_UTC>
<android.text.format.Time: int TUESDAY>
<android.text.format.Time: int WEDNESDAY>
<android.text.format.Time: int WEEK_DAY>
<android.text.format.Time: int WEEK_NUM>
<android.text.format.Time: int YEAR>
<android.text.format.Time: int YEAR_DAY>
<android.text.format.Time: boolean allDay>
<android.text.format.Time: long gmtoff>
<android.text.format.Time: int hour>
<android.text.format.Time: int isDst>
<android.text.format.Time: int minute>
<android.text.format.Time: int month>
<android.text.format.Time: int monthDay>
<android.text.format.Time: int second>
<android.text.format.Time: java.lang.String timezone>
<android.text.format.Time: int weekDay>
<android.text.format.Time: int year>
<android.text.format.Time: int yearDay>
android.text.method.ArrowKeyMovementMethod
<android.text.method.ArrowKeyMovementMethod: void <init>()>
<android.text.method.ArrowKeyMovementMethod: android.text.method.MovementMethod getInstance()>
android.text.method.BaseKeyListener
<android.text.method.BaseKeyListener: void <init>()>
<android.text.method.BaseKeyListener: boolean backspace(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.BaseKeyListener: boolean forwardDelete(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.BaseKeyListener: boolean onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)>
android.text.method.BaseMovementMethod
<android.text.method.BaseMovementMethod: void <init>()>
<android.text.method.BaseMovementMethod: boolean bottom(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean canSelectArbitrarily()>
<android.text.method.BaseMovementMethod: boolean down(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean end(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: int getMovementMetaState(android.text.Spannable,android.view.KeyEvent)>
<android.text.method.BaseMovementMethod: boolean handleMovementKey(android.widget.TextView,android.text.Spannable,int,int,android.view.KeyEvent)>
<android.text.method.BaseMovementMethod: boolean home(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: void initialize(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean left(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean lineEnd(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean lineStart(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean onGenericMotionEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.BaseMovementMethod: boolean onKeyDown(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<android.text.method.BaseMovementMethod: boolean onKeyOther(android.widget.TextView,android.text.Spannable,android.view.KeyEvent)>
<android.text.method.BaseMovementMethod: boolean onKeyUp(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<android.text.method.BaseMovementMethod: void onTakeFocus(android.widget.TextView,android.text.Spannable,int)>
<android.text.method.BaseMovementMethod: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.BaseMovementMethod: boolean onTrackballEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.BaseMovementMethod: boolean pageDown(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean pageUp(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean right(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean top(android.widget.TextView,android.text.Spannable)>
<android.text.method.BaseMovementMethod: boolean up(android.widget.TextView,android.text.Spannable)>
android.text.method.CharacterPickerDialog
<android.text.method.CharacterPickerDialog: void <init>(android.content.Context,android.view.View,android.text.Editable,java.lang.String,boolean)>
<android.text.method.CharacterPickerDialog: void onClick(android.view.View)>
<android.text.method.CharacterPickerDialog: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
android.text.method.DateKeyListener
<android.text.method.DateKeyListener: void <init>()>
<android.text.method.DateKeyListener: void <init>(java.util.Locale)>
<android.text.method.DateKeyListener: char[] getAcceptedChars()>
<android.text.method.DateKeyListener: int getInputType()>
<android.text.method.DateKeyListener: android.text.method.DateKeyListener getInstance()>
<android.text.method.DateKeyListener: android.text.method.DateKeyListener getInstance(java.util.Locale)>
<android.text.method.DateKeyListener: char[] CHARACTERS>
android.text.method.DateTimeKeyListener
<android.text.method.DateTimeKeyListener: void <init>()>
<android.text.method.DateTimeKeyListener: void <init>(java.util.Locale)>
<android.text.method.DateTimeKeyListener: char[] getAcceptedChars()>
<android.text.method.DateTimeKeyListener: int getInputType()>
<android.text.method.DateTimeKeyListener: android.text.method.DateTimeKeyListener getInstance()>
<android.text.method.DateTimeKeyListener: android.text.method.DateTimeKeyListener getInstance(java.util.Locale)>
<android.text.method.DateTimeKeyListener: char[] CHARACTERS>
android.text.method.DialerKeyListener
<android.text.method.DialerKeyListener: void <init>()>
<android.text.method.DialerKeyListener: char[] getAcceptedChars()>
<android.text.method.DialerKeyListener: int getInputType()>
<android.text.method.DialerKeyListener: android.text.method.DialerKeyListener getInstance()>
<android.text.method.DialerKeyListener: char[] CHARACTERS>
android.text.method.DigitsKeyListener
<android.text.method.DigitsKeyListener: void <init>()>
<android.text.method.DigitsKeyListener: void <init>(boolean,boolean)>
<android.text.method.DigitsKeyListener: void <init>(java.util.Locale)>
<android.text.method.DigitsKeyListener: void <init>(java.util.Locale,boolean,boolean)>
<android.text.method.DigitsKeyListener: char[] getAcceptedChars()>
<android.text.method.DigitsKeyListener: int getInputType()>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance()>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(boolean,boolean)>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.util.Locale)>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.util.Locale,boolean,boolean)>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.lang.String)>
android.text.method.HideReturnsTransformationMethod
<android.text.method.HideReturnsTransformationMethod: void <init>()>
<android.text.method.HideReturnsTransformationMethod: android.text.method.HideReturnsTransformationMethod getInstance()>
<android.text.method.HideReturnsTransformationMethod: char[] getOriginal()>
<android.text.method.HideReturnsTransformationMethod: char[] getReplacement()>
android.text.method.KeyListener
<android.text.method.KeyListener: void clearMetaKeyState(android.view.View,android.text.Editable,int)>
<android.text.method.KeyListener: int getInputType()>
<android.text.method.KeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.KeyListener: boolean onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)>
<android.text.method.KeyListener: boolean onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
android.text.method.LinkMovementMethod
<android.text.method.LinkMovementMethod: void <init>()>
<android.text.method.LinkMovementMethod: android.text.method.MovementMethod getInstance()>
android.text.method.MetaKeyKeyListener
<android.text.method.MetaKeyKeyListener: void <init>()>
<android.text.method.MetaKeyKeyListener: void adjustMetaAfterKeypress(android.text.Spannable)>
<android.text.method.MetaKeyKeyListener: long adjustMetaAfterKeypress(long)>
<android.text.method.MetaKeyKeyListener: void clearMetaKeyState(android.view.View,android.text.Editable,int)>
<android.text.method.MetaKeyKeyListener: void clearMetaKeyState(android.text.Editable,int)>
<android.text.method.MetaKeyKeyListener: long clearMetaKeyState(long,int)>
<android.text.method.MetaKeyKeyListener: int getMetaState(java.lang.CharSequence)>
<android.text.method.MetaKeyKeyListener: int getMetaState(java.lang.CharSequence,android.view.KeyEvent)>
<android.text.method.MetaKeyKeyListener: int getMetaState(java.lang.CharSequence,int)>
<android.text.method.MetaKeyKeyListener: int getMetaState(java.lang.CharSequence,int,android.view.KeyEvent)>
<android.text.method.MetaKeyKeyListener: int getMetaState(long)>
<android.text.method.MetaKeyKeyListener: int getMetaState(long,int)>
<android.text.method.MetaKeyKeyListener: long handleKeyDown(long,int,android.view.KeyEvent)>
<android.text.method.MetaKeyKeyListener: long handleKeyUp(long,int,android.view.KeyEvent)>
<android.text.method.MetaKeyKeyListener: boolean isMetaTracker(java.lang.CharSequence,java.lang.Object)>
<android.text.method.MetaKeyKeyListener: boolean isSelectingMetaTracker(java.lang.CharSequence,java.lang.Object)>
<android.text.method.MetaKeyKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.MetaKeyKeyListener: boolean onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.text.method.MetaKeyKeyListener: void resetLockedMeta(android.text.Spannable)>
<android.text.method.MetaKeyKeyListener: long resetLockedMeta(long)>
<android.text.method.MetaKeyKeyListener: void resetMetaState(android.text.Spannable)>
<android.text.method.MetaKeyKeyListener: int META_ALT_LOCKED>
<android.text.method.MetaKeyKeyListener: int META_ALT_ON>
<android.text.method.MetaKeyKeyListener: int META_CAP_LOCKED>
<android.text.method.MetaKeyKeyListener: int META_SHIFT_ON>
<android.text.method.MetaKeyKeyListener: int META_SYM_LOCKED>
<android.text.method.MetaKeyKeyListener: int META_SYM_ON>
android.text.method.MovementMethod
<android.text.method.MovementMethod: boolean canSelectArbitrarily()>
<android.text.method.MovementMethod: void initialize(android.widget.TextView,android.text.Spannable)>
<android.text.method.MovementMethod: boolean onGenericMotionEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.MovementMethod: boolean onKeyDown(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<android.text.method.MovementMethod: boolean onKeyOther(android.widget.TextView,android.text.Spannable,android.view.KeyEvent)>
<android.text.method.MovementMethod: boolean onKeyUp(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<android.text.method.MovementMethod: void onTakeFocus(android.widget.TextView,android.text.Spannable,int)>
<android.text.method.MovementMethod: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.MovementMethod: boolean onTrackballEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
android.text.method.MultiTapKeyListener
<android.text.method.MultiTapKeyListener: void <init>(android.text.method.TextKeyListener$Capitalize,boolean)>
<android.text.method.MultiTapKeyListener: int getInputType()>
<android.text.method.MultiTapKeyListener: android.text.method.MultiTapKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)>
<android.text.method.MultiTapKeyListener: void onSpanAdded(android.text.Spannable,java.lang.Object,int,int)>
<android.text.method.MultiTapKeyListener: void onSpanChanged(android.text.Spannable,java.lang.Object,int,int,int,int)>
<android.text.method.MultiTapKeyListener: void onSpanRemoved(android.text.Spannable,java.lang.Object,int,int)>
android.text.method.NumberKeyListener
<android.text.method.NumberKeyListener: void <init>()>
<android.text.method.NumberKeyListener: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<android.text.method.NumberKeyListener: char[] getAcceptedChars()>
<android.text.method.NumberKeyListener: int lookup(android.view.KeyEvent,android.text.Spannable)>
<android.text.method.NumberKeyListener: boolean ok(char[],char)>
android.text.method.PasswordTransformationMethod
<android.text.method.PasswordTransformationMethod: void <init>()>
<android.text.method.PasswordTransformationMethod: void afterTextChanged(android.text.Editable)>
<android.text.method.PasswordTransformationMethod: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()>
<android.text.method.PasswordTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>
<android.text.method.PasswordTransformationMethod: void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect)>
<android.text.method.PasswordTransformationMethod: void onTextChanged(java.lang.CharSequence,int,int,int)>
android.text.method.QwertyKeyListener
<android.text.method.QwertyKeyListener: void <init>(android.text.method.TextKeyListener$Capitalize,boolean)>
<android.text.method.QwertyKeyListener: int getInputType()>
<android.text.method.QwertyKeyListener: android.text.method.QwertyKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)>
<android.text.method.QwertyKeyListener: android.text.method.QwertyKeyListener getInstanceForFullKeyboard()>
<android.text.method.QwertyKeyListener: void markAsReplaced(android.text.Spannable,int,int,java.lang.String)>
android.text.method.ReplacementTransformationMethod
<android.text.method.ReplacementTransformationMethod: void <init>()>
<android.text.method.ReplacementTransformationMethod: char[] getOriginal()>
<android.text.method.ReplacementTransformationMethod: char[] getReplacement()>
<android.text.method.ReplacementTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>
<android.text.method.ReplacementTransformationMethod: void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect)>
android.text.method.ScrollingMovementMethod
<android.text.method.ScrollingMovementMethod: void <init>()>
<android.text.method.ScrollingMovementMethod: android.text.method.MovementMethod getInstance()>
android.text.method.SingleLineTransformationMethod
<android.text.method.SingleLineTransformationMethod: void <init>()>
<android.text.method.SingleLineTransformationMethod: android.text.method.SingleLineTransformationMethod getInstance()>
<android.text.method.SingleLineTransformationMethod: char[] getOriginal()>
<android.text.method.SingleLineTransformationMethod: char[] getReplacement()>
android.text.method.TextKeyListener
<android.text.method.TextKeyListener: void <init>(android.text.method.TextKeyListener$Capitalize,boolean)>
<android.text.method.TextKeyListener: void clear(android.text.Editable)>
<android.text.method.TextKeyListener: int getInputType()>
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)>
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance()>
<android.text.method.TextKeyListener: void onSpanAdded(android.text.Spannable,java.lang.Object,int,int)>
<android.text.method.TextKeyListener: void onSpanChanged(android.text.Spannable,java.lang.Object,int,int,int,int)>
<android.text.method.TextKeyListener: void onSpanRemoved(android.text.Spannable,java.lang.Object,int,int)>
<android.text.method.TextKeyListener: void release()>
<android.text.method.TextKeyListener: boolean shouldCap(android.text.method.TextKeyListener$Capitalize,java.lang.CharSequence,int)>
android.text.method.TextKeyListener$Capitalize
<android.text.method.TextKeyListener$Capitalize: android.text.method.TextKeyListener$Capitalize CHARACTERS>
<android.text.method.TextKeyListener$Capitalize: android.text.method.TextKeyListener$Capitalize NONE>
<android.text.method.TextKeyListener$Capitalize: android.text.method.TextKeyListener$Capitalize SENTENCES>
<android.text.method.TextKeyListener$Capitalize: android.text.method.TextKeyListener$Capitalize WORDS>
android.text.method.TimeKeyListener
<android.text.method.TimeKeyListener: void <init>()>
<android.text.method.TimeKeyListener: void <init>(java.util.Locale)>
<android.text.method.TimeKeyListener: char[] getAcceptedChars()>
<android.text.method.TimeKeyListener: int getInputType()>
<android.text.method.TimeKeyListener: android.text.method.TimeKeyListener getInstance()>
<android.text.method.TimeKeyListener: android.text.method.TimeKeyListener getInstance(java.util.Locale)>
<android.text.method.TimeKeyListener: char[] CHARACTERS>
android.text.method.Touch
<android.text.method.Touch: int getInitialScrollX(android.widget.TextView,android.text.Spannable)>
<android.text.method.Touch: int getInitialScrollY(android.widget.TextView,android.text.Spannable)>
<android.text.method.Touch: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<android.text.method.Touch: void scrollTo(android.widget.TextView,android.text.Layout,int,int)>
android.text.method.TransformationMethod
<android.text.method.TransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>
<android.text.method.TransformationMethod: void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect)>
android.text.style.AbsoluteSizeSpan
<android.text.style.AbsoluteSizeSpan: void <init>(int)>
<android.text.style.AbsoluteSizeSpan: void <init>(int,boolean)>
<android.text.style.AbsoluteSizeSpan: void <init>(android.os.Parcel)>
<android.text.style.AbsoluteSizeSpan: int describeContents()>
<android.text.style.AbsoluteSizeSpan: boolean getDip()>
<android.text.style.AbsoluteSizeSpan: int getSize()>
<android.text.style.AbsoluteSizeSpan: int getSpanTypeId()>
<android.text.style.AbsoluteSizeSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.AbsoluteSizeSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.AbsoluteSizeSpan: void writeToParcel(android.os.Parcel,int)>
android.text.style.AlignmentSpan
<android.text.style.AlignmentSpan: android.text.Layout$Alignment getAlignment()>
android.text.style.AlignmentSpan$Standard
<android.text.style.AlignmentSpan$Standard: void <init>(android.text.Layout$Alignment)>
<android.text.style.AlignmentSpan$Standard: void <init>(android.os.Parcel)>
<android.text.style.AlignmentSpan$Standard: int describeContents()>
<android.text.style.AlignmentSpan$Standard: android.text.Layout$Alignment getAlignment()>
<android.text.style.AlignmentSpan$Standard: int getSpanTypeId()>
<android.text.style.AlignmentSpan$Standard: void writeToParcel(android.os.Parcel,int)>
android.text.style.BackgroundColorSpan
<android.text.style.BackgroundColorSpan: void <init>(int)>
<android.text.style.BackgroundColorSpan: void <init>(android.os.Parcel)>
<android.text.style.BackgroundColorSpan: int describeContents()>
<android.text.style.BackgroundColorSpan: int getBackgroundColor()>
<android.text.style.BackgroundColorSpan: int getSpanTypeId()>
<android.text.style.BackgroundColorSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.BackgroundColorSpan: void writeToParcel(android.os.Parcel,int)>
android.text.style.BulletSpan
<android.text.style.BulletSpan: void <init>()>
<android.text.style.BulletSpan: void <init>(int)>
<android.text.style.BulletSpan: void <init>(int,int)>
<android.text.style.BulletSpan: void <init>(int,int,int)>
<android.text.style.BulletSpan: void <init>(android.os.Parcel)>
<android.text.style.BulletSpan: int describeContents()>
<android.text.style.BulletSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.BulletSpan: int getBulletRadius()>
<android.text.style.BulletSpan: int getColor()>
<android.text.style.BulletSpan: int getGapWidth()>
<android.text.style.BulletSpan: int getLeadingMargin(boolean)>
<android.text.style.BulletSpan: int getSpanTypeId()>
<android.text.style.BulletSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.BulletSpan: int STANDARD_GAP_WIDTH>
android.text.style.CharacterStyle
<android.text.style.CharacterStyle: void <init>()>
<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()>
<android.text.style.CharacterStyle: void updateDrawState(android.text.TextPaint)>
<android.text.style.CharacterStyle: android.text.style.CharacterStyle wrap(android.text.style.CharacterStyle)>
android.text.style.ClickableSpan
<android.text.style.ClickableSpan: void <init>()>
<android.text.style.ClickableSpan: void onClick(android.view.View)>
<android.text.style.ClickableSpan: void updateDrawState(android.text.TextPaint)>
android.text.style.DrawableMarginSpan
<android.text.style.DrawableMarginSpan: void <init>(android.graphics.drawable.Drawable)>
<android.text.style.DrawableMarginSpan: void <init>(android.graphics.drawable.Drawable,int)>
<android.text.style.DrawableMarginSpan: void chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint$FontMetricsInt)>
<android.text.style.DrawableMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.DrawableMarginSpan: int getLeadingMargin(boolean)>
android.text.style.DynamicDrawableSpan
<android.text.style.DynamicDrawableSpan: void <init>()>
<android.text.style.DynamicDrawableSpan: void <init>(int)>
<android.text.style.DynamicDrawableSpan: void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint)>
<android.text.style.DynamicDrawableSpan: android.graphics.drawable.Drawable getDrawable()>
<android.text.style.DynamicDrawableSpan: int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint$FontMetricsInt)>
<android.text.style.DynamicDrawableSpan: int getVerticalAlignment()>
<android.text.style.DynamicDrawableSpan: int ALIGN_BASELINE>
<android.text.style.DynamicDrawableSpan: int ALIGN_BOTTOM>
<android.text.style.DynamicDrawableSpan: int ALIGN_CENTER>
<android.text.style.DynamicDrawableSpan: int mVerticalAlignment>
android.text.style.EasyEditSpan
<android.text.style.EasyEditSpan: void <init>()>
<android.text.style.EasyEditSpan: void <init>(android.app.PendingIntent)>
<android.text.style.EasyEditSpan: void <init>(android.os.Parcel)>
<android.text.style.EasyEditSpan: int describeContents()>
<android.text.style.EasyEditSpan: int getSpanTypeId()>
<android.text.style.EasyEditSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.EasyEditSpan: java.lang.String EXTRA_TEXT_CHANGED_TYPE>
<android.text.style.EasyEditSpan: int TEXT_DELETED>
<android.text.style.EasyEditSpan: int TEXT_MODIFIED>
android.text.style.ForegroundColorSpan
<android.text.style.ForegroundColorSpan: void <init>(int)>
<android.text.style.ForegroundColorSpan: void <init>(android.os.Parcel)>
<android.text.style.ForegroundColorSpan: int describeContents()>
<android.text.style.ForegroundColorSpan: int getForegroundColor()>
<android.text.style.ForegroundColorSpan: int getSpanTypeId()>
<android.text.style.ForegroundColorSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.ForegroundColorSpan: void writeToParcel(android.os.Parcel,int)>
android.text.style.IconMarginSpan
<android.text.style.IconMarginSpan: void <init>(android.graphics.Bitmap)>
<android.text.style.IconMarginSpan: void <init>(android.graphics.Bitmap,int)>
<android.text.style.IconMarginSpan: void chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint$FontMetricsInt)>
<android.text.style.IconMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.IconMarginSpan: int getLeadingMargin(boolean)>
android.text.style.ImageSpan
<android.text.style.ImageSpan: void <init>(android.graphics.Bitmap)>
<android.text.style.ImageSpan: void <init>(android.graphics.Bitmap,int)>
<android.text.style.ImageSpan: void <init>(android.content.Context,android.graphics.Bitmap)>
<android.text.style.ImageSpan: void <init>(android.content.Context,android.graphics.Bitmap,int)>
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable)>
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable,int)>
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable,java.lang.String)>
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable,java.lang.String,int)>
<android.text.style.ImageSpan: void <init>(android.content.Context,android.net.Uri)>
<android.text.style.ImageSpan: void <init>(android.content.Context,android.net.Uri,int)>
<android.text.style.ImageSpan: void <init>(android.content.Context,int)>
<android.text.style.ImageSpan: void <init>(android.content.Context,int,int)>
<android.text.style.ImageSpan: android.graphics.drawable.Drawable getDrawable()>
<android.text.style.ImageSpan: java.lang.String getSource()>
android.text.style.LeadingMarginSpan
<android.text.style.LeadingMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.LeadingMarginSpan: int getLeadingMargin(boolean)>
android.text.style.LeadingMarginSpan$LeadingMarginSpan2
<android.text.style.LeadingMarginSpan$LeadingMarginSpan2: int getLeadingMarginLineCount()>
android.text.style.LeadingMarginSpan$Standard
<android.text.style.LeadingMarginSpan$Standard: void <init>(int,int)>
<android.text.style.LeadingMarginSpan$Standard: void <init>(int)>
<android.text.style.LeadingMarginSpan$Standard: void <init>(android.os.Parcel)>
<android.text.style.LeadingMarginSpan$Standard: int describeContents()>
<android.text.style.LeadingMarginSpan$Standard: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.LeadingMarginSpan$Standard: int getLeadingMargin(boolean)>
<android.text.style.LeadingMarginSpan$Standard: int getSpanTypeId()>
<android.text.style.LeadingMarginSpan$Standard: void writeToParcel(android.os.Parcel,int)>
android.text.style.LineBackgroundSpan
<android.text.style.LineBackgroundSpan: void drawBackground(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,int)>
android.text.style.LineBackgroundSpan$Standard
<android.text.style.LineBackgroundSpan$Standard: void <init>(int)>
<android.text.style.LineBackgroundSpan$Standard: void <init>(android.os.Parcel)>
<android.text.style.LineBackgroundSpan$Standard: int describeContents()>
<android.text.style.LineBackgroundSpan$Standard: void drawBackground(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,int)>
<android.text.style.LineBackgroundSpan$Standard: int getColor()>
<android.text.style.LineBackgroundSpan$Standard: int getSpanTypeId()>
<android.text.style.LineBackgroundSpan$Standard: void writeToParcel(android.os.Parcel,int)>
android.text.style.LineHeightSpan
<android.text.style.LineHeightSpan: void chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint$FontMetricsInt)>
android.text.style.LineHeightSpan$Standard
<android.text.style.LineHeightSpan$Standard: void <init>(int)>
<android.text.style.LineHeightSpan$Standard: void <init>(android.os.Parcel)>
<android.text.style.LineHeightSpan$Standard: void chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint$FontMetricsInt)>
<android.text.style.LineHeightSpan$Standard: int describeContents()>
<android.text.style.LineHeightSpan$Standard: int getHeight()>
<android.text.style.LineHeightSpan$Standard: int getSpanTypeId()>
<android.text.style.LineHeightSpan$Standard: void writeToParcel(android.os.Parcel,int)>
android.text.style.LineHeightSpan$WithDensity
<android.text.style.LineHeightSpan$WithDensity: void chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint$FontMetricsInt,android.text.TextPaint)>
android.text.style.LocaleSpan
<android.text.style.LocaleSpan: void <init>(java.util.Locale)>
<android.text.style.LocaleSpan: void <init>(android.os.LocaleList)>
<android.text.style.LocaleSpan: void <init>(android.os.Parcel)>
<android.text.style.LocaleSpan: int describeContents()>
<android.text.style.LocaleSpan: java.util.Locale getLocale()>
<android.text.style.LocaleSpan: android.os.LocaleList getLocales()>
<android.text.style.LocaleSpan: int getSpanTypeId()>
<android.text.style.LocaleSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.LocaleSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.LocaleSpan: void writeToParcel(android.os.Parcel,int)>
android.text.style.MaskFilterSpan
<android.text.style.MaskFilterSpan: void <init>(android.graphics.MaskFilter)>
<android.text.style.MaskFilterSpan: android.graphics.MaskFilter getMaskFilter()>
<android.text.style.MaskFilterSpan: void updateDrawState(android.text.TextPaint)>
android.text.style.MetricAffectingSpan
<android.text.style.MetricAffectingSpan: void <init>()>
<android.text.style.MetricAffectingSpan: android.text.style.MetricAffectingSpan getUnderlying()>
<android.text.style.MetricAffectingSpan: void updateMeasureState(android.text.TextPaint)>
android.text.style.ParagraphStyle
android.text.style.QuoteSpan
<android.text.style.QuoteSpan: void <init>()>
<android.text.style.QuoteSpan: void <init>(int)>
<android.text.style.QuoteSpan: void <init>(int,int,int)>
<android.text.style.QuoteSpan: void <init>(android.os.Parcel)>
<android.text.style.QuoteSpan: int describeContents()>
<android.text.style.QuoteSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<android.text.style.QuoteSpan: int getColor()>
<android.text.style.QuoteSpan: int getGapWidth()>
<android.text.style.QuoteSpan: int getLeadingMargin(boolean)>
<android.text.style.QuoteSpan: int getSpanTypeId()>
<android.text.style.QuoteSpan: int getStripeWidth()>
<android.text.style.QuoteSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.QuoteSpan: int STANDARD_COLOR>
<android.text.style.QuoteSpan: int STANDARD_GAP_WIDTH_PX>
<android.text.style.QuoteSpan: int STANDARD_STRIPE_WIDTH_PX>
android.text.style.RelativeSizeSpan
<android.text.style.RelativeSizeSpan: void <init>(float)>
<android.text.style.RelativeSizeSpan: void <init>(android.os.Parcel)>
<android.text.style.RelativeSizeSpan: int describeContents()>
<android.text.style.RelativeSizeSpan: float getSizeChange()>
<android.text.style.RelativeSizeSpan: int getSpanTypeId()>
<android.text.style.RelativeSizeSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.RelativeSizeSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.RelativeSizeSpan: void writeToParcel(android.os.Parcel,int)>
android.text.style.ReplacementSpan
<android.text.style.ReplacementSpan: void <init>()>
<android.text.style.ReplacementSpan: void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint)>
<android.text.style.ReplacementSpan: java.lang.CharSequence getContentDescription()>
<android.text.style.ReplacementSpan: int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint$FontMetricsInt)>
<android.text.style.ReplacementSpan: void setContentDescription(java.lang.CharSequence)>
<android.text.style.ReplacementSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.ReplacementSpan: void updateMeasureState(android.text.TextPaint)>
android.text.style.ScaleXSpan
<android.text.style.ScaleXSpan: void <init>(float)>
<android.text.style.ScaleXSpan: void <init>(android.os.Parcel)>
<android.text.style.ScaleXSpan: int describeContents()>
<android.text.style.ScaleXSpan: float getScaleX()>
<android.text.style.ScaleXSpan: int getSpanTypeId()>
<android.text.style.ScaleXSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.ScaleXSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.ScaleXSpan: void writeToParcel(android.os.Parcel,int)>
android.text.style.StrikethroughSpan
<android.text.style.StrikethroughSpan: void <init>()>
<android.text.style.StrikethroughSpan: void <init>(android.os.Parcel)>
<android.text.style.StrikethroughSpan: int describeContents()>
<android.text.style.StrikethroughSpan: int getSpanTypeId()>
<android.text.style.StrikethroughSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.StrikethroughSpan: void writeToParcel(android.os.Parcel,int)>
android.text.style.StyleSpan
<android.text.style.StyleSpan: void <init>(int)>
<android.text.style.StyleSpan: void <init>(int,int)>
<android.text.style.StyleSpan: void <init>(android.os.Parcel)>
<android.text.style.StyleSpan: int describeContents()>
<android.text.style.StyleSpan: int getFontWeightAdjustment()>
<android.text.style.StyleSpan: int getSpanTypeId()>
<android.text.style.StyleSpan: int getStyle()>
<android.text.style.StyleSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.StyleSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.StyleSpan: void writeToParcel(android.os.Parcel,int)>
android.text.style.SubscriptSpan
<android.text.style.SubscriptSpan: void <init>()>
<android.text.style.SubscriptSpan: void <init>(android.os.Parcel)>
<android.text.style.SubscriptSpan: int describeContents()>
<android.text.style.SubscriptSpan: int getSpanTypeId()>
<android.text.style.SubscriptSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.SubscriptSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.SubscriptSpan: void writeToParcel(android.os.Parcel,int)>
android.text.style.SuggestionRangeSpan
<android.text.style.SuggestionRangeSpan: void <init>()>
<android.text.style.SuggestionRangeSpan: int describeContents()>
<android.text.style.SuggestionRangeSpan: int getBackgroundColor()>
<android.text.style.SuggestionRangeSpan: int getSpanTypeId()>
<android.text.style.SuggestionRangeSpan: void setBackgroundColor(int)>
<android.text.style.SuggestionRangeSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.SuggestionRangeSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.SuggestionRangeSpan: android.os.Parcelable$Creator CREATOR>
android.text.style.SuggestionSpan
<android.text.style.SuggestionSpan: void <init>(android.content.Context,java.lang.String[],int)>
<android.text.style.SuggestionSpan: void <init>(java.util.Locale,java.lang.String[],int)>
<android.text.style.SuggestionSpan: void <init>(android.content.Context,java.util.Locale,java.lang.String[],int,java.lang.Class)>
<android.text.style.SuggestionSpan: void <init>(android.os.Parcel)>
<android.text.style.SuggestionSpan: int describeContents()>
<android.text.style.SuggestionSpan: int getFlags()>
<android.text.style.SuggestionSpan: java.lang.String getLocale()>
<android.text.style.SuggestionSpan: java.util.Locale getLocaleObject()>
<android.text.style.SuggestionSpan: int getSpanTypeId()>
<android.text.style.SuggestionSpan: java.lang.String[] getSuggestions()>
<android.text.style.SuggestionSpan: int getUnderlineColor()>
<android.text.style.SuggestionSpan: void setFlags(int)>
<android.text.style.SuggestionSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.SuggestionSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.SuggestionSpan: java.lang.String ACTION_SUGGESTION_PICKED>
<android.text.style.SuggestionSpan: android.os.Parcelable$Creator CREATOR>
<android.text.style.SuggestionSpan: int FLAG_AUTO_CORRECTION>
<android.text.style.SuggestionSpan: int FLAG_EASY_CORRECT>
<android.text.style.SuggestionSpan: int FLAG_GRAMMAR_ERROR>
<android.text.style.SuggestionSpan: int FLAG_MISSPELLED>
<android.text.style.SuggestionSpan: int SUGGESTIONS_MAX_SIZE>
<android.text.style.SuggestionSpan: java.lang.String SUGGESTION_SPAN_PICKED_AFTER>
<android.text.style.SuggestionSpan: java.lang.String SUGGESTION_SPAN_PICKED_BEFORE>
<android.text.style.SuggestionSpan: java.lang.String SUGGESTION_SPAN_PICKED_HASHCODE>
android.text.style.SuperscriptSpan
<android.text.style.SuperscriptSpan: void <init>()>
<android.text.style.SuperscriptSpan: void <init>(android.os.Parcel)>
<android.text.style.SuperscriptSpan: int describeContents()>
<android.text.style.SuperscriptSpan: int getSpanTypeId()>
<android.text.style.SuperscriptSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.SuperscriptSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.SuperscriptSpan: void writeToParcel(android.os.Parcel,int)>
android.text.style.TabStopSpan
<android.text.style.TabStopSpan: int getTabStop()>
android.text.style.TabStopSpan$Standard
<android.text.style.TabStopSpan$Standard: void <init>(int)>
<android.text.style.TabStopSpan$Standard: int getTabStop()>
android.text.style.TextAppearanceSpan
<android.text.style.TextAppearanceSpan: void <init>(android.content.Context,int)>
<android.text.style.TextAppearanceSpan: void <init>(android.content.Context,int,int)>
<android.text.style.TextAppearanceSpan: void <init>(java.lang.String,int,int,android.content.res.ColorStateList,android.content.res.ColorStateList)>
<android.text.style.TextAppearanceSpan: void <init>(android.os.Parcel)>
<android.text.style.TextAppearanceSpan: int describeContents()>
<android.text.style.TextAppearanceSpan: java.lang.String getFamily()>
<android.text.style.TextAppearanceSpan: java.lang.String getFontFeatureSettings()>
<android.text.style.TextAppearanceSpan: java.lang.String getFontVariationSettings()>
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getLinkTextColor()>
<android.text.style.TextAppearanceSpan: int getShadowColor()>
<android.text.style.TextAppearanceSpan: float getShadowDx()>
<android.text.style.TextAppearanceSpan: float getShadowDy()>
<android.text.style.TextAppearanceSpan: float getShadowRadius()>
<android.text.style.TextAppearanceSpan: int getSpanTypeId()>
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getTextColor()>
<android.text.style.TextAppearanceSpan: int getTextFontWeight()>
<android.text.style.TextAppearanceSpan: android.os.LocaleList getTextLocales()>
<android.text.style.TextAppearanceSpan: int getTextSize()>
<android.text.style.TextAppearanceSpan: int getTextStyle()>
<android.text.style.TextAppearanceSpan: android.graphics.Typeface getTypeface()>
<android.text.style.TextAppearanceSpan: boolean isElegantTextHeight()>
<android.text.style.TextAppearanceSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.TextAppearanceSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.TextAppearanceSpan: void writeToParcel(android.os.Parcel,int)>
android.text.style.TtsSpan
<android.text.style.TtsSpan: void <init>(java.lang.String,android.os.PersistableBundle)>
<android.text.style.TtsSpan: void <init>(android.os.Parcel)>
<android.text.style.TtsSpan: int describeContents()>
<android.text.style.TtsSpan: android.os.PersistableBundle getArgs()>
<android.text.style.TtsSpan: int getSpanTypeId()>
<android.text.style.TtsSpan: java.lang.String getType()>
<android.text.style.TtsSpan: void writeToParcel(android.os.Parcel,int)>
<android.text.style.TtsSpan: java.lang.String ANIMACY_ANIMATE>
<android.text.style.TtsSpan: java.lang.String ANIMACY_INANIMATE>
<android.text.style.TtsSpan: java.lang.String ARG_ANIMACY>
<android.text.style.TtsSpan: java.lang.String ARG_CASE>
<android.text.style.TtsSpan: java.lang.String ARG_COUNTRY_CODE>
<android.text.style.TtsSpan: java.lang.String ARG_CURRENCY>
<android.text.style.TtsSpan: java.lang.String ARG_DAY>
<android.text.style.TtsSpan: java.lang.String ARG_DENOMINATOR>
<android.text.style.TtsSpan: java.lang.String ARG_DIGITS>
<android.text.style.TtsSpan: java.lang.String ARG_DOMAIN>
<android.text.style.TtsSpan: java.lang.String ARG_EXTENSION>
<android.text.style.TtsSpan: java.lang.String ARG_FRACTIONAL_PART>
<android.text.style.TtsSpan: java.lang.String ARG_FRAGMENT_ID>
<android.text.style.TtsSpan: java.lang.String ARG_GENDER>
<android.text.style.TtsSpan: java.lang.String ARG_HOURS>
<android.text.style.TtsSpan: java.lang.String ARG_INTEGER_PART>
<android.text.style.TtsSpan: java.lang.String ARG_MINUTES>
<android.text.style.TtsSpan: java.lang.String ARG_MONTH>
<android.text.style.TtsSpan: java.lang.String ARG_MULTIPLICITY>
<android.text.style.TtsSpan: java.lang.String ARG_NUMBER>
<android.text.style.TtsSpan: java.lang.String ARG_NUMBER_PARTS>
<android.text.style.TtsSpan: java.lang.String ARG_NUMERATOR>
<android.text.style.TtsSpan: java.lang.String ARG_PASSWORD>
<android.text.style.TtsSpan: java.lang.String ARG_PATH>
<android.text.style.TtsSpan: java.lang.String ARG_PORT>
<android.text.style.TtsSpan: java.lang.String ARG_PROTOCOL>
<android.text.style.TtsSpan: java.lang.String ARG_QUANTITY>
<android.text.style.TtsSpan: java.lang.String ARG_QUERY_STRING>
<android.text.style.TtsSpan: java.lang.String ARG_TEXT>
<android.text.style.TtsSpan: java.lang.String ARG_UNIT>
<android.text.style.TtsSpan: java.lang.String ARG_USERNAME>
<android.text.style.TtsSpan: java.lang.String ARG_VERBATIM>
<android.text.style.TtsSpan: java.lang.String ARG_WEEKDAY>
<android.text.style.TtsSpan: java.lang.String ARG_YEAR>
<android.text.style.TtsSpan: java.lang.String CASE_ABLATIVE>
<android.text.style.TtsSpan: java.lang.String CASE_ACCUSATIVE>
<android.text.style.TtsSpan: java.lang.String CASE_DATIVE>
<android.text.style.TtsSpan: java.lang.String CASE_GENITIVE>
<android.text.style.TtsSpan: java.lang.String CASE_INSTRUMENTAL>
<android.text.style.TtsSpan: java.lang.String CASE_LOCATIVE>
<android.text.style.TtsSpan: java.lang.String CASE_NOMINATIVE>
<android.text.style.TtsSpan: java.lang.String CASE_VOCATIVE>
<android.text.style.TtsSpan: java.lang.String GENDER_FEMALE>
<android.text.style.TtsSpan: java.lang.String GENDER_MALE>
<android.text.style.TtsSpan: java.lang.String GENDER_NEUTRAL>
<android.text.style.TtsSpan: int MONTH_APRIL>
<android.text.style.TtsSpan: int MONTH_AUGUST>
<android.text.style.TtsSpan: int MONTH_DECEMBER>
<android.text.style.TtsSpan: int MONTH_FEBRUARY>
<android.text.style.TtsSpan: int MONTH_JANUARY>
<android.text.style.TtsSpan: int MONTH_JULY>
<android.text.style.TtsSpan: int MONTH_JUNE>
<android.text.style.TtsSpan: int MONTH_MARCH>
<android.text.style.TtsSpan: int MONTH_MAY>
<android.text.style.TtsSpan: int MONTH_NOVEMBER>
<android.text.style.TtsSpan: int MONTH_OCTOBER>
<android.text.style.TtsSpan: int MONTH_SEPTEMBER>
<android.text.style.TtsSpan: java.lang.String MULTIPLICITY_DUAL>
<android.text.style.TtsSpan: java.lang.String MULTIPLICITY_PLURAL>
<android.text.style.TtsSpan: java.lang.String MULTIPLICITY_SINGLE>
<android.text.style.TtsSpan: java.lang.String TYPE_CARDINAL>
<android.text.style.TtsSpan: java.lang.String TYPE_DATE>
<android.text.style.TtsSpan: java.lang.String TYPE_DECIMAL>
<android.text.style.TtsSpan: java.lang.String TYPE_DIGITS>
<android.text.style.TtsSpan: java.lang.String TYPE_ELECTRONIC>
<android.text.style.TtsSpan: java.lang.String TYPE_FRACTION>
<android.text.style.TtsSpan: java.lang.String TYPE_MEASURE>
<android.text.style.TtsSpan: java.lang.String TYPE_MONEY>
<android.text.style.TtsSpan: java.lang.String TYPE_ORDINAL>
<android.text.style.TtsSpan: java.lang.String TYPE_TELEPHONE>
<android.text.style.TtsSpan: java.lang.String TYPE_TEXT>
<android.text.style.TtsSpan: java.lang.String TYPE_TIME>
<android.text.style.TtsSpan: java.lang.String TYPE_VERBATIM>
<android.text.style.TtsSpan: int WEEKDAY_FRIDAY>
<android.text.style.TtsSpan: int WEEKDAY_MONDAY>
<android.text.style.TtsSpan: int WEEKDAY_SATURDAY>
<android.text.style.TtsSpan: int WEEKDAY_SUNDAY>
<android.text.style.TtsSpan: int WEEKDAY_THURSDAY>
<android.text.style.TtsSpan: int WEEKDAY_TUESDAY>
<android.text.style.TtsSpan: int WEEKDAY_WEDNESDAY>
android.text.style.TtsSpan$Builder
<android.text.style.TtsSpan$Builder: void <init>(java.lang.String)>
<android.text.style.TtsSpan$Builder: android.text.style.TtsSpan build()>
<android.text.style.TtsSpan$Builder: android.text.style.TtsSpan.Builder setIntArgument(java.lang.String,int)>
<android.text.style.TtsSpan$Builder: android.text.style.TtsSpan.Builder setLongArgument(java.lang.String,long)>
<android.text.style.TtsSpan$Builder: android.text.style.TtsSpan.Builder setStringArgument(java.lang.String,java.lang.String)>
android.text.style.TtsSpan$CardinalBuilder
<android.text.style.TtsSpan$CardinalBuilder: void <init>()>
<android.text.style.TtsSpan$CardinalBuilder: void <init>(long)>
<android.text.style.TtsSpan$CardinalBuilder: void <init>(java.lang.String)>
<android.text.style.TtsSpan$CardinalBuilder: android.text.style.TtsSpan$CardinalBuilder setNumber(long)>
<android.text.style.TtsSpan$CardinalBuilder: android.text.style.TtsSpan$CardinalBuilder setNumber(java.lang.String)>
android.text.style.TtsSpan$DateBuilder
<android.text.style.TtsSpan$DateBuilder: void <init>()>
<android.text.style.TtsSpan$DateBuilder: void <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)>
<android.text.style.TtsSpan$DateBuilder: android.text.style.TtsSpan$DateBuilder setDay(int)>
<android.text.style.TtsSpan$DateBuilder: android.text.style.TtsSpan$DateBuilder setMonth(int)>
<android.text.style.TtsSpan$DateBuilder: android.text.style.TtsSpan$DateBuilder setWeekday(int)>
<android.text.style.TtsSpan$DateBuilder: android.text.style.TtsSpan$DateBuilder setYear(int)>
android.text.style.TtsSpan$DecimalBuilder
<android.text.style.TtsSpan$DecimalBuilder: void <init>()>
<android.text.style.TtsSpan$DecimalBuilder: void <init>(double,int,int)>
<android.text.style.TtsSpan$DecimalBuilder: void <init>(java.lang.String,java.lang.String)>
<android.text.style.TtsSpan$DecimalBuilder: android.text.style.TtsSpan$DecimalBuilder setArgumentsFromDouble(double,int,int)>
<android.text.style.TtsSpan$DecimalBuilder: android.text.style.TtsSpan$DecimalBuilder setFractionalPart(java.lang.String)>
<android.text.style.TtsSpan$DecimalBuilder: android.text.style.TtsSpan$DecimalBuilder setIntegerPart(long)>
<android.text.style.TtsSpan$DecimalBuilder: android.text.style.TtsSpan$DecimalBuilder setIntegerPart(java.lang.String)>
android.text.style.TtsSpan$DigitsBuilder
<android.text.style.TtsSpan$DigitsBuilder: void <init>()>
<android.text.style.TtsSpan$DigitsBuilder: void <init>(java.lang.String)>
<android.text.style.TtsSpan$DigitsBuilder: android.text.style.TtsSpan$DigitsBuilder setDigits(java.lang.String)>
android.text.style.TtsSpan$ElectronicBuilder
<android.text.style.TtsSpan$ElectronicBuilder: void <init>()>
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setDomain(java.lang.String)>
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setEmailArguments(java.lang.String,java.lang.String)>
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setFragmentId(java.lang.String)>
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setPassword(java.lang.String)>
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setPath(java.lang.String)>
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setPort(int)>
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setProtocol(java.lang.String)>
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setQueryString(java.lang.String)>
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setUsername(java.lang.String)>
android.text.style.TtsSpan$FractionBuilder
<android.text.style.TtsSpan$FractionBuilder: void <init>()>
<android.text.style.TtsSpan$FractionBuilder: void <init>(long,long,long)>
<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setDenominator(long)>
<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setDenominator(java.lang.String)>
<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setIntegerPart(long)>
<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setIntegerPart(java.lang.String)>
<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setNumerator(long)>
<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setNumerator(java.lang.String)>
android.text.style.TtsSpan$MeasureBuilder
<android.text.style.TtsSpan$MeasureBuilder: void <init>()>
<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setDenominator(long)>
<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setDenominator(java.lang.String)>
<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setFractionalPart(java.lang.String)>
<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setIntegerPart(long)>
<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setIntegerPart(java.lang.String)>
<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setNumber(long)>
<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setNumber(java.lang.String)>
<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setNumerator(long)>
<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setNumerator(java.lang.String)>
<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setUnit(java.lang.String)>
android.text.style.TtsSpan$MoneyBuilder
<android.text.style.TtsSpan$MoneyBuilder: void <init>()>
<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setCurrency(java.lang.String)>
<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setFractionalPart(java.lang.String)>
<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setIntegerPart(long)>
<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setIntegerPart(java.lang.String)>
<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setQuantity(java.lang.String)>
android.text.style.TtsSpan$OrdinalBuilder
<android.text.style.TtsSpan$OrdinalBuilder: void <init>()>
<android.text.style.TtsSpan$OrdinalBuilder: void <init>(long)>
<android.text.style.TtsSpan$OrdinalBuilder: void <init>(java.lang.String)>
<android.text.style.TtsSpan$OrdinalBuilder: android.text.style.TtsSpan$OrdinalBuilder setNumber(long)>
<android.text.style.TtsSpan$OrdinalBuilder: android.text.style.TtsSpan$OrdinalBuilder setNumber(java.lang.String)>
android.text.style.TtsSpan$SemioticClassBuilder
<android.text.style.TtsSpan$SemioticClassBuilder: void <init>(java.lang.String)>
<android.text.style.TtsSpan$SemioticClassBuilder: android.text.style.TtsSpan.SemioticClassBuilder setAnimacy(java.lang.String)>
<android.text.style.TtsSpan$SemioticClassBuilder: android.text.style.TtsSpan.SemioticClassBuilder setCase(java.lang.String)>
<android.text.style.TtsSpan$SemioticClassBuilder: android.text.style.TtsSpan.SemioticClassBuilder setGender(java.lang.String)>
<android.text.style.TtsSpan$SemioticClassBuilder: android.text.style.TtsSpan.SemioticClassBuilder setMultiplicity(java.lang.String)>
android.text.style.TtsSpan$TelephoneBuilder
<android.text.style.TtsSpan$TelephoneBuilder: void <init>()>
<android.text.style.TtsSpan$TelephoneBuilder: void <init>(java.lang.String)>
<android.text.style.TtsSpan$TelephoneBuilder: android.text.style.TtsSpan$TelephoneBuilder setCountryCode(java.lang.String)>
<android.text.style.TtsSpan$TelephoneBuilder: android.text.style.TtsSpan$TelephoneBuilder setExtension(java.lang.String)>
<android.text.style.TtsSpan$TelephoneBuilder: android.text.style.TtsSpan$TelephoneBuilder setNumberParts(java.lang.String)>
android.text.style.TtsSpan$TextBuilder
<android.text.style.TtsSpan$TextBuilder: void <init>()>
<android.text.style.TtsSpan$TextBuilder: void <init>(java.lang.String)>
<android.text.style.TtsSpan$TextBuilder: android.text.style.TtsSpan$TextBuilder setText(java.lang.String)>
android.text.style.TtsSpan$TimeBuilder
<android.text.style.TtsSpan$TimeBuilder: void <init>()>
<android.text.style.TtsSpan$TimeBuilder: void <init>(int,int)>
<android.text.style.TtsSpan$TimeBuilder: android.text.style.TtsSpan$TimeBuilder setHours(int)>
<android.text.style.TtsSpan$TimeBuilder: android.text.style.TtsSpan$TimeBuilder setMinutes(int)>
android.text.style.TtsSpan$VerbatimBuilder
<android.text.style.TtsSpan$VerbatimBuilder: void <init>()>
<android.text.style.TtsSpan$VerbatimBuilder: void <init>(java.lang.String)>
<android.text.style.TtsSpan$VerbatimBuilder: android.text.style.TtsSpan$VerbatimBuilder setVerbatim(java.lang.String)>
android.text.style.TypefaceSpan
<android.text.style.TypefaceSpan: void <init>(java.lang.String)>
<android.text.style.TypefaceSpan: void <init>(android.graphics.Typeface)>
<android.text.style.TypefaceSpan: void <init>(android.os.Parcel)>
<android.text.style.TypefaceSpan: int describeContents()>
<android.text.style.TypefaceSpan: java.lang.String getFamily()>
<android.text.style.TypefaceSpan: int getSpanTypeId()>
<android.text.style.TypefaceSpan: android.graphics.Typeface getTypeface()>
<android.text.style.TypefaceSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.TypefaceSpan: void updateMeasureState(android.text.TextPaint)>
<android.text.style.TypefaceSpan: void writeToParcel(android.os.Parcel,int)>
android.text.style.URLSpan
<android.text.style.URLSpan: void <init>(java.lang.String)>
<android.text.style.URLSpan: void <init>(android.os.Parcel)>
<android.text.style.URLSpan: int describeContents()>
<android.text.style.URLSpan: int getSpanTypeId()>
<android.text.style.URLSpan: java.lang.String getURL()>
<android.text.style.URLSpan: void onClick(android.view.View)>
<android.text.style.URLSpan: void writeToParcel(android.os.Parcel,int)>
android.text.style.UnderlineSpan
<android.text.style.UnderlineSpan: void <init>()>
<android.text.style.UnderlineSpan: void <init>(android.os.Parcel)>
<android.text.style.UnderlineSpan: int describeContents()>
<android.text.style.UnderlineSpan: int getSpanTypeId()>
<android.text.style.UnderlineSpan: void updateDrawState(android.text.TextPaint)>
<android.text.style.UnderlineSpan: void writeToParcel(android.os.Parcel,int)>
android.text.style.UpdateAppearance
android.text.style.UpdateLayout
android.text.style.WrapTogetherSpan
android.text.util.Linkify
<android.text.util.Linkify: void <init>()>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,int)>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,int,java.util.function.Function)>
<android.text.util.Linkify: boolean addLinks(android.widget.TextView,int)>
<android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String)>
<android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)>
<android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String)>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)>
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter,java.util.function.Function)>
<android.text.util.Linkify: int ALL>
<android.text.util.Linkify: int EMAIL_ADDRESSES>
<android.text.util.Linkify: int MAP_ADDRESSES>
<android.text.util.Linkify: int PHONE_NUMBERS>
<android.text.util.Linkify: int WEB_URLS>
<android.text.util.Linkify: android.text.util.Linkify$MatchFilter sPhoneNumberMatchFilter>
<android.text.util.Linkify: android.text.util.Linkify$TransformFilter sPhoneNumberTransformFilter>
<android.text.util.Linkify: android.text.util.Linkify$MatchFilter sUrlMatchFilter>
android.text.util.Linkify$MatchFilter
<android.text.util.Linkify$MatchFilter: boolean acceptMatch(java.lang.CharSequence,int,int)>
android.text.util.Linkify$TransformFilter
<android.text.util.Linkify$TransformFilter: java.lang.String transformUrl(java.util.regex.Matcher,java.lang.String)>
android.text.util.Rfc822Token
<android.text.util.Rfc822Token: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<android.text.util.Rfc822Token: java.lang.String getAddress()>
<android.text.util.Rfc822Token: java.lang.String getComment()>
<android.text.util.Rfc822Token: java.lang.String getName()>
<android.text.util.Rfc822Token: java.lang.String quoteComment(java.lang.String)>
<android.text.util.Rfc822Token: java.lang.String quoteName(java.lang.String)>
<android.text.util.Rfc822Token: java.lang.String quoteNameIfNecessary(java.lang.String)>
<android.text.util.Rfc822Token: void setAddress(java.lang.String)>
<android.text.util.Rfc822Token: void setComment(java.lang.String)>
<android.text.util.Rfc822Token: void setName(java.lang.String)>
android.text.util.Rfc822Tokenizer
<android.text.util.Rfc822Tokenizer: void <init>()>
<android.text.util.Rfc822Tokenizer: int findTokenEnd(java.lang.CharSequence,int)>
<android.text.util.Rfc822Tokenizer: int findTokenStart(java.lang.CharSequence,int)>
<android.text.util.Rfc822Tokenizer: java.lang.CharSequence terminateToken(java.lang.CharSequence)>
<android.text.util.Rfc822Tokenizer: void tokenize(java.lang.CharSequence,java.util.Collection)>
<android.text.util.Rfc822Tokenizer: android.text.util.Rfc822Token[] tokenize(java.lang.CharSequence)>
android.transition.ArcMotion
<android.transition.ArcMotion: void <init>()>
<android.transition.ArcMotion: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.ArcMotion: float getMaximumAngle()>
<android.transition.ArcMotion: float getMinimumHorizontalAngle()>
<android.transition.ArcMotion: float getMinimumVerticalAngle()>
<android.transition.ArcMotion: android.graphics.Path getPath(float,float,float,float)>
<android.transition.ArcMotion: void setMaximumAngle(float)>
<android.transition.ArcMotion: void setMinimumHorizontalAngle(float)>
<android.transition.ArcMotion: void setMinimumVerticalAngle(float)>
android.transition.AutoTransition
<android.transition.AutoTransition: void <init>()>
<android.transition.AutoTransition: void <init>(android.content.Context,android.util.AttributeSet)>
android.transition.ChangeBounds
<android.transition.ChangeBounds: void <init>()>
<android.transition.ChangeBounds: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.ChangeBounds: void captureEndValues(android.transition.TransitionValues)>
<android.transition.ChangeBounds: void captureStartValues(android.transition.TransitionValues)>
<android.transition.ChangeBounds: boolean getResizeClip()>
<android.transition.ChangeBounds: void setReparent(boolean)>
<android.transition.ChangeBounds: void setResizeClip(boolean)>
android.transition.ChangeClipBounds
<android.transition.ChangeClipBounds: void <init>()>
<android.transition.ChangeClipBounds: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.ChangeClipBounds: void captureEndValues(android.transition.TransitionValues)>
<android.transition.ChangeClipBounds: void captureStartValues(android.transition.TransitionValues)>
android.transition.ChangeImageTransform
<android.transition.ChangeImageTransform: void <init>()>
<android.transition.ChangeImageTransform: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.ChangeImageTransform: void captureEndValues(android.transition.TransitionValues)>
<android.transition.ChangeImageTransform: void captureStartValues(android.transition.TransitionValues)>
android.transition.ChangeScroll
<android.transition.ChangeScroll: void <init>()>
<android.transition.ChangeScroll: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.ChangeScroll: void captureEndValues(android.transition.TransitionValues)>
<android.transition.ChangeScroll: void captureStartValues(android.transition.TransitionValues)>
android.transition.ChangeTransform
<android.transition.ChangeTransform: void <init>()>
<android.transition.ChangeTransform: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.ChangeTransform: void captureEndValues(android.transition.TransitionValues)>
<android.transition.ChangeTransform: void captureStartValues(android.transition.TransitionValues)>
<android.transition.ChangeTransform: boolean getReparent()>
<android.transition.ChangeTransform: boolean getReparentWithOverlay()>
<android.transition.ChangeTransform: void setReparent(boolean)>
<android.transition.ChangeTransform: void setReparentWithOverlay(boolean)>
android.transition.CircularPropagation
<android.transition.CircularPropagation: void <init>()>
<android.transition.CircularPropagation: long getStartDelay(android.view.ViewGroup,android.transition.Transition,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.transition.CircularPropagation: void setPropagationSpeed(float)>
android.transition.Explode
<android.transition.Explode: void <init>()>
<android.transition.Explode: void <init>(android.content.Context,android.util.AttributeSet)>
android.transition.Fade
<android.transition.Fade: void <init>()>
<android.transition.Fade: void <init>(int)>
<android.transition.Fade: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.Fade: int IN>
<android.transition.Fade: int OUT>
android.transition.PathMotion
<android.transition.PathMotion: void <init>()>
<android.transition.PathMotion: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.PathMotion: android.graphics.Path getPath(float,float,float,float)>
android.transition.PatternPathMotion
<android.transition.PatternPathMotion: void <init>()>
<android.transition.PatternPathMotion: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.PatternPathMotion: void <init>(android.graphics.Path)>
<android.transition.PatternPathMotion: android.graphics.Path getPath(float,float,float,float)>
<android.transition.PatternPathMotion: android.graphics.Path getPatternPath()>
<android.transition.PatternPathMotion: void setPatternPath(android.graphics.Path)>
android.transition.Scene
<android.transition.Scene: void <init>(android.view.ViewGroup)>
<android.transition.Scene: void <init>(android.view.ViewGroup,android.view.View)>
<android.transition.Scene: void <init>(android.view.ViewGroup,android.view.ViewGroup)>
<android.transition.Scene: void enter()>
<android.transition.Scene: void exit()>
<android.transition.Scene: android.transition.Scene getCurrentScene(android.view.ViewGroup)>
<android.transition.Scene: android.transition.Scene getSceneForLayout(android.view.ViewGroup,int,android.content.Context)>
<android.transition.Scene: android.view.ViewGroup getSceneRoot()>
<android.transition.Scene: void setEnterAction(java.lang.Runnable)>
<android.transition.Scene: void setExitAction(java.lang.Runnable)>
android.transition.SidePropagation
<android.transition.SidePropagation: void <init>()>
<android.transition.SidePropagation: long getStartDelay(android.view.ViewGroup,android.transition.Transition,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.transition.SidePropagation: void setPropagationSpeed(float)>
<android.transition.SidePropagation: void setSide(int)>
android.transition.Slide
<android.transition.Slide: void <init>()>
<android.transition.Slide: void <init>(int)>
<android.transition.Slide: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.Slide: int getSlideEdge()>
<android.transition.Slide: void setSlideEdge(int)>
android.transition.Transition
<android.transition.Transition: void <init>()>
<android.transition.Transition: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.Transition: android.transition.Transition addListener(android.transition.Transition$TransitionListener)>
<android.transition.Transition: android.transition.Transition addTarget(int)>
<android.transition.Transition: android.transition.Transition addTarget(java.lang.String)>
<android.transition.Transition: android.transition.Transition addTarget(java.lang.Class)>
<android.transition.Transition: android.transition.Transition addTarget(android.view.View)>
<android.transition.Transition: boolean canRemoveViews()>
<android.transition.Transition: void captureEndValues(android.transition.TransitionValues)>
<android.transition.Transition: void captureStartValues(android.transition.TransitionValues)>
<android.transition.Transition: android.transition.Transition clone()>
<android.transition.Transition: android.animation.Animator createAnimator(android.view.ViewGroup,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.transition.Transition: android.transition.Transition excludeChildren(int,boolean)>
<android.transition.Transition: android.transition.Transition excludeChildren(android.view.View,boolean)>
<android.transition.Transition: android.transition.Transition excludeChildren(java.lang.Class,boolean)>
<android.transition.Transition: android.transition.Transition excludeTarget(int,boolean)>
<android.transition.Transition: android.transition.Transition excludeTarget(java.lang.String,boolean)>
<android.transition.Transition: android.transition.Transition excludeTarget(android.view.View,boolean)>
<android.transition.Transition: android.transition.Transition excludeTarget(java.lang.Class,boolean)>
<android.transition.Transition: long getDuration()>
<android.transition.Transition: android.graphics.Rect getEpicenter()>
<android.transition.Transition: android.transition.Transition$EpicenterCallback getEpicenterCallback()>
<android.transition.Transition: android.animation.TimeInterpolator getInterpolator()>
<android.transition.Transition: java.lang.String getName()>
<android.transition.Transition: android.transition.PathMotion getPathMotion()>
<android.transition.Transition: android.transition.TransitionPropagation getPropagation()>
<android.transition.Transition: long getStartDelay()>
<android.transition.Transition: java.util.List getTargetIds()>
<android.transition.Transition: java.util.List getTargetNames()>
<android.transition.Transition: java.util.List getTargetTypes()>
<android.transition.Transition: java.util.List getTargets()>
<android.transition.Transition: java.lang.String[] getTransitionProperties()>
<android.transition.Transition: android.transition.TransitionValues getTransitionValues(android.view.View,boolean)>
<android.transition.Transition: boolean isTransitionRequired(android.transition.TransitionValues,android.transition.TransitionValues)>
<android.transition.Transition: android.transition.Transition removeListener(android.transition.Transition$TransitionListener)>
<android.transition.Transition: android.transition.Transition removeTarget(int)>
<android.transition.Transition: android.transition.Transition removeTarget(java.lang.String)>
<android.transition.Transition: android.transition.Transition removeTarget(android.view.View)>
<android.transition.Transition: android.transition.Transition removeTarget(java.lang.Class)>
<android.transition.Transition: android.transition.Transition setDuration(long)>
<android.transition.Transition: void setEpicenterCallback(android.transition.Transition$EpicenterCallback)>
<android.transition.Transition: android.transition.Transition setInterpolator(android.animation.TimeInterpolator)>
<android.transition.Transition: void setMatchOrder(int[])>
<android.transition.Transition: void setPathMotion(android.transition.PathMotion)>
<android.transition.Transition: void setPropagation(android.transition.TransitionPropagation)>
<android.transition.Transition: android.transition.Transition setStartDelay(long)>
<android.transition.Transition: int MATCH_ID>
<android.transition.Transition: int MATCH_INSTANCE>
<android.transition.Transition: int MATCH_ITEM_ID>
<android.transition.Transition: int MATCH_NAME>
android.transition.Transition$EpicenterCallback
<android.transition.Transition$EpicenterCallback: void <init>()>
<android.transition.Transition$EpicenterCallback: android.graphics.Rect onGetEpicenter(android.transition.Transition)>
android.transition.Transition$TransitionListener
<android.transition.Transition$TransitionListener: void onTransitionCancel(android.transition.Transition)>
<android.transition.Transition$TransitionListener: void onTransitionEnd(android.transition.Transition)>
<android.transition.Transition$TransitionListener: void onTransitionPause(android.transition.Transition)>
<android.transition.Transition$TransitionListener: void onTransitionResume(android.transition.Transition)>
<android.transition.Transition$TransitionListener: void onTransitionStart(android.transition.Transition)>
android.transition.TransitionInflater
<android.transition.TransitionInflater: android.transition.TransitionInflater from(android.content.Context)>
<android.transition.TransitionInflater: android.transition.Transition inflateTransition(int)>
<android.transition.TransitionInflater: android.transition.TransitionManager inflateTransitionManager(int,android.view.ViewGroup)>
android.transition.TransitionListenerAdapter
<android.transition.TransitionListenerAdapter: void <init>()>
<android.transition.TransitionListenerAdapter: void onTransitionCancel(android.transition.Transition)>
<android.transition.TransitionListenerAdapter: void onTransitionEnd(android.transition.Transition)>
<android.transition.TransitionListenerAdapter: void onTransitionPause(android.transition.Transition)>
<android.transition.TransitionListenerAdapter: void onTransitionResume(android.transition.Transition)>
<android.transition.TransitionListenerAdapter: void onTransitionStart(android.transition.Transition)>
android.transition.TransitionManager
<android.transition.TransitionManager: void <init>()>
<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>
<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,android.transition.Transition)>
<android.transition.TransitionManager: void endTransitions(android.view.ViewGroup)>
<android.transition.TransitionManager: void go(android.transition.Scene)>
<android.transition.TransitionManager: void go(android.transition.Scene,android.transition.Transition)>
<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Transition)>
<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Scene,android.transition.Transition)>
<android.transition.TransitionManager: void transitionTo(android.transition.Scene)>
android.transition.TransitionPropagation
<android.transition.TransitionPropagation: void <init>()>
<android.transition.TransitionPropagation: void captureValues(android.transition.TransitionValues)>
<android.transition.TransitionPropagation: java.lang.String[] getPropagationProperties()>
<android.transition.TransitionPropagation: long getStartDelay(android.view.ViewGroup,android.transition.Transition,android.transition.TransitionValues,android.transition.TransitionValues)>
android.transition.TransitionSet
<android.transition.TransitionSet: void <init>()>
<android.transition.TransitionSet: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.TransitionSet: android.transition.TransitionSet addListener(android.transition.Transition$TransitionListener)>
<android.transition.TransitionSet: android.transition.TransitionSet addTarget(android.view.View)>
<android.transition.TransitionSet: android.transition.TransitionSet addTarget(int)>
<android.transition.TransitionSet: android.transition.TransitionSet addTarget(java.lang.String)>
<android.transition.TransitionSet: android.transition.TransitionSet addTarget(java.lang.Class)>
<android.transition.TransitionSet: android.transition.TransitionSet addTransition(android.transition.Transition)>
<android.transition.TransitionSet: void captureEndValues(android.transition.TransitionValues)>
<android.transition.TransitionSet: void captureStartValues(android.transition.TransitionValues)>
<android.transition.TransitionSet: android.transition.TransitionSet clone()>
<android.transition.TransitionSet: int getOrdering()>
<android.transition.TransitionSet: android.transition.Transition getTransitionAt(int)>
<android.transition.TransitionSet: int getTransitionCount()>
<android.transition.TransitionSet: android.transition.TransitionSet removeListener(android.transition.Transition$TransitionListener)>
<android.transition.TransitionSet: android.transition.TransitionSet removeTarget(int)>
<android.transition.TransitionSet: android.transition.TransitionSet removeTarget(android.view.View)>
<android.transition.TransitionSet: android.transition.TransitionSet removeTarget(java.lang.Class)>
<android.transition.TransitionSet: android.transition.TransitionSet removeTarget(java.lang.String)>
<android.transition.TransitionSet: android.transition.TransitionSet removeTransition(android.transition.Transition)>
<android.transition.TransitionSet: android.transition.TransitionSet setDuration(long)>
<android.transition.TransitionSet: android.transition.TransitionSet setInterpolator(android.animation.TimeInterpolator)>
<android.transition.TransitionSet: android.transition.TransitionSet setOrdering(int)>
<android.transition.TransitionSet: android.transition.TransitionSet setStartDelay(long)>
<android.transition.TransitionSet: int ORDERING_SEQUENTIAL>
<android.transition.TransitionSet: int ORDERING_TOGETHER>
android.transition.TransitionValues
<android.transition.TransitionValues: void <init>()>
<android.transition.TransitionValues: void <init>(android.view.View)>
<android.transition.TransitionValues: java.util.Map values>
<android.transition.TransitionValues: android.view.View view>
android.transition.Visibility
<android.transition.Visibility: void <init>()>
<android.transition.Visibility: void <init>(android.content.Context,android.util.AttributeSet)>
<android.transition.Visibility: void captureEndValues(android.transition.TransitionValues)>
<android.transition.Visibility: void captureStartValues(android.transition.TransitionValues)>
<android.transition.Visibility: int getMode()>
<android.transition.Visibility: boolean isVisible(android.transition.TransitionValues)>
<android.transition.Visibility: android.animation.Animator onAppear(android.view.ViewGroup,android.transition.TransitionValues,int,android.transition.TransitionValues,int)>
<android.transition.Visibility: android.animation.Animator onAppear(android.view.ViewGroup,android.view.View,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.transition.Visibility: android.animation.Animator onDisappear(android.view.ViewGroup,android.transition.TransitionValues,int,android.transition.TransitionValues,int)>
<android.transition.Visibility: android.animation.Animator onDisappear(android.view.ViewGroup,android.view.View,android.transition.TransitionValues,android.transition.TransitionValues)>
<android.transition.Visibility: void setMode(int)>
<android.transition.Visibility: int MODE_IN>
<android.transition.Visibility: int MODE_OUT>
android.transition.VisibilityPropagation
<android.transition.VisibilityPropagation: void <init>()>
<android.transition.VisibilityPropagation: void captureValues(android.transition.TransitionValues)>
<android.transition.VisibilityPropagation: java.lang.String[] getPropagationProperties()>
<android.transition.VisibilityPropagation: int getViewVisibility(android.transition.TransitionValues)>
<android.transition.VisibilityPropagation: int getViewX(android.transition.TransitionValues)>
<android.transition.VisibilityPropagation: int getViewY(android.transition.TransitionValues)>
android.util.AndroidException
<android.util.AndroidException: void <init>()>
<android.util.AndroidException: void <init>(java.lang.String)>
<android.util.AndroidException: void <init>(java.lang.String,java.lang.Throwable)>
<android.util.AndroidException: void <init>(java.lang.Exception)>
android.util.AndroidRuntimeException
<android.util.AndroidRuntimeException: void <init>()>
<android.util.AndroidRuntimeException: void <init>(java.lang.String)>
<android.util.AndroidRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)>
android.util.ArrayMap
<android.util.ArrayMap: void <init>()>
<android.util.ArrayMap: void <init>(int)>
<android.util.ArrayMap: void <init>(android.util.ArrayMap)>
<android.util.ArrayMap: void clear()>
<android.util.ArrayMap: boolean containsAll(java.util.Collection)>
<android.util.ArrayMap: boolean containsKey(java.lang.Object)>
<android.util.ArrayMap: boolean containsValue(java.lang.Object)>
<android.util.ArrayMap: void ensureCapacity(int)>
<android.util.ArrayMap: java.util.Set entrySet()>
<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>
<android.util.ArrayMap: int indexOfKey(java.lang.Object)>
<android.util.ArrayMap: int indexOfValue(java.lang.Object)>
<android.util.ArrayMap: boolean isEmpty()>
<android.util.ArrayMap: java.lang.Object keyAt(int)>
<android.util.ArrayMap: java.util.Set keySet()>
<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<android.util.ArrayMap: void putAll(android.util.ArrayMap)>
<android.util.ArrayMap: void putAll(java.util.Map)>
<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>
<android.util.ArrayMap: boolean removeAll(java.util.Collection)>
<android.util.ArrayMap: java.lang.Object removeAt(int)>
<android.util.ArrayMap: boolean retainAll(java.util.Collection)>
<android.util.ArrayMap: java.lang.Object setValueAt(int,java.lang.Object)>
<android.util.ArrayMap: int size()>
<android.util.ArrayMap: java.lang.Object valueAt(int)>
<android.util.ArrayMap: java.util.Collection values()>
android.util.ArraySet
<android.util.ArraySet: void <init>()>
<android.util.ArraySet: void <init>(int)>
<android.util.ArraySet: void <init>(android.util.ArraySet)>
<android.util.ArraySet: void <init>(java.util.Collection)>
<android.util.ArraySet: void <init>(java.lang.Object[])>
<android.util.ArraySet: boolean add(java.lang.Object)>
<android.util.ArraySet: void addAll(android.util.ArraySet)>
<android.util.ArraySet: boolean addAll(java.util.Collection)>
<android.util.ArraySet: void clear()>
<android.util.ArraySet: boolean contains(java.lang.Object)>
<android.util.ArraySet: boolean containsAll(java.util.Collection)>
<android.util.ArraySet: void ensureCapacity(int)>
<android.util.ArraySet: void forEach(java.util.function.Consumer)>
<android.util.ArraySet: int indexOf(java.lang.Object)>
<android.util.ArraySet: boolean isEmpty()>
<android.util.ArraySet: java.util.Iterator iterator()>
<android.util.ArraySet: boolean remove(java.lang.Object)>
<android.util.ArraySet: boolean removeAll(android.util.ArraySet)>
<android.util.ArraySet: boolean removeAll(java.util.Collection)>
<android.util.ArraySet: java.lang.Object removeAt(int)>
<android.util.ArraySet: boolean retainAll(java.util.Collection)>
<android.util.ArraySet: int size()>
<android.util.ArraySet: java.lang.Object[] toArray()>
<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>
<android.util.ArraySet: java.lang.Object valueAt(int)>
android.util.AtomicFile
<android.util.AtomicFile: void <init>(java.io.File)>
<android.util.AtomicFile: void delete()>
<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>
<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>
<android.util.AtomicFile: java.io.File getBaseFile()>
<android.util.AtomicFile: long getLastModifiedTime()>
<android.util.AtomicFile: java.io.FileInputStream openRead()>
<android.util.AtomicFile: byte[] readFully()>
<android.util.AtomicFile: java.io.FileOutputStream startWrite()>
android.util.AttributeSet
<android.util.AttributeSet: boolean getAttributeBooleanValue(java.lang.String,java.lang.String,boolean)>
<android.util.AttributeSet: boolean getAttributeBooleanValue(int,boolean)>
<android.util.AttributeSet: int getAttributeCount()>
<android.util.AttributeSet: float getAttributeFloatValue(java.lang.String,java.lang.String,float)>
<android.util.AttributeSet: float getAttributeFloatValue(int,float)>
<android.util.AttributeSet: int getAttributeIntValue(java.lang.String,java.lang.String,int)>
<android.util.AttributeSet: int getAttributeIntValue(int,int)>
<android.util.AttributeSet: int getAttributeListValue(java.lang.String,java.lang.String,java.lang.String[],int)>
<android.util.AttributeSet: int getAttributeListValue(int,java.lang.String[],int)>
<android.util.AttributeSet: java.lang.String getAttributeName(int)>
<android.util.AttributeSet: int getAttributeNameResource(int)>
<android.util.AttributeSet: java.lang.String getAttributeNamespace(int)>
<android.util.AttributeSet: int getAttributeResourceValue(java.lang.String,java.lang.String,int)>
<android.util.AttributeSet: int getAttributeResourceValue(int,int)>
<android.util.AttributeSet: int getAttributeUnsignedIntValue(java.lang.String,java.lang.String,int)>
<android.util.AttributeSet: int getAttributeUnsignedIntValue(int,int)>
<android.util.AttributeSet: java.lang.String getAttributeValue(int)>
<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>
<android.util.AttributeSet: java.lang.String getClassAttribute()>
<android.util.AttributeSet: java.lang.String getIdAttribute()>
<android.util.AttributeSet: int getIdAttributeResourceValue(int)>
<android.util.AttributeSet: java.lang.String getPositionDescription()>
<android.util.AttributeSet: int getStyleAttribute()>
android.util.Base64
<android.util.Base64: byte[] decode(java.lang.String,int)>
<android.util.Base64: byte[] decode(byte[],int)>
<android.util.Base64: byte[] decode(byte[],int,int,int)>
<android.util.Base64: byte[] encode(byte[],int)>
<android.util.Base64: byte[] encode(byte[],int,int,int)>
<android.util.Base64: java.lang.String encodeToString(byte[],int)>
<android.util.Base64: java.lang.String encodeToString(byte[],int,int,int)>
<android.util.Base64: int CRLF>
<android.util.Base64: int DEFAULT>
<android.util.Base64: int NO_CLOSE>
<android.util.Base64: int NO_PADDING>
<android.util.Base64: int NO_WRAP>
<android.util.Base64: int URL_SAFE>
android.util.Base64DataException
<android.util.Base64DataException: void <init>(java.lang.String)>
android.util.Base64InputStream
<android.util.Base64InputStream: void <init>(java.io.InputStream,int)>
<android.util.Base64InputStream: int available()>
<android.util.Base64InputStream: void reset()>
android.util.Base64OutputStream
<android.util.Base64OutputStream: void <init>(java.io.OutputStream,int)>
android.util.CloseGuard
<android.util.CloseGuard: void <init>()>
<android.util.CloseGuard: void close()>
<android.util.CloseGuard: void open(java.lang.String)>
<android.util.CloseGuard: void warnIfOpen()>
android.util.Config
<android.util.Config: boolean DEBUG>
<android.util.Config: boolean LOGD>
<android.util.Config: boolean LOGV>
<android.util.Config: boolean PROFILE>
<android.util.Config: boolean RELEASE>
android.util.DebugUtils
<android.util.DebugUtils: boolean isObjectSelected(java.lang.Object)>
android.util.DisplayMetrics
<android.util.DisplayMetrics: void <init>()>
<android.util.DisplayMetrics: boolean equals(android.util.DisplayMetrics)>
<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)>
<android.util.DisplayMetrics: void setToDefaults()>
<android.util.DisplayMetrics: int DENSITY_140>
<android.util.DisplayMetrics: int DENSITY_180>
<android.util.DisplayMetrics: int DENSITY_200>
<android.util.DisplayMetrics: int DENSITY_220>
<android.util.DisplayMetrics: int DENSITY_260>
<android.util.DisplayMetrics: int DENSITY_280>
<android.util.DisplayMetrics: int DENSITY_300>
<android.util.DisplayMetrics: int DENSITY_340>
<android.util.DisplayMetrics: int DENSITY_360>
<android.util.DisplayMetrics: int DENSITY_400>
<android.util.DisplayMetrics: int DENSITY_420>
<android.util.DisplayMetrics: int DENSITY_440>
<android.util.DisplayMetrics: int DENSITY_450>
<android.util.DisplayMetrics: int DENSITY_560>
<android.util.DisplayMetrics: int DENSITY_600>
<android.util.DisplayMetrics: int DENSITY_DEFAULT>
<android.util.DisplayMetrics: int DENSITY_DEVICE_STABLE>
<android.util.DisplayMetrics: int DENSITY_HIGH>
<android.util.DisplayMetrics: int DENSITY_LOW>
<android.util.DisplayMetrics: int DENSITY_MEDIUM>
<android.util.DisplayMetrics: int DENSITY_TV>
<android.util.DisplayMetrics: int DENSITY_XHIGH>
<android.util.DisplayMetrics: int DENSITY_XXHIGH>
<android.util.DisplayMetrics: int DENSITY_XXXHIGH>
<android.util.DisplayMetrics: float density>
<android.util.DisplayMetrics: int densityDpi>
<android.util.DisplayMetrics: int heightPixels>
<android.util.DisplayMetrics: float scaledDensity>
<android.util.DisplayMetrics: int widthPixels>
<android.util.DisplayMetrics: float xdpi>
<android.util.DisplayMetrics: float ydpi>
android.util.Dumpable
<android.util.Dumpable: void dump(java.io.PrintWriter,java.lang.String[])>
<android.util.Dumpable: java.lang.String getDumpableName()>
android.util.DumpableContainer
<android.util.DumpableContainer: boolean addDumpable(android.util.Dumpable)>
<android.util.DumpableContainer: boolean removeDumpable(android.util.Dumpable)>
android.util.EventLog
<android.util.EventLog: int getTagCode(java.lang.String)>
<android.util.EventLog: java.lang.String getTagName(int)>
<android.util.EventLog: void readEvents(int[],java.util.Collection)>
<android.util.EventLog: int writeEvent(int,int)>
<android.util.EventLog: int writeEvent(int,long)>
<android.util.EventLog: int writeEvent(int,float)>
<android.util.EventLog: int writeEvent(int,java.lang.String)>
<android.util.EventLog: int writeEvent(int,java.lang.Object[])>
android.util.EventLog$Event
<android.util.EventLog$Event: java.lang.Object getData()>
<android.util.EventLog$Event: int getProcessId()>
<android.util.EventLog$Event: int getTag()>
<android.util.EventLog$Event: int getThreadId()>
<android.util.EventLog$Event: long getTimeNanos()>
android.util.EventLogTags
<android.util.EventLogTags: void <init>()>
<android.util.EventLogTags: void <init>(java.io.BufferedReader)>
<android.util.EventLogTags: android.util.EventLogTags$Description get(java.lang.String)>
<android.util.EventLogTags: android.util.EventLogTags$Description get(int)>
android.util.EventLogTags$Description
<android.util.EventLogTags$Description: java.lang.String mName>
<android.util.EventLogTags$Description: int mTag>
android.util.FloatMath
android.util.FloatProperty
<android.util.FloatProperty: void <init>(java.lang.String)>
<android.util.FloatProperty: void set(java.lang.Object,java.lang.Float)>
<android.util.FloatProperty: void setValue(java.lang.Object,float)>
android.util.Half
<android.util.Half: void <init>(short)>
<android.util.Half: void <init>(float)>
<android.util.Half: void <init>(double)>
<android.util.Half: void <init>(java.lang.String)>
<android.util.Half: short abs(short)>
<android.util.Half: short ceil(short)>
<android.util.Half: int compare(short,short)>
<android.util.Half: int compareTo(android.util.Half)>
<android.util.Half: short copySign(short,short)>
<android.util.Half: double doubleValue()>
<android.util.Half: boolean equals(short,short)>
<android.util.Half: float floatValue()>
<android.util.Half: short floor(short)>
<android.util.Half: int getExponent(short)>
<android.util.Half: int getSign(short)>
<android.util.Half: int getSignificand(short)>
<android.util.Half: boolean greater(short,short)>
<android.util.Half: boolean greaterEquals(short,short)>
<android.util.Half: int halfToIntBits(short)>
<android.util.Half: int halfToRawIntBits(short)>
<android.util.Half: short halfToShortBits(short)>
<android.util.Half: short halfValue()>
<android.util.Half: int hashCode(short)>
<android.util.Half: short intBitsToHalf(int)>
<android.util.Half: int intValue()>
<android.util.Half: boolean isInfinite(short)>
<android.util.Half: boolean isNaN()>
<android.util.Half: boolean isNaN(short)>
<android.util.Half: boolean isNormalized(short)>
<android.util.Half: boolean less(short,short)>
<android.util.Half: boolean lessEquals(short,short)>
<android.util.Half: long longValue()>
<android.util.Half: short max(short,short)>
<android.util.Half: short min(short,short)>
<android.util.Half: short parseHalf(java.lang.String)>
<android.util.Half: short round(short)>
<android.util.Half: float toFloat(short)>
<android.util.Half: short toHalf(float)>
<android.util.Half: java.lang.String toHexString(short)>
<android.util.Half: java.lang.String toString(short)>
<android.util.Half: short trunc(short)>
<android.util.Half: android.util.Half valueOf(short)>
<android.util.Half: android.util.Half valueOf(float)>
<android.util.Half: android.util.Half valueOf(java.lang.String)>
<android.util.Half: short EPSILON>
<android.util.Half: short LOWEST_VALUE>
<android.util.Half: int MAX_EXPONENT>
<android.util.Half: short MAX_VALUE>
<android.util.Half: int MIN_EXPONENT>
<android.util.Half: short MIN_NORMAL>
<android.util.Half: short MIN_VALUE>
<android.util.Half: short NEGATIVE_INFINITY>
<android.util.Half: short NEGATIVE_ZERO>
<android.util.Half: short NaN>
<android.util.Half: short POSITIVE_INFINITY>
<android.util.Half: short POSITIVE_ZERO>
<android.util.Half: int SIZE>
android.util.IntProperty
<android.util.IntProperty: void <init>(java.lang.String)>
<android.util.IntProperty: void set(java.lang.Object,java.lang.Integer)>
<android.util.IntProperty: void setValue(java.lang.Object,int)>
android.util.JsonReader
<android.util.JsonReader: void <init>(java.io.Reader)>
<android.util.JsonReader: void beginArray()>
<android.util.JsonReader: void beginObject()>
<android.util.JsonReader: void close()>
<android.util.JsonReader: void endArray()>
<android.util.JsonReader: void endObject()>
<android.util.JsonReader: boolean hasNext()>
<android.util.JsonReader: boolean isLenient()>
<android.util.JsonReader: boolean nextBoolean()>
<android.util.JsonReader: double nextDouble()>
<android.util.JsonReader: int nextInt()>
<android.util.JsonReader: long nextLong()>
<android.util.JsonReader: java.lang.String nextName()>
<android.util.JsonReader: void nextNull()>
<android.util.JsonReader: java.lang.String nextString()>
<android.util.JsonReader: android.util.JsonToken peek()>
<android.util.JsonReader: void setLenient(boolean)>
<android.util.JsonReader: void skipValue()>
android.util.JsonToken
<android.util.JsonToken: android.util.JsonToken BEGIN_ARRAY>
<android.util.JsonToken: android.util.JsonToken BEGIN_OBJECT>
<android.util.JsonToken: android.util.JsonToken BOOLEAN>
<android.util.JsonToken: android.util.JsonToken END_ARRAY>
<android.util.JsonToken: android.util.JsonToken END_DOCUMENT>
<android.util.JsonToken: android.util.JsonToken END_OBJECT>
<android.util.JsonToken: android.util.JsonToken NAME>
<android.util.JsonToken: android.util.JsonToken NULL>
<android.util.JsonToken: android.util.JsonToken NUMBER>
<android.util.JsonToken: android.util.JsonToken STRING>
android.util.JsonWriter
<android.util.JsonWriter: void <init>(java.io.Writer)>
<android.util.JsonWriter: android.util.JsonWriter beginArray()>
<android.util.JsonWriter: android.util.JsonWriter beginObject()>
<android.util.JsonWriter: void close()>
<android.util.JsonWriter: android.util.JsonWriter endArray()>
<android.util.JsonWriter: android.util.JsonWriter endObject()>
<android.util.JsonWriter: void flush()>
<android.util.JsonWriter: boolean isLenient()>
<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>
<android.util.JsonWriter: android.util.JsonWriter nullValue()>
<android.util.JsonWriter: void setIndent(java.lang.String)>
<android.util.JsonWriter: void setLenient(boolean)>
<android.util.JsonWriter: android.util.JsonWriter value(java.lang.String)>
<android.util.JsonWriter: android.util.JsonWriter value(boolean)>
<android.util.JsonWriter: android.util.JsonWriter value(double)>
<android.util.JsonWriter: android.util.JsonWriter value(long)>
<android.util.JsonWriter: android.util.JsonWriter value(java.lang.Number)>
android.util.LayoutDirection
<android.util.LayoutDirection: int INHERIT>
<android.util.LayoutDirection: int LOCALE>
<android.util.LayoutDirection: int LTR>
<android.util.LayoutDirection: int RTL>
android.util.Log
<android.util.Log: int d(java.lang.String,java.lang.String)>
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int e(java.lang.String,java.lang.String)>
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>
<android.util.Log: int i(java.lang.String,java.lang.String)>
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: boolean isLoggable(java.lang.String,int)>
<android.util.Log: int println(int,java.lang.String,java.lang.String)>
<android.util.Log: int v(java.lang.String,java.lang.String)>
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int w(java.lang.String,java.lang.String)>
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int w(java.lang.String,java.lang.Throwable)>
<android.util.Log: int wtf(java.lang.String,java.lang.String)>
<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int ASSERT>
<android.util.Log: int DEBUG>
<android.util.Log: int ERROR>
<android.util.Log: int INFO>
<android.util.Log: int VERBOSE>
<android.util.Log: int WARN>
android.util.LogPrinter
<android.util.LogPrinter: void <init>(int,java.lang.String)>
<android.util.LogPrinter: void println(java.lang.String)>
android.util.LongSparseArray
<android.util.LongSparseArray: void <init>()>
<android.util.LongSparseArray: void <init>(int)>
<android.util.LongSparseArray: void append(long,java.lang.Object)>
<android.util.LongSparseArray: void clear()>
<android.util.LongSparseArray: android.util.LongSparseArray clone()>
<android.util.LongSparseArray: void delete(long)>
<android.util.LongSparseArray: java.lang.Object get(long)>
<android.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)>
<android.util.LongSparseArray: int indexOfKey(long)>
<android.util.LongSparseArray: int indexOfValue(java.lang.Object)>
<android.util.LongSparseArray: long keyAt(int)>
<android.util.LongSparseArray: void put(long,java.lang.Object)>
<android.util.LongSparseArray: void remove(long)>
<android.util.LongSparseArray: void removeAt(int)>
<android.util.LongSparseArray: void setValueAt(int,java.lang.Object)>
<android.util.LongSparseArray: int size()>
<android.util.LongSparseArray: java.lang.Object valueAt(int)>
android.util.LruCache
<android.util.LruCache: void <init>(int)>
<android.util.LruCache: java.lang.Object create(java.lang.Object)>
<android.util.LruCache: int createCount()>
<android.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
<android.util.LruCache: void evictAll()>
<android.util.LruCache: int evictionCount()>
<android.util.LruCache: java.lang.Object get(java.lang.Object)>
<android.util.LruCache: int hitCount()>
<android.util.LruCache: int maxSize()>
<android.util.LruCache: int missCount()>
<android.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
<android.util.LruCache: int putCount()>
<android.util.LruCache: java.lang.Object remove(java.lang.Object)>
<android.util.LruCache: void resize(int)>
<android.util.LruCache: int size()>
<android.util.LruCache: int sizeOf(java.lang.Object,java.lang.Object)>
<android.util.LruCache: java.util.Map snapshot()>
<android.util.LruCache: java.lang.String toString()>
<android.util.LruCache: void trimToSize(int)>
android.util.MalformedJsonException
<android.util.MalformedJsonException: void <init>(java.lang.String)>
android.util.MonthDisplayHelper
<android.util.MonthDisplayHelper: void <init>(int,int,int)>
<android.util.MonthDisplayHelper: void <init>(int,int)>
<android.util.MonthDisplayHelper: int getColumnOf(int)>
<android.util.MonthDisplayHelper: int getDayAt(int,int)>
<android.util.MonthDisplayHelper: int[] getDigitsForRow(int)>
<android.util.MonthDisplayHelper: int getFirstDayOfMonth()>
<android.util.MonthDisplayHelper: int getMonth()>
<android.util.MonthDisplayHelper: int getNumberOfDaysInMonth()>
<android.util.MonthDisplayHelper: int getOffset()>
<android.util.MonthDisplayHelper: int getRowOf(int)>
<android.util.MonthDisplayHelper: int getWeekStartDay()>
<android.util.MonthDisplayHelper: int getYear()>
<android.util.MonthDisplayHelper: boolean isWithinCurrentMonth(int,int)>
<android.util.MonthDisplayHelper: void nextMonth()>
<android.util.MonthDisplayHelper: void previousMonth()>
android.util.MutableBoolean
<android.util.MutableBoolean: void <init>(boolean)>
<android.util.MutableBoolean: boolean value>
android.util.MutableByte
<android.util.MutableByte: void <init>(byte)>
<android.util.MutableByte: byte value>
android.util.MutableChar
<android.util.MutableChar: void <init>(char)>
<android.util.MutableChar: char value>
android.util.MutableDouble
<android.util.MutableDouble: void <init>(double)>
<android.util.MutableDouble: double value>
android.util.MutableFloat
<android.util.MutableFloat: void <init>(float)>
<android.util.MutableFloat: float value>
android.util.MutableInt
<android.util.MutableInt: void <init>(int)>
<android.util.MutableInt: int value>
android.util.MutableLong
<android.util.MutableLong: void <init>(long)>
<android.util.MutableLong: long value>
android.util.MutableShort
<android.util.MutableShort: void <init>(short)>
<android.util.MutableShort: short value>
android.util.NoSuchPropertyException
<android.util.NoSuchPropertyException: void <init>(java.lang.String)>
android.util.Pair
<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>
<android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>
<android.util.Pair: java.lang.Object first>
<android.util.Pair: java.lang.Object second>
android.util.Patterns
<android.util.Patterns: java.lang.String concatGroups(java.util.regex.Matcher)>
<android.util.Patterns: java.lang.String digitsAndPlusOnly(java.util.regex.Matcher)>
<android.util.Patterns: java.util.regex.Pattern DOMAIN_NAME>
<android.util.Patterns: java.util.regex.Pattern EMAIL_ADDRESS>
<android.util.Patterns: java.lang.String GOOD_IRI_CHAR>
<android.util.Patterns: java.util.regex.Pattern IP_ADDRESS>
<android.util.Patterns: java.util.regex.Pattern PHONE>
<android.util.Patterns: java.util.regex.Pattern TOP_LEVEL_DOMAIN>
<android.util.Patterns: java.lang.String TOP_LEVEL_DOMAIN_STR>
<android.util.Patterns: java.lang.String TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL>
<android.util.Patterns: java.util.regex.Pattern WEB_URL>
android.util.PrintStreamPrinter
<android.util.PrintStreamPrinter: void <init>(java.io.PrintStream)>
<android.util.PrintStreamPrinter: void println(java.lang.String)>
android.util.PrintWriterPrinter
<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>
<android.util.PrintWriterPrinter: void println(java.lang.String)>
android.util.Printer
<android.util.Printer: void println(java.lang.String)>
android.util.Property
<android.util.Property: void <init>(java.lang.Class,java.lang.String)>
<android.util.Property: java.lang.Object get(java.lang.Object)>
<android.util.Property: java.lang.String getName()>
<android.util.Property: java.lang.Class getType()>
<android.util.Property: boolean isReadOnly()>
<android.util.Property: android.util.Property of(java.lang.Class,java.lang.Class,java.lang.String)>
<android.util.Property: void set(java.lang.Object,java.lang.Object)>
android.util.Range
<android.util.Range: void <init>(java.lang.Comparable,java.lang.Comparable)>
<android.util.Range: java.lang.Comparable clamp(java.lang.Comparable)>
<android.util.Range: boolean contains(java.lang.Comparable)>
<android.util.Range: boolean contains(android.util.Range)>
<android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>
<android.util.Range: android.util.Range extend(android.util.Range)>
<android.util.Range: android.util.Range extend(java.lang.Comparable,java.lang.Comparable)>
<android.util.Range: android.util.Range extend(java.lang.Comparable)>
<android.util.Range: java.lang.Comparable getLower()>
<android.util.Range: java.lang.Comparable getUpper()>
<android.util.Range: android.util.Range intersect(android.util.Range)>
<android.util.Range: android.util.Range intersect(java.lang.Comparable,java.lang.Comparable)>
android.util.Rational
<android.util.Rational: void <init>(int,int)>
<android.util.Rational: int compareTo(android.util.Rational)>
<android.util.Rational: double doubleValue()>
<android.util.Rational: float floatValue()>
<android.util.Rational: int getDenominator()>
<android.util.Rational: int getNumerator()>
<android.util.Rational: int intValue()>
<android.util.Rational: boolean isFinite()>
<android.util.Rational: boolean isInfinite()>
<android.util.Rational: boolean isNaN()>
<android.util.Rational: boolean isZero()>
<android.util.Rational: long longValue()>
<android.util.Rational: android.util.Rational parseRational(java.lang.String)>
<android.util.Rational: android.util.Rational NEGATIVE_INFINITY>
<android.util.Rational: android.util.Rational NaN>
<android.util.Rational: android.util.Rational POSITIVE_INFINITY>
<android.util.Rational: android.util.Rational ZERO>
android.util.Size
<android.util.Size: void <init>(int,int)>
<android.util.Size: int getHeight()>
<android.util.Size: int getWidth()>
<android.util.Size: android.util.Size parseSize(java.lang.String)>
android.util.SizeF
<android.util.SizeF: void <init>(float,float)>
<android.util.SizeF: int describeContents()>
<android.util.SizeF: float getHeight()>
<android.util.SizeF: float getWidth()>
<android.util.SizeF: android.util.SizeF parseSizeF(java.lang.String)>
<android.util.SizeF: void writeToParcel(android.os.Parcel,int)>
<android.util.SizeF: android.os.Parcelable$Creator CREATOR>
android.util.SparseArray
<android.util.SparseArray: void <init>()>
<android.util.SparseArray: void <init>(int)>
<android.util.SparseArray: void append(int,java.lang.Object)>
<android.util.SparseArray: void clear()>
<android.util.SparseArray: android.util.SparseArray clone()>
<android.util.SparseArray: boolean contains(int)>
<android.util.SparseArray: boolean contentEquals(android.util.SparseArray)>
<android.util.SparseArray: int contentHashCode()>
<android.util.SparseArray: void delete(int)>
<android.util.SparseArray: java.lang.Object get(int)>
<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>
<android.util.SparseArray: int indexOfKey(int)>
<android.util.SparseArray: int indexOfValue(java.lang.Object)>
<android.util.SparseArray: int keyAt(int)>
<android.util.SparseArray: void put(int,java.lang.Object)>
<android.util.SparseArray: void remove(int)>
<android.util.SparseArray: void removeAt(int)>
<android.util.SparseArray: void removeAtRange(int,int)>
<android.util.SparseArray: void set(int,java.lang.Object)>
<android.util.SparseArray: void setValueAt(int,java.lang.Object)>
<android.util.SparseArray: int size()>
<android.util.SparseArray: java.lang.Object valueAt(int)>
android.util.SparseBooleanArray
<android.util.SparseBooleanArray: void <init>()>
<android.util.SparseBooleanArray: void <init>(int)>
<android.util.SparseBooleanArray: void append(int,boolean)>
<android.util.SparseBooleanArray: void clear()>
<android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()>
<android.util.SparseBooleanArray: void delete(int)>
<android.util.SparseBooleanArray: boolean get(int)>
<android.util.SparseBooleanArray: boolean get(int,boolean)>
<android.util.SparseBooleanArray: int indexOfKey(int)>
<android.util.SparseBooleanArray: int indexOfValue(boolean)>
<android.util.SparseBooleanArray: int keyAt(int)>
<android.util.SparseBooleanArray: void put(int,boolean)>
<android.util.SparseBooleanArray: void removeAt(int)>
<android.util.SparseBooleanArray: void setValueAt(int,boolean)>
<android.util.SparseBooleanArray: int size()>
<android.util.SparseBooleanArray: boolean valueAt(int)>
android.util.SparseIntArray
<android.util.SparseIntArray: void <init>()>
<android.util.SparseIntArray: void <init>(int)>
<android.util.SparseIntArray: void append(int,int)>
<android.util.SparseIntArray: void clear()>
<android.util.SparseIntArray: android.util.SparseIntArray clone()>
<android.util.SparseIntArray: void delete(int)>
<android.util.SparseIntArray: int get(int)>
<android.util.SparseIntArray: int get(int,int)>
<android.util.SparseIntArray: int indexOfKey(int)>
<android.util.SparseIntArray: int indexOfValue(int)>
<android.util.SparseIntArray: int keyAt(int)>
<android.util.SparseIntArray: void put(int,int)>
<android.util.SparseIntArray: void removeAt(int)>
<android.util.SparseIntArray: void setValueAt(int,int)>
<android.util.SparseIntArray: int size()>
<android.util.SparseIntArray: int valueAt(int)>
android.util.SparseLongArray
<android.util.SparseLongArray: void <init>()>
<android.util.SparseLongArray: void <init>(int)>
<android.util.SparseLongArray: void append(int,long)>
<android.util.SparseLongArray: void clear()>
<android.util.SparseLongArray: android.util.SparseLongArray clone()>
<android.util.SparseLongArray: void delete(int)>
<android.util.SparseLongArray: long get(int)>
<android.util.SparseLongArray: long get(int,long)>
<android.util.SparseLongArray: int indexOfKey(int)>
<android.util.SparseLongArray: int indexOfValue(long)>
<android.util.SparseLongArray: int keyAt(int)>
<android.util.SparseLongArray: void put(int,long)>
<android.util.SparseLongArray: void removeAt(int)>
<android.util.SparseLongArray: int size()>
<android.util.SparseLongArray: long valueAt(int)>
android.util.StateSet
<android.util.StateSet: java.lang.String dump(int[])>
<android.util.StateSet: boolean isWildCard(int[])>
<android.util.StateSet: boolean stateSetMatches(int[],int[])>
<android.util.StateSet: boolean stateSetMatches(int[],int)>
<android.util.StateSet: int[] trimStateSet(int[],int)>
<android.util.StateSet: int[] NOTHING>
<android.util.StateSet: int[] WILD_CARD>
android.util.StringBuilderPrinter
<android.util.StringBuilderPrinter: void <init>(java.lang.StringBuilder)>
<android.util.StringBuilderPrinter: void println(java.lang.String)>
android.util.TimeFormatException
android.util.TimeUtils
<android.util.TimeUtils: java.util.TimeZone getTimeZone(int,boolean,long,java.lang.String)>
<android.util.TimeUtils: java.lang.String getTimeZoneDatabaseVersion()>
<android.util.TimeUtils: java.util.List getTimeZoneIdsForCountryCode(java.lang.String)>
<android.util.TimeUtils: boolean isTimeBetween(java.time.LocalTime,java.time.LocalTime,java.time.LocalTime)>
android.util.TimingLogger
<android.util.TimingLogger: void <init>(java.lang.String,java.lang.String)>
<android.util.TimingLogger: void addSplit(java.lang.String)>
<android.util.TimingLogger: void dumpToLog()>
<android.util.TimingLogger: void reset(java.lang.String,java.lang.String)>
<android.util.TimingLogger: void reset()>
android.util.TypedValue
<android.util.TypedValue: void <init>()>
<android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>
<android.util.TypedValue: java.lang.CharSequence coerceToString()>
<android.util.TypedValue: java.lang.String coerceToString(int,int)>
<android.util.TypedValue: float complexToDimension(int,android.util.DisplayMetrics)>
<android.util.TypedValue: int complexToDimensionPixelOffset(int,android.util.DisplayMetrics)>
<android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)>
<android.util.TypedValue: float complexToFloat(int)>
<android.util.TypedValue: float complexToFraction(int,float,float)>
<android.util.TypedValue: int getComplexUnit()>
<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>
<android.util.TypedValue: float getFloat()>
<android.util.TypedValue: float getFraction(float,float)>
<android.util.TypedValue: boolean isColorType()>
<android.util.TypedValue: void setTo(android.util.TypedValue)>
<android.util.TypedValue: int COMPLEX_MANTISSA_MASK>
<android.util.TypedValue: int COMPLEX_MANTISSA_SHIFT>
<android.util.TypedValue: int COMPLEX_RADIX_0p23>
<android.util.TypedValue: int COMPLEX_RADIX_16p7>
<android.util.TypedValue: int COMPLEX_RADIX_23p0>
<android.util.TypedValue: int COMPLEX_RADIX_8p15>
<android.util.TypedValue: int COMPLEX_RADIX_MASK>
<android.util.TypedValue: int COMPLEX_RADIX_SHIFT>
<android.util.TypedValue: int COMPLEX_UNIT_DIP>
<android.util.TypedValue: int COMPLEX_UNIT_FRACTION>
<android.util.TypedValue: int COMPLEX_UNIT_FRACTION_PARENT>
<android.util.TypedValue: int COMPLEX_UNIT_IN>
<android.util.TypedValue: int COMPLEX_UNIT_MASK>
<android.util.TypedValue: int COMPLEX_UNIT_MM>
<android.util.TypedValue: int COMPLEX_UNIT_PT>
<android.util.TypedValue: int COMPLEX_UNIT_PX>
<android.util.TypedValue: int COMPLEX_UNIT_SHIFT>
<android.util.TypedValue: int COMPLEX_UNIT_SP>
<android.util.TypedValue: int DATA_NULL_EMPTY>
<android.util.TypedValue: int DATA_NULL_UNDEFINED>
<android.util.TypedValue: int DENSITY_DEFAULT>
<android.util.TypedValue: int DENSITY_NONE>
<android.util.TypedValue: int TYPE_ATTRIBUTE>
<android.util.TypedValue: int TYPE_DIMENSION>
<android.util.TypedValue: int TYPE_FIRST_COLOR_INT>
<android.util.TypedValue: int TYPE_FIRST_INT>
<android.util.TypedValue: int TYPE_FLOAT>
<android.util.TypedValue: int TYPE_FRACTION>
<android.util.TypedValue: int TYPE_INT_BOOLEAN>
<android.util.TypedValue: int TYPE_INT_COLOR_ARGB4>
<android.util.TypedValue: int TYPE_INT_COLOR_ARGB8>
<android.util.TypedValue: int TYPE_INT_COLOR_RGB4>
<android.util.TypedValue: int TYPE_INT_COLOR_RGB8>
<android.util.TypedValue: int TYPE_INT_DEC>
<android.util.TypedValue: int TYPE_INT_HEX>
<android.util.TypedValue: int TYPE_LAST_COLOR_INT>
<android.util.TypedValue: int TYPE_LAST_INT>
<android.util.TypedValue: int TYPE_NULL>
<android.util.TypedValue: int TYPE_REFERENCE>
<android.util.TypedValue: int TYPE_STRING>
<android.util.TypedValue: int assetCookie>
<android.util.TypedValue: int changingConfigurations>
<android.util.TypedValue: int data>
<android.util.TypedValue: int density>
<android.util.TypedValue: int resourceId>
<android.util.TypedValue: int sourceResourceId>
<android.util.TypedValue: java.lang.CharSequence string>
<android.util.TypedValue: int type>
android.util.Xml
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>
<android.util.Xml: android.util.Xml$Encoding findEncodingByName(java.lang.String)>
<android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>
<android.util.Xml: org.xmlpull.v1.XmlSerializer newSerializer()>
<android.util.Xml: void parse(java.lang.String,org.xml.sax.ContentHandler)>
<android.util.Xml: void parse(java.io.Reader,org.xml.sax.ContentHandler)>
<android.util.Xml: void parse(java.io.InputStream,android.util.Xml$Encoding,org.xml.sax.ContentHandler)>
<android.util.Xml: java.lang.String FEATURE_RELAXED>
android.util.Xml$Encoding
<android.util.Xml$Encoding: android.util.Xml$Encoding ISO_8859_1>
<android.util.Xml$Encoding: android.util.Xml$Encoding US_ASCII>
<android.util.Xml$Encoding: android.util.Xml$Encoding UTF_16>
<android.util.Xml$Encoding: android.util.Xml$Encoding UTF_8>
android.util.proto.ProtoOutputStream
<android.util.proto.ProtoOutputStream: void <init>()>
<android.util.proto.ProtoOutputStream: void <init>(int)>
<android.util.proto.ProtoOutputStream: void <init>(java.io.OutputStream)>
<android.util.proto.ProtoOutputStream: int checkFieldId(long,long)>
<android.util.proto.ProtoOutputStream: void dump(java.lang.String)>
<android.util.proto.ProtoOutputStream: void end(long)>
<android.util.proto.ProtoOutputStream: void flush()>
<android.util.proto.ProtoOutputStream: byte[] getBytes()>
<android.util.proto.ProtoOutputStream: java.lang.String getFieldCountString(long)>
<android.util.proto.ProtoOutputStream: java.lang.String getFieldIdString(long)>
<android.util.proto.ProtoOutputStream: java.lang.String getFieldTypeString(long)>
<android.util.proto.ProtoOutputStream: int getRawSize()>
<android.util.proto.ProtoOutputStream: java.lang.String getWireTypeString(int)>
<android.util.proto.ProtoOutputStream: long makeFieldId(int,long)>
<android.util.proto.ProtoOutputStream: long makeToken(int,boolean,int,int,int)>
<android.util.proto.ProtoOutputStream: long start(long)>
<android.util.proto.ProtoOutputStream: java.lang.String token2String(long)>
<android.util.proto.ProtoOutputStream: void write(long,double)>
<android.util.proto.ProtoOutputStream: void write(long,float)>
<android.util.proto.ProtoOutputStream: void write(long,int)>
<android.util.proto.ProtoOutputStream: void write(long,long)>
<android.util.proto.ProtoOutputStream: void write(long,boolean)>
<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>
<android.util.proto.ProtoOutputStream: void write(long,byte[])>
<android.util.proto.ProtoOutputStream: void writeTag(int,int)>
<android.util.proto.ProtoOutputStream: long FIELD_COUNT_MASK>
<android.util.proto.ProtoOutputStream: long FIELD_COUNT_PACKED>
<android.util.proto.ProtoOutputStream: long FIELD_COUNT_REPEATED>
<android.util.proto.ProtoOutputStream: int FIELD_COUNT_SHIFT>
<android.util.proto.ProtoOutputStream: long FIELD_COUNT_SINGLE>
<android.util.proto.ProtoOutputStream: long FIELD_COUNT_UNKNOWN>
<android.util.proto.ProtoOutputStream: int FIELD_ID_SHIFT>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_BOOL>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_BYTES>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_DOUBLE>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_ENUM>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_FIXED32>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_FIXED64>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_FLOAT>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_INT32>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_INT64>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_MASK>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_MESSAGE>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_SFIXED32>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_SFIXED64>
<android.util.proto.ProtoOutputStream: int FIELD_TYPE_SHIFT>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_SINT32>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_SINT64>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_STRING>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_UINT32>
<android.util.proto.ProtoOutputStream: long FIELD_TYPE_UINT64>
<android.util.proto.ProtoOutputStream: int WIRE_TYPE_END_GROUP>
<android.util.proto.ProtoOutputStream: int WIRE_TYPE_FIXED32>
<android.util.proto.ProtoOutputStream: int WIRE_TYPE_FIXED64>
<android.util.proto.ProtoOutputStream: int WIRE_TYPE_LENGTH_DELIMITED>
<android.util.proto.ProtoOutputStream: int WIRE_TYPE_MASK>
<android.util.proto.ProtoOutputStream: int WIRE_TYPE_START_GROUP>
<android.util.proto.ProtoOutputStream: int WIRE_TYPE_VARINT>
android.view.AbsSavedState
<android.view.AbsSavedState: void <init>(android.os.Parcelable)>
<android.view.AbsSavedState: void <init>(android.os.Parcel)>
<android.view.AbsSavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>
<android.view.AbsSavedState: int describeContents()>
<android.view.AbsSavedState: android.os.Parcelable getSuperState()>
<android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)>
<android.view.AbsSavedState: android.os.Parcelable$Creator CREATOR>
<android.view.AbsSavedState: android.view.AbsSavedState EMPTY_STATE>
android.view.ActionMode
<android.view.ActionMode: void <init>()>
<android.view.ActionMode: void finish()>
<android.view.ActionMode: android.view.View getCustomView()>
<android.view.ActionMode: android.view.Menu getMenu()>
<android.view.ActionMode: android.view.MenuInflater getMenuInflater()>
<android.view.ActionMode: java.lang.CharSequence getSubtitle()>
<android.view.ActionMode: java.lang.Object getTag()>
<android.view.ActionMode: java.lang.CharSequence getTitle()>
<android.view.ActionMode: boolean getTitleOptionalHint()>
<android.view.ActionMode: int getType()>
<android.view.ActionMode: void hide(long)>
<android.view.ActionMode: void invalidate()>
<android.view.ActionMode: void invalidateContentRect()>
<android.view.ActionMode: boolean isTitleOptional()>
<android.view.ActionMode: void onWindowFocusChanged(boolean)>
<android.view.ActionMode: void setCustomView(android.view.View)>
<android.view.ActionMode: void setSubtitle(java.lang.CharSequence)>
<android.view.ActionMode: void setSubtitle(int)>
<android.view.ActionMode: void setTag(java.lang.Object)>
<android.view.ActionMode: void setTitle(java.lang.CharSequence)>
<android.view.ActionMode: void setTitle(int)>
<android.view.ActionMode: void setTitleOptionalHint(boolean)>
<android.view.ActionMode: void setType(int)>
<android.view.ActionMode: int DEFAULT_HIDE_DURATION>
<android.view.ActionMode: int TYPE_FLOATING>
<android.view.ActionMode: int TYPE_PRIMARY>
android.view.ActionMode$Callback
<android.view.ActionMode$Callback: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)>
<android.view.ActionMode$Callback: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)>
<android.view.ActionMode$Callback: void onDestroyActionMode(android.view.ActionMode)>
<android.view.ActionMode$Callback: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)>
android.view.ActionMode$Callback2
<android.view.ActionMode$Callback2: void <init>()>
<android.view.ActionMode$Callback2: void onGetContentRect(android.view.ActionMode,android.view.View,android.graphics.Rect)>
android.view.ActionProvider
<android.view.ActionProvider: void <init>(android.content.Context)>
<android.view.ActionProvider: boolean hasSubMenu()>
<android.view.ActionProvider: boolean isVisible()>
<android.view.ActionProvider: android.view.View onCreateActionView()>
<android.view.ActionProvider: android.view.View onCreateActionView(android.view.MenuItem)>
<android.view.ActionProvider: boolean onPerformDefaultAction()>
<android.view.ActionProvider: void onPrepareSubMenu(android.view.SubMenu)>
<android.view.ActionProvider: boolean overridesItemVisibility()>
<android.view.ActionProvider: void refreshVisibility()>
<android.view.ActionProvider: void setVisibilityListener(android.view.ActionProvider$VisibilityListener)>
android.view.ActionProvider$VisibilityListener
<android.view.ActionProvider$VisibilityListener: void onActionProviderVisibilityChanged(boolean)>
android.view.AttachedSurfaceControl
<android.view.AttachedSurfaceControl: void addOnBufferTransformHintChangedListener(android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener)>
<android.view.AttachedSurfaceControl: boolean applyTransactionOnDraw(android.view.SurfaceControl$Transaction)>
<android.view.AttachedSurfaceControl: android.view.SurfaceControl$Transaction buildReparentTransaction(android.view.SurfaceControl)>
<android.view.AttachedSurfaceControl: int getBufferTransformHint()>
<android.view.AttachedSurfaceControl: void removeOnBufferTransformHintChangedListener(android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener)>
<android.view.AttachedSurfaceControl: void setTouchableRegion(android.graphics.Region)>
android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener
<android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener: void onBufferTransformHintChanged(int)>
android.view.Choreographer
<android.view.Choreographer: android.view.Choreographer getInstance()>
<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>
<android.view.Choreographer: void postFrameCallbackDelayed(android.view.Choreographer$FrameCallback,long)>
<android.view.Choreographer: void postVsyncCallback(android.view.Choreographer$VsyncCallback)>
<android.view.Choreographer: void removeFrameCallback(android.view.Choreographer$FrameCallback)>
<android.view.Choreographer: void removeVsyncCallback(android.view.Choreographer$VsyncCallback)>
android.view.Choreographer$FrameCallback
<android.view.Choreographer$FrameCallback: void doFrame(long)>
android.view.Choreographer$FrameData
<android.view.Choreographer$FrameData: long getFrameTimeNanos()>
<android.view.Choreographer$FrameData: android.view.Choreographer$FrameTimeline[] getFrameTimelines()>
<android.view.Choreographer$FrameData: android.view.Choreographer$FrameTimeline getPreferredFrameTimeline()>
android.view.Choreographer$FrameTimeline
<android.view.Choreographer$FrameTimeline: long getDeadlineNanos()>
<android.view.Choreographer$FrameTimeline: long getExpectedPresentationTimeNanos()>
<android.view.Choreographer$FrameTimeline: long getVsyncId()>
android.view.Choreographer$VsyncCallback
<android.view.Choreographer$VsyncCallback: void onVsync(android.view.Choreographer$FrameData)>
android.view.CollapsibleActionView
<android.view.CollapsibleActionView: void onActionViewCollapsed()>
<android.view.CollapsibleActionView: void onActionViewExpanded()>
android.view.ContentInfo
<android.view.ContentInfo: int describeContents()>
<android.view.ContentInfo: android.content.ClipData getClip()>
<android.view.ContentInfo: android.os.Bundle getExtras()>
<android.view.ContentInfo: int getFlags()>
<android.view.ContentInfo: android.net.Uri getLinkUri()>
<android.view.ContentInfo: int getSource()>
<android.view.ContentInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.ContentInfo: android.os.Parcelable$Creator CREATOR>
<android.view.ContentInfo: int FLAG_CONVERT_TO_PLAIN_TEXT>
<android.view.ContentInfo: int SOURCE_APP>
<android.view.ContentInfo: int SOURCE_AUTOFILL>
<android.view.ContentInfo: int SOURCE_CLIPBOARD>
<android.view.ContentInfo: int SOURCE_DRAG_AND_DROP>
<android.view.ContentInfo: int SOURCE_INPUT_METHOD>
<android.view.ContentInfo: int SOURCE_PROCESS_TEXT>
android.view.ContentInfo$Builder
<android.view.ContentInfo$Builder: void <init>(android.view.ContentInfo)>
<android.view.ContentInfo$Builder: void <init>(android.content.ClipData,int)>
<android.view.ContentInfo$Builder: android.view.ContentInfo build()>
<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setClip(android.content.ClipData)>
<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setExtras(android.os.Bundle)>
<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setFlags(int)>
<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setLinkUri(android.net.Uri)>
<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setSource(int)>
android.view.ContextMenu
<android.view.ContextMenu: void clearHeader()>
<android.view.ContextMenu: android.view.ContextMenu setHeaderIcon(int)>
<android.view.ContextMenu: android.view.ContextMenu setHeaderIcon(android.graphics.drawable.Drawable)>
<android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(int)>
<android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(java.lang.CharSequence)>
<android.view.ContextMenu: android.view.ContextMenu setHeaderView(android.view.View)>
android.view.ContextMenu$ContextMenuInfo
android.view.ContextThemeWrapper
<android.view.ContextThemeWrapper: void <init>()>
<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)>
<android.view.ContextThemeWrapper: void <init>(android.content.Context,android.content.res.Resources$Theme)>
<android.view.ContextThemeWrapper: void applyOverrideConfiguration(android.content.res.Configuration)>
<android.view.ContextThemeWrapper: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>
<android.view.ContextThemeWrapper: void setTheme(android.content.res.Resources$Theme)>
android.view.Display
<android.view.Display: long getAppVsyncOffsetNanos()>
<android.view.Display: void getCurrentSizeRange(android.graphics.Point,android.graphics.Point)>
<android.view.Display: android.view.DisplayCutout getCutout()>
<android.view.Display: android.hardware.display.DeviceProductInfo getDeviceProductInfo()>
<android.view.Display: int getDisplayId()>
<android.view.Display: int getFlags()>
<android.view.Display: android.view.Display$HdrCapabilities getHdrCapabilities()>
<android.view.Display: int getHeight()>
<android.view.Display: void getMetrics(android.util.DisplayMetrics)>
<android.view.Display: android.view.Display$Mode getMode()>
<android.view.Display: java.lang.String getName()>
<android.view.Display: int getOrientation()>
<android.view.Display: int getPixelFormat()>
<android.view.Display: android.graphics.ColorSpace getPreferredWideGamutColorSpace()>
<android.view.Display: long getPresentationDeadlineNanos()>
<android.view.Display: void getRealMetrics(android.util.DisplayMetrics)>
<android.view.Display: void getRealSize(android.graphics.Point)>
<android.view.Display: void getRectSize(android.graphics.Rect)>
<android.view.Display: float getRefreshRate()>
<android.view.Display: int getRotation()>
<android.view.Display: android.view.RoundedCorner getRoundedCorner(int)>
<android.view.Display: void getSize(android.graphics.Point)>
<android.view.Display: int getState()>
<android.view.Display: android.view.Display$Mode[] getSupportedModes()>
<android.view.Display: float[] getSupportedRefreshRates()>
<android.view.Display: int getWidth()>
<android.view.Display: boolean isHdr()>
<android.view.Display: boolean isMinimalPostProcessingSupported()>
<android.view.Display: boolean isValid()>
<android.view.Display: boolean isWideColorGamut()>
<android.view.Display: int DEFAULT_DISPLAY>
<android.view.Display: int FLAG_PRESENTATION>
<android.view.Display: int FLAG_PRIVATE>
<android.view.Display: int FLAG_ROUND>
<android.view.Display: int FLAG_SECURE>
<android.view.Display: int FLAG_SUPPORTS_PROTECTED_BUFFERS>
<android.view.Display: int INVALID_DISPLAY>
<android.view.Display: int STATE_DOZE>
<android.view.Display: int STATE_DOZE_SUSPEND>
<android.view.Display: int STATE_OFF>
<android.view.Display: int STATE_ON>
<android.view.Display: int STATE_ON_SUSPEND>
<android.view.Display: int STATE_UNKNOWN>
<android.view.Display: int STATE_VR>
android.view.Display$HdrCapabilities
<android.view.Display$HdrCapabilities: int describeContents()>
<android.view.Display$HdrCapabilities: float getDesiredMaxAverageLuminance()>
<android.view.Display$HdrCapabilities: float getDesiredMaxLuminance()>
<android.view.Display$HdrCapabilities: float getDesiredMinLuminance()>
<android.view.Display$HdrCapabilities: int[] getSupportedHdrTypes()>
<android.view.Display$HdrCapabilities: void writeToParcel(android.os.Parcel,int)>
<android.view.Display$HdrCapabilities: android.os.Parcelable$Creator CREATOR>
<android.view.Display$HdrCapabilities: int HDR_TYPE_DOLBY_VISION>
<android.view.Display$HdrCapabilities: int HDR_TYPE_HDR10>
<android.view.Display$HdrCapabilities: int HDR_TYPE_HDR10_PLUS>
<android.view.Display$HdrCapabilities: int HDR_TYPE_HLG>
<android.view.Display$HdrCapabilities: float INVALID_LUMINANCE>
android.view.Display$Mode
<android.view.Display$Mode: int describeContents()>
<android.view.Display$Mode: float[] getAlternativeRefreshRates()>
<android.view.Display$Mode: int getModeId()>
<android.view.Display$Mode: int getPhysicalHeight()>
<android.view.Display$Mode: int getPhysicalWidth()>
<android.view.Display$Mode: float getRefreshRate()>
<android.view.Display$Mode: void writeToParcel(android.os.Parcel,int)>
<android.view.Display$Mode: android.os.Parcelable$Creator CREATOR>
android.view.DisplayCutout
<android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>
<android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Insets)>
<android.view.DisplayCutout: void <init>(android.graphics.Rect,java.util.List)>
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectBottom()>
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectLeft()>
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectRight()>
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectTop()>
<android.view.DisplayCutout: java.util.List getBoundingRects()>
<android.view.DisplayCutout: android.graphics.Path getCutoutPath()>
<android.view.DisplayCutout: int getSafeInsetBottom()>
<android.view.DisplayCutout: int getSafeInsetLeft()>
<android.view.DisplayCutout: int getSafeInsetRight()>
<android.view.DisplayCutout: int getSafeInsetTop()>
<android.view.DisplayCutout: android.graphics.Insets getWaterfallInsets()>
android.view.DisplayCutout$Builder
<android.view.DisplayCutout$Builder: void <init>()>
<android.view.DisplayCutout$Builder: android.view.DisplayCutout build()>
<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectBottom(android.graphics.Rect)>
<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectLeft(android.graphics.Rect)>
<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectRight(android.graphics.Rect)>
<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectTop(android.graphics.Rect)>
<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setCutoutPath(android.graphics.Path)>
<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setSafeInsets(android.graphics.Insets)>
<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setWaterfallInsets(android.graphics.Insets)>
android.view.DragAndDropPermissions
<android.view.DragAndDropPermissions: int describeContents()>
<android.view.DragAndDropPermissions: void release()>
<android.view.DragAndDropPermissions: void writeToParcel(android.os.Parcel,int)>
<android.view.DragAndDropPermissions: android.os.Parcelable$Creator CREATOR>
android.view.DragEvent
<android.view.DragEvent: int describeContents()>
<android.view.DragEvent: int getAction()>
<android.view.DragEvent: android.content.ClipData getClipData()>
<android.view.DragEvent: android.content.ClipDescription getClipDescription()>
<android.view.DragEvent: java.lang.Object getLocalState()>
<android.view.DragEvent: boolean getResult()>
<android.view.DragEvent: float getX()>
<android.view.DragEvent: float getY()>
<android.view.DragEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.DragEvent: int ACTION_DRAG_ENDED>
<android.view.DragEvent: int ACTION_DRAG_ENTERED>
<android.view.DragEvent: int ACTION_DRAG_EXITED>
<android.view.DragEvent: int ACTION_DRAG_LOCATION>
<android.view.DragEvent: int ACTION_DRAG_STARTED>
<android.view.DragEvent: int ACTION_DROP>
<android.view.DragEvent: android.os.Parcelable$Creator CREATOR>
android.view.FocusFinder
<android.view.FocusFinder: android.view.View findNearestTouchable(android.view.ViewGroup,int,int,int,int[])>
<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>
<android.view.FocusFinder: android.view.View findNextFocusFromRect(android.view.ViewGroup,android.graphics.Rect,int)>
<android.view.FocusFinder: android.view.View findNextKeyboardNavigationCluster(android.view.View,android.view.View,int)>
<android.view.FocusFinder: android.view.FocusFinder getInstance()>
android.view.FrameMetrics
<android.view.FrameMetrics: void <init>(android.view.FrameMetrics)>
<android.view.FrameMetrics: long getMetric(int)>
<android.view.FrameMetrics: int ANIMATION_DURATION>
<android.view.FrameMetrics: int COMMAND_ISSUE_DURATION>
<android.view.FrameMetrics: int DEADLINE>
<android.view.FrameMetrics: int DRAW_DURATION>
<android.view.FrameMetrics: int FIRST_DRAW_FRAME>
<android.view.FrameMetrics: int GPU_DURATION>
<android.view.FrameMetrics: int INPUT_HANDLING_DURATION>
<android.view.FrameMetrics: int INTENDED_VSYNC_TIMESTAMP>
<android.view.FrameMetrics: int LAYOUT_MEASURE_DURATION>
<android.view.FrameMetrics: int SWAP_BUFFERS_DURATION>
<android.view.FrameMetrics: int SYNC_DURATION>
<android.view.FrameMetrics: int TOTAL_DURATION>
<android.view.FrameMetrics: int UNKNOWN_DELAY_DURATION>
<android.view.FrameMetrics: int VSYNC_TIMESTAMP>
android.view.FrameStats
<android.view.FrameStats: void <init>()>
<android.view.FrameStats: long getEndTimeNano()>
<android.view.FrameStats: int getFrameCount()>
<android.view.FrameStats: long getFramePresentedTimeNano(int)>
<android.view.FrameStats: long getRefreshPeriodNano()>
<android.view.FrameStats: long getStartTimeNano()>
<android.view.FrameStats: long UNDEFINED_TIME_NANO>
android.view.GestureDetector
<android.view.GestureDetector: void <init>(android.view.GestureDetector$OnGestureListener,android.os.Handler)>
<android.view.GestureDetector: void <init>(android.view.GestureDetector$OnGestureListener)>
<android.view.GestureDetector: void <init>(android.content.Context,android.view.GestureDetector$OnGestureListener)>
<android.view.GestureDetector: void <init>(android.content.Context,android.view.GestureDetector$OnGestureListener,android.os.Handler)>
<android.view.GestureDetector: void <init>(android.content.Context,android.view.GestureDetector$OnGestureListener,android.os.Handler,boolean)>
<android.view.GestureDetector: boolean isLongpressEnabled()>
<android.view.GestureDetector: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.view.GestureDetector: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.GestureDetector: void setContextClickListener(android.view.GestureDetector$OnContextClickListener)>
<android.view.GestureDetector: void setIsLongpressEnabled(boolean)>
<android.view.GestureDetector: void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener)>
android.view.GestureDetector$OnContextClickListener
<android.view.GestureDetector$OnContextClickListener: boolean onContextClick(android.view.MotionEvent)>
android.view.GestureDetector$OnDoubleTapListener
<android.view.GestureDetector$OnDoubleTapListener: boolean onDoubleTap(android.view.MotionEvent)>
<android.view.GestureDetector$OnDoubleTapListener: boolean onDoubleTapEvent(android.view.MotionEvent)>
<android.view.GestureDetector$OnDoubleTapListener: boolean onSingleTapConfirmed(android.view.MotionEvent)>
android.view.GestureDetector$OnGestureListener
<android.view.GestureDetector$OnGestureListener: boolean onDown(android.view.MotionEvent)>
<android.view.GestureDetector$OnGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.view.GestureDetector$OnGestureListener: void onLongPress(android.view.MotionEvent)>
<android.view.GestureDetector$OnGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.view.GestureDetector$OnGestureListener: void onShowPress(android.view.MotionEvent)>
<android.view.GestureDetector$OnGestureListener: boolean onSingleTapUp(android.view.MotionEvent)>
android.view.GestureDetector$SimpleOnGestureListener
<android.view.GestureDetector$SimpleOnGestureListener: void <init>()>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onContextClick(android.view.MotionEvent)>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onDoubleTap(android.view.MotionEvent)>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onDoubleTapEvent(android.view.MotionEvent)>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onDown(android.view.MotionEvent)>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.view.GestureDetector$SimpleOnGestureListener: void onLongPress(android.view.MotionEvent)>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.view.GestureDetector$SimpleOnGestureListener: void onShowPress(android.view.MotionEvent)>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onSingleTapConfirmed(android.view.MotionEvent)>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onSingleTapUp(android.view.MotionEvent)>
android.view.Gravity
<android.view.Gravity: void <init>()>
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect)>
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)>
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect)>
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect,int)>
<android.view.Gravity: void applyDisplay(int,android.graphics.Rect,android.graphics.Rect)>
<android.view.Gravity: void applyDisplay(int,android.graphics.Rect,android.graphics.Rect,int)>
<android.view.Gravity: int getAbsoluteGravity(int,int)>
<android.view.Gravity: boolean isHorizontal(int)>
<android.view.Gravity: boolean isVertical(int)>
<android.view.Gravity: int AXIS_CLIP>
<android.view.Gravity: int AXIS_PULL_AFTER>
<android.view.Gravity: int AXIS_PULL_BEFORE>
<android.view.Gravity: int AXIS_SPECIFIED>
<android.view.Gravity: int AXIS_X_SHIFT>
<android.view.Gravity: int AXIS_Y_SHIFT>
<android.view.Gravity: int BOTTOM>
<android.view.Gravity: int CENTER>
<android.view.Gravity: int CENTER_HORIZONTAL>
<android.view.Gravity: int CENTER_VERTICAL>
<android.view.Gravity: int CLIP_HORIZONTAL>
<android.view.Gravity: int CLIP_VERTICAL>
<android.view.Gravity: int DISPLAY_CLIP_HORIZONTAL>
<android.view.Gravity: int DISPLAY_CLIP_VERTICAL>
<android.view.Gravity: int END>
<android.view.Gravity: int FILL>
<android.view.Gravity: int FILL_HORIZONTAL>
<android.view.Gravity: int FILL_VERTICAL>
<android.view.Gravity: int HORIZONTAL_GRAVITY_MASK>
<android.view.Gravity: int LEFT>
<android.view.Gravity: int NO_GRAVITY>
<android.view.Gravity: int RELATIVE_HORIZONTAL_GRAVITY_MASK>
<android.view.Gravity: int RELATIVE_LAYOUT_DIRECTION>
<android.view.Gravity: int RIGHT>
<android.view.Gravity: int START>
<android.view.Gravity: int TOP>
<android.view.Gravity: int VERTICAL_GRAVITY_MASK>
android.view.HapticFeedbackConstants
<android.view.HapticFeedbackConstants: int CLOCK_TICK>
<android.view.HapticFeedbackConstants: int CONFIRM>
<android.view.HapticFeedbackConstants: int CONTEXT_CLICK>
<android.view.HapticFeedbackConstants: int FLAG_IGNORE_GLOBAL_SETTING>
<android.view.HapticFeedbackConstants: int FLAG_IGNORE_VIEW_SETTING>
<android.view.HapticFeedbackConstants: int GESTURE_END>
<android.view.HapticFeedbackConstants: int GESTURE_START>
<android.view.HapticFeedbackConstants: int KEYBOARD_PRESS>
<android.view.HapticFeedbackConstants: int KEYBOARD_RELEASE>
<android.view.HapticFeedbackConstants: int KEYBOARD_TAP>
<android.view.HapticFeedbackConstants: int LONG_PRESS>
<android.view.HapticFeedbackConstants: int REJECT>
<android.view.HapticFeedbackConstants: int TEXT_HANDLE_MOVE>
<android.view.HapticFeedbackConstants: int VIRTUAL_KEY>
<android.view.HapticFeedbackConstants: int VIRTUAL_KEY_RELEASE>
android.view.InflateException
<android.view.InflateException: void <init>()>
<android.view.InflateException: void <init>(java.lang.String,java.lang.Throwable)>
<android.view.InflateException: void <init>(java.lang.String)>
<android.view.InflateException: void <init>(java.lang.Throwable)>
android.view.InputDevice
<android.view.InputDevice: int describeContents()>
<android.view.InputDevice: android.hardware.BatteryState getBatteryState()>
<android.view.InputDevice: int getControllerNumber()>
<android.view.InputDevice: java.lang.String getDescriptor()>
<android.view.InputDevice: android.view.InputDevice getDevice(int)>
<android.view.InputDevice: int[] getDeviceIds()>
<android.view.InputDevice: int getId()>
<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()>
<android.view.InputDevice: int getKeyCodeForKeyLocation(int)>
<android.view.InputDevice: int getKeyboardType()>
<android.view.InputDevice: android.hardware.lights.LightsManager getLightsManager()>
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int)>
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int,int)>
<android.view.InputDevice: java.util.List getMotionRanges()>
<android.view.InputDevice: java.lang.String getName()>
<android.view.InputDevice: int getProductId()>
<android.view.InputDevice: android.hardware.SensorManager getSensorManager()>
<android.view.InputDevice: int getSources()>
<android.view.InputDevice: int getVendorId()>
<android.view.InputDevice: android.os.Vibrator getVibrator()>
<android.view.InputDevice: android.os.VibratorManager getVibratorManager()>
<android.view.InputDevice: boolean[] hasKeys(int[])>
<android.view.InputDevice: boolean hasMicrophone()>
<android.view.InputDevice: boolean isEnabled()>
<android.view.InputDevice: boolean isExternal()>
<android.view.InputDevice: boolean isVirtual()>
<android.view.InputDevice: boolean supportsSource(int)>
<android.view.InputDevice: void writeToParcel(android.os.Parcel,int)>
<android.view.InputDevice: android.os.Parcelable$Creator CREATOR>
<android.view.InputDevice: int KEYBOARD_TYPE_ALPHABETIC>
<android.view.InputDevice: int KEYBOARD_TYPE_NONE>
<android.view.InputDevice: int KEYBOARD_TYPE_NON_ALPHABETIC>
<android.view.InputDevice: int MOTION_RANGE_ORIENTATION>
<android.view.InputDevice: int MOTION_RANGE_PRESSURE>
<android.view.InputDevice: int MOTION_RANGE_SIZE>
<android.view.InputDevice: int MOTION_RANGE_TOOL_MAJOR>
<android.view.InputDevice: int MOTION_RANGE_TOOL_MINOR>
<android.view.InputDevice: int MOTION_RANGE_TOUCH_MAJOR>
<android.view.InputDevice: int MOTION_RANGE_TOUCH_MINOR>
<android.view.InputDevice: int MOTION_RANGE_X>
<android.view.InputDevice: int MOTION_RANGE_Y>
<android.view.InputDevice: int SOURCE_ANY>
<android.view.InputDevice: int SOURCE_BLUETOOTH_STYLUS>
<android.view.InputDevice: int SOURCE_CLASS_BUTTON>
<android.view.InputDevice: int SOURCE_CLASS_JOYSTICK>
<android.view.InputDevice: int SOURCE_CLASS_MASK>
<android.view.InputDevice: int SOURCE_CLASS_NONE>
<android.view.InputDevice: int SOURCE_CLASS_POINTER>
<android.view.InputDevice: int SOURCE_CLASS_POSITION>
<android.view.InputDevice: int SOURCE_CLASS_TRACKBALL>
<android.view.InputDevice: int SOURCE_DPAD>
<android.view.InputDevice: int SOURCE_GAMEPAD>
<android.view.InputDevice: int SOURCE_HDMI>
<android.view.InputDevice: int SOURCE_JOYSTICK>
<android.view.InputDevice: int SOURCE_KEYBOARD>
<android.view.InputDevice: int SOURCE_MOUSE>
<android.view.InputDevice: int SOURCE_MOUSE_RELATIVE>
<android.view.InputDevice: int SOURCE_ROTARY_ENCODER>
<android.view.InputDevice: int SOURCE_SENSOR>
<android.view.InputDevice: int SOURCE_STYLUS>
<android.view.InputDevice: int SOURCE_TOUCHPAD>
<android.view.InputDevice: int SOURCE_TOUCHSCREEN>
<android.view.InputDevice: int SOURCE_TOUCH_NAVIGATION>
<android.view.InputDevice: int SOURCE_TRACKBALL>
<android.view.InputDevice: int SOURCE_UNKNOWN>
android.view.InputDevice$MotionRange
<android.view.InputDevice$MotionRange: int getAxis()>
<android.view.InputDevice$MotionRange: float getFlat()>
<android.view.InputDevice$MotionRange: float getFuzz()>
<android.view.InputDevice$MotionRange: float getMax()>
<android.view.InputDevice$MotionRange: float getMin()>
<android.view.InputDevice$MotionRange: float getRange()>
<android.view.InputDevice$MotionRange: float getResolution()>
<android.view.InputDevice$MotionRange: int getSource()>
<android.view.InputDevice$MotionRange: boolean isFromSource(int)>
android.view.InputEvent
<android.view.InputEvent: int describeContents()>
<android.view.InputEvent: android.view.InputDevice getDevice()>
<android.view.InputEvent: int getDeviceId()>
<android.view.InputEvent: long getEventTime()>
<android.view.InputEvent: int getSource()>
<android.view.InputEvent: boolean isFromSource(int)>
<android.view.InputEvent: android.os.Parcelable$Creator CREATOR>
android.view.InputQueue
android.view.InputQueue$Callback
<android.view.InputQueue$Callback: void onInputQueueCreated(android.view.InputQueue)>
<android.view.InputQueue$Callback: void onInputQueueDestroyed(android.view.InputQueue)>
android.view.KeyCharacterMap
<android.view.KeyCharacterMap: int describeContents()>
<android.view.KeyCharacterMap: boolean deviceHasKey(int)>
<android.view.KeyCharacterMap: boolean[] deviceHasKeys(int[])>
<android.view.KeyCharacterMap: int get(int,int)>
<android.view.KeyCharacterMap: int getDeadChar(int,int)>
<android.view.KeyCharacterMap: char getDisplayLabel(int)>
<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])>
<android.view.KeyCharacterMap: boolean getKeyData(int,android.view.KeyCharacterMap$KeyData)>
<android.view.KeyCharacterMap: int getKeyboardType()>
<android.view.KeyCharacterMap: char getMatch(int,char[])>
<android.view.KeyCharacterMap: char getMatch(int,char[],int)>
<android.view.KeyCharacterMap: int getModifierBehavior()>
<android.view.KeyCharacterMap: char getNumber(int)>
<android.view.KeyCharacterMap: boolean isPrintingKey(int)>
<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>
<android.view.KeyCharacterMap: void writeToParcel(android.os.Parcel,int)>
<android.view.KeyCharacterMap: int ALPHA>
<android.view.KeyCharacterMap: int BUILT_IN_KEYBOARD>
<android.view.KeyCharacterMap: int COMBINING_ACCENT>
<android.view.KeyCharacterMap: int COMBINING_ACCENT_MASK>
<android.view.KeyCharacterMap: android.os.Parcelable$Creator CREATOR>
<android.view.KeyCharacterMap: int FULL>
<android.view.KeyCharacterMap: char HEX_INPUT>
<android.view.KeyCharacterMap: int MODIFIER_BEHAVIOR_CHORDED>
<android.view.KeyCharacterMap: int MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED>
<android.view.KeyCharacterMap: int NUMERIC>
<android.view.KeyCharacterMap: char PICKER_DIALOG_INPUT>
<android.view.KeyCharacterMap: int PREDICTIVE>
<android.view.KeyCharacterMap: int SPECIAL_FUNCTION>
<android.view.KeyCharacterMap: int VIRTUAL_KEYBOARD>
android.view.KeyCharacterMap$KeyData
<android.view.KeyCharacterMap$KeyData: void <init>()>
<android.view.KeyCharacterMap$KeyData: int META_LENGTH>
<android.view.KeyCharacterMap$KeyData: char displayLabel>
<android.view.KeyCharacterMap$KeyData: char[] meta>
<android.view.KeyCharacterMap$KeyData: char number>
android.view.KeyCharacterMap$UnavailableException
<android.view.KeyCharacterMap$UnavailableException: void <init>(java.lang.String)>
android.view.KeyEvent
<android.view.KeyEvent: void <init>(int,int)>
<android.view.KeyEvent: void <init>(long,long,int,int,int)>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int)>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int)>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int)>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int,int)>
<android.view.KeyEvent: void <init>(long,java.lang.String,int,int)>
<android.view.KeyEvent: void <init>(android.view.KeyEvent)>
<android.view.KeyEvent: void <init>(android.view.KeyEvent,long,int)>
<android.view.KeyEvent: android.view.KeyEvent changeAction(android.view.KeyEvent,int)>
<android.view.KeyEvent: android.view.KeyEvent changeFlags(android.view.KeyEvent,int)>
<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int)>
<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int,int)>
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback)>
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)>
<android.view.KeyEvent: int getAction()>
<android.view.KeyEvent: java.lang.String getCharacters()>
<android.view.KeyEvent: int getDeadChar(int,int)>
<android.view.KeyEvent: int getDeviceId()>
<android.view.KeyEvent: char getDisplayLabel()>
<android.view.KeyEvent: long getDownTime()>
<android.view.KeyEvent: long getEventTime()>
<android.view.KeyEvent: int getFlags()>
<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>
<android.view.KeyEvent: int getKeyCode()>
<android.view.KeyEvent: boolean getKeyData(android.view.KeyCharacterMap$KeyData)>
<android.view.KeyEvent: char getMatch(char[])>
<android.view.KeyEvent: char getMatch(char[],int)>
<android.view.KeyEvent: int getMaxKeyCode()>
<android.view.KeyEvent: int getMetaState()>
<android.view.KeyEvent: int getModifierMetaStateMask()>
<android.view.KeyEvent: int getModifiers()>
<android.view.KeyEvent: char getNumber()>
<android.view.KeyEvent: int getRepeatCount()>
<android.view.KeyEvent: int getScanCode()>
<android.view.KeyEvent: int getSource()>
<android.view.KeyEvent: int getUnicodeChar()>
<android.view.KeyEvent: int getUnicodeChar(int)>
<android.view.KeyEvent: boolean hasModifiers(int)>
<android.view.KeyEvent: boolean hasNoModifiers()>
<android.view.KeyEvent: boolean isAltPressed()>
<android.view.KeyEvent: boolean isCanceled()>
<android.view.KeyEvent: boolean isCapsLockOn()>
<android.view.KeyEvent: boolean isCtrlPressed()>
<android.view.KeyEvent: boolean isFunctionPressed()>
<android.view.KeyEvent: boolean isGamepadButton(int)>
<android.view.KeyEvent: boolean isLongPress()>
<android.view.KeyEvent: boolean isMediaSessionKey(int)>
<android.view.KeyEvent: boolean isMetaPressed()>
<android.view.KeyEvent: boolean isModifierKey(int)>
<android.view.KeyEvent: boolean isNumLockOn()>
<android.view.KeyEvent: boolean isPrintingKey()>
<android.view.KeyEvent: boolean isScrollLockOn()>
<android.view.KeyEvent: boolean isShiftPressed()>
<android.view.KeyEvent: boolean isSymPressed()>
<android.view.KeyEvent: boolean isSystem()>
<android.view.KeyEvent: boolean isTracking()>
<android.view.KeyEvent: int keyCodeFromString(java.lang.String)>
<android.view.KeyEvent: java.lang.String keyCodeToString(int)>
<android.view.KeyEvent: boolean metaStateHasModifiers(int,int)>
<android.view.KeyEvent: boolean metaStateHasNoModifiers(int)>
<android.view.KeyEvent: int normalizeMetaState(int)>
<android.view.KeyEvent: void setSource(int)>
<android.view.KeyEvent: void startTracking()>
<android.view.KeyEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.KeyEvent: int ACTION_DOWN>
<android.view.KeyEvent: int ACTION_MULTIPLE>
<android.view.KeyEvent: int ACTION_UP>
<android.view.KeyEvent: android.os.Parcelable$Creator CREATOR>
<android.view.KeyEvent: int FLAG_CANCELED>
<android.view.KeyEvent: int FLAG_CANCELED_LONG_PRESS>
<android.view.KeyEvent: int FLAG_EDITOR_ACTION>
<android.view.KeyEvent: int FLAG_FALLBACK>
<android.view.KeyEvent: int FLAG_FROM_SYSTEM>
<android.view.KeyEvent: int FLAG_KEEP_TOUCH_MODE>
<android.view.KeyEvent: int FLAG_LONG_PRESS>
<android.view.KeyEvent: int FLAG_SOFT_KEYBOARD>
<android.view.KeyEvent: int FLAG_TRACKING>
<android.view.KeyEvent: int FLAG_VIRTUAL_HARD_KEY>
<android.view.KeyEvent: int FLAG_WOKE_HERE>
<android.view.KeyEvent: int KEYCODE_0>
<android.view.KeyEvent: int KEYCODE_1>
<android.view.KeyEvent: int KEYCODE_11>
<android.view.KeyEvent: int KEYCODE_12>
<android.view.KeyEvent: int KEYCODE_2>
<android.view.KeyEvent: int KEYCODE_3>
<android.view.KeyEvent: int KEYCODE_3D_MODE>
<android.view.KeyEvent: int KEYCODE_4>
<android.view.KeyEvent: int KEYCODE_5>
<android.view.KeyEvent: int KEYCODE_6>
<android.view.KeyEvent: int KEYCODE_7>
<android.view.KeyEvent: int KEYCODE_8>
<android.view.KeyEvent: int KEYCODE_9>
<android.view.KeyEvent: int KEYCODE_A>
<android.view.KeyEvent: int KEYCODE_ALL_APPS>
<android.view.KeyEvent: int KEYCODE_ALT_LEFT>
<android.view.KeyEvent: int KEYCODE_ALT_RIGHT>
<android.view.KeyEvent: int KEYCODE_APOSTROPHE>
<android.view.KeyEvent: int KEYCODE_APP_SWITCH>
<android.view.KeyEvent: int KEYCODE_ASSIST>
<android.view.KeyEvent: int KEYCODE_AT>
<android.view.KeyEvent: int KEYCODE_AVR_INPUT>
<android.view.KeyEvent: int KEYCODE_AVR_POWER>
<android.view.KeyEvent: int KEYCODE_B>
<android.view.KeyEvent: int KEYCODE_BACK>
<android.view.KeyEvent: int KEYCODE_BACKSLASH>
<android.view.KeyEvent: int KEYCODE_BOOKMARK>
<android.view.KeyEvent: int KEYCODE_BREAK>
<android.view.KeyEvent: int KEYCODE_BRIGHTNESS_DOWN>
<android.view.KeyEvent: int KEYCODE_BRIGHTNESS_UP>
<android.view.KeyEvent: int KEYCODE_BUTTON_1>
<android.view.KeyEvent: int KEYCODE_BUTTON_10>
<android.view.KeyEvent: int KEYCODE_BUTTON_11>
<android.view.KeyEvent: int KEYCODE_BUTTON_12>
<android.view.KeyEvent: int KEYCODE_BUTTON_13>
<android.view.KeyEvent: int KEYCODE_BUTTON_14>
<android.view.KeyEvent: int KEYCODE_BUTTON_15>
<android.view.KeyEvent: int KEYCODE_BUTTON_16>
<android.view.KeyEvent: int KEYCODE_BUTTON_2>
<android.view.KeyEvent: int KEYCODE_BUTTON_3>
<android.view.KeyEvent: int KEYCODE_BUTTON_4>
<android.view.KeyEvent: int KEYCODE_BUTTON_5>
<android.view.KeyEvent: int KEYCODE_BUTTON_6>
<android.view.KeyEvent: int KEYCODE_BUTTON_7>
<android.view.KeyEvent: int KEYCODE_BUTTON_8>
<android.view.KeyEvent: int KEYCODE_BUTTON_9>
<android.view.KeyEvent: int KEYCODE_BUTTON_A>
<android.view.KeyEvent: int KEYCODE_BUTTON_B>
<android.view.KeyEvent: int KEYCODE_BUTTON_C>
<android.view.KeyEvent: int KEYCODE_BUTTON_L1>
<android.view.KeyEvent: int KEYCODE_BUTTON_L2>
<android.view.KeyEvent: int KEYCODE_BUTTON_MODE>
<android.view.KeyEvent: int KEYCODE_BUTTON_R1>
<android.view.KeyEvent: int KEYCODE_BUTTON_R2>
<android.view.KeyEvent: int KEYCODE_BUTTON_SELECT>
<android.view.KeyEvent: int KEYCODE_BUTTON_START>
<android.view.KeyEvent: int KEYCODE_BUTTON_THUMBL>
<android.view.KeyEvent: int KEYCODE_BUTTON_THUMBR>
<android.view.KeyEvent: int KEYCODE_BUTTON_X>
<android.view.KeyEvent: int KEYCODE_BUTTON_Y>
<android.view.KeyEvent: int KEYCODE_BUTTON_Z>
<android.view.KeyEvent: int KEYCODE_C>
<android.view.KeyEvent: int KEYCODE_CALCULATOR>
<android.view.KeyEvent: int KEYCODE_CALENDAR>
<android.view.KeyEvent: int KEYCODE_CALL>
<android.view.KeyEvent: int KEYCODE_CAMERA>
<android.view.KeyEvent: int KEYCODE_CAPS_LOCK>
<android.view.KeyEvent: int KEYCODE_CAPTIONS>
<android.view.KeyEvent: int KEYCODE_CHANNEL_DOWN>
<android.view.KeyEvent: int KEYCODE_CHANNEL_UP>
<android.view.KeyEvent: int KEYCODE_CLEAR>
<android.view.KeyEvent: int KEYCODE_COMMA>
<android.view.KeyEvent: int KEYCODE_CONTACTS>
<android.view.KeyEvent: int KEYCODE_COPY>
<android.view.KeyEvent: int KEYCODE_CTRL_LEFT>
<android.view.KeyEvent: int KEYCODE_CTRL_RIGHT>
<android.view.KeyEvent: int KEYCODE_CUT>
<android.view.KeyEvent: int KEYCODE_D>
<android.view.KeyEvent: int KEYCODE_DEL>
<android.view.KeyEvent: int KEYCODE_DEMO_APP_1>
<android.view.KeyEvent: int KEYCODE_DEMO_APP_2>
<android.view.KeyEvent: int KEYCODE_DEMO_APP_3>
<android.view.KeyEvent: int KEYCODE_DEMO_APP_4>
<android.view.KeyEvent: int KEYCODE_DPAD_CENTER>
<android.view.KeyEvent: int KEYCODE_DPAD_DOWN>
<android.view.KeyEvent: int KEYCODE_DPAD_DOWN_LEFT>
<android.view.KeyEvent: int KEYCODE_DPAD_DOWN_RIGHT>
<android.view.KeyEvent: int KEYCODE_DPAD_LEFT>
<android.view.KeyEvent: int KEYCODE_DPAD_RIGHT>
<android.view.KeyEvent: int KEYCODE_DPAD_UP>
<android.view.KeyEvent: int KEYCODE_DPAD_UP_LEFT>
<android.view.KeyEvent: int KEYCODE_DPAD_UP_RIGHT>
<android.view.KeyEvent: int KEYCODE_DVR>
<android.view.KeyEvent: int KEYCODE_E>
<android.view.KeyEvent: int KEYCODE_EISU>
<android.view.KeyEvent: int KEYCODE_ENDCALL>
<android.view.KeyEvent: int KEYCODE_ENTER>
<android.view.KeyEvent: int KEYCODE_ENVELOPE>
<android.view.KeyEvent: int KEYCODE_EQUALS>
<android.view.KeyEvent: int KEYCODE_ESCAPE>
<android.view.KeyEvent: int KEYCODE_EXPLORER>
<android.view.KeyEvent: int KEYCODE_F>
<android.view.KeyEvent: int KEYCODE_F1>
<android.view.KeyEvent: int KEYCODE_F10>
<android.view.KeyEvent: int KEYCODE_F11>
<android.view.KeyEvent: int KEYCODE_F12>
<android.view.KeyEvent: int KEYCODE_F2>
<android.view.KeyEvent: int KEYCODE_F3>
<android.view.KeyEvent: int KEYCODE_F4>
<android.view.KeyEvent: int KEYCODE_F5>
<android.view.KeyEvent: int KEYCODE_F6>
<android.view.KeyEvent: int KEYCODE_F7>
<android.view.KeyEvent: int KEYCODE_F8>
<android.view.KeyEvent: int KEYCODE_F9>
<android.view.KeyEvent: int KEYCODE_FEATURED_APP_1>
<android.view.KeyEvent: int KEYCODE_FEATURED_APP_2>
<android.view.KeyEvent: int KEYCODE_FEATURED_APP_3>
<android.view.KeyEvent: int KEYCODE_FEATURED_APP_4>
<android.view.KeyEvent: int KEYCODE_FOCUS>
<android.view.KeyEvent: int KEYCODE_FORWARD>
<android.view.KeyEvent: int KEYCODE_FORWARD_DEL>
<android.view.KeyEvent: int KEYCODE_FUNCTION>
<android.view.KeyEvent: int KEYCODE_G>
<android.view.KeyEvent: int KEYCODE_GRAVE>
<android.view.KeyEvent: int KEYCODE_GUIDE>
<android.view.KeyEvent: int KEYCODE_H>
<android.view.KeyEvent: int KEYCODE_HEADSETHOOK>
<android.view.KeyEvent: int KEYCODE_HELP>
<android.view.KeyEvent: int KEYCODE_HENKAN>
<android.view.KeyEvent: int KEYCODE_HOME>
<android.view.KeyEvent: int KEYCODE_I>
<android.view.KeyEvent: int KEYCODE_INFO>
<android.view.KeyEvent: int KEYCODE_INSERT>
<android.view.KeyEvent: int KEYCODE_J>
<android.view.KeyEvent: int KEYCODE_K>
<android.view.KeyEvent: int KEYCODE_KANA>
<android.view.KeyEvent: int KEYCODE_KATAKANA_HIRAGANA>
<android.view.KeyEvent: int KEYCODE_L>
<android.view.KeyEvent: int KEYCODE_LANGUAGE_SWITCH>
<android.view.KeyEvent: int KEYCODE_LAST_CHANNEL>
<android.view.KeyEvent: int KEYCODE_LEFT_BRACKET>
<android.view.KeyEvent: int KEYCODE_M>
<android.view.KeyEvent: int KEYCODE_MANNER_MODE>
<android.view.KeyEvent: int KEYCODE_MEDIA_AUDIO_TRACK>
<android.view.KeyEvent: int KEYCODE_MEDIA_CLOSE>
<android.view.KeyEvent: int KEYCODE_MEDIA_EJECT>
<android.view.KeyEvent: int KEYCODE_MEDIA_FAST_FORWARD>
<android.view.KeyEvent: int KEYCODE_MEDIA_NEXT>
<android.view.KeyEvent: int KEYCODE_MEDIA_PAUSE>
<android.view.KeyEvent: int KEYCODE_MEDIA_PLAY>
<android.view.KeyEvent: int KEYCODE_MEDIA_PLAY_PAUSE>
<android.view.KeyEvent: int KEYCODE_MEDIA_PREVIOUS>
<android.view.KeyEvent: int KEYCODE_MEDIA_RECORD>
<android.view.KeyEvent: int KEYCODE_MEDIA_REWIND>
<android.view.KeyEvent: int KEYCODE_MEDIA_SKIP_BACKWARD>
<android.view.KeyEvent: int KEYCODE_MEDIA_SKIP_FORWARD>
<android.view.KeyEvent: int KEYCODE_MEDIA_STEP_BACKWARD>
<android.view.KeyEvent: int KEYCODE_MEDIA_STEP_FORWARD>
<android.view.KeyEvent: int KEYCODE_MEDIA_STOP>
<android.view.KeyEvent: int KEYCODE_MEDIA_TOP_MENU>
<android.view.KeyEvent: int KEYCODE_MENU>
<android.view.KeyEvent: int KEYCODE_META_LEFT>
<android.view.KeyEvent: int KEYCODE_META_RIGHT>
<android.view.KeyEvent: int KEYCODE_MINUS>
<android.view.KeyEvent: int KEYCODE_MOVE_END>
<android.view.KeyEvent: int KEYCODE_MOVE_HOME>
<android.view.KeyEvent: int KEYCODE_MUHENKAN>
<android.view.KeyEvent: int KEYCODE_MUSIC>
<android.view.KeyEvent: int KEYCODE_MUTE>
<android.view.KeyEvent: int KEYCODE_N>
<android.view.KeyEvent: int KEYCODE_NAVIGATE_IN>
<android.view.KeyEvent: int KEYCODE_NAVIGATE_NEXT>
<android.view.KeyEvent: int KEYCODE_NAVIGATE_OUT>
<android.view.KeyEvent: int KEYCODE_NAVIGATE_PREVIOUS>
<android.view.KeyEvent: int KEYCODE_NOTIFICATION>
<android.view.KeyEvent: int KEYCODE_NUM>
<android.view.KeyEvent: int KEYCODE_NUMPAD_0>
<android.view.KeyEvent: int KEYCODE_NUMPAD_1>
<android.view.KeyEvent: int KEYCODE_NUMPAD_2>
<android.view.KeyEvent: int KEYCODE_NUMPAD_3>
<android.view.KeyEvent: int KEYCODE_NUMPAD_4>
<android.view.KeyEvent: int KEYCODE_NUMPAD_5>
<android.view.KeyEvent: int KEYCODE_NUMPAD_6>
<android.view.KeyEvent: int KEYCODE_NUMPAD_7>
<android.view.KeyEvent: int KEYCODE_NUMPAD_8>
<android.view.KeyEvent: int KEYCODE_NUMPAD_9>
<android.view.KeyEvent: int KEYCODE_NUMPAD_ADD>
<android.view.KeyEvent: int KEYCODE_NUMPAD_COMMA>
<android.view.KeyEvent: int KEYCODE_NUMPAD_DIVIDE>
<android.view.KeyEvent: int KEYCODE_NUMPAD_DOT>
<android.view.KeyEvent: int KEYCODE_NUMPAD_ENTER>
<android.view.KeyEvent: int KEYCODE_NUMPAD_EQUALS>
<android.view.KeyEvent: int KEYCODE_NUMPAD_LEFT_PAREN>
<android.view.KeyEvent: int KEYCODE_NUMPAD_MULTIPLY>
<android.view.KeyEvent: int KEYCODE_NUMPAD_RIGHT_PAREN>
<android.view.KeyEvent: int KEYCODE_NUMPAD_SUBTRACT>
<android.view.KeyEvent: int KEYCODE_NUM_LOCK>
<android.view.KeyEvent: int KEYCODE_O>
<android.view.KeyEvent: int KEYCODE_P>
<android.view.KeyEvent: int KEYCODE_PAGE_DOWN>
<android.view.KeyEvent: int KEYCODE_PAGE_UP>
<android.view.KeyEvent: int KEYCODE_PAIRING>
<android.view.KeyEvent: int KEYCODE_PASTE>
<android.view.KeyEvent: int KEYCODE_PERIOD>
<android.view.KeyEvent: int KEYCODE_PICTSYMBOLS>
<android.view.KeyEvent: int KEYCODE_PLUS>
<android.view.KeyEvent: int KEYCODE_POUND>
<android.view.KeyEvent: int KEYCODE_POWER>
<android.view.KeyEvent: int KEYCODE_PROFILE_SWITCH>
<android.view.KeyEvent: int KEYCODE_PROG_BLUE>
<android.view.KeyEvent: int KEYCODE_PROG_GREEN>
<android.view.KeyEvent: int KEYCODE_PROG_RED>
<android.view.KeyEvent: int KEYCODE_PROG_YELLOW>
<android.view.KeyEvent: int KEYCODE_Q>
<android.view.KeyEvent: int KEYCODE_R>
<android.view.KeyEvent: int KEYCODE_REFRESH>
<android.view.KeyEvent: int KEYCODE_RIGHT_BRACKET>
<android.view.KeyEvent: int KEYCODE_RO>
<android.view.KeyEvent: int KEYCODE_S>
<android.view.KeyEvent: int KEYCODE_SCROLL_LOCK>
<android.view.KeyEvent: int KEYCODE_SEARCH>
<android.view.KeyEvent: int KEYCODE_SEMICOLON>
<android.view.KeyEvent: int KEYCODE_SETTINGS>
<android.view.KeyEvent: int KEYCODE_SHIFT_LEFT>
<android.view.KeyEvent: int KEYCODE_SHIFT_RIGHT>
<android.view.KeyEvent: int KEYCODE_SLASH>
<android.view.KeyEvent: int KEYCODE_SLEEP>
<android.view.KeyEvent: int KEYCODE_SOFT_LEFT>
<android.view.KeyEvent: int KEYCODE_SOFT_RIGHT>
<android.view.KeyEvent: int KEYCODE_SOFT_SLEEP>
<android.view.KeyEvent: int KEYCODE_SPACE>
<android.view.KeyEvent: int KEYCODE_STAR>
<android.view.KeyEvent: int KEYCODE_STB_INPUT>
<android.view.KeyEvent: int KEYCODE_STB_POWER>
<android.view.KeyEvent: int KEYCODE_STEM_1>
<android.view.KeyEvent: int KEYCODE_STEM_2>
<android.view.KeyEvent: int KEYCODE_STEM_3>
<android.view.KeyEvent: int KEYCODE_STEM_PRIMARY>
<android.view.KeyEvent: int KEYCODE_SWITCH_CHARSET>
<android.view.KeyEvent: int KEYCODE_SYM>
<android.view.KeyEvent: int KEYCODE_SYSRQ>
<android.view.KeyEvent: int KEYCODE_SYSTEM_NAVIGATION_DOWN>
<android.view.KeyEvent: int KEYCODE_SYSTEM_NAVIGATION_LEFT>
<android.view.KeyEvent: int KEYCODE_SYSTEM_NAVIGATION_RIGHT>
<android.view.KeyEvent: int KEYCODE_SYSTEM_NAVIGATION_UP>
<android.view.KeyEvent: int KEYCODE_T>
<android.view.KeyEvent: int KEYCODE_TAB>
<android.view.KeyEvent: int KEYCODE_THUMBS_DOWN>
<android.view.KeyEvent: int KEYCODE_THUMBS_UP>
<android.view.KeyEvent: int KEYCODE_TV>
<android.view.KeyEvent: int KEYCODE_TV_ANTENNA_CABLE>
<android.view.KeyEvent: int KEYCODE_TV_AUDIO_DESCRIPTION>
<android.view.KeyEvent: int KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN>
<android.view.KeyEvent: int KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP>
<android.view.KeyEvent: int KEYCODE_TV_CONTENTS_MENU>
<android.view.KeyEvent: int KEYCODE_TV_DATA_SERVICE>
<android.view.KeyEvent: int KEYCODE_TV_INPUT>
<android.view.KeyEvent: int KEYCODE_TV_INPUT_COMPONENT_1>
<android.view.KeyEvent: int KEYCODE_TV_INPUT_COMPONENT_2>
<android.view.KeyEvent: int KEYCODE_TV_INPUT_COMPOSITE_1>
<android.view.KeyEvent: int KEYCODE_TV_INPUT_COMPOSITE_2>
<android.view.KeyEvent: int KEYCODE_TV_INPUT_HDMI_1>
<android.view.KeyEvent: int KEYCODE_TV_INPUT_HDMI_2>
<android.view.KeyEvent: int KEYCODE_TV_INPUT_HDMI_3>
<android.view.KeyEvent: int KEYCODE_TV_INPUT_HDMI_4>
<android.view.KeyEvent: int KEYCODE_TV_INPUT_VGA_1>
<android.view.KeyEvent: int KEYCODE_TV_MEDIA_CONTEXT_MENU>
<android.view.KeyEvent: int KEYCODE_TV_NETWORK>
<android.view.KeyEvent: int KEYCODE_TV_NUMBER_ENTRY>
<android.view.KeyEvent: int KEYCODE_TV_POWER>
<android.view.KeyEvent: int KEYCODE_TV_RADIO_SERVICE>
<android.view.KeyEvent: int KEYCODE_TV_SATELLITE>
<android.view.KeyEvent: int KEYCODE_TV_SATELLITE_BS>
<android.view.KeyEvent: int KEYCODE_TV_SATELLITE_CS>
<android.view.KeyEvent: int KEYCODE_TV_SATELLITE_SERVICE>
<android.view.KeyEvent: int KEYCODE_TV_TELETEXT>
<android.view.KeyEvent: int KEYCODE_TV_TERRESTRIAL_ANALOG>
<android.view.KeyEvent: int KEYCODE_TV_TERRESTRIAL_DIGITAL>
<android.view.KeyEvent: int KEYCODE_TV_TIMER_PROGRAMMING>
<android.view.KeyEvent: int KEYCODE_TV_ZOOM_MODE>
<android.view.KeyEvent: int KEYCODE_U>
<android.view.KeyEvent: int KEYCODE_UNKNOWN>
<android.view.KeyEvent: int KEYCODE_V>
<android.view.KeyEvent: int KEYCODE_VIDEO_APP_1>
<android.view.KeyEvent: int KEYCODE_VIDEO_APP_2>
<android.view.KeyEvent: int KEYCODE_VIDEO_APP_3>
<android.view.KeyEvent: int KEYCODE_VIDEO_APP_4>
<android.view.KeyEvent: int KEYCODE_VIDEO_APP_5>
<android.view.KeyEvent: int KEYCODE_VIDEO_APP_6>
<android.view.KeyEvent: int KEYCODE_VIDEO_APP_7>
<android.view.KeyEvent: int KEYCODE_VIDEO_APP_8>
<android.view.KeyEvent: int KEYCODE_VOICE_ASSIST>
<android.view.KeyEvent: int KEYCODE_VOLUME_DOWN>
<android.view.KeyEvent: int KEYCODE_VOLUME_MUTE>
<android.view.KeyEvent: int KEYCODE_VOLUME_UP>
<android.view.KeyEvent: int KEYCODE_W>
<android.view.KeyEvent: int KEYCODE_WAKEUP>
<android.view.KeyEvent: int KEYCODE_WINDOW>
<android.view.KeyEvent: int KEYCODE_X>
<android.view.KeyEvent: int KEYCODE_Y>
<android.view.KeyEvent: int KEYCODE_YEN>
<android.view.KeyEvent: int KEYCODE_Z>
<android.view.KeyEvent: int KEYCODE_ZENKAKU_HANKAKU>
<android.view.KeyEvent: int KEYCODE_ZOOM_IN>
<android.view.KeyEvent: int KEYCODE_ZOOM_OUT>
<android.view.KeyEvent: int MAX_KEYCODE>
<android.view.KeyEvent: int META_ALT_LEFT_ON>
<android.view.KeyEvent: int META_ALT_MASK>
<android.view.KeyEvent: int META_ALT_ON>
<android.view.KeyEvent: int META_ALT_RIGHT_ON>
<android.view.KeyEvent: int META_CAPS_LOCK_ON>
<android.view.KeyEvent: int META_CTRL_LEFT_ON>
<android.view.KeyEvent: int META_CTRL_MASK>
<android.view.KeyEvent: int META_CTRL_ON>
<android.view.KeyEvent: int META_CTRL_RIGHT_ON>
<android.view.KeyEvent: int META_FUNCTION_ON>
<android.view.KeyEvent: int META_META_LEFT_ON>
<android.view.KeyEvent: int META_META_MASK>
<android.view.KeyEvent: int META_META_ON>
<android.view.KeyEvent: int META_META_RIGHT_ON>
<android.view.KeyEvent: int META_NUM_LOCK_ON>
<android.view.KeyEvent: int META_SCROLL_LOCK_ON>
<android.view.KeyEvent: int META_SHIFT_LEFT_ON>
<android.view.KeyEvent: int META_SHIFT_MASK>
<android.view.KeyEvent: int META_SHIFT_ON>
<android.view.KeyEvent: int META_SHIFT_RIGHT_ON>
<android.view.KeyEvent: int META_SYM_ON>
android.view.KeyEvent$Callback
<android.view.KeyEvent$Callback: boolean onKeyDown(int,android.view.KeyEvent)>
<android.view.KeyEvent$Callback: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.view.KeyEvent$Callback: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.view.KeyEvent$Callback: boolean onKeyUp(int,android.view.KeyEvent)>
android.view.KeyEvent$DispatcherState
<android.view.KeyEvent$DispatcherState: void <init>()>
<android.view.KeyEvent$DispatcherState: void handleUpEvent(android.view.KeyEvent)>
<android.view.KeyEvent$DispatcherState: boolean isTracking(android.view.KeyEvent)>
<android.view.KeyEvent$DispatcherState: void performedLongPress(android.view.KeyEvent)>
<android.view.KeyEvent$DispatcherState: void reset()>
<android.view.KeyEvent$DispatcherState: void reset(java.lang.Object)>
<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>
android.view.KeyboardShortcutGroup
<android.view.KeyboardShortcutGroup: void <init>(java.lang.CharSequence,java.util.List)>
<android.view.KeyboardShortcutGroup: void <init>(java.lang.CharSequence)>
<android.view.KeyboardShortcutGroup: void addItem(android.view.KeyboardShortcutInfo)>
<android.view.KeyboardShortcutGroup: int describeContents()>
<android.view.KeyboardShortcutGroup: java.util.List getItems()>
<android.view.KeyboardShortcutGroup: java.lang.CharSequence getLabel()>
<android.view.KeyboardShortcutGroup: void writeToParcel(android.os.Parcel,int)>
<android.view.KeyboardShortcutGroup: android.os.Parcelable$Creator CREATOR>
android.view.KeyboardShortcutInfo
<android.view.KeyboardShortcutInfo: void <init>(java.lang.CharSequence,int,int)>
<android.view.KeyboardShortcutInfo: void <init>(java.lang.CharSequence,char,int)>
<android.view.KeyboardShortcutInfo: int describeContents()>
<android.view.KeyboardShortcutInfo: char getBaseCharacter()>
<android.view.KeyboardShortcutInfo: int getKeycode()>
<android.view.KeyboardShortcutInfo: java.lang.CharSequence getLabel()>
<android.view.KeyboardShortcutInfo: int getModifiers()>
<android.view.KeyboardShortcutInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.KeyboardShortcutInfo: android.os.Parcelable$Creator CREATOR>
android.view.LayoutInflater
<android.view.LayoutInflater: void <init>(android.content.Context)>
<android.view.LayoutInflater: void <init>(android.view.LayoutInflater,android.content.Context)>
<android.view.LayoutInflater: android.view.LayoutInflater cloneInContext(android.content.Context)>
<android.view.LayoutInflater: android.view.View createView(java.lang.String,java.lang.String,android.util.AttributeSet)>
<android.view.LayoutInflater: android.view.View createView(android.content.Context,java.lang.String,java.lang.String,android.util.AttributeSet)>
<android.view.LayoutInflater: android.view.LayoutInflater from(android.content.Context)>
<android.view.LayoutInflater: android.content.Context getContext()>
<android.view.LayoutInflater: android.view.LayoutInflater$Factory getFactory()>
<android.view.LayoutInflater: android.view.LayoutInflater$Factory2 getFactory2()>
<android.view.LayoutInflater: android.view.LayoutInflater$Filter getFilter()>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View onCreateView(java.lang.String,android.util.AttributeSet)>
<android.view.LayoutInflater: android.view.View onCreateView(android.view.View,java.lang.String,android.util.AttributeSet)>
<android.view.LayoutInflater: android.view.View onCreateView(android.content.Context,android.view.View,java.lang.String,android.util.AttributeSet)>
<android.view.LayoutInflater: void setFactory(android.view.LayoutInflater$Factory)>
<android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater$Factory2)>
<android.view.LayoutInflater: void setFilter(android.view.LayoutInflater$Filter)>
android.view.LayoutInflater$Factory
<android.view.LayoutInflater$Factory: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>
android.view.LayoutInflater$Factory2
<android.view.LayoutInflater$Factory2: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>
android.view.LayoutInflater$Filter
<android.view.LayoutInflater$Filter: boolean onLoadClass(java.lang.Class)>
android.view.Menu
<android.view.Menu: android.view.MenuItem add(java.lang.CharSequence)>
<android.view.Menu: android.view.MenuItem add(int)>
<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<android.view.Menu: android.view.MenuItem add(int,int,int,int)>
<android.view.Menu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])>
<android.view.Menu: android.view.SubMenu addSubMenu(java.lang.CharSequence)>
<android.view.Menu: android.view.SubMenu addSubMenu(int)>
<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)>
<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,int)>
<android.view.Menu: void clear()>
<android.view.Menu: void close()>
<android.view.Menu: android.view.MenuItem findItem(int)>
<android.view.Menu: android.view.MenuItem getItem(int)>
<android.view.Menu: boolean hasVisibleItems()>
<android.view.Menu: boolean isShortcutKey(int,android.view.KeyEvent)>
<android.view.Menu: boolean performIdentifierAction(int,int)>
<android.view.Menu: boolean performShortcut(int,android.view.KeyEvent,int)>
<android.view.Menu: void removeGroup(int)>
<android.view.Menu: void removeItem(int)>
<android.view.Menu: void setGroupCheckable(int,boolean,boolean)>
<android.view.Menu: void setGroupDividerEnabled(boolean)>
<android.view.Menu: void setGroupEnabled(int,boolean)>
<android.view.Menu: void setGroupVisible(int,boolean)>
<android.view.Menu: void setQwertyMode(boolean)>
<android.view.Menu: int size()>
<android.view.Menu: int CATEGORY_ALTERNATIVE>
<android.view.Menu: int CATEGORY_CONTAINER>
<android.view.Menu: int CATEGORY_SECONDARY>
<android.view.Menu: int CATEGORY_SYSTEM>
<android.view.Menu: int FIRST>
<android.view.Menu: int FLAG_ALWAYS_PERFORM_CLOSE>
<android.view.Menu: int FLAG_APPEND_TO_GROUP>
<android.view.Menu: int FLAG_PERFORM_NO_CLOSE>
<android.view.Menu: int NONE>
<android.view.Menu: int SUPPORTED_MODIFIERS_MASK>
android.view.MenuInflater
<android.view.MenuInflater: void <init>(android.content.Context)>
<android.view.MenuInflater: void inflate(int,android.view.Menu)>
android.view.MenuItem
<android.view.MenuItem: boolean collapseActionView()>
<android.view.MenuItem: boolean expandActionView()>
<android.view.MenuItem: android.view.ActionProvider getActionProvider()>
<android.view.MenuItem: android.view.View getActionView()>
<android.view.MenuItem: int getAlphabeticModifiers()>
<android.view.MenuItem: char getAlphabeticShortcut()>
<android.view.MenuItem: java.lang.CharSequence getContentDescription()>
<android.view.MenuItem: int getGroupId()>
<android.view.MenuItem: android.graphics.drawable.Drawable getIcon()>
<android.view.MenuItem: android.graphics.BlendMode getIconTintBlendMode()>
<android.view.MenuItem: android.content.res.ColorStateList getIconTintList()>
<android.view.MenuItem: android.graphics.PorterDuff$Mode getIconTintMode()>
<android.view.MenuItem: android.content.Intent getIntent()>
<android.view.MenuItem: int getItemId()>
<android.view.MenuItem: android.view.ContextMenu$ContextMenuInfo getMenuInfo()>
<android.view.MenuItem: int getNumericModifiers()>
<android.view.MenuItem: char getNumericShortcut()>
<android.view.MenuItem: int getOrder()>
<android.view.MenuItem: android.view.SubMenu getSubMenu()>
<android.view.MenuItem: java.lang.CharSequence getTitle()>
<android.view.MenuItem: java.lang.CharSequence getTitleCondensed()>
<android.view.MenuItem: java.lang.CharSequence getTooltipText()>
<android.view.MenuItem: boolean hasSubMenu()>
<android.view.MenuItem: boolean isActionViewExpanded()>
<android.view.MenuItem: boolean isCheckable()>
<android.view.MenuItem: boolean isChecked()>
<android.view.MenuItem: boolean isEnabled()>
<android.view.MenuItem: boolean isVisible()>
<android.view.MenuItem: android.view.MenuItem setActionProvider(android.view.ActionProvider)>
<android.view.MenuItem: android.view.MenuItem setActionView(android.view.View)>
<android.view.MenuItem: android.view.MenuItem setActionView(int)>
<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char)>
<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char,int)>
<android.view.MenuItem: android.view.MenuItem setCheckable(boolean)>
<android.view.MenuItem: android.view.MenuItem setChecked(boolean)>
<android.view.MenuItem: android.view.MenuItem setContentDescription(java.lang.CharSequence)>
<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)>
<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)>
<android.view.MenuItem: android.view.MenuItem setIcon(int)>
<android.view.MenuItem: android.view.MenuItem setIconTintBlendMode(android.graphics.BlendMode)>
<android.view.MenuItem: android.view.MenuItem setIconTintList(android.content.res.ColorStateList)>
<android.view.MenuItem: android.view.MenuItem setIconTintMode(android.graphics.PorterDuff$Mode)>
<android.view.MenuItem: android.view.MenuItem setIntent(android.content.Intent)>
<android.view.MenuItem: android.view.MenuItem setNumericShortcut(char)>
<android.view.MenuItem: android.view.MenuItem setNumericShortcut(char,int)>
<android.view.MenuItem: android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener)>
<android.view.MenuItem: android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener)>
<android.view.MenuItem: android.view.MenuItem setShortcut(char,char)>
<android.view.MenuItem: android.view.MenuItem setShortcut(char,char,int,int)>
<android.view.MenuItem: void setShowAsAction(int)>
<android.view.MenuItem: android.view.MenuItem setShowAsActionFlags(int)>
<android.view.MenuItem: android.view.MenuItem setTitle(java.lang.CharSequence)>
<android.view.MenuItem: android.view.MenuItem setTitle(int)>
<android.view.MenuItem: android.view.MenuItem setTitleCondensed(java.lang.CharSequence)>
<android.view.MenuItem: android.view.MenuItem setTooltipText(java.lang.CharSequence)>
<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>
<android.view.MenuItem: int SHOW_AS_ACTION_ALWAYS>
<android.view.MenuItem: int SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW>
<android.view.MenuItem: int SHOW_AS_ACTION_IF_ROOM>
<android.view.MenuItem: int SHOW_AS_ACTION_NEVER>
<android.view.MenuItem: int SHOW_AS_ACTION_WITH_TEXT>
android.view.MenuItem$OnActionExpandListener
<android.view.MenuItem$OnActionExpandListener: boolean onMenuItemActionCollapse(android.view.MenuItem)>
<android.view.MenuItem$OnActionExpandListener: boolean onMenuItemActionExpand(android.view.MenuItem)>
android.view.MenuItem$OnMenuItemClickListener
<android.view.MenuItem$OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>
android.view.MotionEvent
<android.view.MotionEvent: java.lang.String actionToString(int)>
<android.view.MotionEvent: void addBatch(long,float,float,float,float,int)>
<android.view.MotionEvent: void addBatch(long,android.view.MotionEvent$PointerCoords[],int)>
<android.view.MotionEvent: int axisFromString(java.lang.String)>
<android.view.MotionEvent: java.lang.String axisToString(int)>
<android.view.MotionEvent: int findPointerIndex(int)>
<android.view.MotionEvent: int getAction()>
<android.view.MotionEvent: int getActionButton()>
<android.view.MotionEvent: int getActionIndex()>
<android.view.MotionEvent: int getActionMasked()>
<android.view.MotionEvent: float getAxisValue(int)>
<android.view.MotionEvent: float getAxisValue(int,int)>
<android.view.MotionEvent: int getButtonState()>
<android.view.MotionEvent: int getClassification()>
<android.view.MotionEvent: int getDeviceId()>
<android.view.MotionEvent: long getDownTime()>
<android.view.MotionEvent: int getEdgeFlags()>
<android.view.MotionEvent: long getEventTime()>
<android.view.MotionEvent: int getFlags()>
<android.view.MotionEvent: float getHistoricalAxisValue(int,int)>
<android.view.MotionEvent: float getHistoricalAxisValue(int,int,int)>
<android.view.MotionEvent: long getHistoricalEventTime(int)>
<android.view.MotionEvent: float getHistoricalOrientation(int)>
<android.view.MotionEvent: float getHistoricalOrientation(int,int)>
<android.view.MotionEvent: void getHistoricalPointerCoords(int,int,android.view.MotionEvent$PointerCoords)>
<android.view.MotionEvent: float getHistoricalPressure(int)>
<android.view.MotionEvent: float getHistoricalPressure(int,int)>
<android.view.MotionEvent: float getHistoricalSize(int)>
<android.view.MotionEvent: float getHistoricalSize(int,int)>
<android.view.MotionEvent: float getHistoricalToolMajor(int)>
<android.view.MotionEvent: float getHistoricalToolMajor(int,int)>
<android.view.MotionEvent: float getHistoricalToolMinor(int)>
<android.view.MotionEvent: float getHistoricalToolMinor(int,int)>
<android.view.MotionEvent: float getHistoricalTouchMajor(int)>
<android.view.MotionEvent: float getHistoricalTouchMajor(int,int)>
<android.view.MotionEvent: float getHistoricalTouchMinor(int)>
<android.view.MotionEvent: float getHistoricalTouchMinor(int,int)>
<android.view.MotionEvent: float getHistoricalX(int)>
<android.view.MotionEvent: float getHistoricalX(int,int)>
<android.view.MotionEvent: float getHistoricalY(int)>
<android.view.MotionEvent: float getHistoricalY(int,int)>
<android.view.MotionEvent: int getHistorySize()>
<android.view.MotionEvent: int getMetaState()>
<android.view.MotionEvent: float getOrientation()>
<android.view.MotionEvent: float getOrientation(int)>
<android.view.MotionEvent: void getPointerCoords(int,android.view.MotionEvent$PointerCoords)>
<android.view.MotionEvent: int getPointerCount()>
<android.view.MotionEvent: int getPointerId(int)>
<android.view.MotionEvent: void getPointerProperties(int,android.view.MotionEvent$PointerProperties)>
<android.view.MotionEvent: float getPressure()>
<android.view.MotionEvent: float getPressure(int)>
<android.view.MotionEvent: float getRawX()>
<android.view.MotionEvent: float getRawX(int)>
<android.view.MotionEvent: float getRawY()>
<android.view.MotionEvent: float getRawY(int)>
<android.view.MotionEvent: float getSize()>
<android.view.MotionEvent: float getSize(int)>
<android.view.MotionEvent: int getSource()>
<android.view.MotionEvent: float getToolMajor()>
<android.view.MotionEvent: float getToolMajor(int)>
<android.view.MotionEvent: float getToolMinor()>
<android.view.MotionEvent: float getToolMinor(int)>
<android.view.MotionEvent: int getToolType(int)>
<android.view.MotionEvent: float getTouchMajor()>
<android.view.MotionEvent: float getTouchMajor(int)>
<android.view.MotionEvent: float getTouchMinor()>
<android.view.MotionEvent: float getTouchMinor(int)>
<android.view.MotionEvent: float getX()>
<android.view.MotionEvent: float getX(int)>
<android.view.MotionEvent: float getXPrecision()>
<android.view.MotionEvent: float getY()>
<android.view.MotionEvent: float getY(int)>
<android.view.MotionEvent: float getYPrecision()>
<android.view.MotionEvent: boolean isButtonPressed(int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[],int,int,float,float,int,int,int,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,int[],android.view.MotionEvent$PointerCoords[],int,float,float,int,int,int,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,float,float,int,float,float,int,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>
<android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>
<android.view.MotionEvent: void offsetLocation(float,float)>
<android.view.MotionEvent: void recycle()>
<android.view.MotionEvent: void setAction(int)>
<android.view.MotionEvent: void setEdgeFlags(int)>
<android.view.MotionEvent: void setLocation(float,float)>
<android.view.MotionEvent: void setSource(int)>
<android.view.MotionEvent: void transform(android.graphics.Matrix)>
<android.view.MotionEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.MotionEvent: int ACTION_BUTTON_PRESS>
<android.view.MotionEvent: int ACTION_BUTTON_RELEASE>
<android.view.MotionEvent: int ACTION_CANCEL>
<android.view.MotionEvent: int ACTION_DOWN>
<android.view.MotionEvent: int ACTION_HOVER_ENTER>
<android.view.MotionEvent: int ACTION_HOVER_EXIT>
<android.view.MotionEvent: int ACTION_HOVER_MOVE>
<android.view.MotionEvent: int ACTION_MASK>
<android.view.MotionEvent: int ACTION_MOVE>
<android.view.MotionEvent: int ACTION_OUTSIDE>
<android.view.MotionEvent: int ACTION_POINTER_1_DOWN>
<android.view.MotionEvent: int ACTION_POINTER_1_UP>
<android.view.MotionEvent: int ACTION_POINTER_2_DOWN>
<android.view.MotionEvent: int ACTION_POINTER_2_UP>
<android.view.MotionEvent: int ACTION_POINTER_3_DOWN>
<android.view.MotionEvent: int ACTION_POINTER_3_UP>
<android.view.MotionEvent: int ACTION_POINTER_DOWN>
<android.view.MotionEvent: int ACTION_POINTER_ID_MASK>
<android.view.MotionEvent: int ACTION_POINTER_ID_SHIFT>
<android.view.MotionEvent: int ACTION_POINTER_INDEX_MASK>
<android.view.MotionEvent: int ACTION_POINTER_INDEX_SHIFT>
<android.view.MotionEvent: int ACTION_POINTER_UP>
<android.view.MotionEvent: int ACTION_SCROLL>
<android.view.MotionEvent: int ACTION_UP>
<android.view.MotionEvent: int AXIS_BRAKE>
<android.view.MotionEvent: int AXIS_DISTANCE>
<android.view.MotionEvent: int AXIS_GAS>
<android.view.MotionEvent: int AXIS_GENERIC_1>
<android.view.MotionEvent: int AXIS_GENERIC_10>
<android.view.MotionEvent: int AXIS_GENERIC_11>
<android.view.MotionEvent: int AXIS_GENERIC_12>
<android.view.MotionEvent: int AXIS_GENERIC_13>
<android.view.MotionEvent: int AXIS_GENERIC_14>
<android.view.MotionEvent: int AXIS_GENERIC_15>
<android.view.MotionEvent: int AXIS_GENERIC_16>
<android.view.MotionEvent: int AXIS_GENERIC_2>
<android.view.MotionEvent: int AXIS_GENERIC_3>
<android.view.MotionEvent: int AXIS_GENERIC_4>
<android.view.MotionEvent: int AXIS_GENERIC_5>
<android.view.MotionEvent: int AXIS_GENERIC_6>
<android.view.MotionEvent: int AXIS_GENERIC_7>
<android.view.MotionEvent: int AXIS_GENERIC_8>
<android.view.MotionEvent: int AXIS_GENERIC_9>
<android.view.MotionEvent: int AXIS_HAT_X>
<android.view.MotionEvent: int AXIS_HAT_Y>
<android.view.MotionEvent: int AXIS_HSCROLL>
<android.view.MotionEvent: int AXIS_LTRIGGER>
<android.view.MotionEvent: int AXIS_ORIENTATION>
<android.view.MotionEvent: int AXIS_PRESSURE>
<android.view.MotionEvent: int AXIS_RELATIVE_X>
<android.view.MotionEvent: int AXIS_RELATIVE_Y>
<android.view.MotionEvent: int AXIS_RTRIGGER>
<android.view.MotionEvent: int AXIS_RUDDER>
<android.view.MotionEvent: int AXIS_RX>
<android.view.MotionEvent: int AXIS_RY>
<android.view.MotionEvent: int AXIS_RZ>
<android.view.MotionEvent: int AXIS_SCROLL>
<android.view.MotionEvent: int AXIS_SIZE>
<android.view.MotionEvent: int AXIS_THROTTLE>
<android.view.MotionEvent: int AXIS_TILT>
<android.view.MotionEvent: int AXIS_TOOL_MAJOR>
<android.view.MotionEvent: int AXIS_TOOL_MINOR>
<android.view.MotionEvent: int AXIS_TOUCH_MAJOR>
<android.view.MotionEvent: int AXIS_TOUCH_MINOR>
<android.view.MotionEvent: int AXIS_VSCROLL>
<android.view.MotionEvent: int AXIS_WHEEL>
<android.view.MotionEvent: int AXIS_X>
<android.view.MotionEvent: int AXIS_Y>
<android.view.MotionEvent: int AXIS_Z>
<android.view.MotionEvent: int BUTTON_BACK>
<android.view.MotionEvent: int BUTTON_FORWARD>
<android.view.MotionEvent: int BUTTON_PRIMARY>
<android.view.MotionEvent: int BUTTON_SECONDARY>
<android.view.MotionEvent: int BUTTON_STYLUS_PRIMARY>
<android.view.MotionEvent: int BUTTON_STYLUS_SECONDARY>
<android.view.MotionEvent: int BUTTON_TERTIARY>
<android.view.MotionEvent: int CLASSIFICATION_AMBIGUOUS_GESTURE>
<android.view.MotionEvent: int CLASSIFICATION_DEEP_PRESS>
<android.view.MotionEvent: int CLASSIFICATION_NONE>
<android.view.MotionEvent: android.os.Parcelable$Creator CREATOR>
<android.view.MotionEvent: int EDGE_BOTTOM>
<android.view.MotionEvent: int EDGE_LEFT>
<android.view.MotionEvent: int EDGE_RIGHT>
<android.view.MotionEvent: int EDGE_TOP>
<android.view.MotionEvent: int FLAG_CANCELED>
<android.view.MotionEvent: int FLAG_WINDOW_IS_OBSCURED>
<android.view.MotionEvent: int FLAG_WINDOW_IS_PARTIALLY_OBSCURED>
<android.view.MotionEvent: int INVALID_POINTER_ID>
<android.view.MotionEvent: int TOOL_TYPE_ERASER>
<android.view.MotionEvent: int TOOL_TYPE_FINGER>
<android.view.MotionEvent: int TOOL_TYPE_MOUSE>
<android.view.MotionEvent: int TOOL_TYPE_STYLUS>
<android.view.MotionEvent: int TOOL_TYPE_UNKNOWN>
android.view.MotionEvent$PointerCoords
<android.view.MotionEvent$PointerCoords: void <init>()>
<android.view.MotionEvent$PointerCoords: void <init>(android.view.MotionEvent$PointerCoords)>
<android.view.MotionEvent$PointerCoords: void clear()>
<android.view.MotionEvent$PointerCoords: void copyFrom(android.view.MotionEvent$PointerCoords)>
<android.view.MotionEvent$PointerCoords: float getAxisValue(int)>
<android.view.MotionEvent$PointerCoords: void setAxisValue(int,float)>
<android.view.MotionEvent$PointerCoords: float orientation>
<android.view.MotionEvent$PointerCoords: float pressure>
<android.view.MotionEvent$PointerCoords: float size>
<android.view.MotionEvent$PointerCoords: float toolMajor>
<android.view.MotionEvent$PointerCoords: float toolMinor>
<android.view.MotionEvent$PointerCoords: float touchMajor>
<android.view.MotionEvent$PointerCoords: float touchMinor>
<android.view.MotionEvent$PointerCoords: float x>
<android.view.MotionEvent$PointerCoords: float y>
android.view.MotionEvent$PointerProperties
<android.view.MotionEvent$PointerProperties: void <init>()>
<android.view.MotionEvent$PointerProperties: void <init>(android.view.MotionEvent$PointerProperties)>
<android.view.MotionEvent$PointerProperties: void clear()>
<android.view.MotionEvent$PointerProperties: void copyFrom(android.view.MotionEvent$PointerProperties)>
<android.view.MotionEvent$PointerProperties: int id>
<android.view.MotionEvent$PointerProperties: int toolType>
android.view.OnReceiveContentListener
<android.view.OnReceiveContentListener: android.view.ContentInfo onReceiveContent(android.view.View,android.view.ContentInfo)>
android.view.OrientationEventListener
<android.view.OrientationEventListener: void <init>(android.content.Context)>
<android.view.OrientationEventListener: void <init>(android.content.Context,int)>
<android.view.OrientationEventListener: boolean canDetectOrientation()>
<android.view.OrientationEventListener: void disable()>
<android.view.OrientationEventListener: void enable()>
<android.view.OrientationEventListener: void onOrientationChanged(int)>
<android.view.OrientationEventListener: int ORIENTATION_UNKNOWN>
android.view.OrientationListener
<android.view.OrientationListener: void <init>(android.content.Context)>
<android.view.OrientationListener: void <init>(android.content.Context,int)>
<android.view.OrientationListener: void disable()>
<android.view.OrientationListener: void enable()>
<android.view.OrientationListener: void onAccuracyChanged(int,int)>
<android.view.OrientationListener: void onOrientationChanged(int)>
<android.view.OrientationListener: void onSensorChanged(int,float[])>
<android.view.OrientationListener: int ORIENTATION_UNKNOWN>
android.view.PixelCopy
<android.view.PixelCopy: void request(android.view.SurfaceView,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>
<android.view.PixelCopy: void request(android.view.SurfaceView,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>
<android.view.PixelCopy: void request(android.view.Surface,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>
<android.view.PixelCopy: void request(android.view.Surface,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>
<android.view.PixelCopy: void request(android.view.Window,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>
<android.view.PixelCopy: void request(android.view.Window,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>
<android.view.PixelCopy: int ERROR_DESTINATION_INVALID>
<android.view.PixelCopy: int ERROR_SOURCE_INVALID>
<android.view.PixelCopy: int ERROR_SOURCE_NO_DATA>
<android.view.PixelCopy: int ERROR_TIMEOUT>
<android.view.PixelCopy: int ERROR_UNKNOWN>
<android.view.PixelCopy: int SUCCESS>
android.view.PixelCopy$OnPixelCopyFinishedListener
<android.view.PixelCopy$OnPixelCopyFinishedListener: void onPixelCopyFinished(int)>
android.view.PointerIcon
<android.view.PointerIcon: android.view.PointerIcon create(android.graphics.Bitmap,float,float)>
<android.view.PointerIcon: int describeContents()>
<android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>
<android.view.PointerIcon: android.view.PointerIcon load(android.content.res.Resources,int)>
<android.view.PointerIcon: void writeToParcel(android.os.Parcel,int)>
<android.view.PointerIcon: android.os.Parcelable$Creator CREATOR>
<android.view.PointerIcon: int TYPE_ALIAS>
<android.view.PointerIcon: int TYPE_ALL_SCROLL>
<android.view.PointerIcon: int TYPE_ARROW>
<android.view.PointerIcon: int TYPE_CELL>
<android.view.PointerIcon: int TYPE_CONTEXT_MENU>
<android.view.PointerIcon: int TYPE_COPY>
<android.view.PointerIcon: int TYPE_CROSSHAIR>
<android.view.PointerIcon: int TYPE_DEFAULT>
<android.view.PointerIcon: int TYPE_GRAB>
<android.view.PointerIcon: int TYPE_GRABBING>
<android.view.PointerIcon: int TYPE_HAND>
<android.view.PointerIcon: int TYPE_HELP>
<android.view.PointerIcon: int TYPE_HORIZONTAL_DOUBLE_ARROW>
<android.view.PointerIcon: int TYPE_NO_DROP>
<android.view.PointerIcon: int TYPE_NULL>
<android.view.PointerIcon: int TYPE_TEXT>
<android.view.PointerIcon: int TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW>
<android.view.PointerIcon: int TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW>
<android.view.PointerIcon: int TYPE_VERTICAL_DOUBLE_ARROW>
<android.view.PointerIcon: int TYPE_VERTICAL_TEXT>
<android.view.PointerIcon: int TYPE_WAIT>
<android.view.PointerIcon: int TYPE_ZOOM_IN>
<android.view.PointerIcon: int TYPE_ZOOM_OUT>
android.view.RoundedCorner
<android.view.RoundedCorner: void <init>(int,int,int,int)>
<android.view.RoundedCorner: int describeContents()>
<android.view.RoundedCorner: android.graphics.Point getCenter()>
<android.view.RoundedCorner: int getPosition()>
<android.view.RoundedCorner: int getRadius()>
<android.view.RoundedCorner: void writeToParcel(android.os.Parcel,int)>
<android.view.RoundedCorner: android.os.Parcelable$Creator CREATOR>
<android.view.RoundedCorner: int POSITION_BOTTOM_LEFT>
<android.view.RoundedCorner: int POSITION_BOTTOM_RIGHT>
<android.view.RoundedCorner: int POSITION_TOP_LEFT>
<android.view.RoundedCorner: int POSITION_TOP_RIGHT>
android.view.ScaleGestureDetector
<android.view.ScaleGestureDetector: void <init>(android.content.Context,android.view.ScaleGestureDetector$OnScaleGestureListener)>
<android.view.ScaleGestureDetector: void <init>(android.content.Context,android.view.ScaleGestureDetector$OnScaleGestureListener,android.os.Handler)>
<android.view.ScaleGestureDetector: float getCurrentSpan()>
<android.view.ScaleGestureDetector: float getCurrentSpanX()>
<android.view.ScaleGestureDetector: float getCurrentSpanY()>
<android.view.ScaleGestureDetector: long getEventTime()>
<android.view.ScaleGestureDetector: float getFocusX()>
<android.view.ScaleGestureDetector: float getFocusY()>
<android.view.ScaleGestureDetector: float getPreviousSpan()>
<android.view.ScaleGestureDetector: float getPreviousSpanX()>
<android.view.ScaleGestureDetector: float getPreviousSpanY()>
<android.view.ScaleGestureDetector: float getScaleFactor()>
<android.view.ScaleGestureDetector: long getTimeDelta()>
<android.view.ScaleGestureDetector: boolean isInProgress()>
<android.view.ScaleGestureDetector: boolean isQuickScaleEnabled()>
<android.view.ScaleGestureDetector: boolean isStylusScaleEnabled()>
<android.view.ScaleGestureDetector: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.ScaleGestureDetector: void setQuickScaleEnabled(boolean)>
<android.view.ScaleGestureDetector: void setStylusScaleEnabled(boolean)>
android.view.ScaleGestureDetector$OnScaleGestureListener
<android.view.ScaleGestureDetector$OnScaleGestureListener: boolean onScale(android.view.ScaleGestureDetector)>
<android.view.ScaleGestureDetector$OnScaleGestureListener: boolean onScaleBegin(android.view.ScaleGestureDetector)>
<android.view.ScaleGestureDetector$OnScaleGestureListener: void onScaleEnd(android.view.ScaleGestureDetector)>
android.view.ScaleGestureDetector$SimpleOnScaleGestureListener
<android.view.ScaleGestureDetector$SimpleOnScaleGestureListener: void <init>()>
<android.view.ScaleGestureDetector$SimpleOnScaleGestureListener: boolean onScale(android.view.ScaleGestureDetector)>
<android.view.ScaleGestureDetector$SimpleOnScaleGestureListener: boolean onScaleBegin(android.view.ScaleGestureDetector)>
<android.view.ScaleGestureDetector$SimpleOnScaleGestureListener: void onScaleEnd(android.view.ScaleGestureDetector)>
android.view.ScrollCaptureCallback
<android.view.ScrollCaptureCallback: void onScrollCaptureEnd(java.lang.Runnable)>
<android.view.ScrollCaptureCallback: void onScrollCaptureImageRequest(android.view.ScrollCaptureSession,android.os.CancellationSignal,android.graphics.Rect,java.util.function.Consumer)>
<android.view.ScrollCaptureCallback: void onScrollCaptureSearch(android.os.CancellationSignal,java.util.function.Consumer)>
<android.view.ScrollCaptureCallback: void onScrollCaptureStart(android.view.ScrollCaptureSession,android.os.CancellationSignal,java.lang.Runnable)>
android.view.ScrollCaptureSession
<android.view.ScrollCaptureSession: void <init>(android.view.Surface,android.graphics.Rect,android.graphics.Point)>
<android.view.ScrollCaptureSession: android.graphics.Point getPositionInWindow()>
<android.view.ScrollCaptureSession: android.graphics.Rect getScrollBounds()>
<android.view.ScrollCaptureSession: android.view.Surface getSurface()>
android.view.ScrollCaptureTarget
<android.view.ScrollCaptureTarget: void <init>(android.view.View,android.graphics.Rect,android.graphics.Point,android.view.ScrollCaptureCallback)>
<android.view.ScrollCaptureTarget: android.view.ScrollCaptureCallback getCallback()>
<android.view.ScrollCaptureTarget: android.view.View getContainingView()>
<android.view.ScrollCaptureTarget: int getHint()>
<android.view.ScrollCaptureTarget: android.graphics.Rect getLocalVisibleRect()>
<android.view.ScrollCaptureTarget: android.graphics.Point getPositionInWindow()>
<android.view.ScrollCaptureTarget: android.graphics.Rect getScrollBounds()>
<android.view.ScrollCaptureTarget: void setScrollBounds(android.graphics.Rect)>
<android.view.ScrollCaptureTarget: void updatePositionInWindow()>
android.view.SearchEvent
<android.view.SearchEvent: void <init>(android.view.InputDevice)>
<android.view.SearchEvent: android.view.InputDevice getInputDevice()>
android.view.SoundEffectConstants
<android.view.SoundEffectConstants: int getConstantForFocusDirection(int,boolean)>
<android.view.SoundEffectConstants: int getContantForFocusDirection(int)>
<android.view.SoundEffectConstants: int CLICK>
<android.view.SoundEffectConstants: int NAVIGATION_DOWN>
<android.view.SoundEffectConstants: int NAVIGATION_LEFT>
<android.view.SoundEffectConstants: int NAVIGATION_REPEAT_DOWN>
<android.view.SoundEffectConstants: int NAVIGATION_REPEAT_LEFT>
<android.view.SoundEffectConstants: int NAVIGATION_REPEAT_RIGHT>
<android.view.SoundEffectConstants: int NAVIGATION_REPEAT_UP>
<android.view.SoundEffectConstants: int NAVIGATION_RIGHT>
<android.view.SoundEffectConstants: int NAVIGATION_UP>
android.view.SubMenu
<android.view.SubMenu: void clearHeader()>
<android.view.SubMenu: android.view.MenuItem getItem()>
<android.view.SubMenu: android.view.SubMenu setHeaderIcon(int)>
<android.view.SubMenu: android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable)>
<android.view.SubMenu: android.view.SubMenu setHeaderTitle(int)>
<android.view.SubMenu: android.view.SubMenu setHeaderTitle(java.lang.CharSequence)>
<android.view.SubMenu: android.view.SubMenu setHeaderView(android.view.View)>
<android.view.SubMenu: android.view.SubMenu setIcon(int)>
<android.view.SubMenu: android.view.SubMenu setIcon(android.graphics.drawable.Drawable)>
android.view.Surface
<android.view.Surface: void <init>(android.view.SurfaceControl)>
<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>
<android.view.Surface: int describeContents()>
<android.view.Surface: boolean isValid()>
<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>
<android.view.Surface: android.graphics.Canvas lockHardwareCanvas()>
<android.view.Surface: void readFromParcel(android.os.Parcel)>
<android.view.Surface: void release()>
<android.view.Surface: void setFrameRate(float,int,int)>
<android.view.Surface: void setFrameRate(float,int)>
<android.view.Surface: void unlockCanvas(android.graphics.Canvas)>
<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>
<android.view.Surface: void writeToParcel(android.os.Parcel,int)>
<android.view.Surface: int CHANGE_FRAME_RATE_ALWAYS>
<android.view.Surface: int CHANGE_FRAME_RATE_ONLY_IF_SEAMLESS>
<android.view.Surface: android.os.Parcelable$Creator CREATOR>
<android.view.Surface: int FRAME_RATE_COMPATIBILITY_DEFAULT>
<android.view.Surface: int FRAME_RATE_COMPATIBILITY_FIXED_SOURCE>
<android.view.Surface: int ROTATION_0>
<android.view.Surface: int ROTATION_180>
<android.view.Surface: int ROTATION_270>
<android.view.Surface: int ROTATION_90>
android.view.Surface$OutOfResourcesException
<android.view.Surface$OutOfResourcesException: void <init>()>
<android.view.Surface$OutOfResourcesException: void <init>(java.lang.String)>
android.view.SurfaceControl
<android.view.SurfaceControl: int describeContents()>
<android.view.SurfaceControl: boolean isValid()>
<android.view.SurfaceControl: void readFromParcel(android.os.Parcel)>
<android.view.SurfaceControl: void release()>
<android.view.SurfaceControl: void writeToParcel(android.os.Parcel,int)>
<android.view.SurfaceControl: int BUFFER_TRANSFORM_IDENTITY>
<android.view.SurfaceControl: int BUFFER_TRANSFORM_MIRROR_HORIZONTAL>
<android.view.SurfaceControl: int BUFFER_TRANSFORM_MIRROR_VERTICAL>
<android.view.SurfaceControl: int BUFFER_TRANSFORM_ROTATE_180>
<android.view.SurfaceControl: int BUFFER_TRANSFORM_ROTATE_270>
<android.view.SurfaceControl: int BUFFER_TRANSFORM_ROTATE_90>
<android.view.SurfaceControl: android.os.Parcelable$Creator CREATOR>
android.view.SurfaceControl$Builder
<android.view.SurfaceControl$Builder: void <init>()>
<android.view.SurfaceControl$Builder: android.view.SurfaceControl build()>
<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setBufferSize(int,int)>
<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setFormat(int)>
<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setHidden(boolean)>
<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setName(java.lang.String)>
<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setOpaque(boolean)>
<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setParent(android.view.SurfaceControl)>
android.view.SurfaceControl$Transaction
<android.view.SurfaceControl$Transaction: void <init>()>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction addTransactionCommittedListener(java.util.concurrent.Executor,android.view.SurfaceControl$TransactionCommittedListener)>
<android.view.SurfaceControl$Transaction: void apply()>
<android.view.SurfaceControl$Transaction: void close()>
<android.view.SurfaceControl$Transaction: int describeContents()>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparent(android.view.SurfaceControl,android.view.SurfaceControl)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setAlpha(android.view.SurfaceControl,float)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer,android.hardware.SyncFence)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer,android.hardware.SyncFence,java.util.function.Consumer)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBufferSize(android.view.SurfaceControl,int,int)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBufferTransform(android.view.SurfaceControl,int)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setCrop(android.view.SurfaceControl,android.graphics.Rect)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setDamageRegion(android.view.SurfaceControl,android.graphics.Region)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setDataSpace(android.view.SurfaceControl,int)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setFrameRate(android.view.SurfaceControl,float,int)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setFrameRate(android.view.SurfaceControl,float,int,int)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setGeometry(android.view.SurfaceControl,android.graphics.Rect,android.graphics.Rect,int)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayer(android.view.SurfaceControl,int)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setOpaque(android.view.SurfaceControl,boolean)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setPosition(android.view.SurfaceControl,float,float)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setScale(android.view.SurfaceControl,float,float)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setVisibility(android.view.SurfaceControl,boolean)>
<android.view.SurfaceControl$Transaction: void writeToParcel(android.os.Parcel,int)>
<android.view.SurfaceControl$Transaction: android.os.Parcelable$Creator CREATOR>
android.view.SurfaceControl$TransactionCommittedListener
<android.view.SurfaceControl$TransactionCommittedListener: void onTransactionCommitted()>
android.view.SurfaceControlViewHost
<android.view.SurfaceControlViewHost: void <init>(android.content.Context,android.view.Display,android.os.IBinder)>
<android.view.SurfaceControlViewHost: android.view.SurfaceControlViewHost$SurfacePackage getSurfacePackage()>
<android.view.SurfaceControlViewHost: android.view.View getView()>
<android.view.SurfaceControlViewHost: void relayout(int,int)>
<android.view.SurfaceControlViewHost: void release()>
<android.view.SurfaceControlViewHost: void setView(android.view.View,int,int)>
android.view.SurfaceControlViewHost$SurfacePackage
<android.view.SurfaceControlViewHost$SurfacePackage: void <init>(android.view.SurfaceControlViewHost$SurfacePackage)>
<android.view.SurfaceControlViewHost$SurfacePackage: int describeContents()>
<android.view.SurfaceControlViewHost$SurfacePackage: void notifyConfigurationChanged(android.content.res.Configuration)>
<android.view.SurfaceControlViewHost$SurfacePackage: void notifyDetachedFromWindow()>
<android.view.SurfaceControlViewHost$SurfacePackage: void release()>
<android.view.SurfaceControlViewHost$SurfacePackage: void writeToParcel(android.os.Parcel,int)>
<android.view.SurfaceControlViewHost$SurfacePackage: android.os.Parcelable$Creator CREATOR>
android.view.SurfaceHolder
<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>
<android.view.SurfaceHolder: android.view.Surface getSurface()>
<android.view.SurfaceHolder: android.graphics.Rect getSurfaceFrame()>
<android.view.SurfaceHolder: boolean isCreating()>
<android.view.SurfaceHolder: android.graphics.Canvas lockCanvas()>
<android.view.SurfaceHolder: android.graphics.Canvas lockCanvas(android.graphics.Rect)>
<android.view.SurfaceHolder: android.graphics.Canvas lockHardwareCanvas()>
<android.view.SurfaceHolder: void removeCallback(android.view.SurfaceHolder$Callback)>
<android.view.SurfaceHolder: void setFixedSize(int,int)>
<android.view.SurfaceHolder: void setFormat(int)>
<android.view.SurfaceHolder: void setKeepScreenOn(boolean)>
<android.view.SurfaceHolder: void setSizeFromLayout()>
<android.view.SurfaceHolder: void setType(int)>
<android.view.SurfaceHolder: void unlockCanvasAndPost(android.graphics.Canvas)>
<android.view.SurfaceHolder: int SURFACE_TYPE_GPU>
<android.view.SurfaceHolder: int SURFACE_TYPE_HARDWARE>
<android.view.SurfaceHolder: int SURFACE_TYPE_NORMAL>
<android.view.SurfaceHolder: int SURFACE_TYPE_PUSH_BUFFERS>
android.view.SurfaceHolder$BadSurfaceTypeException
<android.view.SurfaceHolder$BadSurfaceTypeException: void <init>()>
<android.view.SurfaceHolder$BadSurfaceTypeException: void <init>(java.lang.String)>
android.view.SurfaceHolder$Callback
<android.view.SurfaceHolder$Callback: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>
<android.view.SurfaceHolder$Callback: void surfaceCreated(android.view.SurfaceHolder)>
<android.view.SurfaceHolder$Callback: void surfaceDestroyed(android.view.SurfaceHolder)>
android.view.SurfaceHolder$Callback2
<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeeded(android.view.SurfaceHolder)>
<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeededAsync(android.view.SurfaceHolder,java.lang.Runnable)>
android.view.SurfaceView
<android.view.SurfaceView: void <init>(android.content.Context)>
<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>
<android.view.SurfaceView: android.os.IBinder getHostToken()>
<android.view.SurfaceView: android.view.SurfaceControl getSurfaceControl()>
<android.view.SurfaceView: void setChildSurfacePackage(android.view.SurfaceControlViewHost$SurfacePackage)>
<android.view.SurfaceView: void setSecure(boolean)>
<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)>
<android.view.SurfaceView: void setZOrderOnTop(boolean)>
android.view.TextureView
<android.view.TextureView: void <init>(android.content.Context)>
<android.view.TextureView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.TextureView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.TextureView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.view.TextureView: void draw(android.graphics.Canvas)>
<android.view.TextureView: android.graphics.Bitmap getBitmap()>
<android.view.TextureView: android.graphics.Bitmap getBitmap(int,int)>
<android.view.TextureView: android.graphics.Bitmap getBitmap(android.graphics.Bitmap)>
<android.view.TextureView: android.graphics.SurfaceTexture getSurfaceTexture()>
<android.view.TextureView: android.view.TextureView$SurfaceTextureListener getSurfaceTextureListener()>
<android.view.TextureView: android.graphics.Matrix getTransform(android.graphics.Matrix)>
<android.view.TextureView: boolean isAvailable()>
<android.view.TextureView: android.graphics.Canvas lockCanvas()>
<android.view.TextureView: android.graphics.Canvas lockCanvas(android.graphics.Rect)>
<android.view.TextureView: void onDraw(android.graphics.Canvas)>
<android.view.TextureView: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.view.TextureView: void setOpaque(boolean)>
<android.view.TextureView: void setSurfaceTexture(android.graphics.SurfaceTexture)>
<android.view.TextureView: void setSurfaceTextureListener(android.view.TextureView$SurfaceTextureListener)>
<android.view.TextureView: void setTransform(android.graphics.Matrix)>
<android.view.TextureView: void unlockCanvasAndPost(android.graphics.Canvas)>
android.view.TextureView$SurfaceTextureListener
<android.view.TextureView$SurfaceTextureListener: void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int)>
<android.view.TextureView$SurfaceTextureListener: boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)>
<android.view.TextureView$SurfaceTextureListener: void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int)>
<android.view.TextureView$SurfaceTextureListener: void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)>
android.view.TouchDelegate
<android.view.TouchDelegate: void <init>(android.graphics.Rect,android.view.View)>
<android.view.TouchDelegate: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()>
<android.view.TouchDelegate: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.TouchDelegate: boolean onTouchExplorationHoverEvent(android.view.MotionEvent)>
<android.view.TouchDelegate: int ABOVE>
<android.view.TouchDelegate: int BELOW>
<android.view.TouchDelegate: int TO_LEFT>
<android.view.TouchDelegate: int TO_RIGHT>
android.view.VelocityTracker
<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>
<android.view.VelocityTracker: void clear()>
<android.view.VelocityTracker: void computeCurrentVelocity(int)>
<android.view.VelocityTracker: void computeCurrentVelocity(int,float)>
<android.view.VelocityTracker: float getXVelocity()>
<android.view.VelocityTracker: float getXVelocity(int)>
<android.view.VelocityTracker: float getYVelocity()>
<android.view.VelocityTracker: float getYVelocity(int)>
<android.view.VelocityTracker: android.view.VelocityTracker obtain()>
<android.view.VelocityTracker: void recycle()>
android.view.VerifiedInputEvent
<android.view.VerifiedInputEvent: int describeContents()>
<android.view.VerifiedInputEvent: int getDeviceId()>
<android.view.VerifiedInputEvent: int getDisplayId()>
<android.view.VerifiedInputEvent: long getEventTimeNanos()>
<android.view.VerifiedInputEvent: int getSource()>
<android.view.VerifiedInputEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.VerifiedInputEvent: android.os.Parcelable$Creator CREATOR>
android.view.VerifiedKeyEvent
<android.view.VerifiedKeyEvent: int getAction()>
<android.view.VerifiedKeyEvent: long getDownTimeNanos()>
<android.view.VerifiedKeyEvent: java.lang.Boolean getFlag(int)>
<android.view.VerifiedKeyEvent: int getKeyCode()>
<android.view.VerifiedKeyEvent: int getMetaState()>
<android.view.VerifiedKeyEvent: int getRepeatCount()>
<android.view.VerifiedKeyEvent: int getScanCode()>
<android.view.VerifiedKeyEvent: android.os.Parcelable$Creator CREATOR>
android.view.VerifiedMotionEvent
<android.view.VerifiedMotionEvent: int getActionMasked()>
<android.view.VerifiedMotionEvent: int getButtonState()>
<android.view.VerifiedMotionEvent: long getDownTimeNanos()>
<android.view.VerifiedMotionEvent: java.lang.Boolean getFlag(int)>
<android.view.VerifiedMotionEvent: int getMetaState()>
<android.view.VerifiedMotionEvent: float getRawX()>
<android.view.VerifiedMotionEvent: float getRawY()>
<android.view.VerifiedMotionEvent: android.os.Parcelable$Creator CREATOR>
android.view.View
<android.view.View: void <init>(android.content.Context)>
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.view.View: void addChildrenForAccessibility(java.util.ArrayList)>
<android.view.View: void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>
<android.view.View: void addFocusables(java.util.ArrayList,int)>
<android.view.View: void addFocusables(java.util.ArrayList,int,int)>
<android.view.View: void addKeyboardNavigationClusters(java.util.Collection,int)>
<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>
<android.view.View: void addOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)>
<android.view.View: void addTouchables(java.util.ArrayList)>
<android.view.View: android.view.ViewPropertyAnimator animate()>
<android.view.View: void announceForAccessibility(java.lang.CharSequence)>
<android.view.View: void autofill(android.view.autofill.AutofillValue)>
<android.view.View: void autofill(android.util.SparseArray)>
<android.view.View: boolean awakenScrollBars()>
<android.view.View: boolean awakenScrollBars(int)>
<android.view.View: boolean awakenScrollBars(int,boolean)>
<android.view.View: void bringToFront()>
<android.view.View: void buildDrawingCache()>
<android.view.View: void buildDrawingCache(boolean)>
<android.view.View: void buildLayer()>
<android.view.View: boolean callOnClick()>
<android.view.View: boolean canResolveLayoutDirection()>
<android.view.View: boolean canResolveTextAlignment()>
<android.view.View: boolean canResolveTextDirection()>
<android.view.View: boolean canScrollHorizontally(int)>
<android.view.View: boolean canScrollVertically(int)>
<android.view.View: void cancelDragAndDrop()>
<android.view.View: void cancelLongPress()>
<android.view.View: void cancelPendingInputEvents()>
<android.view.View: boolean checkInputConnectionProxy(android.view.View)>
<android.view.View: void clearAnimation()>
<android.view.View: void clearFocus()>
<android.view.View: void clearViewTranslationCallback()>
<android.view.View: int combineMeasuredStates(int,int)>
<android.view.View: int computeHorizontalScrollExtent()>
<android.view.View: int computeHorizontalScrollOffset()>
<android.view.View: int computeHorizontalScrollRange()>
<android.view.View: void computeScroll()>
<android.view.View: android.view.WindowInsets computeSystemWindowInsets(android.view.WindowInsets,android.graphics.Rect)>
<android.view.View: int computeVerticalScrollExtent()>
<android.view.View: int computeVerticalScrollOffset()>
<android.view.View: int computeVerticalScrollRange()>
<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()>
<android.view.View: void createContextMenu(android.view.ContextMenu)>
<android.view.View: void destroyDrawingCache()>
<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>
<android.view.View: boolean dispatchCapturedPointerEvent(android.view.MotionEvent)>
<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)>
<android.view.View: void dispatchCreateViewTranslationRequest(java.util.Map,int[],android.view.translation.TranslationCapability,java.util.List)>
<android.view.View: void dispatchDisplayHint(int)>
<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>
<android.view.View: void dispatchDraw(android.graphics.Canvas)>
<android.view.View: void dispatchDrawableHotspotChanged(float,float)>
<android.view.View: void dispatchFinishTemporaryDetach()>
<android.view.View: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>
<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.view.View: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>
<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>
<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>
<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.view.View: boolean dispatchNestedFling(float,float,boolean)>
<android.view.View: boolean dispatchNestedPreFling(float,float)>
<android.view.View: boolean dispatchNestedPrePerformAccessibilityAction(int,android.os.Bundle)>
<android.view.View: boolean dispatchNestedPreScroll(int,int,int[],int[])>
<android.view.View: boolean dispatchNestedScroll(int,int,int,int,int[])>
<android.view.View: void dispatchPointerCaptureChanged(boolean)>
<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.View: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>
<android.view.View: void dispatchProvideStructure(android.view.ViewStructure)>
<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>
<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>
<android.view.View: void dispatchScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)>
<android.view.View: void dispatchSetActivated(boolean)>
<android.view.View: void dispatchSetPressed(boolean)>
<android.view.View: void dispatchSetSelected(boolean)>
<android.view.View: void dispatchStartTemporaryDetach()>
<android.view.View: void dispatchSystemUiVisibilityChanged(int)>
<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.view.View: boolean dispatchUnhandledMove(android.view.View,int)>
<android.view.View: void dispatchVisibilityChanged(android.view.View,int)>
<android.view.View: void dispatchWindowFocusChanged(boolean)>
<android.view.View: void dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation)>
<android.view.View: void dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation)>
<android.view.View: android.view.WindowInsets dispatchWindowInsetsAnimationProgress(android.view.WindowInsets,java.util.List)>
<android.view.View: android.view.WindowInsetsAnimation$Bounds dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>
<android.view.View: void dispatchWindowSystemUiVisiblityChanged(int)>
<android.view.View: void dispatchWindowVisibilityChanged(int)>
<android.view.View: void draw(android.graphics.Canvas)>
<android.view.View: void drawableHotspotChanged(float,float)>
<android.view.View: void drawableStateChanged()>
<android.view.View: android.view.View findFocus()>
<android.view.View: android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcher()>
<android.view.View: android.view.View findViewById(int)>
<android.view.View: android.view.View findViewWithTag(java.lang.Object)>
<android.view.View: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>
<android.view.View: boolean fitSystemWindows(android.graphics.Rect)>
<android.view.View: android.view.View focusSearch(int)>
<android.view.View: void forceHasOverlappingRendering(boolean)>
<android.view.View: void forceLayout()>
<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>
<android.view.View: void generateDisplayHash(java.lang.String,android.graphics.Rect,java.util.concurrent.Executor,android.view.displayhash.DisplayHashResultCallback)>
<android.view.View: int generateViewId()>
<android.view.View: java.lang.CharSequence getAccessibilityClassName()>
<android.view.View: android.view.View$AccessibilityDelegate getAccessibilityDelegate()>
<android.view.View: int getAccessibilityLiveRegion()>
<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>
<android.view.View: java.lang.CharSequence getAccessibilityPaneTitle()>
<android.view.View: int getAccessibilityTraversalAfter()>
<android.view.View: int getAccessibilityTraversalBefore()>
<android.view.View: float getAlpha()>
<android.view.View: android.view.animation.Animation getAnimation()>
<android.view.View: android.graphics.Matrix getAnimationMatrix()>
<android.view.View: android.os.IBinder getApplicationWindowToken()>
<android.view.View: int[] getAttributeResolutionStack(int)>
<android.view.View: java.util.Map getAttributeSourceResourceMap()>
<android.view.View: java.lang.String[] getAutofillHints()>
<android.view.View: android.view.autofill.AutofillId getAutofillId()>
<android.view.View: int getAutofillType()>
<android.view.View: android.view.autofill.AutofillValue getAutofillValue()>
<android.view.View: android.graphics.drawable.Drawable getBackground()>
<android.view.View: android.graphics.BlendMode getBackgroundTintBlendMode()>
<android.view.View: android.content.res.ColorStateList getBackgroundTintList()>
<android.view.View: android.graphics.PorterDuff$Mode getBackgroundTintMode()>
<android.view.View: int getBaseline()>
<android.view.View: int getBottom()>
<android.view.View: float getBottomFadingEdgeStrength()>
<android.view.View: int getBottomPaddingOffset()>
<android.view.View: float getCameraDistance()>
<android.view.View: android.graphics.Rect getClipBounds()>
<android.view.View: boolean getClipBounds(android.graphics.Rect)>
<android.view.View: boolean getClipToOutline()>
<android.view.View: android.view.contentcapture.ContentCaptureSession getContentCaptureSession()>
<android.view.View: java.lang.CharSequence getContentDescription()>
<android.view.View: android.content.Context getContext()>
<android.view.View: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>
<android.view.View: boolean getDefaultFocusHighlightEnabled()>
<android.view.View: int getDefaultSize(int,int)>
<android.view.View: android.view.Display getDisplay()>
<android.view.View: int[] getDrawableState()>
<android.view.View: android.graphics.Bitmap getDrawingCache()>
<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>
<android.view.View: int getDrawingCacheBackgroundColor()>
<android.view.View: int getDrawingCacheQuality()>
<android.view.View: void getDrawingRect(android.graphics.Rect)>
<android.view.View: long getDrawingTime()>
<android.view.View: float getElevation()>
<android.view.View: int getExplicitStyle()>
<android.view.View: boolean getFilterTouchesWhenObscured()>
<android.view.View: boolean getFitsSystemWindows()>
<android.view.View: int getFocusable()>
<android.view.View: java.util.ArrayList getFocusables(int)>
<android.view.View: void getFocusedRect(android.graphics.Rect)>
<android.view.View: android.graphics.drawable.Drawable getForeground()>
<android.view.View: int getForegroundGravity()>
<android.view.View: android.graphics.BlendMode getForegroundTintBlendMode()>
<android.view.View: android.content.res.ColorStateList getForegroundTintList()>
<android.view.View: android.graphics.PorterDuff$Mode getForegroundTintMode()>
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>
<android.view.View: android.os.Handler getHandler()>
<android.view.View: boolean getHasOverlappingRendering()>
<android.view.View: int getHeight()>
<android.view.View: void getHitRect(android.graphics.Rect)>
<android.view.View: int getHorizontalFadingEdgeLength()>
<android.view.View: int getHorizontalScrollbarHeight()>
<android.view.View: android.graphics.drawable.Drawable getHorizontalScrollbarThumbDrawable()>
<android.view.View: android.graphics.drawable.Drawable getHorizontalScrollbarTrackDrawable()>
<android.view.View: int getId()>
<android.view.View: int getImportantForAccessibility()>
<android.view.View: int getImportantForAutofill()>
<android.view.View: int getImportantForContentCapture()>
<android.view.View: boolean getKeepScreenOn()>
<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>
<android.view.View: int getLabelFor()>
<android.view.View: int getLayerType()>
<android.view.View: int getLayoutDirection()>
<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>
<android.view.View: int getLeft()>
<android.view.View: float getLeftFadingEdgeStrength()>
<android.view.View: int getLeftPaddingOffset()>
<android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)>
<android.view.View: void getLocationInSurface(int[])>
<android.view.View: void getLocationInWindow(int[])>
<android.view.View: void getLocationOnScreen(int[])>
<android.view.View: android.graphics.Matrix getMatrix()>
<android.view.View: int getMeasuredHeight()>
<android.view.View: int getMeasuredHeightAndState()>
<android.view.View: int getMeasuredState()>
<android.view.View: int getMeasuredWidth()>
<android.view.View: int getMeasuredWidthAndState()>
<android.view.View: int getMinimumHeight()>
<android.view.View: int getMinimumWidth()>
<android.view.View: int getNextClusterForwardId()>
<android.view.View: int getNextFocusDownId()>
<android.view.View: int getNextFocusForwardId()>
<android.view.View: int getNextFocusLeftId()>
<android.view.View: int getNextFocusRightId()>
<android.view.View: int getNextFocusUpId()>
<android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()>
<android.view.View: int getOutlineAmbientShadowColor()>
<android.view.View: android.view.ViewOutlineProvider getOutlineProvider()>
<android.view.View: int getOutlineSpotShadowColor()>
<android.view.View: int getOverScrollMode()>
<android.view.View: android.view.ViewOverlay getOverlay()>
<android.view.View: int getPaddingBottom()>
<android.view.View: int getPaddingEnd()>
<android.view.View: int getPaddingLeft()>
<android.view.View: int getPaddingRight()>
<android.view.View: int getPaddingStart()>
<android.view.View: int getPaddingTop()>
<android.view.View: android.view.ViewParent getParent()>
<android.view.View: android.view.ViewParent getParentForAccessibility()>
<android.view.View: float getPivotX()>
<android.view.View: float getPivotY()>
<android.view.View: android.view.PointerIcon getPointerIcon()>
<android.view.View: java.util.List getPreferKeepClearRects()>
<android.view.View: java.lang.String[] getReceiveContentMimeTypes()>
<android.view.View: android.content.res.Resources getResources()>
<android.view.View: boolean getRevealOnFocusHint()>
<android.view.View: int getRight()>
<android.view.View: float getRightFadingEdgeStrength()>
<android.view.View: int getRightPaddingOffset()>
<android.view.View: android.view.AttachedSurfaceControl getRootSurfaceControl()>
<android.view.View: android.view.View getRootView()>
<android.view.View: android.view.WindowInsets getRootWindowInsets()>
<android.view.View: float getRotation()>
<android.view.View: float getRotationX()>
<android.view.View: float getRotationY()>
<android.view.View: float getScaleX()>
<android.view.View: float getScaleY()>
<android.view.View: int getScrollBarDefaultDelayBeforeFade()>
<android.view.View: int getScrollBarFadeDuration()>
<android.view.View: int getScrollBarSize()>
<android.view.View: int getScrollBarStyle()>
<android.view.View: int getScrollCaptureHint()>
<android.view.View: int getScrollIndicators()>
<android.view.View: int getScrollX()>
<android.view.View: int getScrollY()>
<android.view.View: int getSolidColor()>
<android.view.View: int getSourceLayoutResId()>
<android.view.View: java.lang.CharSequence getStateDescription()>
<android.view.View: android.animation.StateListAnimator getStateListAnimator()>
<android.view.View: int getSuggestedMinimumHeight()>
<android.view.View: int getSuggestedMinimumWidth()>
<android.view.View: java.util.List getSystemGestureExclusionRects()>
<android.view.View: int getSystemUiVisibility()>
<android.view.View: java.lang.Object getTag()>
<android.view.View: java.lang.Object getTag(int)>
<android.view.View: int getTextAlignment()>
<android.view.View: int getTextDirection()>
<android.view.View: java.lang.CharSequence getTooltipText()>
<android.view.View: int getTop()>
<android.view.View: float getTopFadingEdgeStrength()>
<android.view.View: int getTopPaddingOffset()>
<android.view.View: android.view.TouchDelegate getTouchDelegate()>
<android.view.View: java.util.ArrayList getTouchables()>
<android.view.View: float getTransitionAlpha()>
<android.view.View: java.lang.String getTransitionName()>
<android.view.View: float getTranslationX()>
<android.view.View: float getTranslationY()>
<android.view.View: float getTranslationZ()>
<android.view.View: long getUniqueDrawingId()>
<android.view.View: int getVerticalFadingEdgeLength()>
<android.view.View: int getVerticalScrollbarPosition()>
<android.view.View: android.graphics.drawable.Drawable getVerticalScrollbarThumbDrawable()>
<android.view.View: android.graphics.drawable.Drawable getVerticalScrollbarTrackDrawable()>
<android.view.View: int getVerticalScrollbarWidth()>
<android.view.View: android.view.translation.ViewTranslationResponse getViewTranslationResponse()>
<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>
<android.view.View: int getVisibility()>
<android.view.View: int getWidth()>
<android.view.View: int getWindowAttachCount()>
<android.view.View: android.view.WindowId getWindowId()>
<android.view.View: android.view.WindowInsetsController getWindowInsetsController()>
<android.view.View: int getWindowSystemUiVisibility()>
<android.view.View: android.os.IBinder getWindowToken()>
<android.view.View: int getWindowVisibility()>
<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)>
<android.view.View: float getX()>
<android.view.View: float getY()>
<android.view.View: float getZ()>
<android.view.View: boolean hasExplicitFocusable()>
<android.view.View: boolean hasFocus()>
<android.view.View: boolean hasFocusable()>
<android.view.View: boolean hasNestedScrollingParent()>
<android.view.View: boolean hasOnClickListeners()>
<android.view.View: boolean hasOnLongClickListeners()>
<android.view.View: boolean hasOverlappingRendering()>
<android.view.View: boolean hasPointerCapture()>
<android.view.View: boolean hasTransientState()>
<android.view.View: boolean hasWindowFocus()>
<android.view.View: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)>
<android.view.View: void invalidate(android.graphics.Rect)>
<android.view.View: void invalidate(int,int,int,int)>
<android.view.View: void invalidate()>
<android.view.View: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void invalidateOutline()>
<android.view.View: boolean isAccessibilityFocused()>
<android.view.View: boolean isAccessibilityHeading()>
<android.view.View: boolean isActivated()>
<android.view.View: boolean isAttachedToWindow()>
<android.view.View: boolean isAutoHandwritingEnabled()>
<android.view.View: boolean isClickable()>
<android.view.View: boolean isContextClickable()>
<android.view.View: boolean isDirty()>
<android.view.View: boolean isDrawingCacheEnabled()>
<android.view.View: boolean isDuplicateParentStateEnabled()>
<android.view.View: boolean isEnabled()>
<android.view.View: boolean isFocusable()>
<android.view.View: boolean isFocusableInTouchMode()>
<android.view.View: boolean isFocused()>
<android.view.View: boolean isFocusedByDefault()>
<android.view.View: boolean isForceDarkAllowed()>
<android.view.View: boolean isHapticFeedbackEnabled()>
<android.view.View: boolean isHardwareAccelerated()>
<android.view.View: boolean isHorizontalFadingEdgeEnabled()>
<android.view.View: boolean isHorizontalScrollBarEnabled()>
<android.view.View: boolean isHovered()>
<android.view.View: boolean isImportantForAccessibility()>
<android.view.View: boolean isImportantForAutofill()>
<android.view.View: boolean isImportantForContentCapture()>
<android.view.View: boolean isInEditMode()>
<android.view.View: boolean isInLayout()>
<android.view.View: boolean isInTouchMode()>
<android.view.View: boolean isKeyboardNavigationCluster()>
<android.view.View: boolean isLaidOut()>
<android.view.View: boolean isLayoutDirectionResolved()>
<android.view.View: boolean isLayoutRequested()>
<android.view.View: boolean isLongClickable()>
<android.view.View: boolean isNestedScrollingEnabled()>
<android.view.View: boolean isOpaque()>
<android.view.View: boolean isPaddingOffsetRequired()>
<android.view.View: boolean isPaddingRelative()>
<android.view.View: boolean isPivotSet()>
<android.view.View: boolean isPreferKeepClear()>
<android.view.View: boolean isPressed()>
<android.view.View: boolean isSaveEnabled()>
<android.view.View: boolean isSaveFromParentEnabled()>
<android.view.View: boolean isScreenReaderFocusable()>
<android.view.View: boolean isScrollContainer()>
<android.view.View: boolean isScrollbarFadingEnabled()>
<android.view.View: boolean isSelected()>
<android.view.View: boolean isShowingLayoutBounds()>
<android.view.View: boolean isShown()>
<android.view.View: boolean isSoundEffectsEnabled()>
<android.view.View: boolean isTemporarilyDetached()>
<android.view.View: boolean isTextAlignmentResolved()>
<android.view.View: boolean isTextDirectionResolved()>
<android.view.View: boolean isVerticalFadingEdgeEnabled()>
<android.view.View: boolean isVerticalScrollBarEnabled()>
<android.view.View: boolean isVisibleToUserForAutofill(int)>
<android.view.View: void jumpDrawablesToCurrentState()>
<android.view.View: android.view.View keyboardNavigationClusterSearch(android.view.View,int)>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void measure(int,int)>
<android.view.View: int[] mergeDrawableStates(int[],int[])>
<android.view.View: void offsetLeftAndRight(int)>
<android.view.View: void offsetTopAndBottom(int)>
<android.view.View: void onAnimationEnd()>
<android.view.View: void onAnimationStart()>
<android.view.View: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>
<android.view.View: void onAttachedToWindow()>
<android.view.View: void onCancelPendingInputEvents()>
<android.view.View: boolean onCapturedPointerEvent(android.view.MotionEvent)>
<android.view.View: boolean onCheckIsTextEditor()>
<android.view.View: void onConfigurationChanged(android.content.res.Configuration)>
<android.view.View: void onCreateContextMenu(android.view.ContextMenu)>
<android.view.View: int[] onCreateDrawableState(int)>
<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>
<android.view.View: void onCreateViewTranslationRequest(int[],java.util.function.Consumer)>
<android.view.View: void onCreateVirtualViewTranslationRequests(long[],int[],java.util.function.Consumer)>
<android.view.View: void onDetachedFromWindow()>
<android.view.View: void onDisplayHint(int)>
<android.view.View: boolean onDragEvent(android.view.DragEvent)>
<android.view.View: void onDraw(android.graphics.Canvas)>
<android.view.View: void onDrawForeground(android.graphics.Canvas)>
<android.view.View: void onDrawScrollBars(android.graphics.Canvas)>
<android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)>
<android.view.View: void onFinishInflate()>
<android.view.View: void onFinishTemporaryDetach()>
<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>
<android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.view.View: void onHoverChanged(boolean)>
<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>
<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.View: boolean onKeyDown(int,android.view.KeyEvent)>
<android.view.View: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.view.View: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.view.View: boolean onKeyPreIme(int,android.view.KeyEvent)>
<android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.view.View: boolean onKeyUp(int,android.view.KeyEvent)>
<android.view.View: void onLayout(boolean,int,int,int,int)>
<android.view.View: void onMeasure(int,int)>
<android.view.View: void onOverScrolled(int,int,boolean,boolean)>
<android.view.View: void onPointerCaptureChange(boolean)>
<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.View: void onProvideAutofillStructure(android.view.ViewStructure,int)>
<android.view.View: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)>
<android.view.View: void onProvideContentCaptureStructure(android.view.ViewStructure,int)>
<android.view.View: void onProvideStructure(android.view.ViewStructure)>
<android.view.View: void onProvideVirtualStructure(android.view.ViewStructure)>
<android.view.View: android.view.ContentInfo onReceiveContent(android.view.ContentInfo)>
<android.view.View: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>
<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>
<android.view.View: void onRtlPropertiesChanged(int)>
<android.view.View: android.os.Parcelable onSaveInstanceState()>
<android.view.View: void onScreenStateChanged(int)>
<android.view.View: void onScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)>
<android.view.View: void onScrollChanged(int,int,int,int)>
<android.view.View: boolean onSetAlpha(int)>
<android.view.View: void onSizeChanged(int,int,int,int)>
<android.view.View: void onStartTemporaryDetach()>
<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.View: boolean onTrackballEvent(android.view.MotionEvent)>
<android.view.View: void onViewTranslationResponse(android.view.translation.ViewTranslationResponse)>
<android.view.View: void onVirtualViewTranslationResponses(android.util.LongSparseArray)>
<android.view.View: void onVisibilityAggregated(boolean)>
<android.view.View: void onVisibilityChanged(android.view.View,int)>
<android.view.View: void onWindowFocusChanged(boolean)>
<android.view.View: void onWindowSystemUiVisibilityChanged(int)>
<android.view.View: void onWindowVisibilityChanged(int)>
<android.view.View: boolean overScrollBy(int,int,int,int,int,int,int,int,boolean)>
<android.view.View: boolean performAccessibilityAction(int,android.os.Bundle)>
<android.view.View: boolean performClick()>
<android.view.View: boolean performContextClick(float,float)>
<android.view.View: boolean performContextClick()>
<android.view.View: boolean performHapticFeedback(int)>
<android.view.View: boolean performHapticFeedback(int,int)>
<android.view.View: boolean performLongClick()>
<android.view.View: boolean performLongClick(float,float)>
<android.view.View: android.view.ContentInfo performReceiveContent(android.view.ContentInfo)>
<android.view.View: void playSoundEffect(int)>
<android.view.View: boolean post(java.lang.Runnable)>
<android.view.View: boolean postDelayed(java.lang.Runnable,long)>
<android.view.View: void postInvalidate()>
<android.view.View: void postInvalidate(int,int,int,int)>
<android.view.View: void postInvalidateDelayed(long)>
<android.view.View: void postInvalidateDelayed(long,int,int,int,int)>
<android.view.View: void postInvalidateOnAnimation()>
<android.view.View: void postInvalidateOnAnimation(int,int,int,int)>
<android.view.View: void postOnAnimation(java.lang.Runnable)>
<android.view.View: void postOnAnimationDelayed(java.lang.Runnable,long)>
<android.view.View: void refreshDrawableState()>
<android.view.View: void releasePointerCapture()>
<android.view.View: boolean removeCallbacks(java.lang.Runnable)>
<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.view.View: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>
<android.view.View: void removeOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)>
<android.view.View: void requestApplyInsets()>
<android.view.View: void requestFitSystemWindows()>
<android.view.View: boolean requestFocus()>
<android.view.View: boolean requestFocus(int)>
<android.view.View: boolean requestFocus(int,android.graphics.Rect)>
<android.view.View: boolean requestFocusFromTouch()>
<android.view.View: void requestLayout()>
<android.view.View: void requestPointerCapture()>
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)>
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)>
<android.view.View: void requestUnbufferedDispatch(android.view.MotionEvent)>
<android.view.View: void requestUnbufferedDispatch(int)>
<android.view.View: android.view.View requireViewById(int)>
<android.view.View: void resetPivot()>
<android.view.View: int resolveSize(int,int)>
<android.view.View: int resolveSizeAndState(int,int,int)>
<android.view.View: boolean restoreDefaultFocus()>
<android.view.View: void restoreHierarchyState(android.util.SparseArray)>
<android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>
<android.view.View: void saveHierarchyState(android.util.SparseArray)>
<android.view.View: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.view.View: void scrollBy(int,int)>
<android.view.View: void scrollTo(int,int)>
<android.view.View: void sendAccessibilityEvent(int)>
<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>
<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)>
<android.view.View: void setAccessibilityHeading(boolean)>
<android.view.View: void setAccessibilityLiveRegion(int)>
<android.view.View: void setAccessibilityPaneTitle(java.lang.CharSequence)>
<android.view.View: void setAccessibilityTraversalAfter(int)>
<android.view.View: void setAccessibilityTraversalBefore(int)>
<android.view.View: void setActivated(boolean)>
<android.view.View: void setAllowClickWhenDisabled(boolean)>
<android.view.View: void setAlpha(float)>
<android.view.View: void setAnimation(android.view.animation.Animation)>
<android.view.View: void setAnimationMatrix(android.graphics.Matrix)>
<android.view.View: void setAutoHandwritingEnabled(boolean)>
<android.view.View: void setAutofillHints(java.lang.String[])>
<android.view.View: void setAutofillId(android.view.autofill.AutofillId)>
<android.view.View: void setBackground(android.graphics.drawable.Drawable)>
<android.view.View: void setBackgroundColor(int)>
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void setBackgroundResource(int)>
<android.view.View: void setBackgroundTintBlendMode(android.graphics.BlendMode)>
<android.view.View: void setBackgroundTintList(android.content.res.ColorStateList)>
<android.view.View: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)>
<android.view.View: void setBottom(int)>
<android.view.View: void setCameraDistance(float)>
<android.view.View: void setClickable(boolean)>
<android.view.View: void setClipBounds(android.graphics.Rect)>
<android.view.View: void setClipToOutline(boolean)>
<android.view.View: void setContentCaptureSession(android.view.contentcapture.ContentCaptureSession)>
<android.view.View: void setContentDescription(java.lang.CharSequence)>
<android.view.View: void setContextClickable(boolean)>
<android.view.View: void setDefaultFocusHighlightEnabled(boolean)>
<android.view.View: void setDrawingCacheBackgroundColor(int)>
<android.view.View: void setDrawingCacheEnabled(boolean)>
<android.view.View: void setDrawingCacheQuality(int)>
<android.view.View: void setDuplicateParentStateEnabled(boolean)>
<android.view.View: void setElevation(float)>
<android.view.View: void setEnabled(boolean)>
<android.view.View: void setFadingEdgeLength(int)>
<android.view.View: void setFilterTouchesWhenObscured(boolean)>
<android.view.View: void setFitsSystemWindows(boolean)>
<android.view.View: void setFocusable(boolean)>
<android.view.View: void setFocusable(int)>
<android.view.View: void setFocusableInTouchMode(boolean)>
<android.view.View: void setFocusedByDefault(boolean)>
<android.view.View: void setForceDarkAllowed(boolean)>
<android.view.View: void setForeground(android.graphics.drawable.Drawable)>
<android.view.View: void setForegroundGravity(int)>
<android.view.View: void setForegroundTintBlendMode(android.graphics.BlendMode)>
<android.view.View: void setForegroundTintList(android.content.res.ColorStateList)>
<android.view.View: void setForegroundTintMode(android.graphics.PorterDuff$Mode)>
<android.view.View: void setHapticFeedbackEnabled(boolean)>
<android.view.View: void setHasTransientState(boolean)>
<android.view.View: void setHorizontalFadingEdgeEnabled(boolean)>
<android.view.View: void setHorizontalScrollBarEnabled(boolean)>
<android.view.View: void setHorizontalScrollbarThumbDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void setHorizontalScrollbarTrackDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void setHovered(boolean)>
<android.view.View: void setId(int)>
<android.view.View: void setImportantForAccessibility(int)>
<android.view.View: void setImportantForAutofill(int)>
<android.view.View: void setImportantForContentCapture(int)>
<android.view.View: void setKeepScreenOn(boolean)>
<android.view.View: void setKeyboardNavigationCluster(boolean)>
<android.view.View: void setLabelFor(int)>
<android.view.View: void setLayerPaint(android.graphics.Paint)>
<android.view.View: void setLayerType(int,android.graphics.Paint)>
<android.view.View: void setLayoutDirection(int)>
<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.view.View: void setLeft(int)>
<android.view.View: void setLeftTopRightBottom(int,int,int,int)>
<android.view.View: void setLongClickable(boolean)>
<android.view.View: void setMeasuredDimension(int,int)>
<android.view.View: void setMinimumHeight(int)>
<android.view.View: void setMinimumWidth(int)>
<android.view.View: void setNestedScrollingEnabled(boolean)>
<android.view.View: void setNextClusterForwardId(int)>
<android.view.View: void setNextFocusDownId(int)>
<android.view.View: void setNextFocusForwardId(int)>
<android.view.View: void setNextFocusLeftId(int)>
<android.view.View: void setNextFocusRightId(int)>
<android.view.View: void setNextFocusUpId(int)>
<android.view.View: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)>
<android.view.View: void setOnCapturedPointerListener(android.view.View$OnCapturedPointerListener)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.view.View: void setOnContextClickListener(android.view.View$OnContextClickListener)>
<android.view.View: void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)>
<android.view.View: void setOnDragListener(android.view.View$OnDragListener)>
<android.view.View: void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)>
<android.view.View: void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)>
<android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)>
<android.view.View: void setOnKeyListener(android.view.View$OnKeyListener)>
<android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)>
<android.view.View: void setOnReceiveContentListener(java.lang.String[],android.view.OnReceiveContentListener)>
<android.view.View: void setOnScrollChangeListener(android.view.View$OnScrollChangeListener)>
<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)>
<android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)>
<android.view.View: void setOutlineAmbientShadowColor(int)>
<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>
<android.view.View: void setOutlineSpotShadowColor(int)>
<android.view.View: void setOverScrollMode(int)>
<android.view.View: void setPadding(int,int,int,int)>
<android.view.View: void setPaddingRelative(int,int,int,int)>
<android.view.View: void setPivotX(float)>
<android.view.View: void setPivotY(float)>
<android.view.View: void setPointerIcon(android.view.PointerIcon)>
<android.view.View: void setPreferKeepClear(boolean)>
<android.view.View: void setPreferKeepClearRects(java.util.List)>
<android.view.View: void setPressed(boolean)>
<android.view.View: void setRenderEffect(android.graphics.RenderEffect)>
<android.view.View: void setRevealOnFocusHint(boolean)>
<android.view.View: void setRight(int)>
<android.view.View: void setRotation(float)>
<android.view.View: void setRotationX(float)>
<android.view.View: void setRotationY(float)>
<android.view.View: void setSaveEnabled(boolean)>
<android.view.View: void setSaveFromParentEnabled(boolean)>
<android.view.View: void setScaleX(float)>
<android.view.View: void setScaleY(float)>
<android.view.View: void setScreenReaderFocusable(boolean)>
<android.view.View: void setScrollBarDefaultDelayBeforeFade(int)>
<android.view.View: void setScrollBarFadeDuration(int)>
<android.view.View: void setScrollBarSize(int)>
<android.view.View: void setScrollBarStyle(int)>
<android.view.View: void setScrollCaptureCallback(android.view.ScrollCaptureCallback)>
<android.view.View: void setScrollCaptureHint(int)>
<android.view.View: void setScrollContainer(boolean)>
<android.view.View: void setScrollIndicators(int)>
<android.view.View: void setScrollIndicators(int,int)>
<android.view.View: void setScrollX(int)>
<android.view.View: void setScrollY(int)>
<android.view.View: void setScrollbarFadingEnabled(boolean)>
<android.view.View: void setSelected(boolean)>
<android.view.View: void setSoundEffectsEnabled(boolean)>
<android.view.View: void setStateDescription(java.lang.CharSequence)>
<android.view.View: void setStateListAnimator(android.animation.StateListAnimator)>
<android.view.View: void setSystemGestureExclusionRects(java.util.List)>
<android.view.View: void setSystemUiVisibility(int)>
<android.view.View: void setTag(java.lang.Object)>
<android.view.View: void setTag(int,java.lang.Object)>
<android.view.View: void setTextAlignment(int)>
<android.view.View: void setTextDirection(int)>
<android.view.View: void setTooltipText(java.lang.CharSequence)>
<android.view.View: void setTop(int)>
<android.view.View: void setTouchDelegate(android.view.TouchDelegate)>
<android.view.View: void setTransitionAlpha(float)>
<android.view.View: void setTransitionName(java.lang.String)>
<android.view.View: void setTransitionVisibility(int)>
<android.view.View: void setTranslationX(float)>
<android.view.View: void setTranslationY(float)>
<android.view.View: void setTranslationZ(float)>
<android.view.View: void setVerticalFadingEdgeEnabled(boolean)>
<android.view.View: void setVerticalScrollBarEnabled(boolean)>
<android.view.View: void setVerticalScrollbarPosition(int)>
<android.view.View: void setVerticalScrollbarThumbDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void setVerticalScrollbarTrackDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void setViewTranslationCallback(android.view.translation.ViewTranslationCallback)>
<android.view.View: void setVisibility(int)>
<android.view.View: void setWillNotCacheDrawing(boolean)>
<android.view.View: void setWillNotDraw(boolean)>
<android.view.View: void setWindowInsetsAnimationCallback(android.view.WindowInsetsAnimation$Callback)>
<android.view.View: void setX(float)>
<android.view.View: void setY(float)>
<android.view.View: void setZ(float)>
<android.view.View: boolean showContextMenu()>
<android.view.View: boolean showContextMenu(float,float)>
<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>
<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback,int)>
<android.view.View: void startAnimation(android.view.animation.Animation)>
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.view.View: boolean startDragAndDrop(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.view.View: boolean startNestedScroll(int)>
<android.view.View: void stopNestedScroll()>
<android.view.View: void transformMatrixToGlobal(android.graphics.Matrix)>
<android.view.View: void transformMatrixToLocal(android.graphics.Matrix)>
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void updateDragShadow(android.view.View$DragShadowBuilder)>
<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.view.View: boolean willNotCacheDrawing()>
<android.view.View: boolean willNotDraw()>
<android.view.View: int ACCESSIBILITY_LIVE_REGION_ASSERTIVE>
<android.view.View: int ACCESSIBILITY_LIVE_REGION_NONE>
<android.view.View: int ACCESSIBILITY_LIVE_REGION_POLITE>
<android.view.View: android.util.Property ALPHA>
<android.view.View: int AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS>
<android.view.View: java.lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE>
<android.view.View: java.lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY>
<android.view.View: java.lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH>
<android.view.View: java.lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR>
<android.view.View: java.lang.String AUTOFILL_HINT_CREDIT_CARD_NUMBER>
<android.view.View: java.lang.String AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE>
<android.view.View: java.lang.String AUTOFILL_HINT_EMAIL_ADDRESS>
<android.view.View: java.lang.String AUTOFILL_HINT_NAME>
<android.view.View: java.lang.String AUTOFILL_HINT_PASSWORD>
<android.view.View: java.lang.String AUTOFILL_HINT_PHONE>
<android.view.View: java.lang.String AUTOFILL_HINT_POSTAL_ADDRESS>
<android.view.View: java.lang.String AUTOFILL_HINT_POSTAL_CODE>
<android.view.View: java.lang.String AUTOFILL_HINT_USERNAME>
<android.view.View: int AUTOFILL_TYPE_DATE>
<android.view.View: int AUTOFILL_TYPE_LIST>
<android.view.View: int AUTOFILL_TYPE_NONE>
<android.view.View: int AUTOFILL_TYPE_TEXT>
<android.view.View: int AUTOFILL_TYPE_TOGGLE>
<android.view.View: int DRAG_FLAG_ACCESSIBILITY_ACTION>
<android.view.View: int DRAG_FLAG_GLOBAL>
<android.view.View: int DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION>
<android.view.View: int DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION>
<android.view.View: int DRAG_FLAG_GLOBAL_URI_READ>
<android.view.View: int DRAG_FLAG_GLOBAL_URI_WRITE>
<android.view.View: int DRAG_FLAG_OPAQUE>
<android.view.View: int DRAWING_CACHE_QUALITY_AUTO>
<android.view.View: int DRAWING_CACHE_QUALITY_HIGH>
<android.view.View: int DRAWING_CACHE_QUALITY_LOW>
<android.view.View: int[] EMPTY_STATE_SET>
<android.view.View: int[] ENABLED_FOCUSED_SELECTED_STATE_SET>
<android.view.View: int[] ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET>
<android.view.View: int[] ENABLED_FOCUSED_STATE_SET>
<android.view.View: int[] ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET>
<android.view.View: int[] ENABLED_SELECTED_STATE_SET>
<android.view.View: int[] ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET>
<android.view.View: int[] ENABLED_STATE_SET>
<android.view.View: int[] ENABLED_WINDOW_FOCUSED_STATE_SET>
<android.view.View: int FIND_VIEWS_WITH_CONTENT_DESCRIPTION>
<android.view.View: int FIND_VIEWS_WITH_TEXT>
<android.view.View: int FOCUSABLE>
<android.view.View: int FOCUSABLES_ALL>
<android.view.View: int FOCUSABLES_TOUCH_MODE>
<android.view.View: int FOCUSABLE_AUTO>
<android.view.View: int[] FOCUSED_SELECTED_STATE_SET>
<android.view.View: int[] FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET>
<android.view.View: int[] FOCUSED_STATE_SET>
<android.view.View: int[] FOCUSED_WINDOW_FOCUSED_STATE_SET>
<android.view.View: int FOCUS_BACKWARD>
<android.view.View: int FOCUS_DOWN>
<android.view.View: int FOCUS_FORWARD>
<android.view.View: int FOCUS_LEFT>
<android.view.View: int FOCUS_RIGHT>
<android.view.View: int FOCUS_UP>
<android.view.View: int GONE>
<android.view.View: int HAPTIC_FEEDBACK_ENABLED>
<android.view.View: int IMPORTANT_FOR_ACCESSIBILITY_AUTO>
<android.view.View: int IMPORTANT_FOR_ACCESSIBILITY_NO>
<android.view.View: int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS>
<android.view.View: int IMPORTANT_FOR_ACCESSIBILITY_YES>
<android.view.View: int IMPORTANT_FOR_AUTOFILL_AUTO>
<android.view.View: int IMPORTANT_FOR_AUTOFILL_NO>
<android.view.View: int IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS>
<android.view.View: int IMPORTANT_FOR_AUTOFILL_YES>
<android.view.View: int IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS>
<android.view.View: int IMPORTANT_FOR_CONTENT_CAPTURE_AUTO>
<android.view.View: int IMPORTANT_FOR_CONTENT_CAPTURE_NO>
<android.view.View: int IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS>
<android.view.View: int IMPORTANT_FOR_CONTENT_CAPTURE_YES>
<android.view.View: int IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS>
<android.view.View: int INVISIBLE>
<android.view.View: int KEEP_SCREEN_ON>
<android.view.View: int LAYER_TYPE_HARDWARE>
<android.view.View: int LAYER_TYPE_NONE>
<android.view.View: int LAYER_TYPE_SOFTWARE>
<android.view.View: int LAYOUT_DIRECTION_INHERIT>
<android.view.View: int LAYOUT_DIRECTION_LOCALE>
<android.view.View: int LAYOUT_DIRECTION_LTR>
<android.view.View: int LAYOUT_DIRECTION_RTL>
<android.view.View: int MEASURED_HEIGHT_STATE_SHIFT>
<android.view.View: int MEASURED_SIZE_MASK>
<android.view.View: int MEASURED_STATE_MASK>
<android.view.View: int MEASURED_STATE_TOO_SMALL>
<android.view.View: int NOT_FOCUSABLE>
<android.view.View: int NO_ID>
<android.view.View: int OVER_SCROLL_ALWAYS>
<android.view.View: int OVER_SCROLL_IF_CONTENT_SCROLLS>
<android.view.View: int OVER_SCROLL_NEVER>
<android.view.View: int[] PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET>
<android.view.View: int[] PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET>
<android.view.View: int[] PRESSED_ENABLED_FOCUSED_STATE_SET>
<android.view.View: int[] PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET>
<android.view.View: int[] PRESSED_ENABLED_SELECTED_STATE_SET>
<android.view.View: int[] PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET>
<android.view.View: int[] PRESSED_ENABLED_STATE_SET>
<android.view.View: int[] PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET>
<android.view.View: int[] PRESSED_FOCUSED_SELECTED_STATE_SET>
<android.view.View: int[] PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET>
<android.view.View: int[] PRESSED_FOCUSED_STATE_SET>
<android.view.View: int[] PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET>
<android.view.View: int[] PRESSED_SELECTED_STATE_SET>
<android.view.View: int[] PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET>
<android.view.View: int[] PRESSED_STATE_SET>
<android.view.View: int[] PRESSED_WINDOW_FOCUSED_STATE_SET>
<android.view.View: android.util.Property ROTATION>
<android.view.View: android.util.Property ROTATION_X>
<android.view.View: android.util.Property ROTATION_Y>
<android.view.View: android.util.Property SCALE_X>
<android.view.View: android.util.Property SCALE_Y>
<android.view.View: int SCREEN_STATE_OFF>
<android.view.View: int SCREEN_STATE_ON>
<android.view.View: int SCROLLBARS_INSIDE_INSET>
<android.view.View: int SCROLLBARS_INSIDE_OVERLAY>
<android.view.View: int SCROLLBARS_OUTSIDE_INSET>
<android.view.View: int SCROLLBARS_OUTSIDE_OVERLAY>
<android.view.View: int SCROLLBAR_POSITION_DEFAULT>
<android.view.View: int SCROLLBAR_POSITION_LEFT>
<android.view.View: int SCROLLBAR_POSITION_RIGHT>
<android.view.View: int SCROLL_AXIS_HORIZONTAL>
<android.view.View: int SCROLL_AXIS_NONE>
<android.view.View: int SCROLL_AXIS_VERTICAL>
<android.view.View: int SCROLL_CAPTURE_HINT_AUTO>
<android.view.View: int SCROLL_CAPTURE_HINT_EXCLUDE>
<android.view.View: int SCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTS>
<android.view.View: int SCROLL_CAPTURE_HINT_INCLUDE>
<android.view.View: int SCROLL_INDICATOR_BOTTOM>
<android.view.View: int SCROLL_INDICATOR_END>
<android.view.View: int SCROLL_INDICATOR_LEFT>
<android.view.View: int SCROLL_INDICATOR_RIGHT>
<android.view.View: int SCROLL_INDICATOR_START>
<android.view.View: int SCROLL_INDICATOR_TOP>
<android.view.View: int[] SELECTED_STATE_SET>
<android.view.View: int[] SELECTED_WINDOW_FOCUSED_STATE_SET>
<android.view.View: int SOUND_EFFECTS_ENABLED>
<android.view.View: int STATUS_BAR_HIDDEN>
<android.view.View: int STATUS_BAR_VISIBLE>
<android.view.View: int SYSTEM_UI_FLAG_FULLSCREEN>
<android.view.View: int SYSTEM_UI_FLAG_HIDE_NAVIGATION>
<android.view.View: int SYSTEM_UI_FLAG_IMMERSIVE>
<android.view.View: int SYSTEM_UI_FLAG_IMMERSIVE_STICKY>
<android.view.View: int SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN>
<android.view.View: int SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION>
<android.view.View: int SYSTEM_UI_FLAG_LAYOUT_STABLE>
<android.view.View: int SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR>
<android.view.View: int SYSTEM_UI_FLAG_LIGHT_STATUS_BAR>
<android.view.View: int SYSTEM_UI_FLAG_LOW_PROFILE>
<android.view.View: int SYSTEM_UI_FLAG_VISIBLE>
<android.view.View: int SYSTEM_UI_LAYOUT_FLAGS>
<android.view.View: int TEXT_ALIGNMENT_CENTER>
<android.view.View: int TEXT_ALIGNMENT_GRAVITY>
<android.view.View: int TEXT_ALIGNMENT_INHERIT>
<android.view.View: int TEXT_ALIGNMENT_TEXT_END>
<android.view.View: int TEXT_ALIGNMENT_TEXT_START>
<android.view.View: int TEXT_ALIGNMENT_VIEW_END>
<android.view.View: int TEXT_ALIGNMENT_VIEW_START>
<android.view.View: int TEXT_DIRECTION_ANY_RTL>
<android.view.View: int TEXT_DIRECTION_FIRST_STRONG>
<android.view.View: int TEXT_DIRECTION_FIRST_STRONG_LTR>
<android.view.View: int TEXT_DIRECTION_FIRST_STRONG_RTL>
<android.view.View: int TEXT_DIRECTION_INHERIT>
<android.view.View: int TEXT_DIRECTION_LOCALE>
<android.view.View: int TEXT_DIRECTION_LTR>
<android.view.View: int TEXT_DIRECTION_RTL>
<android.view.View: android.util.Property TRANSLATION_X>
<android.view.View: android.util.Property TRANSLATION_Y>
<android.view.View: android.util.Property TRANSLATION_Z>
<android.view.View: java.lang.String VIEW_LOG_TAG>
<android.view.View: int VISIBLE>
<android.view.View: int[] WINDOW_FOCUSED_STATE_SET>
<android.view.View: android.util.Property X>
<android.view.View: android.util.Property Y>
<android.view.View: android.util.Property Z>
android.view.View$AccessibilityDelegate
<android.view.View$AccessibilityDelegate: void <init>()>
<android.view.View$AccessibilityDelegate: void addExtraDataToAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>
<android.view.View$AccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)>
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>
<android.view.View$AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View$AccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View$AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>
<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)>
<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>
android.view.View$BaseSavedState
<android.view.View$BaseSavedState: void <init>(android.os.Parcel)>
<android.view.View$BaseSavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>
<android.view.View$BaseSavedState: void <init>(android.os.Parcelable)>
<android.view.View$BaseSavedState: android.os.Parcelable$Creator CREATOR>
android.view.View$DragShadowBuilder
<android.view.View$DragShadowBuilder: void <init>(android.view.View)>
<android.view.View$DragShadowBuilder: void <init>()>
<android.view.View$DragShadowBuilder: android.view.View getView()>
<android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)>
<android.view.View$DragShadowBuilder: void onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)>
android.view.View$MeasureSpec
<android.view.View$MeasureSpec: void <init>()>
<android.view.View$MeasureSpec: int getMode(int)>
<android.view.View$MeasureSpec: int getSize(int)>
<android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>
<android.view.View$MeasureSpec: java.lang.String toString(int)>
<android.view.View$MeasureSpec: int AT_MOST>
<android.view.View$MeasureSpec: int EXACTLY>
<android.view.View$MeasureSpec: int UNSPECIFIED>
android.view.View$OnApplyWindowInsetsListener
<android.view.View$OnApplyWindowInsetsListener: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>
android.view.View$OnAttachStateChangeListener
<android.view.View$OnAttachStateChangeListener: void onViewAttachedToWindow(android.view.View)>
<android.view.View$OnAttachStateChangeListener: void onViewDetachedFromWindow(android.view.View)>
android.view.View$OnCapturedPointerListener
<android.view.View$OnCapturedPointerListener: boolean onCapturedPointer(android.view.View,android.view.MotionEvent)>
android.view.View$OnClickListener
<android.view.View$OnClickListener: void onClick(android.view.View)>
android.view.View$OnContextClickListener
<android.view.View$OnContextClickListener: boolean onContextClick(android.view.View)>
android.view.View$OnCreateContextMenuListener
<android.view.View$OnCreateContextMenuListener: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
android.view.View$OnDragListener
<android.view.View$OnDragListener: boolean onDrag(android.view.View,android.view.DragEvent)>
android.view.View$OnFocusChangeListener
<android.view.View$OnFocusChangeListener: void onFocusChange(android.view.View,boolean)>
android.view.View$OnGenericMotionListener
<android.view.View$OnGenericMotionListener: boolean onGenericMotion(android.view.View,android.view.MotionEvent)>
android.view.View$OnHoverListener
<android.view.View$OnHoverListener: boolean onHover(android.view.View,android.view.MotionEvent)>
android.view.View$OnKeyListener
<android.view.View$OnKeyListener: boolean onKey(android.view.View,int,android.view.KeyEvent)>
android.view.View$OnLayoutChangeListener
<android.view.View$OnLayoutChangeListener: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)>
android.view.View$OnLongClickListener
<android.view.View$OnLongClickListener: boolean onLongClick(android.view.View)>
android.view.View$OnScrollChangeListener
<android.view.View$OnScrollChangeListener: void onScrollChange(android.view.View,int,int,int,int)>
android.view.View$OnSystemUiVisibilityChangeListener
<android.view.View$OnSystemUiVisibilityChangeListener: void onSystemUiVisibilityChange(int)>
android.view.View$OnTouchListener
<android.view.View$OnTouchListener: boolean onTouch(android.view.View,android.view.MotionEvent)>
android.view.View$OnUnhandledKeyEventListener
<android.view.View$OnUnhandledKeyEventListener: boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent)>
android.view.ViewAnimationUtils
<android.view.ViewAnimationUtils: android.animation.Animator createCircularReveal(android.view.View,int,int,float,float)>
android.view.ViewConfiguration
<android.view.ViewConfiguration: void <init>()>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.view.ViewConfiguration: float getAmbiguousGestureMultiplier()>
<android.view.ViewConfiguration: long getDefaultActionModeHideDuration()>
<android.view.ViewConfiguration: int getDoubleTapTimeout()>
<android.view.ViewConfiguration: int getEdgeSlop()>
<android.view.ViewConfiguration: int getFadingEdgeLength()>
<android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>
<android.view.ViewConfiguration: int getJumpTapTimeout()>
<android.view.ViewConfiguration: int getKeyRepeatDelay()>
<android.view.ViewConfiguration: int getKeyRepeatTimeout()>
<android.view.ViewConfiguration: int getLongPressTimeout()>
<android.view.ViewConfiguration: int getMaximumDrawingCacheSize()>
<android.view.ViewConfiguration: int getMaximumFlingVelocity()>
<android.view.ViewConfiguration: int getMinimumFlingVelocity()>
<android.view.ViewConfiguration: int getMultiPressTimeout()>
<android.view.ViewConfiguration: int getPressedStateDuration()>
<android.view.ViewConfiguration: float getScaledAmbiguousGestureMultiplier()>
<android.view.ViewConfiguration: int getScaledDoubleTapSlop()>
<android.view.ViewConfiguration: int getScaledEdgeSlop()>
<android.view.ViewConfiguration: int getScaledFadingEdgeLength()>
<android.view.ViewConfiguration: float getScaledHorizontalScrollFactor()>
<android.view.ViewConfiguration: int getScaledHoverSlop()>
<android.view.ViewConfiguration: int getScaledMaximumDrawingCacheSize()>
<android.view.ViewConfiguration: int getScaledMaximumFlingVelocity()>
<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()>
<android.view.ViewConfiguration: int getScaledMinimumScalingSpan()>
<android.view.ViewConfiguration: int getScaledOverflingDistance()>
<android.view.ViewConfiguration: int getScaledOverscrollDistance()>
<android.view.ViewConfiguration: int getScaledPagingTouchSlop()>
<android.view.ViewConfiguration: int getScaledScrollBarSize()>
<android.view.ViewConfiguration: int getScaledTouchSlop()>
<android.view.ViewConfiguration: float getScaledVerticalScrollFactor()>
<android.view.ViewConfiguration: int getScaledWindowTouchSlop()>
<android.view.ViewConfiguration: int getScrollBarFadeDuration()>
<android.view.ViewConfiguration: int getScrollBarSize()>
<android.view.ViewConfiguration: int getScrollDefaultDelay()>
<android.view.ViewConfiguration: float getScrollFriction()>
<android.view.ViewConfiguration: int getTapTimeout()>
<android.view.ViewConfiguration: int getTouchSlop()>
<android.view.ViewConfiguration: int getWindowTouchSlop()>
<android.view.ViewConfiguration: long getZoomControlsTimeout()>
<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>
<android.view.ViewConfiguration: boolean shouldShowMenuShortcutsWhenKeyboardPresent()>
android.view.ViewDebug
<android.view.ViewDebug: void <init>()>
<android.view.ViewDebug: void dumpCapturedView(java.lang.String,java.lang.Object)>
<android.view.ViewDebug: void startHierarchyTracing(java.lang.String,android.view.View)>
<android.view.ViewDebug: void startRecyclerTracing(java.lang.String,android.view.View)>
<android.view.ViewDebug: void stopHierarchyTracing()>
<android.view.ViewDebug: void stopRecyclerTracing()>
<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$RecyclerTraceType,int[])>
<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$HierarchyTraceType)>
<android.view.ViewDebug: boolean TRACE_HIERARCHY>
<android.view.ViewDebug: boolean TRACE_RECYCLER>
android.view.ViewDebug$CapturedViewProperty
<android.view.ViewDebug$CapturedViewProperty: boolean retrieveReturn()>
android.view.ViewDebug$ExportedProperty
<android.view.ViewDebug$ExportedProperty: java.lang.String category()>
<android.view.ViewDebug$ExportedProperty: boolean deepExport()>
<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$FlagToString[] flagMapping()>
<android.view.ViewDebug$ExportedProperty: boolean formatToHexString()>
<android.view.ViewDebug$ExportedProperty: boolean hasAdjacentMapping()>
<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] indexMapping()>
<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] mapping()>
<android.view.ViewDebug$ExportedProperty: java.lang.String prefix()>
<android.view.ViewDebug$ExportedProperty: boolean resolveId()>
android.view.ViewDebug$FlagToString
<android.view.ViewDebug$FlagToString: int equals()>
<android.view.ViewDebug$FlagToString: int mask()>
<android.view.ViewDebug$FlagToString: java.lang.String name()>
<android.view.ViewDebug$FlagToString: boolean outputIf()>
android.view.ViewDebug$HierarchyTraceType
<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType BUILD_CACHE>
<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType DRAW>
<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType INVALIDATE>
<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType INVALIDATE_CHILD>
<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType INVALIDATE_CHILD_IN_PARENT>
<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType ON_LAYOUT>
<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType ON_MEASURE>
<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType REQUEST_LAYOUT>
android.view.ViewDebug$IntToString
<android.view.ViewDebug$IntToString: int from()>
<android.view.ViewDebug$IntToString: java.lang.String to()>
android.view.ViewDebug$RecyclerTraceType
<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType BIND_VIEW>
<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType MOVE_FROM_ACTIVE_TO_SCRAP_HEAP>
<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType MOVE_TO_SCRAP_HEAP>
<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType NEW_VIEW>
<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType RECYCLE_FROM_ACTIVE_HEAP>
<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType RECYCLE_FROM_SCRAP_HEAP>
android.view.ViewGroup
<android.view.ViewGroup: void <init>(android.content.Context)>
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.view.ViewGroup: boolean addStatesFromChildren()>
<android.view.ViewGroup: void addView(android.view.View)>
<android.view.ViewGroup: void addView(android.view.View,int)>
<android.view.ViewGroup: void addView(android.view.View,int,int)>
<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>
<android.view.ViewGroup: void attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup$LayoutParams,int,int)>
<android.view.ViewGroup: void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: void bringChildToFront(android.view.View)>
<android.view.ViewGroup: boolean canAnimate()>
<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: void childDrawableStateChanged(android.view.View)>
<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>
<android.view.ViewGroup: void cleanupLayoutState(android.view.View)>
<android.view.ViewGroup: void clearChildFocus(android.view.View)>
<android.view.ViewGroup: void clearDisappearingChildren()>
<android.view.ViewGroup: void debug(int)>
<android.view.ViewGroup: void detachAllViewsFromParent()>
<android.view.ViewGroup: void detachViewFromParent(android.view.View)>
<android.view.ViewGroup: void detachViewFromParent(int)>
<android.view.ViewGroup: void detachViewsFromParent(int,int)>
<android.view.ViewGroup: void dispatchFreezeSelfOnly(android.util.SparseArray)>
<android.view.ViewGroup: void dispatchSetActivated(boolean)>
<android.view.ViewGroup: void dispatchSetSelected(boolean)>
<android.view.ViewGroup: void dispatchThawSelfOnly(android.util.SparseArray)>
<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>
<android.view.ViewGroup: void endViewTransition(android.view.View)>
<android.view.ViewGroup: android.view.View focusSearch(android.view.View,int)>
<android.view.ViewGroup: void focusableViewAvailable(android.view.View)>
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: android.view.View getChildAt(int)>
<android.view.ViewGroup: int getChildCount()>
<android.view.ViewGroup: int getChildDrawingOrder(int,int)>
<android.view.ViewGroup: int getChildDrawingOrder(int)>
<android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>
<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>
<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>
<android.view.ViewGroup: boolean getClipChildren()>
<android.view.ViewGroup: boolean getClipToPadding()>
<android.view.ViewGroup: int getDescendantFocusability()>
<android.view.ViewGroup: android.view.View getFocusedChild()>
<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()>
<android.view.ViewGroup: android.view.animation.Animation$AnimationListener getLayoutAnimationListener()>
<android.view.ViewGroup: int getLayoutMode()>
<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()>
<android.view.ViewGroup: int getNestedScrollAxes()>
<android.view.ViewGroup: android.view.ViewGroupOverlay getOverlay()>
<android.view.ViewGroup: int getPersistentDrawingCache()>
<android.view.ViewGroup: boolean getTouchscreenBlocksFocus()>
<android.view.ViewGroup: int indexOfChild(android.view.View)>
<android.view.ViewGroup: void invalidateChild(android.view.View,android.graphics.Rect)>
<android.view.ViewGroup: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>
<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>
<android.view.ViewGroup: boolean isAnimationCacheEnabled()>
<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>
<android.view.ViewGroup: boolean isChildrenDrawnWithCacheEnabled()>
<android.view.ViewGroup: boolean isLayoutSuppressed()>
<android.view.ViewGroup: boolean isMotionEventSplittingEnabled()>
<android.view.ViewGroup: boolean isTransitionGroup()>
<android.view.ViewGroup: void layout(int,int,int,int)>
<android.view.ViewGroup: void measureChild(android.view.View,int,int)>
<android.view.ViewGroup: void measureChildWithMargins(android.view.View,int,int,int,int)>
<android.view.ViewGroup: void measureChildren(int,int)>
<android.view.ViewGroup: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>
<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>
<android.view.ViewGroup: void offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)>
<android.view.ViewGroup: boolean onInterceptHoverEvent(android.view.MotionEvent)>
<android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<android.view.ViewGroup: void onLayout(boolean,int,int,int,int)>
<android.view.ViewGroup: boolean onNestedFling(android.view.View,float,float,boolean)>
<android.view.ViewGroup: boolean onNestedPreFling(android.view.View,float,float)>
<android.view.ViewGroup: boolean onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)>
<android.view.ViewGroup: void onNestedPreScroll(android.view.View,int,int,int[])>
<android.view.ViewGroup: void onNestedScroll(android.view.View,int,int,int,int)>
<android.view.ViewGroup: void onNestedScrollAccepted(android.view.View,android.view.View,int)>
<android.view.ViewGroup: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>
<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.ViewGroup: boolean onStartNestedScroll(android.view.View,android.view.View,int)>
<android.view.ViewGroup: void onStopNestedScroll(android.view.View)>
<android.view.ViewGroup: void onViewAdded(android.view.View)>
<android.view.ViewGroup: void onViewRemoved(android.view.View)>
<android.view.ViewGroup: void recomputeViewAttributes(android.view.View)>
<android.view.ViewGroup: void removeAllViews()>
<android.view.ViewGroup: void removeAllViewsInLayout()>
<android.view.ViewGroup: void removeDetachedView(android.view.View,boolean)>
<android.view.ViewGroup: void removeView(android.view.View)>
<android.view.ViewGroup: void removeViewAt(int)>
<android.view.ViewGroup: void removeViewInLayout(android.view.View)>
<android.view.ViewGroup: void removeViews(int,int)>
<android.view.ViewGroup: void removeViewsInLayout(int,int)>
<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)>
<android.view.ViewGroup: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>
<android.view.ViewGroup: void requestDisallowInterceptTouchEvent(boolean)>
<android.view.ViewGroup: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.ViewGroup: void requestTransparentRegion(android.view.View)>
<android.view.ViewGroup: void scheduleLayoutAnimation()>
<android.view.ViewGroup: void setAddStatesFromChildren(boolean)>
<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>
<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>
<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>
<android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)>
<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)>
<android.view.ViewGroup: void setClipChildren(boolean)>
<android.view.ViewGroup: void setClipToPadding(boolean)>
<android.view.ViewGroup: void setDescendantFocusability(int)>
<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)>
<android.view.ViewGroup: void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener)>
<android.view.ViewGroup: void setLayoutMode(int)>
<android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)>
<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)>
<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)>
<android.view.ViewGroup: void setPersistentDrawingCache(int)>
<android.view.ViewGroup: void setStaticTransformationsEnabled(boolean)>
<android.view.ViewGroup: void setTouchscreenBlocksFocus(boolean)>
<android.view.ViewGroup: void setTransitionGroup(boolean)>
<android.view.ViewGroup: boolean shouldDelayChildPressedState()>
<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View)>
<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View,float,float)>
<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>
<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback,int)>
<android.view.ViewGroup: void startLayoutAnimation()>
<android.view.ViewGroup: void startViewTransition(android.view.View)>
<android.view.ViewGroup: void suppressLayout(boolean)>
<android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: int CLIP_TO_PADDING_MASK>
<android.view.ViewGroup: int FOCUS_AFTER_DESCENDANTS>
<android.view.ViewGroup: int FOCUS_BEFORE_DESCENDANTS>
<android.view.ViewGroup: int FOCUS_BLOCK_DESCENDANTS>
<android.view.ViewGroup: int LAYOUT_MODE_CLIP_BOUNDS>
<android.view.ViewGroup: int LAYOUT_MODE_OPTICAL_BOUNDS>
<android.view.ViewGroup: int PERSISTENT_ALL_CACHES>
<android.view.ViewGroup: int PERSISTENT_ANIMATION_CACHE>
<android.view.ViewGroup: int PERSISTENT_NO_CACHE>
<android.view.ViewGroup: int PERSISTENT_SCROLLING_CACHE>
android.view.ViewGroup$LayoutParams
<android.view.ViewGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.ViewGroup$LayoutParams: void <init>(int,int)>
<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup$LayoutParams: void resolveLayoutDirection(int)>
<android.view.ViewGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>
<android.view.ViewGroup$LayoutParams: int FILL_PARENT>
<android.view.ViewGroup$LayoutParams: int MATCH_PARENT>
<android.view.ViewGroup$LayoutParams: int WRAP_CONTENT>
<android.view.ViewGroup$LayoutParams: int height>
<android.view.ViewGroup$LayoutParams: android.view.animation.LayoutAnimationController$AnimationParameters layoutAnimationParameters>
<android.view.ViewGroup$LayoutParams: int width>
android.view.ViewGroup$MarginLayoutParams
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.ViewGroup$MarginLayoutParams: void <init>(int,int)>
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup$MarginLayoutParams: int getLayoutDirection()>
<android.view.ViewGroup$MarginLayoutParams: int getMarginEnd()>
<android.view.ViewGroup$MarginLayoutParams: int getMarginStart()>
<android.view.ViewGroup$MarginLayoutParams: boolean isMarginRelative()>
<android.view.ViewGroup$MarginLayoutParams: void setLayoutDirection(int)>
<android.view.ViewGroup$MarginLayoutParams: void setMarginEnd(int)>
<android.view.ViewGroup$MarginLayoutParams: void setMarginStart(int)>
<android.view.ViewGroup$MarginLayoutParams: void setMargins(int,int,int,int)>
<android.view.ViewGroup$MarginLayoutParams: int bottomMargin>
<android.view.ViewGroup$MarginLayoutParams: int leftMargin>
<android.view.ViewGroup$MarginLayoutParams: int rightMargin>
<android.view.ViewGroup$MarginLayoutParams: int topMargin>
android.view.ViewGroup$OnHierarchyChangeListener
<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewAdded(android.view.View,android.view.View)>
<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewRemoved(android.view.View,android.view.View)>
android.view.ViewGroupOverlay
<android.view.ViewGroupOverlay: void add(android.view.View)>
<android.view.ViewGroupOverlay: void remove(android.view.View)>
android.view.ViewManager
<android.view.ViewManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.view.ViewManager: void removeView(android.view.View)>
<android.view.ViewManager: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>
android.view.ViewOutlineProvider
<android.view.ViewOutlineProvider: void <init>()>
<android.view.ViewOutlineProvider: void getOutline(android.view.View,android.graphics.Outline)>
<android.view.ViewOutlineProvider: android.view.ViewOutlineProvider BACKGROUND>
<android.view.ViewOutlineProvider: android.view.ViewOutlineProvider BOUNDS>
<android.view.ViewOutlineProvider: android.view.ViewOutlineProvider PADDED_BOUNDS>
android.view.ViewOverlay
<android.view.ViewOverlay: void add(android.graphics.drawable.Drawable)>
<android.view.ViewOverlay: void clear()>
<android.view.ViewOverlay: void remove(android.graphics.drawable.Drawable)>
android.view.ViewParent
<android.view.ViewParent: void bringChildToFront(android.view.View)>
<android.view.ViewParent: boolean canResolveLayoutDirection()>
<android.view.ViewParent: boolean canResolveTextAlignment()>
<android.view.ViewParent: boolean canResolveTextDirection()>
<android.view.ViewParent: void childDrawableStateChanged(android.view.View)>
<android.view.ViewParent: void childHasTransientStateChanged(android.view.View,boolean)>
<android.view.ViewParent: void clearChildFocus(android.view.View)>
<android.view.ViewParent: void createContextMenu(android.view.ContextMenu)>
<android.view.ViewParent: android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcherForChild(android.view.View,android.view.View)>
<android.view.ViewParent: android.view.View focusSearch(android.view.View,int)>
<android.view.ViewParent: void focusableViewAvailable(android.view.View)>
<android.view.ViewParent: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>
<android.view.ViewParent: int getLayoutDirection()>
<android.view.ViewParent: android.view.ViewParent getParent()>
<android.view.ViewParent: android.view.ViewParent getParentForAccessibility()>
<android.view.ViewParent: int getTextAlignment()>
<android.view.ViewParent: int getTextDirection()>
<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>
<android.view.ViewParent: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>
<android.view.ViewParent: boolean isLayoutDirectionResolved()>
<android.view.ViewParent: boolean isLayoutRequested()>
<android.view.ViewParent: boolean isTextAlignmentResolved()>
<android.view.ViewParent: boolean isTextDirectionResolved()>
<android.view.ViewParent: android.view.View keyboardNavigationClusterSearch(android.view.View,int)>
<android.view.ViewParent: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>
<android.view.ViewParent: void onDescendantInvalidated(android.view.View,android.view.View)>
<android.view.ViewParent: boolean onNestedFling(android.view.View,float,float,boolean)>
<android.view.ViewParent: boolean onNestedPreFling(android.view.View,float,float)>
<android.view.ViewParent: boolean onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)>
<android.view.ViewParent: void onNestedPreScroll(android.view.View,int,int,int[])>
<android.view.ViewParent: void onNestedScroll(android.view.View,int,int,int,int)>
<android.view.ViewParent: void onNestedScrollAccepted(android.view.View,android.view.View,int)>
<android.view.ViewParent: boolean onStartNestedScroll(android.view.View,android.view.View,int)>
<android.view.ViewParent: void onStopNestedScroll(android.view.View)>
<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>
<android.view.ViewParent: void requestChildFocus(android.view.View,android.view.View)>
<android.view.ViewParent: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>
<android.view.ViewParent: void requestDisallowInterceptTouchEvent(boolean)>
<android.view.ViewParent: void requestFitSystemWindows()>
<android.view.ViewParent: void requestLayout()>
<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.ViewParent: void requestTransparentRegion(android.view.View)>
<android.view.ViewParent: boolean showContextMenuForChild(android.view.View)>
<android.view.ViewParent: boolean showContextMenuForChild(android.view.View,float,float)>
<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>
<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback,int)>
android.view.ViewPropertyAnimator
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alphaBy(float)>
<android.view.ViewPropertyAnimator: void cancel()>
<android.view.ViewPropertyAnimator: long getDuration()>
<android.view.ViewPropertyAnimator: android.animation.TimeInterpolator getInterpolator()>
<android.view.ViewPropertyAnimator: long getStartDelay()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotation(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationX(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationXBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationY(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationYBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleX(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleXBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleY(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleYBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>
<android.view.ViewPropertyAnimator: void start()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationX(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationXBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationY(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationYBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationZ(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationZBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withEndAction(java.lang.Runnable)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withLayer()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withStartAction(java.lang.Runnable)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator x(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator xBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator y(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator yBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator z(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator zBy(float)>
android.view.ViewStructure
<android.view.ViewStructure: void <init>()>
<android.view.ViewStructure: int addChildCount(int)>
<android.view.ViewStructure: void asyncCommit()>
<android.view.ViewStructure: android.view.ViewStructure asyncNewChild(int)>
<android.view.ViewStructure: android.view.autofill.AutofillId getAutofillId()>
<android.view.ViewStructure: int getChildCount()>
<android.view.ViewStructure: android.os.Bundle getExtras()>
<android.view.ViewStructure: java.lang.CharSequence getHint()>
<android.view.ViewStructure: java.lang.CharSequence getText()>
<android.view.ViewStructure: int getTextSelectionEnd()>
<android.view.ViewStructure: int getTextSelectionStart()>
<android.view.ViewStructure: boolean hasExtras()>
<android.view.ViewStructure: android.view.ViewStructure newChild(int)>
<android.view.ViewStructure: android.view.ViewStructure$HtmlInfo$Builder newHtmlInfoBuilder(java.lang.String)>
<android.view.ViewStructure: void setAccessibilityFocused(boolean)>
<android.view.ViewStructure: void setActivated(boolean)>
<android.view.ViewStructure: void setAlpha(float)>
<android.view.ViewStructure: void setAutofillHints(java.lang.String[])>
<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId)>
<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId,int)>
<android.view.ViewStructure: void setAutofillOptions(java.lang.CharSequence[])>
<android.view.ViewStructure: void setAutofillType(int)>
<android.view.ViewStructure: void setAutofillValue(android.view.autofill.AutofillValue)>
<android.view.ViewStructure: void setCheckable(boolean)>
<android.view.ViewStructure: void setChecked(boolean)>
<android.view.ViewStructure: void setChildCount(int)>
<android.view.ViewStructure: void setClassName(java.lang.String)>
<android.view.ViewStructure: void setClickable(boolean)>
<android.view.ViewStructure: void setContentDescription(java.lang.CharSequence)>
<android.view.ViewStructure: void setContextClickable(boolean)>
<android.view.ViewStructure: void setDataIsSensitive(boolean)>
<android.view.ViewStructure: void setDimens(int,int,int,int,int,int)>
<android.view.ViewStructure: void setElevation(float)>
<android.view.ViewStructure: void setEnabled(boolean)>
<android.view.ViewStructure: void setFocusable(boolean)>
<android.view.ViewStructure: void setFocused(boolean)>
<android.view.ViewStructure: void setHint(java.lang.CharSequence)>
<android.view.ViewStructure: void setHintIdEntry(java.lang.String)>
<android.view.ViewStructure: void setHtmlInfo(android.view.ViewStructure$HtmlInfo)>
<android.view.ViewStructure: void setId(int,java.lang.String,java.lang.String,java.lang.String)>
<android.view.ViewStructure: void setImportantForAutofill(int)>
<android.view.ViewStructure: void setInputType(int)>
<android.view.ViewStructure: void setLocaleList(android.os.LocaleList)>
<android.view.ViewStructure: void setLongClickable(boolean)>
<android.view.ViewStructure: void setMaxTextEms(int)>
<android.view.ViewStructure: void setMaxTextLength(int)>
<android.view.ViewStructure: void setMinTextEms(int)>
<android.view.ViewStructure: void setOpaque(boolean)>
<android.view.ViewStructure: void setReceiveContentMimeTypes(java.lang.String[])>
<android.view.ViewStructure: void setSelected(boolean)>
<android.view.ViewStructure: void setText(java.lang.CharSequence)>
<android.view.ViewStructure: void setText(java.lang.CharSequence,int,int)>
<android.view.ViewStructure: void setTextIdEntry(java.lang.String)>
<android.view.ViewStructure: void setTextLines(int[],int[])>
<android.view.ViewStructure: void setTextStyle(float,int,int,int)>
<android.view.ViewStructure: void setTransformation(android.graphics.Matrix)>
<android.view.ViewStructure: void setVisibility(int)>
<android.view.ViewStructure: void setWebDomain(java.lang.String)>
android.view.ViewStructure$HtmlInfo
<android.view.ViewStructure$HtmlInfo: void <init>()>
<android.view.ViewStructure$HtmlInfo: java.util.List getAttributes()>
<android.view.ViewStructure$HtmlInfo: java.lang.String getTag()>
android.view.ViewStructure$HtmlInfo$Builder
<android.view.ViewStructure$HtmlInfo$Builder: void <init>()>
<android.view.ViewStructure$HtmlInfo$Builder: android.view.ViewStructure$HtmlInfo$Builder addAttribute(java.lang.String,java.lang.String)>
<android.view.ViewStructure$HtmlInfo$Builder: android.view.ViewStructure$HtmlInfo build()>
android.view.ViewStub
<android.view.ViewStub: void <init>(android.content.Context)>
<android.view.ViewStub: void <init>(android.content.Context,int)>
<android.view.ViewStub: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.ViewStub: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.view.ViewStub: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.view.ViewStub: int getInflatedId()>
<android.view.ViewStub: android.view.LayoutInflater getLayoutInflater()>
<android.view.ViewStub: int getLayoutResource()>
<android.view.ViewStub: android.view.View inflate()>
<android.view.ViewStub: void setInflatedId(int)>
<android.view.ViewStub: void setLayoutInflater(android.view.LayoutInflater)>
<android.view.ViewStub: void setLayoutResource(int)>
<android.view.ViewStub: void setOnInflateListener(android.view.ViewStub$OnInflateListener)>
android.view.ViewStub$OnInflateListener
<android.view.ViewStub$OnInflateListener: void onInflate(android.view.ViewStub,android.view.View)>
android.view.ViewTreeObserver
<android.view.ViewTreeObserver: void addOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>
<android.view.ViewTreeObserver: void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.view.ViewTreeObserver: void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>
<android.view.ViewTreeObserver: void addOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)>
<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>
<android.view.ViewTreeObserver: void addOnWindowAttachListener(android.view.ViewTreeObserver$OnWindowAttachListener)>
<android.view.ViewTreeObserver: void addOnWindowFocusChangeListener(android.view.ViewTreeObserver$OnWindowFocusChangeListener)>
<android.view.ViewTreeObserver: void dispatchOnDraw()>
<android.view.ViewTreeObserver: void dispatchOnGlobalLayout()>
<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()>
<android.view.ViewTreeObserver: boolean isAlive()>
<android.view.ViewTreeObserver: void registerFrameCommitCallback(java.lang.Runnable)>
<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void removeOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>
<android.view.ViewTreeObserver: void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>
<android.view.ViewTreeObserver: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.view.ViewTreeObserver: void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>
<android.view.ViewTreeObserver: void removeOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)>
<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>
<android.view.ViewTreeObserver: void removeOnWindowAttachListener(android.view.ViewTreeObserver$OnWindowAttachListener)>
<android.view.ViewTreeObserver: void removeOnWindowFocusChangeListener(android.view.ViewTreeObserver$OnWindowFocusChangeListener)>
<android.view.ViewTreeObserver: boolean unregisterFrameCommitCallback(java.lang.Runnable)>
android.view.ViewTreeObserver$OnDrawListener
<android.view.ViewTreeObserver$OnDrawListener: void onDraw()>
android.view.ViewTreeObserver$OnGlobalFocusChangeListener
<android.view.ViewTreeObserver$OnGlobalFocusChangeListener: void onGlobalFocusChanged(android.view.View,android.view.View)>
android.view.ViewTreeObserver$OnGlobalLayoutListener
<android.view.ViewTreeObserver$OnGlobalLayoutListener: void onGlobalLayout()>
android.view.ViewTreeObserver$OnPreDrawListener
<android.view.ViewTreeObserver$OnPreDrawListener: boolean onPreDraw()>
android.view.ViewTreeObserver$OnScrollChangedListener
<android.view.ViewTreeObserver$OnScrollChangedListener: void onScrollChanged()>
android.view.ViewTreeObserver$OnTouchModeChangeListener
<android.view.ViewTreeObserver$OnTouchModeChangeListener: void onTouchModeChanged(boolean)>
android.view.ViewTreeObserver$OnWindowAttachListener
<android.view.ViewTreeObserver$OnWindowAttachListener: void onWindowAttached()>
<android.view.ViewTreeObserver$OnWindowAttachListener: void onWindowDetached()>
android.view.ViewTreeObserver$OnWindowFocusChangeListener
<android.view.ViewTreeObserver$OnWindowFocusChangeListener: void onWindowFocusChanged(boolean)>
android.view.Window
<android.view.Window: void <init>(android.content.Context)>
<android.view.Window: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.view.Window: void addFlags(int)>
<android.view.Window: void addOnFrameMetricsAvailableListener(android.view.Window$OnFrameMetricsAvailableListener,android.os.Handler)>
<android.view.Window: void clearFlags(int)>
<android.view.Window: void closeAllPanels()>
<android.view.Window: void closePanel(int)>
<android.view.Window: android.view.View findViewById(int)>
<android.view.Window: boolean getAllowEnterTransitionOverlap()>
<android.view.Window: boolean getAllowReturnTransitionOverlap()>
<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>
<android.view.Window: android.view.Window$Callback getCallback()>
<android.view.Window: int getColorMode()>
<android.view.Window: android.view.Window getContainer()>
<android.view.Window: android.transition.Scene getContentScene()>
<android.view.Window: android.content.Context getContext()>
<android.view.Window: android.view.View getCurrentFocus()>
<android.view.Window: android.view.View getDecorView()>
<android.view.Window: int getDefaultFeatures(android.content.Context)>
<android.view.Window: android.transition.Transition getEnterTransition()>
<android.view.Window: android.transition.Transition getExitTransition()>
<android.view.Window: int getFeatures()>
<android.view.Window: int getForcedWindowFlags()>
<android.view.Window: android.view.WindowInsetsController getInsetsController()>
<android.view.Window: android.view.LayoutInflater getLayoutInflater()>
<android.view.Window: int getLocalFeatures()>
<android.view.Window: android.media.session.MediaController getMediaController()>
<android.view.Window: int getNavigationBarColor()>
<android.view.Window: int getNavigationBarDividerColor()>
<android.view.Window: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()>
<android.view.Window: android.transition.Transition getReenterTransition()>
<android.view.Window: android.transition.Transition getReturnTransition()>
<android.view.Window: android.view.AttachedSurfaceControl getRootSurfaceControl()>
<android.view.Window: android.transition.Transition getSharedElementEnterTransition()>
<android.view.Window: android.transition.Transition getSharedElementExitTransition()>
<android.view.Window: android.transition.Transition getSharedElementReenterTransition()>
<android.view.Window: android.transition.Transition getSharedElementReturnTransition()>
<android.view.Window: boolean getSharedElementsUseOverlay()>
<android.view.Window: int getStatusBarColor()>
<android.view.Window: java.util.List getSystemGestureExclusionRects()>
<android.view.Window: long getTransitionBackgroundFadeDuration()>
<android.view.Window: android.transition.TransitionManager getTransitionManager()>
<android.view.Window: int getVolumeControlStream()>
<android.view.Window: android.view.WindowManager getWindowManager()>
<android.view.Window: android.content.res.TypedArray getWindowStyle()>
<android.view.Window: boolean hasChildren()>
<android.view.Window: boolean hasFeature(int)>
<android.view.Window: boolean hasSoftInputMode()>
<android.view.Window: void injectInputEvent(android.view.InputEvent)>
<android.view.Window: void invalidatePanelMenu(int)>
<android.view.Window: boolean isActive()>
<android.view.Window: boolean isFloating()>
<android.view.Window: boolean isNavigationBarContrastEnforced()>
<android.view.Window: boolean isShortcutKey(int,android.view.KeyEvent)>
<android.view.Window: boolean isStatusBarContrastEnforced()>
<android.view.Window: boolean isWideColorGamut()>
<android.view.Window: void makeActive()>
<android.view.Window: void onActive()>
<android.view.Window: void onConfigurationChanged(android.content.res.Configuration)>
<android.view.Window: void openPanel(int,android.view.KeyEvent)>
<android.view.Window: android.view.View peekDecorView()>
<android.view.Window: boolean performContextMenuIdentifierAction(int,int)>
<android.view.Window: boolean performPanelIdentifierAction(int,int,int)>
<android.view.Window: boolean performPanelShortcut(int,int,android.view.KeyEvent,int)>
<android.view.Window: void registerScrollCaptureCallback(android.view.ScrollCaptureCallback)>
<android.view.Window: void removeOnFrameMetricsAvailableListener(android.view.Window$OnFrameMetricsAvailableListener)>
<android.view.Window: boolean requestFeature(int)>
<android.view.Window: android.view.View requireViewById(int)>
<android.view.Window: void restoreHierarchyState(android.os.Bundle)>
<android.view.Window: android.os.Bundle saveHierarchyState()>
<android.view.Window: void setAllowEnterTransitionOverlap(boolean)>
<android.view.Window: void setAllowReturnTransitionOverlap(boolean)>
<android.view.Window: void setAttributes(android.view.WindowManager$LayoutParams)>
<android.view.Window: void setBackgroundBlurRadius(int)>
<android.view.Window: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.view.Window: void setBackgroundDrawableResource(int)>
<android.view.Window: void setCallback(android.view.Window$Callback)>
<android.view.Window: void setChildDrawable(int,android.graphics.drawable.Drawable)>
<android.view.Window: void setChildInt(int,int)>
<android.view.Window: void setClipToOutline(boolean)>
<android.view.Window: void setColorMode(int)>
<android.view.Window: void setContainer(android.view.Window)>
<android.view.Window: void setContentView(int)>
<android.view.Window: void setContentView(android.view.View)>
<android.view.Window: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.view.Window: void setDecorCaptionShade(int)>
<android.view.Window: void setDecorFitsSystemWindows(boolean)>
<android.view.Window: void setDefaultWindowFormat(int)>
<android.view.Window: void setDimAmount(float)>
<android.view.Window: void setElevation(float)>
<android.view.Window: void setEnterTransition(android.transition.Transition)>
<android.view.Window: void setExitTransition(android.transition.Transition)>
<android.view.Window: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>
<android.view.Window: void setFeatureDrawableAlpha(int,int)>
<android.view.Window: void setFeatureDrawableResource(int,int)>
<android.view.Window: void setFeatureDrawableUri(int,android.net.Uri)>
<android.view.Window: void setFeatureInt(int,int)>
<android.view.Window: void setFlags(int,int)>
<android.view.Window: void setFormat(int)>
<android.view.Window: void setGravity(int)>
<android.view.Window: void setHideOverlayWindows(boolean)>
<android.view.Window: void setIcon(int)>
<android.view.Window: void setLayout(int,int)>
<android.view.Window: void setLocalFocus(boolean,boolean)>
<android.view.Window: void setLogo(int)>
<android.view.Window: void setMediaController(android.media.session.MediaController)>
<android.view.Window: void setNavigationBarColor(int)>
<android.view.Window: void setNavigationBarContrastEnforced(boolean)>
<android.view.Window: void setNavigationBarDividerColor(int)>
<android.view.Window: void setPreferMinimalPostProcessing(boolean)>
<android.view.Window: void setReenterTransition(android.transition.Transition)>
<android.view.Window: void setResizingCaptionDrawable(android.graphics.drawable.Drawable)>
<android.view.Window: void setRestrictedCaptionAreaListener(android.view.Window$OnRestrictedCaptionAreaChangedListener)>
<android.view.Window: void setReturnTransition(android.transition.Transition)>
<android.view.Window: void setSharedElementEnterTransition(android.transition.Transition)>
<android.view.Window: void setSharedElementExitTransition(android.transition.Transition)>
<android.view.Window: void setSharedElementReenterTransition(android.transition.Transition)>
<android.view.Window: void setSharedElementReturnTransition(android.transition.Transition)>
<android.view.Window: void setSharedElementsUseOverlay(boolean)>
<android.view.Window: void setSoftInputMode(int)>
<android.view.Window: void setStatusBarColor(int)>
<android.view.Window: void setStatusBarContrastEnforced(boolean)>
<android.view.Window: void setSustainedPerformanceMode(boolean)>
<android.view.Window: void setSystemGestureExclusionRects(java.util.List)>
<android.view.Window: void setTitle(java.lang.CharSequence)>
<android.view.Window: void setTitleColor(int)>
<android.view.Window: void setTransitionBackgroundFadeDuration(long)>
<android.view.Window: void setTransitionManager(android.transition.TransitionManager)>
<android.view.Window: void setType(int)>
<android.view.Window: void setUiOptions(int)>
<android.view.Window: void setUiOptions(int,int)>
<android.view.Window: void setVolumeControlStream(int)>
<android.view.Window: void setWindowAnimations(int)>
<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)>
<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String,boolean)>
<android.view.Window: boolean superDispatchGenericMotionEvent(android.view.MotionEvent)>
<android.view.Window: boolean superDispatchKeyEvent(android.view.KeyEvent)>
<android.view.Window: boolean superDispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.view.Window: boolean superDispatchTouchEvent(android.view.MotionEvent)>
<android.view.Window: boolean superDispatchTrackballEvent(android.view.MotionEvent)>
<android.view.Window: void takeInputQueue(android.view.InputQueue$Callback)>
<android.view.Window: void takeKeyEvents(boolean)>
<android.view.Window: void takeSurface(android.view.SurfaceHolder$Callback2)>
<android.view.Window: void togglePanel(int,android.view.KeyEvent)>
<android.view.Window: void unregisterScrollCaptureCallback(android.view.ScrollCaptureCallback)>
<android.view.Window: int DECOR_CAPTION_SHADE_AUTO>
<android.view.Window: int DECOR_CAPTION_SHADE_DARK>
<android.view.Window: int DECOR_CAPTION_SHADE_LIGHT>
<android.view.Window: int DEFAULT_FEATURES>
<android.view.Window: int FEATURE_ACTION_BAR>
<android.view.Window: int FEATURE_ACTION_BAR_OVERLAY>
<android.view.Window: int FEATURE_ACTION_MODE_OVERLAY>
<android.view.Window: int FEATURE_ACTIVITY_TRANSITIONS>
<android.view.Window: int FEATURE_CONTENT_TRANSITIONS>
<android.view.Window: int FEATURE_CONTEXT_MENU>
<android.view.Window: int FEATURE_CUSTOM_TITLE>
<android.view.Window: int FEATURE_INDETERMINATE_PROGRESS>
<android.view.Window: int FEATURE_LEFT_ICON>
<android.view.Window: int FEATURE_NO_TITLE>
<android.view.Window: int FEATURE_OPTIONS_PANEL>
<android.view.Window: int FEATURE_PROGRESS>
<android.view.Window: int FEATURE_RIGHT_ICON>
<android.view.Window: int FEATURE_SWIPE_TO_DISMISS>
<android.view.Window: int ID_ANDROID_CONTENT>
<android.view.Window: java.lang.String NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME>
<android.view.Window: int PROGRESS_END>
<android.view.Window: int PROGRESS_INDETERMINATE_OFF>
<android.view.Window: int PROGRESS_INDETERMINATE_ON>
<android.view.Window: int PROGRESS_SECONDARY_END>
<android.view.Window: int PROGRESS_SECONDARY_START>
<android.view.Window: int PROGRESS_START>
<android.view.Window: int PROGRESS_VISIBILITY_OFF>
<android.view.Window: int PROGRESS_VISIBILITY_ON>
<android.view.Window: java.lang.String STATUS_BAR_BACKGROUND_TRANSITION_NAME>
android.view.Window$Callback
<android.view.Window$Callback: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.view.Window$Callback: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.view.Window$Callback: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.view.Window$Callback: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.Window$Callback: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.view.Window$Callback: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.view.Window$Callback: void onActionModeFinished(android.view.ActionMode)>
<android.view.Window$Callback: void onActionModeStarted(android.view.ActionMode)>
<android.view.Window$Callback: void onAttachedToWindow()>
<android.view.Window$Callback: void onContentChanged()>
<android.view.Window$Callback: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.view.Window$Callback: android.view.View onCreatePanelView(int)>
<android.view.Window$Callback: void onDetachedFromWindow()>
<android.view.Window$Callback: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.view.Window$Callback: boolean onMenuOpened(int,android.view.Menu)>
<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>
<android.view.Window$Callback: void onPointerCaptureChanged(boolean)>
<android.view.Window$Callback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.view.Window$Callback: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>
<android.view.Window$Callback: boolean onSearchRequested()>
<android.view.Window$Callback: boolean onSearchRequested(android.view.SearchEvent)>
<android.view.Window$Callback: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>
<android.view.Window$Callback: void onWindowFocusChanged(boolean)>
<android.view.Window$Callback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>
<android.view.Window$Callback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>
android.view.Window$OnFrameMetricsAvailableListener
<android.view.Window$OnFrameMetricsAvailableListener: void onFrameMetricsAvailable(android.view.Window,android.view.FrameMetrics,int)>
android.view.Window$OnRestrictedCaptionAreaChangedListener
<android.view.Window$OnRestrictedCaptionAreaChangedListener: void onRestrictedCaptionAreaChanged(android.graphics.Rect)>
android.view.WindowAnimationFrameStats
<android.view.WindowAnimationFrameStats: int describeContents()>
<android.view.WindowAnimationFrameStats: void writeToParcel(android.os.Parcel,int)>
<android.view.WindowAnimationFrameStats: android.os.Parcelable$Creator CREATOR>
android.view.WindowContentFrameStats
<android.view.WindowContentFrameStats: int describeContents()>
<android.view.WindowContentFrameStats: long getFramePostedTimeNano(int)>
<android.view.WindowContentFrameStats: long getFrameReadyTimeNano(int)>
<android.view.WindowContentFrameStats: void writeToParcel(android.os.Parcel,int)>
<android.view.WindowContentFrameStats: android.os.Parcelable$Creator CREATOR>
android.view.WindowId
<android.view.WindowId: int describeContents()>
<android.view.WindowId: boolean isFocused()>
<android.view.WindowId: void registerFocusObserver(android.view.WindowId$FocusObserver)>
<android.view.WindowId: void unregisterFocusObserver(android.view.WindowId$FocusObserver)>
<android.view.WindowId: void writeToParcel(android.os.Parcel,int)>
<android.view.WindowId: android.os.Parcelable$Creator CREATOR>
android.view.WindowId$FocusObserver
<android.view.WindowId$FocusObserver: void <init>()>
<android.view.WindowId$FocusObserver: void onFocusGained(android.view.WindowId)>
<android.view.WindowId$FocusObserver: void onFocusLost(android.view.WindowId)>
android.view.WindowInsets
<android.view.WindowInsets: void <init>(android.view.WindowInsets)>
<android.view.WindowInsets: android.view.WindowInsets consumeDisplayCutout()>
<android.view.WindowInsets: android.view.WindowInsets consumeStableInsets()>
<android.view.WindowInsets: android.view.WindowInsets consumeSystemWindowInsets()>
<android.view.WindowInsets: android.view.DisplayCutout getDisplayCutout()>
<android.view.WindowInsets: android.graphics.Insets getInsets(int)>
<android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>
<android.view.WindowInsets: android.graphics.Insets getMandatorySystemGestureInsets()>
<android.view.WindowInsets: android.graphics.Rect getPrivacyIndicatorBounds()>
<android.view.WindowInsets: android.view.RoundedCorner getRoundedCorner(int)>
<android.view.WindowInsets: int getStableInsetBottom()>
<android.view.WindowInsets: int getStableInsetLeft()>
<android.view.WindowInsets: int getStableInsetRight()>
<android.view.WindowInsets: int getStableInsetTop()>
<android.view.WindowInsets: android.graphics.Insets getStableInsets()>
<android.view.WindowInsets: android.graphics.Insets getSystemGestureInsets()>
<android.view.WindowInsets: int getSystemWindowInsetBottom()>
<android.view.WindowInsets: int getSystemWindowInsetLeft()>
<android.view.WindowInsets: int getSystemWindowInsetRight()>
<android.view.WindowInsets: int getSystemWindowInsetTop()>
<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>
<android.view.WindowInsets: android.graphics.Insets getTappableElementInsets()>
<android.view.WindowInsets: boolean hasInsets()>
<android.view.WindowInsets: boolean hasStableInsets()>
<android.view.WindowInsets: boolean hasSystemWindowInsets()>
<android.view.WindowInsets: android.view.WindowInsets inset(android.graphics.Insets)>
<android.view.WindowInsets: android.view.WindowInsets inset(int,int,int,int)>
<android.view.WindowInsets: boolean isConsumed()>
<android.view.WindowInsets: boolean isRound()>
<android.view.WindowInsets: boolean isVisible(int)>
<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(int,int,int,int)>
<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(android.graphics.Rect)>
<android.view.WindowInsets: android.view.WindowInsets CONSUMED>
android.view.WindowInsets$Builder
<android.view.WindowInsets$Builder: void <init>()>
<android.view.WindowInsets$Builder: void <init>(android.view.WindowInsets)>
<android.view.WindowInsets$Builder: android.view.WindowInsets build()>
<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setDisplayCutout(android.view.DisplayCutout)>
<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setInsets(int,android.graphics.Insets)>
<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setInsetsIgnoringVisibility(int,android.graphics.Insets)>
<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setMandatorySystemGestureInsets(android.graphics.Insets)>
<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setPrivacyIndicatorBounds(android.graphics.Rect)>
<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setRoundedCorner(int,android.view.RoundedCorner)>
<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setStableInsets(android.graphics.Insets)>
<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setSystemGestureInsets(android.graphics.Insets)>
<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setSystemWindowInsets(android.graphics.Insets)>
<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setTappableElementInsets(android.graphics.Insets)>
<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setVisible(int,boolean)>
android.view.WindowInsets$Side
<android.view.WindowInsets$Side: int all()>
<android.view.WindowInsets$Side: int BOTTOM>
<android.view.WindowInsets$Side: int LEFT>
<android.view.WindowInsets$Side: int RIGHT>
<android.view.WindowInsets$Side: int TOP>
android.view.WindowInsets$Type
<android.view.WindowInsets$Type: int captionBar()>
<android.view.WindowInsets$Type: int displayCutout()>
<android.view.WindowInsets$Type: int ime()>
<android.view.WindowInsets$Type: int mandatorySystemGestures()>
<android.view.WindowInsets$Type: int navigationBars()>
<android.view.WindowInsets$Type: int statusBars()>
<android.view.WindowInsets$Type: int systemBars()>
<android.view.WindowInsets$Type: int systemGestures()>
<android.view.WindowInsets$Type: int tappableElement()>
android.view.WindowInsetsAnimation
<android.view.WindowInsetsAnimation: void <init>(int,android.view.animation.Interpolator,long)>
<android.view.WindowInsetsAnimation: float getAlpha()>
<android.view.WindowInsetsAnimation: long getDurationMillis()>
<android.view.WindowInsetsAnimation: float getFraction()>
<android.view.WindowInsetsAnimation: float getInterpolatedFraction()>
<android.view.WindowInsetsAnimation: android.view.animation.Interpolator getInterpolator()>
<android.view.WindowInsetsAnimation: int getTypeMask()>
<android.view.WindowInsetsAnimation: void setAlpha(float)>
<android.view.WindowInsetsAnimation: void setFraction(float)>
android.view.WindowInsetsAnimation$Bounds
<android.view.WindowInsetsAnimation$Bounds: void <init>(android.graphics.Insets,android.graphics.Insets)>
<android.view.WindowInsetsAnimation$Bounds: android.graphics.Insets getLowerBound()>
<android.view.WindowInsetsAnimation$Bounds: android.graphics.Insets getUpperBound()>
<android.view.WindowInsetsAnimation$Bounds: android.view.WindowInsetsAnimation$Bounds inset(android.graphics.Insets)>
android.view.WindowInsetsAnimation$Callback
<android.view.WindowInsetsAnimation$Callback: void <init>(int)>
<android.view.WindowInsetsAnimation$Callback: int getDispatchMode()>
<android.view.WindowInsetsAnimation$Callback: void onEnd(android.view.WindowInsetsAnimation)>
<android.view.WindowInsetsAnimation$Callback: void onPrepare(android.view.WindowInsetsAnimation)>
<android.view.WindowInsetsAnimation$Callback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)>
<android.view.WindowInsetsAnimation$Callback: android.view.WindowInsetsAnimation$Bounds onStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>
<android.view.WindowInsetsAnimation$Callback: int DISPATCH_MODE_CONTINUE_ON_SUBTREE>
<android.view.WindowInsetsAnimation$Callback: int DISPATCH_MODE_STOP>
android.view.WindowInsetsAnimationControlListener
<android.view.WindowInsetsAnimationControlListener: void onCancelled(android.view.WindowInsetsAnimationController)>
<android.view.WindowInsetsAnimationControlListener: void onFinished(android.view.WindowInsetsAnimationController)>
<android.view.WindowInsetsAnimationControlListener: void onReady(android.view.WindowInsetsAnimationController,int)>
android.view.WindowInsetsAnimationController
<android.view.WindowInsetsAnimationController: void finish(boolean)>
<android.view.WindowInsetsAnimationController: float getCurrentAlpha()>
<android.view.WindowInsetsAnimationController: float getCurrentFraction()>
<android.view.WindowInsetsAnimationController: android.graphics.Insets getCurrentInsets()>
<android.view.WindowInsetsAnimationController: android.graphics.Insets getHiddenStateInsets()>
<android.view.WindowInsetsAnimationController: android.graphics.Insets getShownStateInsets()>
<android.view.WindowInsetsAnimationController: int getTypes()>
<android.view.WindowInsetsAnimationController: boolean isCancelled()>
<android.view.WindowInsetsAnimationController: boolean isFinished()>
<android.view.WindowInsetsAnimationController: boolean isReady()>
<android.view.WindowInsetsAnimationController: void setInsetsAndAlpha(android.graphics.Insets,float,float)>
android.view.WindowInsetsController
<android.view.WindowInsetsController: void addOnControllableInsetsChangedListener(android.view.WindowInsetsController$OnControllableInsetsChangedListener)>
<android.view.WindowInsetsController: void controlWindowInsetsAnimation(int,long,android.view.animation.Interpolator,android.os.CancellationSignal,android.view.WindowInsetsAnimationControlListener)>
<android.view.WindowInsetsController: int getSystemBarsAppearance()>
<android.view.WindowInsetsController: int getSystemBarsBehavior()>
<android.view.WindowInsetsController: void hide(int)>
<android.view.WindowInsetsController: void removeOnControllableInsetsChangedListener(android.view.WindowInsetsController$OnControllableInsetsChangedListener)>
<android.view.WindowInsetsController: void setSystemBarsAppearance(int,int)>
<android.view.WindowInsetsController: void setSystemBarsBehavior(int)>
<android.view.WindowInsetsController: void show(int)>
<android.view.WindowInsetsController: int APPEARANCE_LIGHT_NAVIGATION_BARS>
<android.view.WindowInsetsController: int APPEARANCE_LIGHT_STATUS_BARS>
<android.view.WindowInsetsController: int BEHAVIOR_DEFAULT>
<android.view.WindowInsetsController: int BEHAVIOR_SHOW_BARS_BY_SWIPE>
<android.view.WindowInsetsController: int BEHAVIOR_SHOW_BARS_BY_TOUCH>
<android.view.WindowInsetsController: int BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE>
android.view.WindowInsetsController$OnControllableInsetsChangedListener
<android.view.WindowInsetsController$OnControllableInsetsChangedListener: void onControllableInsetsChanged(android.view.WindowInsetsController,int)>
android.view.WindowManager
<android.view.WindowManager: void addCrossWindowBlurEnabledListener(java.util.function.Consumer)>
<android.view.WindowManager: void addCrossWindowBlurEnabledListener(java.util.concurrent.Executor,java.util.function.Consumer)>
<android.view.WindowManager: android.view.WindowMetrics getCurrentWindowMetrics()>
<android.view.WindowManager: android.view.Display getDefaultDisplay()>
<android.view.WindowManager: android.view.WindowMetrics getMaximumWindowMetrics()>
<android.view.WindowManager: boolean isCrossWindowBlurEnabled()>
<android.view.WindowManager: void removeCrossWindowBlurEnabledListener(java.util.function.Consumer)>
<android.view.WindowManager: void removeViewImmediate(android.view.View)>
android.view.WindowManager$BadTokenException
<android.view.WindowManager$BadTokenException: void <init>()>
<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>
android.view.WindowManager$InvalidDisplayException
<android.view.WindowManager$InvalidDisplayException: void <init>()>
<android.view.WindowManager$InvalidDisplayException: void <init>(java.lang.String)>
android.view.WindowManager$LayoutParams
<android.view.WindowManager$LayoutParams: void <init>()>
<android.view.WindowManager$LayoutParams: void <init>(int)>
<android.view.WindowManager$LayoutParams: void <init>(int,int)>
<android.view.WindowManager$LayoutParams: void <init>(int,int,int)>
<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int)>
<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int,int,int)>
<android.view.WindowManager$LayoutParams: void <init>(android.os.Parcel)>
<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>
<android.view.WindowManager$LayoutParams: java.lang.String debug(java.lang.String)>
<android.view.WindowManager$LayoutParams: int describeContents()>
<android.view.WindowManager$LayoutParams: int getBlurBehindRadius()>
<android.view.WindowManager$LayoutParams: int getColorMode()>
<android.view.WindowManager$LayoutParams: int getFitInsetsSides()>
<android.view.WindowManager$LayoutParams: int getFitInsetsTypes()>
<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>
<android.view.WindowManager$LayoutParams: boolean isFitInsetsIgnoringVisibility()>
<android.view.WindowManager$LayoutParams: boolean mayUseInputMethod(int)>
<android.view.WindowManager$LayoutParams: void setBlurBehindRadius(int)>
<android.view.WindowManager$LayoutParams: void setColorMode(int)>
<android.view.WindowManager$LayoutParams: void setFitInsetsIgnoringVisibility(boolean)>
<android.view.WindowManager$LayoutParams: void setFitInsetsSides(int)>
<android.view.WindowManager$LayoutParams: void setFitInsetsTypes(int)>
<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>
<android.view.WindowManager$LayoutParams: void writeToParcel(android.os.Parcel,int)>
<android.view.WindowManager$LayoutParams: int ALPHA_CHANGED>
<android.view.WindowManager$LayoutParams: int ANIMATION_CHANGED>
<android.view.WindowManager$LayoutParams: float BRIGHTNESS_OVERRIDE_FULL>
<android.view.WindowManager$LayoutParams: float BRIGHTNESS_OVERRIDE_NONE>
<android.view.WindowManager$LayoutParams: float BRIGHTNESS_OVERRIDE_OFF>
<android.view.WindowManager$LayoutParams: android.os.Parcelable$Creator CREATOR>
<android.view.WindowManager$LayoutParams: int DIM_AMOUNT_CHANGED>
<android.view.WindowManager$LayoutParams: int FIRST_APPLICATION_WINDOW>
<android.view.WindowManager$LayoutParams: int FIRST_SUB_WINDOW>
<android.view.WindowManager$LayoutParams: int FIRST_SYSTEM_WINDOW>
<android.view.WindowManager$LayoutParams: int FLAGS_CHANGED>
<android.view.WindowManager$LayoutParams: int FLAG_ALLOW_LOCK_WHILE_SCREEN_ON>
<android.view.WindowManager$LayoutParams: int FLAG_ALT_FOCUSABLE_IM>
<android.view.WindowManager$LayoutParams: int FLAG_BLUR_BEHIND>
<android.view.WindowManager$LayoutParams: int FLAG_DIM_BEHIND>
<android.view.WindowManager$LayoutParams: int FLAG_DISMISS_KEYGUARD>
<android.view.WindowManager$LayoutParams: int FLAG_DITHER>
<android.view.WindowManager$LayoutParams: int FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS>
<android.view.WindowManager$LayoutParams: int FLAG_FORCE_NOT_FULLSCREEN>
<android.view.WindowManager$LayoutParams: int FLAG_FULLSCREEN>
<android.view.WindowManager$LayoutParams: int FLAG_HARDWARE_ACCELERATED>
<android.view.WindowManager$LayoutParams: int FLAG_IGNORE_CHEEK_PRESSES>
<android.view.WindowManager$LayoutParams: int FLAG_KEEP_SCREEN_ON>
<android.view.WindowManager$LayoutParams: int FLAG_LAYOUT_ATTACHED_IN_DECOR>
<android.view.WindowManager$LayoutParams: int FLAG_LAYOUT_INSET_DECOR>
<android.view.WindowManager$LayoutParams: int FLAG_LAYOUT_IN_OVERSCAN>
<android.view.WindowManager$LayoutParams: int FLAG_LAYOUT_IN_SCREEN>
<android.view.WindowManager$LayoutParams: int FLAG_LAYOUT_NO_LIMITS>
<android.view.WindowManager$LayoutParams: int FLAG_LOCAL_FOCUS_MODE>
<android.view.WindowManager$LayoutParams: int FLAG_NOT_FOCUSABLE>
<android.view.WindowManager$LayoutParams: int FLAG_NOT_TOUCHABLE>
<android.view.WindowManager$LayoutParams: int FLAG_NOT_TOUCH_MODAL>
<android.view.WindowManager$LayoutParams: int FLAG_SCALED>
<android.view.WindowManager$LayoutParams: int FLAG_SECURE>
<android.view.WindowManager$LayoutParams: int FLAG_SHOW_WALLPAPER>
<android.view.WindowManager$LayoutParams: int FLAG_SHOW_WHEN_LOCKED>
<android.view.WindowManager$LayoutParams: int FLAG_SPLIT_TOUCH>
<android.view.WindowManager$LayoutParams: int FLAG_TOUCHABLE_WHEN_WAKING>
<android.view.WindowManager$LayoutParams: int FLAG_TRANSLUCENT_NAVIGATION>
<android.view.WindowManager$LayoutParams: int FLAG_TRANSLUCENT_STATUS>
<android.view.WindowManager$LayoutParams: int FLAG_TURN_SCREEN_ON>
<android.view.WindowManager$LayoutParams: int FLAG_WATCH_OUTSIDE_TOUCH>
<android.view.WindowManager$LayoutParams: int FORMAT_CHANGED>
<android.view.WindowManager$LayoutParams: int LAST_APPLICATION_WINDOW>
<android.view.WindowManager$LayoutParams: int LAST_SUB_WINDOW>
<android.view.WindowManager$LayoutParams: int LAST_SYSTEM_WINDOW>
<android.view.WindowManager$LayoutParams: int LAYOUT_CHANGED>
<android.view.WindowManager$LayoutParams: int LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS>
<android.view.WindowManager$LayoutParams: int LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT>
<android.view.WindowManager$LayoutParams: int LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER>
<android.view.WindowManager$LayoutParams: int LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES>
<android.view.WindowManager$LayoutParams: int MEMORY_TYPE_CHANGED>
<android.view.WindowManager$LayoutParams: int MEMORY_TYPE_GPU>
<android.view.WindowManager$LayoutParams: int MEMORY_TYPE_HARDWARE>
<android.view.WindowManager$LayoutParams: int MEMORY_TYPE_NORMAL>
<android.view.WindowManager$LayoutParams: int MEMORY_TYPE_PUSH_BUFFERS>
<android.view.WindowManager$LayoutParams: int ROTATION_ANIMATION_CHANGED>
<android.view.WindowManager$LayoutParams: int ROTATION_ANIMATION_CROSSFADE>
<android.view.WindowManager$LayoutParams: int ROTATION_ANIMATION_JUMPCUT>
<android.view.WindowManager$LayoutParams: int ROTATION_ANIMATION_ROTATE>
<android.view.WindowManager$LayoutParams: int ROTATION_ANIMATION_SEAMLESS>
<android.view.WindowManager$LayoutParams: int SCREEN_BRIGHTNESS_CHANGED>
<android.view.WindowManager$LayoutParams: int SCREEN_ORIENTATION_CHANGED>
<android.view.WindowManager$LayoutParams: int SOFT_INPUT_ADJUST_NOTHING>
<android.view.WindowManager$LayoutParams: int SOFT_INPUT_ADJUST_PAN>
<android.view.WindowManager$LayoutParams: int SOFT_INPUT_ADJUST_RESIZE>
<android.view.WindowManager$LayoutParams: int SOFT_INPUT_ADJUST_UNSPECIFIED>
<android.view.WindowManager$LayoutParams: int SOFT_INPUT_IS_FORWARD_NAVIGATION>
<android.view.WindowManager$LayoutParams: int SOFT_INPUT_MASK_ADJUST>
<android.view.WindowManager$LayoutParams: int SOFT_INPUT_MASK_STATE>
<android.view.WindowManager$LayoutParams: int SOFT_INPUT_MODE_CHANGED>
<android.view.WindowManager$LayoutParams: int SOFT_INPUT_STATE_ALWAYS_HIDDEN>
<android.view.WindowManager$LayoutParams: int SOFT_INPUT_STATE_ALWAYS_VISIBLE>
<android.view.WindowManager$LayoutParams: int SOFT_INPUT_STATE_HIDDEN>
<android.view.WindowManager$LayoutParams: int SOFT_INPUT_STATE_UNCHANGED>
<android.view.WindowManager$LayoutParams: int SOFT_INPUT_STATE_UNSPECIFIED>
<android.view.WindowManager$LayoutParams: int SOFT_INPUT_STATE_VISIBLE>
<android.view.WindowManager$LayoutParams: int TITLE_CHANGED>
<android.view.WindowManager$LayoutParams: int TYPE_ACCESSIBILITY_OVERLAY>
<android.view.WindowManager$LayoutParams: int TYPE_APPLICATION>
<android.view.WindowManager$LayoutParams: int TYPE_APPLICATION_ATTACHED_DIALOG>
<android.view.WindowManager$LayoutParams: int TYPE_APPLICATION_MEDIA>
<android.view.WindowManager$LayoutParams: int TYPE_APPLICATION_OVERLAY>
<android.view.WindowManager$LayoutParams: int TYPE_APPLICATION_PANEL>
<android.view.WindowManager$LayoutParams: int TYPE_APPLICATION_STARTING>
<android.view.WindowManager$LayoutParams: int TYPE_APPLICATION_SUB_PANEL>
<android.view.WindowManager$LayoutParams: int TYPE_BASE_APPLICATION>
<android.view.WindowManager$LayoutParams: int TYPE_CHANGED>
<android.view.WindowManager$LayoutParams: int TYPE_DRAWN_APPLICATION>
<android.view.WindowManager$LayoutParams: int TYPE_INPUT_METHOD>
<android.view.WindowManager$LayoutParams: int TYPE_INPUT_METHOD_DIALOG>
<android.view.WindowManager$LayoutParams: int TYPE_KEYGUARD_DIALOG>
<android.view.WindowManager$LayoutParams: int TYPE_PHONE>
<android.view.WindowManager$LayoutParams: int TYPE_PRIORITY_PHONE>
<android.view.WindowManager$LayoutParams: int TYPE_PRIVATE_PRESENTATION>
<android.view.WindowManager$LayoutParams: int TYPE_SEARCH_BAR>
<android.view.WindowManager$LayoutParams: int TYPE_STATUS_BAR>
<android.view.WindowManager$LayoutParams: int TYPE_SYSTEM_ALERT>
<android.view.WindowManager$LayoutParams: int TYPE_SYSTEM_DIALOG>
<android.view.WindowManager$LayoutParams: int TYPE_SYSTEM_ERROR>
<android.view.WindowManager$LayoutParams: int TYPE_SYSTEM_OVERLAY>
<android.view.WindowManager$LayoutParams: int TYPE_TOAST>
<android.view.WindowManager$LayoutParams: int TYPE_WALLPAPER>
<android.view.WindowManager$LayoutParams: float alpha>
<android.view.WindowManager$LayoutParams: float buttonBrightness>
<android.view.WindowManager$LayoutParams: float dimAmount>
<android.view.WindowManager$LayoutParams: int flags>
<android.view.WindowManager$LayoutParams: int format>
<android.view.WindowManager$LayoutParams: int gravity>
<android.view.WindowManager$LayoutParams: float horizontalMargin>
<android.view.WindowManager$LayoutParams: float horizontalWeight>
<android.view.WindowManager$LayoutParams: int layoutInDisplayCutoutMode>
<android.view.WindowManager$LayoutParams: int memoryType>
<android.view.WindowManager$LayoutParams: java.lang.String packageName>
<android.view.WindowManager$LayoutParams: boolean preferMinimalPostProcessing>
<android.view.WindowManager$LayoutParams: int preferredDisplayModeId>
<android.view.WindowManager$LayoutParams: float preferredRefreshRate>
<android.view.WindowManager$LayoutParams: int rotationAnimation>
<android.view.WindowManager$LayoutParams: float screenBrightness>
<android.view.WindowManager$LayoutParams: int screenOrientation>
<android.view.WindowManager$LayoutParams: int softInputMode>
<android.view.WindowManager$LayoutParams: int systemUiVisibility>
<android.view.WindowManager$LayoutParams: android.os.IBinder token>
<android.view.WindowManager$LayoutParams: int type>
<android.view.WindowManager$LayoutParams: float verticalMargin>
<android.view.WindowManager$LayoutParams: float verticalWeight>
<android.view.WindowManager$LayoutParams: int windowAnimations>
<android.view.WindowManager$LayoutParams: int x>
<android.view.WindowManager$LayoutParams: int y>
android.view.WindowMetrics
<android.view.WindowMetrics: void <init>(android.graphics.Rect,android.view.WindowInsets)>
<android.view.WindowMetrics: android.graphics.Rect getBounds()>
<android.view.WindowMetrics: android.view.WindowInsets getWindowInsets()>
android.view.accessibility.AccessibilityEvent
<android.view.accessibility.AccessibilityEvent: void <init>()>
<android.view.accessibility.AccessibilityEvent: void <init>(int)>
<android.view.accessibility.AccessibilityEvent: void <init>(android.view.accessibility.AccessibilityEvent)>
<android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)>
<android.view.accessibility.AccessibilityEvent: int describeContents()>
<android.view.accessibility.AccessibilityEvent: java.lang.String eventTypeToString(int)>
<android.view.accessibility.AccessibilityEvent: int getAction()>
<android.view.accessibility.AccessibilityEvent: int getContentChangeTypes()>
<android.view.accessibility.AccessibilityEvent: long getEventTime()>
<android.view.accessibility.AccessibilityEvent: int getEventType()>
<android.view.accessibility.AccessibilityEvent: int getMovementGranularity()>
<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)>
<android.view.accessibility.AccessibilityEvent: int getRecordCount()>
<android.view.accessibility.AccessibilityEvent: int getSpeechStateChangeTypes()>
<android.view.accessibility.AccessibilityEvent: int getWindowChanges()>
<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()>
<android.view.accessibility.AccessibilityEvent: void setAction(int)>
<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)>
<android.view.accessibility.AccessibilityEvent: void setEventTime(long)>
<android.view.accessibility.AccessibilityEvent: void setEventType(int)>
<android.view.accessibility.AccessibilityEvent: void setMovementGranularity(int)>
<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityEvent: void setSpeechStateChangeTypes(int)>
<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.accessibility.AccessibilityEvent: int CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION>
<android.view.accessibility.AccessibilityEvent: int CONTENT_CHANGE_TYPE_DRAG_CANCELLED>
<android.view.accessibility.AccessibilityEvent: int CONTENT_CHANGE_TYPE_DRAG_DROPPED>
<android.view.accessibility.AccessibilityEvent: int CONTENT_CHANGE_TYPE_DRAG_STARTED>
<android.view.accessibility.AccessibilityEvent: int CONTENT_CHANGE_TYPE_PANE_APPEARED>
<android.view.accessibility.AccessibilityEvent: int CONTENT_CHANGE_TYPE_PANE_DISAPPEARED>
<android.view.accessibility.AccessibilityEvent: int CONTENT_CHANGE_TYPE_PANE_TITLE>
<android.view.accessibility.AccessibilityEvent: int CONTENT_CHANGE_TYPE_STATE_DESCRIPTION>
<android.view.accessibility.AccessibilityEvent: int CONTENT_CHANGE_TYPE_SUBTREE>
<android.view.accessibility.AccessibilityEvent: int CONTENT_CHANGE_TYPE_TEXT>
<android.view.accessibility.AccessibilityEvent: int CONTENT_CHANGE_TYPE_UNDEFINED>
<android.view.accessibility.AccessibilityEvent: android.os.Parcelable$Creator CREATOR>
<android.view.accessibility.AccessibilityEvent: int INVALID_POSITION>
<android.view.accessibility.AccessibilityEvent: int MAX_TEXT_LENGTH>
<android.view.accessibility.AccessibilityEvent: int SPEECH_STATE_LISTENING_END>
<android.view.accessibility.AccessibilityEvent: int SPEECH_STATE_LISTENING_START>
<android.view.accessibility.AccessibilityEvent: int SPEECH_STATE_SPEAKING_END>
<android.view.accessibility.AccessibilityEvent: int SPEECH_STATE_SPEAKING_START>
<android.view.accessibility.AccessibilityEvent: int TYPES_ALL_MASK>
<android.view.accessibility.AccessibilityEvent: int TYPE_ANNOUNCEMENT>
<android.view.accessibility.AccessibilityEvent: int TYPE_ASSIST_READING_CONTEXT>
<android.view.accessibility.AccessibilityEvent: int TYPE_GESTURE_DETECTION_END>
<android.view.accessibility.AccessibilityEvent: int TYPE_GESTURE_DETECTION_START>
<android.view.accessibility.AccessibilityEvent: int TYPE_NOTIFICATION_STATE_CHANGED>
<android.view.accessibility.AccessibilityEvent: int TYPE_SPEECH_STATE_CHANGE>
<android.view.accessibility.AccessibilityEvent: int TYPE_TOUCH_EXPLORATION_GESTURE_END>
<android.view.accessibility.AccessibilityEvent: int TYPE_TOUCH_EXPLORATION_GESTURE_START>
<android.view.accessibility.AccessibilityEvent: int TYPE_TOUCH_INTERACTION_END>
<android.view.accessibility.AccessibilityEvent: int TYPE_TOUCH_INTERACTION_START>
<android.view.accessibility.AccessibilityEvent: int TYPE_VIEW_ACCESSIBILITY_FOCUSED>
<android.view.accessibility.AccessibilityEvent: int TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED>
<android.view.accessibility.AccessibilityEvent: int TYPE_VIEW_CLICKED>
<android.view.accessibility.AccessibilityEvent: int TYPE_VIEW_CONTEXT_CLICKED>
<android.view.accessibility.AccessibilityEvent: int TYPE_VIEW_FOCUSED>
<android.view.accessibility.AccessibilityEvent: int TYPE_VIEW_HOVER_ENTER>
<android.view.accessibility.AccessibilityEvent: int TYPE_VIEW_HOVER_EXIT>
<android.view.accessibility.AccessibilityEvent: int TYPE_VIEW_LONG_CLICKED>
<android.view.accessibility.AccessibilityEvent: int TYPE_VIEW_SCROLLED>
<android.view.accessibility.AccessibilityEvent: int TYPE_VIEW_SELECTED>
<android.view.accessibility.AccessibilityEvent: int TYPE_VIEW_TEXT_CHANGED>
<android.view.accessibility.AccessibilityEvent: int TYPE_VIEW_TEXT_SELECTION_CHANGED>
<android.view.accessibility.AccessibilityEvent: int TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY>
<android.view.accessibility.AccessibilityEvent: int TYPE_WINDOWS_CHANGED>
<android.view.accessibility.AccessibilityEvent: int TYPE_WINDOW_CONTENT_CHANGED>
<android.view.accessibility.AccessibilityEvent: int TYPE_WINDOW_STATE_CHANGED>
<android.view.accessibility.AccessibilityEvent: int WINDOWS_CHANGE_ACCESSIBILITY_FOCUSED>
<android.view.accessibility.AccessibilityEvent: int WINDOWS_CHANGE_ACTIVE>
<android.view.accessibility.AccessibilityEvent: int WINDOWS_CHANGE_ADDED>
<android.view.accessibility.AccessibilityEvent: int WINDOWS_CHANGE_BOUNDS>
<android.view.accessibility.AccessibilityEvent: int WINDOWS_CHANGE_CHILDREN>
<android.view.accessibility.AccessibilityEvent: int WINDOWS_CHANGE_FOCUSED>
<android.view.accessibility.AccessibilityEvent: int WINDOWS_CHANGE_LAYER>
<android.view.accessibility.AccessibilityEvent: int WINDOWS_CHANGE_PARENT>
<android.view.accessibility.AccessibilityEvent: int WINDOWS_CHANGE_PIP>
<android.view.accessibility.AccessibilityEvent: int WINDOWS_CHANGE_REMOVED>
<android.view.accessibility.AccessibilityEvent: int WINDOWS_CHANGE_TITLE>
android.view.accessibility.AccessibilityEventSource
<android.view.accessibility.AccessibilityEventSource: void sendAccessibilityEvent(int)>
<android.view.accessibility.AccessibilityEventSource: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>
android.view.accessibility.AccessibilityManager
<android.view.accessibility.AccessibilityManager: void addAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer)>
<android.view.accessibility.AccessibilityManager: void addAccessibilityServicesStateChangeListener(java.util.concurrent.Executor,android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener)>
<android.view.accessibility.AccessibilityManager: void addAccessibilityServicesStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener)>
<android.view.accessibility.AccessibilityManager: boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)>
<android.view.accessibility.AccessibilityManager: void addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener,android.os.Handler)>
<android.view.accessibility.AccessibilityManager: void addAudioDescriptionRequestedChangeListener(java.util.concurrent.Executor,android.view.accessibility.AccessibilityManager$AudioDescriptionRequestedChangeListener)>
<android.view.accessibility.AccessibilityManager: boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener)>
<android.view.accessibility.AccessibilityManager: void addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener,android.os.Handler)>
<android.view.accessibility.AccessibilityManager: int getAccessibilityFocusColor()>
<android.view.accessibility.AccessibilityManager: int getAccessibilityFocusStrokeWidth()>
<android.view.accessibility.AccessibilityManager: java.util.List getAccessibilityServiceList()>
<android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)>
<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()>
<android.view.accessibility.AccessibilityManager: int getRecommendedTimeoutMillis(int,int)>
<android.view.accessibility.AccessibilityManager: void interrupt()>
<android.view.accessibility.AccessibilityManager: boolean isAccessibilityButtonSupported()>
<android.view.accessibility.AccessibilityManager: boolean isAudioDescriptionRequested()>
<android.view.accessibility.AccessibilityManager: boolean isEnabled()>
<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>
<android.view.accessibility.AccessibilityManager: void removeAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer)>
<android.view.accessibility.AccessibilityManager: boolean removeAccessibilityServicesStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener)>
<android.view.accessibility.AccessibilityManager: boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)>
<android.view.accessibility.AccessibilityManager: boolean removeAudioDescriptionRequestedChangeListener(android.view.accessibility.AccessibilityManager$AudioDescriptionRequestedChangeListener)>
<android.view.accessibility.AccessibilityManager: boolean removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener)>
<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.accessibility.AccessibilityManager: int FLAG_CONTENT_CONTROLS>
<android.view.accessibility.AccessibilityManager: int FLAG_CONTENT_ICONS>
<android.view.accessibility.AccessibilityManager: int FLAG_CONTENT_TEXT>
android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener
<android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener: void onAccessibilityServicesStateChanged(android.view.accessibility.AccessibilityManager)>
android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener
<android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener: void onAccessibilityStateChanged(boolean)>
android.view.accessibility.AccessibilityManager$AudioDescriptionRequestedChangeListener
<android.view.accessibility.AccessibilityManager$AudioDescriptionRequestedChangeListener: void onAudioDescriptionRequestedChanged(boolean)>
android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener
<android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener: void onTouchExplorationStateChanged(boolean)>
android.view.accessibility.AccessibilityNodeInfo
<android.view.accessibility.AccessibilityNodeInfo: void <init>()>
<android.view.accessibility.AccessibilityNodeInfo: void <init>(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void <init>(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void <init>(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>
<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: boolean canOpenPopup()>
<android.view.accessibility.AccessibilityNodeInfo: int describeContents()>
<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByText(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByViewId(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo focusSearch(int)>
<android.view.accessibility.AccessibilityNodeInfo: java.util.List getActionList()>
<android.view.accessibility.AccessibilityNodeInfo: int getActions()>
<android.view.accessibility.AccessibilityNodeInfo: java.util.List getAvailableExtraData()>
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int,int)>
<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo getCollectionInfo()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo getCollectionItemInfo()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>
<android.view.accessibility.AccessibilityNodeInfo: int getDrawingOrder()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getError()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo getExtraRenderingInfo()>
<android.view.accessibility.AccessibilityNodeInfo: android.os.Bundle getExtras()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getHintText()>
<android.view.accessibility.AccessibilityNodeInfo: int getInputType()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabelFor()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabeledBy()>
<android.view.accessibility.AccessibilityNodeInfo: int getLiveRegion()>
<android.view.accessibility.AccessibilityNodeInfo: int getMaxTextLength()>
<android.view.accessibility.AccessibilityNodeInfo: int getMovementGranularities()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPaneTitle()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent(int)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$RangeInfo getRangeInfo()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getStateDescription()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>
<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionEnd()>
<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionStart()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getTooltipText()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalAfter()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalBefore()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getUniqueId()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityWindowInfo getWindow()>
<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isAccessibilityFocused()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isContentInvalid()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isContextClickable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isDismissable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isEditable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isHeading()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isImportantForAccessibility()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isMultiLine()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isScreenReaderFocusable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isShowingHintText()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isTextEntryKey()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isTextSelectable()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int)>
<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int,android.os.Bundle)>
<android.view.accessibility.AccessibilityNodeInfo: void recycle()>
<android.view.accessibility.AccessibilityNodeInfo: boolean refresh()>
<android.view.accessibility.AccessibilityNodeInfo: boolean refreshWithExtraData(java.lang.String,android.os.Bundle)>
<android.view.accessibility.AccessibilityNodeInfo: void removeAction(int)>
<android.view.accessibility.AccessibilityNodeInfo: boolean removeAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>
<android.view.accessibility.AccessibilityNodeInfo: boolean removeChild(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: boolean removeChild(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setAvailableExtraData(java.util.List)>
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void setCanOpenPopup(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setContentInvalid(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setContextClickable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setDismissable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setDrawingOrder(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setEditable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setError(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setHeading(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setHintText(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setImportantForAccessibility(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setInputType(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setLiveRegion(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setMaxTextLength(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setMovementGranularities(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setMultiLine(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setPaneTitle(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setRangeInfo(android.view.accessibility.AccessibilityNodeInfo$RangeInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void setScreenReaderFocusable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setShowingHintText(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setStateDescription(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setTextEntryKey(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setTextSelectable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void setTextSelection(int,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setTooltipText(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: void setTouchDelegateInfo(android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setUniqueId(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: void setViewIdResourceName(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_ACCESSIBILITY_FOCUS>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String ACTION_ARGUMENT_COLUMN_INT>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String ACTION_ARGUMENT_HTML_ELEMENT_STRING>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String ACTION_ARGUMENT_MOVE_WINDOW_X>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String ACTION_ARGUMENT_MOVE_WINDOW_Y>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INT>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String ACTION_ARGUMENT_PROGRESS_VALUE>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String ACTION_ARGUMENT_ROW_INT>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String ACTION_ARGUMENT_SELECTION_END_INT>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String ACTION_ARGUMENT_SELECTION_START_INT>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_CLEAR_ACCESSIBILITY_FOCUS>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_CLEAR_FOCUS>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_CLEAR_SELECTION>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_CLICK>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_COLLAPSE>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_COPY>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_CUT>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_DISMISS>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_EXPAND>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_FOCUS>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_LONG_CLICK>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_NEXT_AT_MOVEMENT_GRANULARITY>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_NEXT_HTML_ELEMENT>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_PASTE>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_PREVIOUS_HTML_ELEMENT>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_SCROLL_BACKWARD>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_SCROLL_FORWARD>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_SELECT>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_SET_SELECTION>
<android.view.accessibility.AccessibilityNodeInfo: int ACTION_SET_TEXT>
<android.view.accessibility.AccessibilityNodeInfo: android.os.Parcelable$Creator CREATOR>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String EXTRA_DATA_RENDERING_INFO_KEY>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH>
<android.view.accessibility.AccessibilityNodeInfo: int EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_MAX_LENGTH>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY>
<android.view.accessibility.AccessibilityNodeInfo: int FLAG_PREFETCH_ANCESTORS>
<android.view.accessibility.AccessibilityNodeInfo: int FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST>
<android.view.accessibility.AccessibilityNodeInfo: int FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST>
<android.view.accessibility.AccessibilityNodeInfo: int FLAG_PREFETCH_DESCENDANTS_HYBRID>
<android.view.accessibility.AccessibilityNodeInfo: int FLAG_PREFETCH_SIBLINGS>
<android.view.accessibility.AccessibilityNodeInfo: int FLAG_PREFETCH_UNINTERRUPTIBLE>
<android.view.accessibility.AccessibilityNodeInfo: int FOCUS_ACCESSIBILITY>
<android.view.accessibility.AccessibilityNodeInfo: int FOCUS_INPUT>
<android.view.accessibility.AccessibilityNodeInfo: int MAX_NUMBER_OF_PREFETCHED_NODES>
<android.view.accessibility.AccessibilityNodeInfo: int MOVEMENT_GRANULARITY_CHARACTER>
<android.view.accessibility.AccessibilityNodeInfo: int MOVEMENT_GRANULARITY_LINE>
<android.view.accessibility.AccessibilityNodeInfo: int MOVEMENT_GRANULARITY_PAGE>
<android.view.accessibility.AccessibilityNodeInfo: int MOVEMENT_GRANULARITY_PARAGRAPH>
<android.view.accessibility.AccessibilityNodeInfo: int MOVEMENT_GRANULARITY_WORD>
android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void <init>(int,java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int describeContents()>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int getId()>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: java.lang.CharSequence getLabel()>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void writeToParcel(android.os.Parcel,int)>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_ACCESSIBILITY_FOCUS>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CLEAR_ACCESSIBILITY_FOCUS>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CLEAR_FOCUS>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CLEAR_SELECTION>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CLICK>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_COLLAPSE>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CONTEXT_CLICK>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_COPY>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CUT>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_DISMISS>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_DRAG_CANCEL>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_DRAG_DROP>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_DRAG_START>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_EXPAND>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_FOCUS>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_HIDE_TOOLTIP>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_IME_ENTER>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_LONG_CLICK>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_MOVE_WINDOW>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_NEXT_AT_MOVEMENT_GRANULARITY>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_NEXT_HTML_ELEMENT>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_PAGE_DOWN>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_PAGE_LEFT>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_PAGE_RIGHT>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_PAGE_UP>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_PASTE>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_PRESS_AND_HOLD>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_PREVIOUS_HTML_ELEMENT>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_BACKWARD>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_DOWN>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_FORWARD>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_LEFT>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_RIGHT>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_TO_POSITION>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_UP>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SELECT>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SET_PROGRESS>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SET_SELECTION>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SET_TEXT>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SHOW_ON_SCREEN>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SHOW_TEXT_SUGGESTIONS>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SHOW_TOOLTIP>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.os.Parcelable$Creator CREATOR>
android.view.accessibility.AccessibilityNodeInfo$CollectionInfo
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: void <init>(int,int,boolean)>
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: void <init>(int,int,boolean,int)>
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getColumnCount()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getRowCount()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getSelectionMode()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: boolean isHierarchical()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo obtain(int,int,boolean)>
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo obtain(int,int,boolean,int)>
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int SELECTION_MODE_MULTIPLE>
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int SELECTION_MODE_NONE>
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int SELECTION_MODE_SINGLE>
android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: void <init>(int,int,int,int,boolean)>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: void <init>(int,int,int,int,boolean,boolean)>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getColumnIndex()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getColumnSpan()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: java.lang.String getColumnTitle()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getRowIndex()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getRowSpan()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: java.lang.String getRowTitle()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: boolean isHeading()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: boolean isSelected()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo obtain(int,int,int,int,boolean)>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo obtain(int,int,int,int,boolean,boolean)>
android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: void <init>()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo build()>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setColumnIndex(int)>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setColumnSpan(int)>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setColumnTitle(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setHeading(boolean)>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setRowIndex(int)>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setRowSpan(int)>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setRowTitle(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setSelected(boolean)>
android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo
<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: android.util.Size getLayoutSize()>
<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: float getTextSizeInPx()>
<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: int getTextSizeUnit()>
android.view.accessibility.AccessibilityNodeInfo$RangeInfo
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: void <init>(int,float,float,float)>
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getCurrent()>
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getMax()>
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getMin()>
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: int getType()>
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: android.view.accessibility.AccessibilityNodeInfo$RangeInfo obtain(int,float,float,float)>
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: int RANGE_TYPE_FLOAT>
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: int RANGE_TYPE_INT>
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: int RANGE_TYPE_PERCENT>
android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo
<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void <init>(java.util.Map)>
<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int describeContents()>
<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.graphics.Region getRegionAt(int)>
<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int getRegionCount()>
<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.view.accessibility.AccessibilityNodeInfo getTargetForRegion(android.graphics.Region)>
<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.os.Parcelable$Creator CREATOR>
android.view.accessibility.AccessibilityNodeProvider
<android.view.accessibility.AccessibilityNodeProvider: void <init>()>
<android.view.accessibility.AccessibilityNodeProvider: void addExtraDataToAccessibilityNodeInfo(int,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>
<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>
<android.view.accessibility.AccessibilityNodeProvider: java.util.List findAccessibilityNodeInfosByText(java.lang.String,int)>
<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>
<android.view.accessibility.AccessibilityNodeProvider: boolean performAction(int,int,android.os.Bundle)>
<android.view.accessibility.AccessibilityNodeProvider: int HOST_VIEW_ID>
android.view.accessibility.AccessibilityRecord
<android.view.accessibility.AccessibilityRecord: void <init>()>
<android.view.accessibility.AccessibilityRecord: void <init>(android.view.accessibility.AccessibilityRecord)>
<android.view.accessibility.AccessibilityRecord: int getAddedCount()>
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()>
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()>
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()>
<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()>
<android.view.accessibility.AccessibilityRecord: int getDisplayId()>
<android.view.accessibility.AccessibilityRecord: int getFromIndex()>
<android.view.accessibility.AccessibilityRecord: int getItemCount()>
<android.view.accessibility.AccessibilityRecord: int getMaxScrollX()>
<android.view.accessibility.AccessibilityRecord: int getMaxScrollY()>
<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()>
<android.view.accessibility.AccessibilityRecord: int getRemovedCount()>
<android.view.accessibility.AccessibilityRecord: int getScrollDeltaX()>
<android.view.accessibility.AccessibilityRecord: int getScrollDeltaY()>
<android.view.accessibility.AccessibilityRecord: int getScrollX()>
<android.view.accessibility.AccessibilityRecord: int getScrollY()>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource(int)>
<android.view.accessibility.AccessibilityRecord: java.util.List getText()>
<android.view.accessibility.AccessibilityRecord: int getToIndex()>
<android.view.accessibility.AccessibilityRecord: int getWindowId()>
<android.view.accessibility.AccessibilityRecord: boolean isChecked()>
<android.view.accessibility.AccessibilityRecord: boolean isEnabled()>
<android.view.accessibility.AccessibilityRecord: boolean isFullScreen()>
<android.view.accessibility.AccessibilityRecord: boolean isPassword()>
<android.view.accessibility.AccessibilityRecord: boolean isScrollable()>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord)>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain()>
<android.view.accessibility.AccessibilityRecord: void recycle()>
<android.view.accessibility.AccessibilityRecord: void setAddedCount(int)>
<android.view.accessibility.AccessibilityRecord: void setBeforeText(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)>
<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)>
<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)>
<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)>
<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)>
<android.view.accessibility.AccessibilityRecord: void setItemCount(int)>
<android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)>
<android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)>
<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)>
<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)>
<android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)>
<android.view.accessibility.AccessibilityRecord: void setScrollDeltaX(int)>
<android.view.accessibility.AccessibilityRecord: void setScrollDeltaY(int)>
<android.view.accessibility.AccessibilityRecord: void setScrollX(int)>
<android.view.accessibility.AccessibilityRecord: void setScrollY(int)>
<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)>
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)>
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View,int)>
<android.view.accessibility.AccessibilityRecord: void setToIndex(int)>
android.view.accessibility.AccessibilityRequestPreparer
<android.view.accessibility.AccessibilityRequestPreparer: void <init>(android.view.View,int)>
<android.view.accessibility.AccessibilityRequestPreparer: android.view.View getView()>
<android.view.accessibility.AccessibilityRequestPreparer: void onPrepareExtraData(int,java.lang.String,android.os.Bundle,android.os.Message)>
<android.view.accessibility.AccessibilityRequestPreparer: int REQUEST_TYPE_EXTRA_DATA>
android.view.accessibility.AccessibilityWindowInfo
<android.view.accessibility.AccessibilityWindowInfo: void <init>()>
<android.view.accessibility.AccessibilityWindowInfo: void <init>(android.view.accessibility.AccessibilityWindowInfo)>
<android.view.accessibility.AccessibilityWindowInfo: int describeContents()>
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getAnchor()>
<android.view.accessibility.AccessibilityWindowInfo: void getBoundsInScreen(android.graphics.Rect)>
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getChild(int)>
<android.view.accessibility.AccessibilityWindowInfo: int getChildCount()>
<android.view.accessibility.AccessibilityWindowInfo: int getDisplayId()>
<android.view.accessibility.AccessibilityWindowInfo: int getId()>
<android.view.accessibility.AccessibilityWindowInfo: int getLayer()>
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getParent()>
<android.view.accessibility.AccessibilityWindowInfo: void getRegionInScreen(android.graphics.Region)>
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot()>
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot(int)>
<android.view.accessibility.AccessibilityWindowInfo: java.lang.CharSequence getTitle()>
<android.view.accessibility.AccessibilityWindowInfo: int getType()>
<android.view.accessibility.AccessibilityWindowInfo: boolean isAccessibilityFocused()>
<android.view.accessibility.AccessibilityWindowInfo: boolean isActive()>
<android.view.accessibility.AccessibilityWindowInfo: boolean isFocused()>
<android.view.accessibility.AccessibilityWindowInfo: boolean isInPictureInPictureMode()>
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain()>
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain(android.view.accessibility.AccessibilityWindowInfo)>
<android.view.accessibility.AccessibilityWindowInfo: void recycle()>
<android.view.accessibility.AccessibilityWindowInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.accessibility.AccessibilityWindowInfo: android.os.Parcelable$Creator CREATOR>
<android.view.accessibility.AccessibilityWindowInfo: int TYPE_ACCESSIBILITY_OVERLAY>
<android.view.accessibility.AccessibilityWindowInfo: int TYPE_APPLICATION>
<android.view.accessibility.AccessibilityWindowInfo: int TYPE_INPUT_METHOD>
<android.view.accessibility.AccessibilityWindowInfo: int TYPE_MAGNIFICATION_OVERLAY>
<android.view.accessibility.AccessibilityWindowInfo: int TYPE_SPLIT_SCREEN_DIVIDER>
<android.view.accessibility.AccessibilityWindowInfo: int TYPE_SYSTEM>
android.view.accessibility.CaptioningManager
<android.view.accessibility.CaptioningManager: void addCaptioningChangeListener(android.view.accessibility.CaptioningManager$CaptioningChangeListener)>
<android.view.accessibility.CaptioningManager: float getFontScale()>
<android.view.accessibility.CaptioningManager: java.util.Locale getLocale()>
<android.view.accessibility.CaptioningManager: android.view.accessibility.CaptioningManager$CaptionStyle getUserStyle()>
<android.view.accessibility.CaptioningManager: boolean isCallCaptioningEnabled()>
<android.view.accessibility.CaptioningManager: boolean isEnabled()>
<android.view.accessibility.CaptioningManager: boolean isSystemAudioCaptioningEnabled()>
<android.view.accessibility.CaptioningManager: boolean isSystemAudioCaptioningUiEnabled()>
<android.view.accessibility.CaptioningManager: void removeCaptioningChangeListener(android.view.accessibility.CaptioningManager$CaptioningChangeListener)>
android.view.accessibility.CaptioningManager$CaptionStyle
<android.view.accessibility.CaptioningManager$CaptionStyle: android.graphics.Typeface getTypeface()>
<android.view.accessibility.CaptioningManager$CaptionStyle: boolean hasBackgroundColor()>
<android.view.accessibility.CaptioningManager$CaptionStyle: boolean hasEdgeColor()>
<android.view.accessibility.CaptioningManager$CaptionStyle: boolean hasEdgeType()>
<android.view.accessibility.CaptioningManager$CaptionStyle: boolean hasForegroundColor()>
<android.view.accessibility.CaptioningManager$CaptionStyle: boolean hasWindowColor()>
<android.view.accessibility.CaptioningManager$CaptionStyle: int EDGE_TYPE_DEPRESSED>
<android.view.accessibility.CaptioningManager$CaptionStyle: int EDGE_TYPE_DROP_SHADOW>
<android.view.accessibility.CaptioningManager$CaptionStyle: int EDGE_TYPE_NONE>
<android.view.accessibility.CaptioningManager$CaptionStyle: int EDGE_TYPE_OUTLINE>
<android.view.accessibility.CaptioningManager$CaptionStyle: int EDGE_TYPE_RAISED>
<android.view.accessibility.CaptioningManager$CaptionStyle: int EDGE_TYPE_UNSPECIFIED>
<android.view.accessibility.CaptioningManager$CaptionStyle: int backgroundColor>
<android.view.accessibility.CaptioningManager$CaptionStyle: int edgeColor>
<android.view.accessibility.CaptioningManager$CaptionStyle: int edgeType>
<android.view.accessibility.CaptioningManager$CaptionStyle: int foregroundColor>
<android.view.accessibility.CaptioningManager$CaptionStyle: int windowColor>
android.view.accessibility.CaptioningManager$CaptioningChangeListener
<android.view.accessibility.CaptioningManager$CaptioningChangeListener: void <init>()>
<android.view.accessibility.CaptioningManager$CaptioningChangeListener: void onEnabledChanged(boolean)>
<android.view.accessibility.CaptioningManager$CaptioningChangeListener: void onFontScaleChanged(float)>
<android.view.accessibility.CaptioningManager$CaptioningChangeListener: void onLocaleChanged(java.util.Locale)>
<android.view.accessibility.CaptioningManager$CaptioningChangeListener: void onSystemAudioCaptioningChanged(boolean)>
<android.view.accessibility.CaptioningManager$CaptioningChangeListener: void onSystemAudioCaptioningUiChanged(boolean)>
<android.view.accessibility.CaptioningManager$CaptioningChangeListener: void onUserStyleChanged(android.view.accessibility.CaptioningManager$CaptionStyle)>
android.view.animation.AccelerateDecelerateInterpolator
<android.view.animation.AccelerateDecelerateInterpolator: void <init>()>
<android.view.animation.AccelerateDecelerateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AccelerateDecelerateInterpolator: float getInterpolation(float)>
android.view.animation.AccelerateInterpolator
<android.view.animation.AccelerateInterpolator: void <init>()>
<android.view.animation.AccelerateInterpolator: void <init>(float)>
<android.view.animation.AccelerateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AccelerateInterpolator: float getInterpolation(float)>
android.view.animation.AlphaAnimation
<android.view.animation.AlphaAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AlphaAnimation: void <init>(float,float)>
android.view.animation.Animation
<android.view.animation.Animation: void <init>()>
<android.view.animation.Animation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.Animation: void applyTransformation(float,android.view.animation.Transformation)>
<android.view.animation.Animation: void cancel()>
<android.view.animation.Animation: android.view.animation.Animation clone()>
<android.view.animation.Animation: long computeDurationHint()>
<android.view.animation.Animation: void ensureInterpolator()>
<android.view.animation.Animation: int getBackdropColor()>
<android.view.animation.Animation: int getBackgroundColor()>
<android.view.animation.Animation: boolean getDetachWallpaper()>
<android.view.animation.Animation: long getDuration()>
<android.view.animation.Animation: boolean getFillAfter()>
<android.view.animation.Animation: boolean getFillBefore()>
<android.view.animation.Animation: android.view.animation.Interpolator getInterpolator()>
<android.view.animation.Animation: int getRepeatCount()>
<android.view.animation.Animation: int getRepeatMode()>
<android.view.animation.Animation: float getScaleFactor()>
<android.view.animation.Animation: boolean getShowBackdrop()>
<android.view.animation.Animation: long getStartOffset()>
<android.view.animation.Animation: long getStartTime()>
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)>
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)>
<android.view.animation.Animation: int getZAdjustment()>
<android.view.animation.Animation: boolean hasEnded()>
<android.view.animation.Animation: boolean hasStarted()>
<android.view.animation.Animation: void initialize(int,int,int,int)>
<android.view.animation.Animation: boolean isFillEnabled()>
<android.view.animation.Animation: boolean isInitialized()>
<android.view.animation.Animation: void reset()>
<android.view.animation.Animation: float resolveSize(int,float,int,int)>
<android.view.animation.Animation: void restrictDuration(long)>
<android.view.animation.Animation: void scaleCurrentDuration(float)>
<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)>
<android.view.animation.Animation: void setBackdropColor(int)>
<android.view.animation.Animation: void setBackgroundColor(int)>
<android.view.animation.Animation: void setDetachWallpaper(boolean)>
<android.view.animation.Animation: void setDuration(long)>
<android.view.animation.Animation: void setFillAfter(boolean)>
<android.view.animation.Animation: void setFillBefore(boolean)>
<android.view.animation.Animation: void setFillEnabled(boolean)>
<android.view.animation.Animation: void setInterpolator(android.content.Context,int)>
<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>
<android.view.animation.Animation: void setRepeatCount(int)>
<android.view.animation.Animation: void setRepeatMode(int)>
<android.view.animation.Animation: void setShowBackdrop(boolean)>
<android.view.animation.Animation: void setStartOffset(long)>
<android.view.animation.Animation: void setStartTime(long)>
<android.view.animation.Animation: void setZAdjustment(int)>
<android.view.animation.Animation: void start()>
<android.view.animation.Animation: void startNow()>
<android.view.animation.Animation: boolean willChangeBounds()>
<android.view.animation.Animation: boolean willChangeTransformationMatrix()>
<android.view.animation.Animation: int ABSOLUTE>
<android.view.animation.Animation: int INFINITE>
<android.view.animation.Animation: int RELATIVE_TO_PARENT>
<android.view.animation.Animation: int RELATIVE_TO_SELF>
<android.view.animation.Animation: int RESTART>
<android.view.animation.Animation: int REVERSE>
<android.view.animation.Animation: int START_ON_FIRST_FRAME>
<android.view.animation.Animation: int ZORDER_BOTTOM>
<android.view.animation.Animation: int ZORDER_NORMAL>
<android.view.animation.Animation: int ZORDER_TOP>
android.view.animation.Animation$AnimationListener
<android.view.animation.Animation$AnimationListener: void onAnimationEnd(android.view.animation.Animation)>
<android.view.animation.Animation$AnimationListener: void onAnimationRepeat(android.view.animation.Animation)>
<android.view.animation.Animation$AnimationListener: void onAnimationStart(android.view.animation.Animation)>
android.view.animation.Animation$Description
<android.view.animation.Animation$Description: void <init>()>
<android.view.animation.Animation$Description: int type>
<android.view.animation.Animation$Description: float value>
android.view.animation.AnimationSet
<android.view.animation.AnimationSet: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AnimationSet: void <init>(boolean)>
<android.view.animation.AnimationSet: void addAnimation(android.view.animation.Animation)>
<android.view.animation.AnimationSet: android.view.animation.AnimationSet clone()>
<android.view.animation.AnimationSet: java.util.List getAnimations()>
android.view.animation.AnimationUtils
<android.view.animation.AnimationUtils: void <init>()>
<android.view.animation.AnimationUtils: long currentAnimationTimeMillis()>
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>
<android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>
<android.view.animation.AnimationUtils: android.view.animation.LayoutAnimationController loadLayoutAnimation(android.content.Context,int)>
<android.view.animation.AnimationUtils: android.view.animation.Animation makeInAnimation(android.content.Context,boolean)>
<android.view.animation.AnimationUtils: android.view.animation.Animation makeInChildBottomAnimation(android.content.Context)>
<android.view.animation.AnimationUtils: android.view.animation.Animation makeOutAnimation(android.content.Context,boolean)>
android.view.animation.AnticipateInterpolator
<android.view.animation.AnticipateInterpolator: void <init>()>
<android.view.animation.AnticipateInterpolator: void <init>(float)>
<android.view.animation.AnticipateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AnticipateInterpolator: float getInterpolation(float)>
android.view.animation.AnticipateOvershootInterpolator
<android.view.animation.AnticipateOvershootInterpolator: void <init>()>
<android.view.animation.AnticipateOvershootInterpolator: void <init>(float)>
<android.view.animation.AnticipateOvershootInterpolator: void <init>(float,float)>
<android.view.animation.AnticipateOvershootInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AnticipateOvershootInterpolator: float getInterpolation(float)>
android.view.animation.BaseInterpolator
<android.view.animation.BaseInterpolator: void <init>()>
android.view.animation.BounceInterpolator
<android.view.animation.BounceInterpolator: void <init>()>
<android.view.animation.BounceInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.BounceInterpolator: float getInterpolation(float)>
android.view.animation.CycleInterpolator
<android.view.animation.CycleInterpolator: void <init>(float)>
<android.view.animation.CycleInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.CycleInterpolator: float getInterpolation(float)>
android.view.animation.DecelerateInterpolator
<android.view.animation.DecelerateInterpolator: void <init>()>
<android.view.animation.DecelerateInterpolator: void <init>(float)>
<android.view.animation.DecelerateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.DecelerateInterpolator: float getInterpolation(float)>
android.view.animation.GridLayoutAnimationController
<android.view.animation.GridLayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.GridLayoutAnimationController: void <init>(android.view.animation.Animation)>
<android.view.animation.GridLayoutAnimationController: void <init>(android.view.animation.Animation,float,float)>
<android.view.animation.GridLayoutAnimationController: float getColumnDelay()>
<android.view.animation.GridLayoutAnimationController: int getDirection()>
<android.view.animation.GridLayoutAnimationController: int getDirectionPriority()>
<android.view.animation.GridLayoutAnimationController: float getRowDelay()>
<android.view.animation.GridLayoutAnimationController: void setColumnDelay(float)>
<android.view.animation.GridLayoutAnimationController: void setDirection(int)>
<android.view.animation.GridLayoutAnimationController: void setDirectionPriority(int)>
<android.view.animation.GridLayoutAnimationController: void setRowDelay(float)>
<android.view.animation.GridLayoutAnimationController: int DIRECTION_BOTTOM_TO_TOP>
<android.view.animation.GridLayoutAnimationController: int DIRECTION_HORIZONTAL_MASK>
<android.view.animation.GridLayoutAnimationController: int DIRECTION_LEFT_TO_RIGHT>
<android.view.animation.GridLayoutAnimationController: int DIRECTION_RIGHT_TO_LEFT>
<android.view.animation.GridLayoutAnimationController: int DIRECTION_TOP_TO_BOTTOM>
<android.view.animation.GridLayoutAnimationController: int DIRECTION_VERTICAL_MASK>
<android.view.animation.GridLayoutAnimationController: int PRIORITY_COLUMN>
<android.view.animation.GridLayoutAnimationController: int PRIORITY_NONE>
<android.view.animation.GridLayoutAnimationController: int PRIORITY_ROW>
android.view.animation.GridLayoutAnimationController$AnimationParameters
<android.view.animation.GridLayoutAnimationController$AnimationParameters: void <init>()>
<android.view.animation.GridLayoutAnimationController$AnimationParameters: int column>
<android.view.animation.GridLayoutAnimationController$AnimationParameters: int columnsCount>
<android.view.animation.GridLayoutAnimationController$AnimationParameters: int row>
<android.view.animation.GridLayoutAnimationController$AnimationParameters: int rowsCount>
android.view.animation.Interpolator
android.view.animation.LayoutAnimationController
<android.view.animation.LayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation)>
<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation,float)>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)>
<android.view.animation.LayoutAnimationController: float getDelay()>
<android.view.animation.LayoutAnimationController: long getDelayForView(android.view.View)>
<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()>
<android.view.animation.LayoutAnimationController: int getOrder()>
<android.view.animation.LayoutAnimationController: int getTransformedIndex(android.view.animation.LayoutAnimationController$AnimationParameters)>
<android.view.animation.LayoutAnimationController: boolean isDone()>
<android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,int)>
<android.view.animation.LayoutAnimationController: void setAnimation(android.view.animation.Animation)>
<android.view.animation.LayoutAnimationController: void setDelay(float)>
<android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,int)>
<android.view.animation.LayoutAnimationController: void setInterpolator(android.view.animation.Interpolator)>
<android.view.animation.LayoutAnimationController: void setOrder(int)>
<android.view.animation.LayoutAnimationController: void start()>
<android.view.animation.LayoutAnimationController: boolean willOverlap()>
<android.view.animation.LayoutAnimationController: int ORDER_NORMAL>
<android.view.animation.LayoutAnimationController: int ORDER_RANDOM>
<android.view.animation.LayoutAnimationController: int ORDER_REVERSE>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation mAnimation>
<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator mInterpolator>
<android.view.animation.LayoutAnimationController: java.util.Random mRandomizer>
android.view.animation.LayoutAnimationController$AnimationParameters
<android.view.animation.LayoutAnimationController$AnimationParameters: void <init>()>
<android.view.animation.LayoutAnimationController$AnimationParameters: int count>
<android.view.animation.LayoutAnimationController$AnimationParameters: int index>
android.view.animation.LinearInterpolator
<android.view.animation.LinearInterpolator: void <init>()>
<android.view.animation.LinearInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.LinearInterpolator: float getInterpolation(float)>
android.view.animation.OvershootInterpolator
<android.view.animation.OvershootInterpolator: void <init>()>
<android.view.animation.OvershootInterpolator: void <init>(float)>
<android.view.animation.OvershootInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.OvershootInterpolator: float getInterpolation(float)>
android.view.animation.PathInterpolator
<android.view.animation.PathInterpolator: void <init>(android.graphics.Path)>
<android.view.animation.PathInterpolator: void <init>(float,float)>
<android.view.animation.PathInterpolator: void <init>(float,float,float,float)>
<android.view.animation.PathInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.PathInterpolator: float getInterpolation(float)>
android.view.animation.RotateAnimation
<android.view.animation.RotateAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.RotateAnimation: void <init>(float,float)>
<android.view.animation.RotateAnimation: void <init>(float,float,float,float)>
<android.view.animation.RotateAnimation: void <init>(float,float,int,float,int,float)>
android.view.animation.ScaleAnimation
<android.view.animation.ScaleAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.ScaleAnimation: void <init>(float,float,float,float)>
<android.view.animation.ScaleAnimation: void <init>(float,float,float,float,float,float)>
<android.view.animation.ScaleAnimation: void <init>(float,float,float,float,int,float,int,float)>
android.view.animation.Transformation
<android.view.animation.Transformation: void <init>()>
<android.view.animation.Transformation: void clear()>
<android.view.animation.Transformation: void compose(android.view.animation.Transformation)>
<android.view.animation.Transformation: float getAlpha()>
<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>
<android.view.animation.Transformation: int getTransformationType()>
<android.view.animation.Transformation: void set(android.view.animation.Transformation)>
<android.view.animation.Transformation: void setAlpha(float)>
<android.view.animation.Transformation: void setTransformationType(int)>
<android.view.animation.Transformation: java.lang.String toShortString()>
<android.view.animation.Transformation: int TYPE_ALPHA>
<android.view.animation.Transformation: int TYPE_BOTH>
<android.view.animation.Transformation: int TYPE_IDENTITY>
<android.view.animation.Transformation: int TYPE_MATRIX>
<android.view.animation.Transformation: float mAlpha>
<android.view.animation.Transformation: android.graphics.Matrix mMatrix>
<android.view.animation.Transformation: int mTransformationType>
android.view.animation.TranslateAnimation
<android.view.animation.TranslateAnimation: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.TranslateAnimation: void <init>(float,float,float,float)>
<android.view.animation.TranslateAnimation: void <init>(int,float,int,float,int,float,int,float)>
android.view.autofill.AutofillId
<android.view.autofill.AutofillId: int describeContents()>
<android.view.autofill.AutofillId: void writeToParcel(android.os.Parcel,int)>
<android.view.autofill.AutofillId: android.os.Parcelable$Creator CREATOR>
android.view.autofill.AutofillManager
<android.view.autofill.AutofillManager: void cancel()>
<android.view.autofill.AutofillManager: void commit()>
<android.view.autofill.AutofillManager: void disableAutofillServices()>
<android.view.autofill.AutofillManager: android.content.ComponentName getAutofillServiceComponentName()>
<android.view.autofill.AutofillManager: java.util.List getAvailableFieldClassificationAlgorithms()>
<android.view.autofill.AutofillManager: java.lang.String getDefaultFieldClassificationAlgorithm()>
<android.view.autofill.AutofillManager: android.view.autofill.AutofillId getNextAutofillId()>
<android.view.autofill.AutofillManager: android.service.autofill.UserData getUserData()>
<android.view.autofill.AutofillManager: java.lang.String getUserDataId()>
<android.view.autofill.AutofillManager: boolean hasEnabledAutofillServices()>
<android.view.autofill.AutofillManager: boolean isAutofillSupported()>
<android.view.autofill.AutofillManager: boolean isEnabled()>
<android.view.autofill.AutofillManager: boolean isFieldClassificationEnabled()>
<android.view.autofill.AutofillManager: void notifyValueChanged(android.view.View)>
<android.view.autofill.AutofillManager: void notifyValueChanged(android.view.View,int,android.view.autofill.AutofillValue)>
<android.view.autofill.AutofillManager: void notifyViewClicked(android.view.View)>
<android.view.autofill.AutofillManager: void notifyViewClicked(android.view.View,int)>
<android.view.autofill.AutofillManager: void notifyViewEntered(android.view.View)>
<android.view.autofill.AutofillManager: void notifyViewEntered(android.view.View,int,android.graphics.Rect)>
<android.view.autofill.AutofillManager: void notifyViewExited(android.view.View)>
<android.view.autofill.AutofillManager: void notifyViewExited(android.view.View,int)>
<android.view.autofill.AutofillManager: void notifyViewVisibilityChanged(android.view.View,boolean)>
<android.view.autofill.AutofillManager: void notifyViewVisibilityChanged(android.view.View,int,boolean)>
<android.view.autofill.AutofillManager: void registerCallback(android.view.autofill.AutofillManager$AutofillCallback)>
<android.view.autofill.AutofillManager: void requestAutofill(android.view.View)>
<android.view.autofill.AutofillManager: void requestAutofill(android.view.View,int,android.graphics.Rect)>
<android.view.autofill.AutofillManager: void setUserData(android.service.autofill.UserData)>
<android.view.autofill.AutofillManager: boolean showAutofillDialog(android.view.View)>
<android.view.autofill.AutofillManager: boolean showAutofillDialog(android.view.View,int)>
<android.view.autofill.AutofillManager: void unregisterCallback(android.view.autofill.AutofillManager$AutofillCallback)>
<android.view.autofill.AutofillManager: java.lang.String EXTRA_ASSIST_STRUCTURE>
<android.view.autofill.AutofillManager: java.lang.String EXTRA_AUTHENTICATION_RESULT>
<android.view.autofill.AutofillManager: java.lang.String EXTRA_AUTHENTICATION_RESULT_EPHEMERAL_DATASET>
<android.view.autofill.AutofillManager: java.lang.String EXTRA_CLIENT_STATE>
<android.view.autofill.AutofillManager: java.lang.String EXTRA_INLINE_SUGGESTIONS_REQUEST>
android.view.autofill.AutofillManager$AutofillCallback
<android.view.autofill.AutofillManager$AutofillCallback: void <init>()>
<android.view.autofill.AutofillManager$AutofillCallback: void onAutofillEvent(android.view.View,int)>
<android.view.autofill.AutofillManager$AutofillCallback: void onAutofillEvent(android.view.View,int,int)>
<android.view.autofill.AutofillManager$AutofillCallback: int EVENT_INPUT_HIDDEN>
<android.view.autofill.AutofillManager$AutofillCallback: int EVENT_INPUT_SHOWN>
<android.view.autofill.AutofillManager$AutofillCallback: int EVENT_INPUT_UNAVAILABLE>
android.view.autofill.AutofillValue
<android.view.autofill.AutofillValue: int describeContents()>
<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forDate(long)>
<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forList(int)>
<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forText(java.lang.CharSequence)>
<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forToggle(boolean)>
<android.view.autofill.AutofillValue: long getDateValue()>
<android.view.autofill.AutofillValue: int getListValue()>
<android.view.autofill.AutofillValue: java.lang.CharSequence getTextValue()>
<android.view.autofill.AutofillValue: boolean getToggleValue()>
<android.view.autofill.AutofillValue: boolean isDate()>
<android.view.autofill.AutofillValue: boolean isList()>
<android.view.autofill.AutofillValue: boolean isText()>
<android.view.autofill.AutofillValue: boolean isToggle()>
<android.view.autofill.AutofillValue: void writeToParcel(android.os.Parcel,int)>
<android.view.autofill.AutofillValue: android.os.Parcelable$Creator CREATOR>
android.view.contentcapture.ContentCaptureCondition
<android.view.contentcapture.ContentCaptureCondition: void <init>(android.content.LocusId,int)>
<android.view.contentcapture.ContentCaptureCondition: int describeContents()>
<android.view.contentcapture.ContentCaptureCondition: int getFlags()>
<android.view.contentcapture.ContentCaptureCondition: android.content.LocusId getLocusId()>
<android.view.contentcapture.ContentCaptureCondition: void writeToParcel(android.os.Parcel,int)>
<android.view.contentcapture.ContentCaptureCondition: android.os.Parcelable$Creator CREATOR>
<android.view.contentcapture.ContentCaptureCondition: int FLAG_IS_REGEX>
android.view.contentcapture.ContentCaptureContext
<android.view.contentcapture.ContentCaptureContext: int describeContents()>
<android.view.contentcapture.ContentCaptureContext: android.view.contentcapture.ContentCaptureContext forLocusId(java.lang.String)>
<android.view.contentcapture.ContentCaptureContext: android.os.Bundle getExtras()>
<android.view.contentcapture.ContentCaptureContext: android.content.LocusId getLocusId()>
<android.view.contentcapture.ContentCaptureContext: void writeToParcel(android.os.Parcel,int)>
<android.view.contentcapture.ContentCaptureContext: android.os.Parcelable$Creator CREATOR>
android.view.contentcapture.ContentCaptureContext$Builder
<android.view.contentcapture.ContentCaptureContext$Builder: void <init>(android.content.LocusId)>
<android.view.contentcapture.ContentCaptureContext$Builder: android.view.contentcapture.ContentCaptureContext build()>
<android.view.contentcapture.ContentCaptureContext$Builder: android.view.contentcapture.ContentCaptureContext$Builder setExtras(android.os.Bundle)>
android.view.contentcapture.ContentCaptureManager
<android.view.contentcapture.ContentCaptureManager: java.util.Set getContentCaptureConditions()>
<android.view.contentcapture.ContentCaptureManager: android.content.ComponentName getServiceComponentName()>
<android.view.contentcapture.ContentCaptureManager: boolean isContentCaptureEnabled()>
<android.view.contentcapture.ContentCaptureManager: void removeData(android.view.contentcapture.DataRemovalRequest)>
<android.view.contentcapture.ContentCaptureManager: void setContentCaptureEnabled(boolean)>
<android.view.contentcapture.ContentCaptureManager: void shareData(android.view.contentcapture.DataShareRequest,java.util.concurrent.Executor,android.view.contentcapture.DataShareWriteAdapter)>
<android.view.contentcapture.ContentCaptureManager: int DATA_SHARE_ERROR_CONCURRENT_REQUEST>
<android.view.contentcapture.ContentCaptureManager: int DATA_SHARE_ERROR_TIMEOUT_INTERRUPTED>
<android.view.contentcapture.ContentCaptureManager: int DATA_SHARE_ERROR_UNKNOWN>
android.view.contentcapture.ContentCaptureSession
<android.view.contentcapture.ContentCaptureSession: void close()>
<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureSession createContentCaptureSession(android.view.contentcapture.ContentCaptureContext)>
<android.view.contentcapture.ContentCaptureSession: void destroy()>
<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureContext getContentCaptureContext()>
<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureSessionId getContentCaptureSessionId()>
<android.view.contentcapture.ContentCaptureSession: android.view.autofill.AutofillId newAutofillId(android.view.autofill.AutofillId,long)>
<android.view.contentcapture.ContentCaptureSession: android.view.ViewStructure newViewStructure(android.view.View)>
<android.view.contentcapture.ContentCaptureSession: android.view.ViewStructure newVirtualViewStructure(android.view.autofill.AutofillId,long)>
<android.view.contentcapture.ContentCaptureSession: void notifySessionPaused()>
<android.view.contentcapture.ContentCaptureSession: void notifySessionResumed()>
<android.view.contentcapture.ContentCaptureSession: void notifyViewAppeared(android.view.ViewStructure)>
<android.view.contentcapture.ContentCaptureSession: void notifyViewDisappeared(android.view.autofill.AutofillId)>
<android.view.contentcapture.ContentCaptureSession: void notifyViewInsetsChanged(android.graphics.Insets)>
<android.view.contentcapture.ContentCaptureSession: void notifyViewTextChanged(android.view.autofill.AutofillId,java.lang.CharSequence)>
<android.view.contentcapture.ContentCaptureSession: void notifyViewsDisappeared(android.view.autofill.AutofillId,long[])>
<android.view.contentcapture.ContentCaptureSession: void setContentCaptureContext(android.view.contentcapture.ContentCaptureContext)>
android.view.contentcapture.ContentCaptureSessionId
<android.view.contentcapture.ContentCaptureSessionId: int describeContents()>
<android.view.contentcapture.ContentCaptureSessionId: void writeToParcel(android.os.Parcel,int)>
<android.view.contentcapture.ContentCaptureSessionId: android.os.Parcelable$Creator CREATOR>
android.view.contentcapture.DataRemovalRequest
<android.view.contentcapture.DataRemovalRequest: int describeContents()>
<android.view.contentcapture.DataRemovalRequest: java.util.List getLocusIdRequests()>
<android.view.contentcapture.DataRemovalRequest: java.lang.String getPackageName()>
<android.view.contentcapture.DataRemovalRequest: boolean isForEverything()>
<android.view.contentcapture.DataRemovalRequest: void writeToParcel(android.os.Parcel,int)>
<android.view.contentcapture.DataRemovalRequest: android.os.Parcelable$Creator CREATOR>
<android.view.contentcapture.DataRemovalRequest: int FLAG_IS_PREFIX>
android.view.contentcapture.DataRemovalRequest$Builder
<android.view.contentcapture.DataRemovalRequest$Builder: void <init>()>
<android.view.contentcapture.DataRemovalRequest$Builder: android.view.contentcapture.DataRemovalRequest$Builder addLocusId(android.content.LocusId,int)>
<android.view.contentcapture.DataRemovalRequest$Builder: android.view.contentcapture.DataRemovalRequest build()>
<android.view.contentcapture.DataRemovalRequest$Builder: android.view.contentcapture.DataRemovalRequest$Builder forEverything()>
android.view.contentcapture.DataRemovalRequest$LocusIdRequest
<android.view.contentcapture.DataRemovalRequest$LocusIdRequest: int getFlags()>
<android.view.contentcapture.DataRemovalRequest$LocusIdRequest: android.content.LocusId getLocusId()>
android.view.contentcapture.DataShareRequest
<android.view.contentcapture.DataShareRequest: void <init>(android.content.LocusId,java.lang.String)>
<android.view.contentcapture.DataShareRequest: int describeContents()>
<android.view.contentcapture.DataShareRequest: android.content.LocusId getLocusId()>
<android.view.contentcapture.DataShareRequest: java.lang.String getMimeType()>
<android.view.contentcapture.DataShareRequest: java.lang.String getPackageName()>
<android.view.contentcapture.DataShareRequest: void writeToParcel(android.os.Parcel,int)>
<android.view.contentcapture.DataShareRequest: android.os.Parcelable$Creator CREATOR>
android.view.contentcapture.DataShareWriteAdapter
<android.view.contentcapture.DataShareWriteAdapter: void onError(int)>
<android.view.contentcapture.DataShareWriteAdapter: void onRejected()>
<android.view.contentcapture.DataShareWriteAdapter: void onWrite(android.os.ParcelFileDescriptor)>
android.view.displayhash.DisplayHash
<android.view.displayhash.DisplayHash: int describeContents()>
<android.view.displayhash.DisplayHash: void writeToParcel(android.os.Parcel,int)>
<android.view.displayhash.DisplayHash: android.os.Parcelable$Creator CREATOR>
android.view.displayhash.DisplayHashManager
<android.view.displayhash.DisplayHashManager: java.util.Set getSupportedHashAlgorithms()>
<android.view.displayhash.DisplayHashManager: android.view.displayhash.VerifiedDisplayHash verifyDisplayHash(android.view.displayhash.DisplayHash)>
android.view.displayhash.DisplayHashResultCallback
<android.view.displayhash.DisplayHashResultCallback: void onDisplayHashError(int)>
<android.view.displayhash.DisplayHashResultCallback: void onDisplayHashResult(android.view.displayhash.DisplayHash)>
<android.view.displayhash.DisplayHashResultCallback: int DISPLAY_HASH_ERROR_INVALID_BOUNDS>
<android.view.displayhash.DisplayHashResultCallback: int DISPLAY_HASH_ERROR_INVALID_HASH_ALGORITHM>
<android.view.displayhash.DisplayHashResultCallback: int DISPLAY_HASH_ERROR_MISSING_WINDOW>
<android.view.displayhash.DisplayHashResultCallback: int DISPLAY_HASH_ERROR_NOT_VISIBLE_ON_SCREEN>
<android.view.displayhash.DisplayHashResultCallback: int DISPLAY_HASH_ERROR_TOO_MANY_REQUESTS>
<android.view.displayhash.DisplayHashResultCallback: int DISPLAY_HASH_ERROR_UNKNOWN>
android.view.displayhash.VerifiedDisplayHash
<android.view.displayhash.VerifiedDisplayHash: void <init>(long,android.graphics.Rect,java.lang.String,byte[])>
<android.view.displayhash.VerifiedDisplayHash: int describeContents()>
<android.view.displayhash.VerifiedDisplayHash: android.graphics.Rect getBoundsInWindow()>
<android.view.displayhash.VerifiedDisplayHash: java.lang.String getHashAlgorithm()>
<android.view.displayhash.VerifiedDisplayHash: byte[] getImageHash()>
<android.view.displayhash.VerifiedDisplayHash: long getTimeMillis()>
<android.view.displayhash.VerifiedDisplayHash: void writeToParcel(android.os.Parcel,int)>
<android.view.displayhash.VerifiedDisplayHash: android.os.Parcelable$Creator CREATOR>
android.view.inputmethod.BaseInputConnection
<android.view.inputmethod.BaseInputConnection: void <init>(android.view.View,boolean)>
<android.view.inputmethod.BaseInputConnection: boolean beginBatchEdit()>
<android.view.inputmethod.BaseInputConnection: boolean clearMetaKeyStates(int)>
<android.view.inputmethod.BaseInputConnection: void closeConnection()>
<android.view.inputmethod.BaseInputConnection: boolean commitCompletion(android.view.inputmethod.CompletionInfo)>
<android.view.inputmethod.BaseInputConnection: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>
<android.view.inputmethod.BaseInputConnection: boolean commitCorrection(android.view.inputmethod.CorrectionInfo)>
<android.view.inputmethod.BaseInputConnection: boolean commitText(java.lang.CharSequence,int)>
<android.view.inputmethod.BaseInputConnection: boolean deleteSurroundingText(int,int)>
<android.view.inputmethod.BaseInputConnection: boolean deleteSurroundingTextInCodePoints(int,int)>
<android.view.inputmethod.BaseInputConnection: boolean endBatchEdit()>
<android.view.inputmethod.BaseInputConnection: boolean finishComposingText()>
<android.view.inputmethod.BaseInputConnection: int getComposingSpanEnd(android.text.Spannable)>
<android.view.inputmethod.BaseInputConnection: int getComposingSpanStart(android.text.Spannable)>
<android.view.inputmethod.BaseInputConnection: int getCursorCapsMode(int)>
<android.view.inputmethod.BaseInputConnection: android.text.Editable getEditable()>
<android.view.inputmethod.BaseInputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>
<android.view.inputmethod.BaseInputConnection: android.os.Handler getHandler()>
<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getSelectedText(int)>
<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getTextAfterCursor(int,int)>
<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)>
<android.view.inputmethod.BaseInputConnection: boolean performContextMenuAction(int)>
<android.view.inputmethod.BaseInputConnection: boolean performEditorAction(int)>
<android.view.inputmethod.BaseInputConnection: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>
<android.view.inputmethod.BaseInputConnection: void removeComposingSpans(android.text.Spannable)>
<android.view.inputmethod.BaseInputConnection: boolean reportFullscreenMode(boolean)>
<android.view.inputmethod.BaseInputConnection: boolean requestCursorUpdates(int)>
<android.view.inputmethod.BaseInputConnection: boolean sendKeyEvent(android.view.KeyEvent)>
<android.view.inputmethod.BaseInputConnection: boolean setComposingRegion(int,int)>
<android.view.inputmethod.BaseInputConnection: void setComposingSpans(android.text.Spannable)>
<android.view.inputmethod.BaseInputConnection: boolean setComposingText(java.lang.CharSequence,int)>
<android.view.inputmethod.BaseInputConnection: boolean setSelection(int,int)>
android.view.inputmethod.CompletionInfo
<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence)>
<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence,java.lang.CharSequence)>
<android.view.inputmethod.CompletionInfo: int describeContents()>
<android.view.inputmethod.CompletionInfo: long getId()>
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getLabel()>
<android.view.inputmethod.CompletionInfo: int getPosition()>
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()>
<android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.CompletionInfo: android.os.Parcelable$Creator CREATOR>
android.view.inputmethod.CorrectionInfo
<android.view.inputmethod.CorrectionInfo: void <init>(int,java.lang.CharSequence,java.lang.CharSequence)>
<android.view.inputmethod.CorrectionInfo: int describeContents()>
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getNewText()>
<android.view.inputmethod.CorrectionInfo: int getOffset()>
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()>
<android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.CorrectionInfo: android.os.Parcelable$Creator CREATOR>
android.view.inputmethod.CursorAnchorInfo
<android.view.inputmethod.CursorAnchorInfo: void <init>(android.os.Parcel)>
<android.view.inputmethod.CursorAnchorInfo: int describeContents()>
<android.view.inputmethod.CursorAnchorInfo: android.graphics.RectF getCharacterBounds(int)>
<android.view.inputmethod.CursorAnchorInfo: int getCharacterBoundsFlags(int)>
<android.view.inputmethod.CursorAnchorInfo: java.lang.CharSequence getComposingText()>
<android.view.inputmethod.CursorAnchorInfo: int getComposingTextStart()>
<android.view.inputmethod.CursorAnchorInfo: android.view.inputmethod.EditorBoundsInfo getEditorBoundsInfo()>
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBaseline()>
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBottom()>
<android.view.inputmethod.CursorAnchorInfo: int getInsertionMarkerFlags()>
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerHorizontal()>
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerTop()>
<android.view.inputmethod.CursorAnchorInfo: android.graphics.Matrix getMatrix()>
<android.view.inputmethod.CursorAnchorInfo: int getSelectionEnd()>
<android.view.inputmethod.CursorAnchorInfo: int getSelectionStart()>
<android.view.inputmethod.CursorAnchorInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.CursorAnchorInfo: android.os.Parcelable$Creator CREATOR>
<android.view.inputmethod.CursorAnchorInfo: int FLAG_HAS_INVISIBLE_REGION>
<android.view.inputmethod.CursorAnchorInfo: int FLAG_HAS_VISIBLE_REGION>
<android.view.inputmethod.CursorAnchorInfo: int FLAG_IS_RTL>
android.view.inputmethod.CursorAnchorInfo$Builder
<android.view.inputmethod.CursorAnchorInfo$Builder: void <init>()>
<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder addCharacterBounds(int,float,float,float,float,int)>
<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo build()>
<android.view.inputmethod.CursorAnchorInfo$Builder: void reset()>
<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setComposingText(int,java.lang.CharSequence)>
<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setEditorBoundsInfo(android.view.inputmethod.EditorBoundsInfo)>
<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setInsertionMarkerLocation(float,float,float,float,int)>
<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setMatrix(android.graphics.Matrix)>
<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setSelectionRange(int,int)>
android.view.inputmethod.EditorBoundsInfo
<android.view.inputmethod.EditorBoundsInfo: int describeContents()>
<android.view.inputmethod.EditorBoundsInfo: android.graphics.RectF getEditorBounds()>
<android.view.inputmethod.EditorBoundsInfo: android.graphics.RectF getHandwritingBounds()>
<android.view.inputmethod.EditorBoundsInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.EditorBoundsInfo: android.os.Parcelable$Creator CREATOR>
android.view.inputmethod.EditorBoundsInfo$Builder
<android.view.inputmethod.EditorBoundsInfo$Builder: void <init>()>
<android.view.inputmethod.EditorBoundsInfo$Builder: android.view.inputmethod.EditorBoundsInfo build()>
<android.view.inputmethod.EditorBoundsInfo$Builder: android.view.inputmethod.EditorBoundsInfo$Builder setEditorBounds(android.graphics.RectF)>
<android.view.inputmethod.EditorBoundsInfo$Builder: android.view.inputmethod.EditorBoundsInfo$Builder setHandwritingBounds(android.graphics.RectF)>
android.view.inputmethod.EditorInfo
<android.view.inputmethod.EditorInfo: void <init>()>
<android.view.inputmethod.EditorInfo: int describeContents()>
<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)>
<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialSelectedText(int)>
<android.view.inputmethod.EditorInfo: android.view.inputmethod.SurroundingText getInitialSurroundingText(int,int,int)>
<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialTextAfterCursor(int,int)>
<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialTextBeforeCursor(int,int)>
<android.view.inputmethod.EditorInfo: void makeCompatible(int)>
<android.view.inputmethod.EditorInfo: void setInitialSurroundingSubText(java.lang.CharSequence,int)>
<android.view.inputmethod.EditorInfo: void setInitialSurroundingText(java.lang.CharSequence)>
<android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.EditorInfo: android.os.Parcelable$Creator CREATOR>
<android.view.inputmethod.EditorInfo: int IME_ACTION_DONE>
<android.view.inputmethod.EditorInfo: int IME_ACTION_GO>
<android.view.inputmethod.EditorInfo: int IME_ACTION_NEXT>
<android.view.inputmethod.EditorInfo: int IME_ACTION_NONE>
<android.view.inputmethod.EditorInfo: int IME_ACTION_PREVIOUS>
<android.view.inputmethod.EditorInfo: int IME_ACTION_SEARCH>
<android.view.inputmethod.EditorInfo: int IME_ACTION_SEND>
<android.view.inputmethod.EditorInfo: int IME_ACTION_UNSPECIFIED>
<android.view.inputmethod.EditorInfo: int IME_FLAG_FORCE_ASCII>
<android.view.inputmethod.EditorInfo: int IME_FLAG_NAVIGATE_NEXT>
<android.view.inputmethod.EditorInfo: int IME_FLAG_NAVIGATE_PREVIOUS>
<android.view.inputmethod.EditorInfo: int IME_FLAG_NO_ACCESSORY_ACTION>
<android.view.inputmethod.EditorInfo: int IME_FLAG_NO_ENTER_ACTION>
<android.view.inputmethod.EditorInfo: int IME_FLAG_NO_EXTRACT_UI>
<android.view.inputmethod.EditorInfo: int IME_FLAG_NO_FULLSCREEN>
<android.view.inputmethod.EditorInfo: int IME_FLAG_NO_PERSONALIZED_LEARNING>
<android.view.inputmethod.EditorInfo: int IME_MASK_ACTION>
<android.view.inputmethod.EditorInfo: int IME_NULL>
<android.view.inputmethod.EditorInfo: int actionId>
<android.view.inputmethod.EditorInfo: java.lang.CharSequence actionLabel>
<android.view.inputmethod.EditorInfo: java.lang.String[] contentMimeTypes>
<android.view.inputmethod.EditorInfo: android.os.Bundle extras>
<android.view.inputmethod.EditorInfo: int fieldId>
<android.view.inputmethod.EditorInfo: java.lang.String fieldName>
<android.view.inputmethod.EditorInfo: android.os.LocaleList hintLocales>
<android.view.inputmethod.EditorInfo: java.lang.CharSequence hintText>
<android.view.inputmethod.EditorInfo: int imeOptions>
<android.view.inputmethod.EditorInfo: int initialCapsMode>
<android.view.inputmethod.EditorInfo: int initialSelEnd>
<android.view.inputmethod.EditorInfo: int initialSelStart>
<android.view.inputmethod.EditorInfo: int inputType>
<android.view.inputmethod.EditorInfo: java.lang.CharSequence label>
<android.view.inputmethod.EditorInfo: java.lang.String packageName>
<android.view.inputmethod.EditorInfo: java.lang.String privateImeOptions>
android.view.inputmethod.ExtractedText
<android.view.inputmethod.ExtractedText: void <init>()>
<android.view.inputmethod.ExtractedText: int describeContents()>
<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.ExtractedText: android.os.Parcelable$Creator CREATOR>
<android.view.inputmethod.ExtractedText: int FLAG_SELECTING>
<android.view.inputmethod.ExtractedText: int FLAG_SINGLE_LINE>
<android.view.inputmethod.ExtractedText: int flags>
<android.view.inputmethod.ExtractedText: java.lang.CharSequence hint>
<android.view.inputmethod.ExtractedText: int partialEndOffset>
<android.view.inputmethod.ExtractedText: int partialStartOffset>
<android.view.inputmethod.ExtractedText: int selectionEnd>
<android.view.inputmethod.ExtractedText: int selectionStart>
<android.view.inputmethod.ExtractedText: int startOffset>
<android.view.inputmethod.ExtractedText: java.lang.CharSequence text>
android.view.inputmethod.ExtractedTextRequest
<android.view.inputmethod.ExtractedTextRequest: void <init>()>
<android.view.inputmethod.ExtractedTextRequest: int describeContents()>
<android.view.inputmethod.ExtractedTextRequest: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.ExtractedTextRequest: android.os.Parcelable$Creator CREATOR>
<android.view.inputmethod.ExtractedTextRequest: int flags>
<android.view.inputmethod.ExtractedTextRequest: int hintMaxChars>
<android.view.inputmethod.ExtractedTextRequest: int hintMaxLines>
<android.view.inputmethod.ExtractedTextRequest: int token>
android.view.inputmethod.InlineSuggestion
<android.view.inputmethod.InlineSuggestion: int describeContents()>
<android.view.inputmethod.InlineSuggestion: android.view.inputmethod.InlineSuggestionInfo getInfo()>
<android.view.inputmethod.InlineSuggestion: void inflate(android.content.Context,android.util.Size,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.view.inputmethod.InlineSuggestion: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.InlineSuggestion: android.os.Parcelable$Creator CREATOR>
android.view.inputmethod.InlineSuggestionInfo
<android.view.inputmethod.InlineSuggestionInfo: int describeContents()>
<android.view.inputmethod.InlineSuggestionInfo: java.lang.String[] getAutofillHints()>
<android.view.inputmethod.InlineSuggestionInfo: android.widget.inline.InlinePresentationSpec getInlinePresentationSpec()>
<android.view.inputmethod.InlineSuggestionInfo: java.lang.String getSource()>
<android.view.inputmethod.InlineSuggestionInfo: java.lang.String getType()>
<android.view.inputmethod.InlineSuggestionInfo: boolean isPinned()>
<android.view.inputmethod.InlineSuggestionInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.InlineSuggestionInfo: android.os.Parcelable$Creator CREATOR>
<android.view.inputmethod.InlineSuggestionInfo: java.lang.String SOURCE_AUTOFILL>
<android.view.inputmethod.InlineSuggestionInfo: java.lang.String SOURCE_PLATFORM>
<android.view.inputmethod.InlineSuggestionInfo: java.lang.String TYPE_ACTION>
<android.view.inputmethod.InlineSuggestionInfo: java.lang.String TYPE_SUGGESTION>
android.view.inputmethod.InlineSuggestionsRequest
<android.view.inputmethod.InlineSuggestionsRequest: int describeContents()>
<android.view.inputmethod.InlineSuggestionsRequest: android.os.Bundle getExtras()>
<android.view.inputmethod.InlineSuggestionsRequest: java.lang.String getHostPackageName()>
<android.view.inputmethod.InlineSuggestionsRequest: java.util.List getInlinePresentationSpecs()>
<android.view.inputmethod.InlineSuggestionsRequest: android.widget.inline.InlinePresentationSpec getInlineTooltipPresentationSpec()>
<android.view.inputmethod.InlineSuggestionsRequest: int getMaxSuggestionCount()>
<android.view.inputmethod.InlineSuggestionsRequest: android.os.LocaleList getSupportedLocales()>
<android.view.inputmethod.InlineSuggestionsRequest: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.InlineSuggestionsRequest: android.os.Parcelable$Creator CREATOR>
<android.view.inputmethod.InlineSuggestionsRequest: int SUGGESTION_COUNT_UNLIMITED>
android.view.inputmethod.InlineSuggestionsRequest$Builder
<android.view.inputmethod.InlineSuggestionsRequest$Builder: void <init>(java.util.List)>
<android.view.inputmethod.InlineSuggestionsRequest$Builder: android.view.inputmethod.InlineSuggestionsRequest$Builder addInlinePresentationSpecs(android.widget.inline.InlinePresentationSpec)>
<android.view.inputmethod.InlineSuggestionsRequest$Builder: android.view.inputmethod.InlineSuggestionsRequest build()>
<android.view.inputmethod.InlineSuggestionsRequest$Builder: android.view.inputmethod.InlineSuggestionsRequest$Builder setExtras(android.os.Bundle)>
<android.view.inputmethod.InlineSuggestionsRequest$Builder: android.view.inputmethod.InlineSuggestionsRequest$Builder setInlinePresentationSpecs(java.util.List)>
<android.view.inputmethod.InlineSuggestionsRequest$Builder: android.view.inputmethod.InlineSuggestionsRequest$Builder setInlineTooltipPresentationSpec(android.widget.inline.InlinePresentationSpec)>
<android.view.inputmethod.InlineSuggestionsRequest$Builder: android.view.inputmethod.InlineSuggestionsRequest$Builder setMaxSuggestionCount(int)>
<android.view.inputmethod.InlineSuggestionsRequest$Builder: android.view.inputmethod.InlineSuggestionsRequest$Builder setSupportedLocales(android.os.LocaleList)>
android.view.inputmethod.InlineSuggestionsResponse
<android.view.inputmethod.InlineSuggestionsResponse: int describeContents()>
<android.view.inputmethod.InlineSuggestionsResponse: java.util.List getInlineSuggestions()>
<android.view.inputmethod.InlineSuggestionsResponse: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.InlineSuggestionsResponse: android.os.Parcelable$Creator CREATOR>
android.view.inputmethod.InputBinding
<android.view.inputmethod.InputBinding: void <init>(android.view.inputmethod.InputConnection,android.os.IBinder,int,int)>
<android.view.inputmethod.InputBinding: void <init>(android.view.inputmethod.InputConnection,android.view.inputmethod.InputBinding)>
<android.view.inputmethod.InputBinding: int describeContents()>
<android.view.inputmethod.InputBinding: android.view.inputmethod.InputConnection getConnection()>
<android.view.inputmethod.InputBinding: android.os.IBinder getConnectionToken()>
<android.view.inputmethod.InputBinding: int getPid()>
<android.view.inputmethod.InputBinding: int getUid()>
<android.view.inputmethod.InputBinding: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.InputBinding: android.os.Parcelable$Creator CREATOR>
android.view.inputmethod.InputConnection
<android.view.inputmethod.InputConnection: boolean beginBatchEdit()>
<android.view.inputmethod.InputConnection: boolean clearMetaKeyStates(int)>
<android.view.inputmethod.InputConnection: void closeConnection()>
<android.view.inputmethod.InputConnection: boolean commitCompletion(android.view.inputmethod.CompletionInfo)>
<android.view.inputmethod.InputConnection: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>
<android.view.inputmethod.InputConnection: boolean commitCorrection(android.view.inputmethod.CorrectionInfo)>
<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int)>
<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>
<android.view.inputmethod.InputConnection: boolean deleteSurroundingText(int,int)>
<android.view.inputmethod.InputConnection: boolean deleteSurroundingTextInCodePoints(int,int)>
<android.view.inputmethod.InputConnection: boolean endBatchEdit()>
<android.view.inputmethod.InputConnection: boolean finishComposingText()>
<android.view.inputmethod.InputConnection: int getCursorCapsMode(int)>
<android.view.inputmethod.InputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>
<android.view.inputmethod.InputConnection: android.os.Handler getHandler()>
<android.view.inputmethod.InputConnection: java.lang.CharSequence getSelectedText(int)>
<android.view.inputmethod.InputConnection: android.view.inputmethod.SurroundingText getSurroundingText(int,int,int)>
<android.view.inputmethod.InputConnection: java.lang.CharSequence getTextAfterCursor(int,int)>
<android.view.inputmethod.InputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)>
<android.view.inputmethod.InputConnection: boolean performContextMenuAction(int)>
<android.view.inputmethod.InputConnection: boolean performEditorAction(int)>
<android.view.inputmethod.InputConnection: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>
<android.view.inputmethod.InputConnection: boolean performSpellCheck()>
<android.view.inputmethod.InputConnection: boolean reportFullscreenMode(boolean)>
<android.view.inputmethod.InputConnection: boolean requestCursorUpdates(int)>
<android.view.inputmethod.InputConnection: boolean requestCursorUpdates(int,int)>
<android.view.inputmethod.InputConnection: boolean sendKeyEvent(android.view.KeyEvent)>
<android.view.inputmethod.InputConnection: boolean setComposingRegion(int,int)>
<android.view.inputmethod.InputConnection: boolean setComposingRegion(int,int,android.view.inputmethod.TextAttribute)>
<android.view.inputmethod.InputConnection: boolean setComposingText(java.lang.CharSequence,int)>
<android.view.inputmethod.InputConnection: boolean setComposingText(java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>
<android.view.inputmethod.InputConnection: boolean setImeConsumesInput(boolean)>
<android.view.inputmethod.InputConnection: boolean setSelection(int,int)>
<android.view.inputmethod.InputConnection: android.view.inputmethod.TextSnapshot takeSnapshot()>
<android.view.inputmethod.InputConnection: int CURSOR_UPDATE_FILTER_CHARACTER_BOUNDS>
<android.view.inputmethod.InputConnection: int CURSOR_UPDATE_FILTER_EDITOR_BOUNDS>
<android.view.inputmethod.InputConnection: int CURSOR_UPDATE_FILTER_INSERTION_MARKER>
<android.view.inputmethod.InputConnection: int CURSOR_UPDATE_IMMEDIATE>
<android.view.inputmethod.InputConnection: int CURSOR_UPDATE_MONITOR>
<android.view.inputmethod.InputConnection: int GET_EXTRACTED_TEXT_MONITOR>
<android.view.inputmethod.InputConnection: int GET_TEXT_WITH_STYLES>
<android.view.inputmethod.InputConnection: int INPUT_CONTENT_GRANT_READ_URI_PERMISSION>
android.view.inputmethod.InputConnectionWrapper
<android.view.inputmethod.InputConnectionWrapper: void <init>(android.view.inputmethod.InputConnection,boolean)>
<android.view.inputmethod.InputConnectionWrapper: boolean beginBatchEdit()>
<android.view.inputmethod.InputConnectionWrapper: boolean clearMetaKeyStates(int)>
<android.view.inputmethod.InputConnectionWrapper: void closeConnection()>
<android.view.inputmethod.InputConnectionWrapper: boolean commitCompletion(android.view.inputmethod.CompletionInfo)>
<android.view.inputmethod.InputConnectionWrapper: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>
<android.view.inputmethod.InputConnectionWrapper: boolean commitCorrection(android.view.inputmethod.CorrectionInfo)>
<android.view.inputmethod.InputConnectionWrapper: boolean commitText(java.lang.CharSequence,int)>
<android.view.inputmethod.InputConnectionWrapper: boolean deleteSurroundingText(int,int)>
<android.view.inputmethod.InputConnectionWrapper: boolean deleteSurroundingTextInCodePoints(int,int)>
<android.view.inputmethod.InputConnectionWrapper: boolean endBatchEdit()>
<android.view.inputmethod.InputConnectionWrapper: boolean finishComposingText()>
<android.view.inputmethod.InputConnectionWrapper: int getCursorCapsMode(int)>
<android.view.inputmethod.InputConnectionWrapper: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>
<android.view.inputmethod.InputConnectionWrapper: android.os.Handler getHandler()>
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getSelectedText(int)>
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getTextAfterCursor(int,int)>
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getTextBeforeCursor(int,int)>
<android.view.inputmethod.InputConnectionWrapper: boolean performContextMenuAction(int)>
<android.view.inputmethod.InputConnectionWrapper: boolean performEditorAction(int)>
<android.view.inputmethod.InputConnectionWrapper: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>
<android.view.inputmethod.InputConnectionWrapper: boolean reportFullscreenMode(boolean)>
<android.view.inputmethod.InputConnectionWrapper: boolean requestCursorUpdates(int)>
<android.view.inputmethod.InputConnectionWrapper: boolean sendKeyEvent(android.view.KeyEvent)>
<android.view.inputmethod.InputConnectionWrapper: boolean setComposingRegion(int,int)>
<android.view.inputmethod.InputConnectionWrapper: boolean setComposingText(java.lang.CharSequence,int)>
<android.view.inputmethod.InputConnectionWrapper: boolean setSelection(int,int)>
<android.view.inputmethod.InputConnectionWrapper: void setTarget(android.view.inputmethod.InputConnection)>
android.view.inputmethod.InputContentInfo
<android.view.inputmethod.InputContentInfo: void <init>(android.net.Uri,android.content.ClipDescription)>
<android.view.inputmethod.InputContentInfo: void <init>(android.net.Uri,android.content.ClipDescription,android.net.Uri)>
<android.view.inputmethod.InputContentInfo: int describeContents()>
<android.view.inputmethod.InputContentInfo: android.net.Uri getContentUri()>
<android.view.inputmethod.InputContentInfo: android.content.ClipDescription getDescription()>
<android.view.inputmethod.InputContentInfo: android.net.Uri getLinkUri()>
<android.view.inputmethod.InputContentInfo: void releasePermission()>
<android.view.inputmethod.InputContentInfo: void requestPermission()>
<android.view.inputmethod.InputContentInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.InputContentInfo: android.os.Parcelable$Creator CREATOR>
android.view.inputmethod.InputMethod
<android.view.inputmethod.InputMethod: void attachToken(android.os.IBinder)>
<android.view.inputmethod.InputMethod: void bindInput(android.view.inputmethod.InputBinding)>
<android.view.inputmethod.InputMethod: void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>
<android.view.inputmethod.InputMethod: void createSession(android.view.inputmethod.InputMethod$SessionCallback)>
<android.view.inputmethod.InputMethod: void hideSoftInput(int,android.os.ResultReceiver)>
<android.view.inputmethod.InputMethod: void restartInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)>
<android.view.inputmethod.InputMethod: void revokeSession(android.view.inputmethod.InputMethodSession)>
<android.view.inputmethod.InputMethod: void setSessionEnabled(android.view.inputmethod.InputMethodSession,boolean)>
<android.view.inputmethod.InputMethod: void showSoftInput(int,android.os.ResultReceiver)>
<android.view.inputmethod.InputMethod: void startInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)>
<android.view.inputmethod.InputMethod: void unbindInput()>
<android.view.inputmethod.InputMethod: java.lang.String SERVICE_INTERFACE>
<android.view.inputmethod.InputMethod: java.lang.String SERVICE_META_DATA>
<android.view.inputmethod.InputMethod: int SHOW_EXPLICIT>
<android.view.inputmethod.InputMethod: int SHOW_FORCED>
android.view.inputmethod.InputMethod$SessionCallback
<android.view.inputmethod.InputMethod$SessionCallback: void sessionCreated(android.view.inputmethod.InputMethodSession)>
android.view.inputmethod.InputMethodInfo
<android.view.inputmethod.InputMethodInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>
<android.view.inputmethod.InputMethodInfo: void <init>(java.lang.String,java.lang.String,java.lang.CharSequence,java.lang.String)>
<android.view.inputmethod.InputMethodInfo: int describeContents()>
<android.view.inputmethod.InputMethodInfo: void dump(android.util.Printer,java.lang.String)>
<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()>
<android.view.inputmethod.InputMethodInfo: int getConfigChanges()>
<android.view.inputmethod.InputMethodInfo: java.lang.String getId()>
<android.view.inputmethod.InputMethodInfo: int getIsDefaultResourceId()>
<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()>
<android.view.inputmethod.InputMethodInfo: android.content.pm.ServiceInfo getServiceInfo()>
<android.view.inputmethod.InputMethodInfo: java.lang.String getServiceName()>
<android.view.inputmethod.InputMethodInfo: java.lang.String getSettingsActivity()>
<android.view.inputmethod.InputMethodInfo: android.view.inputmethod.InputMethodSubtype getSubtypeAt(int)>
<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()>
<android.view.inputmethod.InputMethodInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.view.inputmethod.InputMethodInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.view.inputmethod.InputMethodInfo: boolean shouldShowInInputMethodPicker()>
<android.view.inputmethod.InputMethodInfo: boolean supportsStylusHandwriting()>
<android.view.inputmethod.InputMethodInfo: boolean suppressesSpellChecker()>
<android.view.inputmethod.InputMethodInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.InputMethodInfo: android.os.Parcelable$Creator CREATOR>
android.view.inputmethod.InputMethodManager
<android.view.inputmethod.InputMethodManager: void dispatchKeyEventFromInputMethod(android.view.View,android.view.KeyEvent)>
<android.view.inputmethod.InputMethodManager: void displayCompletions(android.view.View,android.view.inputmethod.CompletionInfo[])>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()>
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>
<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodList()>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>
<android.view.inputmethod.InputMethodManager: java.util.Map getShortcutInputMethodsAndSubtypes()>
<android.view.inputmethod.InputMethodManager: void hideSoftInputFromInputMethod(android.os.IBinder,int)>
<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int)>
<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int,android.os.ResultReceiver)>
<android.view.inputmethod.InputMethodManager: void hideStatusIcon(android.os.IBinder)>
<android.view.inputmethod.InputMethodManager: void invalidateInput(android.view.View)>
<android.view.inputmethod.InputMethodManager: boolean isAcceptingText()>
<android.view.inputmethod.InputMethodManager: boolean isActive(android.view.View)>
<android.view.inputmethod.InputMethodManager: boolean isActive()>
<android.view.inputmethod.InputMethodManager: boolean isFullscreenMode()>
<android.view.inputmethod.InputMethodManager: boolean isInputMethodSuppressingSpellChecker()>
<android.view.inputmethod.InputMethodManager: boolean isWatchingCursor(android.view.View)>
<android.view.inputmethod.InputMethodManager: void restartInput(android.view.View)>
<android.view.inputmethod.InputMethodManager: void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)>
<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>
<android.view.inputmethod.InputMethodManager: void setInputMethod(android.os.IBinder,java.lang.String)>
<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>
<android.view.inputmethod.InputMethodManager: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)>
<android.view.inputmethod.InputMethodManager: void showInputMethodAndSubtypeEnabler(java.lang.String)>
<android.view.inputmethod.InputMethodManager: void showInputMethodPicker()>
<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int)>
<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int,android.os.ResultReceiver)>
<android.view.inputmethod.InputMethodManager: void showSoftInputFromInputMethod(android.os.IBinder,int)>
<android.view.inputmethod.InputMethodManager: void showStatusIcon(android.os.IBinder,java.lang.String,int)>
<android.view.inputmethod.InputMethodManager: void startStylusHandwriting(android.view.View)>
<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(android.os.IBinder)>
<android.view.inputmethod.InputMethodManager: boolean switchToNextInputMethod(android.os.IBinder,boolean)>
<android.view.inputmethod.InputMethodManager: void toggleSoftInput(int,int)>
<android.view.inputmethod.InputMethodManager: void toggleSoftInputFromWindow(android.os.IBinder,int,int)>
<android.view.inputmethod.InputMethodManager: void updateCursor(android.view.View,int,int,int,int)>
<android.view.inputmethod.InputMethodManager: void updateCursorAnchorInfo(android.view.View,android.view.inputmethod.CursorAnchorInfo)>
<android.view.inputmethod.InputMethodManager: void updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)>
<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)>
<android.view.inputmethod.InputMethodManager: void viewClicked(android.view.View)>
<android.view.inputmethod.InputMethodManager: int HIDE_IMPLICIT_ONLY>
<android.view.inputmethod.InputMethodManager: int HIDE_NOT_ALWAYS>
<android.view.inputmethod.InputMethodManager: int RESULT_HIDDEN>
<android.view.inputmethod.InputMethodManager: int RESULT_SHOWN>
<android.view.inputmethod.InputMethodManager: int RESULT_UNCHANGED_HIDDEN>
<android.view.inputmethod.InputMethodManager: int RESULT_UNCHANGED_SHOWN>
<android.view.inputmethod.InputMethodManager: int SHOW_FORCED>
<android.view.inputmethod.InputMethodManager: int SHOW_IMPLICIT>
android.view.inputmethod.InputMethodSession
<android.view.inputmethod.InputMethodSession: void appPrivateCommand(java.lang.String,android.os.Bundle)>
<android.view.inputmethod.InputMethodSession: void dispatchGenericMotionEvent(int,android.view.MotionEvent,android.view.inputmethod.InputMethodSession$EventCallback)>
<android.view.inputmethod.InputMethodSession: void dispatchKeyEvent(int,android.view.KeyEvent,android.view.inputmethod.InputMethodSession$EventCallback)>
<android.view.inputmethod.InputMethodSession: void dispatchTrackballEvent(int,android.view.MotionEvent,android.view.inputmethod.InputMethodSession$EventCallback)>
<android.view.inputmethod.InputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>
<android.view.inputmethod.InputMethodSession: void finishInput()>
<android.view.inputmethod.InputMethodSession: void toggleSoftInput(int,int)>
<android.view.inputmethod.InputMethodSession: void updateCursor(android.graphics.Rect)>
<android.view.inputmethod.InputMethodSession: void updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)>
<android.view.inputmethod.InputMethodSession: void updateExtractedText(int,android.view.inputmethod.ExtractedText)>
<android.view.inputmethod.InputMethodSession: void updateSelection(int,int,int,int,int,int)>
<android.view.inputmethod.InputMethodSession: void viewClicked(boolean)>
android.view.inputmethod.InputMethodSession$EventCallback
<android.view.inputmethod.InputMethodSession$EventCallback: void finishedEvent(int,boolean)>
android.view.inputmethod.InputMethodSubtype
<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>
<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,int)>
<android.view.inputmethod.InputMethodSubtype: boolean containsExtraValueKey(java.lang.String)>
<android.view.inputmethod.InputMethodSubtype: int describeContents()>
<android.view.inputmethod.InputMethodSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValue()>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValueOf(java.lang.String)>
<android.view.inputmethod.InputMethodSubtype: int getIconResId()>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getLanguageTag()>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getLocale()>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getMode()>
<android.view.inputmethod.InputMethodSubtype: int getNameResId()>
<android.view.inputmethod.InputMethodSubtype: boolean isAsciiCapable()>
<android.view.inputmethod.InputMethodSubtype: boolean isAuxiliary()>
<android.view.inputmethod.InputMethodSubtype: boolean overridesImplicitlyEnabledSubtype()>
<android.view.inputmethod.InputMethodSubtype: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.InputMethodSubtype: android.os.Parcelable$Creator CREATOR>
android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder
<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: void <init>()>
<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype build()>
<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setIsAsciiCapable(boolean)>
<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setIsAuxiliary(boolean)>
<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setLanguageTag(java.lang.String)>
<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setOverridesImplicitlyEnabledSubtype(boolean)>
<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeExtraValue(java.lang.String)>
<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeIconResId(int)>
<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeId(int)>
<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeLocale(java.lang.String)>
<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeMode(java.lang.String)>
<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeNameResId(int)>
android.view.inputmethod.SurroundingText
<android.view.inputmethod.SurroundingText: void <init>(java.lang.CharSequence,int,int,int)>
<android.view.inputmethod.SurroundingText: int describeContents()>
<android.view.inputmethod.SurroundingText: int getOffset()>
<android.view.inputmethod.SurroundingText: int getSelectionEnd()>
<android.view.inputmethod.SurroundingText: int getSelectionStart()>
<android.view.inputmethod.SurroundingText: java.lang.CharSequence getText()>
<android.view.inputmethod.SurroundingText: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.SurroundingText: android.os.Parcelable$Creator CREATOR>
android.view.inputmethod.TextAttribute
<android.view.inputmethod.TextAttribute: int describeContents()>
<android.view.inputmethod.TextAttribute: android.os.PersistableBundle getExtras()>
<android.view.inputmethod.TextAttribute: java.util.List getTextConversionSuggestions()>
<android.view.inputmethod.TextAttribute: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.TextAttribute: android.os.Parcelable$Creator CREATOR>
android.view.inputmethod.TextAttribute$Builder
<android.view.inputmethod.TextAttribute$Builder: void <init>()>
<android.view.inputmethod.TextAttribute$Builder: android.view.inputmethod.TextAttribute build()>
<android.view.inputmethod.TextAttribute$Builder: android.view.inputmethod.TextAttribute$Builder setExtras(android.os.PersistableBundle)>
<android.view.inputmethod.TextAttribute$Builder: android.view.inputmethod.TextAttribute$Builder setTextConversionSuggestions(java.util.List)>
android.view.inputmethod.TextSnapshot
<android.view.inputmethod.TextSnapshot: void <init>(android.view.inputmethod.SurroundingText,int,int,int)>
<android.view.inputmethod.TextSnapshot: int getCompositionEnd()>
<android.view.inputmethod.TextSnapshot: int getCompositionStart()>
<android.view.inputmethod.TextSnapshot: int getCursorCapsMode()>
<android.view.inputmethod.TextSnapshot: int getSelectionEnd()>
<android.view.inputmethod.TextSnapshot: int getSelectionStart()>
<android.view.inputmethod.TextSnapshot: android.view.inputmethod.SurroundingText getSurroundingText()>
android.view.inspector.InspectionCompanion
<android.view.inspector.InspectionCompanion: void mapProperties(android.view.inspector.PropertyMapper)>
<android.view.inspector.InspectionCompanion: void readProperties(java.lang.Object,android.view.inspector.PropertyReader)>
android.view.inspector.InspectionCompanion$UninitializedPropertyMapException
<android.view.inspector.InspectionCompanion$UninitializedPropertyMapException: void <init>()>
android.view.inspector.InspectionCompanionProvider
<android.view.inspector.InspectionCompanionProvider: android.view.inspector.InspectionCompanion provide(java.lang.Class)>
android.view.inspector.IntFlagMapping
<android.view.inspector.IntFlagMapping: void <init>()>
<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>
<android.view.inspector.IntFlagMapping: java.util.Set get(int)>
android.view.inspector.PropertyMapper
<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>
<android.view.inspector.PropertyMapper: int mapByte(java.lang.String,int)>
<android.view.inspector.PropertyMapper: int mapChar(java.lang.String,int)>
<android.view.inspector.PropertyMapper: int mapColor(java.lang.String,int)>
<android.view.inspector.PropertyMapper: int mapDouble(java.lang.String,int)>
<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>
<android.view.inspector.PropertyMapper: int mapGravity(java.lang.String,int)>
<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>
<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>
<android.view.inspector.PropertyMapper: int mapIntFlag(java.lang.String,int,java.util.function.IntFunction)>
<android.view.inspector.PropertyMapper: int mapLong(java.lang.String,int)>
<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>
<android.view.inspector.PropertyMapper: int mapResourceId(java.lang.String,int)>
<android.view.inspector.PropertyMapper: int mapShort(java.lang.String,int)>
android.view.inspector.PropertyMapper$PropertyConflictException
<android.view.inspector.PropertyMapper$PropertyConflictException: void <init>(java.lang.String,java.lang.String,java.lang.String)>
android.view.inspector.PropertyReader
<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>
<android.view.inspector.PropertyReader: void readByte(int,byte)>
<android.view.inspector.PropertyReader: void readChar(int,char)>
<android.view.inspector.PropertyReader: void readColor(int,int)>
<android.view.inspector.PropertyReader: void readColor(int,long)>
<android.view.inspector.PropertyReader: void readColor(int,android.graphics.Color)>
<android.view.inspector.PropertyReader: void readDouble(int,double)>
<android.view.inspector.PropertyReader: void readFloat(int,float)>
<android.view.inspector.PropertyReader: void readGravity(int,int)>
<android.view.inspector.PropertyReader: void readInt(int,int)>
<android.view.inspector.PropertyReader: void readIntEnum(int,int)>
<android.view.inspector.PropertyReader: void readIntFlag(int,int)>
<android.view.inspector.PropertyReader: void readLong(int,long)>
<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>
<android.view.inspector.PropertyReader: void readResourceId(int,int)>
<android.view.inspector.PropertyReader: void readShort(int,short)>
android.view.inspector.PropertyReader$PropertyTypeMismatchException
<android.view.inspector.PropertyReader$PropertyTypeMismatchException: void <init>(int,java.lang.String,java.lang.String,java.lang.String)>
<android.view.inspector.PropertyReader$PropertyTypeMismatchException: void <init>(int,java.lang.String,java.lang.String)>
android.view.inspector.StaticInspectionCompanionProvider
<android.view.inspector.StaticInspectionCompanionProvider: void <init>()>
<android.view.inspector.StaticInspectionCompanionProvider: android.view.inspector.InspectionCompanion provide(java.lang.Class)>
android.view.inspector.WindowInspector
<android.view.inspector.WindowInspector: java.util.List getGlobalWindowViews()>
android.view.textclassifier.ConversationAction
<android.view.textclassifier.ConversationAction: int describeContents()>
<android.view.textclassifier.ConversationAction: android.app.RemoteAction getAction()>
<android.view.textclassifier.ConversationAction: float getConfidenceScore()>
<android.view.textclassifier.ConversationAction: android.os.Bundle getExtras()>
<android.view.textclassifier.ConversationAction: java.lang.CharSequence getTextReply()>
<android.view.textclassifier.ConversationAction: java.lang.String getType()>
<android.view.textclassifier.ConversationAction: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.ConversationAction: android.os.Parcelable$Creator CREATOR>
<android.view.textclassifier.ConversationAction: java.lang.String TYPE_CALL_PHONE>
<android.view.textclassifier.ConversationAction: java.lang.String TYPE_CREATE_REMINDER>
<android.view.textclassifier.ConversationAction: java.lang.String TYPE_OPEN_URL>
<android.view.textclassifier.ConversationAction: java.lang.String TYPE_SEND_EMAIL>
<android.view.textclassifier.ConversationAction: java.lang.String TYPE_SEND_SMS>
<android.view.textclassifier.ConversationAction: java.lang.String TYPE_SHARE_LOCATION>
<android.view.textclassifier.ConversationAction: java.lang.String TYPE_TEXT_REPLY>
<android.view.textclassifier.ConversationAction: java.lang.String TYPE_TRACK_FLIGHT>
<android.view.textclassifier.ConversationAction: java.lang.String TYPE_VIEW_CALENDAR>
<android.view.textclassifier.ConversationAction: java.lang.String TYPE_VIEW_MAP>
android.view.textclassifier.ConversationAction$Builder
<android.view.textclassifier.ConversationAction$Builder: void <init>(java.lang.String)>
<android.view.textclassifier.ConversationAction$Builder: android.view.textclassifier.ConversationAction build()>
<android.view.textclassifier.ConversationAction$Builder: android.view.textclassifier.ConversationAction$Builder setAction(android.app.RemoteAction)>
<android.view.textclassifier.ConversationAction$Builder: android.view.textclassifier.ConversationAction$Builder setConfidenceScore(float)>
<android.view.textclassifier.ConversationAction$Builder: android.view.textclassifier.ConversationAction$Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.ConversationAction$Builder: android.view.textclassifier.ConversationAction$Builder setTextReply(java.lang.CharSequence)>
android.view.textclassifier.ConversationActions
<android.view.textclassifier.ConversationActions: void <init>(java.util.List,java.lang.String)>
<android.view.textclassifier.ConversationActions: int describeContents()>
<android.view.textclassifier.ConversationActions: java.util.List getConversationActions()>
<android.view.textclassifier.ConversationActions: java.lang.String getId()>
<android.view.textclassifier.ConversationActions: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.ConversationActions: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.ConversationActions$Message
<android.view.textclassifier.ConversationActions$Message: int describeContents()>
<android.view.textclassifier.ConversationActions$Message: android.app.Person getAuthor()>
<android.view.textclassifier.ConversationActions$Message: android.os.Bundle getExtras()>
<android.view.textclassifier.ConversationActions$Message: java.time.ZonedDateTime getReferenceTime()>
<android.view.textclassifier.ConversationActions$Message: java.lang.CharSequence getText()>
<android.view.textclassifier.ConversationActions$Message: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.ConversationActions$Message: android.os.Parcelable$Creator CREATOR>
<android.view.textclassifier.ConversationActions$Message: android.app.Person PERSON_USER_OTHERS>
<android.view.textclassifier.ConversationActions$Message: android.app.Person PERSON_USER_SELF>
android.view.textclassifier.ConversationActions$Message$Builder
<android.view.textclassifier.ConversationActions$Message$Builder: void <init>(android.app.Person)>
<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message build()>
<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message$Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message$Builder setReferenceTime(java.time.ZonedDateTime)>
<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message$Builder setText(java.lang.CharSequence)>
android.view.textclassifier.ConversationActions$Request
<android.view.textclassifier.ConversationActions$Request: int describeContents()>
<android.view.textclassifier.ConversationActions$Request: java.lang.String getCallingPackageName()>
<android.view.textclassifier.ConversationActions$Request: java.util.List getConversation()>
<android.view.textclassifier.ConversationActions$Request: android.os.Bundle getExtras()>
<android.view.textclassifier.ConversationActions$Request: java.util.List getHints()>
<android.view.textclassifier.ConversationActions$Request: int getMaxSuggestions()>
<android.view.textclassifier.ConversationActions$Request: android.view.textclassifier.TextClassifier$EntityConfig getTypeConfig()>
<android.view.textclassifier.ConversationActions$Request: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.ConversationActions$Request: android.os.Parcelable$Creator CREATOR>
<android.view.textclassifier.ConversationActions$Request: java.lang.String HINT_FOR_IN_APP>
<android.view.textclassifier.ConversationActions$Request: java.lang.String HINT_FOR_NOTIFICATION>
android.view.textclassifier.ConversationActions$Request$Builder
<android.view.textclassifier.ConversationActions$Request$Builder: void <init>(java.util.List)>
<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request build()>
<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setHints(java.util.List)>
<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setMaxSuggestions(int)>
<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setTypeConfig(android.view.textclassifier.TextClassifier$EntityConfig)>
android.view.textclassifier.SelectionEvent
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionActionEvent(int,int,int)>
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionActionEvent(int,int,int,android.view.textclassifier.TextClassification)>
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int)>
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int,android.view.textclassifier.TextClassification)>
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int,android.view.textclassifier.TextSelection)>
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionStartedEvent(int,int)>
<android.view.textclassifier.SelectionEvent: int describeContents()>
<android.view.textclassifier.SelectionEvent: long getDurationSincePreviousEvent()>
<android.view.textclassifier.SelectionEvent: long getDurationSinceSessionStart()>
<android.view.textclassifier.SelectionEvent: int getEnd()>
<android.view.textclassifier.SelectionEvent: java.lang.String getEntityType()>
<android.view.textclassifier.SelectionEvent: int getEventIndex()>
<android.view.textclassifier.SelectionEvent: long getEventTime()>
<android.view.textclassifier.SelectionEvent: int getEventType()>
<android.view.textclassifier.SelectionEvent: int getInvocationMethod()>
<android.view.textclassifier.SelectionEvent: java.lang.String getPackageName()>
<android.view.textclassifier.SelectionEvent: java.lang.String getResultId()>
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.TextClassificationSessionId getSessionId()>
<android.view.textclassifier.SelectionEvent: int getSmartEnd()>
<android.view.textclassifier.SelectionEvent: int getSmartStart()>
<android.view.textclassifier.SelectionEvent: int getStart()>
<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetType()>
<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetVersion()>
<android.view.textclassifier.SelectionEvent: boolean isTerminal(int)>
<android.view.textclassifier.SelectionEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.SelectionEvent: int ACTION_ABANDON>
<android.view.textclassifier.SelectionEvent: int ACTION_COPY>
<android.view.textclassifier.SelectionEvent: int ACTION_CUT>
<android.view.textclassifier.SelectionEvent: int ACTION_DRAG>
<android.view.textclassifier.SelectionEvent: int ACTION_OTHER>
<android.view.textclassifier.SelectionEvent: int ACTION_OVERTYPE>
<android.view.textclassifier.SelectionEvent: int ACTION_PASTE>
<android.view.textclassifier.SelectionEvent: int ACTION_RESET>
<android.view.textclassifier.SelectionEvent: int ACTION_SELECT_ALL>
<android.view.textclassifier.SelectionEvent: int ACTION_SHARE>
<android.view.textclassifier.SelectionEvent: int ACTION_SMART_SHARE>
<android.view.textclassifier.SelectionEvent: android.os.Parcelable$Creator CREATOR>
<android.view.textclassifier.SelectionEvent: int EVENT_AUTO_SELECTION>
<android.view.textclassifier.SelectionEvent: int EVENT_SELECTION_MODIFIED>
<android.view.textclassifier.SelectionEvent: int EVENT_SELECTION_STARTED>
<android.view.textclassifier.SelectionEvent: int EVENT_SMART_SELECTION_MULTI>
<android.view.textclassifier.SelectionEvent: int EVENT_SMART_SELECTION_SINGLE>
<android.view.textclassifier.SelectionEvent: int INVOCATION_LINK>
<android.view.textclassifier.SelectionEvent: int INVOCATION_MANUAL>
<android.view.textclassifier.SelectionEvent: int INVOCATION_UNKNOWN>
android.view.textclassifier.TextClassification
<android.view.textclassifier.TextClassification: int describeContents()>
<android.view.textclassifier.TextClassification: java.util.List getActions()>
<android.view.textclassifier.TextClassification: float getConfidenceScore(java.lang.String)>
<android.view.textclassifier.TextClassification: java.lang.String getEntity(int)>
<android.view.textclassifier.TextClassification: int getEntityCount()>
<android.view.textclassifier.TextClassification: android.os.Bundle getExtras()>
<android.view.textclassifier.TextClassification: android.graphics.drawable.Drawable getIcon()>
<android.view.textclassifier.TextClassification: java.lang.String getId()>
<android.view.textclassifier.TextClassification: android.content.Intent getIntent()>
<android.view.textclassifier.TextClassification: java.lang.CharSequence getLabel()>
<android.view.textclassifier.TextClassification: android.view.View$OnClickListener getOnClickListener()>
<android.view.textclassifier.TextClassification: java.lang.String getText()>
<android.view.textclassifier.TextClassification: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextClassification: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.TextClassification$Builder
<android.view.textclassifier.TextClassification$Builder: void <init>()>
<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder addAction(android.app.RemoteAction)>
<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification build()>
<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setEntityType(java.lang.String,float)>
<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setIcon(android.graphics.drawable.Drawable)>
<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setId(java.lang.String)>
<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setIntent(android.content.Intent)>
<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setLabel(java.lang.String)>
<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setOnClickListener(android.view.View$OnClickListener)>
<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setText(java.lang.String)>
android.view.textclassifier.TextClassification$Request
<android.view.textclassifier.TextClassification$Request: int describeContents()>
<android.view.textclassifier.TextClassification$Request: java.lang.String getCallingPackageName()>
<android.view.textclassifier.TextClassification$Request: android.os.LocaleList getDefaultLocales()>
<android.view.textclassifier.TextClassification$Request: int getEndIndex()>
<android.view.textclassifier.TextClassification$Request: android.os.Bundle getExtras()>
<android.view.textclassifier.TextClassification$Request: java.time.ZonedDateTime getReferenceTime()>
<android.view.textclassifier.TextClassification$Request: int getStartIndex()>
<android.view.textclassifier.TextClassification$Request: java.lang.CharSequence getText()>
<android.view.textclassifier.TextClassification$Request: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextClassification$Request: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.TextClassification$Request$Builder
<android.view.textclassifier.TextClassification$Request$Builder: void <init>(java.lang.CharSequence,int,int)>
<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request build()>
<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request$Builder setDefaultLocales(android.os.LocaleList)>
<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request$Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request$Builder setReferenceTime(java.time.ZonedDateTime)>
android.view.textclassifier.TextClassificationContext
<android.view.textclassifier.TextClassificationContext: int describeContents()>
<android.view.textclassifier.TextClassificationContext: java.lang.String getPackageName()>
<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetType()>
<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetVersion()>
<android.view.textclassifier.TextClassificationContext: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextClassificationContext: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.TextClassificationContext$Builder
<android.view.textclassifier.TextClassificationContext$Builder: void <init>(java.lang.String,java.lang.String)>
<android.view.textclassifier.TextClassificationContext$Builder: android.view.textclassifier.TextClassificationContext build()>
<android.view.textclassifier.TextClassificationContext$Builder: android.view.textclassifier.TextClassificationContext$Builder setWidgetVersion(java.lang.String)>
android.view.textclassifier.TextClassificationManager
<android.view.textclassifier.TextClassificationManager: android.view.textclassifier.TextClassifier createTextClassificationSession(android.view.textclassifier.TextClassificationContext)>
<android.view.textclassifier.TextClassificationManager: android.view.textclassifier.TextClassifier getTextClassifier()>
<android.view.textclassifier.TextClassificationManager: void setTextClassificationSessionFactory(android.view.textclassifier.TextClassificationSessionFactory)>
<android.view.textclassifier.TextClassificationManager: void setTextClassifier(android.view.textclassifier.TextClassifier)>
android.view.textclassifier.TextClassificationSessionFactory
<android.view.textclassifier.TextClassificationSessionFactory: android.view.textclassifier.TextClassifier createTextClassificationSession(android.view.textclassifier.TextClassificationContext)>
android.view.textclassifier.TextClassificationSessionId
<android.view.textclassifier.TextClassificationSessionId: int describeContents()>
<android.view.textclassifier.TextClassificationSessionId: java.lang.String getValue()>
<android.view.textclassifier.TextClassificationSessionId: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextClassificationSessionId: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.TextClassifier
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextClassification classifyText(android.view.textclassifier.TextClassification$Request)>
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextClassification classifyText(java.lang.CharSequence,int,int,android.os.LocaleList)>
<android.view.textclassifier.TextClassifier: void destroy()>
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextLanguage detectLanguage(android.view.textclassifier.TextLanguage$Request)>
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextLinks generateLinks(android.view.textclassifier.TextLinks$Request)>
<android.view.textclassifier.TextClassifier: int getMaxGenerateLinksTextLength()>
<android.view.textclassifier.TextClassifier: boolean isDestroyed()>
<android.view.textclassifier.TextClassifier: void onSelectionEvent(android.view.textclassifier.SelectionEvent)>
<android.view.textclassifier.TextClassifier: void onTextClassifierEvent(android.view.textclassifier.TextClassifierEvent)>
<android.view.textclassifier.TextClassifier: android.view.textclassifier.ConversationActions suggestConversationActions(android.view.textclassifier.ConversationActions$Request)>
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextSelection suggestSelection(android.view.textclassifier.TextSelection$Request)>
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextSelection suggestSelection(java.lang.CharSequence,int,int,android.os.LocaleList)>
<android.view.textclassifier.TextClassifier: java.lang.String EXTRA_FROM_TEXT_CLASSIFIER>
<android.view.textclassifier.TextClassifier: java.lang.String HINT_TEXT_IS_EDITABLE>
<android.view.textclassifier.TextClassifier: java.lang.String HINT_TEXT_IS_NOT_EDITABLE>
<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextClassifier NO_OP>
<android.view.textclassifier.TextClassifier: java.lang.String TYPE_ADDRESS>
<android.view.textclassifier.TextClassifier: java.lang.String TYPE_DATE>
<android.view.textclassifier.TextClassifier: java.lang.String TYPE_DATE_TIME>
<android.view.textclassifier.TextClassifier: java.lang.String TYPE_EMAIL>
<android.view.textclassifier.TextClassifier: java.lang.String TYPE_FLIGHT_NUMBER>
<android.view.textclassifier.TextClassifier: java.lang.String TYPE_OTHER>
<android.view.textclassifier.TextClassifier: java.lang.String TYPE_PHONE>
<android.view.textclassifier.TextClassifier: java.lang.String TYPE_UNKNOWN>
<android.view.textclassifier.TextClassifier: java.lang.String TYPE_URL>
<android.view.textclassifier.TextClassifier: java.lang.String WIDGET_TYPE_CLIPBOARD>
<android.view.textclassifier.TextClassifier: java.lang.String WIDGET_TYPE_CUSTOM_EDITTEXT>
<android.view.textclassifier.TextClassifier: java.lang.String WIDGET_TYPE_CUSTOM_TEXTVIEW>
<android.view.textclassifier.TextClassifier: java.lang.String WIDGET_TYPE_CUSTOM_UNSELECTABLE_TEXTVIEW>
<android.view.textclassifier.TextClassifier: java.lang.String WIDGET_TYPE_EDITTEXT>
<android.view.textclassifier.TextClassifier: java.lang.String WIDGET_TYPE_EDIT_WEBVIEW>
<android.view.textclassifier.TextClassifier: java.lang.String WIDGET_TYPE_NOTIFICATION>
<android.view.textclassifier.TextClassifier: java.lang.String WIDGET_TYPE_TEXTVIEW>
<android.view.textclassifier.TextClassifier: java.lang.String WIDGET_TYPE_UNKNOWN>
<android.view.textclassifier.TextClassifier: java.lang.String WIDGET_TYPE_UNSELECTABLE_TEXTVIEW>
<android.view.textclassifier.TextClassifier: java.lang.String WIDGET_TYPE_WEBVIEW>
android.view.textclassifier.TextClassifier$EntityConfig
<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig create(java.util.Collection,java.util.Collection,java.util.Collection)>
<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig createWithExplicitEntityList(java.util.Collection)>
<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig createWithHints(java.util.Collection)>
<android.view.textclassifier.TextClassifier$EntityConfig: int describeContents()>
<android.view.textclassifier.TextClassifier$EntityConfig: java.util.Collection getHints()>
<android.view.textclassifier.TextClassifier$EntityConfig: java.util.Collection resolveEntityListModifications(java.util.Collection)>
<android.view.textclassifier.TextClassifier$EntityConfig: boolean shouldIncludeTypesFromTextClassifier()>
<android.view.textclassifier.TextClassifier$EntityConfig: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextClassifier$EntityConfig: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.TextClassifier$EntityConfig$Builder
<android.view.textclassifier.TextClassifier$EntityConfig$Builder: void <init>()>
<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig build()>
<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder includeTypesFromTextClassifier(boolean)>
<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder setExcludedTypes(java.util.Collection)>
<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder setHints(java.util.Collection)>
<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder setIncludedTypes(java.util.Collection)>
android.view.textclassifier.TextClassifierEvent
<android.view.textclassifier.TextClassifierEvent: int describeContents()>
<android.view.textclassifier.TextClassifierEvent: int[] getActionIndices()>
<android.view.textclassifier.TextClassifierEvent: java.lang.String[] getEntityTypes()>
<android.view.textclassifier.TextClassifierEvent: int getEventCategory()>
<android.view.textclassifier.TextClassifierEvent: android.view.textclassifier.TextClassificationContext getEventContext()>
<android.view.textclassifier.TextClassifierEvent: int getEventIndex()>
<android.view.textclassifier.TextClassifierEvent: int getEventType()>
<android.view.textclassifier.TextClassifierEvent: android.os.Bundle getExtras()>
<android.view.textclassifier.TextClassifierEvent: android.icu.util.ULocale getLocale()>
<android.view.textclassifier.TextClassifierEvent: java.lang.String getModelName()>
<android.view.textclassifier.TextClassifierEvent: java.lang.String getResultId()>
<android.view.textclassifier.TextClassifierEvent: float[] getScores()>
<android.view.textclassifier.TextClassifierEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextClassifierEvent: int CATEGORY_CONVERSATION_ACTIONS>
<android.view.textclassifier.TextClassifierEvent: int CATEGORY_LANGUAGE_DETECTION>
<android.view.textclassifier.TextClassifierEvent: int CATEGORY_LINKIFY>
<android.view.textclassifier.TextClassifierEvent: int CATEGORY_SELECTION>
<android.view.textclassifier.TextClassifierEvent: android.os.Parcelable$Creator CREATOR>
<android.view.textclassifier.TextClassifierEvent: int TYPE_ACTIONS_GENERATED>
<android.view.textclassifier.TextClassifierEvent: int TYPE_ACTIONS_SHOWN>
<android.view.textclassifier.TextClassifierEvent: int TYPE_AUTO_SELECTION>
<android.view.textclassifier.TextClassifierEvent: int TYPE_COPY_ACTION>
<android.view.textclassifier.TextClassifierEvent: int TYPE_CUT_ACTION>
<android.view.textclassifier.TextClassifierEvent: int TYPE_LINKS_GENERATED>
<android.view.textclassifier.TextClassifierEvent: int TYPE_LINK_CLICKED>
<android.view.textclassifier.TextClassifierEvent: int TYPE_MANUAL_REPLY>
<android.view.textclassifier.TextClassifierEvent: int TYPE_OTHER_ACTION>
<android.view.textclassifier.TextClassifierEvent: int TYPE_OVERTYPE>
<android.view.textclassifier.TextClassifierEvent: int TYPE_PASTE_ACTION>
<android.view.textclassifier.TextClassifierEvent: int TYPE_SELECTION_DESTROYED>
<android.view.textclassifier.TextClassifierEvent: int TYPE_SELECTION_DRAG>
<android.view.textclassifier.TextClassifierEvent: int TYPE_SELECTION_MODIFIED>
<android.view.textclassifier.TextClassifierEvent: int TYPE_SELECTION_RESET>
<android.view.textclassifier.TextClassifierEvent: int TYPE_SELECTION_STARTED>
<android.view.textclassifier.TextClassifierEvent: int TYPE_SELECT_ALL>
<android.view.textclassifier.TextClassifierEvent: int TYPE_SHARE_ACTION>
<android.view.textclassifier.TextClassifierEvent: int TYPE_SMART_ACTION>
<android.view.textclassifier.TextClassifierEvent: int TYPE_SMART_SELECTION_MULTI>
<android.view.textclassifier.TextClassifierEvent: int TYPE_SMART_SELECTION_SINGLE>
android.view.textclassifier.TextClassifierEvent$Builder
<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent.Builder setActionIndices(int[])>
<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent.Builder setEntityTypes(java.lang.String[])>
<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent.Builder setEventContext(android.view.textclassifier.TextClassificationContext)>
<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent.Builder setEventIndex(int)>
<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent.Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent.Builder setLocale(android.icu.util.ULocale)>
<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent.Builder setModelName(java.lang.String)>
<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent.Builder setResultId(java.lang.String)>
<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent.Builder setScores(float[])>
android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent
<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent$Builder
<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent$Builder: void <init>(int)>
<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent$Builder: android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent build()>
android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent
<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent$Builder
<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent$Builder: void <init>(int)>
<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent build()>
android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent
<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent$Builder
<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent$Builder: void <init>(int)>
<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent build()>
android.view.textclassifier.TextClassifierEvent$TextSelectionEvent
<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeSuggestedWordEndIndex()>
<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeSuggestedWordStartIndex()>
<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeWordEndIndex()>
<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeWordStartIndex()>
<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder
<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: void <init>(int)>
<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent build()>
<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeSuggestedWordEndIndex(int)>
<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeSuggestedWordStartIndex(int)>
<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeWordEndIndex(int)>
<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeWordStartIndex(int)>
android.view.textclassifier.TextLanguage
<android.view.textclassifier.TextLanguage: int describeContents()>
<android.view.textclassifier.TextLanguage: float getConfidenceScore(android.icu.util.ULocale)>
<android.view.textclassifier.TextLanguage: android.os.Bundle getExtras()>
<android.view.textclassifier.TextLanguage: java.lang.String getId()>
<android.view.textclassifier.TextLanguage: android.icu.util.ULocale getLocale(int)>
<android.view.textclassifier.TextLanguage: int getLocaleHypothesisCount()>
<android.view.textclassifier.TextLanguage: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextLanguage: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.TextLanguage$Builder
<android.view.textclassifier.TextLanguage$Builder: void <init>()>
<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage build()>
<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder putLocale(android.icu.util.ULocale,float)>
<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder setId(java.lang.String)>
android.view.textclassifier.TextLanguage$Request
<android.view.textclassifier.TextLanguage$Request: int describeContents()>
<android.view.textclassifier.TextLanguage$Request: java.lang.String getCallingPackageName()>
<android.view.textclassifier.TextLanguage$Request: android.os.Bundle getExtras()>
<android.view.textclassifier.TextLanguage$Request: java.lang.CharSequence getText()>
<android.view.textclassifier.TextLanguage$Request: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextLanguage$Request: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.TextLanguage$Request$Builder
<android.view.textclassifier.TextLanguage$Request$Builder: void <init>(java.lang.CharSequence)>
<android.view.textclassifier.TextLanguage$Request$Builder: android.view.textclassifier.TextLanguage$Request build()>
<android.view.textclassifier.TextLanguage$Request$Builder: android.view.textclassifier.TextLanguage$Request$Builder setExtras(android.os.Bundle)>
android.view.textclassifier.TextLinks
<android.view.textclassifier.TextLinks: int apply(android.text.Spannable,int,java.util.function.Function)>
<android.view.textclassifier.TextLinks: int describeContents()>
<android.view.textclassifier.TextLinks: android.os.Bundle getExtras()>
<android.view.textclassifier.TextLinks: java.util.Collection getLinks()>
<android.view.textclassifier.TextLinks: java.lang.CharSequence getText()>
<android.view.textclassifier.TextLinks: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextLinks: int APPLY_STRATEGY_IGNORE>
<android.view.textclassifier.TextLinks: int APPLY_STRATEGY_REPLACE>
<android.view.textclassifier.TextLinks: android.os.Parcelable$Creator CREATOR>
<android.view.textclassifier.TextLinks: int STATUS_DIFFERENT_TEXT>
<android.view.textclassifier.TextLinks: int STATUS_LINKS_APPLIED>
<android.view.textclassifier.TextLinks: int STATUS_NO_LINKS_APPLIED>
<android.view.textclassifier.TextLinks: int STATUS_NO_LINKS_FOUND>
<android.view.textclassifier.TextLinks: int STATUS_UNSUPPORTED_CHARACTER>
android.view.textclassifier.TextLinks$Builder
<android.view.textclassifier.TextLinks$Builder: void <init>(java.lang.String)>
<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder addLink(int,int,java.util.Map)>
<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder addLink(int,int,java.util.Map,android.os.Bundle)>
<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks build()>
<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder clearTextLinks()>
<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder setExtras(android.os.Bundle)>
android.view.textclassifier.TextLinks$Request
<android.view.textclassifier.TextLinks$Request: int describeContents()>
<android.view.textclassifier.TextLinks$Request: java.lang.String getCallingPackageName()>
<android.view.textclassifier.TextLinks$Request: android.os.LocaleList getDefaultLocales()>
<android.view.textclassifier.TextLinks$Request: android.view.textclassifier.TextClassifier$EntityConfig getEntityConfig()>
<android.view.textclassifier.TextLinks$Request: android.os.Bundle getExtras()>
<android.view.textclassifier.TextLinks$Request: java.time.ZonedDateTime getReferenceTime()>
<android.view.textclassifier.TextLinks$Request: java.lang.CharSequence getText()>
<android.view.textclassifier.TextLinks$Request: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextLinks$Request: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.TextLinks$Request$Builder
<android.view.textclassifier.TextLinks$Request$Builder: void <init>(java.lang.CharSequence)>
<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request build()>
<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setDefaultLocales(android.os.LocaleList)>
<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setEntityConfig(android.view.textclassifier.TextClassifier$EntityConfig)>
<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setReferenceTime(java.time.ZonedDateTime)>
android.view.textclassifier.TextLinks$TextLink
<android.view.textclassifier.TextLinks$TextLink: int describeContents()>
<android.view.textclassifier.TextLinks$TextLink: float getConfidenceScore(java.lang.String)>
<android.view.textclassifier.TextLinks$TextLink: int getEnd()>
<android.view.textclassifier.TextLinks$TextLink: java.lang.String getEntity(int)>
<android.view.textclassifier.TextLinks$TextLink: int getEntityCount()>
<android.view.textclassifier.TextLinks$TextLink: android.os.Bundle getExtras()>
<android.view.textclassifier.TextLinks$TextLink: int getStart()>
<android.view.textclassifier.TextLinks$TextLink: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextLinks$TextLink: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.TextLinks$TextLinkSpan
<android.view.textclassifier.TextLinks$TextLinkSpan: void <init>(android.view.textclassifier.TextLinks$TextLink)>
<android.view.textclassifier.TextLinks$TextLinkSpan: android.view.textclassifier.TextLinks$TextLink getTextLink()>
<android.view.textclassifier.TextLinks$TextLinkSpan: void onClick(android.view.View)>
android.view.textclassifier.TextSelection
<android.view.textclassifier.TextSelection: int describeContents()>
<android.view.textclassifier.TextSelection: float getConfidenceScore(java.lang.String)>
<android.view.textclassifier.TextSelection: java.lang.String getEntity(int)>
<android.view.textclassifier.TextSelection: int getEntityCount()>
<android.view.textclassifier.TextSelection: android.os.Bundle getExtras()>
<android.view.textclassifier.TextSelection: java.lang.String getId()>
<android.view.textclassifier.TextSelection: int getSelectionEndIndex()>
<android.view.textclassifier.TextSelection: int getSelectionStartIndex()>
<android.view.textclassifier.TextSelection: android.view.textclassifier.TextClassification getTextClassification()>
<android.view.textclassifier.TextSelection: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextSelection: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.TextSelection$Builder
<android.view.textclassifier.TextSelection$Builder: void <init>(int,int)>
<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection build()>
<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setEntityType(java.lang.String,float)>
<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setId(java.lang.String)>
<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setTextClassification(android.view.textclassifier.TextClassification)>
android.view.textclassifier.TextSelection$Request
<android.view.textclassifier.TextSelection$Request: int describeContents()>
<android.view.textclassifier.TextSelection$Request: java.lang.String getCallingPackageName()>
<android.view.textclassifier.TextSelection$Request: android.os.LocaleList getDefaultLocales()>
<android.view.textclassifier.TextSelection$Request: int getEndIndex()>
<android.view.textclassifier.TextSelection$Request: android.os.Bundle getExtras()>
<android.view.textclassifier.TextSelection$Request: int getStartIndex()>
<android.view.textclassifier.TextSelection$Request: java.lang.CharSequence getText()>
<android.view.textclassifier.TextSelection$Request: boolean shouldIncludeTextClassification()>
<android.view.textclassifier.TextSelection$Request: void writeToParcel(android.os.Parcel,int)>
<android.view.textclassifier.TextSelection$Request: android.os.Parcelable$Creator CREATOR>
android.view.textclassifier.TextSelection$Request$Builder
<android.view.textclassifier.TextSelection$Request$Builder: void <init>(java.lang.CharSequence,int,int)>
<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request build()>
<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request$Builder setDefaultLocales(android.os.LocaleList)>
<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request$Builder setExtras(android.os.Bundle)>
<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request$Builder setIncludeTextClassification(boolean)>
android.view.textservice.SentenceSuggestionsInfo
<android.view.textservice.SentenceSuggestionsInfo: void <init>(android.view.textservice.SuggestionsInfo[],int[],int[])>
<android.view.textservice.SentenceSuggestionsInfo: void <init>(android.os.Parcel)>
<android.view.textservice.SentenceSuggestionsInfo: int describeContents()>
<android.view.textservice.SentenceSuggestionsInfo: int getLengthAt(int)>
<android.view.textservice.SentenceSuggestionsInfo: int getOffsetAt(int)>
<android.view.textservice.SentenceSuggestionsInfo: int getSuggestionsCount()>
<android.view.textservice.SentenceSuggestionsInfo: android.view.textservice.SuggestionsInfo getSuggestionsInfoAt(int)>
<android.view.textservice.SentenceSuggestionsInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.textservice.SentenceSuggestionsInfo: android.os.Parcelable$Creator CREATOR>
android.view.textservice.SpellCheckerInfo
<android.view.textservice.SpellCheckerInfo: int describeContents()>
<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()>
<android.view.textservice.SpellCheckerInfo: java.lang.String getId()>
<android.view.textservice.SpellCheckerInfo: java.lang.String getPackageName()>
<android.view.textservice.SpellCheckerInfo: android.content.pm.ServiceInfo getServiceInfo()>
<android.view.textservice.SpellCheckerInfo: java.lang.String getSettingsActivity()>
<android.view.textservice.SpellCheckerInfo: android.view.textservice.SpellCheckerSubtype getSubtypeAt(int)>
<android.view.textservice.SpellCheckerInfo: int getSubtypeCount()>
<android.view.textservice.SpellCheckerInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.view.textservice.SpellCheckerInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.view.textservice.SpellCheckerInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.textservice.SpellCheckerInfo: android.os.Parcelable$Creator CREATOR>
android.view.textservice.SpellCheckerSession
<android.view.textservice.SpellCheckerSession: void cancel()>
<android.view.textservice.SpellCheckerSession: void close()>
<android.view.textservice.SpellCheckerSession: void getSentenceSuggestions(android.view.textservice.TextInfo[],int)>
<android.view.textservice.SpellCheckerSession: android.view.textservice.SpellCheckerInfo getSpellChecker()>
<android.view.textservice.SpellCheckerSession: void getSuggestions(android.view.textservice.TextInfo,int)>
<android.view.textservice.SpellCheckerSession: void getSuggestions(android.view.textservice.TextInfo[],int,boolean)>
<android.view.textservice.SpellCheckerSession: boolean isSessionDisconnected()>
<android.view.textservice.SpellCheckerSession: java.lang.String SERVICE_META_DATA>
android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener: void onGetSentenceSuggestions(android.view.textservice.SentenceSuggestionsInfo[])>
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])>
android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams: android.os.Bundle getExtras()>
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams: java.util.Locale getLocale()>
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams: int getSupportedAttributes()>
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams: boolean shouldReferToSpellCheckerLanguageSettings()>
android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: void <init>()>
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams build()>
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder setExtras(android.os.Bundle)>
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder setLocale(java.util.Locale)>
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder setShouldReferToSpellCheckerLanguageSettings(boolean)>
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder setSupportedAttributes(int)>
android.view.textservice.SpellCheckerSubtype
<android.view.textservice.SpellCheckerSubtype: void <init>(int,java.lang.String,java.lang.String)>
<android.view.textservice.SpellCheckerSubtype: boolean containsExtraValueKey(java.lang.String)>
<android.view.textservice.SpellCheckerSubtype: int describeContents()>
<android.view.textservice.SpellCheckerSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValue()>
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValueOf(java.lang.String)>
<android.view.textservice.SpellCheckerSubtype: java.lang.String getLanguageTag()>
<android.view.textservice.SpellCheckerSubtype: java.lang.String getLocale()>
<android.view.textservice.SpellCheckerSubtype: int getNameResId()>
<android.view.textservice.SpellCheckerSubtype: void writeToParcel(android.os.Parcel,int)>
<android.view.textservice.SpellCheckerSubtype: android.os.Parcelable$Creator CREATOR>
android.view.textservice.SuggestionsInfo
<android.view.textservice.SuggestionsInfo: void <init>(int,java.lang.String[])>
<android.view.textservice.SuggestionsInfo: void <init>(int,java.lang.String[],int,int)>
<android.view.textservice.SuggestionsInfo: void <init>(android.os.Parcel)>
<android.view.textservice.SuggestionsInfo: int describeContents()>
<android.view.textservice.SuggestionsInfo: int getCookie()>
<android.view.textservice.SuggestionsInfo: int getSequence()>
<android.view.textservice.SuggestionsInfo: java.lang.String getSuggestionAt(int)>
<android.view.textservice.SuggestionsInfo: int getSuggestionsAttributes()>
<android.view.textservice.SuggestionsInfo: int getSuggestionsCount()>
<android.view.textservice.SuggestionsInfo: void setCookieAndSequence(int,int)>
<android.view.textservice.SuggestionsInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.textservice.SuggestionsInfo: android.os.Parcelable$Creator CREATOR>
<android.view.textservice.SuggestionsInfo: int RESULT_ATTR_DONT_SHOW_UI_FOR_SUGGESTIONS>
<android.view.textservice.SuggestionsInfo: int RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS>
<android.view.textservice.SuggestionsInfo: int RESULT_ATTR_IN_THE_DICTIONARY>
<android.view.textservice.SuggestionsInfo: int RESULT_ATTR_LOOKS_LIKE_GRAMMAR_ERROR>
<android.view.textservice.SuggestionsInfo: int RESULT_ATTR_LOOKS_LIKE_TYPO>
android.view.textservice.TextInfo
<android.view.textservice.TextInfo: void <init>(java.lang.String)>
<android.view.textservice.TextInfo: void <init>(java.lang.String,int,int)>
<android.view.textservice.TextInfo: void <init>(java.lang.CharSequence,int,int,int,int)>
<android.view.textservice.TextInfo: void <init>(android.os.Parcel)>
<android.view.textservice.TextInfo: int describeContents()>
<android.view.textservice.TextInfo: java.lang.CharSequence getCharSequence()>
<android.view.textservice.TextInfo: int getCookie()>
<android.view.textservice.TextInfo: int getSequence()>
<android.view.textservice.TextInfo: java.lang.String getText()>
<android.view.textservice.TextInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.textservice.TextInfo: android.os.Parcelable$Creator CREATOR>
android.view.textservice.TextServicesManager
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellCheckerInfo()>
<android.view.textservice.TextServicesManager: java.util.List getEnabledSpellCheckerInfos()>
<android.view.textservice.TextServicesManager: boolean isSpellCheckerEnabled()>
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle,java.util.Locale,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener,boolean)>
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams,java.util.concurrent.Executor,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener)>
android.view.translation.TranslationCapability
<android.view.translation.TranslationCapability: int describeContents()>
<android.view.translation.TranslationCapability: android.view.translation.TranslationSpec getSourceSpec()>
<android.view.translation.TranslationCapability: int getState()>
<android.view.translation.TranslationCapability: int getSupportedTranslationFlags()>
<android.view.translation.TranslationCapability: android.view.translation.TranslationSpec getTargetSpec()>
<android.view.translation.TranslationCapability: boolean isUiTranslationEnabled()>
<android.view.translation.TranslationCapability: void writeToParcel(android.os.Parcel,int)>
<android.view.translation.TranslationCapability: android.os.Parcelable$Creator CREATOR>
<android.view.translation.TranslationCapability: int STATE_AVAILABLE_TO_DOWNLOAD>
<android.view.translation.TranslationCapability: int STATE_DOWNLOADING>
<android.view.translation.TranslationCapability: int STATE_NOT_AVAILABLE>
<android.view.translation.TranslationCapability: int STATE_ON_DEVICE>
android.view.translation.TranslationContext
<android.view.translation.TranslationContext: int describeContents()>
<android.view.translation.TranslationContext: android.view.translation.TranslationSpec getSourceSpec()>
<android.view.translation.TranslationContext: android.view.translation.TranslationSpec getTargetSpec()>
<android.view.translation.TranslationContext: int getTranslationFlags()>
<android.view.translation.TranslationContext: void writeToParcel(android.os.Parcel,int)>
<android.view.translation.TranslationContext: android.os.Parcelable$Creator CREATOR>
<android.view.translation.TranslationContext: int FLAG_DEFINITIONS>
<android.view.translation.TranslationContext: int FLAG_LOW_LATENCY>
<android.view.translation.TranslationContext: int FLAG_TRANSLITERATION>
android.view.translation.TranslationContext$Builder
<android.view.translation.TranslationContext$Builder: void <init>(android.view.translation.TranslationSpec,android.view.translation.TranslationSpec)>
<android.view.translation.TranslationContext$Builder: android.view.translation.TranslationContext build()>
<android.view.translation.TranslationContext$Builder: android.view.translation.TranslationContext$Builder setTranslationFlags(int)>
android.view.translation.TranslationManager
<android.view.translation.TranslationManager: void addOnDeviceTranslationCapabilityUpdateListener(java.util.concurrent.Executor,java.util.function.Consumer)>
<android.view.translation.TranslationManager: void createOnDeviceTranslator(android.view.translation.TranslationContext,java.util.concurrent.Executor,java.util.function.Consumer)>
<android.view.translation.TranslationManager: java.util.Set getOnDeviceTranslationCapabilities(int,int)>
<android.view.translation.TranslationManager: android.app.PendingIntent getOnDeviceTranslationSettingsActivityIntent()>
<android.view.translation.TranslationManager: void removeOnDeviceTranslationCapabilityUpdateListener(java.util.function.Consumer)>
android.view.translation.TranslationRequest
<android.view.translation.TranslationRequest: int describeContents()>
<android.view.translation.TranslationRequest: int getFlags()>
<android.view.translation.TranslationRequest: java.util.List getTranslationRequestValues()>
<android.view.translation.TranslationRequest: java.util.List getViewTranslationRequests()>
<android.view.translation.TranslationRequest: void writeToParcel(android.os.Parcel,int)>
<android.view.translation.TranslationRequest: android.os.Parcelable$Creator CREATOR>
<android.view.translation.TranslationRequest: int FLAG_DICTIONARY_RESULT>
<android.view.translation.TranslationRequest: int FLAG_PARTIAL_RESPONSES>
<android.view.translation.TranslationRequest: int FLAG_TRANSLATION_RESULT>
<android.view.translation.TranslationRequest: int FLAG_TRANSLITERATION_RESULT>
android.view.translation.TranslationRequest$Builder
<android.view.translation.TranslationRequest$Builder: void <init>()>
<android.view.translation.TranslationRequest$Builder: android.view.translation.TranslationRequest build()>
<android.view.translation.TranslationRequest$Builder: android.view.translation.TranslationRequest$Builder setFlags(int)>
<android.view.translation.TranslationRequest$Builder: android.view.translation.TranslationRequest$Builder setTranslationRequestValues(java.util.List)>
<android.view.translation.TranslationRequest$Builder: android.view.translation.TranslationRequest$Builder setViewTranslationRequests(java.util.List)>
android.view.translation.TranslationRequestValue
<android.view.translation.TranslationRequestValue: int describeContents()>
<android.view.translation.TranslationRequestValue: android.view.translation.TranslationRequestValue forText(java.lang.CharSequence)>
<android.view.translation.TranslationRequestValue: java.lang.CharSequence getText()>
<android.view.translation.TranslationRequestValue: void writeToParcel(android.os.Parcel,int)>
<android.view.translation.TranslationRequestValue: android.os.Parcelable$Creator CREATOR>
android.view.translation.TranslationResponse
<android.view.translation.TranslationResponse: int describeContents()>
<android.view.translation.TranslationResponse: android.util.SparseArray getTranslationResponseValues()>
<android.view.translation.TranslationResponse: int getTranslationStatus()>
<android.view.translation.TranslationResponse: android.util.SparseArray getViewTranslationResponses()>
<android.view.translation.TranslationResponse: boolean isFinalResponse()>
<android.view.translation.TranslationResponse: void writeToParcel(android.os.Parcel,int)>
<android.view.translation.TranslationResponse: android.os.Parcelable$Creator CREATOR>
<android.view.translation.TranslationResponse: int TRANSLATION_STATUS_CONTEXT_UNSUPPORTED>
<android.view.translation.TranslationResponse: int TRANSLATION_STATUS_SUCCESS>
<android.view.translation.TranslationResponse: int TRANSLATION_STATUS_UNKNOWN_ERROR>
android.view.translation.TranslationResponse$Builder
<android.view.translation.TranslationResponse$Builder: void <init>(int)>
<android.view.translation.TranslationResponse$Builder: android.view.translation.TranslationResponse build()>
<android.view.translation.TranslationResponse$Builder: android.view.translation.TranslationResponse$Builder setFinalResponse(boolean)>
<android.view.translation.TranslationResponse$Builder: android.view.translation.TranslationResponse$Builder setTranslationResponseValue(int,android.view.translation.TranslationResponseValue)>
<android.view.translation.TranslationResponse$Builder: android.view.translation.TranslationResponse$Builder setTranslationResponseValues(android.util.SparseArray)>
<android.view.translation.TranslationResponse$Builder: android.view.translation.TranslationResponse$Builder setViewTranslationResponse(int,android.view.translation.ViewTranslationResponse)>
<android.view.translation.TranslationResponse$Builder: android.view.translation.TranslationResponse$Builder setViewTranslationResponses(android.util.SparseArray)>
android.view.translation.TranslationResponseValue
<android.view.translation.TranslationResponseValue: int describeContents()>
<android.view.translation.TranslationResponseValue: android.view.translation.TranslationResponseValue forError()>
<android.view.translation.TranslationResponseValue: android.os.Bundle getExtras()>
<android.view.translation.TranslationResponseValue: int getStatusCode()>
<android.view.translation.TranslationResponseValue: java.lang.CharSequence getText()>
<android.view.translation.TranslationResponseValue: java.lang.CharSequence getTransliteration()>
<android.view.translation.TranslationResponseValue: void writeToParcel(android.os.Parcel,int)>
<android.view.translation.TranslationResponseValue: android.os.Parcelable$Creator CREATOR>
<android.view.translation.TranslationResponseValue: java.lang.String EXTRA_DEFINITIONS>
<android.view.translation.TranslationResponseValue: int STATUS_ERROR>
<android.view.translation.TranslationResponseValue: int STATUS_SUCCESS>
android.view.translation.TranslationResponseValue$Builder
<android.view.translation.TranslationResponseValue$Builder: void <init>(int)>
<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue build()>
<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue$Builder setExtras(android.os.Bundle)>
<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue$Builder setText(java.lang.CharSequence)>
<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue$Builder setTransliteration(java.lang.CharSequence)>
android.view.translation.TranslationSpec
<android.view.translation.TranslationSpec: void <init>(android.icu.util.ULocale,int)>
<android.view.translation.TranslationSpec: int describeContents()>
<android.view.translation.TranslationSpec: int getDataFormat()>
<android.view.translation.TranslationSpec: android.icu.util.ULocale getLocale()>
<android.view.translation.TranslationSpec: void writeToParcel(android.os.Parcel,int)>
<android.view.translation.TranslationSpec: android.os.Parcelable$Creator CREATOR>
<android.view.translation.TranslationSpec: int DATA_FORMAT_TEXT>
android.view.translation.Translator
<android.view.translation.Translator: void destroy()>
<android.view.translation.Translator: boolean isDestroyed()>
<android.view.translation.Translator: void translate(android.view.translation.TranslationRequest,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer)>
android.view.translation.UiTranslationManager
<android.view.translation.UiTranslationManager: void registerUiTranslationStateCallback(java.util.concurrent.Executor,android.view.translation.UiTranslationStateCallback)>
<android.view.translation.UiTranslationManager: void unregisterUiTranslationStateCallback(android.view.translation.UiTranslationStateCallback)>
android.view.translation.UiTranslationStateCallback
<android.view.translation.UiTranslationStateCallback: void onFinished()>
<android.view.translation.UiTranslationStateCallback: void onFinished(java.lang.String)>
<android.view.translation.UiTranslationStateCallback: void onPaused()>
<android.view.translation.UiTranslationStateCallback: void onPaused(java.lang.String)>
<android.view.translation.UiTranslationStateCallback: void onResumed(android.icu.util.ULocale,android.icu.util.ULocale)>
<android.view.translation.UiTranslationStateCallback: void onResumed(android.icu.util.ULocale,android.icu.util.ULocale,java.lang.String)>
<android.view.translation.UiTranslationStateCallback: void onStarted(android.icu.util.ULocale,android.icu.util.ULocale)>
<android.view.translation.UiTranslationStateCallback: void onStarted(android.icu.util.ULocale,android.icu.util.ULocale,java.lang.String)>
android.view.translation.ViewTranslationCallback
<android.view.translation.ViewTranslationCallback: boolean onClearTranslation(android.view.View)>
<android.view.translation.ViewTranslationCallback: boolean onHideTranslation(android.view.View)>
<android.view.translation.ViewTranslationCallback: boolean onShowTranslation(android.view.View)>
android.view.translation.ViewTranslationRequest
<android.view.translation.ViewTranslationRequest: int describeContents()>
<android.view.translation.ViewTranslationRequest: android.view.autofill.AutofillId getAutofillId()>
<android.view.translation.ViewTranslationRequest: java.util.Set getKeys()>
<android.view.translation.ViewTranslationRequest: android.view.translation.TranslationRequestValue getValue(java.lang.String)>
<android.view.translation.ViewTranslationRequest: void writeToParcel(android.os.Parcel,int)>
<android.view.translation.ViewTranslationRequest: android.os.Parcelable$Creator CREATOR>
<android.view.translation.ViewTranslationRequest: java.lang.String ID_TEXT>
android.view.translation.ViewTranslationRequest$Builder
<android.view.translation.ViewTranslationRequest$Builder: void <init>(android.view.autofill.AutofillId)>
<android.view.translation.ViewTranslationRequest$Builder: void <init>(android.view.autofill.AutofillId,long)>
<android.view.translation.ViewTranslationRequest$Builder: android.view.translation.ViewTranslationRequest build()>
<android.view.translation.ViewTranslationRequest$Builder: android.view.translation.ViewTranslationRequest$Builder setValue(java.lang.String,android.view.translation.TranslationRequestValue)>
android.view.translation.ViewTranslationResponse
<android.view.translation.ViewTranslationResponse: int describeContents()>
<android.view.translation.ViewTranslationResponse: android.view.autofill.AutofillId getAutofillId()>
<android.view.translation.ViewTranslationResponse: java.util.Set getKeys()>
<android.view.translation.ViewTranslationResponse: android.view.translation.TranslationResponseValue getValue(java.lang.String)>
<android.view.translation.ViewTranslationResponse: void writeToParcel(android.os.Parcel,int)>
<android.view.translation.ViewTranslationResponse: android.os.Parcelable$Creator CREATOR>
android.view.translation.ViewTranslationResponse$Builder
<android.view.translation.ViewTranslationResponse$Builder: void <init>(android.view.autofill.AutofillId)>
<android.view.translation.ViewTranslationResponse$Builder: android.view.translation.ViewTranslationResponse build()>
<android.view.translation.ViewTranslationResponse$Builder: android.view.translation.ViewTranslationResponse$Builder setValue(java.lang.String,android.view.translation.TranslationResponseValue)>
android.webkit.ClientCertRequest
<android.webkit.ClientCertRequest: void <init>()>
<android.webkit.ClientCertRequest: void cancel()>
<android.webkit.ClientCertRequest: java.lang.String getHost()>
<android.webkit.ClientCertRequest: java.lang.String[] getKeyTypes()>
<android.webkit.ClientCertRequest: int getPort()>
<android.webkit.ClientCertRequest: java.security.Principal[] getPrincipals()>
<android.webkit.ClientCertRequest: void ignore()>
<android.webkit.ClientCertRequest: void proceed(java.security.PrivateKey,java.security.cert.X509Certificate[])>
android.webkit.ConsoleMessage
<android.webkit.ConsoleMessage: void <init>(java.lang.String,java.lang.String,int,android.webkit.ConsoleMessage$MessageLevel)>
<android.webkit.ConsoleMessage: int lineNumber()>
<android.webkit.ConsoleMessage: java.lang.String message()>
<android.webkit.ConsoleMessage: android.webkit.ConsoleMessage$MessageLevel messageLevel()>
<android.webkit.ConsoleMessage: java.lang.String sourceId()>
android.webkit.ConsoleMessage$MessageLevel
<android.webkit.ConsoleMessage$MessageLevel: android.webkit.ConsoleMessage$MessageLevel DEBUG>
<android.webkit.ConsoleMessage$MessageLevel: android.webkit.ConsoleMessage$MessageLevel ERROR>
<android.webkit.ConsoleMessage$MessageLevel: android.webkit.ConsoleMessage$MessageLevel LOG>
<android.webkit.ConsoleMessage$MessageLevel: android.webkit.ConsoleMessage$MessageLevel TIP>
<android.webkit.ConsoleMessage$MessageLevel: android.webkit.ConsoleMessage$MessageLevel WARNING>
android.webkit.CookieManager
<android.webkit.CookieManager: void <init>()>
<android.webkit.CookieManager: boolean acceptCookie()>
<android.webkit.CookieManager: boolean acceptThirdPartyCookies(android.webkit.WebView)>
<android.webkit.CookieManager: boolean allowFileSchemeCookies()>
<android.webkit.CookieManager: void flush()>
<android.webkit.CookieManager: java.lang.String getCookie(java.lang.String)>
<android.webkit.CookieManager: android.webkit.CookieManager getInstance()>
<android.webkit.CookieManager: boolean hasCookies()>
<android.webkit.CookieManager: void removeAllCookie()>
<android.webkit.CookieManager: void removeAllCookies(android.webkit.ValueCallback)>
<android.webkit.CookieManager: void removeExpiredCookie()>
<android.webkit.CookieManager: void removeSessionCookie()>
<android.webkit.CookieManager: void removeSessionCookies(android.webkit.ValueCallback)>
<android.webkit.CookieManager: void setAcceptCookie(boolean)>
<android.webkit.CookieManager: void setAcceptFileSchemeCookies(boolean)>
<android.webkit.CookieManager: void setAcceptThirdPartyCookies(android.webkit.WebView,boolean)>
<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String)>
<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String,android.webkit.ValueCallback)>
android.webkit.CookieSyncManager
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager createInstance(android.content.Context)>
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager getInstance()>
<android.webkit.CookieSyncManager: void resetSync()>
<android.webkit.CookieSyncManager: void run()>
<android.webkit.CookieSyncManager: void startSync()>
<android.webkit.CookieSyncManager: void stopSync()>
<android.webkit.CookieSyncManager: void sync()>
<android.webkit.CookieSyncManager: void syncFromRamToFlash()>
android.webkit.DateSorter
<android.webkit.DateSorter: void <init>(android.content.Context)>
<android.webkit.DateSorter: long getBoundary(int)>
<android.webkit.DateSorter: int getIndex(long)>
<android.webkit.DateSorter: java.lang.String getLabel(int)>
<android.webkit.DateSorter: int DAY_COUNT>
android.webkit.DownloadListener
<android.webkit.DownloadListener: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)>
android.webkit.GeolocationPermissions
<android.webkit.GeolocationPermissions: void allow(java.lang.String)>
<android.webkit.GeolocationPermissions: void clear(java.lang.String)>
<android.webkit.GeolocationPermissions: void clearAll()>
<android.webkit.GeolocationPermissions: void getAllowed(java.lang.String,android.webkit.ValueCallback)>
<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()>
<android.webkit.GeolocationPermissions: void getOrigins(android.webkit.ValueCallback)>
android.webkit.GeolocationPermissions$Callback
<android.webkit.GeolocationPermissions$Callback: void invoke(java.lang.String,boolean,boolean)>
android.webkit.HttpAuthHandler
<android.webkit.HttpAuthHandler: void cancel()>
<android.webkit.HttpAuthHandler: void proceed(java.lang.String,java.lang.String)>
<android.webkit.HttpAuthHandler: boolean useHttpAuthUsernamePassword()>
android.webkit.JavascriptInterface
android.webkit.JsPromptResult
<android.webkit.JsPromptResult: void confirm(java.lang.String)>
android.webkit.JsResult
<android.webkit.JsResult: void cancel()>
<android.webkit.JsResult: void confirm()>
android.webkit.MimeTypeMap
<android.webkit.MimeTypeMap: java.lang.String getExtensionFromMimeType(java.lang.String)>
<android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)>
<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)>
<android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()>
<android.webkit.MimeTypeMap: boolean hasExtension(java.lang.String)>
<android.webkit.MimeTypeMap: boolean hasMimeType(java.lang.String)>
android.webkit.PermissionRequest
<android.webkit.PermissionRequest: void <init>()>
<android.webkit.PermissionRequest: void deny()>
<android.webkit.PermissionRequest: android.net.Uri getOrigin()>
<android.webkit.PermissionRequest: java.lang.String[] getResources()>
<android.webkit.PermissionRequest: void grant(java.lang.String[])>
<android.webkit.PermissionRequest: java.lang.String RESOURCE_AUDIO_CAPTURE>
<android.webkit.PermissionRequest: java.lang.String RESOURCE_MIDI_SYSEX>
<android.webkit.PermissionRequest: java.lang.String RESOURCE_PROTECTED_MEDIA_ID>
<android.webkit.PermissionRequest: java.lang.String RESOURCE_VIDEO_CAPTURE>
android.webkit.PluginStub
<android.webkit.PluginStub: android.view.View getEmbeddedView(int,android.content.Context)>
<android.webkit.PluginStub: android.view.View getFullScreenView(int,android.content.Context)>
android.webkit.RenderProcessGoneDetail
<android.webkit.RenderProcessGoneDetail: void <init>()>
<android.webkit.RenderProcessGoneDetail: boolean didCrash()>
<android.webkit.RenderProcessGoneDetail: int rendererPriorityAtExit()>
android.webkit.SafeBrowsingResponse
<android.webkit.SafeBrowsingResponse: void <init>()>
<android.webkit.SafeBrowsingResponse: void backToSafety(boolean)>
<android.webkit.SafeBrowsingResponse: void proceed(boolean)>
<android.webkit.SafeBrowsingResponse: void showInterstitial(boolean)>
android.webkit.ServiceWorkerClient
<android.webkit.ServiceWorkerClient: void <init>()>
<android.webkit.ServiceWorkerClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebResourceRequest)>
android.webkit.ServiceWorkerController
<android.webkit.ServiceWorkerController: void <init>()>
<android.webkit.ServiceWorkerController: android.webkit.ServiceWorkerController getInstance()>
<android.webkit.ServiceWorkerController: android.webkit.ServiceWorkerWebSettings getServiceWorkerWebSettings()>
<android.webkit.ServiceWorkerController: void setServiceWorkerClient(android.webkit.ServiceWorkerClient)>
android.webkit.ServiceWorkerWebSettings
<android.webkit.ServiceWorkerWebSettings: void <init>()>
<android.webkit.ServiceWorkerWebSettings: boolean getAllowContentAccess()>
<android.webkit.ServiceWorkerWebSettings: boolean getAllowFileAccess()>
<android.webkit.ServiceWorkerWebSettings: boolean getBlockNetworkLoads()>
<android.webkit.ServiceWorkerWebSettings: int getCacheMode()>
<android.webkit.ServiceWorkerWebSettings: void setAllowContentAccess(boolean)>
<android.webkit.ServiceWorkerWebSettings: void setAllowFileAccess(boolean)>
<android.webkit.ServiceWorkerWebSettings: void setBlockNetworkLoads(boolean)>
<android.webkit.ServiceWorkerWebSettings: void setCacheMode(int)>
android.webkit.SslErrorHandler
<android.webkit.SslErrorHandler: void cancel()>
<android.webkit.SslErrorHandler: void proceed()>
android.webkit.TracingConfig
<android.webkit.TracingConfig: java.util.List getCustomIncludedCategories()>
<android.webkit.TracingConfig: int getPredefinedCategories()>
<android.webkit.TracingConfig: int getTracingMode()>
<android.webkit.TracingConfig: int CATEGORIES_ALL>
<android.webkit.TracingConfig: int CATEGORIES_ANDROID_WEBVIEW>
<android.webkit.TracingConfig: int CATEGORIES_FRAME_VIEWER>
<android.webkit.TracingConfig: int CATEGORIES_INPUT_LATENCY>
<android.webkit.TracingConfig: int CATEGORIES_JAVASCRIPT_AND_RENDERING>
<android.webkit.TracingConfig: int CATEGORIES_NONE>
<android.webkit.TracingConfig: int CATEGORIES_RENDERING>
<android.webkit.TracingConfig: int CATEGORIES_WEB_DEVELOPER>
<android.webkit.TracingConfig: int RECORD_CONTINUOUSLY>
<android.webkit.TracingConfig: int RECORD_UNTIL_FULL>
android.webkit.TracingConfig$Builder
<android.webkit.TracingConfig$Builder: void <init>()>
<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig$Builder addCategories(int[])>
<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig$Builder addCategories(java.lang.String[])>
<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig$Builder addCategories(java.util.Collection)>
<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig build()>
<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig$Builder setTracingMode(int)>
android.webkit.TracingController
<android.webkit.TracingController: void <init>()>
<android.webkit.TracingController: android.webkit.TracingController getInstance()>
<android.webkit.TracingController: boolean isTracing()>
<android.webkit.TracingController: void start(android.webkit.TracingConfig)>
<android.webkit.TracingController: boolean stop(java.io.OutputStream,java.util.concurrent.Executor)>
android.webkit.URLUtil
<android.webkit.URLUtil: void <init>()>
<android.webkit.URLUtil: java.lang.String composeSearchUrl(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.URLUtil: byte[] decode(byte[])>
<android.webkit.URLUtil: java.lang.String guessFileName(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.URLUtil: java.lang.String guessUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isAboutUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isAssetUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isContentUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isCookielessProxyUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isDataUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isFileUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isHttpUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isHttpsUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isJavaScriptUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isNetworkUrl(java.lang.String)>
<android.webkit.URLUtil: boolean isValidUrl(java.lang.String)>
<android.webkit.URLUtil: java.lang.String stripAnchor(java.lang.String)>
android.webkit.ValueCallback
<android.webkit.ValueCallback: void onReceiveValue(java.lang.Object)>
android.webkit.WebBackForwardList
<android.webkit.WebBackForwardList: void <init>()>
<android.webkit.WebBackForwardList: android.webkit.WebBackForwardList clone()>
<android.webkit.WebBackForwardList: int getCurrentIndex()>
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getCurrentItem()>
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getItemAtIndex(int)>
<android.webkit.WebBackForwardList: int getSize()>
android.webkit.WebChromeClient
<android.webkit.WebChromeClient: void <init>()>
<android.webkit.WebChromeClient: android.graphics.Bitmap getDefaultVideoPoster()>
<android.webkit.WebChromeClient: android.view.View getVideoLoadingProgressView()>
<android.webkit.WebChromeClient: void getVisitedHistory(android.webkit.ValueCallback)>
<android.webkit.WebChromeClient: void onCloseWindow(android.webkit.WebView)>
<android.webkit.WebChromeClient: void onConsoleMessage(java.lang.String,int,java.lang.String)>
<android.webkit.WebChromeClient: boolean onConsoleMessage(android.webkit.ConsoleMessage)>
<android.webkit.WebChromeClient: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)>
<android.webkit.WebChromeClient: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)>
<android.webkit.WebChromeClient: void onGeolocationPermissionsHidePrompt()>
<android.webkit.WebChromeClient: void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions$Callback)>
<android.webkit.WebChromeClient: void onHideCustomView()>
<android.webkit.WebChromeClient: boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>
<android.webkit.WebChromeClient: boolean onJsBeforeUnload(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>
<android.webkit.WebChromeClient: boolean onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>
<android.webkit.WebChromeClient: boolean onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult)>
<android.webkit.WebChromeClient: boolean onJsTimeout()>
<android.webkit.WebChromeClient: void onPermissionRequest(android.webkit.PermissionRequest)>
<android.webkit.WebChromeClient: void onPermissionRequestCanceled(android.webkit.PermissionRequest)>
<android.webkit.WebChromeClient: void onProgressChanged(android.webkit.WebView,int)>
<android.webkit.WebChromeClient: void onReceivedIcon(android.webkit.WebView,android.graphics.Bitmap)>
<android.webkit.WebChromeClient: void onReceivedTitle(android.webkit.WebView,java.lang.String)>
<android.webkit.WebChromeClient: void onReceivedTouchIconUrl(android.webkit.WebView,java.lang.String,boolean)>
<android.webkit.WebChromeClient: void onRequestFocus(android.webkit.WebView)>
<android.webkit.WebChromeClient: void onShowCustomView(android.view.View,android.webkit.WebChromeClient$CustomViewCallback)>
<android.webkit.WebChromeClient: void onShowCustomView(android.view.View,int,android.webkit.WebChromeClient$CustomViewCallback)>
<android.webkit.WebChromeClient: boolean onShowFileChooser(android.webkit.WebView,android.webkit.ValueCallback,android.webkit.WebChromeClient$FileChooserParams)>
android.webkit.WebChromeClient$CustomViewCallback
<android.webkit.WebChromeClient$CustomViewCallback: void onCustomViewHidden()>
android.webkit.WebChromeClient$FileChooserParams
<android.webkit.WebChromeClient$FileChooserParams: void <init>()>
<android.webkit.WebChromeClient$FileChooserParams: android.content.Intent createIntent()>
<android.webkit.WebChromeClient$FileChooserParams: java.lang.String[] getAcceptTypes()>
<android.webkit.WebChromeClient$FileChooserParams: java.lang.String getFilenameHint()>
<android.webkit.WebChromeClient$FileChooserParams: int getMode()>
<android.webkit.WebChromeClient$FileChooserParams: java.lang.CharSequence getTitle()>
<android.webkit.WebChromeClient$FileChooserParams: boolean isCaptureEnabled()>
<android.webkit.WebChromeClient$FileChooserParams: android.net.Uri[] parseResult(int,android.content.Intent)>
<android.webkit.WebChromeClient$FileChooserParams: int MODE_OPEN>
<android.webkit.WebChromeClient$FileChooserParams: int MODE_OPEN_MULTIPLE>
<android.webkit.WebChromeClient$FileChooserParams: int MODE_SAVE>
android.webkit.WebHistoryItem
<android.webkit.WebHistoryItem: void <init>()>
<android.webkit.WebHistoryItem: android.webkit.WebHistoryItem clone()>
<android.webkit.WebHistoryItem: android.graphics.Bitmap getFavicon()>
<android.webkit.WebHistoryItem: java.lang.String getOriginalUrl()>
<android.webkit.WebHistoryItem: java.lang.String getTitle()>
<android.webkit.WebHistoryItem: java.lang.String getUrl()>
android.webkit.WebIconDatabase
<android.webkit.WebIconDatabase: void <init>()>
<android.webkit.WebIconDatabase: void close()>
<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase getInstance()>
<android.webkit.WebIconDatabase: void open(java.lang.String)>
<android.webkit.WebIconDatabase: void releaseIconForPageUrl(java.lang.String)>
<android.webkit.WebIconDatabase: void removeAllIcons()>
<android.webkit.WebIconDatabase: void requestIconForPageUrl(java.lang.String,android.webkit.WebIconDatabase$IconListener)>
<android.webkit.WebIconDatabase: void retainIconForPageUrl(java.lang.String)>
android.webkit.WebIconDatabase$IconListener
<android.webkit.WebIconDatabase$IconListener: void onReceivedIcon(java.lang.String,android.graphics.Bitmap)>
android.webkit.WebMessage
<android.webkit.WebMessage: void <init>(java.lang.String)>
<android.webkit.WebMessage: void <init>(java.lang.String,android.webkit.WebMessagePort[])>
<android.webkit.WebMessage: java.lang.String getData()>
<android.webkit.WebMessage: android.webkit.WebMessagePort[] getPorts()>
android.webkit.WebMessagePort
<android.webkit.WebMessagePort: void close()>
<android.webkit.WebMessagePort: void postMessage(android.webkit.WebMessage)>
<android.webkit.WebMessagePort: void setWebMessageCallback(android.webkit.WebMessagePort$WebMessageCallback)>
<android.webkit.WebMessagePort: void setWebMessageCallback(android.webkit.WebMessagePort$WebMessageCallback,android.os.Handler)>
android.webkit.WebMessagePort$WebMessageCallback
<android.webkit.WebMessagePort$WebMessageCallback: void <init>()>
<android.webkit.WebMessagePort$WebMessageCallback: void onMessage(android.webkit.WebMessagePort,android.webkit.WebMessage)>
android.webkit.WebResourceError
<android.webkit.WebResourceError: java.lang.CharSequence getDescription()>
<android.webkit.WebResourceError: int getErrorCode()>
android.webkit.WebResourceRequest
<android.webkit.WebResourceRequest: java.lang.String getMethod()>
<android.webkit.WebResourceRequest: java.util.Map getRequestHeaders()>
<android.webkit.WebResourceRequest: android.net.Uri getUrl()>
<android.webkit.WebResourceRequest: boolean hasGesture()>
<android.webkit.WebResourceRequest: boolean isForMainFrame()>
<android.webkit.WebResourceRequest: boolean isRedirect()>
android.webkit.WebResourceResponse
<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,java.io.InputStream)>
<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.util.Map,java.io.InputStream)>
<android.webkit.WebResourceResponse: java.io.InputStream getData()>
<android.webkit.WebResourceResponse: java.lang.String getEncoding()>
<android.webkit.WebResourceResponse: java.lang.String getMimeType()>
<android.webkit.WebResourceResponse: java.lang.String getReasonPhrase()>
<android.webkit.WebResourceResponse: java.util.Map getResponseHeaders()>
<android.webkit.WebResourceResponse: int getStatusCode()>
<android.webkit.WebResourceResponse: void setData(java.io.InputStream)>
<android.webkit.WebResourceResponse: void setEncoding(java.lang.String)>
<android.webkit.WebResourceResponse: void setMimeType(java.lang.String)>
<android.webkit.WebResourceResponse: void setResponseHeaders(java.util.Map)>
<android.webkit.WebResourceResponse: void setStatusCodeAndReasonPhrase(int,java.lang.String)>
android.webkit.WebSettings
<android.webkit.WebSettings: void <init>()>
<android.webkit.WebSettings: boolean enableSmoothTransition()>
<android.webkit.WebSettings: boolean getAllowContentAccess()>
<android.webkit.WebSettings: boolean getAllowFileAccess()>
<android.webkit.WebSettings: boolean getAllowFileAccessFromFileURLs()>
<android.webkit.WebSettings: boolean getAllowUniversalAccessFromFileURLs()>
<android.webkit.WebSettings: boolean getBlockNetworkImage()>
<android.webkit.WebSettings: boolean getBlockNetworkLoads()>
<android.webkit.WebSettings: boolean getBuiltInZoomControls()>
<android.webkit.WebSettings: int getCacheMode()>
<android.webkit.WebSettings: java.lang.String getCursiveFontFamily()>
<android.webkit.WebSettings: boolean getDatabaseEnabled()>
<android.webkit.WebSettings: java.lang.String getDatabasePath()>
<android.webkit.WebSettings: int getDefaultFixedFontSize()>
<android.webkit.WebSettings: int getDefaultFontSize()>
<android.webkit.WebSettings: java.lang.String getDefaultTextEncodingName()>
<android.webkit.WebSettings: java.lang.String getDefaultUserAgent(android.content.Context)>
<android.webkit.WebSettings: android.webkit.WebSettings$ZoomDensity getDefaultZoom()>
<android.webkit.WebSettings: int getDisabledActionModeMenuItems()>
<android.webkit.WebSettings: boolean getDisplayZoomControls()>
<android.webkit.WebSettings: boolean getDomStorageEnabled()>
<android.webkit.WebSettings: java.lang.String getFantasyFontFamily()>
<android.webkit.WebSettings: java.lang.String getFixedFontFamily()>
<android.webkit.WebSettings: int getForceDark()>
<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()>
<android.webkit.WebSettings: boolean getJavaScriptEnabled()>
<android.webkit.WebSettings: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()>
<android.webkit.WebSettings: boolean getLightTouchEnabled()>
<android.webkit.WebSettings: boolean getLoadWithOverviewMode()>
<android.webkit.WebSettings: boolean getLoadsImagesAutomatically()>
<android.webkit.WebSettings: boolean getMediaPlaybackRequiresUserGesture()>
<android.webkit.WebSettings: int getMinimumFontSize()>
<android.webkit.WebSettings: int getMinimumLogicalFontSize()>
<android.webkit.WebSettings: int getMixedContentMode()>
<android.webkit.WebSettings: boolean getOffscreenPreRaster()>
<android.webkit.WebSettings: android.webkit.WebSettings$PluginState getPluginState()>
<android.webkit.WebSettings: boolean getSafeBrowsingEnabled()>
<android.webkit.WebSettings: java.lang.String getSansSerifFontFamily()>
<android.webkit.WebSettings: boolean getSaveFormData()>
<android.webkit.WebSettings: boolean getSavePassword()>
<android.webkit.WebSettings: java.lang.String getSerifFontFamily()>
<android.webkit.WebSettings: java.lang.String getStandardFontFamily()>
<android.webkit.WebSettings: android.webkit.WebSettings$TextSize getTextSize()>
<android.webkit.WebSettings: int getTextZoom()>
<android.webkit.WebSettings: boolean getUseWideViewPort()>
<android.webkit.WebSettings: java.lang.String getUserAgentString()>
<android.webkit.WebSettings: boolean isAlgorithmicDarkeningAllowed()>
<android.webkit.WebSettings: void setAlgorithmicDarkeningAllowed(boolean)>
<android.webkit.WebSettings: void setAllowContentAccess(boolean)>
<android.webkit.WebSettings: void setAllowFileAccess(boolean)>
<android.webkit.WebSettings: void setAllowFileAccessFromFileURLs(boolean)>
<android.webkit.WebSettings: void setAllowUniversalAccessFromFileURLs(boolean)>
<android.webkit.WebSettings: void setBlockNetworkImage(boolean)>
<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)>
<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)>
<android.webkit.WebSettings: void setCacheMode(int)>
<android.webkit.WebSettings: void setCursiveFontFamily(java.lang.String)>
<android.webkit.WebSettings: void setDatabaseEnabled(boolean)>
<android.webkit.WebSettings: void setDatabasePath(java.lang.String)>
<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>
<android.webkit.WebSettings: void setDefaultFontSize(int)>
<android.webkit.WebSettings: void setDefaultTextEncodingName(java.lang.String)>
<android.webkit.WebSettings: void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)>
<android.webkit.WebSettings: void setDisabledActionModeMenuItems(int)>
<android.webkit.WebSettings: void setDisplayZoomControls(boolean)>
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>
<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)>
<android.webkit.WebSettings: void setFantasyFontFamily(java.lang.String)>
<android.webkit.WebSettings: void setFixedFontFamily(java.lang.String)>
<android.webkit.WebSettings: void setForceDark(int)>
<android.webkit.WebSettings: void setGeolocationDatabasePath(java.lang.String)>
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>
<android.webkit.WebSettings: void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm)>
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)>
<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)>
<android.webkit.WebSettings: void setLoadsImagesAutomatically(boolean)>
<android.webkit.WebSettings: void setMediaPlaybackRequiresUserGesture(boolean)>
<android.webkit.WebSettings: void setMinimumFontSize(int)>
<android.webkit.WebSettings: void setMinimumLogicalFontSize(int)>
<android.webkit.WebSettings: void setMixedContentMode(int)>
<android.webkit.WebSettings: void setNeedInitialFocus(boolean)>
<android.webkit.WebSettings: void setOffscreenPreRaster(boolean)>
<android.webkit.WebSettings: void setPluginState(android.webkit.WebSettings$PluginState)>
<android.webkit.WebSettings: void setRenderPriority(android.webkit.WebSettings$RenderPriority)>
<android.webkit.WebSettings: void setSafeBrowsingEnabled(boolean)>
<android.webkit.WebSettings: void setSansSerifFontFamily(java.lang.String)>
<android.webkit.WebSettings: void setSaveFormData(boolean)>
<android.webkit.WebSettings: void setSavePassword(boolean)>
<android.webkit.WebSettings: void setSerifFontFamily(java.lang.String)>
<android.webkit.WebSettings: void setStandardFontFamily(java.lang.String)>
<android.webkit.WebSettings: void setSupportMultipleWindows(boolean)>
<android.webkit.WebSettings: void setSupportZoom(boolean)>
<android.webkit.WebSettings: void setTextSize(android.webkit.WebSettings$TextSize)>
<android.webkit.WebSettings: void setTextZoom(int)>
<android.webkit.WebSettings: void setUseWideViewPort(boolean)>
<android.webkit.WebSettings: void setUserAgentString(java.lang.String)>
<android.webkit.WebSettings: boolean supportMultipleWindows()>
<android.webkit.WebSettings: boolean supportZoom()>
<android.webkit.WebSettings: int FORCE_DARK_AUTO>
<android.webkit.WebSettings: int FORCE_DARK_OFF>
<android.webkit.WebSettings: int FORCE_DARK_ON>
<android.webkit.WebSettings: int LOAD_CACHE_ELSE_NETWORK>
<android.webkit.WebSettings: int LOAD_CACHE_ONLY>
<android.webkit.WebSettings: int LOAD_DEFAULT>
<android.webkit.WebSettings: int LOAD_NORMAL>
<android.webkit.WebSettings: int LOAD_NO_CACHE>
<android.webkit.WebSettings: int MENU_ITEM_NONE>
<android.webkit.WebSettings: int MENU_ITEM_PROCESS_TEXT>
<android.webkit.WebSettings: int MENU_ITEM_SHARE>
<android.webkit.WebSettings: int MENU_ITEM_WEB_SEARCH>
<android.webkit.WebSettings: int MIXED_CONTENT_ALWAYS_ALLOW>
<android.webkit.WebSettings: int MIXED_CONTENT_COMPATIBILITY_MODE>
<android.webkit.WebSettings: int MIXED_CONTENT_NEVER_ALLOW>
android.webkit.WebSettings$LayoutAlgorithm
<android.webkit.WebSettings$LayoutAlgorithm: android.webkit.WebSettings$LayoutAlgorithm NARROW_COLUMNS>
<android.webkit.WebSettings$LayoutAlgorithm: android.webkit.WebSettings$LayoutAlgorithm NORMAL>
<android.webkit.WebSettings$LayoutAlgorithm: android.webkit.WebSettings$LayoutAlgorithm SINGLE_COLUMN>
<android.webkit.WebSettings$LayoutAlgorithm: android.webkit.WebSettings$LayoutAlgorithm TEXT_AUTOSIZING>
android.webkit.WebSettings$PluginState
<android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState OFF>
<android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState ON>
<android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState ON_DEMAND>
android.webkit.WebSettings$RenderPriority
<android.webkit.WebSettings$RenderPriority: android.webkit.WebSettings$RenderPriority HIGH>
<android.webkit.WebSettings$RenderPriority: android.webkit.WebSettings$RenderPriority LOW>
<android.webkit.WebSettings$RenderPriority: android.webkit.WebSettings$RenderPriority NORMAL>
android.webkit.WebSettings$TextSize
<android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize LARGER>
<android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize LARGEST>
<android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize NORMAL>
<android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize SMALLER>
<android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize SMALLEST>
android.webkit.WebSettings$ZoomDensity
<android.webkit.WebSettings$ZoomDensity: android.webkit.WebSettings$ZoomDensity CLOSE>
<android.webkit.WebSettings$ZoomDensity: android.webkit.WebSettings$ZoomDensity FAR>
<android.webkit.WebSettings$ZoomDensity: android.webkit.WebSettings$ZoomDensity MEDIUM>
android.webkit.WebStorage
<android.webkit.WebStorage: void deleteAllData()>
<android.webkit.WebStorage: void deleteOrigin(java.lang.String)>
<android.webkit.WebStorage: android.webkit.WebStorage getInstance()>
<android.webkit.WebStorage: void getOrigins(android.webkit.ValueCallback)>
<android.webkit.WebStorage: void getQuotaForOrigin(java.lang.String,android.webkit.ValueCallback)>
<android.webkit.WebStorage: void getUsageForOrigin(java.lang.String,android.webkit.ValueCallback)>
<android.webkit.WebStorage: void setQuotaForOrigin(java.lang.String,long)>
android.webkit.WebStorage$Origin
<android.webkit.WebStorage$Origin: java.lang.String getOrigin()>
<android.webkit.WebStorage$Origin: long getQuota()>
<android.webkit.WebStorage$Origin: long getUsage()>
android.webkit.WebStorage$QuotaUpdater
<android.webkit.WebStorage$QuotaUpdater: void updateQuota(long)>
android.webkit.WebView
<android.webkit.WebView: void <init>(android.content.Context)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)>
<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)>
<android.webkit.WebView: boolean canGoBack()>
<android.webkit.WebView: boolean canGoBackOrForward(int)>
<android.webkit.WebView: boolean canGoForward()>
<android.webkit.WebView: boolean canZoomIn()>
<android.webkit.WebView: boolean canZoomOut()>
<android.webkit.WebView: android.graphics.Picture capturePicture()>
<android.webkit.WebView: void clearCache(boolean)>
<android.webkit.WebView: void clearClientCertPreferences(java.lang.Runnable)>
<android.webkit.WebView: void clearFormData()>
<android.webkit.WebView: void clearHistory()>
<android.webkit.WebView: void clearMatches()>
<android.webkit.WebView: void clearSslPreferences()>
<android.webkit.WebView: void clearView()>
<android.webkit.WebView: android.webkit.WebBackForwardList copyBackForwardList()>
<android.webkit.WebView: android.print.PrintDocumentAdapter createPrintDocumentAdapter()>
<android.webkit.WebView: android.print.PrintDocumentAdapter createPrintDocumentAdapter(java.lang.String)>
<android.webkit.WebView: android.webkit.WebMessagePort[] createWebMessageChannel()>
<android.webkit.WebView: void destroy()>
<android.webkit.WebView: void disableWebView()>
<android.webkit.WebView: void documentHasImages(android.os.Message)>
<android.webkit.WebView: void enableSlowWholeDocumentDraw()>
<android.webkit.WebView: void evaluateJavascript(java.lang.String,android.webkit.ValueCallback)>
<android.webkit.WebView: java.lang.String findAddress(java.lang.String)>
<android.webkit.WebView: int findAll(java.lang.String)>
<android.webkit.WebView: void findAllAsync(java.lang.String)>
<android.webkit.WebView: void findNext(boolean)>
<android.webkit.WebView: void flingScroll(int,int)>
<android.webkit.WebView: void freeMemory()>
<android.webkit.WebView: android.net.http.SslCertificate getCertificate()>
<android.webkit.WebView: int getContentHeight()>
<android.webkit.WebView: android.content.pm.PackageInfo getCurrentWebViewPackage()>
<android.webkit.WebView: android.graphics.Bitmap getFavicon()>
<android.webkit.WebView: android.webkit.WebView$HitTestResult getHitTestResult()>
<android.webkit.WebView: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)>
<android.webkit.WebView: java.lang.String getOriginalUrl()>
<android.webkit.WebView: int getProgress()>
<android.webkit.WebView: boolean getRendererPriorityWaivedWhenNotVisible()>
<android.webkit.WebView: int getRendererRequestedPriority()>
<android.webkit.WebView: android.net.Uri getSafeBrowsingPrivacyPolicyUrl()>
<android.webkit.WebView: float getScale()>
<android.webkit.WebView: android.webkit.WebSettings getSettings()>
<android.webkit.WebView: android.view.textclassifier.TextClassifier getTextClassifier()>
<android.webkit.WebView: java.lang.String getTitle()>
<android.webkit.WebView: java.lang.String getUrl()>
<android.webkit.WebView: android.webkit.WebChromeClient getWebChromeClient()>
<android.webkit.WebView: java.lang.ClassLoader getWebViewClassLoader()>
<android.webkit.WebView: android.webkit.WebViewClient getWebViewClient()>
<android.webkit.WebView: android.os.Looper getWebViewLooper()>
<android.webkit.WebView: android.webkit.WebViewRenderProcess getWebViewRenderProcess()>
<android.webkit.WebView: android.webkit.WebViewRenderProcessClient getWebViewRenderProcessClient()>
<android.webkit.WebView: void goBack()>
<android.webkit.WebView: void goBackOrForward(int)>
<android.webkit.WebView: void goForward()>
<android.webkit.WebView: void invokeZoomPicker()>
<android.webkit.WebView: boolean isPrivateBrowsingEnabled()>
<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)>
<android.webkit.WebView: void loadUrl(java.lang.String)>
<android.webkit.WebView: void onChildViewAdded(android.view.View,android.view.View)>
<android.webkit.WebView: void onChildViewRemoved(android.view.View,android.view.View)>
<android.webkit.WebView: void onGlobalFocusChanged(android.view.View,android.view.View)>
<android.webkit.WebView: void onPause()>
<android.webkit.WebView: void onResume()>
<android.webkit.WebView: boolean overlayHorizontalScrollbar()>
<android.webkit.WebView: boolean overlayVerticalScrollbar()>
<android.webkit.WebView: boolean pageDown(boolean)>
<android.webkit.WebView: boolean pageUp(boolean)>
<android.webkit.WebView: void pauseTimers()>
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>
<android.webkit.WebView: void postVisualStateCallback(long,android.webkit.WebView$VisualStateCallback)>
<android.webkit.WebView: void postWebMessage(android.webkit.WebMessage,android.net.Uri)>
<android.webkit.WebView: void reload()>
<android.webkit.WebView: void removeJavascriptInterface(java.lang.String)>
<android.webkit.WebView: void requestFocusNodeHref(android.os.Message)>
<android.webkit.WebView: void requestImageRef(android.os.Message)>
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)>
<android.webkit.WebView: void resumeTimers()>
<android.webkit.WebView: void savePassword(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: android.webkit.WebBackForwardList saveState(android.os.Bundle)>
<android.webkit.WebView: void saveWebArchive(java.lang.String)>
<android.webkit.WebView: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)>
<android.webkit.WebView: void setCertificate(android.net.http.SslCertificate)>
<android.webkit.WebView: void setDataDirectorySuffix(java.lang.String)>
<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)>
<android.webkit.WebView: void setFindListener(android.webkit.WebView$FindListener)>
<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)>
<android.webkit.WebView: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: void setInitialScale(int)>
<android.webkit.WebView: void setMapTrackballToArrowKeys(boolean)>
<android.webkit.WebView: void setNetworkAvailable(boolean)>
<android.webkit.WebView: void setPictureListener(android.webkit.WebView$PictureListener)>
<android.webkit.WebView: void setRendererPriorityPolicy(int,boolean)>
<android.webkit.WebView: void setSafeBrowsingWhitelist(java.util.List,android.webkit.ValueCallback)>
<android.webkit.WebView: void setTextClassifier(android.view.textclassifier.TextClassifier)>
<android.webkit.WebView: void setVerticalScrollbarOverlay(boolean)>
<android.webkit.WebView: void setWebChromeClient(android.webkit.WebChromeClient)>
<android.webkit.WebView: void setWebContentsDebuggingEnabled(boolean)>
<android.webkit.WebView: void setWebViewClient(android.webkit.WebViewClient)>
<android.webkit.WebView: void setWebViewRenderProcessClient(java.util.concurrent.Executor,android.webkit.WebViewRenderProcessClient)>
<android.webkit.WebView: void setWebViewRenderProcessClient(android.webkit.WebViewRenderProcessClient)>
<android.webkit.WebView: boolean shouldDelayChildPressedState()>
<android.webkit.WebView: boolean showFindDialog(java.lang.String,boolean)>
<android.webkit.WebView: void startSafeBrowsing(android.content.Context,android.webkit.ValueCallback)>
<android.webkit.WebView: void stopLoading()>
<android.webkit.WebView: void zoomBy(float)>
<android.webkit.WebView: boolean zoomIn()>
<android.webkit.WebView: boolean zoomOut()>
<android.webkit.WebView: int RENDERER_PRIORITY_BOUND>
<android.webkit.WebView: int RENDERER_PRIORITY_IMPORTANT>
<android.webkit.WebView: int RENDERER_PRIORITY_WAIVED>
<android.webkit.WebView: java.lang.String SCHEME_GEO>
<android.webkit.WebView: java.lang.String SCHEME_MAILTO>
<android.webkit.WebView: java.lang.String SCHEME_TEL>
android.webkit.WebView$FindListener
<android.webkit.WebView$FindListener: void onFindResultReceived(int,int,boolean)>
android.webkit.WebView$HitTestResult
<android.webkit.WebView$HitTestResult: java.lang.String getExtra()>
<android.webkit.WebView$HitTestResult: int getType()>
<android.webkit.WebView$HitTestResult: int ANCHOR_TYPE>
<android.webkit.WebView$HitTestResult: int EDIT_TEXT_TYPE>
<android.webkit.WebView$HitTestResult: int EMAIL_TYPE>
<android.webkit.WebView$HitTestResult: int GEO_TYPE>
<android.webkit.WebView$HitTestResult: int IMAGE_ANCHOR_TYPE>
<android.webkit.WebView$HitTestResult: int IMAGE_TYPE>
<android.webkit.WebView$HitTestResult: int PHONE_TYPE>
<android.webkit.WebView$HitTestResult: int SRC_ANCHOR_TYPE>
<android.webkit.WebView$HitTestResult: int SRC_IMAGE_ANCHOR_TYPE>
<android.webkit.WebView$HitTestResult: int UNKNOWN_TYPE>
android.webkit.WebView$PictureListener
<android.webkit.WebView$PictureListener: void onNewPicture(android.webkit.WebView,android.graphics.Picture)>
android.webkit.WebView$VisualStateCallback
<android.webkit.WebView$VisualStateCallback: void <init>()>
<android.webkit.WebView$VisualStateCallback: void onComplete(long)>
android.webkit.WebView$WebViewTransport
<android.webkit.WebView$WebViewTransport: void <init>(android.webkit.WebView)>
<android.webkit.WebView$WebViewTransport: android.webkit.WebView getWebView()>
<android.webkit.WebView$WebViewTransport: void setWebView(android.webkit.WebView)>
android.webkit.WebViewClient
<android.webkit.WebViewClient: void <init>()>
<android.webkit.WebViewClient: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)>
<android.webkit.WebViewClient: void onFormResubmission(android.webkit.WebView,android.os.Message,android.os.Message)>
<android.webkit.WebViewClient: void onLoadResource(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: void onPageCommitVisible(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: void onPageFinished(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)>
<android.webkit.WebViewClient: void onReceivedClientCertRequest(android.webkit.WebView,android.webkit.ClientCertRequest)>
<android.webkit.WebViewClient: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)>
<android.webkit.WebViewClient: void onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceError)>
<android.webkit.WebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)>
<android.webkit.WebViewClient: void onReceivedHttpError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceResponse)>
<android.webkit.WebViewClient: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebViewClient: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)>
<android.webkit.WebViewClient: boolean onRenderProcessGone(android.webkit.WebView,android.webkit.RenderProcessGoneDetail)>
<android.webkit.WebViewClient: void onSafeBrowsingHit(android.webkit.WebView,android.webkit.WebResourceRequest,int,android.webkit.SafeBrowsingResponse)>
<android.webkit.WebViewClient: void onScaleChanged(android.webkit.WebView,float,float)>
<android.webkit.WebViewClient: void onTooManyRedirects(android.webkit.WebView,android.os.Message,android.os.Message)>
<android.webkit.WebViewClient: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)>
<android.webkit.WebViewClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,android.webkit.WebResourceRequest)>
<android.webkit.WebViewClient: boolean shouldOverrideKeyEvent(android.webkit.WebView,android.view.KeyEvent)>
<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>
<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)>
<android.webkit.WebViewClient: int ERROR_AUTHENTICATION>
<android.webkit.WebViewClient: int ERROR_BAD_URL>
<android.webkit.WebViewClient: int ERROR_CONNECT>
<android.webkit.WebViewClient: int ERROR_FAILED_SSL_HANDSHAKE>
<android.webkit.WebViewClient: int ERROR_FILE>
<android.webkit.WebViewClient: int ERROR_FILE_NOT_FOUND>
<android.webkit.WebViewClient: int ERROR_HOST_LOOKUP>
<android.webkit.WebViewClient: int ERROR_IO>
<android.webkit.WebViewClient: int ERROR_PROXY_AUTHENTICATION>
<android.webkit.WebViewClient: int ERROR_REDIRECT_LOOP>
<android.webkit.WebViewClient: int ERROR_TIMEOUT>
<android.webkit.WebViewClient: int ERROR_TOO_MANY_REQUESTS>
<android.webkit.WebViewClient: int ERROR_UNKNOWN>
<android.webkit.WebViewClient: int ERROR_UNSAFE_RESOURCE>
<android.webkit.WebViewClient: int ERROR_UNSUPPORTED_AUTH_SCHEME>
<android.webkit.WebViewClient: int ERROR_UNSUPPORTED_SCHEME>
<android.webkit.WebViewClient: int SAFE_BROWSING_THREAT_BILLING>
<android.webkit.WebViewClient: int SAFE_BROWSING_THREAT_MALWARE>
<android.webkit.WebViewClient: int SAFE_BROWSING_THREAT_PHISHING>
<android.webkit.WebViewClient: int SAFE_BROWSING_THREAT_UNKNOWN>
<android.webkit.WebViewClient: int SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE>
android.webkit.WebViewDatabase
<android.webkit.WebViewDatabase: void <init>()>
<android.webkit.WebViewDatabase: void clearFormData()>
<android.webkit.WebViewDatabase: void clearHttpAuthUsernamePassword()>
<android.webkit.WebViewDatabase: void clearUsernamePassword()>
<android.webkit.WebViewDatabase: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)>
<android.webkit.WebViewDatabase: android.webkit.WebViewDatabase getInstance(android.content.Context)>
<android.webkit.WebViewDatabase: boolean hasFormData()>
<android.webkit.WebViewDatabase: boolean hasHttpAuthUsernamePassword()>
<android.webkit.WebViewDatabase: boolean hasUsernamePassword()>
<android.webkit.WebViewDatabase: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
android.webkit.WebViewFragment
<android.webkit.WebViewFragment: void <init>()>
<android.webkit.WebViewFragment: android.webkit.WebView getWebView()>
android.webkit.WebViewRenderProcess
<android.webkit.WebViewRenderProcess: void <init>()>
<android.webkit.WebViewRenderProcess: boolean terminate()>
android.webkit.WebViewRenderProcessClient
<android.webkit.WebViewRenderProcessClient: void <init>()>
<android.webkit.WebViewRenderProcessClient: void onRenderProcessResponsive(android.webkit.WebView,android.webkit.WebViewRenderProcess)>
<android.webkit.WebViewRenderProcessClient: void onRenderProcessUnresponsive(android.webkit.WebView,android.webkit.WebViewRenderProcess)>
android.widget.AbsListView
<android.widget.AbsListView: void <init>(android.content.Context)>
<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AbsListView: void afterTextChanged(android.text.Editable)>
<android.widget.AbsListView: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<android.widget.AbsListView: boolean canScrollList(int)>
<android.widget.AbsListView: void clearChoices()>
<android.widget.AbsListView: void clearTextFilter()>
<android.widget.AbsListView: void deferNotifyDataSetChanged()>
<android.widget.AbsListView: void fling(int)>
<android.widget.AbsListView: android.widget.AbsListView$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.AbsListView: int getBottomEdgeEffectColor()>
<android.widget.AbsListView: int getCacheColorHint()>
<android.widget.AbsListView: int getCheckedItemCount()>
<android.widget.AbsListView: long[] getCheckedItemIds()>
<android.widget.AbsListView: int getCheckedItemPosition()>
<android.widget.AbsListView: android.util.SparseBooleanArray getCheckedItemPositions()>
<android.widget.AbsListView: int getChoiceMode()>
<android.widget.AbsListView: int getListPaddingBottom()>
<android.widget.AbsListView: int getListPaddingLeft()>
<android.widget.AbsListView: int getListPaddingRight()>
<android.widget.AbsListView: int getListPaddingTop()>
<android.widget.AbsListView: android.view.View getSelectedView()>
<android.widget.AbsListView: android.graphics.drawable.Drawable getSelector()>
<android.widget.AbsListView: java.lang.CharSequence getTextFilter()>
<android.widget.AbsListView: int getTopEdgeEffectColor()>
<android.widget.AbsListView: int getTranscriptMode()>
<android.widget.AbsListView: void handleDataChanged()>
<android.widget.AbsListView: boolean hasTextFilter()>
<android.widget.AbsListView: void invalidateViews()>
<android.widget.AbsListView: boolean isDrawSelectorOnTop()>
<android.widget.AbsListView: boolean isFastScrollAlwaysVisible()>
<android.widget.AbsListView: boolean isFastScrollEnabled()>
<android.widget.AbsListView: boolean isInFilterMode()>
<android.widget.AbsListView: boolean isItemChecked(int)>
<android.widget.AbsListView: boolean isScrollingCacheEnabled()>
<android.widget.AbsListView: boolean isSelectedChildViewEnabled()>
<android.widget.AbsListView: boolean isSmoothScrollbarEnabled()>
<android.widget.AbsListView: boolean isStackFromBottom()>
<android.widget.AbsListView: boolean isTextFilterEnabled()>
<android.widget.AbsListView: void layoutChildren()>
<android.widget.AbsListView: void onFilterComplete(int)>
<android.widget.AbsListView: void onGlobalLayout()>
<android.widget.AbsListView: void onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)>
<android.widget.AbsListView: boolean onRemoteAdapterConnected()>
<android.widget.AbsListView: void onRemoteAdapterDisconnected()>
<android.widget.AbsListView: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.AbsListView: android.os.Parcelable onSaveInstanceState()>
<android.widget.AbsListView: void onTextChanged(java.lang.CharSequence,int,int,int)>
<android.widget.AbsListView: void onTouchModeChanged(boolean)>
<android.widget.AbsListView: int pointToPosition(int,int)>
<android.widget.AbsListView: long pointToRowId(int,int)>
<android.widget.AbsListView: void reclaimViews(java.util.List)>
<android.widget.AbsListView: void scrollListBy(int)>
<android.widget.AbsListView: void setAdapter(android.widget.ListAdapter)>
<android.widget.AbsListView: void setBottomEdgeEffectColor(int)>
<android.widget.AbsListView: void setCacheColorHint(int)>
<android.widget.AbsListView: void setChoiceMode(int)>
<android.widget.AbsListView: void setDrawSelectorOnTop(boolean)>
<android.widget.AbsListView: void setEdgeEffectColor(int)>
<android.widget.AbsListView: void setFastScrollAlwaysVisible(boolean)>
<android.widget.AbsListView: void setFastScrollEnabled(boolean)>
<android.widget.AbsListView: void setFastScrollStyle(int)>
<android.widget.AbsListView: void setFilterText(java.lang.String)>
<android.widget.AbsListView: void setFriction(float)>
<android.widget.AbsListView: void setItemChecked(int,boolean)>
<android.widget.AbsListView: void setMultiChoiceModeListener(android.widget.AbsListView$MultiChoiceModeListener)>
<android.widget.AbsListView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)>
<android.widget.AbsListView: void setRecyclerListener(android.widget.AbsListView$RecyclerListener)>
<android.widget.AbsListView: void setRemoteViewsAdapter(android.content.Intent)>
<android.widget.AbsListView: void setScrollIndicators(android.view.View,android.view.View)>
<android.widget.AbsListView: void setScrollingCacheEnabled(boolean)>
<android.widget.AbsListView: void setSelectedChildViewEnabled(boolean)>
<android.widget.AbsListView: void setSelectionFromTop(int,int)>
<android.widget.AbsListView: void setSelector(int)>
<android.widget.AbsListView: void setSelector(android.graphics.drawable.Drawable)>
<android.widget.AbsListView: void setSmoothScrollbarEnabled(boolean)>
<android.widget.AbsListView: void setStackFromBottom(boolean)>
<android.widget.AbsListView: void setTextFilterEnabled(boolean)>
<android.widget.AbsListView: void setTopEdgeEffectColor(int)>
<android.widget.AbsListView: void setTranscriptMode(int)>
<android.widget.AbsListView: void setVelocityScale(float)>
<android.widget.AbsListView: void smoothScrollBy(int,int)>
<android.widget.AbsListView: void smoothScrollToPosition(int)>
<android.widget.AbsListView: void smoothScrollToPosition(int,int)>
<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int,int)>
<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int)>
<android.widget.AbsListView: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.widget.AbsListView: int CHOICE_MODE_MULTIPLE>
<android.widget.AbsListView: int CHOICE_MODE_MULTIPLE_MODAL>
<android.widget.AbsListView: int CHOICE_MODE_NONE>
<android.widget.AbsListView: int CHOICE_MODE_SINGLE>
<android.widget.AbsListView: int TRANSCRIPT_MODE_ALWAYS_SCROLL>
<android.widget.AbsListView: int TRANSCRIPT_MODE_DISABLED>
<android.widget.AbsListView: int TRANSCRIPT_MODE_NORMAL>
android.widget.AbsListView$LayoutParams
<android.widget.AbsListView$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsListView$LayoutParams: void <init>(int,int)>
<android.widget.AbsListView$LayoutParams: void <init>(int,int,int)>
<android.widget.AbsListView$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
android.widget.AbsListView$MultiChoiceModeListener
<android.widget.AbsListView$MultiChoiceModeListener: void onItemCheckedStateChanged(android.view.ActionMode,int,long,boolean)>
android.widget.AbsListView$OnScrollListener
<android.widget.AbsListView$OnScrollListener: void onScroll(android.widget.AbsListView,int,int,int)>
<android.widget.AbsListView$OnScrollListener: void onScrollStateChanged(android.widget.AbsListView,int)>
<android.widget.AbsListView$OnScrollListener: int SCROLL_STATE_FLING>
<android.widget.AbsListView$OnScrollListener: int SCROLL_STATE_IDLE>
<android.widget.AbsListView$OnScrollListener: int SCROLL_STATE_TOUCH_SCROLL>
android.widget.AbsListView$RecyclerListener
<android.widget.AbsListView$RecyclerListener: void onMovedToScrapHeap(android.view.View)>
android.widget.AbsListView$SelectionBoundsAdjuster
<android.widget.AbsListView$SelectionBoundsAdjuster: void adjustListItemSelectionBounds(android.graphics.Rect)>
android.widget.AbsSeekBar
<android.widget.AbsSeekBar: void <init>(android.content.Context)>
<android.widget.AbsSeekBar: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsSeekBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AbsSeekBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AbsSeekBar: int getKeyProgressIncrement()>
<android.widget.AbsSeekBar: boolean getSplitTrack()>
<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getThumb()>
<android.widget.AbsSeekBar: int getThumbOffset()>
<android.widget.AbsSeekBar: android.graphics.BlendMode getThumbTintBlendMode()>
<android.widget.AbsSeekBar: android.content.res.ColorStateList getThumbTintList()>
<android.widget.AbsSeekBar: android.graphics.PorterDuff$Mode getThumbTintMode()>
<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getTickMark()>
<android.widget.AbsSeekBar: android.graphics.BlendMode getTickMarkTintBlendMode()>
<android.widget.AbsSeekBar: android.content.res.ColorStateList getTickMarkTintList()>
<android.widget.AbsSeekBar: android.graphics.PorterDuff$Mode getTickMarkTintMode()>
<android.widget.AbsSeekBar: void setKeyProgressIncrement(int)>
<android.widget.AbsSeekBar: void setSplitTrack(boolean)>
<android.widget.AbsSeekBar: void setThumb(android.graphics.drawable.Drawable)>
<android.widget.AbsSeekBar: void setThumbOffset(int)>
<android.widget.AbsSeekBar: void setThumbTintBlendMode(android.graphics.BlendMode)>
<android.widget.AbsSeekBar: void setThumbTintList(android.content.res.ColorStateList)>
<android.widget.AbsSeekBar: void setThumbTintMode(android.graphics.PorterDuff$Mode)>
<android.widget.AbsSeekBar: void setTickMark(android.graphics.drawable.Drawable)>
<android.widget.AbsSeekBar: void setTickMarkTintBlendMode(android.graphics.BlendMode)>
<android.widget.AbsSeekBar: void setTickMarkTintList(android.content.res.ColorStateList)>
<android.widget.AbsSeekBar: void setTickMarkTintMode(android.graphics.PorterDuff$Mode)>
android.widget.AbsSpinner
<android.widget.AbsSpinner: void <init>(android.content.Context)>
<android.widget.AbsSpinner: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AbsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AbsSpinner: android.widget.SpinnerAdapter getAdapter()>
<android.widget.AbsSpinner: android.view.View getSelectedView()>
<android.widget.AbsSpinner: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.AbsSpinner: android.os.Parcelable onSaveInstanceState()>
<android.widget.AbsSpinner: int pointToPosition(int,int)>
<android.widget.AbsSpinner: void setAdapter(android.widget.SpinnerAdapter)>
<android.widget.AbsSpinner: void setSelection(int,boolean)>
<android.widget.AbsSpinner: void setSelection(int)>
android.widget.AbsoluteLayout
<android.widget.AbsoluteLayout: void <init>(android.content.Context)>
<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
android.widget.AbsoluteLayout$LayoutParams
<android.widget.AbsoluteLayout$LayoutParams: void <init>(int,int,int,int)>
<android.widget.AbsoluteLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AbsoluteLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.widget.AbsoluteLayout$LayoutParams: java.lang.String debug(java.lang.String)>
<android.widget.AbsoluteLayout$LayoutParams: int x>
<android.widget.AbsoluteLayout$LayoutParams: int y>
android.widget.ActionMenuView
<android.widget.ActionMenuView: void <init>(android.content.Context)>
<android.widget.ActionMenuView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ActionMenuView: void dismissPopupMenus()>
<android.widget.ActionMenuView: android.widget.ActionMenuView$LayoutParams generateDefaultLayoutParams()>
<android.widget.ActionMenuView: android.widget.ActionMenuView$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.ActionMenuView: android.widget.ActionMenuView$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.widget.ActionMenuView: android.view.Menu getMenu()>
<android.widget.ActionMenuView: android.graphics.drawable.Drawable getOverflowIcon()>
<android.widget.ActionMenuView: int getPopupTheme()>
<android.widget.ActionMenuView: boolean hideOverflowMenu()>
<android.widget.ActionMenuView: boolean isOverflowMenuShowing()>
<android.widget.ActionMenuView: void onConfigurationChanged(android.content.res.Configuration)>
<android.widget.ActionMenuView: void onDetachedFromWindow()>
<android.widget.ActionMenuView: void setOnMenuItemClickListener(android.widget.ActionMenuView$OnMenuItemClickListener)>
<android.widget.ActionMenuView: void setOverflowIcon(android.graphics.drawable.Drawable)>
<android.widget.ActionMenuView: void setPopupTheme(int)>
<android.widget.ActionMenuView: boolean showOverflowMenu()>
android.widget.ActionMenuView$LayoutParams
<android.widget.ActionMenuView$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ActionMenuView$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.widget.ActionMenuView$LayoutParams: void <init>(android.widget.ActionMenuView$LayoutParams)>
<android.widget.ActionMenuView$LayoutParams: void <init>(int,int)>
android.widget.ActionMenuView$OnMenuItemClickListener
<android.widget.ActionMenuView$OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>
android.widget.Adapter
<android.widget.Adapter: java.lang.CharSequence[] getAutofillOptions()>
<android.widget.Adapter: int getCount()>
<android.widget.Adapter: java.lang.Object getItem(int)>
<android.widget.Adapter: long getItemId(int)>
<android.widget.Adapter: int getItemViewType(int)>
<android.widget.Adapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.Adapter: int getViewTypeCount()>
<android.widget.Adapter: boolean hasStableIds()>
<android.widget.Adapter: boolean isEmpty()>
<android.widget.Adapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.Adapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.widget.Adapter: int IGNORE_ITEM_VIEW_TYPE>
<android.widget.Adapter: int NO_SELECTION>
android.widget.AdapterView
<android.widget.AdapterView: void <init>(android.content.Context)>
<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AdapterView: android.widget.Adapter getAdapter()>
<android.widget.AdapterView: int getCount()>
<android.widget.AdapterView: android.view.View getEmptyView()>
<android.widget.AdapterView: int getFirstVisiblePosition()>
<android.widget.AdapterView: java.lang.Object getItemAtPosition(int)>
<android.widget.AdapterView: long getItemIdAtPosition(int)>
<android.widget.AdapterView: int getLastVisiblePosition()>
<android.widget.AdapterView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()>
<android.widget.AdapterView: android.widget.AdapterView$OnItemLongClickListener getOnItemLongClickListener()>
<android.widget.AdapterView: android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()>
<android.widget.AdapterView: int getPositionForView(android.view.View)>
<android.widget.AdapterView: java.lang.Object getSelectedItem()>
<android.widget.AdapterView: long getSelectedItemId()>
<android.widget.AdapterView: int getSelectedItemPosition()>
<android.widget.AdapterView: android.view.View getSelectedView()>
<android.widget.AdapterView: boolean performItemClick(android.view.View,int,long)>
<android.widget.AdapterView: void setAdapter(android.widget.Adapter)>
<android.widget.AdapterView: void setEmptyView(android.view.View)>
<android.widget.AdapterView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.widget.AdapterView: void setOnItemLongClickListener(android.widget.AdapterView$OnItemLongClickListener)>
<android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>
<android.widget.AdapterView: void setSelection(int)>
<android.widget.AdapterView: int INVALID_POSITION>
<android.widget.AdapterView: long INVALID_ROW_ID>
<android.widget.AdapterView: int ITEM_VIEW_TYPE_HEADER_OR_FOOTER>
<android.widget.AdapterView: int ITEM_VIEW_TYPE_IGNORE>
android.widget.AdapterView$AdapterContextMenuInfo
<android.widget.AdapterView$AdapterContextMenuInfo: void <init>(android.view.View,int,long)>
<android.widget.AdapterView$AdapterContextMenuInfo: long id>
<android.widget.AdapterView$AdapterContextMenuInfo: int position>
<android.widget.AdapterView$AdapterContextMenuInfo: android.view.View targetView>
android.widget.AdapterView$OnItemClickListener
<android.widget.AdapterView$OnItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
android.widget.AdapterView$OnItemLongClickListener
<android.widget.AdapterView$OnItemLongClickListener: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)>
android.widget.AdapterView$OnItemSelectedListener
<android.widget.AdapterView$OnItemSelectedListener: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>
<android.widget.AdapterView$OnItemSelectedListener: void onNothingSelected(android.widget.AdapterView)>
android.widget.AdapterViewAnimator
<android.widget.AdapterViewAnimator: void <init>(android.content.Context)>
<android.widget.AdapterViewAnimator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AdapterViewAnimator: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AdapterViewAnimator: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AdapterViewAnimator: void advance()>
<android.widget.AdapterViewAnimator: void deferNotifyDataSetChanged()>
<android.widget.AdapterViewAnimator: void fyiWillBeAdvancedByHostKThx()>
<android.widget.AdapterViewAnimator: android.widget.Adapter getAdapter()>
<android.widget.AdapterViewAnimator: android.view.View getCurrentView()>
<android.widget.AdapterViewAnimator: int getDisplayedChild()>
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getInAnimation()>
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getOutAnimation()>
<android.widget.AdapterViewAnimator: android.view.View getSelectedView()>
<android.widget.AdapterViewAnimator: boolean onRemoteAdapterConnected()>
<android.widget.AdapterViewAnimator: void onRemoteAdapterDisconnected()>
<android.widget.AdapterViewAnimator: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.AdapterViewAnimator: android.os.Parcelable onSaveInstanceState()>
<android.widget.AdapterViewAnimator: void setAdapter(android.widget.Adapter)>
<android.widget.AdapterViewAnimator: void setAnimateFirstView(boolean)>
<android.widget.AdapterViewAnimator: void setDisplayedChild(int)>
<android.widget.AdapterViewAnimator: void setInAnimation(android.animation.ObjectAnimator)>
<android.widget.AdapterViewAnimator: void setInAnimation(android.content.Context,int)>
<android.widget.AdapterViewAnimator: void setOutAnimation(android.animation.ObjectAnimator)>
<android.widget.AdapterViewAnimator: void setOutAnimation(android.content.Context,int)>
<android.widget.AdapterViewAnimator: void setRemoteViewsAdapter(android.content.Intent)>
<android.widget.AdapterViewAnimator: void setSelection(int)>
<android.widget.AdapterViewAnimator: void showNext()>
<android.widget.AdapterViewAnimator: void showPrevious()>
android.widget.AdapterViewFlipper
<android.widget.AdapterViewFlipper: void <init>(android.content.Context)>
<android.widget.AdapterViewFlipper: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AdapterViewFlipper: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AdapterViewFlipper: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AdapterViewFlipper: int getFlipInterval()>
<android.widget.AdapterViewFlipper: boolean isAutoStart()>
<android.widget.AdapterViewFlipper: boolean isFlipping()>
<android.widget.AdapterViewFlipper: void setAutoStart(boolean)>
<android.widget.AdapterViewFlipper: void setFlipInterval(int)>
<android.widget.AdapterViewFlipper: void startFlipping()>
<android.widget.AdapterViewFlipper: void stopFlipping()>
android.widget.Advanceable
<android.widget.Advanceable: void advance()>
<android.widget.Advanceable: void fyiWillBeAdvancedByHostKThx()>
android.widget.AlphabetIndexer
<android.widget.AlphabetIndexer: void <init>(android.database.Cursor,int,java.lang.CharSequence)>
<android.widget.AlphabetIndexer: int compare(java.lang.String,java.lang.String)>
<android.widget.AlphabetIndexer: int getPositionForSection(int)>
<android.widget.AlphabetIndexer: int getSectionForPosition(int)>
<android.widget.AlphabetIndexer: java.lang.Object[] getSections()>
<android.widget.AlphabetIndexer: void setCursor(android.database.Cursor)>
<android.widget.AlphabetIndexer: java.lang.CharSequence mAlphabet>
<android.widget.AlphabetIndexer: int mColumnIndex>
<android.widget.AlphabetIndexer: android.database.Cursor mDataCursor>
android.widget.AnalogClock
<android.widget.AnalogClock: void <init>(android.content.Context)>
<android.widget.AnalogClock: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AnalogClock: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AnalogClock: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AnalogClock: android.graphics.BlendMode getDialTintBlendMode()>
<android.widget.AnalogClock: android.content.res.ColorStateList getDialTintList()>
<android.widget.AnalogClock: android.graphics.BlendMode getHourHandTintBlendMode()>
<android.widget.AnalogClock: android.content.res.ColorStateList getHourHandTintList()>
<android.widget.AnalogClock: android.graphics.BlendMode getMinuteHandTintBlendMode()>
<android.widget.AnalogClock: android.content.res.ColorStateList getMinuteHandTintList()>
<android.widget.AnalogClock: android.graphics.BlendMode getSecondHandTintBlendMode()>
<android.widget.AnalogClock: android.content.res.ColorStateList getSecondHandTintList()>
<android.widget.AnalogClock: java.lang.String getTimeZone()>
<android.widget.AnalogClock: void setDial(android.graphics.drawable.Icon)>
<android.widget.AnalogClock: void setDialTintBlendMode(android.graphics.BlendMode)>
<android.widget.AnalogClock: void setDialTintList(android.content.res.ColorStateList)>
<android.widget.AnalogClock: void setHourHand(android.graphics.drawable.Icon)>
<android.widget.AnalogClock: void setHourHandTintBlendMode(android.graphics.BlendMode)>
<android.widget.AnalogClock: void setHourHandTintList(android.content.res.ColorStateList)>
<android.widget.AnalogClock: void setMinuteHand(android.graphics.drawable.Icon)>
<android.widget.AnalogClock: void setMinuteHandTintBlendMode(android.graphics.BlendMode)>
<android.widget.AnalogClock: void setMinuteHandTintList(android.content.res.ColorStateList)>
<android.widget.AnalogClock: void setSecondHand(android.graphics.drawable.Icon)>
<android.widget.AnalogClock: void setSecondHandTintBlendMode(android.graphics.BlendMode)>
<android.widget.AnalogClock: void setSecondHandTintList(android.content.res.ColorStateList)>
<android.widget.AnalogClock: void setTimeZone(java.lang.String)>
android.widget.ArrayAdapter
<android.widget.ArrayAdapter: void <init>(android.content.Context,int)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.lang.Object[])>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int,java.lang.Object[])>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.util.List)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int,java.util.List)>
<android.widget.ArrayAdapter: void add(java.lang.Object)>
<android.widget.ArrayAdapter: void addAll(java.util.Collection)>
<android.widget.ArrayAdapter: void addAll(java.lang.Object[])>
<android.widget.ArrayAdapter: void clear()>
<android.widget.ArrayAdapter: android.widget.ArrayAdapter createFromResource(android.content.Context,int,int)>
<android.widget.ArrayAdapter: android.content.Context getContext()>
<android.widget.ArrayAdapter: int getCount()>
<android.widget.ArrayAdapter: android.content.res.Resources$Theme getDropDownViewTheme()>
<android.widget.ArrayAdapter: android.widget.Filter getFilter()>
<android.widget.ArrayAdapter: java.lang.Object getItem(int)>
<android.widget.ArrayAdapter: long getItemId(int)>
<android.widget.ArrayAdapter: int getPosition(java.lang.Object)>
<android.widget.ArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.ArrayAdapter: void insert(java.lang.Object,int)>
<android.widget.ArrayAdapter: void remove(java.lang.Object)>
<android.widget.ArrayAdapter: void setDropDownViewResource(int)>
<android.widget.ArrayAdapter: void setDropDownViewTheme(android.content.res.Resources$Theme)>
<android.widget.ArrayAdapter: void setNotifyOnChange(boolean)>
<android.widget.ArrayAdapter: void sort(java.util.Comparator)>
android.widget.AutoCompleteTextView
<android.widget.AutoCompleteTextView: void <init>(android.content.Context)>
<android.widget.AutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.AutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.AutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet,int,int,android.content.res.Resources$Theme)>
<android.widget.AutoCompleteTextView: void clearListSelection()>
<android.widget.AutoCompleteTextView: java.lang.CharSequence convertSelectionToString(java.lang.Object)>
<android.widget.AutoCompleteTextView: void dismissDropDown()>
<android.widget.AutoCompleteTextView: boolean enoughToFilter()>
<android.widget.AutoCompleteTextView: android.widget.ListAdapter getAdapter()>
<android.widget.AutoCompleteTextView: java.lang.CharSequence getCompletionHint()>
<android.widget.AutoCompleteTextView: int getDropDownAnchor()>
<android.widget.AutoCompleteTextView: android.graphics.drawable.Drawable getDropDownBackground()>
<android.widget.AutoCompleteTextView: int getDropDownHeight()>
<android.widget.AutoCompleteTextView: int getDropDownHorizontalOffset()>
<android.widget.AutoCompleteTextView: int getDropDownVerticalOffset()>
<android.widget.AutoCompleteTextView: int getDropDownWidth()>
<android.widget.AutoCompleteTextView: android.widget.Filter getFilter()>
<android.widget.AutoCompleteTextView: int getInputMethodMode()>
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemClickListener getItemClickListener()>
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemSelectedListener getItemSelectedListener()>
<android.widget.AutoCompleteTextView: int getListSelection()>
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()>
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()>
<android.widget.AutoCompleteTextView: int getThreshold()>
<android.widget.AutoCompleteTextView: android.widget.AutoCompleteTextView$Validator getValidator()>
<android.widget.AutoCompleteTextView: boolean isPerformingCompletion()>
<android.widget.AutoCompleteTextView: boolean isPopupShowing()>
<android.widget.AutoCompleteTextView: void onFilterComplete(int)>
<android.widget.AutoCompleteTextView: void performCompletion()>
<android.widget.AutoCompleteTextView: void performFiltering(java.lang.CharSequence,int)>
<android.widget.AutoCompleteTextView: void performValidation()>
<android.widget.AutoCompleteTextView: void refreshAutoCompleteResults()>
<android.widget.AutoCompleteTextView: void replaceText(java.lang.CharSequence)>
<android.widget.AutoCompleteTextView: void setAdapter(android.widget.ListAdapter)>
<android.widget.AutoCompleteTextView: void setCompletionHint(java.lang.CharSequence)>
<android.widget.AutoCompleteTextView: void setDropDownAnchor(int)>
<android.widget.AutoCompleteTextView: void setDropDownBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.AutoCompleteTextView: void setDropDownBackgroundResource(int)>
<android.widget.AutoCompleteTextView: void setDropDownHeight(int)>
<android.widget.AutoCompleteTextView: void setDropDownHorizontalOffset(int)>
<android.widget.AutoCompleteTextView: void setDropDownVerticalOffset(int)>
<android.widget.AutoCompleteTextView: void setDropDownWidth(int)>
<android.widget.AutoCompleteTextView: void setInputMethodMode(int)>
<android.widget.AutoCompleteTextView: void setListSelection(int)>
<android.widget.AutoCompleteTextView: void setOnDismissListener(android.widget.AutoCompleteTextView$OnDismissListener)>
<android.widget.AutoCompleteTextView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.widget.AutoCompleteTextView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>
<android.widget.AutoCompleteTextView: void setText(java.lang.CharSequence,boolean)>
<android.widget.AutoCompleteTextView: void setThreshold(int)>
<android.widget.AutoCompleteTextView: void setValidator(android.widget.AutoCompleteTextView$Validator)>
<android.widget.AutoCompleteTextView: void showDropDown()>
android.widget.AutoCompleteTextView$OnDismissListener
<android.widget.AutoCompleteTextView$OnDismissListener: void onDismiss()>
android.widget.AutoCompleteTextView$Validator
<android.widget.AutoCompleteTextView$Validator: java.lang.CharSequence fixText(java.lang.CharSequence)>
<android.widget.AutoCompleteTextView$Validator: boolean isValid(java.lang.CharSequence)>
android.widget.BaseAdapter
<android.widget.BaseAdapter: void <init>()>
<android.widget.BaseAdapter: boolean areAllItemsEnabled()>
<android.widget.BaseAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<android.widget.BaseAdapter: int getItemViewType(int)>
<android.widget.BaseAdapter: int getViewTypeCount()>
<android.widget.BaseAdapter: boolean hasStableIds()>
<android.widget.BaseAdapter: boolean isEmpty()>
<android.widget.BaseAdapter: boolean isEnabled(int)>
<android.widget.BaseAdapter: void notifyDataSetChanged()>
<android.widget.BaseAdapter: void notifyDataSetInvalidated()>
<android.widget.BaseAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.BaseAdapter: void setAutofillOptions(java.lang.CharSequence[])>
<android.widget.BaseAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
android.widget.BaseExpandableListAdapter
<android.widget.BaseExpandableListAdapter: void <init>()>
<android.widget.BaseExpandableListAdapter: boolean areAllItemsEnabled()>
<android.widget.BaseExpandableListAdapter: int getChildType(int,int)>
<android.widget.BaseExpandableListAdapter: int getChildTypeCount()>
<android.widget.BaseExpandableListAdapter: long getCombinedChildId(long,long)>
<android.widget.BaseExpandableListAdapter: long getCombinedGroupId(long)>
<android.widget.BaseExpandableListAdapter: int getGroupType(int)>
<android.widget.BaseExpandableListAdapter: int getGroupTypeCount()>
<android.widget.BaseExpandableListAdapter: boolean isEmpty()>
<android.widget.BaseExpandableListAdapter: void notifyDataSetChanged()>
<android.widget.BaseExpandableListAdapter: void notifyDataSetInvalidated()>
<android.widget.BaseExpandableListAdapter: void onGroupCollapsed(int)>
<android.widget.BaseExpandableListAdapter: void onGroupExpanded(int)>
<android.widget.BaseExpandableListAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.BaseExpandableListAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
android.widget.Button
<android.widget.Button: void <init>(android.content.Context)>
<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
android.widget.CalendarView
<android.widget.CalendarView: void <init>(android.content.Context)>
<android.widget.CalendarView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.CalendarView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.CalendarView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.CalendarView: long getDate()>
<android.widget.CalendarView: int getDateTextAppearance()>
<android.widget.CalendarView: int getFirstDayOfWeek()>
<android.widget.CalendarView: int getFocusedMonthDateColor()>
<android.widget.CalendarView: long getMaxDate()>
<android.widget.CalendarView: long getMinDate()>
<android.widget.CalendarView: android.graphics.drawable.Drawable getSelectedDateVerticalBar()>
<android.widget.CalendarView: int getSelectedWeekBackgroundColor()>
<android.widget.CalendarView: boolean getShowWeekNumber()>
<android.widget.CalendarView: int getShownWeekCount()>
<android.widget.CalendarView: int getUnfocusedMonthDateColor()>
<android.widget.CalendarView: int getWeekDayTextAppearance()>
<android.widget.CalendarView: int getWeekNumberColor()>
<android.widget.CalendarView: int getWeekSeparatorLineColor()>
<android.widget.CalendarView: void setDate(long)>
<android.widget.CalendarView: void setDate(long,boolean,boolean)>
<android.widget.CalendarView: void setDateTextAppearance(int)>
<android.widget.CalendarView: void setFirstDayOfWeek(int)>
<android.widget.CalendarView: void setFocusedMonthDateColor(int)>
<android.widget.CalendarView: void setMaxDate(long)>
<android.widget.CalendarView: void setMinDate(long)>
<android.widget.CalendarView: void setOnDateChangeListener(android.widget.CalendarView$OnDateChangeListener)>
<android.widget.CalendarView: void setSelectedDateVerticalBar(int)>
<android.widget.CalendarView: void setSelectedDateVerticalBar(android.graphics.drawable.Drawable)>
<android.widget.CalendarView: void setSelectedWeekBackgroundColor(int)>
<android.widget.CalendarView: void setShowWeekNumber(boolean)>
<android.widget.CalendarView: void setShownWeekCount(int)>
<android.widget.CalendarView: void setUnfocusedMonthDateColor(int)>
<android.widget.CalendarView: void setWeekDayTextAppearance(int)>
<android.widget.CalendarView: void setWeekNumberColor(int)>
<android.widget.CalendarView: void setWeekSeparatorLineColor(int)>
android.widget.CalendarView$OnDateChangeListener
<android.widget.CalendarView$OnDateChangeListener: void onSelectedDayChange(android.widget.CalendarView,int,int,int)>
android.widget.CheckBox
<android.widget.CheckBox: void <init>(android.content.Context)>
<android.widget.CheckBox: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.CheckBox: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.CheckBox: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
android.widget.Checkable
<android.widget.Checkable: boolean isChecked()>
<android.widget.Checkable: void setChecked(boolean)>
<android.widget.Checkable: void toggle()>
android.widget.CheckedTextView
<android.widget.CheckedTextView: void <init>(android.content.Context)>
<android.widget.CheckedTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.CheckedTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.CheckedTextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.CheckedTextView: android.graphics.drawable.Drawable getCheckMarkDrawable()>
<android.widget.CheckedTextView: android.graphics.BlendMode getCheckMarkTintBlendMode()>
<android.widget.CheckedTextView: android.content.res.ColorStateList getCheckMarkTintList()>
<android.widget.CheckedTextView: android.graphics.PorterDuff$Mode getCheckMarkTintMode()>
<android.widget.CheckedTextView: boolean isChecked()>
<android.widget.CheckedTextView: void setCheckMarkDrawable(int)>
<android.widget.CheckedTextView: void setCheckMarkDrawable(android.graphics.drawable.Drawable)>
<android.widget.CheckedTextView: void setCheckMarkTintBlendMode(android.graphics.BlendMode)>
<android.widget.CheckedTextView: void setCheckMarkTintList(android.content.res.ColorStateList)>
<android.widget.CheckedTextView: void setCheckMarkTintMode(android.graphics.PorterDuff$Mode)>
<android.widget.CheckedTextView: void setChecked(boolean)>
<android.widget.CheckedTextView: void toggle()>
android.widget.Chronometer
<android.widget.Chronometer: void <init>(android.content.Context)>
<android.widget.Chronometer: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Chronometer: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Chronometer: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.Chronometer: long getBase()>
<android.widget.Chronometer: java.lang.String getFormat()>
<android.widget.Chronometer: android.widget.Chronometer$OnChronometerTickListener getOnChronometerTickListener()>
<android.widget.Chronometer: boolean isCountDown()>
<android.widget.Chronometer: boolean isTheFinalCountDown()>
<android.widget.Chronometer: void setBase(long)>
<android.widget.Chronometer: void setCountDown(boolean)>
<android.widget.Chronometer: void setFormat(java.lang.String)>
<android.widget.Chronometer: void setOnChronometerTickListener(android.widget.Chronometer$OnChronometerTickListener)>
<android.widget.Chronometer: void start()>
<android.widget.Chronometer: void stop()>
android.widget.Chronometer$OnChronometerTickListener
<android.widget.Chronometer$OnChronometerTickListener: void onChronometerTick(android.widget.Chronometer)>
android.widget.CompoundButton
<android.widget.CompoundButton: void <init>(android.content.Context)>
<android.widget.CompoundButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.CompoundButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.CompoundButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.CompoundButton: android.graphics.drawable.Drawable getButtonDrawable()>
<android.widget.CompoundButton: android.graphics.BlendMode getButtonTintBlendMode()>
<android.widget.CompoundButton: android.content.res.ColorStateList getButtonTintList()>
<android.widget.CompoundButton: android.graphics.PorterDuff$Mode getButtonTintMode()>
<android.widget.CompoundButton: boolean isChecked()>
<android.widget.CompoundButton: void setButtonDrawable(int)>
<android.widget.CompoundButton: void setButtonDrawable(android.graphics.drawable.Drawable)>
<android.widget.CompoundButton: void setButtonIcon(android.graphics.drawable.Icon)>
<android.widget.CompoundButton: void setButtonTintBlendMode(android.graphics.BlendMode)>
<android.widget.CompoundButton: void setButtonTintList(android.content.res.ColorStateList)>
<android.widget.CompoundButton: void setButtonTintMode(android.graphics.PorterDuff$Mode)>
<android.widget.CompoundButton: void setChecked(boolean)>
<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>
<android.widget.CompoundButton: void toggle()>
android.widget.CompoundButton$OnCheckedChangeListener
<android.widget.CompoundButton$OnCheckedChangeListener: void onCheckedChanged(android.widget.CompoundButton,boolean)>
android.widget.CursorAdapter
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor)>
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor,boolean)>
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor,int)>
<android.widget.CursorAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>
<android.widget.CursorAdapter: void changeCursor(android.database.Cursor)>
<android.widget.CursorAdapter: java.lang.CharSequence convertToString(android.database.Cursor)>
<android.widget.CursorAdapter: int getCount()>
<android.widget.CursorAdapter: android.database.Cursor getCursor()>
<android.widget.CursorAdapter: android.content.res.Resources$Theme getDropDownViewTheme()>
<android.widget.CursorAdapter: android.widget.Filter getFilter()>
<android.widget.CursorAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()>
<android.widget.CursorAdapter: java.lang.Object getItem(int)>
<android.widget.CursorAdapter: long getItemId(int)>
<android.widget.CursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.CursorAdapter: void init(android.content.Context,android.database.Cursor,boolean)>
<android.widget.CursorAdapter: android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<android.widget.CursorAdapter: android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<android.widget.CursorAdapter: void onContentChanged()>
<android.widget.CursorAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)>
<android.widget.CursorAdapter: void setDropDownViewTheme(android.content.res.Resources$Theme)>
<android.widget.CursorAdapter: void setFilterQueryProvider(android.widget.FilterQueryProvider)>
<android.widget.CursorAdapter: android.database.Cursor swapCursor(android.database.Cursor)>
<android.widget.CursorAdapter: int FLAG_AUTO_REQUERY>
<android.widget.CursorAdapter: int FLAG_REGISTER_CONTENT_OBSERVER>
android.widget.CursorTreeAdapter
<android.widget.CursorTreeAdapter: void <init>(android.database.Cursor,android.content.Context)>
<android.widget.CursorTreeAdapter: void <init>(android.database.Cursor,android.content.Context,boolean)>
<android.widget.CursorTreeAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor,boolean)>
<android.widget.CursorTreeAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,boolean)>
<android.widget.CursorTreeAdapter: void changeCursor(android.database.Cursor)>
<android.widget.CursorTreeAdapter: java.lang.String convertToString(android.database.Cursor)>
<android.widget.CursorTreeAdapter: android.database.Cursor getChild(int,int)>
<android.widget.CursorTreeAdapter: long getChildId(int,int)>
<android.widget.CursorTreeAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.CursorTreeAdapter: int getChildrenCount(int)>
<android.widget.CursorTreeAdapter: android.database.Cursor getChildrenCursor(android.database.Cursor)>
<android.widget.CursorTreeAdapter: android.database.Cursor getCursor()>
<android.widget.CursorTreeAdapter: android.widget.Filter getFilter()>
<android.widget.CursorTreeAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()>
<android.widget.CursorTreeAdapter: android.database.Cursor getGroup(int)>
<android.widget.CursorTreeAdapter: int getGroupCount()>
<android.widget.CursorTreeAdapter: long getGroupId(int)>
<android.widget.CursorTreeAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.CursorTreeAdapter: boolean hasStableIds()>
<android.widget.CursorTreeAdapter: boolean isChildSelectable(int,int)>
<android.widget.CursorTreeAdapter: android.view.View newChildView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
<android.widget.CursorTreeAdapter: android.view.View newGroupView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
<android.widget.CursorTreeAdapter: void notifyDataSetChanged(boolean)>
<android.widget.CursorTreeAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)>
<android.widget.CursorTreeAdapter: void setChildrenCursor(int,android.database.Cursor)>
<android.widget.CursorTreeAdapter: void setFilterQueryProvider(android.widget.FilterQueryProvider)>
<android.widget.CursorTreeAdapter: void setGroupCursor(android.database.Cursor)>
android.widget.DatePicker
<android.widget.DatePicker: void <init>(android.content.Context)>
<android.widget.DatePicker: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.DatePicker: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.DatePicker: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.DatePicker: android.widget.CalendarView getCalendarView()>
<android.widget.DatePicker: boolean getCalendarViewShown()>
<android.widget.DatePicker: int getDayOfMonth()>
<android.widget.DatePicker: int getFirstDayOfWeek()>
<android.widget.DatePicker: long getMaxDate()>
<android.widget.DatePicker: long getMinDate()>
<android.widget.DatePicker: int getMonth()>
<android.widget.DatePicker: boolean getSpinnersShown()>
<android.widget.DatePicker: int getYear()>
<android.widget.DatePicker: void init(int,int,int,android.widget.DatePicker$OnDateChangedListener)>
<android.widget.DatePicker: void setCalendarViewShown(boolean)>
<android.widget.DatePicker: void setFirstDayOfWeek(int)>
<android.widget.DatePicker: void setMaxDate(long)>
<android.widget.DatePicker: void setMinDate(long)>
<android.widget.DatePicker: void setOnDateChangedListener(android.widget.DatePicker$OnDateChangedListener)>
<android.widget.DatePicker: void setSpinnersShown(boolean)>
<android.widget.DatePicker: void updateDate(int,int,int)>
android.widget.DatePicker$OnDateChangedListener
<android.widget.DatePicker$OnDateChangedListener: void onDateChanged(android.widget.DatePicker,int,int,int)>
android.widget.DialerFilter
<android.widget.DialerFilter: void <init>(android.content.Context)>
<android.widget.DialerFilter: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.DialerFilter: void append(java.lang.String)>
<android.widget.DialerFilter: void clearText()>
<android.widget.DialerFilter: java.lang.CharSequence getDigits()>
<android.widget.DialerFilter: java.lang.CharSequence getFilterText()>
<android.widget.DialerFilter: java.lang.CharSequence getLetters()>
<android.widget.DialerFilter: int getMode()>
<android.widget.DialerFilter: boolean isQwertyKeyboard()>
<android.widget.DialerFilter: void onModeChange(int,int)>
<android.widget.DialerFilter: void removeFilterWatcher(android.text.TextWatcher)>
<android.widget.DialerFilter: void setDigitsWatcher(android.text.TextWatcher)>
<android.widget.DialerFilter: void setFilterWatcher(android.text.TextWatcher)>
<android.widget.DialerFilter: void setLettersWatcher(android.text.TextWatcher)>
<android.widget.DialerFilter: void setMode(int)>
<android.widget.DialerFilter: int DIGITS_AND_LETTERS>
<android.widget.DialerFilter: int DIGITS_AND_LETTERS_NO_DIGITS>
<android.widget.DialerFilter: int DIGITS_AND_LETTERS_NO_LETTERS>
<android.widget.DialerFilter: int DIGITS_ONLY>
<android.widget.DialerFilter: int LETTERS_ONLY>
android.widget.DigitalClock
<android.widget.DigitalClock: void <init>(android.content.Context)>
<android.widget.DigitalClock: void <init>(android.content.Context,android.util.AttributeSet)>
android.widget.EdgeEffect
<android.widget.EdgeEffect: void <init>(android.content.Context)>
<android.widget.EdgeEffect: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.EdgeEffect: boolean draw(android.graphics.Canvas)>
<android.widget.EdgeEffect: void finish()>
<android.widget.EdgeEffect: android.graphics.BlendMode getBlendMode()>
<android.widget.EdgeEffect: int getColor()>
<android.widget.EdgeEffect: float getDistance()>
<android.widget.EdgeEffect: int getMaxHeight()>
<android.widget.EdgeEffect: boolean isFinished()>
<android.widget.EdgeEffect: void onAbsorb(int)>
<android.widget.EdgeEffect: void onPull(float)>
<android.widget.EdgeEffect: void onPull(float,float)>
<android.widget.EdgeEffect: float onPullDistance(float,float)>
<android.widget.EdgeEffect: void onRelease()>
<android.widget.EdgeEffect: void setBlendMode(android.graphics.BlendMode)>
<android.widget.EdgeEffect: void setColor(int)>
<android.widget.EdgeEffect: void setSize(int,int)>
<android.widget.EdgeEffect: android.graphics.BlendMode DEFAULT_BLEND_MODE>
android.widget.EditText
<android.widget.EditText: void <init>(android.content.Context)>
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.EditText: void extendSelection(int)>
<android.widget.EditText: android.text.Editable getText()>
<android.widget.EditText: void selectAll()>
<android.widget.EditText: void setSelection(int,int)>
<android.widget.EditText: void setSelection(int)>
android.widget.ExpandableListAdapter
<android.widget.ExpandableListAdapter: boolean areAllItemsEnabled()>
<android.widget.ExpandableListAdapter: java.lang.Object getChild(int,int)>
<android.widget.ExpandableListAdapter: long getChildId(int,int)>
<android.widget.ExpandableListAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.ExpandableListAdapter: int getChildrenCount(int)>
<android.widget.ExpandableListAdapter: long getCombinedChildId(long,long)>
<android.widget.ExpandableListAdapter: long getCombinedGroupId(long)>
<android.widget.ExpandableListAdapter: java.lang.Object getGroup(int)>
<android.widget.ExpandableListAdapter: int getGroupCount()>
<android.widget.ExpandableListAdapter: long getGroupId(int)>
<android.widget.ExpandableListAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.ExpandableListAdapter: boolean hasStableIds()>
<android.widget.ExpandableListAdapter: boolean isChildSelectable(int,int)>
<android.widget.ExpandableListAdapter: boolean isEmpty()>
<android.widget.ExpandableListAdapter: void onGroupCollapsed(int)>
<android.widget.ExpandableListAdapter: void onGroupExpanded(int)>
<android.widget.ExpandableListAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.ExpandableListAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
android.widget.ExpandableListView
<android.widget.ExpandableListView: void <init>(android.content.Context)>
<android.widget.ExpandableListView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ExpandableListView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ExpandableListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ExpandableListView: boolean collapseGroup(int)>
<android.widget.ExpandableListView: boolean expandGroup(int)>
<android.widget.ExpandableListView: boolean expandGroup(int,boolean)>
<android.widget.ExpandableListView: android.widget.ExpandableListAdapter getExpandableListAdapter()>
<android.widget.ExpandableListView: long getExpandableListPosition(int)>
<android.widget.ExpandableListView: int getFlatListPosition(long)>
<android.widget.ExpandableListView: int getPackedPositionChild(long)>
<android.widget.ExpandableListView: long getPackedPositionForChild(int,int)>
<android.widget.ExpandableListView: long getPackedPositionForGroup(int)>
<android.widget.ExpandableListView: int getPackedPositionGroup(long)>
<android.widget.ExpandableListView: int getPackedPositionType(long)>
<android.widget.ExpandableListView: long getSelectedId()>
<android.widget.ExpandableListView: long getSelectedPosition()>
<android.widget.ExpandableListView: boolean isGroupExpanded(int)>
<android.widget.ExpandableListView: void setAdapter(android.widget.ExpandableListAdapter)>
<android.widget.ExpandableListView: void setChildDivider(android.graphics.drawable.Drawable)>
<android.widget.ExpandableListView: void setChildIndicator(android.graphics.drawable.Drawable)>
<android.widget.ExpandableListView: void setChildIndicatorBounds(int,int)>
<android.widget.ExpandableListView: void setChildIndicatorBoundsRelative(int,int)>
<android.widget.ExpandableListView: void setGroupIndicator(android.graphics.drawable.Drawable)>
<android.widget.ExpandableListView: void setIndicatorBounds(int,int)>
<android.widget.ExpandableListView: void setIndicatorBoundsRelative(int,int)>
<android.widget.ExpandableListView: void setOnChildClickListener(android.widget.ExpandableListView$OnChildClickListener)>
<android.widget.ExpandableListView: void setOnGroupClickListener(android.widget.ExpandableListView$OnGroupClickListener)>
<android.widget.ExpandableListView: void setOnGroupCollapseListener(android.widget.ExpandableListView$OnGroupCollapseListener)>
<android.widget.ExpandableListView: void setOnGroupExpandListener(android.widget.ExpandableListView$OnGroupExpandListener)>
<android.widget.ExpandableListView: boolean setSelectedChild(int,int,boolean)>
<android.widget.ExpandableListView: void setSelectedGroup(int)>
<android.widget.ExpandableListView: int CHILD_INDICATOR_INHERIT>
<android.widget.ExpandableListView: int PACKED_POSITION_TYPE_CHILD>
<android.widget.ExpandableListView: int PACKED_POSITION_TYPE_GROUP>
<android.widget.ExpandableListView: int PACKED_POSITION_TYPE_NULL>
<android.widget.ExpandableListView: long PACKED_POSITION_VALUE_NULL>
android.widget.ExpandableListView$ExpandableListContextMenuInfo
<android.widget.ExpandableListView$ExpandableListContextMenuInfo: void <init>(android.view.View,long,long)>
<android.widget.ExpandableListView$ExpandableListContextMenuInfo: long id>
<android.widget.ExpandableListView$ExpandableListContextMenuInfo: long packedPosition>
<android.widget.ExpandableListView$ExpandableListContextMenuInfo: android.view.View targetView>
android.widget.ExpandableListView$OnChildClickListener
<android.widget.ExpandableListView$OnChildClickListener: boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)>
android.widget.ExpandableListView$OnGroupClickListener
<android.widget.ExpandableListView$OnGroupClickListener: boolean onGroupClick(android.widget.ExpandableListView,android.view.View,int,long)>
android.widget.ExpandableListView$OnGroupCollapseListener
<android.widget.ExpandableListView$OnGroupCollapseListener: void onGroupCollapse(int)>
android.widget.ExpandableListView$OnGroupExpandListener
<android.widget.ExpandableListView$OnGroupExpandListener: void onGroupExpand(int)>
android.widget.Filter
<android.widget.Filter: void <init>()>
<android.widget.Filter: java.lang.CharSequence convertResultToString(java.lang.Object)>
<android.widget.Filter: void filter(java.lang.CharSequence)>
<android.widget.Filter: void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)>
<android.widget.Filter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)>
<android.widget.Filter: void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults)>
android.widget.Filter$FilterListener
<android.widget.Filter$FilterListener: void onFilterComplete(int)>
android.widget.Filter$FilterResults
<android.widget.Filter$FilterResults: void <init>()>
<android.widget.Filter$FilterResults: int count>
<android.widget.Filter$FilterResults: java.lang.Object values>
android.widget.FilterQueryProvider
<android.widget.FilterQueryProvider: android.database.Cursor runQuery(java.lang.CharSequence)>
android.widget.Filterable
<android.widget.Filterable: android.widget.Filter getFilter()>
android.widget.FrameLayout
<android.widget.FrameLayout: void <init>(android.content.Context)>
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.FrameLayout: android.widget.FrameLayout$LayoutParams generateDefaultLayoutParams()>
<android.widget.FrameLayout: android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>
<android.widget.FrameLayout: boolean getMeasureAllChildren()>
<android.widget.FrameLayout: void setMeasureAllChildren(boolean)>
android.widget.FrameLayout$LayoutParams
<android.widget.FrameLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.FrameLayout$LayoutParams: void <init>(int,int)>
<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)>
<android.widget.FrameLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.widget.FrameLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>
<android.widget.FrameLayout$LayoutParams: void <init>(android.widget.FrameLayout$LayoutParams)>
<android.widget.FrameLayout$LayoutParams: int UNSPECIFIED_GRAVITY>
<android.widget.FrameLayout$LayoutParams: int gravity>
android.widget.Gallery
<android.widget.Gallery: void <init>(android.content.Context)>
<android.widget.Gallery: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Gallery: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Gallery: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.Gallery: boolean onDown(android.view.MotionEvent)>
<android.widget.Gallery: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.widget.Gallery: void onLongPress(android.view.MotionEvent)>
<android.widget.Gallery: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.widget.Gallery: void onShowPress(android.view.MotionEvent)>
<android.widget.Gallery: boolean onSingleTapUp(android.view.MotionEvent)>
<android.widget.Gallery: void setAnimationDuration(int)>
<android.widget.Gallery: void setCallbackDuringFling(boolean)>
<android.widget.Gallery: void setGravity(int)>
<android.widget.Gallery: void setSpacing(int)>
<android.widget.Gallery: void setUnselectedAlpha(float)>
android.widget.Gallery$LayoutParams
<android.widget.Gallery$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Gallery$LayoutParams: void <init>(int,int)>
<android.widget.Gallery$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
android.widget.GridLayout
<android.widget.GridLayout: void <init>(android.content.Context)>
<android.widget.GridLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.GridLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.GridLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.GridLayout: android.widget.GridLayout$LayoutParams generateDefaultLayoutParams()>
<android.widget.GridLayout: android.widget.GridLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.GridLayout: android.widget.GridLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.widget.GridLayout: int getAlignmentMode()>
<android.widget.GridLayout: int getColumnCount()>
<android.widget.GridLayout: int getOrientation()>
<android.widget.GridLayout: int getRowCount()>
<android.widget.GridLayout: boolean getUseDefaultMargins()>
<android.widget.GridLayout: boolean isColumnOrderPreserved()>
<android.widget.GridLayout: boolean isRowOrderPreserved()>
<android.widget.GridLayout: void setAlignmentMode(int)>
<android.widget.GridLayout: void setColumnCount(int)>
<android.widget.GridLayout: void setColumnOrderPreserved(boolean)>
<android.widget.GridLayout: void setOrientation(int)>
<android.widget.GridLayout: void setRowCount(int)>
<android.widget.GridLayout: void setRowOrderPreserved(boolean)>
<android.widget.GridLayout: void setUseDefaultMargins(boolean)>
<android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,android.widget.GridLayout$Alignment,float)>
<android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,android.widget.GridLayout$Alignment,float)>
<android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,float)>
<android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,float)>
<android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,android.widget.GridLayout$Alignment)>
<android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,android.widget.GridLayout$Alignment)>
<android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int)>
<android.widget.GridLayout: android.widget.GridLayout$Spec spec(int)>
<android.widget.GridLayout: int ALIGN_BOUNDS>
<android.widget.GridLayout: int ALIGN_MARGINS>
<android.widget.GridLayout: android.widget.GridLayout$Alignment BASELINE>
<android.widget.GridLayout: android.widget.GridLayout$Alignment BOTTOM>
<android.widget.GridLayout: android.widget.GridLayout$Alignment CENTER>
<android.widget.GridLayout: android.widget.GridLayout$Alignment END>
<android.widget.GridLayout: android.widget.GridLayout$Alignment FILL>
<android.widget.GridLayout: int HORIZONTAL>
<android.widget.GridLayout: android.widget.GridLayout$Alignment LEFT>
<android.widget.GridLayout: android.widget.GridLayout$Alignment RIGHT>
<android.widget.GridLayout: android.widget.GridLayout$Alignment START>
<android.widget.GridLayout: android.widget.GridLayout$Alignment TOP>
<android.widget.GridLayout: int UNDEFINED>
<android.widget.GridLayout: int VERTICAL>
android.widget.GridLayout$Alignment
android.widget.GridLayout$LayoutParams
<android.widget.GridLayout$LayoutParams: void <init>(android.widget.GridLayout$Spec,android.widget.GridLayout$Spec)>
<android.widget.GridLayout$LayoutParams: void <init>()>
<android.widget.GridLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.widget.GridLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>
<android.widget.GridLayout$LayoutParams: void <init>(android.widget.GridLayout$LayoutParams)>
<android.widget.GridLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.GridLayout$LayoutParams: void setGravity(int)>
<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>
<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>
android.widget.GridLayout$Spec
android.widget.GridView
<android.widget.GridView: void <init>(android.content.Context)>
<android.widget.GridView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.GridView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.GridView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.GridView: android.widget.ListAdapter getAdapter()>
<android.widget.GridView: int getColumnWidth()>
<android.widget.GridView: int getGravity()>
<android.widget.GridView: int getHorizontalSpacing()>
<android.widget.GridView: int getNumColumns()>
<android.widget.GridView: int getRequestedColumnWidth()>
<android.widget.GridView: int getRequestedHorizontalSpacing()>
<android.widget.GridView: int getStretchMode()>
<android.widget.GridView: int getVerticalSpacing()>
<android.widget.GridView: void setColumnWidth(int)>
<android.widget.GridView: void setGravity(int)>
<android.widget.GridView: void setHorizontalSpacing(int)>
<android.widget.GridView: void setNumColumns(int)>
<android.widget.GridView: void setSelection(int)>
<android.widget.GridView: void setStretchMode(int)>
<android.widget.GridView: void setVerticalSpacing(int)>
<android.widget.GridView: void smoothScrollByOffset(int)>
<android.widget.GridView: int AUTO_FIT>
<android.widget.GridView: int NO_STRETCH>
<android.widget.GridView: int STRETCH_COLUMN_WIDTH>
<android.widget.GridView: int STRETCH_SPACING>
<android.widget.GridView: int STRETCH_SPACING_UNIFORM>
android.widget.HeaderViewListAdapter
<android.widget.HeaderViewListAdapter: void <init>(java.util.ArrayList,java.util.ArrayList,android.widget.ListAdapter)>
<android.widget.HeaderViewListAdapter: boolean areAllItemsEnabled()>
<android.widget.HeaderViewListAdapter: int getCount()>
<android.widget.HeaderViewListAdapter: android.widget.Filter getFilter()>
<android.widget.HeaderViewListAdapter: int getFootersCount()>
<android.widget.HeaderViewListAdapter: int getHeadersCount()>
<android.widget.HeaderViewListAdapter: java.lang.Object getItem(int)>
<android.widget.HeaderViewListAdapter: long getItemId(int)>
<android.widget.HeaderViewListAdapter: int getItemViewType(int)>
<android.widget.HeaderViewListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.HeaderViewListAdapter: int getViewTypeCount()>
<android.widget.HeaderViewListAdapter: android.widget.ListAdapter getWrappedAdapter()>
<android.widget.HeaderViewListAdapter: boolean hasStableIds()>
<android.widget.HeaderViewListAdapter: boolean isEmpty()>
<android.widget.HeaderViewListAdapter: boolean isEnabled(int)>
<android.widget.HeaderViewListAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.HeaderViewListAdapter: boolean removeFooter(android.view.View)>
<android.widget.HeaderViewListAdapter: boolean removeHeader(android.view.View)>
<android.widget.HeaderViewListAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
android.widget.HeterogeneousExpandableList
<android.widget.HeterogeneousExpandableList: int getChildType(int,int)>
<android.widget.HeterogeneousExpandableList: int getChildTypeCount()>
<android.widget.HeterogeneousExpandableList: int getGroupType(int)>
<android.widget.HeterogeneousExpandableList: int getGroupTypeCount()>
android.widget.HorizontalScrollView
<android.widget.HorizontalScrollView: void <init>(android.content.Context)>
<android.widget.HorizontalScrollView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.HorizontalScrollView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.HorizontalScrollView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.HorizontalScrollView: boolean arrowScroll(int)>
<android.widget.HorizontalScrollView: int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect)>
<android.widget.HorizontalScrollView: boolean executeKeyEvent(android.view.KeyEvent)>
<android.widget.HorizontalScrollView: void fling(int)>
<android.widget.HorizontalScrollView: boolean fullScroll(int)>
<android.widget.HorizontalScrollView: int getLeftEdgeEffectColor()>
<android.widget.HorizontalScrollView: int getMaxScrollAmount()>
<android.widget.HorizontalScrollView: int getRightEdgeEffectColor()>
<android.widget.HorizontalScrollView: boolean isFillViewport()>
<android.widget.HorizontalScrollView: boolean isSmoothScrollingEnabled()>
<android.widget.HorizontalScrollView: boolean pageScroll(int)>
<android.widget.HorizontalScrollView: void setEdgeEffectColor(int)>
<android.widget.HorizontalScrollView: void setFillViewport(boolean)>
<android.widget.HorizontalScrollView: void setLeftEdgeEffectColor(int)>
<android.widget.HorizontalScrollView: void setRightEdgeEffectColor(int)>
<android.widget.HorizontalScrollView: void setSmoothScrollingEnabled(boolean)>
<android.widget.HorizontalScrollView: void smoothScrollBy(int,int)>
<android.widget.HorizontalScrollView: void smoothScrollTo(int,int)>
android.widget.ImageButton
<android.widget.ImageButton: void <init>(android.content.Context)>
<android.widget.ImageButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ImageButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ImageButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
android.widget.ImageSwitcher
<android.widget.ImageSwitcher: void <init>(android.content.Context)>
<android.widget.ImageSwitcher: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ImageSwitcher: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageSwitcher: void setImageResource(int)>
<android.widget.ImageSwitcher: void setImageURI(android.net.Uri)>
android.widget.ImageView
<android.widget.ImageView: void <init>(android.content.Context)>
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ImageView: void animateTransform(android.graphics.Matrix)>
<android.widget.ImageView: void clearColorFilter()>
<android.widget.ImageView: boolean getAdjustViewBounds()>
<android.widget.ImageView: boolean getBaselineAlignBottom()>
<android.widget.ImageView: android.graphics.ColorFilter getColorFilter()>
<android.widget.ImageView: boolean getCropToPadding()>
<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()>
<android.widget.ImageView: int getImageAlpha()>
<android.widget.ImageView: android.graphics.Matrix getImageMatrix()>
<android.widget.ImageView: android.graphics.BlendMode getImageTintBlendMode()>
<android.widget.ImageView: android.content.res.ColorStateList getImageTintList()>
<android.widget.ImageView: android.graphics.PorterDuff$Mode getImageTintMode()>
<android.widget.ImageView: int getMaxHeight()>
<android.widget.ImageView: int getMaxWidth()>
<android.widget.ImageView: android.widget.ImageView$ScaleType getScaleType()>
<android.widget.ImageView: int[] onCreateDrawableState(int)>
<android.widget.ImageView: void setAdjustViewBounds(boolean)>
<android.widget.ImageView: void setAlpha(int)>
<android.widget.ImageView: void setBaseline(int)>
<android.widget.ImageView: void setBaselineAlignBottom(boolean)>
<android.widget.ImageView: void setColorFilter(int,android.graphics.PorterDuff$Mode)>
<android.widget.ImageView: void setColorFilter(int)>
<android.widget.ImageView: void setColorFilter(android.graphics.ColorFilter)>
<android.widget.ImageView: void setCropToPadding(boolean)>
<android.widget.ImageView: boolean setFrame(int,int,int,int)>
<android.widget.ImageView: void setImageAlpha(int)>
<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
<android.widget.ImageView: void setImageIcon(android.graphics.drawable.Icon)>
<android.widget.ImageView: void setImageLevel(int)>
<android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>
<android.widget.ImageView: void setImageResource(int)>
<android.widget.ImageView: void setImageState(int[],boolean)>
<android.widget.ImageView: void setImageTintBlendMode(android.graphics.BlendMode)>
<android.widget.ImageView: void setImageTintList(android.content.res.ColorStateList)>
<android.widget.ImageView: void setImageTintMode(android.graphics.PorterDuff$Mode)>
<android.widget.ImageView: void setImageURI(android.net.Uri)>
<android.widget.ImageView: void setMaxHeight(int)>
<android.widget.ImageView: void setMaxWidth(int)>
<android.widget.ImageView: void setScaleType(android.widget.ImageView$ScaleType)>
android.widget.ImageView$ScaleType
<android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType CENTER>
<android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType CENTER_CROP>
<android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType CENTER_INSIDE>
<android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType FIT_CENTER>
<android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType FIT_END>
<android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType FIT_START>
<android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType FIT_XY>
<android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType MATRIX>
android.widget.LinearLayout
<android.widget.LinearLayout: void <init>(android.content.Context)>
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.LinearLayout: android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams()>
<android.widget.LinearLayout: android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.LinearLayout: android.widget.LinearLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.widget.LinearLayout: int getBaselineAlignedChildIndex()>
<android.widget.LinearLayout: android.graphics.drawable.Drawable getDividerDrawable()>
<android.widget.LinearLayout: int getDividerPadding()>
<android.widget.LinearLayout: int getGravity()>
<android.widget.LinearLayout: int getOrientation()>
<android.widget.LinearLayout: int getShowDividers()>
<android.widget.LinearLayout: float getWeightSum()>
<android.widget.LinearLayout: boolean isBaselineAligned()>
<android.widget.LinearLayout: boolean isMeasureWithLargestChildEnabled()>
<android.widget.LinearLayout: void setBaselineAligned(boolean)>
<android.widget.LinearLayout: void setBaselineAlignedChildIndex(int)>
<android.widget.LinearLayout: void setDividerDrawable(android.graphics.drawable.Drawable)>
<android.widget.LinearLayout: void setDividerPadding(int)>
<android.widget.LinearLayout: void setGravity(int)>
<android.widget.LinearLayout: void setHorizontalGravity(int)>
<android.widget.LinearLayout: void setMeasureWithLargestChildEnabled(boolean)>
<android.widget.LinearLayout: void setOrientation(int)>
<android.widget.LinearLayout: void setShowDividers(int)>
<android.widget.LinearLayout: void setVerticalGravity(int)>
<android.widget.LinearLayout: void setWeightSum(float)>
<android.widget.LinearLayout: int HORIZONTAL>
<android.widget.LinearLayout: int SHOW_DIVIDER_BEGINNING>
<android.widget.LinearLayout: int SHOW_DIVIDER_END>
<android.widget.LinearLayout: int SHOW_DIVIDER_MIDDLE>
<android.widget.LinearLayout: int SHOW_DIVIDER_NONE>
<android.widget.LinearLayout: int VERTICAL>
android.widget.LinearLayout$LayoutParams
<android.widget.LinearLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.LinearLayout$LayoutParams: void <init>(int,int)>
<android.widget.LinearLayout$LayoutParams: void <init>(int,int,float)>
<android.widget.LinearLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.widget.LinearLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>
<android.widget.LinearLayout$LayoutParams: void <init>(android.widget.LinearLayout$LayoutParams)>
<android.widget.LinearLayout$LayoutParams: java.lang.String debug(java.lang.String)>
<android.widget.LinearLayout$LayoutParams: int gravity>
<android.widget.LinearLayout$LayoutParams: float weight>
android.widget.ListAdapter
<android.widget.ListAdapter: boolean areAllItemsEnabled()>
<android.widget.ListAdapter: boolean isEnabled(int)>
android.widget.ListPopupWindow
<android.widget.ListPopupWindow: void <init>(android.content.Context)>
<android.widget.ListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ListPopupWindow: void clearListSelection()>
<android.widget.ListPopupWindow: android.view.View$OnTouchListener createDragToOpenListener(android.view.View)>
<android.widget.ListPopupWindow: void dismiss()>
<android.widget.ListPopupWindow: android.view.View getAnchorView()>
<android.widget.ListPopupWindow: int getAnimationStyle()>
<android.widget.ListPopupWindow: android.graphics.drawable.Drawable getBackground()>
<android.widget.ListPopupWindow: android.graphics.Rect getEpicenterBounds()>
<android.widget.ListPopupWindow: int getHeight()>
<android.widget.ListPopupWindow: int getHorizontalOffset()>
<android.widget.ListPopupWindow: int getInputMethodMode()>
<android.widget.ListPopupWindow: android.widget.ListView getListView()>
<android.widget.ListPopupWindow: int getPromptPosition()>
<android.widget.ListPopupWindow: java.lang.Object getSelectedItem()>
<android.widget.ListPopupWindow: long getSelectedItemId()>
<android.widget.ListPopupWindow: int getSelectedItemPosition()>
<android.widget.ListPopupWindow: android.view.View getSelectedView()>
<android.widget.ListPopupWindow: int getSoftInputMode()>
<android.widget.ListPopupWindow: int getVerticalOffset()>
<android.widget.ListPopupWindow: int getWidth()>
<android.widget.ListPopupWindow: boolean isInputMethodNotNeeded()>
<android.widget.ListPopupWindow: boolean isModal()>
<android.widget.ListPopupWindow: boolean isShowing()>
<android.widget.ListPopupWindow: boolean onKeyDown(int,android.view.KeyEvent)>
<android.widget.ListPopupWindow: boolean onKeyPreIme(int,android.view.KeyEvent)>
<android.widget.ListPopupWindow: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.ListPopupWindow: boolean performItemClick(int)>
<android.widget.ListPopupWindow: void postShow()>
<android.widget.ListPopupWindow: void setAdapter(android.widget.ListAdapter)>
<android.widget.ListPopupWindow: void setAnchorView(android.view.View)>
<android.widget.ListPopupWindow: void setAnimationStyle(int)>
<android.widget.ListPopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.ListPopupWindow: void setContentWidth(int)>
<android.widget.ListPopupWindow: void setDropDownGravity(int)>
<android.widget.ListPopupWindow: void setEpicenterBounds(android.graphics.Rect)>
<android.widget.ListPopupWindow: void setHeight(int)>
<android.widget.ListPopupWindow: void setHorizontalOffset(int)>
<android.widget.ListPopupWindow: void setInputMethodMode(int)>
<android.widget.ListPopupWindow: void setListSelector(android.graphics.drawable.Drawable)>
<android.widget.ListPopupWindow: void setModal(boolean)>
<android.widget.ListPopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>
<android.widget.ListPopupWindow: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.widget.ListPopupWindow: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>
<android.widget.ListPopupWindow: void setPromptPosition(int)>
<android.widget.ListPopupWindow: void setPromptView(android.view.View)>
<android.widget.ListPopupWindow: void setSelection(int)>
<android.widget.ListPopupWindow: void setSoftInputMode(int)>
<android.widget.ListPopupWindow: void setVerticalOffset(int)>
<android.widget.ListPopupWindow: void setWidth(int)>
<android.widget.ListPopupWindow: void setWindowLayoutType(int)>
<android.widget.ListPopupWindow: void show()>
<android.widget.ListPopupWindow: int INPUT_METHOD_FROM_FOCUSABLE>
<android.widget.ListPopupWindow: int INPUT_METHOD_NEEDED>
<android.widget.ListPopupWindow: int INPUT_METHOD_NOT_NEEDED>
<android.widget.ListPopupWindow: int MATCH_PARENT>
<android.widget.ListPopupWindow: int POSITION_PROMPT_ABOVE>
<android.widget.ListPopupWindow: int POSITION_PROMPT_BELOW>
<android.widget.ListPopupWindow: int WRAP_CONTENT>
android.widget.ListView
<android.widget.ListView: void <init>(android.content.Context)>
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ListView: void addFooterView(android.view.View,java.lang.Object,boolean)>
<android.widget.ListView: void addFooterView(android.view.View)>
<android.widget.ListView: void addHeaderView(android.view.View,java.lang.Object,boolean)>
<android.widget.ListView: void addHeaderView(android.view.View)>
<android.widget.ListView: boolean areFooterDividersEnabled()>
<android.widget.ListView: boolean areHeaderDividersEnabled()>
<android.widget.ListView: android.widget.ListAdapter getAdapter()>
<android.widget.ListView: long[] getCheckItemIds()>
<android.widget.ListView: android.graphics.drawable.Drawable getDivider()>
<android.widget.ListView: int getDividerHeight()>
<android.widget.ListView: int getFooterViewsCount()>
<android.widget.ListView: int getHeaderViewsCount()>
<android.widget.ListView: boolean getItemsCanFocus()>
<android.widget.ListView: int getMaxScrollAmount()>
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollFooter()>
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollHeader()>
<android.widget.ListView: boolean removeFooterView(android.view.View)>
<android.widget.ListView: boolean removeHeaderView(android.view.View)>
<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)>
<android.widget.ListView: void setDividerHeight(int)>
<android.widget.ListView: void setFooterDividersEnabled(boolean)>
<android.widget.ListView: void setHeaderDividersEnabled(boolean)>
<android.widget.ListView: void setItemsCanFocus(boolean)>
<android.widget.ListView: void setOverscrollFooter(android.graphics.drawable.Drawable)>
<android.widget.ListView: void setOverscrollHeader(android.graphics.drawable.Drawable)>
<android.widget.ListView: void setSelection(int)>
<android.widget.ListView: void setSelectionAfterHeaderView()>
<android.widget.ListView: void smoothScrollByOffset(int)>
android.widget.ListView$FixedViewInfo
<android.widget.ListView$FixedViewInfo: void <init>(android.widget.ListView)>
<android.widget.ListView$FixedViewInfo: java.lang.Object data>
<android.widget.ListView$FixedViewInfo: boolean isSelectable>
<android.widget.ListView$FixedViewInfo: android.view.View view>
android.widget.Magnifier
<android.widget.Magnifier: void <init>(android.view.View)>
<android.widget.Magnifier: void dismiss()>
<android.widget.Magnifier: float getCornerRadius()>
<android.widget.Magnifier: int getDefaultHorizontalSourceToMagnifierOffset()>
<android.widget.Magnifier: int getDefaultVerticalSourceToMagnifierOffset()>
<android.widget.Magnifier: float getElevation()>
<android.widget.Magnifier: int getHeight()>
<android.widget.Magnifier: android.graphics.drawable.Drawable getOverlay()>
<android.widget.Magnifier: android.graphics.Point getPosition()>
<android.widget.Magnifier: int getSourceHeight()>
<android.widget.Magnifier: android.graphics.Point getSourcePosition()>
<android.widget.Magnifier: int getSourceWidth()>
<android.widget.Magnifier: int getWidth()>
<android.widget.Magnifier: float getZoom()>
<android.widget.Magnifier: boolean isClippingEnabled()>
<android.widget.Magnifier: void setZoom(float)>
<android.widget.Magnifier: void show(float,float)>
<android.widget.Magnifier: void show(float,float,float,float)>
<android.widget.Magnifier: void update()>
<android.widget.Magnifier: int SOURCE_BOUND_MAX_IN_SURFACE>
<android.widget.Magnifier: int SOURCE_BOUND_MAX_VISIBLE>
android.widget.Magnifier$Builder
<android.widget.Magnifier$Builder: void <init>(android.view.View)>
<android.widget.Magnifier$Builder: android.widget.Magnifier build()>
<android.widget.Magnifier$Builder: android.widget.Magnifier$Builder setClippingEnabled(boolean)>
<android.widget.Magnifier$Builder: android.widget.Magnifier$Builder setCornerRadius(float)>
<android.widget.Magnifier$Builder: android.widget.Magnifier$Builder setDefaultSourceToMagnifierOffset(int,int)>
<android.widget.Magnifier$Builder: android.widget.Magnifier$Builder setElevation(float)>
<android.widget.Magnifier$Builder: android.widget.Magnifier$Builder setInitialZoom(float)>
<android.widget.Magnifier$Builder: android.widget.Magnifier$Builder setOverlay(android.graphics.drawable.Drawable)>
<android.widget.Magnifier$Builder: android.widget.Magnifier$Builder setSize(int,int)>
<android.widget.Magnifier$Builder: android.widget.Magnifier$Builder setSourceBounds(int,int,int,int)>
android.widget.MediaController
<android.widget.MediaController: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.MediaController: void <init>(android.content.Context,boolean)>
<android.widget.MediaController: void <init>(android.content.Context)>
<android.widget.MediaController: void hide()>
<android.widget.MediaController: boolean isShowing()>
<android.widget.MediaController: void onFinishInflate()>
<android.widget.MediaController: void setAnchorView(android.view.View)>
<android.widget.MediaController: void setMediaPlayer(android.widget.MediaController$MediaPlayerControl)>
<android.widget.MediaController: void setPrevNextListeners(android.view.View$OnClickListener,android.view.View$OnClickListener)>
<android.widget.MediaController: void show()>
<android.widget.MediaController: void show(int)>
android.widget.MediaController$MediaPlayerControl
<android.widget.MediaController$MediaPlayerControl: boolean canPause()>
<android.widget.MediaController$MediaPlayerControl: boolean canSeekBackward()>
<android.widget.MediaController$MediaPlayerControl: boolean canSeekForward()>
<android.widget.MediaController$MediaPlayerControl: int getAudioSessionId()>
<android.widget.MediaController$MediaPlayerControl: int getBufferPercentage()>
<android.widget.MediaController$MediaPlayerControl: int getCurrentPosition()>
<android.widget.MediaController$MediaPlayerControl: int getDuration()>
<android.widget.MediaController$MediaPlayerControl: boolean isPlaying()>
<android.widget.MediaController$MediaPlayerControl: void pause()>
<android.widget.MediaController$MediaPlayerControl: void seekTo(int)>
<android.widget.MediaController$MediaPlayerControl: void start()>
android.widget.MultiAutoCompleteTextView
<android.widget.MultiAutoCompleteTextView: void <init>(android.content.Context)>
<android.widget.MultiAutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.MultiAutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.MultiAutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.MultiAutoCompleteTextView: void performFiltering(java.lang.CharSequence,int,int,int)>
<android.widget.MultiAutoCompleteTextView: void setTokenizer(android.widget.MultiAutoCompleteTextView$Tokenizer)>
android.widget.MultiAutoCompleteTextView$CommaTokenizer
<android.widget.MultiAutoCompleteTextView$CommaTokenizer: void <init>()>
<android.widget.MultiAutoCompleteTextView$CommaTokenizer: int findTokenEnd(java.lang.CharSequence,int)>
<android.widget.MultiAutoCompleteTextView$CommaTokenizer: int findTokenStart(java.lang.CharSequence,int)>
<android.widget.MultiAutoCompleteTextView$CommaTokenizer: java.lang.CharSequence terminateToken(java.lang.CharSequence)>
android.widget.MultiAutoCompleteTextView$Tokenizer
<android.widget.MultiAutoCompleteTextView$Tokenizer: int findTokenEnd(java.lang.CharSequence,int)>
<android.widget.MultiAutoCompleteTextView$Tokenizer: int findTokenStart(java.lang.CharSequence,int)>
<android.widget.MultiAutoCompleteTextView$Tokenizer: java.lang.CharSequence terminateToken(java.lang.CharSequence)>
android.widget.NumberPicker
<android.widget.NumberPicker: void <init>(android.content.Context)>
<android.widget.NumberPicker: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.NumberPicker: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.NumberPicker: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.NumberPicker: java.lang.String[] getDisplayedValues()>
<android.widget.NumberPicker: int getMaxValue()>
<android.widget.NumberPicker: int getMinValue()>
<android.widget.NumberPicker: int getSelectionDividerHeight()>
<android.widget.NumberPicker: int getTextColor()>
<android.widget.NumberPicker: float getTextSize()>
<android.widget.NumberPicker: int getValue()>
<android.widget.NumberPicker: boolean getWrapSelectorWheel()>
<android.widget.NumberPicker: void setDisplayedValues(java.lang.String[])>
<android.widget.NumberPicker: void setFormatter(android.widget.NumberPicker$Formatter)>
<android.widget.NumberPicker: void setMaxValue(int)>
<android.widget.NumberPicker: void setMinValue(int)>
<android.widget.NumberPicker: void setOnLongPressUpdateInterval(long)>
<android.widget.NumberPicker: void setOnScrollListener(android.widget.NumberPicker$OnScrollListener)>
<android.widget.NumberPicker: void setOnValueChangedListener(android.widget.NumberPicker$OnValueChangeListener)>
<android.widget.NumberPicker: void setSelectionDividerHeight(int)>
<android.widget.NumberPicker: void setTextColor(int)>
<android.widget.NumberPicker: void setTextSize(float)>
<android.widget.NumberPicker: void setValue(int)>
<android.widget.NumberPicker: void setWrapSelectorWheel(boolean)>
android.widget.NumberPicker$Formatter
<android.widget.NumberPicker$Formatter: java.lang.String format(int)>
android.widget.NumberPicker$OnScrollListener
<android.widget.NumberPicker$OnScrollListener: void onScrollStateChange(android.widget.NumberPicker,int)>
<android.widget.NumberPicker$OnScrollListener: int SCROLL_STATE_FLING>
<android.widget.NumberPicker$OnScrollListener: int SCROLL_STATE_IDLE>
<android.widget.NumberPicker$OnScrollListener: int SCROLL_STATE_TOUCH_SCROLL>
android.widget.NumberPicker$OnValueChangeListener
<android.widget.NumberPicker$OnValueChangeListener: void onValueChange(android.widget.NumberPicker,int,int)>
android.widget.OverScroller
<android.widget.OverScroller: void <init>(android.content.Context)>
<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator)>
<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator,float,float)>
<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator,float,float,boolean)>
<android.widget.OverScroller: void abortAnimation()>
<android.widget.OverScroller: boolean computeScrollOffset()>
<android.widget.OverScroller: void fling(int,int,int,int,int,int,int,int)>
<android.widget.OverScroller: void fling(int,int,int,int,int,int,int,int,int,int)>
<android.widget.OverScroller: void forceFinished(boolean)>
<android.widget.OverScroller: float getCurrVelocity()>
<android.widget.OverScroller: int getCurrX()>
<android.widget.OverScroller: int getCurrY()>
<android.widget.OverScroller: int getFinalX()>
<android.widget.OverScroller: int getFinalY()>
<android.widget.OverScroller: int getStartX()>
<android.widget.OverScroller: int getStartY()>
<android.widget.OverScroller: boolean isFinished()>
<android.widget.OverScroller: boolean isOverScrolled()>
<android.widget.OverScroller: void notifyHorizontalEdgeReached(int,int,int)>
<android.widget.OverScroller: void notifyVerticalEdgeReached(int,int,int)>
<android.widget.OverScroller: void setFriction(float)>
<android.widget.OverScroller: boolean springBack(int,int,int,int,int,int)>
<android.widget.OverScroller: void startScroll(int,int,int,int)>
<android.widget.OverScroller: void startScroll(int,int,int,int,int)>
android.widget.PopupMenu
<android.widget.PopupMenu: void <init>(android.content.Context,android.view.View)>
<android.widget.PopupMenu: void <init>(android.content.Context,android.view.View,int)>
<android.widget.PopupMenu: void <init>(android.content.Context,android.view.View,int,int,int)>
<android.widget.PopupMenu: void dismiss()>
<android.widget.PopupMenu: android.view.View$OnTouchListener getDragToOpenListener()>
<android.widget.PopupMenu: int getGravity()>
<android.widget.PopupMenu: android.view.Menu getMenu()>
<android.widget.PopupMenu: android.view.MenuInflater getMenuInflater()>
<android.widget.PopupMenu: void inflate(int)>
<android.widget.PopupMenu: void setForceShowIcon(boolean)>
<android.widget.PopupMenu: void setGravity(int)>
<android.widget.PopupMenu: void setOnDismissListener(android.widget.PopupMenu$OnDismissListener)>
<android.widget.PopupMenu: void setOnMenuItemClickListener(android.widget.PopupMenu$OnMenuItemClickListener)>
<android.widget.PopupMenu: void show()>
android.widget.PopupMenu$OnDismissListener
<android.widget.PopupMenu$OnDismissListener: void onDismiss(android.widget.PopupMenu)>
android.widget.PopupMenu$OnMenuItemClickListener
<android.widget.PopupMenu$OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>
android.widget.PopupWindow
<android.widget.PopupWindow: void <init>(android.content.Context)>
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.PopupWindow: void <init>()>
<android.widget.PopupWindow: void <init>(android.view.View)>
<android.widget.PopupWindow: void <init>(int,int)>
<android.widget.PopupWindow: void <init>(android.view.View,int,int)>
<android.widget.PopupWindow: void <init>(android.view.View,int,int,boolean)>
<android.widget.PopupWindow: void dismiss()>
<android.widget.PopupWindow: int getAnimationStyle()>
<android.widget.PopupWindow: android.graphics.drawable.Drawable getBackground()>
<android.widget.PopupWindow: android.view.View getContentView()>
<android.widget.PopupWindow: float getElevation()>
<android.widget.PopupWindow: android.transition.Transition getEnterTransition()>
<android.widget.PopupWindow: android.graphics.Rect getEpicenterBounds()>
<android.widget.PopupWindow: android.transition.Transition getExitTransition()>
<android.widget.PopupWindow: int getHeight()>
<android.widget.PopupWindow: int getInputMethodMode()>
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View)>
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int)>
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int,boolean)>
<android.widget.PopupWindow: boolean getOverlapAnchor()>
<android.widget.PopupWindow: int getSoftInputMode()>
<android.widget.PopupWindow: int getWidth()>
<android.widget.PopupWindow: int getWindowLayoutType()>
<android.widget.PopupWindow: boolean isAboveAnchor()>
<android.widget.PopupWindow: boolean isAttachedInDecor()>
<android.widget.PopupWindow: boolean isClippedToScreen()>
<android.widget.PopupWindow: boolean isClippingEnabled()>
<android.widget.PopupWindow: boolean isFocusable()>
<android.widget.PopupWindow: boolean isLaidOutInScreen()>
<android.widget.PopupWindow: boolean isOutsideTouchable()>
<android.widget.PopupWindow: boolean isShowing()>
<android.widget.PopupWindow: boolean isSplitTouchEnabled()>
<android.widget.PopupWindow: boolean isTouchModal()>
<android.widget.PopupWindow: boolean isTouchable()>
<android.widget.PopupWindow: void setAnimationStyle(int)>
<android.widget.PopupWindow: void setAttachedInDecor(boolean)>
<android.widget.PopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.PopupWindow: void setClippingEnabled(boolean)>
<android.widget.PopupWindow: void setContentView(android.view.View)>
<android.widget.PopupWindow: void setElevation(float)>
<android.widget.PopupWindow: void setEnterTransition(android.transition.Transition)>
<android.widget.PopupWindow: void setEpicenterBounds(android.graphics.Rect)>
<android.widget.PopupWindow: void setExitTransition(android.transition.Transition)>
<android.widget.PopupWindow: void setFocusable(boolean)>
<android.widget.PopupWindow: void setHeight(int)>
<android.widget.PopupWindow: void setIgnoreCheekPress()>
<android.widget.PopupWindow: void setInputMethodMode(int)>
<android.widget.PopupWindow: void setIsClippedToScreen(boolean)>
<android.widget.PopupWindow: void setIsLaidOutInScreen(boolean)>
<android.widget.PopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>
<android.widget.PopupWindow: void setOutsideTouchable(boolean)>
<android.widget.PopupWindow: void setOverlapAnchor(boolean)>
<android.widget.PopupWindow: void setSoftInputMode(int)>
<android.widget.PopupWindow: void setSplitTouchEnabled(boolean)>
<android.widget.PopupWindow: void setTouchInterceptor(android.view.View$OnTouchListener)>
<android.widget.PopupWindow: void setTouchModal(boolean)>
<android.widget.PopupWindow: void setTouchable(boolean)>
<android.widget.PopupWindow: void setWidth(int)>
<android.widget.PopupWindow: void setWindowLayoutMode(int,int)>
<android.widget.PopupWindow: void setWindowLayoutType(int)>
<android.widget.PopupWindow: void showAsDropDown(android.view.View)>
<android.widget.PopupWindow: void showAsDropDown(android.view.View,int,int)>
<android.widget.PopupWindow: void showAsDropDown(android.view.View,int,int,int)>
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>
<android.widget.PopupWindow: void update()>
<android.widget.PopupWindow: void update(int,int)>
<android.widget.PopupWindow: void update(int,int,int,int)>
<android.widget.PopupWindow: void update(int,int,int,int,boolean)>
<android.widget.PopupWindow: void update(android.view.View,int,int)>
<android.widget.PopupWindow: void update(android.view.View,int,int,int,int)>
<android.widget.PopupWindow: int INPUT_METHOD_FROM_FOCUSABLE>
<android.widget.PopupWindow: int INPUT_METHOD_NEEDED>
<android.widget.PopupWindow: int INPUT_METHOD_NOT_NEEDED>
android.widget.PopupWindow$OnDismissListener
<android.widget.PopupWindow$OnDismissListener: void onDismiss()>
android.widget.ProgressBar
<android.widget.ProgressBar: void <init>(android.content.Context)>
<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getCurrentDrawable()>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getIndeterminateDrawable()>
<android.widget.ProgressBar: android.graphics.BlendMode getIndeterminateTintBlendMode()>
<android.widget.ProgressBar: android.content.res.ColorStateList getIndeterminateTintList()>
<android.widget.ProgressBar: android.graphics.PorterDuff$Mode getIndeterminateTintMode()>
<android.widget.ProgressBar: android.view.animation.Interpolator getInterpolator()>
<android.widget.ProgressBar: int getMax()>
<android.widget.ProgressBar: int getMaxHeight()>
<android.widget.ProgressBar: int getMaxWidth()>
<android.widget.ProgressBar: int getMin()>
<android.widget.ProgressBar: int getMinHeight()>
<android.widget.ProgressBar: int getMinWidth()>
<android.widget.ProgressBar: int getProgress()>
<android.widget.ProgressBar: android.graphics.BlendMode getProgressBackgroundTintBlendMode()>
<android.widget.ProgressBar: android.content.res.ColorStateList getProgressBackgroundTintList()>
<android.widget.ProgressBar: android.graphics.PorterDuff$Mode getProgressBackgroundTintMode()>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getProgressDrawable()>
<android.widget.ProgressBar: android.graphics.BlendMode getProgressTintBlendMode()>
<android.widget.ProgressBar: android.content.res.ColorStateList getProgressTintList()>
<android.widget.ProgressBar: android.graphics.PorterDuff$Mode getProgressTintMode()>
<android.widget.ProgressBar: int getSecondaryProgress()>
<android.widget.ProgressBar: android.graphics.BlendMode getSecondaryProgressTintBlendMode()>
<android.widget.ProgressBar: android.content.res.ColorStateList getSecondaryProgressTintList()>
<android.widget.ProgressBar: android.graphics.PorterDuff$Mode getSecondaryProgressTintMode()>
<android.widget.ProgressBar: void incrementProgressBy(int)>
<android.widget.ProgressBar: void incrementSecondaryProgressBy(int)>
<android.widget.ProgressBar: boolean isAnimating()>
<android.widget.ProgressBar: boolean isIndeterminate()>
<android.widget.ProgressBar: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.ProgressBar: android.os.Parcelable onSaveInstanceState()>
<android.widget.ProgressBar: void setIndeterminate(boolean)>
<android.widget.ProgressBar: void setIndeterminateDrawable(android.graphics.drawable.Drawable)>
<android.widget.ProgressBar: void setIndeterminateDrawableTiled(android.graphics.drawable.Drawable)>
<android.widget.ProgressBar: void setIndeterminateTintBlendMode(android.graphics.BlendMode)>
<android.widget.ProgressBar: void setIndeterminateTintList(android.content.res.ColorStateList)>
<android.widget.ProgressBar: void setIndeterminateTintMode(android.graphics.PorterDuff$Mode)>
<android.widget.ProgressBar: void setInterpolator(android.content.Context,int)>
<android.widget.ProgressBar: void setInterpolator(android.view.animation.Interpolator)>
<android.widget.ProgressBar: void setMax(int)>
<android.widget.ProgressBar: void setMaxHeight(int)>
<android.widget.ProgressBar: void setMaxWidth(int)>
<android.widget.ProgressBar: void setMin(int)>
<android.widget.ProgressBar: void setMinHeight(int)>
<android.widget.ProgressBar: void setMinWidth(int)>
<android.widget.ProgressBar: void setProgress(int)>
<android.widget.ProgressBar: void setProgress(int,boolean)>
<android.widget.ProgressBar: void setProgressBackgroundTintBlendMode(android.graphics.BlendMode)>
<android.widget.ProgressBar: void setProgressBackgroundTintList(android.content.res.ColorStateList)>
<android.widget.ProgressBar: void setProgressBackgroundTintMode(android.graphics.PorterDuff$Mode)>
<android.widget.ProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)>
<android.widget.ProgressBar: void setProgressDrawableTiled(android.graphics.drawable.Drawable)>
<android.widget.ProgressBar: void setProgressTintBlendMode(android.graphics.BlendMode)>
<android.widget.ProgressBar: void setProgressTintList(android.content.res.ColorStateList)>
<android.widget.ProgressBar: void setProgressTintMode(android.graphics.PorterDuff$Mode)>
<android.widget.ProgressBar: void setSecondaryProgress(int)>
<android.widget.ProgressBar: void setSecondaryProgressTintBlendMode(android.graphics.BlendMode)>
<android.widget.ProgressBar: void setSecondaryProgressTintList(android.content.res.ColorStateList)>
<android.widget.ProgressBar: void setSecondaryProgressTintMode(android.graphics.PorterDuff$Mode)>
android.widget.QuickContactBadge
<android.widget.QuickContactBadge: void <init>(android.content.Context)>
<android.widget.QuickContactBadge: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.QuickContactBadge: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.QuickContactBadge: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)>
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)>
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)>
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)>
<android.widget.QuickContactBadge: void assignContactUri(android.net.Uri)>
<android.widget.QuickContactBadge: void onClick(android.view.View)>
<android.widget.QuickContactBadge: void setExcludeMimes(java.lang.String[])>
<android.widget.QuickContactBadge: void setImageToDefault()>
<android.widget.QuickContactBadge: void setMode(int)>
<android.widget.QuickContactBadge: void setOverlay(android.graphics.drawable.Drawable)>
<android.widget.QuickContactBadge: void setPrioritizedMimeType(java.lang.String)>
<android.widget.QuickContactBadge: java.lang.String[] mExcludeMimes>
android.widget.RadioButton
<android.widget.RadioButton: void <init>(android.content.Context)>
<android.widget.RadioButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RadioButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.RadioButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
android.widget.RadioGroup
<android.widget.RadioGroup: void <init>(android.content.Context)>
<android.widget.RadioGroup: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RadioGroup: void check(int)>
<android.widget.RadioGroup: void clearCheck()>
<android.widget.RadioGroup: android.widget.RadioGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.RadioGroup: int getCheckedRadioButtonId()>
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)>
android.widget.RadioGroup$LayoutParams
<android.widget.RadioGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RadioGroup$LayoutParams: void <init>(int,int)>
<android.widget.RadioGroup$LayoutParams: void <init>(int,int,float)>
<android.widget.RadioGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.widget.RadioGroup$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>
android.widget.RadioGroup$OnCheckedChangeListener
<android.widget.RadioGroup$OnCheckedChangeListener: void onCheckedChanged(android.widget.RadioGroup,int)>
android.widget.RatingBar
<android.widget.RatingBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.RatingBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.RatingBar: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RatingBar: void <init>(android.content.Context)>
<android.widget.RatingBar: int getNumStars()>
<android.widget.RatingBar: android.widget.RatingBar$OnRatingBarChangeListener getOnRatingBarChangeListener()>
<android.widget.RatingBar: float getRating()>
<android.widget.RatingBar: float getStepSize()>
<android.widget.RatingBar: boolean isIndicator()>
<android.widget.RatingBar: void setIsIndicator(boolean)>
<android.widget.RatingBar: void setNumStars(int)>
<android.widget.RatingBar: void setOnRatingBarChangeListener(android.widget.RatingBar$OnRatingBarChangeListener)>
<android.widget.RatingBar: void setRating(float)>
<android.widget.RatingBar: void setStepSize(float)>
android.widget.RatingBar$OnRatingBarChangeListener
<android.widget.RatingBar$OnRatingBarChangeListener: void onRatingChanged(android.widget.RatingBar,float,boolean)>
android.widget.RelativeLayout
<android.widget.RelativeLayout: void <init>(android.content.Context)>
<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.RelativeLayout: android.widget.RelativeLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.RelativeLayout: int getGravity()>
<android.widget.RelativeLayout: int getIgnoreGravity()>
<android.widget.RelativeLayout: void setGravity(int)>
<android.widget.RelativeLayout: void setHorizontalGravity(int)>
<android.widget.RelativeLayout: void setIgnoreGravity(int)>
<android.widget.RelativeLayout: void setVerticalGravity(int)>
<android.widget.RelativeLayout: int ABOVE>
<android.widget.RelativeLayout: int ALIGN_BASELINE>
<android.widget.RelativeLayout: int ALIGN_BOTTOM>
<android.widget.RelativeLayout: int ALIGN_END>
<android.widget.RelativeLayout: int ALIGN_LEFT>
<android.widget.RelativeLayout: int ALIGN_PARENT_BOTTOM>
<android.widget.RelativeLayout: int ALIGN_PARENT_END>
<android.widget.RelativeLayout: int ALIGN_PARENT_LEFT>
<android.widget.RelativeLayout: int ALIGN_PARENT_RIGHT>
<android.widget.RelativeLayout: int ALIGN_PARENT_START>
<android.widget.RelativeLayout: int ALIGN_PARENT_TOP>
<android.widget.RelativeLayout: int ALIGN_RIGHT>
<android.widget.RelativeLayout: int ALIGN_START>
<android.widget.RelativeLayout: int ALIGN_TOP>
<android.widget.RelativeLayout: int BELOW>
<android.widget.RelativeLayout: int CENTER_HORIZONTAL>
<android.widget.RelativeLayout: int CENTER_IN_PARENT>
<android.widget.RelativeLayout: int CENTER_VERTICAL>
<android.widget.RelativeLayout: int END_OF>
<android.widget.RelativeLayout: int LEFT_OF>
<android.widget.RelativeLayout: int RIGHT_OF>
<android.widget.RelativeLayout: int START_OF>
<android.widget.RelativeLayout: int TRUE>
android.widget.RelativeLayout$LayoutParams
<android.widget.RelativeLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.RelativeLayout$LayoutParams: void <init>(int,int)>
<android.widget.RelativeLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.widget.RelativeLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>
<android.widget.RelativeLayout$LayoutParams: void <init>(android.widget.RelativeLayout$LayoutParams)>
<android.widget.RelativeLayout$LayoutParams: void addRule(int)>
<android.widget.RelativeLayout$LayoutParams: void addRule(int,int)>
<android.widget.RelativeLayout$LayoutParams: java.lang.String debug(java.lang.String)>
<android.widget.RelativeLayout$LayoutParams: int getRule(int)>
<android.widget.RelativeLayout$LayoutParams: int[] getRules()>
<android.widget.RelativeLayout$LayoutParams: void removeRule(int)>
<android.widget.RelativeLayout$LayoutParams: boolean alignWithParent>
android.widget.RemoteViews
<android.widget.RemoteViews: void <init>(java.lang.String,int)>
<android.widget.RemoteViews: void <init>(java.lang.String,int,int)>
<android.widget.RemoteViews: void <init>(android.widget.RemoteViews,android.widget.RemoteViews)>
<android.widget.RemoteViews: void <init>(java.util.Map)>
<android.widget.RemoteViews: void <init>(android.widget.RemoteViews)>
<android.widget.RemoteViews: void <init>(android.os.Parcel)>
<android.widget.RemoteViews: void addStableView(int,android.widget.RemoteViews,int)>
<android.widget.RemoteViews: void addView(int,android.widget.RemoteViews)>
<android.widget.RemoteViews: android.view.View apply(android.content.Context,android.view.ViewGroup)>
<android.widget.RemoteViews: android.widget.RemoteViews clone()>
<android.widget.RemoteViews: int describeContents()>
<android.widget.RemoteViews: int getLayoutId()>
<android.widget.RemoteViews: java.lang.String getPackage()>
<android.widget.RemoteViews: int getViewId()>
<android.widget.RemoteViews: boolean onLoadClass(java.lang.Class)>
<android.widget.RemoteViews: void reapply(android.content.Context,android.view.View)>
<android.widget.RemoteViews: void removeAllViews(int)>
<android.widget.RemoteViews: void setAccessibilityTraversalAfter(int,int)>
<android.widget.RemoteViews: void setAccessibilityTraversalBefore(int,int)>
<android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)>
<android.widget.RemoteViews: void setBlendMode(int,java.lang.String,android.graphics.BlendMode)>
<android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)>
<android.widget.RemoteViews: void setBundle(int,java.lang.String,android.os.Bundle)>
<android.widget.RemoteViews: void setByte(int,java.lang.String,byte)>
<android.widget.RemoteViews: void setChar(int,java.lang.String,char)>
<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,java.lang.CharSequence)>
<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,int)>
<android.widget.RemoteViews: void setCharSequenceAttr(int,java.lang.String,int)>
<android.widget.RemoteViews: void setChronometer(int,long,java.lang.String,boolean)>
<android.widget.RemoteViews: void setChronometerCountDown(int,boolean)>
<android.widget.RemoteViews: void setColor(int,java.lang.String,int)>
<android.widget.RemoteViews: void setColorAttr(int,java.lang.String,int)>
<android.widget.RemoteViews: void setColorInt(int,java.lang.String,int,int)>
<android.widget.RemoteViews: void setColorStateList(int,java.lang.String,android.content.res.ColorStateList)>
<android.widget.RemoteViews: void setColorStateList(int,java.lang.String,android.content.res.ColorStateList,android.content.res.ColorStateList)>
<android.widget.RemoteViews: void setColorStateList(int,java.lang.String,int)>
<android.widget.RemoteViews: void setColorStateListAttr(int,java.lang.String,int)>
<android.widget.RemoteViews: void setCompoundButtonChecked(int,boolean)>
<android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)>
<android.widget.RemoteViews: void setDisplayedChild(int,int)>
<android.widget.RemoteViews: void setDouble(int,java.lang.String,double)>
<android.widget.RemoteViews: void setEmptyView(int,int)>
<android.widget.RemoteViews: void setFloat(int,java.lang.String,float)>
<android.widget.RemoteViews: void setFloatDimen(int,java.lang.String,int)>
<android.widget.RemoteViews: void setFloatDimen(int,java.lang.String,float,int)>
<android.widget.RemoteViews: void setFloatDimenAttr(int,java.lang.String,int)>
<android.widget.RemoteViews: void setIcon(int,java.lang.String,android.graphics.drawable.Icon)>
<android.widget.RemoteViews: void setIcon(int,java.lang.String,android.graphics.drawable.Icon,android.graphics.drawable.Icon)>
<android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)>
<android.widget.RemoteViews: void setImageViewIcon(int,android.graphics.drawable.Icon)>
<android.widget.RemoteViews: void setImageViewResource(int,int)>
<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)>
<android.widget.RemoteViews: void setInt(int,java.lang.String,int)>
<android.widget.RemoteViews: void setIntDimen(int,java.lang.String,int)>
<android.widget.RemoteViews: void setIntDimen(int,java.lang.String,float,int)>
<android.widget.RemoteViews: void setIntDimenAttr(int,java.lang.String,int)>
<android.widget.RemoteViews: void setIntent(int,java.lang.String,android.content.Intent)>
<android.widget.RemoteViews: void setLabelFor(int,int)>
<android.widget.RemoteViews: void setLightBackgroundLayoutId(int)>
<android.widget.RemoteViews: void setLong(int,java.lang.String,long)>
<android.widget.RemoteViews: void setOnCheckedChangeResponse(int,android.widget.RemoteViews$RemoteResponse)>
<android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)>
<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)>
<android.widget.RemoteViews: void setOnClickResponse(int,android.widget.RemoteViews$RemoteResponse)>
<android.widget.RemoteViews: void setPendingIntentTemplate(int,android.app.PendingIntent)>
<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)>
<android.widget.RemoteViews: void setRadioGroupChecked(int,int)>
<android.widget.RemoteViews: void setRelativeScrollPosition(int,int)>
<android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)>
<android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)>
<android.widget.RemoteViews: void setRemoteAdapter(int,android.widget.RemoteViews$RemoteCollectionItems)>
<android.widget.RemoteViews: void setScrollPosition(int,int)>
<android.widget.RemoteViews: void setShort(int,java.lang.String,short)>
<android.widget.RemoteViews: void setString(int,java.lang.String,java.lang.String)>
<android.widget.RemoteViews: void setTextColor(int,int)>
<android.widget.RemoteViews: void setTextViewCompoundDrawables(int,int,int,int,int)>
<android.widget.RemoteViews: void setTextViewCompoundDrawablesRelative(int,int,int,int,int)>
<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)>
<android.widget.RemoteViews: void setTextViewTextSize(int,int,float)>
<android.widget.RemoteViews: void setUri(int,java.lang.String,android.net.Uri)>
<android.widget.RemoteViews: void setViewLayoutHeight(int,float,int)>
<android.widget.RemoteViews: void setViewLayoutHeightAttr(int,int)>
<android.widget.RemoteViews: void setViewLayoutHeightDimen(int,int)>
<android.widget.RemoteViews: void setViewLayoutMargin(int,int,float,int)>
<android.widget.RemoteViews: void setViewLayoutMarginAttr(int,int,int)>
<android.widget.RemoteViews: void setViewLayoutMarginDimen(int,int,int)>
<android.widget.RemoteViews: void setViewLayoutWidth(int,float,int)>
<android.widget.RemoteViews: void setViewLayoutWidthAttr(int,int)>
<android.widget.RemoteViews: void setViewLayoutWidthDimen(int,int)>
<android.widget.RemoteViews: void setViewOutlinePreferredRadius(int,float,int)>
<android.widget.RemoteViews: void setViewOutlinePreferredRadiusAttr(int,int)>
<android.widget.RemoteViews: void setViewOutlinePreferredRadiusDimen(int,int)>
<android.widget.RemoteViews: void setViewPadding(int,int,int,int,int)>
<android.widget.RemoteViews: void setViewVisibility(int,int)>
<android.widget.RemoteViews: void showNext(int)>
<android.widget.RemoteViews: void showPrevious(int)>
<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)>
<android.widget.RemoteViews: android.os.Parcelable$Creator CREATOR>
<android.widget.RemoteViews: java.lang.String EXTRA_CHECKED>
<android.widget.RemoteViews: java.lang.String EXTRA_SHARED_ELEMENT_BOUNDS>
<android.widget.RemoteViews: int MARGIN_BOTTOM>
<android.widget.RemoteViews: int MARGIN_END>
<android.widget.RemoteViews: int MARGIN_LEFT>
<android.widget.RemoteViews: int MARGIN_RIGHT>
<android.widget.RemoteViews: int MARGIN_START>
<android.widget.RemoteViews: int MARGIN_TOP>
android.widget.RemoteViews$ActionException
<android.widget.RemoteViews$ActionException: void <init>(java.lang.Exception)>
<android.widget.RemoteViews$ActionException: void <init>(java.lang.String)>
android.widget.RemoteViews$RemoteCollectionItems
<android.widget.RemoteViews$RemoteCollectionItems: int describeContents()>
<android.widget.RemoteViews$RemoteCollectionItems: int getItemCount()>
<android.widget.RemoteViews$RemoteCollectionItems: long getItemId(int)>
<android.widget.RemoteViews$RemoteCollectionItems: android.widget.RemoteViews getItemView(int)>
<android.widget.RemoteViews$RemoteCollectionItems: int getViewTypeCount()>
<android.widget.RemoteViews$RemoteCollectionItems: boolean hasStableIds()>
<android.widget.RemoteViews$RemoteCollectionItems: void writeToParcel(android.os.Parcel,int)>
<android.widget.RemoteViews$RemoteCollectionItems: android.os.Parcelable$Creator CREATOR>
android.widget.RemoteViews$RemoteCollectionItems$Builder
<android.widget.RemoteViews$RemoteCollectionItems$Builder: void <init>()>
<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems$Builder addItem(long,android.widget.RemoteViews)>
<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems build()>
<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems$Builder setHasStableIds(boolean)>
<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems$Builder setViewTypeCount(int)>
android.widget.RemoteViews$RemoteResponse
<android.widget.RemoteViews$RemoteResponse: void <init>()>
<android.widget.RemoteViews$RemoteResponse: android.widget.RemoteViews$RemoteResponse addSharedElement(int,java.lang.String)>
<android.widget.RemoteViews$RemoteResponse: android.widget.RemoteViews$RemoteResponse fromFillInIntent(android.content.Intent)>
<android.widget.RemoteViews$RemoteResponse: android.widget.RemoteViews$RemoteResponse fromPendingIntent(android.app.PendingIntent)>
android.widget.RemoteViews$RemoteView
android.widget.RemoteViews$RemoteViewOutlineProvider
<android.widget.RemoteViews$RemoteViewOutlineProvider: void <init>(float)>
<android.widget.RemoteViews$RemoteViewOutlineProvider: void getOutline(android.view.View,android.graphics.Outline)>
<android.widget.RemoteViews$RemoteViewOutlineProvider: float getRadius()>
android.widget.RemoteViewsService
<android.widget.RemoteViewsService: void <init>()>
<android.widget.RemoteViewsService: android.os.IBinder onBind(android.content.Intent)>
<android.widget.RemoteViewsService: android.widget.RemoteViewsService$RemoteViewsFactory onGetViewFactory(android.content.Intent)>
android.widget.RemoteViewsService$RemoteViewsFactory
<android.widget.RemoteViewsService$RemoteViewsFactory: int getCount()>
<android.widget.RemoteViewsService$RemoteViewsFactory: long getItemId(int)>
<android.widget.RemoteViewsService$RemoteViewsFactory: android.widget.RemoteViews getLoadingView()>
<android.widget.RemoteViewsService$RemoteViewsFactory: android.widget.RemoteViews getViewAt(int)>
<android.widget.RemoteViewsService$RemoteViewsFactory: int getViewTypeCount()>
<android.widget.RemoteViewsService$RemoteViewsFactory: boolean hasStableIds()>
<android.widget.RemoteViewsService$RemoteViewsFactory: void onCreate()>
<android.widget.RemoteViewsService$RemoteViewsFactory: void onDataSetChanged()>
<android.widget.RemoteViewsService$RemoteViewsFactory: void onDestroy()>
android.widget.ResourceCursorAdapter
<android.widget.ResourceCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor)>
<android.widget.ResourceCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor,boolean)>
<android.widget.ResourceCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor,int)>
<android.widget.ResourceCursorAdapter: android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<android.widget.ResourceCursorAdapter: void setDropDownViewResource(int)>
<android.widget.ResourceCursorAdapter: void setViewResource(int)>
android.widget.ResourceCursorTreeAdapter
<android.widget.ResourceCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,int,int,int)>
<android.widget.ResourceCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,int,int)>
<android.widget.ResourceCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,int)>
<android.widget.ResourceCursorTreeAdapter: android.view.View newChildView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
<android.widget.ResourceCursorTreeAdapter: android.view.View newGroupView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
android.widget.ScrollView
<android.widget.ScrollView: void <init>(android.content.Context)>
<android.widget.ScrollView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ScrollView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ScrollView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ScrollView: boolean arrowScroll(int)>
<android.widget.ScrollView: int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect)>
<android.widget.ScrollView: boolean executeKeyEvent(android.view.KeyEvent)>
<android.widget.ScrollView: void fling(int)>
<android.widget.ScrollView: boolean fullScroll(int)>
<android.widget.ScrollView: int getBottomEdgeEffectColor()>
<android.widget.ScrollView: int getMaxScrollAmount()>
<android.widget.ScrollView: int getTopEdgeEffectColor()>
<android.widget.ScrollView: boolean isFillViewport()>
<android.widget.ScrollView: boolean isSmoothScrollingEnabled()>
<android.widget.ScrollView: boolean pageScroll(int)>
<android.widget.ScrollView: void scrollToDescendant(android.view.View)>
<android.widget.ScrollView: void setBottomEdgeEffectColor(int)>
<android.widget.ScrollView: void setEdgeEffectColor(int)>
<android.widget.ScrollView: void setFillViewport(boolean)>
<android.widget.ScrollView: void setSmoothScrollingEnabled(boolean)>
<android.widget.ScrollView: void setTopEdgeEffectColor(int)>
<android.widget.ScrollView: void smoothScrollBy(int,int)>
<android.widget.ScrollView: void smoothScrollTo(int,int)>
android.widget.Scroller
<android.widget.Scroller: void <init>(android.content.Context)>
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator)>
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator,boolean)>
<android.widget.Scroller: void abortAnimation()>
<android.widget.Scroller: boolean computeScrollOffset()>
<android.widget.Scroller: void extendDuration(int)>
<android.widget.Scroller: void fling(int,int,int,int,int,int,int,int)>
<android.widget.Scroller: void forceFinished(boolean)>
<android.widget.Scroller: float getCurrVelocity()>
<android.widget.Scroller: int getCurrX()>
<android.widget.Scroller: int getCurrY()>
<android.widget.Scroller: int getDuration()>
<android.widget.Scroller: int getFinalX()>
<android.widget.Scroller: int getFinalY()>
<android.widget.Scroller: int getStartX()>
<android.widget.Scroller: int getStartY()>
<android.widget.Scroller: boolean isFinished()>
<android.widget.Scroller: void setFinalX(int)>
<android.widget.Scroller: void setFinalY(int)>
<android.widget.Scroller: void setFriction(float)>
<android.widget.Scroller: void startScroll(int,int,int,int)>
<android.widget.Scroller: void startScroll(int,int,int,int,int)>
<android.widget.Scroller: int timePassed()>
android.widget.SearchView
<android.widget.SearchView: void <init>(android.content.Context)>
<android.widget.SearchView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.SearchView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.SearchView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.SearchView: int getImeOptions()>
<android.widget.SearchView: int getInputType()>
<android.widget.SearchView: int getMaxWidth()>
<android.widget.SearchView: java.lang.CharSequence getQuery()>
<android.widget.SearchView: java.lang.CharSequence getQueryHint()>
<android.widget.SearchView: android.widget.CursorAdapter getSuggestionsAdapter()>
<android.widget.SearchView: boolean isIconfiedByDefault()>
<android.widget.SearchView: boolean isIconified()>
<android.widget.SearchView: boolean isIconifiedByDefault()>
<android.widget.SearchView: boolean isQueryRefinementEnabled()>
<android.widget.SearchView: boolean isSubmitButtonEnabled()>
<android.widget.SearchView: void onActionViewCollapsed()>
<android.widget.SearchView: void onActionViewExpanded()>
<android.widget.SearchView: void setIconified(boolean)>
<android.widget.SearchView: void setIconifiedByDefault(boolean)>
<android.widget.SearchView: void setImeOptions(int)>
<android.widget.SearchView: void setInputType(int)>
<android.widget.SearchView: void setMaxWidth(int)>
<android.widget.SearchView: void setOnCloseListener(android.widget.SearchView$OnCloseListener)>
<android.widget.SearchView: void setOnQueryTextFocusChangeListener(android.view.View$OnFocusChangeListener)>
<android.widget.SearchView: void setOnQueryTextListener(android.widget.SearchView$OnQueryTextListener)>
<android.widget.SearchView: void setOnSearchClickListener(android.view.View$OnClickListener)>
<android.widget.SearchView: void setOnSuggestionListener(android.widget.SearchView$OnSuggestionListener)>
<android.widget.SearchView: void setQuery(java.lang.CharSequence,boolean)>
<android.widget.SearchView: void setQueryHint(java.lang.CharSequence)>
<android.widget.SearchView: void setQueryRefinementEnabled(boolean)>
<android.widget.SearchView: void setSearchableInfo(android.app.SearchableInfo)>
<android.widget.SearchView: void setSubmitButtonEnabled(boolean)>
<android.widget.SearchView: void setSuggestionsAdapter(android.widget.CursorAdapter)>
android.widget.SearchView$OnCloseListener
<android.widget.SearchView$OnCloseListener: boolean onClose()>
android.widget.SearchView$OnQueryTextListener
<android.widget.SearchView$OnQueryTextListener: boolean onQueryTextChange(java.lang.String)>
<android.widget.SearchView$OnQueryTextListener: boolean onQueryTextSubmit(java.lang.String)>
android.widget.SearchView$OnSuggestionListener
<android.widget.SearchView$OnSuggestionListener: boolean onSuggestionClick(int)>
<android.widget.SearchView$OnSuggestionListener: boolean onSuggestionSelect(int)>
android.widget.SectionIndexer
<android.widget.SectionIndexer: int getPositionForSection(int)>
<android.widget.SectionIndexer: int getSectionForPosition(int)>
<android.widget.SectionIndexer: java.lang.Object[] getSections()>
android.widget.SeekBar
<android.widget.SeekBar: void <init>(android.content.Context)>
<android.widget.SeekBar: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.SeekBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.SeekBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.SeekBar: void setOnSeekBarChangeListener(android.widget.SeekBar$OnSeekBarChangeListener)>
android.widget.SeekBar$OnSeekBarChangeListener
<android.widget.SeekBar$OnSeekBarChangeListener: void onProgressChanged(android.widget.SeekBar,int,boolean)>
<android.widget.SeekBar$OnSeekBarChangeListener: void onStartTrackingTouch(android.widget.SeekBar)>
<android.widget.SeekBar$OnSeekBarChangeListener: void onStopTrackingTouch(android.widget.SeekBar)>
android.widget.ShareActionProvider
<android.widget.ShareActionProvider: void <init>(android.content.Context)>
<android.widget.ShareActionProvider: android.view.View onCreateActionView()>
<android.widget.ShareActionProvider: void setOnShareTargetSelectedListener(android.widget.ShareActionProvider$OnShareTargetSelectedListener)>
<android.widget.ShareActionProvider: void setShareHistoryFileName(java.lang.String)>
<android.widget.ShareActionProvider: void setShareIntent(android.content.Intent)>
<android.widget.ShareActionProvider: java.lang.String DEFAULT_SHARE_HISTORY_FILE_NAME>
android.widget.ShareActionProvider$OnShareTargetSelectedListener
<android.widget.ShareActionProvider$OnShareTargetSelectedListener: boolean onShareTargetSelected(android.widget.ShareActionProvider,android.content.Intent)>
android.widget.SimpleAdapter
<android.widget.SimpleAdapter: void <init>(android.content.Context,java.util.List,int,java.lang.String[],int[])>
<android.widget.SimpleAdapter: int getCount()>
<android.widget.SimpleAdapter: android.content.res.Resources$Theme getDropDownViewTheme()>
<android.widget.SimpleAdapter: android.widget.Filter getFilter()>
<android.widget.SimpleAdapter: java.lang.Object getItem(int)>
<android.widget.SimpleAdapter: long getItemId(int)>
<android.widget.SimpleAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.SimpleAdapter: android.widget.SimpleAdapter$ViewBinder getViewBinder()>
<android.widget.SimpleAdapter: void setDropDownViewResource(int)>
<android.widget.SimpleAdapter: void setDropDownViewTheme(android.content.res.Resources$Theme)>
<android.widget.SimpleAdapter: void setViewBinder(android.widget.SimpleAdapter$ViewBinder)>
<android.widget.SimpleAdapter: void setViewImage(android.widget.ImageView,int)>
<android.widget.SimpleAdapter: void setViewImage(android.widget.ImageView,java.lang.String)>
<android.widget.SimpleAdapter: void setViewText(android.widget.TextView,java.lang.String)>
android.widget.SimpleAdapter$ViewBinder
<android.widget.SimpleAdapter$ViewBinder: boolean setViewValue(android.view.View,java.lang.Object,java.lang.String)>
android.widget.SimpleCursorAdapter
<android.widget.SimpleCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor,java.lang.String[],int[])>
<android.widget.SimpleCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor,java.lang.String[],int[],int)>
<android.widget.SimpleCursorAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)>
<android.widget.SimpleCursorAdapter: void changeCursorAndColumns(android.database.Cursor,java.lang.String[],int[])>
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter$CursorToStringConverter getCursorToStringConverter()>
<android.widget.SimpleCursorAdapter: int getStringConversionColumn()>
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter$ViewBinder getViewBinder()>
<android.widget.SimpleCursorAdapter: void setCursorToStringConverter(android.widget.SimpleCursorAdapter$CursorToStringConverter)>
<android.widget.SimpleCursorAdapter: void setStringConversionColumn(int)>
<android.widget.SimpleCursorAdapter: void setViewBinder(android.widget.SimpleCursorAdapter$ViewBinder)>
<android.widget.SimpleCursorAdapter: void setViewImage(android.widget.ImageView,java.lang.String)>
<android.widget.SimpleCursorAdapter: void setViewText(android.widget.TextView,java.lang.String)>
android.widget.SimpleCursorAdapter$CursorToStringConverter
<android.widget.SimpleCursorAdapter$CursorToStringConverter: java.lang.CharSequence convertToString(android.database.Cursor)>
android.widget.SimpleCursorAdapter$ViewBinder
<android.widget.SimpleCursorAdapter$ViewBinder: boolean setViewValue(android.view.View,android.database.Cursor,int)>
android.widget.SimpleCursorTreeAdapter
<android.widget.SimpleCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,int,java.lang.String[],int[],int,int,java.lang.String[],int[])>
<android.widget.SimpleCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,int,java.lang.String[],int[],int,java.lang.String[],int[])>
<android.widget.SimpleCursorTreeAdapter: void <init>(android.content.Context,android.database.Cursor,int,java.lang.String[],int[],int,java.lang.String[],int[])>
<android.widget.SimpleCursorTreeAdapter: void bindChildView(android.view.View,android.content.Context,android.database.Cursor,boolean)>
<android.widget.SimpleCursorTreeAdapter: void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,boolean)>
<android.widget.SimpleCursorTreeAdapter: android.widget.SimpleCursorTreeAdapter$ViewBinder getViewBinder()>
<android.widget.SimpleCursorTreeAdapter: void setViewBinder(android.widget.SimpleCursorTreeAdapter$ViewBinder)>
<android.widget.SimpleCursorTreeAdapter: void setViewImage(android.widget.ImageView,java.lang.String)>
<android.widget.SimpleCursorTreeAdapter: void setViewText(android.widget.TextView,java.lang.String)>
android.widget.SimpleCursorTreeAdapter$ViewBinder
<android.widget.SimpleCursorTreeAdapter$ViewBinder: boolean setViewValue(android.view.View,android.database.Cursor,int)>
android.widget.SimpleExpandableListAdapter
<android.widget.SimpleExpandableListAdapter: void <init>(android.content.Context,java.util.List,int,java.lang.String[],int[],java.util.List,int,java.lang.String[],int[])>
<android.widget.SimpleExpandableListAdapter: void <init>(android.content.Context,java.util.List,int,int,java.lang.String[],int[],java.util.List,int,java.lang.String[],int[])>
<android.widget.SimpleExpandableListAdapter: void <init>(android.content.Context,java.util.List,int,int,java.lang.String[],int[],java.util.List,int,int,java.lang.String[],int[])>
<android.widget.SimpleExpandableListAdapter: java.lang.Object getChild(int,int)>
<android.widget.SimpleExpandableListAdapter: long getChildId(int,int)>
<android.widget.SimpleExpandableListAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.SimpleExpandableListAdapter: int getChildrenCount(int)>
<android.widget.SimpleExpandableListAdapter: java.lang.Object getGroup(int)>
<android.widget.SimpleExpandableListAdapter: int getGroupCount()>
<android.widget.SimpleExpandableListAdapter: long getGroupId(int)>
<android.widget.SimpleExpandableListAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<android.widget.SimpleExpandableListAdapter: boolean hasStableIds()>
<android.widget.SimpleExpandableListAdapter: boolean isChildSelectable(int,int)>
<android.widget.SimpleExpandableListAdapter: android.view.View newChildView(boolean,android.view.ViewGroup)>
<android.widget.SimpleExpandableListAdapter: android.view.View newGroupView(boolean,android.view.ViewGroup)>
android.widget.SlidingDrawer
<android.widget.SlidingDrawer: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.SlidingDrawer: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.SlidingDrawer: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.SlidingDrawer: void animateClose()>
<android.widget.SlidingDrawer: void animateOpen()>
<android.widget.SlidingDrawer: void animateToggle()>
<android.widget.SlidingDrawer: void close()>
<android.widget.SlidingDrawer: android.view.View getContent()>
<android.widget.SlidingDrawer: android.view.View getHandle()>
<android.widget.SlidingDrawer: boolean isMoving()>
<android.widget.SlidingDrawer: boolean isOpened()>
<android.widget.SlidingDrawer: void lock()>
<android.widget.SlidingDrawer: void open()>
<android.widget.SlidingDrawer: void setOnDrawerCloseListener(android.widget.SlidingDrawer$OnDrawerCloseListener)>
<android.widget.SlidingDrawer: void setOnDrawerOpenListener(android.widget.SlidingDrawer$OnDrawerOpenListener)>
<android.widget.SlidingDrawer: void setOnDrawerScrollListener(android.widget.SlidingDrawer$OnDrawerScrollListener)>
<android.widget.SlidingDrawer: void toggle()>
<android.widget.SlidingDrawer: void unlock()>
<android.widget.SlidingDrawer: int ORIENTATION_HORIZONTAL>
<android.widget.SlidingDrawer: int ORIENTATION_VERTICAL>
android.widget.SlidingDrawer$OnDrawerCloseListener
<android.widget.SlidingDrawer$OnDrawerCloseListener: void onDrawerClosed()>
android.widget.SlidingDrawer$OnDrawerOpenListener
<android.widget.SlidingDrawer$OnDrawerOpenListener: void onDrawerOpened()>
android.widget.SlidingDrawer$OnDrawerScrollListener
<android.widget.SlidingDrawer$OnDrawerScrollListener: void onScrollEnded()>
<android.widget.SlidingDrawer$OnDrawerScrollListener: void onScrollStarted()>
android.widget.Space
<android.widget.Space: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.Space: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Space: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Space: void <init>(android.content.Context)>
android.widget.Spinner
<android.widget.Spinner: void <init>(android.content.Context)>
<android.widget.Spinner: void <init>(android.content.Context,int)>
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet,int,int,int)>
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet,int,int,int,android.content.res.Resources$Theme)>
<android.widget.Spinner: int getDropDownHorizontalOffset()>
<android.widget.Spinner: int getDropDownVerticalOffset()>
<android.widget.Spinner: int getDropDownWidth()>
<android.widget.Spinner: int getGravity()>
<android.widget.Spinner: android.graphics.drawable.Drawable getPopupBackground()>
<android.widget.Spinner: android.content.Context getPopupContext()>
<android.widget.Spinner: java.lang.CharSequence getPrompt()>
<android.widget.Spinner: void onClick(android.content.DialogInterface,int)>
<android.widget.Spinner: void setDropDownHorizontalOffset(int)>
<android.widget.Spinner: void setDropDownVerticalOffset(int)>
<android.widget.Spinner: void setDropDownWidth(int)>
<android.widget.Spinner: void setGravity(int)>
<android.widget.Spinner: void setPopupBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.Spinner: void setPopupBackgroundResource(int)>
<android.widget.Spinner: void setPrompt(java.lang.CharSequence)>
<android.widget.Spinner: void setPromptId(int)>
<android.widget.Spinner: int MODE_DIALOG>
<android.widget.Spinner: int MODE_DROPDOWN>
android.widget.SpinnerAdapter
<android.widget.SpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
android.widget.StackView
<android.widget.StackView: void <init>(android.content.Context)>
<android.widget.StackView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.StackView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.StackView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
android.widget.Switch
<android.widget.Switch: void <init>(android.content.Context)>
<android.widget.Switch: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Switch: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Switch: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.Switch: boolean getShowText()>
<android.widget.Switch: boolean getSplitTrack()>
<android.widget.Switch: int getSwitchMinWidth()>
<android.widget.Switch: int getSwitchPadding()>
<android.widget.Switch: java.lang.CharSequence getTextOff()>
<android.widget.Switch: java.lang.CharSequence getTextOn()>
<android.widget.Switch: android.graphics.drawable.Drawable getThumbDrawable()>
<android.widget.Switch: int getThumbTextPadding()>
<android.widget.Switch: android.graphics.BlendMode getThumbTintBlendMode()>
<android.widget.Switch: android.content.res.ColorStateList getThumbTintList()>
<android.widget.Switch: android.graphics.PorterDuff$Mode getThumbTintMode()>
<android.widget.Switch: android.graphics.drawable.Drawable getTrackDrawable()>
<android.widget.Switch: android.graphics.BlendMode getTrackTintBlendMode()>
<android.widget.Switch: android.content.res.ColorStateList getTrackTintList()>
<android.widget.Switch: android.graphics.PorterDuff$Mode getTrackTintMode()>
<android.widget.Switch: void onMeasure(int,int)>
<android.widget.Switch: void setShowText(boolean)>
<android.widget.Switch: void setSplitTrack(boolean)>
<android.widget.Switch: void setSwitchMinWidth(int)>
<android.widget.Switch: void setSwitchPadding(int)>
<android.widget.Switch: void setSwitchTextAppearance(android.content.Context,int)>
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface,int)>
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface)>
<android.widget.Switch: void setTextOff(java.lang.CharSequence)>
<android.widget.Switch: void setTextOn(java.lang.CharSequence)>
<android.widget.Switch: void setThumbDrawable(android.graphics.drawable.Drawable)>
<android.widget.Switch: void setThumbIcon(android.graphics.drawable.Icon)>
<android.widget.Switch: void setThumbResource(int)>
<android.widget.Switch: void setThumbTextPadding(int)>
<android.widget.Switch: void setThumbTintBlendMode(android.graphics.BlendMode)>
<android.widget.Switch: void setThumbTintList(android.content.res.ColorStateList)>
<android.widget.Switch: void setThumbTintMode(android.graphics.PorterDuff$Mode)>
<android.widget.Switch: void setTrackDrawable(android.graphics.drawable.Drawable)>
<android.widget.Switch: void setTrackIcon(android.graphics.drawable.Icon)>
<android.widget.Switch: void setTrackResource(int)>
<android.widget.Switch: void setTrackTintBlendMode(android.graphics.BlendMode)>
<android.widget.Switch: void setTrackTintList(android.content.res.ColorStateList)>
<android.widget.Switch: void setTrackTintMode(android.graphics.PorterDuff$Mode)>
android.widget.TabHost
<android.widget.TabHost: void <init>(android.content.Context)>
<android.widget.TabHost: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TabHost: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TabHost: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>
<android.widget.TabHost: void clearAllTabs()>
<android.widget.TabHost: int getCurrentTab()>
<android.widget.TabHost: java.lang.String getCurrentTabTag()>
<android.widget.TabHost: android.view.View getCurrentTabView()>
<android.widget.TabHost: android.view.View getCurrentView()>
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>
<android.widget.TabHost: void onTouchModeChanged(boolean)>
<android.widget.TabHost: void setCurrentTab(int)>
<android.widget.TabHost: void setCurrentTabByTag(java.lang.String)>
<android.widget.TabHost: void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)>
<android.widget.TabHost: void setup()>
<android.widget.TabHost: void setup(android.app.LocalActivityManager)>
android.widget.TabHost$OnTabChangeListener
<android.widget.TabHost$OnTabChangeListener: void onTabChanged(java.lang.String)>
android.widget.TabHost$TabContentFactory
<android.widget.TabHost$TabContentFactory: android.view.View createTabContent(java.lang.String)>
android.widget.TabHost$TabSpec
<android.widget.TabHost$TabSpec: java.lang.String getTag()>
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)>
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)>
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>
android.widget.TabWidget
<android.widget.TabWidget: void <init>(android.content.Context)>
<android.widget.TabWidget: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TabWidget: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TabWidget: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.TabWidget: void dispatchDraw(android.graphics.Canvas)>
<android.widget.TabWidget: void focusCurrentTab(int)>
<android.widget.TabWidget: android.view.View getChildTabViewAt(int)>
<android.widget.TabWidget: android.graphics.drawable.Drawable getLeftStripDrawable()>
<android.widget.TabWidget: android.graphics.drawable.Drawable getRightStripDrawable()>
<android.widget.TabWidget: int getTabCount()>
<android.widget.TabWidget: boolean isStripEnabled()>
<android.widget.TabWidget: void onFocusChange(android.view.View,boolean)>
<android.widget.TabWidget: void setCurrentTab(int)>
<android.widget.TabWidget: void setDividerDrawable(int)>
<android.widget.TabWidget: void setLeftStripDrawable(android.graphics.drawable.Drawable)>
<android.widget.TabWidget: void setLeftStripDrawable(int)>
<android.widget.TabWidget: void setRightStripDrawable(android.graphics.drawable.Drawable)>
<android.widget.TabWidget: void setRightStripDrawable(int)>
<android.widget.TabWidget: void setStripEnabled(boolean)>
android.widget.TableLayout
<android.widget.TableLayout: void <init>(android.content.Context)>
<android.widget.TableLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TableLayout: android.widget.TableLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.TableLayout: boolean isColumnCollapsed(int)>
<android.widget.TableLayout: boolean isColumnShrinkable(int)>
<android.widget.TableLayout: boolean isColumnStretchable(int)>
<android.widget.TableLayout: boolean isShrinkAllColumns()>
<android.widget.TableLayout: boolean isStretchAllColumns()>
<android.widget.TableLayout: void setColumnCollapsed(int,boolean)>
<android.widget.TableLayout: void setColumnShrinkable(int,boolean)>
<android.widget.TableLayout: void setColumnStretchable(int,boolean)>
<android.widget.TableLayout: void setShrinkAllColumns(boolean)>
<android.widget.TableLayout: void setStretchAllColumns(boolean)>
android.widget.TableLayout$LayoutParams
<android.widget.TableLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TableLayout$LayoutParams: void <init>(int,int)>
<android.widget.TableLayout$LayoutParams: void <init>(int,int,float)>
<android.widget.TableLayout$LayoutParams: void <init>()>
<android.widget.TableLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.widget.TableLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>
android.widget.TableRow
<android.widget.TableRow: void <init>(android.content.Context)>
<android.widget.TableRow: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TableRow: android.widget.TableRow$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.TableRow: android.view.View getVirtualChildAt(int)>
<android.widget.TableRow: int getVirtualChildCount()>
android.widget.TableRow$LayoutParams
<android.widget.TableRow$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TableRow$LayoutParams: void <init>(int,int)>
<android.widget.TableRow$LayoutParams: void <init>(int,int,float)>
<android.widget.TableRow$LayoutParams: void <init>()>
<android.widget.TableRow$LayoutParams: void <init>(int)>
<android.widget.TableRow$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.widget.TableRow$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>
<android.widget.TableRow$LayoutParams: int column>
<android.widget.TableRow$LayoutParams: int span>
android.widget.TextClock
<android.widget.TextClock: void <init>(android.content.Context)>
<android.widget.TextClock: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TextClock: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TextClock: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.TextClock: java.lang.CharSequence getFormat12Hour()>
<android.widget.TextClock: java.lang.CharSequence getFormat24Hour()>
<android.widget.TextClock: java.lang.String getTimeZone()>
<android.widget.TextClock: boolean is24HourModeEnabled()>
<android.widget.TextClock: void refreshTime()>
<android.widget.TextClock: void setFormat12Hour(java.lang.CharSequence)>
<android.widget.TextClock: void setFormat24Hour(java.lang.CharSequence)>
<android.widget.TextClock: void setTimeZone(java.lang.String)>
<android.widget.TextClock: java.lang.CharSequence DEFAULT_FORMAT_12_HOUR>
<android.widget.TextClock: java.lang.CharSequence DEFAULT_FORMAT_24_HOUR>
android.widget.TextSwitcher
<android.widget.TextSwitcher: void <init>(android.content.Context)>
<android.widget.TextSwitcher: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TextSwitcher: void setCurrentText(java.lang.CharSequence)>
<android.widget.TextSwitcher: void setText(java.lang.CharSequence)>
android.widget.TextView
<android.widget.TextView: void <init>(android.content.Context)>
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)>
<android.widget.TextView: void append(java.lang.CharSequence)>
<android.widget.TextView: void append(java.lang.CharSequence,int,int)>
<android.widget.TextView: void beginBatchEdit()>
<android.widget.TextView: boolean bringPointIntoView(int)>
<android.widget.TextView: void clearComposingText()>
<android.widget.TextView: void debug(int)>
<android.widget.TextView: boolean didTouchFocusSelect()>
<android.widget.TextView: void endBatchEdit()>
<android.widget.TextView: boolean extractText(android.view.inputmethod.ExtractedTextRequest,android.view.inputmethod.ExtractedText)>
<android.widget.TextView: int getAutoLinkMask()>
<android.widget.TextView: int getAutoSizeMaxTextSize()>
<android.widget.TextView: int getAutoSizeMinTextSize()>
<android.widget.TextView: int getAutoSizeStepGranularity()>
<android.widget.TextView: int[] getAutoSizeTextAvailableSizes()>
<android.widget.TextView: int getAutoSizeTextType()>
<android.widget.TextView: int getBreakStrategy()>
<android.widget.TextView: int getCompoundDrawablePadding()>
<android.widget.TextView: android.graphics.BlendMode getCompoundDrawableTintBlendMode()>
<android.widget.TextView: android.content.res.ColorStateList getCompoundDrawableTintList()>
<android.widget.TextView: android.graphics.PorterDuff$Mode getCompoundDrawableTintMode()>
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()>
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawablesRelative()>
<android.widget.TextView: int getCompoundPaddingBottom()>
<android.widget.TextView: int getCompoundPaddingEnd()>
<android.widget.TextView: int getCompoundPaddingLeft()>
<android.widget.TextView: int getCompoundPaddingRight()>
<android.widget.TextView: int getCompoundPaddingStart()>
<android.widget.TextView: int getCompoundPaddingTop()>
<android.widget.TextView: int getCurrentHintTextColor()>
<android.widget.TextView: int getCurrentTextColor()>
<android.widget.TextView: android.view.ActionMode$Callback getCustomInsertionActionModeCallback()>
<android.widget.TextView: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()>
<android.widget.TextView: boolean getDefaultEditable()>
<android.widget.TextView: android.text.method.MovementMethod getDefaultMovementMethod()>
<android.widget.TextView: android.text.Editable getEditableText()>
<android.widget.TextView: android.text.TextUtils$TruncateAt getEllipsize()>
<android.widget.TextView: java.lang.CharSequence getError()>
<android.widget.TextView: int getExtendedPaddingBottom()>
<android.widget.TextView: int getExtendedPaddingTop()>
<android.widget.TextView: android.text.InputFilter[] getFilters()>
<android.widget.TextView: int getFirstBaselineToTopHeight()>
<android.widget.TextView: java.lang.String getFontFeatureSettings()>
<android.widget.TextView: java.lang.String getFontVariationSettings()>
<android.widget.TextView: boolean getFreezesText()>
<android.widget.TextView: int getGravity()>
<android.widget.TextView: int getHighlightColor()>
<android.widget.TextView: java.lang.CharSequence getHint()>
<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()>
<android.widget.TextView: int getHyphenationFrequency()>
<android.widget.TextView: int getImeActionId()>
<android.widget.TextView: java.lang.CharSequence getImeActionLabel()>
<android.widget.TextView: android.os.LocaleList getImeHintLocales()>
<android.widget.TextView: int getImeOptions()>
<android.widget.TextView: boolean getIncludeFontPadding()>
<android.widget.TextView: android.os.Bundle getInputExtras(boolean)>
<android.widget.TextView: int getInputType()>
<android.widget.TextView: int getJustificationMode()>
<android.widget.TextView: android.text.method.KeyListener getKeyListener()>
<android.widget.TextView: int getLastBaselineToBottomHeight()>
<android.widget.TextView: android.text.Layout getLayout()>
<android.widget.TextView: float getLetterSpacing()>
<android.widget.TextView: int getLineBounds(int,android.graphics.Rect)>
<android.widget.TextView: int getLineBreakStyle()>
<android.widget.TextView: int getLineBreakWordStyle()>
<android.widget.TextView: int getLineCount()>
<android.widget.TextView: int getLineHeight()>
<android.widget.TextView: float getLineSpacingExtra()>
<android.widget.TextView: float getLineSpacingMultiplier()>
<android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()>
<android.widget.TextView: boolean getLinksClickable()>
<android.widget.TextView: int getMarqueeRepeatLimit()>
<android.widget.TextView: int getMaxEms()>
<android.widget.TextView: int getMaxHeight()>
<android.widget.TextView: int getMaxLines()>
<android.widget.TextView: int getMaxWidth()>
<android.widget.TextView: int getMinEms()>
<android.widget.TextView: int getMinHeight()>
<android.widget.TextView: int getMinLines()>
<android.widget.TextView: int getMinWidth()>
<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()>
<android.widget.TextView: int getOffsetForPosition(float,float)>
<android.widget.TextView: android.text.TextPaint getPaint()>
<android.widget.TextView: int getPaintFlags()>
<android.widget.TextView: java.lang.String getPrivateImeOptions()>
<android.widget.TextView: int getSelectionEnd()>
<android.widget.TextView: int getSelectionStart()>
<android.widget.TextView: int getShadowColor()>
<android.widget.TextView: float getShadowDx()>
<android.widget.TextView: float getShadowDy()>
<android.widget.TextView: float getShadowRadius()>
<android.widget.TextView: boolean getShowSoftInputOnFocus()>
<android.widget.TextView: java.lang.CharSequence getText()>
<android.widget.TextView: android.view.textclassifier.TextClassifier getTextClassifier()>
<android.widget.TextView: android.content.res.ColorStateList getTextColors()>
<android.widget.TextView: android.graphics.drawable.Drawable getTextCursorDrawable()>
<android.widget.TextView: android.text.TextDirectionHeuristic getTextDirectionHeuristic()>
<android.widget.TextView: java.util.Locale getTextLocale()>
<android.widget.TextView: android.os.LocaleList getTextLocales()>
<android.widget.TextView: android.text.PrecomputedText$Params getTextMetricsParams()>
<android.widget.TextView: float getTextScaleX()>
<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandle()>
<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandleLeft()>
<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandleRight()>
<android.widget.TextView: float getTextSize()>
<android.widget.TextView: int getTextSizeUnit()>
<android.widget.TextView: int getTotalPaddingBottom()>
<android.widget.TextView: int getTotalPaddingEnd()>
<android.widget.TextView: int getTotalPaddingLeft()>
<android.widget.TextView: int getTotalPaddingRight()>
<android.widget.TextView: int getTotalPaddingStart()>
<android.widget.TextView: int getTotalPaddingTop()>
<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()>
<android.widget.TextView: android.graphics.Typeface getTypeface()>
<android.widget.TextView: android.text.style.URLSpan[] getUrls()>
<android.widget.TextView: boolean hasSelection()>
<android.widget.TextView: boolean isAllCaps()>
<android.widget.TextView: boolean isCursorVisible()>
<android.widget.TextView: boolean isElegantTextHeight()>
<android.widget.TextView: boolean isFallbackLineSpacing()>
<android.widget.TextView: boolean isHorizontallyScrollable()>
<android.widget.TextView: boolean isInputMethodTarget()>
<android.widget.TextView: boolean isSingleLine()>
<android.widget.TextView: boolean isSuggestionsEnabled()>
<android.widget.TextView: boolean isTextSelectable()>
<android.widget.TextView: int length()>
<android.widget.TextView: boolean moveCursorToVisibleOffset()>
<android.widget.TextView: void onBeginBatchEdit()>
<android.widget.TextView: void onCommitCompletion(android.view.inputmethod.CompletionInfo)>
<android.widget.TextView: void onCommitCorrection(android.view.inputmethod.CorrectionInfo)>
<android.widget.TextView: void onEditorAction(int)>
<android.widget.TextView: void onEndBatchEdit()>
<android.widget.TextView: boolean onPreDraw()>
<android.widget.TextView: boolean onPrivateIMECommand(java.lang.String,android.os.Bundle)>
<android.widget.TextView: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.TextView: android.os.Parcelable onSaveInstanceState()>
<android.widget.TextView: void onSelectionChanged(int,int)>
<android.widget.TextView: void onTextChanged(java.lang.CharSequence,int,int,int)>
<android.widget.TextView: boolean onTextContextMenuItem(int)>
<android.widget.TextView: void removeTextChangedListener(android.text.TextWatcher)>
<android.widget.TextView: void setAllCaps(boolean)>
<android.widget.TextView: void setAutoLinkMask(int)>
<android.widget.TextView: void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int)>
<android.widget.TextView: void setAutoSizeTextTypeUniformWithPresetSizes(int[],int)>
<android.widget.TextView: void setAutoSizeTextTypeWithDefaults(int)>
<android.widget.TextView: void setBreakStrategy(int)>
<android.widget.TextView: void setCompoundDrawablePadding(int)>
<android.widget.TextView: void setCompoundDrawableTintBlendMode(android.graphics.BlendMode)>
<android.widget.TextView: void setCompoundDrawableTintList(android.content.res.ColorStateList)>
<android.widget.TextView: void setCompoundDrawableTintMode(android.graphics.PorterDuff$Mode)>
<android.widget.TextView: void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setCompoundDrawablesRelative(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int)>
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)>
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setCursorVisible(boolean)>
<android.widget.TextView: void setCustomInsertionActionModeCallback(android.view.ActionMode$Callback)>
<android.widget.TextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)>
<android.widget.TextView: void setEditableFactory(android.text.Editable$Factory)>
<android.widget.TextView: void setElegantTextHeight(boolean)>
<android.widget.TextView: void setEllipsize(android.text.TextUtils$TruncateAt)>
<android.widget.TextView: void setEms(int)>
<android.widget.TextView: void setError(java.lang.CharSequence)>
<android.widget.TextView: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)>
<android.widget.TextView: void setExtractedText(android.view.inputmethod.ExtractedText)>
<android.widget.TextView: void setFallbackLineSpacing(boolean)>
<android.widget.TextView: void setFilters(android.text.InputFilter[])>
<android.widget.TextView: void setFirstBaselineToTopHeight(int)>
<android.widget.TextView: void setFontFeatureSettings(java.lang.String)>
<android.widget.TextView: boolean setFontVariationSettings(java.lang.String)>
<android.widget.TextView: boolean setFrame(int,int,int,int)>
<android.widget.TextView: void setFreezesText(boolean)>
<android.widget.TextView: void setGravity(int)>
<android.widget.TextView: void setHeight(int)>
<android.widget.TextView: void setHighlightColor(int)>
<android.widget.TextView: void setHint(java.lang.CharSequence)>
<android.widget.TextView: void setHint(int)>
<android.widget.TextView: void setHintTextColor(int)>
<android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)>
<android.widget.TextView: void setHorizontallyScrolling(boolean)>
<android.widget.TextView: void setHyphenationFrequency(int)>
<android.widget.TextView: void setImeActionLabel(java.lang.CharSequence,int)>
<android.widget.TextView: void setImeHintLocales(android.os.LocaleList)>
<android.widget.TextView: void setImeOptions(int)>
<android.widget.TextView: void setIncludeFontPadding(boolean)>
<android.widget.TextView: void setInputExtras(int)>
<android.widget.TextView: void setInputType(int)>
<android.widget.TextView: void setJustificationMode(int)>
<android.widget.TextView: void setKeyListener(android.text.method.KeyListener)>
<android.widget.TextView: void setLastBaselineToBottomHeight(int)>
<android.widget.TextView: void setLetterSpacing(float)>
<android.widget.TextView: void setLineBreakStyle(int)>
<android.widget.TextView: void setLineBreakWordStyle(int)>
<android.widget.TextView: void setLineHeight(int)>
<android.widget.TextView: void setLineSpacing(float,float)>
<android.widget.TextView: void setLines(int)>
<android.widget.TextView: void setLinkTextColor(int)>
<android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)>
<android.widget.TextView: void setLinksClickable(boolean)>
<android.widget.TextView: void setMarqueeRepeatLimit(int)>
<android.widget.TextView: void setMaxEms(int)>
<android.widget.TextView: void setMaxHeight(int)>
<android.widget.TextView: void setMaxLines(int)>
<android.widget.TextView: void setMaxWidth(int)>
<android.widget.TextView: void setMinEms(int)>
<android.widget.TextView: void setMinHeight(int)>
<android.widget.TextView: void setMinLines(int)>
<android.widget.TextView: void setMinWidth(int)>
<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)>
<android.widget.TextView: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)>
<android.widget.TextView: void setPaintFlags(int)>
<android.widget.TextView: void setPrivateImeOptions(java.lang.String)>
<android.widget.TextView: void setRawInputType(int)>
<android.widget.TextView: void setScroller(android.widget.Scroller)>
<android.widget.TextView: void setSelectAllOnFocus(boolean)>
<android.widget.TextView: void setShadowLayer(float,float,float,int)>
<android.widget.TextView: void setShowSoftInputOnFocus(boolean)>
<android.widget.TextView: void setSingleLine()>
<android.widget.TextView: void setSingleLine(boolean)>
<android.widget.TextView: void setSpannableFactory(android.text.Spannable$Factory)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)>
<android.widget.TextView: void setText(char[],int,int)>
<android.widget.TextView: void setText(int)>
<android.widget.TextView: void setText(int,android.widget.TextView$BufferType)>
<android.widget.TextView: void setTextAppearance(int)>
<android.widget.TextView: void setTextAppearance(android.content.Context,int)>
<android.widget.TextView: void setTextClassifier(android.view.textclassifier.TextClassifier)>
<android.widget.TextView: void setTextColor(int)>
<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)>
<android.widget.TextView: void setTextCursorDrawable(android.graphics.drawable.Drawable)>
<android.widget.TextView: void setTextCursorDrawable(int)>
<android.widget.TextView: void setTextIsSelectable(boolean)>
<android.widget.TextView: void setTextKeepState(java.lang.CharSequence)>
<android.widget.TextView: void setTextKeepState(java.lang.CharSequence,android.widget.TextView$BufferType)>
<android.widget.TextView: void setTextLocale(java.util.Locale)>
<android.widget.TextView: void setTextLocales(android.os.LocaleList)>
<android.widget.TextView: void setTextMetricsParams(android.text.PrecomputedText$Params)>
<android.widget.TextView: void setTextScaleX(float)>
<android.widget.TextView: void setTextSelectHandle(android.graphics.drawable.Drawable)>
<android.widget.TextView: void setTextSelectHandle(int)>
<android.widget.TextView: void setTextSelectHandleLeft(android.graphics.drawable.Drawable)>
<android.widget.TextView: void setTextSelectHandleLeft(int)>
<android.widget.TextView: void setTextSelectHandleRight(android.graphics.drawable.Drawable)>
<android.widget.TextView: void setTextSelectHandleRight(int)>
<android.widget.TextView: void setTextSize(float)>
<android.widget.TextView: void setTextSize(int,float)>
<android.widget.TextView: void setTransformationMethod(android.text.method.TransformationMethod)>
<android.widget.TextView: void setTypeface(android.graphics.Typeface,int)>
<android.widget.TextView: void setTypeface(android.graphics.Typeface)>
<android.widget.TextView: void setWidth(int)>
<android.widget.TextView: int AUTO_SIZE_TEXT_TYPE_NONE>
<android.widget.TextView: int AUTO_SIZE_TEXT_TYPE_UNIFORM>
android.widget.TextView$BufferType
<android.widget.TextView$BufferType: android.widget.TextView$BufferType EDITABLE>
<android.widget.TextView$BufferType: android.widget.TextView$BufferType NORMAL>
<android.widget.TextView$BufferType: android.widget.TextView$BufferType SPANNABLE>
android.widget.TextView$OnEditorActionListener
<android.widget.TextView$OnEditorActionListener: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)>
android.widget.TextView$SavedState
<android.widget.TextView$SavedState: android.os.Parcelable$Creator CREATOR>
android.widget.ThemedSpinnerAdapter
<android.widget.ThemedSpinnerAdapter: android.content.res.Resources$Theme getDropDownViewTheme()>
<android.widget.ThemedSpinnerAdapter: void setDropDownViewTheme(android.content.res.Resources$Theme)>
android.widget.TimePicker
<android.widget.TimePicker: void <init>(android.content.Context)>
<android.widget.TimePicker: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TimePicker: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TimePicker: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.TimePicker: java.lang.Integer getCurrentHour()>
<android.widget.TimePicker: java.lang.Integer getCurrentMinute()>
<android.widget.TimePicker: int getHour()>
<android.widget.TimePicker: int getMinute()>
<android.widget.TimePicker: boolean is24HourView()>
<android.widget.TimePicker: void setCurrentHour(java.lang.Integer)>
<android.widget.TimePicker: void setCurrentMinute(java.lang.Integer)>
<android.widget.TimePicker: void setHour(int)>
<android.widget.TimePicker: void setIs24HourView(java.lang.Boolean)>
<android.widget.TimePicker: void setMinute(int)>
<android.widget.TimePicker: void setOnTimeChangedListener(android.widget.TimePicker$OnTimeChangedListener)>
<android.widget.TimePicker: boolean validateInput()>
android.widget.TimePicker$OnTimeChangedListener
<android.widget.TimePicker$OnTimeChangedListener: void onTimeChanged(android.widget.TimePicker,int,int)>
android.widget.Toast
<android.widget.Toast: void <init>(android.content.Context)>
<android.widget.Toast: void addCallback(android.widget.Toast$Callback)>
<android.widget.Toast: void cancel()>
<android.widget.Toast: int getDuration()>
<android.widget.Toast: int getGravity()>
<android.widget.Toast: float getHorizontalMargin()>
<android.widget.Toast: float getVerticalMargin()>
<android.widget.Toast: android.view.View getView()>
<android.widget.Toast: int getXOffset()>
<android.widget.Toast: int getYOffset()>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>
<android.widget.Toast: void removeCallback(android.widget.Toast$Callback)>
<android.widget.Toast: void setDuration(int)>
<android.widget.Toast: void setGravity(int,int,int)>
<android.widget.Toast: void setMargin(float,float)>
<android.widget.Toast: void setText(int)>
<android.widget.Toast: void setText(java.lang.CharSequence)>
<android.widget.Toast: void setView(android.view.View)>
<android.widget.Toast: void show()>
<android.widget.Toast: int LENGTH_LONG>
<android.widget.Toast: int LENGTH_SHORT>
android.widget.Toast$Callback
<android.widget.Toast$Callback: void <init>()>
<android.widget.Toast$Callback: void onToastHidden()>
<android.widget.Toast$Callback: void onToastShown()>
android.widget.ToggleButton
<android.widget.ToggleButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ToggleButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ToggleButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ToggleButton: void <init>(android.content.Context)>
<android.widget.ToggleButton: float getDisabledAlpha()>
<android.widget.ToggleButton: java.lang.CharSequence getTextOff()>
<android.widget.ToggleButton: java.lang.CharSequence getTextOn()>
<android.widget.ToggleButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.widget.ToggleButton: void setTextOff(java.lang.CharSequence)>
<android.widget.ToggleButton: void setTextOn(java.lang.CharSequence)>
android.widget.Toolbar
<android.widget.Toolbar: void <init>(android.content.Context)>
<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.Toolbar: void collapseActionView()>
<android.widget.Toolbar: void dismissPopupMenus()>
<android.widget.Toolbar: android.widget.Toolbar$LayoutParams generateDefaultLayoutParams()>
<android.widget.Toolbar: android.widget.Toolbar$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.Toolbar: android.widget.Toolbar$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.widget.Toolbar: java.lang.CharSequence getCollapseContentDescription()>
<android.widget.Toolbar: android.graphics.drawable.Drawable getCollapseIcon()>
<android.widget.Toolbar: int getContentInsetEnd()>
<android.widget.Toolbar: int getContentInsetEndWithActions()>
<android.widget.Toolbar: int getContentInsetLeft()>
<android.widget.Toolbar: int getContentInsetRight()>
<android.widget.Toolbar: int getContentInsetStart()>
<android.widget.Toolbar: int getContentInsetStartWithNavigation()>
<android.widget.Toolbar: int getCurrentContentInsetEnd()>
<android.widget.Toolbar: int getCurrentContentInsetLeft()>
<android.widget.Toolbar: int getCurrentContentInsetRight()>
<android.widget.Toolbar: int getCurrentContentInsetStart()>
<android.widget.Toolbar: android.graphics.drawable.Drawable getLogo()>
<android.widget.Toolbar: java.lang.CharSequence getLogoDescription()>
<android.widget.Toolbar: android.view.Menu getMenu()>
<android.widget.Toolbar: java.lang.CharSequence getNavigationContentDescription()>
<android.widget.Toolbar: android.graphics.drawable.Drawable getNavigationIcon()>
<android.widget.Toolbar: android.graphics.drawable.Drawable getOverflowIcon()>
<android.widget.Toolbar: int getPopupTheme()>
<android.widget.Toolbar: java.lang.CharSequence getSubtitle()>
<android.widget.Toolbar: java.lang.CharSequence getTitle()>
<android.widget.Toolbar: int getTitleMarginBottom()>
<android.widget.Toolbar: int getTitleMarginEnd()>
<android.widget.Toolbar: int getTitleMarginStart()>
<android.widget.Toolbar: int getTitleMarginTop()>
<android.widget.Toolbar: boolean hasExpandedActionView()>
<android.widget.Toolbar: boolean hideOverflowMenu()>
<android.widget.Toolbar: void inflateMenu(int)>
<android.widget.Toolbar: boolean isOverflowMenuShowing()>
<android.widget.Toolbar: void setCollapseContentDescription(int)>
<android.widget.Toolbar: void setCollapseContentDescription(java.lang.CharSequence)>
<android.widget.Toolbar: void setCollapseIcon(int)>
<android.widget.Toolbar: void setCollapseIcon(android.graphics.drawable.Drawable)>
<android.widget.Toolbar: void setContentInsetEndWithActions(int)>
<android.widget.Toolbar: void setContentInsetStartWithNavigation(int)>
<android.widget.Toolbar: void setContentInsetsAbsolute(int,int)>
<android.widget.Toolbar: void setContentInsetsRelative(int,int)>
<android.widget.Toolbar: void setLogo(int)>
<android.widget.Toolbar: void setLogo(android.graphics.drawable.Drawable)>
<android.widget.Toolbar: void setLogoDescription(int)>
<android.widget.Toolbar: void setLogoDescription(java.lang.CharSequence)>
<android.widget.Toolbar: void setNavigationContentDescription(int)>
<android.widget.Toolbar: void setNavigationContentDescription(java.lang.CharSequence)>
<android.widget.Toolbar: void setNavigationIcon(int)>
<android.widget.Toolbar: void setNavigationIcon(android.graphics.drawable.Drawable)>
<android.widget.Toolbar: void setNavigationOnClickListener(android.view.View$OnClickListener)>
<android.widget.Toolbar: void setOnMenuItemClickListener(android.widget.Toolbar$OnMenuItemClickListener)>
<android.widget.Toolbar: void setOverflowIcon(android.graphics.drawable.Drawable)>
<android.widget.Toolbar: void setPopupTheme(int)>
<android.widget.Toolbar: void setSubtitle(int)>
<android.widget.Toolbar: void setSubtitle(java.lang.CharSequence)>
<android.widget.Toolbar: void setSubtitleTextAppearance(android.content.Context,int)>
<android.widget.Toolbar: void setSubtitleTextColor(int)>
<android.widget.Toolbar: void setTitle(int)>
<android.widget.Toolbar: void setTitle(java.lang.CharSequence)>
<android.widget.Toolbar: void setTitleMargin(int,int,int,int)>
<android.widget.Toolbar: void setTitleMarginBottom(int)>
<android.widget.Toolbar: void setTitleMarginEnd(int)>
<android.widget.Toolbar: void setTitleMarginStart(int)>
<android.widget.Toolbar: void setTitleMarginTop(int)>
<android.widget.Toolbar: void setTitleTextAppearance(android.content.Context,int)>
<android.widget.Toolbar: void setTitleTextColor(int)>
<android.widget.Toolbar: boolean showOverflowMenu()>
android.widget.Toolbar$LayoutParams
<android.widget.Toolbar$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.Toolbar$LayoutParams: void <init>(int,int)>
<android.widget.Toolbar$LayoutParams: void <init>(int,int,int)>
<android.widget.Toolbar$LayoutParams: void <init>(int)>
<android.widget.Toolbar$LayoutParams: void <init>(android.widget.Toolbar$LayoutParams)>
<android.widget.Toolbar$LayoutParams: void <init>(android.app.ActionBar$LayoutParams)>
<android.widget.Toolbar$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>
<android.widget.Toolbar$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
android.widget.Toolbar$OnMenuItemClickListener
<android.widget.Toolbar$OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>
android.widget.TwoLineListItem
<android.widget.TwoLineListItem: void <init>(android.content.Context)>
<android.widget.TwoLineListItem: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.TwoLineListItem: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.TwoLineListItem: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.TwoLineListItem: android.widget.TextView getText1()>
<android.widget.TwoLineListItem: android.widget.TextView getText2()>
android.widget.VideoView
<android.widget.VideoView: void <init>(android.content.Context)>
<android.widget.VideoView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.VideoView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.VideoView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.VideoView: void addSubtitleSource(java.io.InputStream,android.media.MediaFormat)>
<android.widget.VideoView: boolean canPause()>
<android.widget.VideoView: boolean canSeekBackward()>
<android.widget.VideoView: boolean canSeekForward()>
<android.widget.VideoView: int getAudioSessionId()>
<android.widget.VideoView: int getBufferPercentage()>
<android.widget.VideoView: int getCurrentPosition()>
<android.widget.VideoView: int getDuration()>
<android.widget.VideoView: boolean isPlaying()>
<android.widget.VideoView: void pause()>
<android.widget.VideoView: int resolveAdjustedSize(int,int)>
<android.widget.VideoView: void resume()>
<android.widget.VideoView: void seekTo(int)>
<android.widget.VideoView: void setAudioAttributes(android.media.AudioAttributes)>
<android.widget.VideoView: void setAudioFocusRequest(int)>
<android.widget.VideoView: void setMediaController(android.widget.MediaController)>
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>
<android.widget.VideoView: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>
<android.widget.VideoView: void setVideoPath(java.lang.String)>
<android.widget.VideoView: void setVideoURI(android.net.Uri)>
<android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)>
<android.widget.VideoView: void start()>
<android.widget.VideoView: void stopPlayback()>
<android.widget.VideoView: void suspend()>
android.widget.ViewAnimator
<android.widget.ViewAnimator: void <init>(android.content.Context)>
<android.widget.ViewAnimator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ViewAnimator: boolean getAnimateFirstView()>
<android.widget.ViewAnimator: android.view.View getCurrentView()>
<android.widget.ViewAnimator: int getDisplayedChild()>
<android.widget.ViewAnimator: android.view.animation.Animation getInAnimation()>
<android.widget.ViewAnimator: android.view.animation.Animation getOutAnimation()>
<android.widget.ViewAnimator: void setAnimateFirstView(boolean)>
<android.widget.ViewAnimator: void setDisplayedChild(int)>
<android.widget.ViewAnimator: void setInAnimation(android.view.animation.Animation)>
<android.widget.ViewAnimator: void setInAnimation(android.content.Context,int)>
<android.widget.ViewAnimator: void setOutAnimation(android.view.animation.Animation)>
<android.widget.ViewAnimator: void setOutAnimation(android.content.Context,int)>
<android.widget.ViewAnimator: void showNext()>
<android.widget.ViewAnimator: void showPrevious()>
android.widget.ViewFlipper
<android.widget.ViewFlipper: void <init>(android.content.Context)>
<android.widget.ViewFlipper: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ViewFlipper: int getFlipInterval()>
<android.widget.ViewFlipper: boolean isAutoStart()>
<android.widget.ViewFlipper: boolean isFlipping()>
<android.widget.ViewFlipper: void setAutoStart(boolean)>
<android.widget.ViewFlipper: void setFlipInterval(int)>
<android.widget.ViewFlipper: void startFlipping()>
<android.widget.ViewFlipper: void stopFlipping()>
android.widget.ViewSwitcher
<android.widget.ViewSwitcher: void <init>(android.content.Context)>
<android.widget.ViewSwitcher: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ViewSwitcher: android.view.View getNextView()>
<android.widget.ViewSwitcher: void reset()>
<android.widget.ViewSwitcher: void setFactory(android.widget.ViewSwitcher$ViewFactory)>
android.widget.ViewSwitcher$ViewFactory
<android.widget.ViewSwitcher$ViewFactory: android.view.View makeView()>
android.widget.WrapperListAdapter
<android.widget.WrapperListAdapter: android.widget.ListAdapter getWrappedAdapter()>
android.widget.ZoomButton
<android.widget.ZoomButton: void <init>(android.content.Context)>
<android.widget.ZoomButton: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ZoomButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ZoomButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.widget.ZoomButton: boolean onLongClick(android.view.View)>
<android.widget.ZoomButton: void setZoomSpeed(long)>
android.widget.ZoomButtonsController
<android.widget.ZoomButtonsController: void <init>(android.view.View)>
<android.widget.ZoomButtonsController: android.view.ViewGroup getContainer()>
<android.widget.ZoomButtonsController: android.view.View getZoomControls()>
<android.widget.ZoomButtonsController: boolean isAutoDismissed()>
<android.widget.ZoomButtonsController: boolean isVisible()>
<android.widget.ZoomButtonsController: boolean onTouch(android.view.View,android.view.MotionEvent)>
<android.widget.ZoomButtonsController: void setAutoDismissed(boolean)>
<android.widget.ZoomButtonsController: void setFocusable(boolean)>
<android.widget.ZoomButtonsController: void setOnZoomListener(android.widget.ZoomButtonsController$OnZoomListener)>
<android.widget.ZoomButtonsController: void setVisible(boolean)>
<android.widget.ZoomButtonsController: void setZoomInEnabled(boolean)>
<android.widget.ZoomButtonsController: void setZoomOutEnabled(boolean)>
<android.widget.ZoomButtonsController: void setZoomSpeed(long)>
android.widget.ZoomButtonsController$OnZoomListener
<android.widget.ZoomButtonsController$OnZoomListener: void onVisibilityChanged(boolean)>
<android.widget.ZoomButtonsController$OnZoomListener: void onZoom(boolean)>
android.widget.ZoomControls
<android.widget.ZoomControls: void <init>(android.content.Context)>
<android.widget.ZoomControls: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.ZoomControls: void hide()>
<android.widget.ZoomControls: void setIsZoomInEnabled(boolean)>
<android.widget.ZoomControls: void setIsZoomOutEnabled(boolean)>
<android.widget.ZoomControls: void setOnZoomInClickListener(android.view.View$OnClickListener)>
<android.widget.ZoomControls: void setOnZoomOutClickListener(android.view.View$OnClickListener)>
<android.widget.ZoomControls: void setZoomSpeed(long)>
<android.widget.ZoomControls: void show()>
android.widget.inline.InlineContentView
<android.widget.inline.InlineContentView: android.view.SurfaceControl getSurfaceControl()>
<android.widget.inline.InlineContentView: boolean isZOrderedOnTop()>
<android.widget.inline.InlineContentView: void onLayout(boolean,int,int,int,int)>
<android.widget.inline.InlineContentView: void setSurfaceControlCallback(android.widget.inline.InlineContentView$SurfaceControlCallback)>
<android.widget.inline.InlineContentView: boolean setZOrderedOnTop(boolean)>
android.widget.inline.InlineContentView$SurfaceControlCallback
<android.widget.inline.InlineContentView$SurfaceControlCallback: void onCreated(android.view.SurfaceControl)>
<android.widget.inline.InlineContentView$SurfaceControlCallback: void onDestroyed(android.view.SurfaceControl)>
android.widget.inline.InlinePresentationSpec
<android.widget.inline.InlinePresentationSpec: int describeContents()>
<android.widget.inline.InlinePresentationSpec: android.util.Size getMaxSize()>
<android.widget.inline.InlinePresentationSpec: android.util.Size getMinSize()>
<android.widget.inline.InlinePresentationSpec: android.os.Bundle getStyle()>
<android.widget.inline.InlinePresentationSpec: void writeToParcel(android.os.Parcel,int)>
<android.widget.inline.InlinePresentationSpec: android.os.Parcelable$Creator CREATOR>
android.widget.inline.InlinePresentationSpec$Builder
<android.widget.inline.InlinePresentationSpec$Builder: void <init>(android.util.Size,android.util.Size)>
<android.widget.inline.InlinePresentationSpec$Builder: android.widget.inline.InlinePresentationSpec build()>
<android.widget.inline.InlinePresentationSpec$Builder: android.widget.inline.InlinePresentationSpec$Builder setStyle(android.os.Bundle)>
android.window.OnBackInvokedCallback
<android.window.OnBackInvokedCallback: void onBackInvoked()>
android.window.OnBackInvokedDispatcher
<android.window.OnBackInvokedDispatcher: void registerOnBackInvokedCallback(int,android.window.OnBackInvokedCallback)>
<android.window.OnBackInvokedDispatcher: void unregisterOnBackInvokedCallback(android.window.OnBackInvokedCallback)>
<android.window.OnBackInvokedDispatcher: int PRIORITY_DEFAULT>
<android.window.OnBackInvokedDispatcher: int PRIORITY_OVERLAY>
android.window.SplashScreen
<android.window.SplashScreen: void clearOnExitAnimationListener()>
<android.window.SplashScreen: void setOnExitAnimationListener(android.window.SplashScreen$OnExitAnimationListener)>
<android.window.SplashScreen: void setSplashScreenTheme(int)>
<android.window.SplashScreen: int SPLASH_SCREEN_STYLE_ICON>
<android.window.SplashScreen: int SPLASH_SCREEN_STYLE_SOLID_COLOR>
android.window.SplashScreen$OnExitAnimationListener
<android.window.SplashScreen$OnExitAnimationListener: void onSplashScreenExit(android.window.SplashScreenView)>
android.window.SplashScreenView
<android.window.SplashScreenView: java.time.Duration getIconAnimationDuration()>
<android.window.SplashScreenView: java.time.Instant getIconAnimationStart()>
<android.window.SplashScreenView: android.view.View getIconView()>
<android.window.SplashScreenView: void remove()>
javax.microedition.khronos.egl.EGL
javax.microedition.khronos.egl.EGL10
<javax.microedition.khronos.egl.EGL10: boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay,int[],javax.microedition.khronos.egl.EGLConfig[],int,int[])>
<javax.microedition.khronos.egl.EGL10: boolean eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,java.lang.Object)>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,javax.microedition.khronos.egl.EGLContext,int[])>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[])>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>
<javax.microedition.khronos.egl.EGL10: boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)>
<javax.microedition.khronos.egl.EGL10: boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>
<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>
<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[],int,int[])>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext eglGetCurrentContext()>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLDisplay eglGetCurrentDisplay()>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int)>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object)>
<javax.microedition.khronos.egl.EGL10: int eglGetError()>
<javax.microedition.khronos.egl.EGL10: boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay,int[])>
<javax.microedition.khronos.egl.EGL10: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>
<javax.microedition.khronos.egl.EGL10: boolean eglQueryContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext,int,int[])>
<javax.microedition.khronos.egl.EGL10: java.lang.String eglQueryString(javax.microedition.khronos.egl.EGLDisplay,int)>
<javax.microedition.khronos.egl.EGL10: boolean eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,int,int[])>
<javax.microedition.khronos.egl.EGL10: boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>
<javax.microedition.khronos.egl.EGL10: boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay)>
<javax.microedition.khronos.egl.EGL10: boolean eglWaitGL()>
<javax.microedition.khronos.egl.EGL10: boolean eglWaitNative(int,java.lang.Object)>
<javax.microedition.khronos.egl.EGL10: int EGL_ALPHA_FORMAT>
<javax.microedition.khronos.egl.EGL10: int EGL_ALPHA_MASK_SIZE>
<javax.microedition.khronos.egl.EGL10: int EGL_ALPHA_SIZE>
<javax.microedition.khronos.egl.EGL10: int EGL_BAD_ACCESS>
<javax.microedition.khronos.egl.EGL10: int EGL_BAD_ALLOC>
<javax.microedition.khronos.egl.EGL10: int EGL_BAD_ATTRIBUTE>
<javax.microedition.khronos.egl.EGL10: int EGL_BAD_CONFIG>
<javax.microedition.khronos.egl.EGL10: int EGL_BAD_CONTEXT>
<javax.microedition.khronos.egl.EGL10: int EGL_BAD_CURRENT_SURFACE>
<javax.microedition.khronos.egl.EGL10: int EGL_BAD_DISPLAY>
<javax.microedition.khronos.egl.EGL10: int EGL_BAD_MATCH>
<javax.microedition.khronos.egl.EGL10: int EGL_BAD_NATIVE_PIXMAP>
<javax.microedition.khronos.egl.EGL10: int EGL_BAD_NATIVE_WINDOW>
<javax.microedition.khronos.egl.EGL10: int EGL_BAD_PARAMETER>
<javax.microedition.khronos.egl.EGL10: int EGL_BAD_SURFACE>
<javax.microedition.khronos.egl.EGL10: int EGL_BLUE_SIZE>
<javax.microedition.khronos.egl.EGL10: int EGL_BUFFER_SIZE>
<javax.microedition.khronos.egl.EGL10: int EGL_COLORSPACE>
<javax.microedition.khronos.egl.EGL10: int EGL_COLOR_BUFFER_TYPE>
<javax.microedition.khronos.egl.EGL10: int EGL_CONFIG_CAVEAT>
<javax.microedition.khronos.egl.EGL10: int EGL_CONFIG_ID>
<javax.microedition.khronos.egl.EGL10: int EGL_CORE_NATIVE_ENGINE>
<javax.microedition.khronos.egl.EGL10: java.lang.Object EGL_DEFAULT_DISPLAY>
<javax.microedition.khronos.egl.EGL10: int EGL_DEPTH_SIZE>
<javax.microedition.khronos.egl.EGL10: int EGL_DONT_CARE>
<javax.microedition.khronos.egl.EGL10: int EGL_DRAW>
<javax.microedition.khronos.egl.EGL10: int EGL_EXTENSIONS>
<javax.microedition.khronos.egl.EGL10: int EGL_GREEN_SIZE>
<javax.microedition.khronos.egl.EGL10: int EGL_HEIGHT>
<javax.microedition.khronos.egl.EGL10: int EGL_HORIZONTAL_RESOLUTION>
<javax.microedition.khronos.egl.EGL10: int EGL_LARGEST_PBUFFER>
<javax.microedition.khronos.egl.EGL10: int EGL_LEVEL>
<javax.microedition.khronos.egl.EGL10: int EGL_LUMINANCE_BUFFER>
<javax.microedition.khronos.egl.EGL10: int EGL_LUMINANCE_SIZE>
<javax.microedition.khronos.egl.EGL10: int EGL_MAX_PBUFFER_HEIGHT>
<javax.microedition.khronos.egl.EGL10: int EGL_MAX_PBUFFER_PIXELS>
<javax.microedition.khronos.egl.EGL10: int EGL_MAX_PBUFFER_WIDTH>
<javax.microedition.khronos.egl.EGL10: int EGL_NATIVE_RENDERABLE>
<javax.microedition.khronos.egl.EGL10: int EGL_NATIVE_VISUAL_ID>
<javax.microedition.khronos.egl.EGL10: int EGL_NATIVE_VISUAL_TYPE>
<javax.microedition.khronos.egl.EGL10: int EGL_NONE>
<javax.microedition.khronos.egl.EGL10: int EGL_NON_CONFORMANT_CONFIG>
<javax.microedition.khronos.egl.EGL10: int EGL_NOT_INITIALIZED>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext EGL_NO_CONTEXT>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLDisplay EGL_NO_DISPLAY>
<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>
<javax.microedition.khronos.egl.EGL10: int EGL_PBUFFER_BIT>
<javax.microedition.khronos.egl.EGL10: int EGL_PIXEL_ASPECT_RATIO>
<javax.microedition.khronos.egl.EGL10: int EGL_PIXMAP_BIT>
<javax.microedition.khronos.egl.EGL10: int EGL_READ>
<javax.microedition.khronos.egl.EGL10: int EGL_RED_SIZE>
<javax.microedition.khronos.egl.EGL10: int EGL_RENDERABLE_TYPE>
<javax.microedition.khronos.egl.EGL10: int EGL_RENDER_BUFFER>
<javax.microedition.khronos.egl.EGL10: int EGL_RGB_BUFFER>
<javax.microedition.khronos.egl.EGL10: int EGL_SAMPLES>
<javax.microedition.khronos.egl.EGL10: int EGL_SAMPLE_BUFFERS>
<javax.microedition.khronos.egl.EGL10: int EGL_SINGLE_BUFFER>
<javax.microedition.khronos.egl.EGL10: int EGL_SLOW_CONFIG>
<javax.microedition.khronos.egl.EGL10: int EGL_STENCIL_SIZE>
<javax.microedition.khronos.egl.EGL10: int EGL_SUCCESS>
<javax.microedition.khronos.egl.EGL10: int EGL_SURFACE_TYPE>
<javax.microedition.khronos.egl.EGL10: int EGL_TRANSPARENT_BLUE_VALUE>
<javax.microedition.khronos.egl.EGL10: int EGL_TRANSPARENT_GREEN_VALUE>
<javax.microedition.khronos.egl.EGL10: int EGL_TRANSPARENT_RED_VALUE>
<javax.microedition.khronos.egl.EGL10: int EGL_TRANSPARENT_RGB>
<javax.microedition.khronos.egl.EGL10: int EGL_TRANSPARENT_TYPE>
<javax.microedition.khronos.egl.EGL10: int EGL_VENDOR>
<javax.microedition.khronos.egl.EGL10: int EGL_VERSION>
<javax.microedition.khronos.egl.EGL10: int EGL_VERTICAL_RESOLUTION>
<javax.microedition.khronos.egl.EGL10: int EGL_WIDTH>
<javax.microedition.khronos.egl.EGL10: int EGL_WINDOW_BIT>
javax.microedition.khronos.egl.EGL11
<javax.microedition.khronos.egl.EGL11: int EGL_CONTEXT_LOST>
javax.microedition.khronos.egl.EGLConfig
<javax.microedition.khronos.egl.EGLConfig: void <init>()>
javax.microedition.khronos.egl.EGLContext
<javax.microedition.khronos.egl.EGLContext: void <init>()>
<javax.microedition.khronos.egl.EGLContext: javax.microedition.khronos.egl.EGL getEGL()>
<javax.microedition.khronos.egl.EGLContext: javax.microedition.khronos.opengles.GL getGL()>
javax.microedition.khronos.egl.EGLDisplay
<javax.microedition.khronos.egl.EGLDisplay: void <init>()>
javax.microedition.khronos.egl.EGLSurface
<javax.microedition.khronos.egl.EGLSurface: void <init>()>
javax.microedition.khronos.opengles.GL
javax.microedition.khronos.opengles.GL10
<javax.microedition.khronos.opengles.GL10: void glActiveTexture(int)>
<javax.microedition.khronos.opengles.GL10: void glAlphaFunc(int,float)>
<javax.microedition.khronos.opengles.GL10: void glAlphaFuncx(int,int)>
<javax.microedition.khronos.opengles.GL10: void glBindTexture(int,int)>
<javax.microedition.khronos.opengles.GL10: void glBlendFunc(int,int)>
<javax.microedition.khronos.opengles.GL10: void glClear(int)>
<javax.microedition.khronos.opengles.GL10: void glClearColor(float,float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glClearColorx(int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glClearDepthf(float)>
<javax.microedition.khronos.opengles.GL10: void glClearDepthx(int)>
<javax.microedition.khronos.opengles.GL10: void glClearStencil(int)>
<javax.microedition.khronos.opengles.GL10: void glClientActiveTexture(int)>
<javax.microedition.khronos.opengles.GL10: void glColor4f(float,float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glColor4x(int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glColorMask(boolean,boolean,boolean,boolean)>
<javax.microedition.khronos.opengles.GL10: void glColorPointer(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glCopyTexImage2D(int,int,int,int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glCullFace(int)>
<javax.microedition.khronos.opengles.GL10: void glDeleteTextures(int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glDeleteTextures(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glDepthFunc(int)>
<javax.microedition.khronos.opengles.GL10: void glDepthMask(boolean)>
<javax.microedition.khronos.opengles.GL10: void glDepthRangef(float,float)>
<javax.microedition.khronos.opengles.GL10: void glDepthRangex(int,int)>
<javax.microedition.khronos.opengles.GL10: void glDisable(int)>
<javax.microedition.khronos.opengles.GL10: void glDisableClientState(int)>
<javax.microedition.khronos.opengles.GL10: void glDrawArrays(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glDrawElements(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glEnable(int)>
<javax.microedition.khronos.opengles.GL10: void glEnableClientState(int)>
<javax.microedition.khronos.opengles.GL10: void glFinish()>
<javax.microedition.khronos.opengles.GL10: void glFlush()>
<javax.microedition.khronos.opengles.GL10: void glFogf(int,float)>
<javax.microedition.khronos.opengles.GL10: void glFogfv(int,float[],int)>
<javax.microedition.khronos.opengles.GL10: void glFogfv(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10: void glFogx(int,int)>
<javax.microedition.khronos.opengles.GL10: void glFogxv(int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glFogxv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glFrontFace(int)>
<javax.microedition.khronos.opengles.GL10: void glFrustumf(float,float,float,float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glFrustumx(int,int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glGenTextures(int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glGenTextures(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: int glGetError()>
<javax.microedition.khronos.opengles.GL10: void glGetIntegerv(int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glGetIntegerv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: java.lang.String glGetString(int)>
<javax.microedition.khronos.opengles.GL10: void glHint(int,int)>
<javax.microedition.khronos.opengles.GL10: void glLightModelf(int,float)>
<javax.microedition.khronos.opengles.GL10: void glLightModelfv(int,float[],int)>
<javax.microedition.khronos.opengles.GL10: void glLightModelfv(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10: void glLightModelx(int,int)>
<javax.microedition.khronos.opengles.GL10: void glLightModelxv(int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glLightModelxv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glLightf(int,int,float)>
<javax.microedition.khronos.opengles.GL10: void glLightfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL10: void glLightfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10: void glLightx(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glLightxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glLightxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glLineWidth(float)>
<javax.microedition.khronos.opengles.GL10: void glLineWidthx(int)>
<javax.microedition.khronos.opengles.GL10: void glLoadIdentity()>
<javax.microedition.khronos.opengles.GL10: void glLoadMatrixf(float[],int)>
<javax.microedition.khronos.opengles.GL10: void glLoadMatrixf(java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10: void glLoadMatrixx(int[],int)>
<javax.microedition.khronos.opengles.GL10: void glLoadMatrixx(java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glLogicOp(int)>
<javax.microedition.khronos.opengles.GL10: void glMaterialf(int,int,float)>
<javax.microedition.khronos.opengles.GL10: void glMaterialfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL10: void glMaterialfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10: void glMaterialx(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glMaterialxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glMaterialxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glMatrixMode(int)>
<javax.microedition.khronos.opengles.GL10: void glMultMatrixf(float[],int)>
<javax.microedition.khronos.opengles.GL10: void glMultMatrixf(java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10: void glMultMatrixx(int[],int)>
<javax.microedition.khronos.opengles.GL10: void glMultMatrixx(java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glMultiTexCoord4f(int,float,float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glMultiTexCoord4x(int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glNormal3f(float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glNormal3x(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glNormalPointer(int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glOrthof(float,float,float,float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glOrthox(int,int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glPixelStorei(int,int)>
<javax.microedition.khronos.opengles.GL10: void glPointSize(float)>
<javax.microedition.khronos.opengles.GL10: void glPointSizex(int)>
<javax.microedition.khronos.opengles.GL10: void glPolygonOffset(float,float)>
<javax.microedition.khronos.opengles.GL10: void glPolygonOffsetx(int,int)>
<javax.microedition.khronos.opengles.GL10: void glPopMatrix()>
<javax.microedition.khronos.opengles.GL10: void glPushMatrix()>
<javax.microedition.khronos.opengles.GL10: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glRotatef(float,float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glRotatex(int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glSampleCoverage(float,boolean)>
<javax.microedition.khronos.opengles.GL10: void glSampleCoveragex(int,boolean)>
<javax.microedition.khronos.opengles.GL10: void glScalef(float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glScalex(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glScissor(int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glShadeModel(int)>
<javax.microedition.khronos.opengles.GL10: void glStencilFunc(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glStencilMask(int)>
<javax.microedition.khronos.opengles.GL10: void glStencilOp(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glTexCoordPointer(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glTexEnvf(int,int,float)>
<javax.microedition.khronos.opengles.GL10: void glTexEnvfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL10: void glTexEnvfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL10: void glTexEnvx(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glTexEnvxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL10: void glTexEnvxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL10: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glTexParameterf(int,int,float)>
<javax.microedition.khronos.opengles.GL10: void glTexParameterx(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glTranslatef(float,float,float)>
<javax.microedition.khronos.opengles.GL10: void glTranslatex(int,int,int)>
<javax.microedition.khronos.opengles.GL10: void glVertexPointer(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL10: void glViewport(int,int,int,int)>
<javax.microedition.khronos.opengles.GL10: int GL_ADD>
<javax.microedition.khronos.opengles.GL10: int GL_ALIASED_LINE_WIDTH_RANGE>
<javax.microedition.khronos.opengles.GL10: int GL_ALIASED_POINT_SIZE_RANGE>
<javax.microedition.khronos.opengles.GL10: int GL_ALPHA>
<javax.microedition.khronos.opengles.GL10: int GL_ALPHA_BITS>
<javax.microedition.khronos.opengles.GL10: int GL_ALPHA_TEST>
<javax.microedition.khronos.opengles.GL10: int GL_ALWAYS>
<javax.microedition.khronos.opengles.GL10: int GL_AMBIENT>
<javax.microedition.khronos.opengles.GL10: int GL_AMBIENT_AND_DIFFUSE>
<javax.microedition.khronos.opengles.GL10: int GL_AND>
<javax.microedition.khronos.opengles.GL10: int GL_AND_INVERTED>
<javax.microedition.khronos.opengles.GL10: int GL_AND_REVERSE>
<javax.microedition.khronos.opengles.GL10: int GL_BACK>
<javax.microedition.khronos.opengles.GL10: int GL_BLEND>
<javax.microedition.khronos.opengles.GL10: int GL_BLUE_BITS>
<javax.microedition.khronos.opengles.GL10: int GL_BYTE>
<javax.microedition.khronos.opengles.GL10: int GL_CCW>
<javax.microedition.khronos.opengles.GL10: int GL_CLAMP_TO_EDGE>
<javax.microedition.khronos.opengles.GL10: int GL_CLEAR>
<javax.microedition.khronos.opengles.GL10: int GL_COLOR_ARRAY>
<javax.microedition.khronos.opengles.GL10: int GL_COLOR_BUFFER_BIT>
<javax.microedition.khronos.opengles.GL10: int GL_COLOR_LOGIC_OP>
<javax.microedition.khronos.opengles.GL10: int GL_COLOR_MATERIAL>
<javax.microedition.khronos.opengles.GL10: int GL_COMPRESSED_TEXTURE_FORMATS>
<javax.microedition.khronos.opengles.GL10: int GL_CONSTANT_ATTENUATION>
<javax.microedition.khronos.opengles.GL10: int GL_COPY>
<javax.microedition.khronos.opengles.GL10: int GL_COPY_INVERTED>
<javax.microedition.khronos.opengles.GL10: int GL_CULL_FACE>
<javax.microedition.khronos.opengles.GL10: int GL_CW>
<javax.microedition.khronos.opengles.GL10: int GL_DECAL>
<javax.microedition.khronos.opengles.GL10: int GL_DECR>
<javax.microedition.khronos.opengles.GL10: int GL_DEPTH_BITS>
<javax.microedition.khronos.opengles.GL10: int GL_DEPTH_BUFFER_BIT>
<javax.microedition.khronos.opengles.GL10: int GL_DEPTH_TEST>
<javax.microedition.khronos.opengles.GL10: int GL_DIFFUSE>
<javax.microedition.khronos.opengles.GL10: int GL_DITHER>
<javax.microedition.khronos.opengles.GL10: int GL_DONT_CARE>
<javax.microedition.khronos.opengles.GL10: int GL_DST_ALPHA>
<javax.microedition.khronos.opengles.GL10: int GL_DST_COLOR>
<javax.microedition.khronos.opengles.GL10: int GL_EMISSION>
<javax.microedition.khronos.opengles.GL10: int GL_EQUAL>
<javax.microedition.khronos.opengles.GL10: int GL_EQUIV>
<javax.microedition.khronos.opengles.GL10: int GL_EXP>
<javax.microedition.khronos.opengles.GL10: int GL_EXP2>
<javax.microedition.khronos.opengles.GL10: int GL_EXTENSIONS>
<javax.microedition.khronos.opengles.GL10: int GL_FALSE>
<javax.microedition.khronos.opengles.GL10: int GL_FASTEST>
<javax.microedition.khronos.opengles.GL10: int GL_FIXED>
<javax.microedition.khronos.opengles.GL10: int GL_FLAT>
<javax.microedition.khronos.opengles.GL10: int GL_FLOAT>
<javax.microedition.khronos.opengles.GL10: int GL_FOG>
<javax.microedition.khronos.opengles.GL10: int GL_FOG_COLOR>
<javax.microedition.khronos.opengles.GL10: int GL_FOG_DENSITY>
<javax.microedition.khronos.opengles.GL10: int GL_FOG_END>
<javax.microedition.khronos.opengles.GL10: int GL_FOG_HINT>
<javax.microedition.khronos.opengles.GL10: int GL_FOG_MODE>
<javax.microedition.khronos.opengles.GL10: int GL_FOG_START>
<javax.microedition.khronos.opengles.GL10: int GL_FRONT>
<javax.microedition.khronos.opengles.GL10: int GL_FRONT_AND_BACK>
<javax.microedition.khronos.opengles.GL10: int GL_GEQUAL>
<javax.microedition.khronos.opengles.GL10: int GL_GREATER>
<javax.microedition.khronos.opengles.GL10: int GL_GREEN_BITS>
<javax.microedition.khronos.opengles.GL10: int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES>
<javax.microedition.khronos.opengles.GL10: int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES>
<javax.microedition.khronos.opengles.GL10: int GL_INCR>
<javax.microedition.khronos.opengles.GL10: int GL_INVALID_ENUM>
<javax.microedition.khronos.opengles.GL10: int GL_INVALID_OPERATION>
<javax.microedition.khronos.opengles.GL10: int GL_INVALID_VALUE>
<javax.microedition.khronos.opengles.GL10: int GL_INVERT>
<javax.microedition.khronos.opengles.GL10: int GL_KEEP>
<javax.microedition.khronos.opengles.GL10: int GL_LEQUAL>
<javax.microedition.khronos.opengles.GL10: int GL_LESS>
<javax.microedition.khronos.opengles.GL10: int GL_LIGHT0>
<javax.microedition.khronos.opengles.GL10: int GL_LIGHT1>
<javax.microedition.khronos.opengles.GL10: int GL_LIGHT2>
<javax.microedition.khronos.opengles.GL10: int GL_LIGHT3>
<javax.microedition.khronos.opengles.GL10: int GL_LIGHT4>
<javax.microedition.khronos.opengles.GL10: int GL_LIGHT5>
<javax.microedition.khronos.opengles.GL10: int GL_LIGHT6>
<javax.microedition.khronos.opengles.GL10: int GL_LIGHT7>
<javax.microedition.khronos.opengles.GL10: int GL_LIGHTING>
<javax.microedition.khronos.opengles.GL10: int GL_LIGHT_MODEL_AMBIENT>
<javax.microedition.khronos.opengles.GL10: int GL_LIGHT_MODEL_TWO_SIDE>
<javax.microedition.khronos.opengles.GL10: int GL_LINEAR>
<javax.microedition.khronos.opengles.GL10: int GL_LINEAR_ATTENUATION>
<javax.microedition.khronos.opengles.GL10: int GL_LINEAR_MIPMAP_LINEAR>
<javax.microedition.khronos.opengles.GL10: int GL_LINEAR_MIPMAP_NEAREST>
<javax.microedition.khronos.opengles.GL10: int GL_LINES>
<javax.microedition.khronos.opengles.GL10: int GL_LINE_LOOP>
<javax.microedition.khronos.opengles.GL10: int GL_LINE_SMOOTH>
<javax.microedition.khronos.opengles.GL10: int GL_LINE_SMOOTH_HINT>
<javax.microedition.khronos.opengles.GL10: int GL_LINE_STRIP>
<javax.microedition.khronos.opengles.GL10: int GL_LUMINANCE>
<javax.microedition.khronos.opengles.GL10: int GL_LUMINANCE_ALPHA>
<javax.microedition.khronos.opengles.GL10: int GL_MAX_ELEMENTS_INDICES>
<javax.microedition.khronos.opengles.GL10: int GL_MAX_ELEMENTS_VERTICES>
<javax.microedition.khronos.opengles.GL10: int GL_MAX_LIGHTS>
<javax.microedition.khronos.opengles.GL10: int GL_MAX_MODELVIEW_STACK_DEPTH>
<javax.microedition.khronos.opengles.GL10: int GL_MAX_PROJECTION_STACK_DEPTH>
<javax.microedition.khronos.opengles.GL10: int GL_MAX_TEXTURE_SIZE>
<javax.microedition.khronos.opengles.GL10: int GL_MAX_TEXTURE_STACK_DEPTH>
<javax.microedition.khronos.opengles.GL10: int GL_MAX_TEXTURE_UNITS>
<javax.microedition.khronos.opengles.GL10: int GL_MAX_VIEWPORT_DIMS>
<javax.microedition.khronos.opengles.GL10: int GL_MODELVIEW>
<javax.microedition.khronos.opengles.GL10: int GL_MODULATE>
<javax.microedition.khronos.opengles.GL10: int GL_MULTISAMPLE>
<javax.microedition.khronos.opengles.GL10: int GL_NAND>
<javax.microedition.khronos.opengles.GL10: int GL_NEAREST>
<javax.microedition.khronos.opengles.GL10: int GL_NEAREST_MIPMAP_LINEAR>
<javax.microedition.khronos.opengles.GL10: int GL_NEAREST_MIPMAP_NEAREST>
<javax.microedition.khronos.opengles.GL10: int GL_NEVER>
<javax.microedition.khronos.opengles.GL10: int GL_NICEST>
<javax.microedition.khronos.opengles.GL10: int GL_NOOP>
<javax.microedition.khronos.opengles.GL10: int GL_NOR>
<javax.microedition.khronos.opengles.GL10: int GL_NORMALIZE>
<javax.microedition.khronos.opengles.GL10: int GL_NORMAL_ARRAY>
<javax.microedition.khronos.opengles.GL10: int GL_NOTEQUAL>
<javax.microedition.khronos.opengles.GL10: int GL_NO_ERROR>
<javax.microedition.khronos.opengles.GL10: int GL_NUM_COMPRESSED_TEXTURE_FORMATS>
<javax.microedition.khronos.opengles.GL10: int GL_ONE>
<javax.microedition.khronos.opengles.GL10: int GL_ONE_MINUS_DST_ALPHA>
<javax.microedition.khronos.opengles.GL10: int GL_ONE_MINUS_DST_COLOR>
<javax.microedition.khronos.opengles.GL10: int GL_ONE_MINUS_SRC_ALPHA>
<javax.microedition.khronos.opengles.GL10: int GL_ONE_MINUS_SRC_COLOR>
<javax.microedition.khronos.opengles.GL10: int GL_OR>
<javax.microedition.khronos.opengles.GL10: int GL_OR_INVERTED>
<javax.microedition.khronos.opengles.GL10: int GL_OR_REVERSE>
<javax.microedition.khronos.opengles.GL10: int GL_OUT_OF_MEMORY>
<javax.microedition.khronos.opengles.GL10: int GL_PACK_ALIGNMENT>
<javax.microedition.khronos.opengles.GL10: int GL_PALETTE4_R5_G6_B5_OES>
<javax.microedition.khronos.opengles.GL10: int GL_PALETTE4_RGB5_A1_OES>
<javax.microedition.khronos.opengles.GL10: int GL_PALETTE4_RGB8_OES>
<javax.microedition.khronos.opengles.GL10: int GL_PALETTE4_RGBA4_OES>
<javax.microedition.khronos.opengles.GL10: int GL_PALETTE4_RGBA8_OES>
<javax.microedition.khronos.opengles.GL10: int GL_PALETTE8_R5_G6_B5_OES>
<javax.microedition.khronos.opengles.GL10: int GL_PALETTE8_RGB5_A1_OES>
<javax.microedition.khronos.opengles.GL10: int GL_PALETTE8_RGB8_OES>
<javax.microedition.khronos.opengles.GL10: int GL_PALETTE8_RGBA4_OES>
<javax.microedition.khronos.opengles.GL10: int GL_PALETTE8_RGBA8_OES>
<javax.microedition.khronos.opengles.GL10: int GL_PERSPECTIVE_CORRECTION_HINT>
<javax.microedition.khronos.opengles.GL10: int GL_POINTS>
<javax.microedition.khronos.opengles.GL10: int GL_POINT_FADE_THRESHOLD_SIZE>
<javax.microedition.khronos.opengles.GL10: int GL_POINT_SIZE>
<javax.microedition.khronos.opengles.GL10: int GL_POINT_SMOOTH>
<javax.microedition.khronos.opengles.GL10: int GL_POINT_SMOOTH_HINT>
<javax.microedition.khronos.opengles.GL10: int GL_POLYGON_OFFSET_FILL>
<javax.microedition.khronos.opengles.GL10: int GL_POLYGON_SMOOTH_HINT>
<javax.microedition.khronos.opengles.GL10: int GL_POSITION>
<javax.microedition.khronos.opengles.GL10: int GL_PROJECTION>
<javax.microedition.khronos.opengles.GL10: int GL_QUADRATIC_ATTENUATION>
<javax.microedition.khronos.opengles.GL10: int GL_RED_BITS>
<javax.microedition.khronos.opengles.GL10: int GL_RENDERER>
<javax.microedition.khronos.opengles.GL10: int GL_REPEAT>
<javax.microedition.khronos.opengles.GL10: int GL_REPLACE>
<javax.microedition.khronos.opengles.GL10: int GL_RESCALE_NORMAL>
<javax.microedition.khronos.opengles.GL10: int GL_RGB>
<javax.microedition.khronos.opengles.GL10: int GL_RGBA>
<javax.microedition.khronos.opengles.GL10: int GL_SAMPLE_ALPHA_TO_COVERAGE>
<javax.microedition.khronos.opengles.GL10: int GL_SAMPLE_ALPHA_TO_ONE>
<javax.microedition.khronos.opengles.GL10: int GL_SAMPLE_COVERAGE>
<javax.microedition.khronos.opengles.GL10: int GL_SCISSOR_TEST>
<javax.microedition.khronos.opengles.GL10: int GL_SET>
<javax.microedition.khronos.opengles.GL10: int GL_SHININESS>
<javax.microedition.khronos.opengles.GL10: int GL_SHORT>
<javax.microedition.khronos.opengles.GL10: int GL_SMOOTH>
<javax.microedition.khronos.opengles.GL10: int GL_SMOOTH_LINE_WIDTH_RANGE>
<javax.microedition.khronos.opengles.GL10: int GL_SMOOTH_POINT_SIZE_RANGE>
<javax.microedition.khronos.opengles.GL10: int GL_SPECULAR>
<javax.microedition.khronos.opengles.GL10: int GL_SPOT_CUTOFF>
<javax.microedition.khronos.opengles.GL10: int GL_SPOT_DIRECTION>
<javax.microedition.khronos.opengles.GL10: int GL_SPOT_EXPONENT>
<javax.microedition.khronos.opengles.GL10: int GL_SRC_ALPHA>
<javax.microedition.khronos.opengles.GL10: int GL_SRC_ALPHA_SATURATE>
<javax.microedition.khronos.opengles.GL10: int GL_SRC_COLOR>
<javax.microedition.khronos.opengles.GL10: int GL_STACK_OVERFLOW>
<javax.microedition.khronos.opengles.GL10: int GL_STACK_UNDERFLOW>
<javax.microedition.khronos.opengles.GL10: int GL_STENCIL_BITS>
<javax.microedition.khronos.opengles.GL10: int GL_STENCIL_BUFFER_BIT>
<javax.microedition.khronos.opengles.GL10: int GL_STENCIL_TEST>
<javax.microedition.khronos.opengles.GL10: int GL_SUBPIXEL_BITS>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE0>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE1>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE10>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE11>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE12>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE13>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE14>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE15>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE16>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE17>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE18>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE19>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE2>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE20>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE21>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE22>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE23>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE24>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE25>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE26>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE27>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE28>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE29>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE3>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE30>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE31>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE4>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE5>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE6>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE7>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE8>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE9>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE_2D>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE_COORD_ARRAY>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE_ENV>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE_ENV_COLOR>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE_ENV_MODE>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE_MAG_FILTER>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE_MIN_FILTER>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE_WRAP_S>
<javax.microedition.khronos.opengles.GL10: int GL_TEXTURE_WRAP_T>
<javax.microedition.khronos.opengles.GL10: int GL_TRIANGLES>
<javax.microedition.khronos.opengles.GL10: int GL_TRIANGLE_FAN>
<javax.microedition.khronos.opengles.GL10: int GL_TRIANGLE_STRIP>
<javax.microedition.khronos.opengles.GL10: int GL_TRUE>
<javax.microedition.khronos.opengles.GL10: int GL_UNPACK_ALIGNMENT>
<javax.microedition.khronos.opengles.GL10: int GL_UNSIGNED_BYTE>
<javax.microedition.khronos.opengles.GL10: int GL_UNSIGNED_SHORT>
<javax.microedition.khronos.opengles.GL10: int GL_UNSIGNED_SHORT_4_4_4_4>
<javax.microedition.khronos.opengles.GL10: int GL_UNSIGNED_SHORT_5_5_5_1>
<javax.microedition.khronos.opengles.GL10: int GL_UNSIGNED_SHORT_5_6_5>
<javax.microedition.khronos.opengles.GL10: int GL_VENDOR>
<javax.microedition.khronos.opengles.GL10: int GL_VERSION>
<javax.microedition.khronos.opengles.GL10: int GL_VERTEX_ARRAY>
<javax.microedition.khronos.opengles.GL10: int GL_XOR>
<javax.microedition.khronos.opengles.GL10: int GL_ZERO>
javax.microedition.khronos.opengles.GL10Ext
<javax.microedition.khronos.opengles.GL10Ext: int glQueryMatrixxOES(int[],int,int[],int)>
<javax.microedition.khronos.opengles.GL10Ext: int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer)>
javax.microedition.khronos.opengles.GL11
<javax.microedition.khronos.opengles.GL11: void glBindBuffer(int,int)>
<javax.microedition.khronos.opengles.GL11: void glBufferData(int,int,java.nio.Buffer,int)>
<javax.microedition.khronos.opengles.GL11: void glBufferSubData(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL11: void glClipPlanef(int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glClipPlanef(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glClipPlanex(int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glClipPlanex(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glColor4ub(byte,byte,byte,byte)>
<javax.microedition.khronos.opengles.GL11: void glColorPointer(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11: void glDeleteBuffers(int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glDeleteBuffers(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glDrawElements(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11: void glGenBuffers(int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGenBuffers(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetBooleanv(int,boolean[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetBooleanv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetBufferParameteriv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetClipPlanef(int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetClipPlanef(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetClipPlanex(int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetClipPlanex(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetFixedv(int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetFixedv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetFloatv(int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetFloatv(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetLightfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetLightfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetLightxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetLightxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetMaterialfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetMaterialfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetMaterialxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetMaterialxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetPointerv(int,java.nio.Buffer[])>
<javax.microedition.khronos.opengles.GL11: void glGetTexEnviv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetTexEnviv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetTexEnvxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetTexEnvxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameterfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameteriv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameteriv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameterxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glGetTexParameterxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: boolean glIsBuffer(int)>
<javax.microedition.khronos.opengles.GL11: boolean glIsEnabled(int)>
<javax.microedition.khronos.opengles.GL11: boolean glIsTexture(int)>
<javax.microedition.khronos.opengles.GL11: void glNormalPointer(int,int,int)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterf(int,float)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterfv(int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterfv(int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterx(int,int)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterxv(int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glPointParameterxv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glPointSizePointerOES(int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL11: void glTexCoordPointer(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11: void glTexEnvi(int,int,int)>
<javax.microedition.khronos.opengles.GL11: void glTexEnviv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glTexEnviv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glTexParameterfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11: void glTexParameterfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11: void glTexParameteri(int,int,int)>
<javax.microedition.khronos.opengles.GL11: void glTexParameteriv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glTexParameteriv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glTexParameterxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11: void glTexParameterxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11: void glVertexPointer(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11: int GL_ACTIVE_TEXTURE>
<javax.microedition.khronos.opengles.GL11: int GL_ADD_SIGNED>
<javax.microedition.khronos.opengles.GL11: int GL_ALPHA_SCALE>
<javax.microedition.khronos.opengles.GL11: int GL_ALPHA_TEST_FUNC>
<javax.microedition.khronos.opengles.GL11: int GL_ALPHA_TEST_REF>
<javax.microedition.khronos.opengles.GL11: int GL_ARRAY_BUFFER>
<javax.microedition.khronos.opengles.GL11: int GL_ARRAY_BUFFER_BINDING>
<javax.microedition.khronos.opengles.GL11: int GL_BLEND_DST>
<javax.microedition.khronos.opengles.GL11: int GL_BLEND_SRC>
<javax.microedition.khronos.opengles.GL11: int GL_BUFFER_ACCESS>
<javax.microedition.khronos.opengles.GL11: int GL_BUFFER_SIZE>
<javax.microedition.khronos.opengles.GL11: int GL_BUFFER_USAGE>
<javax.microedition.khronos.opengles.GL11: int GL_CLIENT_ACTIVE_TEXTURE>
<javax.microedition.khronos.opengles.GL11: int GL_CLIP_PLANE0>
<javax.microedition.khronos.opengles.GL11: int GL_CLIP_PLANE1>
<javax.microedition.khronos.opengles.GL11: int GL_CLIP_PLANE2>
<javax.microedition.khronos.opengles.GL11: int GL_CLIP_PLANE3>
<javax.microedition.khronos.opengles.GL11: int GL_CLIP_PLANE4>
<javax.microedition.khronos.opengles.GL11: int GL_CLIP_PLANE5>
<javax.microedition.khronos.opengles.GL11: int GL_COLOR_ARRAY_BUFFER_BINDING>
<javax.microedition.khronos.opengles.GL11: int GL_COLOR_ARRAY_POINTER>
<javax.microedition.khronos.opengles.GL11: int GL_COLOR_ARRAY_SIZE>
<javax.microedition.khronos.opengles.GL11: int GL_COLOR_ARRAY_STRIDE>
<javax.microedition.khronos.opengles.GL11: int GL_COLOR_ARRAY_TYPE>
<javax.microedition.khronos.opengles.GL11: int GL_COLOR_CLEAR_VALUE>
<javax.microedition.khronos.opengles.GL11: int GL_COLOR_WRITEMASK>
<javax.microedition.khronos.opengles.GL11: int GL_COMBINE>
<javax.microedition.khronos.opengles.GL11: int GL_COMBINE_ALPHA>
<javax.microedition.khronos.opengles.GL11: int GL_COMBINE_RGB>
<javax.microedition.khronos.opengles.GL11: int GL_CONSTANT>
<javax.microedition.khronos.opengles.GL11: int GL_COORD_REPLACE_OES>
<javax.microedition.khronos.opengles.GL11: int GL_CULL_FACE_MODE>
<javax.microedition.khronos.opengles.GL11: int GL_CURRENT_COLOR>
<javax.microedition.khronos.opengles.GL11: int GL_CURRENT_NORMAL>
<javax.microedition.khronos.opengles.GL11: int GL_CURRENT_TEXTURE_COORDS>
<javax.microedition.khronos.opengles.GL11: int GL_DEPTH_CLEAR_VALUE>
<javax.microedition.khronos.opengles.GL11: int GL_DEPTH_FUNC>
<javax.microedition.khronos.opengles.GL11: int GL_DEPTH_RANGE>
<javax.microedition.khronos.opengles.GL11: int GL_DEPTH_WRITEMASK>
<javax.microedition.khronos.opengles.GL11: int GL_DOT3_RGB>
<javax.microedition.khronos.opengles.GL11: int GL_DOT3_RGBA>
<javax.microedition.khronos.opengles.GL11: int GL_DYNAMIC_DRAW>
<javax.microedition.khronos.opengles.GL11: int GL_ELEMENT_ARRAY_BUFFER>
<javax.microedition.khronos.opengles.GL11: int GL_ELEMENT_ARRAY_BUFFER_BINDING>
<javax.microedition.khronos.opengles.GL11: int GL_FRONT_FACE>
<javax.microedition.khronos.opengles.GL11: int GL_GENERATE_MIPMAP>
<javax.microedition.khronos.opengles.GL11: int GL_GENERATE_MIPMAP_HINT>
<javax.microedition.khronos.opengles.GL11: int GL_INTERPOLATE>
<javax.microedition.khronos.opengles.GL11: int GL_LINE_WIDTH>
<javax.microedition.khronos.opengles.GL11: int GL_LOGIC_OP_MODE>
<javax.microedition.khronos.opengles.GL11: int GL_MATRIX_MODE>
<javax.microedition.khronos.opengles.GL11: int GL_MAX_CLIP_PLANES>
<javax.microedition.khronos.opengles.GL11: int GL_MODELVIEW_MATRIX>
<javax.microedition.khronos.opengles.GL11: int GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES>
<javax.microedition.khronos.opengles.GL11: int GL_MODELVIEW_STACK_DEPTH>
<javax.microedition.khronos.opengles.GL11: int GL_NORMAL_ARRAY_BUFFER_BINDING>
<javax.microedition.khronos.opengles.GL11: int GL_NORMAL_ARRAY_POINTER>
<javax.microedition.khronos.opengles.GL11: int GL_NORMAL_ARRAY_STRIDE>
<javax.microedition.khronos.opengles.GL11: int GL_NORMAL_ARRAY_TYPE>
<javax.microedition.khronos.opengles.GL11: int GL_OPERAND0_ALPHA>
<javax.microedition.khronos.opengles.GL11: int GL_OPERAND0_RGB>
<javax.microedition.khronos.opengles.GL11: int GL_OPERAND1_ALPHA>
<javax.microedition.khronos.opengles.GL11: int GL_OPERAND1_RGB>
<javax.microedition.khronos.opengles.GL11: int GL_OPERAND2_ALPHA>
<javax.microedition.khronos.opengles.GL11: int GL_OPERAND2_RGB>
<javax.microedition.khronos.opengles.GL11: int GL_POINT_DISTANCE_ATTENUATION>
<javax.microedition.khronos.opengles.GL11: int GL_POINT_FADE_THRESHOLD_SIZE>
<javax.microedition.khronos.opengles.GL11: int GL_POINT_SIZE>
<javax.microedition.khronos.opengles.GL11: int GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES>
<javax.microedition.khronos.opengles.GL11: int GL_POINT_SIZE_ARRAY_OES>
<javax.microedition.khronos.opengles.GL11: int GL_POINT_SIZE_ARRAY_POINTER_OES>
<javax.microedition.khronos.opengles.GL11: int GL_POINT_SIZE_ARRAY_STRIDE_OES>
<javax.microedition.khronos.opengles.GL11: int GL_POINT_SIZE_ARRAY_TYPE_OES>
<javax.microedition.khronos.opengles.GL11: int GL_POINT_SIZE_MAX>
<javax.microedition.khronos.opengles.GL11: int GL_POINT_SIZE_MIN>
<javax.microedition.khronos.opengles.GL11: int GL_POINT_SPRITE_OES>
<javax.microedition.khronos.opengles.GL11: int GL_POLYGON_OFFSET_FACTOR>
<javax.microedition.khronos.opengles.GL11: int GL_POLYGON_OFFSET_UNITS>
<javax.microedition.khronos.opengles.GL11: int GL_PREVIOUS>
<javax.microedition.khronos.opengles.GL11: int GL_PRIMARY_COLOR>
<javax.microedition.khronos.opengles.GL11: int GL_PROJECTION_MATRIX>
<javax.microedition.khronos.opengles.GL11: int GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES>
<javax.microedition.khronos.opengles.GL11: int GL_PROJECTION_STACK_DEPTH>
<javax.microedition.khronos.opengles.GL11: int GL_RGB_SCALE>
<javax.microedition.khronos.opengles.GL11: int GL_SAMPLES>
<javax.microedition.khronos.opengles.GL11: int GL_SAMPLE_BUFFERS>
<javax.microedition.khronos.opengles.GL11: int GL_SAMPLE_COVERAGE_INVERT>
<javax.microedition.khronos.opengles.GL11: int GL_SAMPLE_COVERAGE_VALUE>
<javax.microedition.khronos.opengles.GL11: int GL_SCISSOR_BOX>
<javax.microedition.khronos.opengles.GL11: int GL_SHADE_MODEL>
<javax.microedition.khronos.opengles.GL11: int GL_SRC0_ALPHA>
<javax.microedition.khronos.opengles.GL11: int GL_SRC0_RGB>
<javax.microedition.khronos.opengles.GL11: int GL_SRC1_ALPHA>
<javax.microedition.khronos.opengles.GL11: int GL_SRC1_RGB>
<javax.microedition.khronos.opengles.GL11: int GL_SRC2_ALPHA>
<javax.microedition.khronos.opengles.GL11: int GL_SRC2_RGB>
<javax.microedition.khronos.opengles.GL11: int GL_STATIC_DRAW>
<javax.microedition.khronos.opengles.GL11: int GL_STENCIL_CLEAR_VALUE>
<javax.microedition.khronos.opengles.GL11: int GL_STENCIL_FAIL>
<javax.microedition.khronos.opengles.GL11: int GL_STENCIL_FUNC>
<javax.microedition.khronos.opengles.GL11: int GL_STENCIL_PASS_DEPTH_FAIL>
<javax.microedition.khronos.opengles.GL11: int GL_STENCIL_PASS_DEPTH_PASS>
<javax.microedition.khronos.opengles.GL11: int GL_STENCIL_REF>
<javax.microedition.khronos.opengles.GL11: int GL_STENCIL_VALUE_MASK>
<javax.microedition.khronos.opengles.GL11: int GL_STENCIL_WRITEMASK>
<javax.microedition.khronos.opengles.GL11: int GL_SUBTRACT>
<javax.microedition.khronos.opengles.GL11: int GL_TEXTURE_BINDING_2D>
<javax.microedition.khronos.opengles.GL11: int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING>
<javax.microedition.khronos.opengles.GL11: int GL_TEXTURE_COORD_ARRAY_POINTER>
<javax.microedition.khronos.opengles.GL11: int GL_TEXTURE_COORD_ARRAY_SIZE>
<javax.microedition.khronos.opengles.GL11: int GL_TEXTURE_COORD_ARRAY_STRIDE>
<javax.microedition.khronos.opengles.GL11: int GL_TEXTURE_COORD_ARRAY_TYPE>
<javax.microedition.khronos.opengles.GL11: int GL_TEXTURE_MATRIX>
<javax.microedition.khronos.opengles.GL11: int GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES>
<javax.microedition.khronos.opengles.GL11: int GL_TEXTURE_STACK_DEPTH>
<javax.microedition.khronos.opengles.GL11: int GL_VERTEX_ARRAY_BUFFER_BINDING>
<javax.microedition.khronos.opengles.GL11: int GL_VERTEX_ARRAY_POINTER>
<javax.microedition.khronos.opengles.GL11: int GL_VERTEX_ARRAY_SIZE>
<javax.microedition.khronos.opengles.GL11: int GL_VERTEX_ARRAY_STRIDE>
<javax.microedition.khronos.opengles.GL11: int GL_VERTEX_ARRAY_TYPE>
<javax.microedition.khronos.opengles.GL11: int GL_VIEWPORT>
<javax.microedition.khronos.opengles.GL11: int GL_WRITE_ONLY>
javax.microedition.khronos.opengles.GL11Ext
<javax.microedition.khronos.opengles.GL11Ext: void glCurrentPaletteMatrixOES(int)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexfOES(float,float,float,float,float)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexfvOES(float[],int)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexfvOES(java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexiOES(int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexivOES(int[],int)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexivOES(java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexsOES(short,short,short,short,short)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexsvOES(short[],int)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexsvOES(java.nio.ShortBuffer)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexxOES(int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexxvOES(int[],int)>
<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexxvOES(java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11Ext: void glEnable(int)>
<javax.microedition.khronos.opengles.GL11Ext: void glEnableClientState(int)>
<javax.microedition.khronos.opengles.GL11Ext: void glLoadPaletteFromModelViewMatrixOES()>
<javax.microedition.khronos.opengles.GL11Ext: void glMatrixIndexPointerOES(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL11Ext: void glMatrixIndexPointerOES(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11Ext: void glTexParameterfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11Ext: void glWeightPointerOES(int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL11Ext: void glWeightPointerOES(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11Ext: int GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES>
<javax.microedition.khronos.opengles.GL11Ext: int GL_MATRIX_INDEX_ARRAY_OES>
<javax.microedition.khronos.opengles.GL11Ext: int GL_MATRIX_INDEX_ARRAY_POINTER_OES>
<javax.microedition.khronos.opengles.GL11Ext: int GL_MATRIX_INDEX_ARRAY_SIZE_OES>
<javax.microedition.khronos.opengles.GL11Ext: int GL_MATRIX_INDEX_ARRAY_STRIDE_OES>
<javax.microedition.khronos.opengles.GL11Ext: int GL_MATRIX_INDEX_ARRAY_TYPE_OES>
<javax.microedition.khronos.opengles.GL11Ext: int GL_MATRIX_PALETTE_OES>
<javax.microedition.khronos.opengles.GL11Ext: int GL_MAX_PALETTE_MATRICES_OES>
<javax.microedition.khronos.opengles.GL11Ext: int GL_MAX_VERTEX_UNITS_OES>
<javax.microedition.khronos.opengles.GL11Ext: int GL_TEXTURE_CROP_RECT_OES>
<javax.microedition.khronos.opengles.GL11Ext: int GL_WEIGHT_ARRAY_BUFFER_BINDING_OES>
<javax.microedition.khronos.opengles.GL11Ext: int GL_WEIGHT_ARRAY_OES>
<javax.microedition.khronos.opengles.GL11Ext: int GL_WEIGHT_ARRAY_POINTER_OES>
<javax.microedition.khronos.opengles.GL11Ext: int GL_WEIGHT_ARRAY_SIZE_OES>
<javax.microedition.khronos.opengles.GL11Ext: int GL_WEIGHT_ARRAY_STRIDE_OES>
<javax.microedition.khronos.opengles.GL11Ext: int GL_WEIGHT_ARRAY_TYPE_OES>
javax.microedition.khronos.opengles.GL11ExtensionPack
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBindFramebufferOES(int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBindRenderbufferOES(int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBindTexture(int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBlendEquation(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBlendEquationSeparate(int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBlendFuncSeparate(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int glCheckFramebufferStatusOES(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glCopyTexImage2D(int,int,int,int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glDeleteFramebuffersOES(int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glDeleteFramebuffersOES(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glDeleteRenderbuffersOES(int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glDeleteRenderbuffersOES(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glEnable(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glFramebufferRenderbufferOES(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glFramebufferTexture2DOES(int,int,int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGenFramebuffersOES(int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGenFramebuffersOES(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGenRenderbuffersOES(int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGenRenderbuffersOES(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGenerateMipmapOES(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetFramebufferAttachmentParameterivOES(int,int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetFramebufferAttachmentParameterivOES(int,int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetIntegerv(int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetIntegerv(int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetRenderbufferParameterivOES(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetRenderbufferParameterivOES(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGenfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGenfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGeniv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGeniv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGenxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glGetTexGenxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: boolean glIsFramebufferOES(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: boolean glIsRenderbufferOES(int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glRenderbufferStorageOES(int,int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glStencilOp(int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvf(int,int,float)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvx(int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexEnvxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenf(int,int,float)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenfv(int,int,float[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenfv(int,int,java.nio.FloatBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGeni(int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGeniv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGeniv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenx(int,int,int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenxv(int,int,int[],int)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexGenxv(int,int,java.nio.IntBuffer)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: void glTexParameterf(int,int,float)>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_BLEND_DST_ALPHA>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_BLEND_DST_RGB>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_BLEND_EQUATION>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_BLEND_EQUATION_ALPHA>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_BLEND_EQUATION_RGB>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_BLEND_SRC_ALPHA>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_BLEND_SRC_RGB>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT0_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT10_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT11_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT12_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT13_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT14_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT15_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT1_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT2_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT3_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT4_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT5_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT6_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT7_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT8_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_COLOR_ATTACHMENT9_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_DECR_WRAP>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_DEPTH_ATTACHMENT_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_DEPTH_COMPONENT>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_DEPTH_COMPONENT16>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_DEPTH_COMPONENT24>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_DEPTH_COMPONENT32>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FRAMEBUFFER_BINDING_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FRAMEBUFFER_COMPLETE_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FRAMEBUFFER_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FRAMEBUFFER_UNSUPPORTED_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FUNC_ADD>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FUNC_REVERSE_SUBTRACT>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_FUNC_SUBTRACT>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_INCR_WRAP>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_INVALID_FRAMEBUFFER_OPERATION_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_MAX_COLOR_ATTACHMENTS_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_MAX_CUBE_MAP_TEXTURE_SIZE>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_MAX_RENDERBUFFER_SIZE_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_MIRRORED_REPEAT>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_NORMAL_MAP>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_REFLECTION_MAP>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RENDERBUFFER_ALPHA_SIZE_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RENDERBUFFER_BINDING_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RENDERBUFFER_BLUE_SIZE_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RENDERBUFFER_DEPTH_SIZE_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RENDERBUFFER_GREEN_SIZE_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RENDERBUFFER_HEIGHT_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RENDERBUFFER_INTERNAL_FORMAT_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RENDERBUFFER_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RENDERBUFFER_RED_SIZE_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RENDERBUFFER_STENCIL_SIZE_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RENDERBUFFER_WIDTH_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RGB565_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RGB5_A1>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RGB8>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RGBA4>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_RGBA8>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_STENCIL_ATTACHMENT_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_STENCIL_INDEX>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_STENCIL_INDEX1_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_STENCIL_INDEX4_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_STENCIL_INDEX8_OES>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_STR>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_TEXTURE_BINDING_CUBE_MAP>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_TEXTURE_CUBE_MAP>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_TEXTURE_CUBE_MAP_NEGATIVE_X>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_TEXTURE_CUBE_MAP_POSITIVE_X>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_TEXTURE_CUBE_MAP_POSITIVE_Y>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_TEXTURE_CUBE_MAP_POSITIVE_Z>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_TEXTURE_GEN_MODE>
<javax.microedition.khronos.opengles.GL11ExtensionPack: int GL_TEXTURE_GEN_STR>
org.apache.http.conn.ConnectTimeoutException
<org.apache.http.conn.ConnectTimeoutException: void <init>()>
<org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>
org.apache.http.conn.scheme.HostNameResolver
<org.apache.http.conn.scheme.HostNameResolver: java.net.InetAddress resolve(java.lang.String)>
org.apache.http.conn.scheme.LayeredSocketFactory
<org.apache.http.conn.scheme.LayeredSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
org.apache.http.conn.scheme.SocketFactory
<org.apache.http.conn.scheme.SocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>
<org.apache.http.conn.scheme.SocketFactory: java.net.Socket createSocket()>
<org.apache.http.conn.scheme.SocketFactory: boolean isSecure(java.net.Socket)>
org.apache.http.conn.ssl.AbstractVerifier
<org.apache.http.conn.ssl.AbstractVerifier: void <init>()>
<org.apache.http.conn.ssl.AbstractVerifier: boolean acceptableCountryWildcard(java.lang.String)>
<org.apache.http.conn.ssl.AbstractVerifier: int countDots(java.lang.String)>
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)>
<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
<org.apache.http.conn.ssl.AbstractVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[],boolean)>
org.apache.http.conn.ssl.AllowAllHostnameVerifier
<org.apache.http.conn.ssl.AllowAllHostnameVerifier: void <init>()>
<org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()>
<org.apache.http.conn.ssl.AllowAllHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
org.apache.http.conn.ssl.BrowserCompatHostnameVerifier
<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void <init>()>
<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: java.lang.String toString()>
<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
org.apache.http.conn.ssl.SSLSocketFactory
<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.scheme.HostNameResolver)>
<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.security.KeyStore,java.lang.String,java.security.KeyStore)>
<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.security.KeyStore,java.lang.String)>
<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.security.KeyStore)>
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket()>
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier()>
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
<org.apache.http.conn.ssl.SSLSocketFactory: boolean isSecure(java.net.Socket)>
<org.apache.http.conn.ssl.SSLSocketFactory: void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)>
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER>
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>
<org.apache.http.conn.ssl.SSLSocketFactory: java.lang.String SSL>
<org.apache.http.conn.ssl.SSLSocketFactory: java.lang.String SSLV2>
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER>
<org.apache.http.conn.ssl.SSLSocketFactory: java.lang.String TLS>
org.apache.http.conn.ssl.StrictHostnameVerifier
<org.apache.http.conn.ssl.StrictHostnameVerifier: void <init>()>
<org.apache.http.conn.ssl.StrictHostnameVerifier: java.lang.String toString()>
<org.apache.http.conn.ssl.StrictHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
org.apache.http.conn.ssl.X509HostnameVerifier
<org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>
<org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>
<org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
org.apache.http.params.CoreConnectionPNames
<org.apache.http.params.CoreConnectionPNames: java.lang.String CONNECTION_TIMEOUT>
<org.apache.http.params.CoreConnectionPNames: java.lang.String MAX_HEADER_COUNT>
<org.apache.http.params.CoreConnectionPNames: java.lang.String MAX_LINE_LENGTH>
<org.apache.http.params.CoreConnectionPNames: java.lang.String SOCKET_BUFFER_SIZE>
<org.apache.http.params.CoreConnectionPNames: java.lang.String SO_LINGER>
<org.apache.http.params.CoreConnectionPNames: java.lang.String SO_TIMEOUT>
<org.apache.http.params.CoreConnectionPNames: java.lang.String STALE_CONNECTION_CHECK>
<org.apache.http.params.CoreConnectionPNames: java.lang.String TCP_NODELAY>
org.apache.http.params.HttpConnectionParams
<org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)>
<org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>
org.apache.http.params.HttpParams
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
<org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
<org.apache.http.params.HttpParams: double getDoubleParameter(java.lang.String,double)>
<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
<org.apache.http.params.HttpParams: long getLongParameter(java.lang.String,long)>
<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
<org.apache.http.params.HttpParams: boolean isParameterFalse(java.lang.String)>
<org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
<org.apache.http.params.HttpParams: boolean removeParameter(java.lang.String)>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setDoubleParameter(java.lang.String,double)>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)>
<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
