android.adservices.GetTopicsRequest$Builder-><init>()
android.adservices.GetTopicsRequest$Builder->build()
android.adservices.GetTopicsRequest$Builder->setAttributionSource(android.content.AttributionSource)
android.adservices.GetTopicsRequest-><init>(android.content.AttributionSource)
android.adservices.GetTopicsRequest-><init>(android.content.AttributionSource,android.adservices.GetTopicsRequest-IA)
android.adservices.GetTopicsRequest-><init>(android.os.Parcel)
android.adservices.GetTopicsRequest-><init>(android.os.Parcel,android.adservices.GetTopicsRequest-IA)
android.adservices.GetTopicsRequest->describeContents()
android.adservices.GetTopicsRequest->getAttributionSource()
android.adservices.GetTopicsRequest->writeToParcel(android.os.Parcel,int)
android.adservices.GetTopicsResponse$Builder-><init>()
android.adservices.GetTopicsResponse$Builder->build()
android.adservices.GetTopicsResponse$Builder->setErrorMessage(java.lang.String)
android.adservices.GetTopicsResponse$Builder->setModelVersions(java.util.List)
android.adservices.GetTopicsResponse$Builder->setResultCode(int)
android.adservices.GetTopicsResponse$Builder->setTaxonomyVersions(java.util.List)
android.adservices.GetTopicsResponse$Builder->setTopics(java.util.List)
android.adservices.GetTopicsResponse-><init>(android.os.Parcel)
android.adservices.GetTopicsResponse-><init>(android.os.Parcel,android.adservices.GetTopicsResponse-IA)
android.adservices.GetTopicsResponse-><init>(int,java.lang.String,java.util.List,java.util.List,java.util.List)
android.adservices.GetTopicsResponse-><init>(int,java.lang.String,java.util.List,java.util.List,java.util.List,android.adservices.GetTopicsResponse-IA)
android.adservices.GetTopicsResponse->describeContents()
android.adservices.GetTopicsResponse->getErrorMessage()
android.adservices.GetTopicsResponse->getModelVersions()
android.adservices.GetTopicsResponse->getResultCode()
android.adservices.GetTopicsResponse->getTaxonomyVersions()
android.adservices.GetTopicsResponse->getTopics()
android.adservices.GetTopicsResponse->isSuccess()
android.adservices.GetTopicsResponse->readLongList(android.os.Parcel)
android.adservices.GetTopicsResponse->writeLongList(android.os.Parcel,java.util.List)
android.adservices.GetTopicsResponse->writeToParcel(android.os.Parcel,int)
android.adservices.IGetTopicsCallback$Default-><init>()
android.adservices.IGetTopicsCallback$Default->asBinder()
android.adservices.IGetTopicsCallback$Default->onResult(android.adservices.GetTopicsResponse)
android.adservices.IGetTopicsCallback$Stub$Proxy-><init>(android.os.IBinder)
android.adservices.IGetTopicsCallback$Stub$Proxy->asBinder()
android.adservices.IGetTopicsCallback$Stub$Proxy->getInterfaceDescriptor()
android.adservices.IGetTopicsCallback$Stub$Proxy->onResult(android.adservices.GetTopicsResponse)
android.adservices.IGetTopicsCallback$Stub-><init>()
android.adservices.IGetTopicsCallback$Stub->asBinder()
android.adservices.IGetTopicsCallback$Stub->asInterface(android.os.IBinder)
android.adservices.IGetTopicsCallback$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.adservices.IGetTopicsCallback->onResult(android.adservices.GetTopicsResponse)
android.adservices.ITopicsService$Default-><init>()
android.adservices.ITopicsService$Default->asBinder()
android.adservices.ITopicsService$Default->getTopics(android.adservices.GetTopicsRequest,android.adservices.IGetTopicsCallback)
android.adservices.ITopicsService$Stub$Proxy-><init>(android.os.IBinder)
android.adservices.ITopicsService$Stub$Proxy->asBinder()
android.adservices.ITopicsService$Stub$Proxy->getInterfaceDescriptor()
android.adservices.ITopicsService$Stub$Proxy->getTopics(android.adservices.GetTopicsRequest,android.adservices.IGetTopicsCallback)
android.adservices.ITopicsService$Stub-><init>()
android.adservices.ITopicsService$Stub->asBinder()
android.adservices.ITopicsService$Stub->asInterface(android.os.IBinder)
android.adservices.ITopicsService$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.adservices.ITopicsService->getTopics(android.adservices.GetTopicsRequest,android.adservices.IGetTopicsCallback)
android.adservices.Measurement$Default-><init>()
android.adservices.Measurement$Default->asBinder()
android.adservices.Measurement$Stub$Proxy-><init>(android.os.IBinder)
android.adservices.Measurement$Stub$Proxy->asBinder()
android.adservices.Measurement$Stub$Proxy->getInterfaceDescriptor()
android.adservices.Measurement$Stub-><init>()
android.adservices.Measurement$Stub->asBinder()
android.adservices.Measurement$Stub->asInterface(android.os.IBinder)
android.adservices.Measurement$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.adservices.Remarketing$Default-><init>()
android.adservices.Remarketing$Default->asBinder()
android.adservices.Remarketing$Stub$Proxy-><init>(android.os.IBinder)
android.adservices.Remarketing$Stub$Proxy->asBinder()
android.adservices.Remarketing$Stub$Proxy->getInterfaceDescriptor()
android.adservices.Remarketing$Stub-><init>()
android.adservices.Remarketing$Stub->asBinder()
android.adservices.Remarketing$Stub->asInterface(android.os.IBinder)
android.adservices.Remarketing$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.adservices.TopicsManager-><init>(android.content.Context)
android.adservices.TopicsManager->getService()
android.adservices.TopicsManager->getTopics(java.util.concurrent.Executor,android.os.OutcomeReceiver)
android.adservices.TopicsManager->unbindFromService()
android.app.ActivityManagerInternal->broadcastIntentInPackage(java.lang.String,java.lang.String,int,int,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,android.os.Bundle,boolean,boolean,int,boolean,android.os.IBinder,int[])
android.app.ActivityManagerInternal->startServiceInPackage(int,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int,boolean,android.os.IBinder)
android.app.ActivityThread$ApplicationThread->bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long)
android.app.AppOpsManager$NoteOpEvent->reinit(long,long,android.app.AppOpsManager$OpEventProxyInfo,android.util.Pools$Pool)
android.app.AppOpsManager->finishProxyOp(java.lang.String,android.content.AttributionSource,boolean)
android.app.AppOpsManager->startProxyOpNoThrow(int,android.content.AttributionSource,java.lang.String,boolean,int,int,int)
android.app.AppOpsManagerInternal$CheckOpsDelegate->finishProxyOperation(int,android.content.AttributionSource,boolean,com.android.internal.util.function.TriFunction)
android.app.AppOpsManagerInternal$CheckOpsDelegate->startProxyOperation(int,android.content.AttributionSource,boolean,boolean,java.lang.String,boolean,boolean,int,int,int,com.android.internal.util.function.DecFunction)
android.app.IApplicationThread$Default->bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long)
android.app.IApplicationThread$Stub$Proxy->bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long)
android.app.IApplicationThread->bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long)
android.app.IWallpaperManager$Default->getWallpaperInfo(int)
android.app.IWallpaperManager$Default->getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)
android.app.IWallpaperManager$Default->setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)
android.app.IWallpaperManager$Stub$Proxy->getWallpaperInfo(int)
android.app.IWallpaperManager$Stub$Proxy->getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)
android.app.IWallpaperManager$Stub$Proxy->setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)
android.app.IWallpaperManager->getWallpaperInfo(int)
android.app.IWallpaperManager->getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)
android.app.IWallpaperManager->setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)
android.app.Notification$Builder->setHeaderlessVerticalMargins(android.widget.RemoteViews,android.app.Notification$StandardTemplateParams,boolean)
android.app.appsearch.GenericDocument->getRawPropertyFromRawDocument(java.lang.String,android.os.Bundle)
android.app.appsearch.aidl.AppSearchBatchResultParcel-><init>(android.os.Parcel,android.app.appsearch.aidl.AppSearchBatchResultParcel-IA)
android.app.appsearch.aidl.AppSearchResultParcel-><init>(android.os.Parcel,android.app.appsearch.aidl.AppSearchResultParcel-IA)
android.app.appsearch.aidl.DocumentsParcel-><init>(android.os.Parcel,android.app.appsearch.aidl.DocumentsParcel-IA)
android.app.appsearch.aidl.IAppSearchManager$Default->getNextPage(android.content.AttributionSource,long,android.os.UserHandle,android.app.appsearch.aidl.IAppSearchResultCallback)
android.app.appsearch.aidl.IAppSearchManager$Stub$Proxy->getNextPage(android.content.AttributionSource,long,android.os.UserHandle,android.app.appsearch.aidl.IAppSearchResultCallback)
android.app.appsearch.aidl.IAppSearchManager->getNextPage(android.content.AttributionSource,long,android.os.UserHandle,android.app.appsearch.aidl.IAppSearchResultCallback)
android.app.appsearch.util.SchemaMigrationUtil->checkDeletedAndIncompatible(java.util.Set,java.util.Set)
android.app.appsearch.util.SchemaMigrationUtil->checkDeletedAndIncompatibleAfterMigration(android.app.appsearch.SetSchemaResponse,java.util.Set)
android.app.sdksandbox.IRemoteSdkCallback$Default-><init>()
android.app.sdksandbox.IRemoteSdkCallback$Default->asBinder()
android.app.sdksandbox.IRemoteSdkCallback$Default->onLoadSdkFailure(int,java.lang.String)
android.app.sdksandbox.IRemoteSdkCallback$Default->onLoadSdkSuccess(android.os.IBinder,android.os.Bundle)
android.app.sdksandbox.IRemoteSdkCallback$Default->onSurfacePackageError(int,java.lang.String)
android.app.sdksandbox.IRemoteSdkCallback$Default->onSurfacePackageReady(android.view.SurfaceControlViewHost$SurfacePackage,int,android.os.Bundle)
android.app.sdksandbox.IRemoteSdkCallback$Stub$Proxy-><init>(android.os.IBinder)
android.app.sdksandbox.IRemoteSdkCallback$Stub$Proxy->asBinder()
android.app.sdksandbox.IRemoteSdkCallback$Stub$Proxy->getInterfaceDescriptor()
android.app.sdksandbox.IRemoteSdkCallback$Stub$Proxy->onLoadSdkFailure(int,java.lang.String)
android.app.sdksandbox.IRemoteSdkCallback$Stub$Proxy->onLoadSdkSuccess(android.os.IBinder,android.os.Bundle)
android.app.sdksandbox.IRemoteSdkCallback$Stub$Proxy->onSurfacePackageError(int,java.lang.String)
android.app.sdksandbox.IRemoteSdkCallback$Stub$Proxy->onSurfacePackageReady(android.view.SurfaceControlViewHost$SurfacePackage,int,android.os.Bundle)
android.app.sdksandbox.IRemoteSdkCallback$Stub-><init>()
android.app.sdksandbox.IRemoteSdkCallback$Stub->asBinder()
android.app.sdksandbox.IRemoteSdkCallback$Stub->asInterface(android.os.IBinder)
android.app.sdksandbox.IRemoteSdkCallback$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.app.sdksandbox.IRemoteSdkCallback->onLoadSdkFailure(int,java.lang.String)
android.app.sdksandbox.IRemoteSdkCallback->onLoadSdkSuccess(android.os.IBinder,android.os.Bundle)
android.app.sdksandbox.IRemoteSdkCallback->onSurfacePackageError(int,java.lang.String)
android.app.sdksandbox.IRemoteSdkCallback->onSurfacePackageReady(android.view.SurfaceControlViewHost$SurfacePackage,int,android.os.Bundle)
android.app.sdksandbox.ISdkSandboxManager$Default->loadSdk(java.lang.String,java.lang.String,android.os.Bundle,android.app.sdksandbox.IRemoteSdkCallback)
android.app.sdksandbox.ISdkSandboxManager$Default->requestSurfacePackage(android.os.IBinder,android.os.IBinder,int,android.os.Bundle)
android.app.sdksandbox.ISdkSandboxManager$Default->sendData(int,android.os.Bundle)
android.app.sdksandbox.ISdkSandboxManager$Stub$Proxy->loadSdk(java.lang.String,java.lang.String,android.os.Bundle,android.app.sdksandbox.IRemoteSdkCallback)
android.app.sdksandbox.ISdkSandboxManager$Stub$Proxy->requestSurfacePackage(android.os.IBinder,android.os.IBinder,int,android.os.Bundle)
android.app.sdksandbox.ISdkSandboxManager$Stub$Proxy->sendData(int,android.os.Bundle)
android.app.sdksandbox.ISdkSandboxManager->loadSdk(java.lang.String,java.lang.String,android.os.Bundle,android.app.sdksandbox.IRemoteSdkCallback)
android.app.sdksandbox.ISdkSandboxManager->requestSurfacePackage(android.os.IBinder,android.os.IBinder,int,android.os.Bundle)
android.app.sdksandbox.ISdkSandboxManager->sendData(int,android.os.Bundle)
android.app.sdksandbox.SandboxedSdkContext-><init>(android.content.Context,android.content.pm.ApplicationInfo)
android.app.sdksandbox.SandboxedSdkProvider$InitSdkCallback->onInitSdkError(java.lang.String)
android.app.sdksandbox.SandboxedSdkProvider$InitSdkCallback->onInitSdkFinished(android.os.Bundle)
android.app.sdksandbox.SandboxedSdkProvider->getView(android.content.Context,android.os.Bundle)
android.app.sdksandbox.SandboxedSdkProvider->initSdk(android.app.sdksandbox.SandboxedSdkContext,android.os.Bundle,java.util.concurrent.Executor,android.app.sdksandbox.SandboxedSdkProvider$InitSdkCallback)
android.app.sdksandbox.SandboxedSdkProvider->onExtraDataReceived(android.os.Bundle)
android.app.sdksandbox.SdkSandboxManager->loadSdk(java.lang.String,android.os.Bundle,android.app.sdksandbox.IRemoteSdkCallback)
android.app.sdksandbox.SdkSandboxManager->requestSurfacePackage(android.os.IBinder,android.os.IBinder,int,android.os.Bundle)
android.app.sdksandbox.SdkSandboxManager->sendData(int,android.os.Bundle)
android.bluetooth.IBluetoothGatt$Default->clientConnect(int,java.lang.String,boolean,int,boolean,int,android.content.AttributionSource,com.android.bluetooth.x.com.android.modules.utils.SynchronousResultReceiver)
android.bluetooth.IBluetoothGatt$Default->registerScanner(android.bluetooth.le.IScannerCallback,android.os.WorkSource,android.content.AttributionSource,com.android.bluetooth.x.com.android.modules.utils.SynchronousResultReceiver)
android.bluetooth.IBluetoothGatt$Default->startScanForIntent(android.app.PendingIntent,android.bluetooth.le.ScanSettings,java.util.List,android.content.AttributionSource,com.android.bluetooth.x.com.android.modules.utils.SynchronousResultReceiver)
android.bluetooth.IBluetoothGatt$Stub$Proxy->clientConnect(int,java.lang.String,boolean,int,boolean,int,android.content.AttributionSource,com.android.bluetooth.x.com.android.modules.utils.SynchronousResultReceiver)
android.bluetooth.IBluetoothGatt$Stub$Proxy->registerScanner(android.bluetooth.le.IScannerCallback,android.os.WorkSource,android.content.AttributionSource,com.android.bluetooth.x.com.android.modules.utils.SynchronousResultReceiver)
android.bluetooth.IBluetoothGatt$Stub$Proxy->startScanForIntent(android.app.PendingIntent,android.bluetooth.le.ScanSettings,java.util.List,android.content.AttributionSource,com.android.bluetooth.x.com.android.modules.utils.SynchronousResultReceiver)
android.bluetooth.IBluetoothGatt->clientConnect(int,java.lang.String,boolean,int,boolean,int,android.content.AttributionSource,com.android.bluetooth.x.com.android.modules.utils.SynchronousResultReceiver)
android.bluetooth.IBluetoothGatt->registerScanner(android.bluetooth.le.IScannerCallback,android.os.WorkSource,android.content.AttributionSource,com.android.bluetooth.x.com.android.modules.utils.SynchronousResultReceiver)
android.bluetooth.IBluetoothGatt->startScanForIntent(android.app.PendingIntent,android.bluetooth.le.ScanSettings,java.util.List,android.content.AttributionSource,com.android.bluetooth.x.com.android.modules.utils.SynchronousResultReceiver)
android.bluetooth.IBluetoothManager$Default->disableBle(android.content.AttributionSource,android.os.IBinder)
android.bluetooth.IBluetoothManager$Default->enableBle(android.content.AttributionSource,android.os.IBinder)
android.bluetooth.IBluetoothManager$Default->onFactoryReset(android.content.AttributionSource)
android.bluetooth.IBluetoothManager$Stub$Proxy->disableBle(android.content.AttributionSource,android.os.IBinder)
android.bluetooth.IBluetoothManager$Stub$Proxy->enableBle(android.content.AttributionSource,android.os.IBinder)
android.bluetooth.IBluetoothManager$Stub$Proxy->onFactoryReset(android.content.AttributionSource)
android.bluetooth.IBluetoothManager->disableBle(android.content.AttributionSource,android.os.IBinder)
android.bluetooth.IBluetoothManager->enableBle(android.content.AttributionSource,android.os.IBinder)
android.bluetooth.IBluetoothManager->onFactoryReset(android.content.AttributionSource)
android.bluetooth.IBluetoothVolumeControl$Default->setVolumeGroup(int,int,android.content.AttributionSource,com.android.bluetooth.x.com.android.modules.utils.SynchronousResultReceiver)
android.bluetooth.IBluetoothVolumeControl$Stub$Proxy->setVolumeGroup(int,int,android.content.AttributionSource,com.android.bluetooth.x.com.android.modules.utils.SynchronousResultReceiver)
android.bluetooth.IBluetoothVolumeControl->setVolumeGroup(int,int,android.content.AttributionSource,com.android.bluetooth.x.com.android.modules.utils.SynchronousResultReceiver)
android.bluetooth.le.AdvertiseData-><init>(java.util.List,java.util.List,java.util.List,android.util.SparseArray,java.util.Map,boolean,boolean)
android.bluetooth.le.AdvertiseData-><init>(java.util.List,java.util.List,java.util.List,android.util.SparseArray,java.util.Map,boolean,boolean,android.bluetooth.le.AdvertiseData-IA)
android.bluetooth.le.AdvertiseSettings-><init>(int,int,boolean,int,int)
android.bluetooth.le.AdvertiseSettings-><init>(int,int,boolean,int,int,android.bluetooth.le.AdvertiseSettings-IA)
android.bluetooth.le.AdvertisingSetParameters-><init>(boolean,boolean,boolean,boolean,boolean,int,int,int,int,int)
android.bluetooth.le.AdvertisingSetParameters-><init>(boolean,boolean,boolean,boolean,boolean,int,int,int,int,int,android.bluetooth.le.AdvertisingSetParameters-IA)
android.bluetooth.le.ScanFilter-><init>(java.lang.String,java.lang.String,android.os.ParcelUuid,android.os.ParcelUuid,android.os.ParcelUuid,android.os.ParcelUuid,android.os.ParcelUuid,byte[],byte[],int,byte[],byte[],int,byte[],int,byte[],byte[])
android.bluetooth.le.ScanFilter-><init>(java.lang.String,java.lang.String,android.os.ParcelUuid,android.os.ParcelUuid,android.os.ParcelUuid,android.os.ParcelUuid,android.os.ParcelUuid,byte[],byte[],int,byte[],byte[],int,byte[],int,byte[],byte[],android.bluetooth.le.ScanFilter-IA)
android.bluetooth.le.ScanRecord-><init>(java.util.List,java.util.List,android.util.SparseArray,java.util.Map,int,int,java.lang.String,java.util.HashMap,byte[])
android.bluetooth.le.ScanSettings-><init>(int,int,int,long,int,int,boolean,int)
android.bluetooth.le.ScanSettings-><init>(int,int,int,long,int,int,boolean,int,android.bluetooth.le.ScanSettings-IA)
android.content.res.StringBlock->applyStyles(java.lang.String,int[],android.content.res.StringBlock$StyleIDs)
android.database.DefaultDatabaseErrorHandler->deleteDatabaseFile(java.lang.String)
android.database.sqlite.SQLiteConnection$Operation-><init>(android.database.sqlite.SQLiteConnection$Operation-IA)
android.database.sqlite.SQLiteConnection$OperationLog-><init>(android.database.sqlite.SQLiteConnectionPool)
android.database.sqlite.SQLiteConnectionPool-><init>(android.database.sqlite.SQLiteDatabaseConfiguration)
android.database.sqlite.SQLiteConnectionPool->open(android.database.sqlite.SQLiteDatabaseConfiguration)
android.database.sqlite.SQLiteDatabase$OpenParams-><init>(int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler,int,int,long,java.lang.String,java.lang.String)
android.database.sqlite.SQLiteDatabase$OpenParams-><init>(int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler,int,int,long,java.lang.String,java.lang.String,android.database.sqlite.SQLiteDatabase$OpenParams-IA)
android.database.sqlite.SQLiteDatabase-><init>(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler,int,int,long,java.lang.String,java.lang.String)
android.drm.DrmManagerClient->getErrorType(int)
android.graphics.drawable.GradientDrawable->updateGradientDrawableSize(android.content.res.TypedArray)
android.graphics.drawable.RippleDrawable->setBackgroundActive(boolean,boolean,boolean)
android.graphics.drawable.VectorDrawable->updateStateFromTypedArray(android.content.res.TypedArray)
android.hardware.camera2.CameraManager$FoldStateListener-><init>(android.hardware.camera2.CameraManager,android.content.Context)
android.hardware.display.WifiDisplay-><init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)
android.hardware.input.IInputManager$Default->monitorGestureInput(android.os.IBinder,java.lang.String,int)
android.hardware.input.IInputManager$Stub$Proxy->monitorGestureInput(android.os.IBinder,java.lang.String,int)
android.hardware.input.IInputManager->monitorGestureInput(android.os.IBinder,java.lang.String,int)
android.inputmethodservice.SoftInputWindow-><init>(android.inputmethodservice.InputMethodService,int,android.view.KeyEvent$DispatcherState)
android.media.ExifInterface->getHeifAttributes(android.media.ExifInterface$ByteOrderedDataInputStream)
android.media.ExifInterface->loadAttributes(java.io.InputStream)
android.media.RemoteDisplay$Listener->onDisplayConnected(android.view.Surface,int,int,int,int)
android.media.RemoteDisplay->notifyDisplayConnected(android.view.Surface,int,int,int,int)
android.media.TtmlCue-><init>(long,long,java.lang.String,java.lang.String)
android.media.session.ISession$Default->setMediaButtonReceiver(android.app.PendingIntent,java.lang.String)
android.media.session.ISession$Stub$Proxy->setMediaButtonReceiver(android.app.PendingIntent,java.lang.String)
android.media.session.ISession->setMediaButtonReceiver(android.app.PendingIntent,java.lang.String)
android.mtp.MtpStorageManager->getChildren(android.mtp.MtpStorageManager$MtpObject)
android.mtp.MtpStorageManager->getObjects(int,int,int)
android.mtp.MtpStorageManager->getObjects(java.util.List,android.mtp.MtpStorageManager$MtpObject,int,boolean)
android.nearby.NearbyDeviceParcelable-><init>(int,java.lang.String,int,int,int,int,android.nearby.PublicCredential,java.lang.String,java.lang.String,byte[],byte[])
android.nearby.NearbyDeviceParcelable-><init>(int,java.lang.String,int,int,int,int,android.nearby.PublicCredential,java.lang.String,java.lang.String,byte[],byte[],android.nearby.NearbyDeviceParcelable-IA)
android.net.ConnectionInfo-><init>(int,java.net.InetSocketAddress,java.net.InetSocketAddress)
android.net.ConnectionInfo->describeContents()
android.net.ConnectionInfo->writeToParcel(android.os.Parcel,int)
android.net.ConnectivityManager$CallbackHandler-><init>(android.net.ConnectivityManager,android.os.Handler)
android.net.ConnectivityManager$CallbackHandler-><init>(android.net.ConnectivityManager,android.os.Looper)
android.net.ConnectivityManager->offerNetwork(int,android.net.NetworkScore,android.net.NetworkCapabilities,android.net.INetworkOfferCallback)
android.net.ConnectivityManager->unofferNetwork(android.net.INetworkOfferCallback)
android.net.ConnectivityResources-><init>(android.content.Context)
android.net.ConnectivityResources->get()
android.net.ConnectivityResources->getResourcesContext()
android.net.ConnectivityResources->setResourcesContextForTest(android.content.Context)
android.net.DnsResolverServiceManager-><init>(android.os.IBinder)
android.net.DnsResolverServiceManager->getService()
android.net.EthernetManager$TetheredInterfaceRequest-><init>(android.net.IEthernetManager,android.net.ITetheredInterfaceCallback)
android.net.EthernetManager$TetheredInterfaceRequest-><init>(android.net.IEthernetManager,android.net.ITetheredInterfaceCallback,android.net.EthernetManager$TetheredInterfaceRequest-IA)
android.net.IConnectivityManager$Default->getConnectionOwnerUid(android.net.ConnectionInfo)
android.net.IConnectivityManager$Default->offerNetwork(int,android.net.NetworkScore,android.net.NetworkCapabilities,android.net.INetworkOfferCallback)
android.net.IConnectivityManager$Default->registerNetworkActivityListener(android.net.INetworkActivityListener)
android.net.IConnectivityManager$Default->registerQosSocketCallback(android.net.QosSocketInfo,android.net.IQosCallback)
android.net.IConnectivityManager$Default->setOemNetworkPreference(android.net.OemNetworkPreferences,android.net.IOnCompleteListener)
android.net.IConnectivityManager$Default->setProfileNetworkPreferences(android.os.UserHandle,java.util.List,android.net.IOnCompleteListener)
android.net.IConnectivityManager$Default->startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)
android.net.IConnectivityManager$Default->startNattKeepaliveWithFd(android.net.Network,android.os.ParcelFileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)
android.net.IConnectivityManager$Default->startTcpKeepalive(android.net.Network,android.os.ParcelFileDescriptor,int,android.net.ISocketKeepaliveCallback)
android.net.IConnectivityManager$Default->unofferNetwork(android.net.INetworkOfferCallback)
android.net.IConnectivityManager$Default->unregisterNetworkActivityListener(android.net.INetworkActivityListener)
android.net.IConnectivityManager$Default->unregisterQosCallback(android.net.IQosCallback)
android.net.IConnectivityManager$Stub$Proxy->getConnectionOwnerUid(android.net.ConnectionInfo)
android.net.IConnectivityManager$Stub$Proxy->offerNetwork(int,android.net.NetworkScore,android.net.NetworkCapabilities,android.net.INetworkOfferCallback)
android.net.IConnectivityManager$Stub$Proxy->registerNetworkActivityListener(android.net.INetworkActivityListener)
android.net.IConnectivityManager$Stub$Proxy->registerQosSocketCallback(android.net.QosSocketInfo,android.net.IQosCallback)
android.net.IConnectivityManager$Stub$Proxy->setOemNetworkPreference(android.net.OemNetworkPreferences,android.net.IOnCompleteListener)
android.net.IConnectivityManager$Stub$Proxy->setProfileNetworkPreferences(android.os.UserHandle,java.util.List,android.net.IOnCompleteListener)
android.net.IConnectivityManager$Stub$Proxy->startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)
android.net.IConnectivityManager$Stub$Proxy->startNattKeepaliveWithFd(android.net.Network,android.os.ParcelFileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)
android.net.IConnectivityManager$Stub$Proxy->startTcpKeepalive(android.net.Network,android.os.ParcelFileDescriptor,int,android.net.ISocketKeepaliveCallback)
android.net.IConnectivityManager$Stub$Proxy->unofferNetwork(android.net.INetworkOfferCallback)
android.net.IConnectivityManager$Stub$Proxy->unregisterNetworkActivityListener(android.net.INetworkActivityListener)
android.net.IConnectivityManager$Stub$Proxy->unregisterQosCallback(android.net.IQosCallback)
android.net.IConnectivityManager->getConnectionOwnerUid(android.net.ConnectionInfo)
android.net.IConnectivityManager->offerNetwork(int,android.net.NetworkScore,android.net.NetworkCapabilities,android.net.INetworkOfferCallback)
android.net.IConnectivityManager->registerNetworkActivityListener(android.net.INetworkActivityListener)
android.net.IConnectivityManager->registerQosSocketCallback(android.net.QosSocketInfo,android.net.IQosCallback)
android.net.IConnectivityManager->setOemNetworkPreference(android.net.OemNetworkPreferences,android.net.IOnCompleteListener)
android.net.IConnectivityManager->setProfileNetworkPreferences(android.os.UserHandle,java.util.List,android.net.IOnCompleteListener)
android.net.IConnectivityManager->startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)
android.net.IConnectivityManager->startNattKeepaliveWithFd(android.net.Network,android.os.ParcelFileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)
android.net.IConnectivityManager->startTcpKeepalive(android.net.Network,android.os.ParcelFileDescriptor,int,android.net.ISocketKeepaliveCallback)
android.net.IConnectivityManager->unofferNetwork(android.net.INetworkOfferCallback)
android.net.IConnectivityManager->unregisterNetworkActivityListener(android.net.INetworkActivityListener)
android.net.IConnectivityManager->unregisterQosCallback(android.net.IQosCallback)
android.net.IEthernetManager$Default->connectNetwork(java.lang.String,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager$Default->disconnectNetwork(java.lang.String,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager$Default->releaseTetheredInterface(android.net.ITetheredInterfaceCallback)
android.net.IEthernetManager$Default->requestTetheredInterface(android.net.ITetheredInterfaceCallback)
android.net.IEthernetManager$Default->updateConfiguration(java.lang.String,android.net.EthernetNetworkUpdateRequest,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager$Stub$Proxy->connectNetwork(java.lang.String,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager$Stub$Proxy->disconnectNetwork(java.lang.String,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager$Stub$Proxy->releaseTetheredInterface(android.net.ITetheredInterfaceCallback)
android.net.IEthernetManager$Stub$Proxy->requestTetheredInterface(android.net.ITetheredInterfaceCallback)
android.net.IEthernetManager$Stub$Proxy->updateConfiguration(java.lang.String,android.net.EthernetNetworkUpdateRequest,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager->connectNetwork(java.lang.String,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager->disconnectNetwork(java.lang.String,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager->releaseTetheredInterface(android.net.ITetheredInterfaceCallback)
android.net.IEthernetManager->requestTetheredInterface(android.net.ITetheredInterfaceCallback)
android.net.IEthernetManager->updateConfiguration(java.lang.String,android.net.EthernetNetworkUpdateRequest,android.net.INetworkInterfaceOutcomeReceiver)
android.net.INetworkActivityListener$Default-><init>()
android.net.INetworkActivityListener$Default->asBinder()
android.net.INetworkActivityListener$Default->onNetworkActive()
android.net.INetworkActivityListener$Stub$Proxy-><init>(android.os.IBinder)
android.net.INetworkActivityListener$Stub$Proxy->asBinder()
android.net.INetworkActivityListener$Stub$Proxy->getInterfaceDescriptor()
android.net.INetworkActivityListener$Stub$Proxy->onNetworkActive()
android.net.INetworkActivityListener$Stub-><init>()
android.net.INetworkActivityListener$Stub->asBinder()
android.net.INetworkActivityListener$Stub->asInterface(android.os.IBinder)
android.net.INetworkActivityListener$Stub->getDefaultTransactionName(int)
android.net.INetworkActivityListener$Stub->getMaxTransactionId()
android.net.INetworkActivityListener$Stub->getTransactionName(int)
android.net.INetworkActivityListener$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.INetworkActivityListener->onNetworkActive()
android.net.INetworkAgent$Default->onQosFilterCallbackRegistered(int,android.net.QosFilterParcelable)
android.net.INetworkAgent$Stub$Proxy->onQosFilterCallbackRegistered(int,android.net.QosFilterParcelable)
android.net.INetworkAgent->onQosFilterCallbackRegistered(int,android.net.QosFilterParcelable)
android.net.INetworkInterfaceOutcomeReceiver$Default-><init>()
android.net.INetworkInterfaceOutcomeReceiver$Default->asBinder()
android.net.INetworkInterfaceOutcomeReceiver$Default->onError(android.net.EthernetNetworkManagementException)
android.net.INetworkInterfaceOutcomeReceiver$Default->onResult(java.lang.String)
android.net.INetworkInterfaceOutcomeReceiver$Stub$Proxy-><init>(android.os.IBinder)
android.net.INetworkInterfaceOutcomeReceiver$Stub$Proxy->asBinder()
android.net.INetworkInterfaceOutcomeReceiver$Stub$Proxy->getInterfaceDescriptor()
android.net.INetworkInterfaceOutcomeReceiver$Stub$Proxy->onError(android.net.EthernetNetworkManagementException)
android.net.INetworkInterfaceOutcomeReceiver$Stub$Proxy->onResult(java.lang.String)
android.net.INetworkInterfaceOutcomeReceiver$Stub-><init>()
android.net.INetworkInterfaceOutcomeReceiver$Stub->asBinder()
android.net.INetworkInterfaceOutcomeReceiver$Stub->asInterface(android.os.IBinder)
android.net.INetworkInterfaceOutcomeReceiver$Stub->getDefaultTransactionName(int)
android.net.INetworkInterfaceOutcomeReceiver$Stub->getMaxTransactionId()
android.net.INetworkInterfaceOutcomeReceiver$Stub->getTransactionName(int)
android.net.INetworkInterfaceOutcomeReceiver$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.INetworkInterfaceOutcomeReceiver->onError(android.net.EthernetNetworkManagementException)
android.net.INetworkInterfaceOutcomeReceiver->onResult(java.lang.String)
android.net.INetworkOfferCallback$Default-><init>()
android.net.INetworkOfferCallback$Default->asBinder()
android.net.INetworkOfferCallback$Default->onNetworkNeeded(android.net.NetworkRequest)
android.net.INetworkOfferCallback$Default->onNetworkUnneeded(android.net.NetworkRequest)
android.net.INetworkOfferCallback$Stub$Proxy-><init>(android.os.IBinder)
android.net.INetworkOfferCallback$Stub$Proxy->asBinder()
android.net.INetworkOfferCallback$Stub$Proxy->getInterfaceDescriptor()
android.net.INetworkOfferCallback$Stub$Proxy->onNetworkNeeded(android.net.NetworkRequest)
android.net.INetworkOfferCallback$Stub$Proxy->onNetworkUnneeded(android.net.NetworkRequest)
android.net.INetworkOfferCallback$Stub-><init>()
android.net.INetworkOfferCallback$Stub->asBinder()
android.net.INetworkOfferCallback$Stub->asInterface(android.os.IBinder)
android.net.INetworkOfferCallback$Stub->getDefaultTransactionName(int)
android.net.INetworkOfferCallback$Stub->getMaxTransactionId()
android.net.INetworkOfferCallback$Stub->getTransactionName(int)
android.net.INetworkOfferCallback$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.INetworkOfferCallback->onNetworkNeeded(android.net.NetworkRequest)
android.net.INetworkOfferCallback->onNetworkUnneeded(android.net.NetworkRequest)
android.net.INetworkStatsService$Default->registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.net.netstats.IUsageCallback)
android.net.INetworkStatsService$Stub$Proxy->registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.net.netstats.IUsageCallback)
android.net.INetworkStatsService->registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.net.netstats.IUsageCallback)
android.net.IOnCompleteListener$Default-><init>()
android.net.IOnCompleteListener$Default->asBinder()
android.net.IOnCompleteListener$Default->onComplete()
android.net.IOnCompleteListener$Stub$Proxy-><init>(android.os.IBinder)
android.net.IOnCompleteListener$Stub$Proxy->asBinder()
android.net.IOnCompleteListener$Stub$Proxy->getInterfaceDescriptor()
android.net.IOnCompleteListener$Stub$Proxy->onComplete()
android.net.IOnCompleteListener$Stub-><init>()
android.net.IOnCompleteListener$Stub->asBinder()
android.net.IOnCompleteListener$Stub->asInterface(android.os.IBinder)
android.net.IOnCompleteListener$Stub->getDefaultTransactionName(int)
android.net.IOnCompleteListener$Stub->getMaxTransactionId()
android.net.IOnCompleteListener$Stub->getTransactionName(int)
android.net.IOnCompleteListener$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.IOnCompleteListener->onComplete()
android.net.IQosCallback$Default-><init>()
android.net.IQosCallback$Default->asBinder()
android.net.IQosCallback$Default->onError(int)
android.net.IQosCallback$Default->onNrQosSessionAvailable(android.net.QosSession,android.telephony.data.NrQosSessionAttributes)
android.net.IQosCallback$Default->onQosEpsBearerSessionAvailable(android.net.QosSession,android.telephony.data.EpsBearerQosSessionAttributes)
android.net.IQosCallback$Default->onQosSessionLost(android.net.QosSession)
android.net.IQosCallback$Stub$Proxy-><init>(android.os.IBinder)
android.net.IQosCallback$Stub$Proxy->asBinder()
android.net.IQosCallback$Stub$Proxy->getInterfaceDescriptor()
android.net.IQosCallback$Stub$Proxy->onError(int)
android.net.IQosCallback$Stub$Proxy->onNrQosSessionAvailable(android.net.QosSession,android.telephony.data.NrQosSessionAttributes)
android.net.IQosCallback$Stub$Proxy->onQosEpsBearerSessionAvailable(android.net.QosSession,android.telephony.data.EpsBearerQosSessionAttributes)
android.net.IQosCallback$Stub$Proxy->onQosSessionLost(android.net.QosSession)
android.net.IQosCallback$Stub-><init>()
android.net.IQosCallback$Stub->asBinder()
android.net.IQosCallback$Stub->asInterface(android.os.IBinder)
android.net.IQosCallback$Stub->getDefaultTransactionName(int)
android.net.IQosCallback$Stub->getMaxTransactionId()
android.net.IQosCallback$Stub->getTransactionName(int)
android.net.IQosCallback$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.IQosCallback->onError(int)
android.net.IQosCallback->onNrQosSessionAvailable(android.net.QosSession,android.telephony.data.NrQosSessionAttributes)
android.net.IQosCallback->onQosEpsBearerSessionAvailable(android.net.QosSession,android.telephony.data.EpsBearerQosSessionAttributes)
android.net.IQosCallback->onQosSessionLost(android.net.QosSession)
android.net.ISocketKeepaliveCallback$Default-><init>()
android.net.ISocketKeepaliveCallback$Default->asBinder()
android.net.ISocketKeepaliveCallback$Default->onDataReceived()
android.net.ISocketKeepaliveCallback$Default->onError(int)
android.net.ISocketKeepaliveCallback$Default->onStarted(int)
android.net.ISocketKeepaliveCallback$Default->onStopped()
android.net.ISocketKeepaliveCallback$Stub$Proxy-><init>(android.os.IBinder)
android.net.ISocketKeepaliveCallback$Stub$Proxy->asBinder()
android.net.ISocketKeepaliveCallback$Stub$Proxy->getInterfaceDescriptor()
android.net.ISocketKeepaliveCallback$Stub$Proxy->onDataReceived()
android.net.ISocketKeepaliveCallback$Stub$Proxy->onError(int)
android.net.ISocketKeepaliveCallback$Stub$Proxy->onStarted(int)
android.net.ISocketKeepaliveCallback$Stub$Proxy->onStopped()
android.net.ISocketKeepaliveCallback$Stub-><init>()
android.net.ISocketKeepaliveCallback$Stub->asBinder()
android.net.ISocketKeepaliveCallback$Stub->asInterface(android.os.IBinder)
android.net.ISocketKeepaliveCallback$Stub->getDefaultTransactionName(int)
android.net.ISocketKeepaliveCallback$Stub->getMaxTransactionId()
android.net.ISocketKeepaliveCallback$Stub->getTransactionName(int)
android.net.ISocketKeepaliveCallback$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.ISocketKeepaliveCallback->onDataReceived()
android.net.ISocketKeepaliveCallback->onError(int)
android.net.ISocketKeepaliveCallback->onStarted(int)
android.net.ISocketKeepaliveCallback->onStopped()
android.net.ITestNetworkManager$Default-><init>()
android.net.ITestNetworkManager$Default->asBinder()
android.net.ITestNetworkManager$Default->createInterface(boolean,boolean,android.net.LinkAddress[],java.lang.String)
android.net.ITestNetworkManager$Default->setupTestNetwork(java.lang.String,android.net.LinkProperties,boolean,int[],android.os.IBinder)
android.net.ITestNetworkManager$Default->teardownTestNetwork(int)
android.net.ITestNetworkManager$Stub$Proxy-><init>(android.os.IBinder)
android.net.ITestNetworkManager$Stub$Proxy->asBinder()
android.net.ITestNetworkManager$Stub$Proxy->createInterface(boolean,boolean,android.net.LinkAddress[],java.lang.String)
android.net.ITestNetworkManager$Stub$Proxy->getInterfaceDescriptor()
android.net.ITestNetworkManager$Stub$Proxy->setupTestNetwork(java.lang.String,android.net.LinkProperties,boolean,int[],android.os.IBinder)
android.net.ITestNetworkManager$Stub$Proxy->teardownTestNetwork(int)
android.net.ITestNetworkManager$Stub-><init>()
android.net.ITestNetworkManager$Stub->asBinder()
android.net.ITestNetworkManager$Stub->asInterface(android.os.IBinder)
android.net.ITestNetworkManager$Stub->getDefaultTransactionName(int)
android.net.ITestNetworkManager$Stub->getMaxTransactionId()
android.net.ITestNetworkManager$Stub->getTransactionName(int)
android.net.ITestNetworkManager$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.ITestNetworkManager->createInterface(boolean,boolean,android.net.LinkAddress[],java.lang.String)
android.net.ITestNetworkManager->setupTestNetwork(java.lang.String,android.net.LinkProperties,boolean,int[],android.os.IBinder)
android.net.ITestNetworkManager->teardownTestNetwork(int)
android.net.ITetheredInterfaceCallback$Default-><init>()
android.net.ITetheredInterfaceCallback$Default->asBinder()
android.net.ITetheredInterfaceCallback$Default->onAvailable(java.lang.String)
android.net.ITetheredInterfaceCallback$Default->onUnavailable()
android.net.ITetheredInterfaceCallback$Stub$Proxy-><init>(android.os.IBinder)
android.net.ITetheredInterfaceCallback$Stub$Proxy->asBinder()
android.net.ITetheredInterfaceCallback$Stub$Proxy->getInterfaceDescriptor()
android.net.ITetheredInterfaceCallback$Stub$Proxy->onAvailable(java.lang.String)
android.net.ITetheredInterfaceCallback$Stub$Proxy->onUnavailable()
android.net.ITetheredInterfaceCallback$Stub-><init>()
android.net.ITetheredInterfaceCallback$Stub->asBinder()
android.net.ITetheredInterfaceCallback$Stub->asInterface(android.os.IBinder)
android.net.ITetheredInterfaceCallback$Stub->getDefaultTransactionName(int)
android.net.ITetheredInterfaceCallback$Stub->getMaxTransactionId()
android.net.ITetheredInterfaceCallback$Stub->getTransactionName(int)
android.net.ITetheredInterfaceCallback$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.ITetheredInterfaceCallback->onAvailable(java.lang.String)
android.net.ITetheredInterfaceCallback->onUnavailable()
android.net.NattSocketKeepalive-><init>(android.net.IConnectivityManager,android.net.Network,android.os.ParcelFileDescriptor,int,java.net.InetAddress,java.net.InetAddress,java.util.concurrent.Executor,android.net.SocketKeepalive$Callback)
android.net.NattSocketKeepalive->startImpl(int)
android.net.NattSocketKeepalive->stopImpl()
android.net.NetworkAgent$NetworkAgentBinder->onQosFilterCallbackRegistered(int,android.net.QosFilterParcelable)
android.net.NetworkCapabilities$NameOf->nameOf(int)
android.net.NetworkCapabilities->appendStringRepresentationOfBitMaskToStringBuilder(java.lang.StringBuilder,long,android.net.NetworkCapabilities$NameOf,java.lang.String)
android.net.NetworkIdentitySet-><init>()
android.net.NetworkIdentitySet-><init>(java.io.DataInput)
android.net.NetworkIdentitySet-><init>(java.util.Set)
android.net.NetworkIdentitySet->areAllMembersOnDefaultNetwork()
android.net.NetworkIdentitySet->compare(android.net.NetworkIdentitySet,android.net.NetworkIdentitySet)
android.net.NetworkIdentitySet->dumpDebug(android.util.proto.ProtoOutputStream,long)
android.net.NetworkIdentitySet->isAnyMemberMetered()
android.net.NetworkIdentitySet->isAnyMemberRoaming()
android.net.NetworkIdentitySet->readOptionalString(java.io.DataInput)
android.net.NetworkIdentitySet->writeOptionalString(java.io.DataOutput,java.lang.String)
android.net.NetworkIdentitySet->writeToStream(java.io.DataOutput)
android.net.NetworkStats$Entry-><init>(java.lang.String,int,int,int,long,long,long,long,long)
android.net.NetworkStats$Entry-><init>(long,long,long,long,long)
android.net.NetworkStatsAccess-><init>()
android.net.NetworkStatsAccess->checkAccessLevel(android.content.Context,int,int,java.lang.String)
android.net.NetworkStatsAccess->hasAppOpsPermission(android.content.Context,int,java.lang.String)
android.net.NetworkStatsAccess->isAccessibleToUser(int,int,int)
android.net.NetworkStatsCollection$Key-><init>(android.net.NetworkIdentitySet,int,int,int)
android.net.NetworkStatsCollection->findOrCreateHistory(android.net.NetworkIdentitySet,int,int,int)
android.net.NetworkStatsCollection->recordData(android.net.NetworkIdentitySet,int,int,int,long,long,android.net.NetworkStats$Entry)
android.net.NetworkStatsCollection->templateMatches(android.net.NetworkTemplate,android.net.NetworkIdentitySet)
android.net.QosCallbackConnection-><init>(android.net.ConnectivityManager,android.net.QosCallback,java.util.concurrent.Executor)
android.net.QosCallbackConnection->getCallback()
android.net.QosCallbackConnection->onError(int)
android.net.QosCallbackConnection->onNrQosSessionAvailable(android.net.QosSession,android.telephony.data.NrQosSessionAttributes)
android.net.QosCallbackConnection->onQosEpsBearerSessionAvailable(android.net.QosSession,android.telephony.data.EpsBearerQosSessionAttributes)
android.net.QosCallbackConnection->onQosSessionLost(android.net.QosSession)
android.net.QosCallbackConnection->stopReceivingMessages()
android.net.QosFilterParcelable-><init>(android.net.QosFilter)
android.net.QosFilterParcelable-><init>(android.os.Parcel)
android.net.QosFilterParcelable-><init>(android.os.Parcel,android.net.QosFilterParcelable-IA)
android.net.QosFilterParcelable->describeContents()
android.net.QosFilterParcelable->getQosFilter()
android.net.QosFilterParcelable->writeToParcel(android.os.Parcel,int)
android.net.QosSocketFilter-><init>(android.net.QosSocketInfo)
android.net.QosSocketFilter->getAddressFromFileDescriptor()
android.net.QosSocketFilter->getNetwork()
android.net.QosSocketFilter->getQosSocketInfo()
android.net.QosSocketFilter->matchesAddress(java.net.InetSocketAddress,java.net.InetAddress,int,int)
android.net.QosSocketFilter->matchesLocalAddress(java.net.InetAddress,int,int)
android.net.QosSocketFilter->matchesRemoteAddress(java.net.InetAddress,int,int)
android.net.QosSocketFilter->validate()
android.net.QosSocketInfo->readSocketAddress(android.os.Parcel,int)
android.net.TcpRepairWindow-><init>(int,int,int,int,int,int)
android.net.TcpSocketKeepalive-><init>(android.net.IConnectivityManager,android.net.Network,android.os.ParcelFileDescriptor,java.util.concurrent.Executor,android.net.SocketKeepalive$Callback)
android.net.TcpSocketKeepalive->startImpl(int)
android.net.TcpSocketKeepalive->stopImpl()
android.net.TestNetworkManager-><init>(android.net.ITestNetworkManager)
android.net.connectivity.com.android.net.module.util.DnsPacket$DnsHeader-><init>(android.net.connectivity.com.android.net.module.util.DnsPacket,java.nio.ByteBuffer)
android.net.connectivity.com.android.net.module.util.DnsPacket$DnsRecord-><init>(android.net.connectivity.com.android.net.module.util.DnsPacket,int,java.nio.ByteBuffer)
android.net.connectivity.com.android.net.module.util.NetworkCapabilitiesUtils->packBitList(int[])
android.net.connectivity.com.android.net.module.util.NetworkCapabilitiesUtils->packBits(int[])
android.net.connectivity.com.android.net.module.util.NetworkCapabilitiesUtils->unpackBits(long)
android.net.connectivity.com.android.net.module.util.PerUidCounter->decrementCountOrThrow(int,int)
android.net.connectivity.com.android.net.module.util.PerUidCounter->incrementCountOrThrow(int,int)
android.net.netstats.IUsageCallback$Default-><init>()
android.net.netstats.IUsageCallback$Default->asBinder()
android.net.netstats.IUsageCallback$Default->onCallbackReleased(android.net.DataUsageRequest)
android.net.netstats.IUsageCallback$Default->onThresholdReached(android.net.DataUsageRequest)
android.net.netstats.IUsageCallback$Stub$Proxy-><init>(android.os.IBinder)
android.net.netstats.IUsageCallback$Stub$Proxy->asBinder()
android.net.netstats.IUsageCallback$Stub$Proxy->getInterfaceDescriptor()
android.net.netstats.IUsageCallback$Stub$Proxy->onCallbackReleased(android.net.DataUsageRequest)
android.net.netstats.IUsageCallback$Stub$Proxy->onThresholdReached(android.net.DataUsageRequest)
android.net.netstats.IUsageCallback$Stub-><init>()
android.net.netstats.IUsageCallback$Stub->asBinder()
android.net.netstats.IUsageCallback$Stub->asInterface(android.os.IBinder)
android.net.netstats.IUsageCallback$Stub->getDefaultTransactionName(int)
android.net.netstats.IUsageCallback$Stub->getMaxTransactionId()
android.net.netstats.IUsageCallback$Stub->getTransactionName(int)
android.net.netstats.IUsageCallback$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.netstats.IUsageCallback->onCallbackReleased(android.net.DataUsageRequest)
android.net.netstats.IUsageCallback->onThresholdReached(android.net.DataUsageRequest)
android.net.nsd.INsdManager$Default->connect(android.net.nsd.INsdManagerCallback)
android.net.nsd.INsdManager$Stub$Proxy->connect(android.net.nsd.INsdManagerCallback)
android.net.nsd.INsdManager->connect(android.net.nsd.INsdManagerCallback)
android.net.nsd.INsdManagerCallback$Default-><init>()
android.net.nsd.INsdManagerCallback$Default->asBinder()
android.net.nsd.INsdManagerCallback$Default->onDiscoverServicesFailed(int,int)
android.net.nsd.INsdManagerCallback$Default->onDiscoverServicesStarted(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Default->onRegisterServiceFailed(int,int)
android.net.nsd.INsdManagerCallback$Default->onRegisterServiceSucceeded(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Default->onResolveServiceFailed(int,int)
android.net.nsd.INsdManagerCallback$Default->onResolveServiceSucceeded(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Default->onServiceFound(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Default->onServiceLost(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Default->onStopDiscoveryFailed(int,int)
android.net.nsd.INsdManagerCallback$Default->onStopDiscoverySucceeded(int)
android.net.nsd.INsdManagerCallback$Default->onUnregisterServiceFailed(int,int)
android.net.nsd.INsdManagerCallback$Default->onUnregisterServiceSucceeded(int)
android.net.nsd.INsdManagerCallback$Stub$Proxy-><init>(android.os.IBinder)
android.net.nsd.INsdManagerCallback$Stub$Proxy->asBinder()
android.net.nsd.INsdManagerCallback$Stub$Proxy->getInterfaceDescriptor()
android.net.nsd.INsdManagerCallback$Stub$Proxy->onDiscoverServicesFailed(int,int)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onDiscoverServicesStarted(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onRegisterServiceFailed(int,int)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onRegisterServiceSucceeded(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onResolveServiceFailed(int,int)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onResolveServiceSucceeded(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onServiceFound(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onServiceLost(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onStopDiscoveryFailed(int,int)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onStopDiscoverySucceeded(int)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onUnregisterServiceFailed(int,int)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onUnregisterServiceSucceeded(int)
android.net.nsd.INsdManagerCallback$Stub-><init>()
android.net.nsd.INsdManagerCallback$Stub->asBinder()
android.net.nsd.INsdManagerCallback$Stub->asInterface(android.os.IBinder)
android.net.nsd.INsdManagerCallback$Stub->getDefaultTransactionName(int)
android.net.nsd.INsdManagerCallback$Stub->getMaxTransactionId()
android.net.nsd.INsdManagerCallback$Stub->getTransactionName(int)
android.net.nsd.INsdManagerCallback$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.nsd.INsdManagerCallback->onDiscoverServicesFailed(int,int)
android.net.nsd.INsdManagerCallback->onDiscoverServicesStarted(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback->onRegisterServiceFailed(int,int)
android.net.nsd.INsdManagerCallback->onRegisterServiceSucceeded(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback->onResolveServiceFailed(int,int)
android.net.nsd.INsdManagerCallback->onResolveServiceSucceeded(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback->onServiceFound(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback->onServiceLost(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback->onStopDiscoveryFailed(int,int)
android.net.nsd.INsdManagerCallback->onStopDiscoverySucceeded(int)
android.net.nsd.INsdManagerCallback->onUnregisterServiceFailed(int,int)
android.net.nsd.INsdManagerCallback->onUnregisterServiceSucceeded(int)
android.net.nsd.INsdServiceConnector$Default-><init>()
android.net.nsd.INsdServiceConnector$Default->asBinder()
android.net.nsd.INsdServiceConnector$Default->discoverServices(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector$Default->registerService(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector$Default->resolveService(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector$Default->startDaemon()
android.net.nsd.INsdServiceConnector$Default->stopDiscovery(int)
android.net.nsd.INsdServiceConnector$Default->unregisterService(int)
android.net.nsd.INsdServiceConnector$Stub$Proxy-><init>(android.os.IBinder)
android.net.nsd.INsdServiceConnector$Stub$Proxy->asBinder()
android.net.nsd.INsdServiceConnector$Stub$Proxy->discoverServices(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector$Stub$Proxy->getInterfaceDescriptor()
android.net.nsd.INsdServiceConnector$Stub$Proxy->registerService(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector$Stub$Proxy->resolveService(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector$Stub$Proxy->startDaemon()
android.net.nsd.INsdServiceConnector$Stub$Proxy->stopDiscovery(int)
android.net.nsd.INsdServiceConnector$Stub$Proxy->unregisterService(int)
android.net.nsd.INsdServiceConnector$Stub-><init>()
android.net.nsd.INsdServiceConnector$Stub->asBinder()
android.net.nsd.INsdServiceConnector$Stub->asInterface(android.os.IBinder)
android.net.nsd.INsdServiceConnector$Stub->getDefaultTransactionName(int)
android.net.nsd.INsdServiceConnector$Stub->getMaxTransactionId()
android.net.nsd.INsdServiceConnector$Stub->getTransactionName(int)
android.net.nsd.INsdServiceConnector$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.nsd.INsdServiceConnector->discoverServices(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector->registerService(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector->resolveService(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector->startDaemon()
android.net.nsd.INsdServiceConnector->stopDiscovery(int)
android.net.nsd.INsdServiceConnector->unregisterService(int)
android.net.nsd.MDnsManager-><init>(android.net.connectivity.android.net.mdns.aidl.IMDns)
android.net.nsd.MDnsManager->discover(int,java.lang.String,int)
android.net.nsd.MDnsManager->getServiceAddress(int,java.lang.String,int)
android.net.nsd.MDnsManager->registerEventListener(android.net.connectivity.android.net.mdns.aidl.IMDnsEventListener)
android.net.nsd.MDnsManager->registerService(int,java.lang.String,java.lang.String,int,byte[],int)
android.net.nsd.MDnsManager->resolve(int,java.lang.String,java.lang.String,java.lang.String,int)
android.net.nsd.MDnsManager->startDaemon()
android.net.nsd.MDnsManager->stopDaemon()
android.net.nsd.MDnsManager->stopOperation(int)
android.net.nsd.MDnsManager->unregisterEventListener(android.net.connectivity.android.net.mdns.aidl.IMDnsEventListener)
android.net.util.DnsUtils$Rfc6724Comparator-><init>()
android.net.util.DnsUtils$Rfc6724Comparator->compare(android.net.util.DnsUtils$SortableAddress,android.net.util.DnsUtils$SortableAddress)
android.net.util.DnsUtils$Rfc6724Comparator->compare(java.lang.Object,java.lang.Object)
android.net.util.DnsUtils$SortableAddress-><init>(java.net.InetAddress,java.net.InetAddress)
android.net.util.DnsUtils-><init>()
android.net.util.DnsUtils->checkConnectivity(android.net.Network,int,java.net.SocketAddress)
android.net.util.DnsUtils->compareIpv6PrefixMatchLen(java.net.InetAddress,java.net.InetAddress)
android.net.util.DnsUtils->findLabel(java.net.InetAddress)
android.net.util.DnsUtils->findPrecedence(java.net.InetAddress)
android.net.util.DnsUtils->findScope(java.net.InetAddress)
android.net.util.DnsUtils->findSrcAddress(android.net.Network,java.net.InetAddress)
android.net.util.DnsUtils->getIpv6MulticastScope(java.net.InetAddress)
android.net.util.DnsUtils->haveIpv4(android.net.Network)
android.net.util.DnsUtils->haveIpv6(android.net.Network)
android.net.util.DnsUtils->isIpv4Address(java.net.InetAddress)
android.net.util.DnsUtils->isIpv6Address(java.net.InetAddress)
android.net.util.DnsUtils->isIpv6Address6Bone(java.net.InetAddress)
android.net.util.DnsUtils->isIpv6Address6To4(java.net.InetAddress)
android.net.util.DnsUtils->isIpv6AddressTeredo(java.net.InetAddress)
android.net.util.DnsUtils->isIpv6AddressULA(java.net.InetAddress)
android.net.util.DnsUtils->rfc6724Sort(android.net.Network,java.util.List)
android.net.util.MultinetworkPolicyTracker$ActiveDataSubscriptionIdListener-><init>(android.net.util.MultinetworkPolicyTracker)
android.net.util.MultinetworkPolicyTracker$ActiveDataSubscriptionIdListener->onActiveDataSubscriptionIdChanged(int)
android.net.util.MultinetworkPolicyTracker$HandlerExecutor-><init>(android.os.Handler)
android.net.util.MultinetworkPolicyTracker$HandlerExecutor->execute(java.lang.Runnable)
android.net.util.MultinetworkPolicyTracker$SettingObserver-><init>(android.net.util.MultinetworkPolicyTracker)
android.net.util.MultinetworkPolicyTracker$SettingObserver->onChange(boolean)
android.net.util.MultinetworkPolicyTracker$SettingObserver->onChange(boolean,android.net.Uri)
android.net.util.MultinetworkPolicyTracker-><init>(android.content.Context,android.os.Handler)
android.net.util.MultinetworkPolicyTracker-><init>(android.content.Context,android.os.Handler,java.lang.Runnable)
android.net.util.MultinetworkPolicyTracker->configMeteredMultipathPreference()
android.net.util.MultinetworkPolicyTracker->configRestrictsAvoidBadWifi()
android.net.util.MultinetworkPolicyTracker->getAvoidBadWifi()
android.net.util.MultinetworkPolicyTracker->getAvoidBadWifiSetting()
android.net.util.MultinetworkPolicyTracker->getMeteredMultipathPreference()
android.net.util.MultinetworkPolicyTracker->getResourcesForActiveSubId()
android.net.util.MultinetworkPolicyTracker->reevaluate()
android.net.util.MultinetworkPolicyTracker->reevaluateInternal()
android.net.util.MultinetworkPolicyTracker->setTestAllowBadWifiUntil(long)
android.net.util.MultinetworkPolicyTracker->shouldNotifyWifiUnvalidated()
android.net.util.MultinetworkPolicyTracker->shutdown()
android.net.util.MultinetworkPolicyTracker->start()
android.net.util.MultinetworkPolicyTracker->updateAvoidBadWifi()
android.net.util.MultinetworkPolicyTracker->updateMeteredMultipathPreference()
android.net.wifi.BaseWifiService->addOrUpdateNetwork(android.net.wifi.WifiConfiguration,java.lang.String)
android.net.wifi.BaseWifiService->getConfiguredNetworks(java.lang.String,java.lang.String)
android.net.wifi.BaseWifiService->removeNetworkSuggestions(java.util.List,java.lang.String)
android.net.wifi.IWifiManager$Default->allowAutojoinGlobal(boolean)
android.net.wifi.IWifiManager$Stub$Proxy->allowAutojoinGlobal(boolean)
android.net.wifi.IWifiManager->allowAutojoinGlobal(boolean)
android.net.wifi.WifiContext->getApkPkgNameForAction(java.lang.String)
android.nfc.cardemulation.ApduServiceInfo-><init>(android.content.pm.ResolveInfo,boolean,java.lang.String,java.util.ArrayList,java.util.ArrayList,boolean,boolean,int,int,java.lang.String,java.lang.String,java.lang.String)
android.nfc.cardemulation.ApduServiceInfo-><init>(android.content.pm.ResolveInfo,boolean,java.lang.String,java.util.ArrayList,java.util.ArrayList,boolean,int,int,java.lang.String,java.lang.String,java.lang.String)
android.os.IVold$Default->addUserKeyAuth(int,int,java.lang.String)
android.os.IVold$Default->clearUserKeyAuth(int,int,java.lang.String)
android.os.IVold$Default->onUserAdded(int,int)
android.os.IVold$Default->unlockUserKey(int,int,java.lang.String)
android.os.IVold$Stub$Proxy->addUserKeyAuth(int,int,java.lang.String)
android.os.IVold$Stub$Proxy->clearUserKeyAuth(int,int,java.lang.String)
android.os.IVold$Stub$Proxy->onUserAdded(int,int)
android.os.IVold$Stub$Proxy->unlockUserKey(int,int,java.lang.String)
android.os.IVold->addUserKeyAuth(int,int,java.lang.String)
android.os.IVold->clearUserKeyAuth(int,int,java.lang.String)
android.os.IVold->onUserAdded(int,int)
android.os.IVold->unlockUserKey(int,int,java.lang.String)
android.os.storage.IStorageManager$Default->addUserKeyAuth(int,int,byte[])
android.os.storage.IStorageManager$Default->clearUserKeyAuth(int,int,byte[])
android.os.storage.IStorageManager$Default->unlockUserKey(int,int,byte[])
android.os.storage.IStorageManager$Stub$Proxy->addUserKeyAuth(int,int,byte[])
android.os.storage.IStorageManager$Stub$Proxy->clearUserKeyAuth(int,int,byte[])
android.os.storage.IStorageManager$Stub$Proxy->unlockUserKey(int,int,byte[])
android.os.storage.IStorageManager->addUserKeyAuth(int,int,byte[])
android.os.storage.IStorageManager->clearUserKeyAuth(int,int,byte[])
android.os.storage.IStorageManager->unlockUserKey(int,int,byte[])
android.os.storage.StorageManager->unlockUserKey(int,int,byte[])
android.service.wallpaper.IWallpaperService$Default->detach()
android.service.wallpaper.IWallpaperService$Stub$Proxy->detach()
android.service.wallpaper.IWallpaperService->detach()
android.service.wallpaper.WallpaperService$IWallpaperServiceWrapper->detach()
android.telecom.Connection$VideoProvider$VideoProviderBinder-><init>(android.telecom.Connection$VideoProvider)
android.telecom.Connection$VideoProvider$VideoProviderBinder-><init>(android.telecom.Connection$VideoProvider,android.telecom.Connection$VideoProvider$VideoProviderBinder-IA)
android.text.StaticLayout->calculateEllipsis(int,int,android.text.MeasuredParagraph,int,float,android.text.TextUtils$TruncateAt,int,float,android.text.TextPaint,boolean)
android.view.Choreographer$CallbackQueue->addCallbackLocked(long,java.lang.Object,java.lang.Object)
android.view.Choreographer$FrameData->convertFrameTimelines(android.view.DisplayEventReceiver$VsyncEventData)
android.view.Choreographer$FrameData->updateFrameData(long)
android.view.Choreographer->obtainCallbackLocked(long,java.lang.Object,java.lang.Object)
android.view.SurfaceView->applyTransactionOnVriDraw(android.view.SurfaceControl$Transaction)
android.widget.Editor->drawCursor(android.graphics.Canvas,int)
android.window.TaskFragmentOrganizer->applySyncTransaction(android.window.WindowContainerTransaction,android.window.WindowContainerTransactionCallback)
android.window.TaskFragmentOrganizer->putExceptionInBundle(java.lang.Throwable)
com.android.adservices.AndroidServiceBinder->bindServiceLocked()
com.android.ims.internal.ConferenceParticipant-><init>(android.net.Uri,java.lang.String,android.net.Uri,int,int)
com.android.ims.internal.IImsService$Default->getConfigInterface(int)
com.android.ims.internal.IImsService$Stub$Proxy->getConfigInterface(int)
com.android.ims.internal.IImsService->getConfigInterface(int)
com.android.internal.app.IAppOpsService$Default->finishProxyOperation(int,android.content.AttributionSource,boolean)
com.android.internal.app.IAppOpsService$Default->startProxyOperation(int,android.content.AttributionSource,boolean,boolean,java.lang.String,boolean,boolean,int,int,int)
com.android.internal.app.IAppOpsService$Stub$Proxy->finishProxyOperation(int,android.content.AttributionSource,boolean)
com.android.internal.app.IAppOpsService$Stub$Proxy->startProxyOperation(int,android.content.AttributionSource,boolean,boolean,java.lang.String,boolean,boolean,int,int,int)
com.android.internal.app.IAppOpsService->finishProxyOperation(int,android.content.AttributionSource,boolean)
com.android.internal.app.IAppOpsService->startProxyOperation(int,android.content.AttributionSource,boolean,boolean,java.lang.String,boolean,boolean,int,int,int)
com.android.internal.app.IBatteryStats$Default->setBatteryState(int,int,int,int,int,int,int,int,long)
com.android.internal.app.IBatteryStats$Stub$Proxy->setBatteryState(int,int,int,int,int,int,int,int,long)
com.android.internal.app.IBatteryStats->setBatteryState(int,int,int,int,int,int,int,int,long)
com.android.internal.app.ResolverActivity->isLaunchingTargetInOtherProfile()
com.android.internal.app.ResolverActivity->onPostListReady(com.android.internal.app.ResolverListAdapter,boolean,boolean)
com.android.internal.app.ResolverActivity->prepareIntentForCrossProfileLaunch(android.content.Intent)
com.android.internal.app.ResolverListAdapter$ResolverListCommunicator->onPostListReady(com.android.internal.app.ResolverListAdapter,boolean,boolean)
com.android.internal.content.F2fsUtils->isCompressionEnabledInKernel()
com.android.internal.jank.FrameTracker-><init>(com.android.internal.jank.InteractionJankMonitor$Session,android.os.Handler,com.android.internal.jank.FrameTracker$ThreadedRendererWrapper,com.android.internal.jank.FrameTracker$ViewRootWrapper,com.android.internal.jank.FrameTracker$SurfaceControlWrapper,com.android.internal.jank.FrameTracker$ChoreographerWrapper,com.android.internal.jank.FrameTracker$FrameMetricsWrapper,com.android.internal.jank.FrameTracker$StatsLogWrapper,int,int,com.android.internal.jank.FrameTracker$FrameTrackerListener,com.android.internal.jank.InteractionJankMonitor$Configuration)
com.android.internal.jank.FrameTracker->postTraceStartMarker()
com.android.internal.jank.InteractionJankMonitor$Configuration->getContext()
com.android.internal.jank.InteractionJankMonitor->getLock()
com.android.internal.net.ipsec.ike.IkeSessionStateMachine$CreateIkeLocalIkeAuthBase->authenticatePsk(byte[],com.android.internal.net.ipsec.ike.message.IkeAuthPayload,com.android.internal.net.ipsec.ike.message.IkeIdPayload)
com.android.internal.net.ipsec.ike.IkeSessionStateMachine$CreateIkeLocalIkeAuthBase->buildIkeSessionConfiguration(com.android.internal.net.ipsec.ike.message.IkeMessage)
com.android.internal.net.ipsec.ike.IkeSessionStateMachine$CreateIkeLocalIkeAuthBase->extractChildPayloadsFromMessage(com.android.internal.net.ipsec.ike.message.IkeMessage)
com.android.internal.net.ipsec.ike.IkeSessionStateMachine$CreateIkeLocalIkeAuthBase->handleNotifyInLastAuthResp(com.android.internal.net.ipsec.ike.message.IkeNotifyPayload,com.android.internal.net.ipsec.ike.message.IkeAuthPayload)
com.android.internal.net.ipsec.ike.IkeSessionStateMachine$CreateIkeLocalIkeAuthBase->maybeEnableMobility()
com.android.internal.net.ipsec.ike.IkeSessionStateMachine$CreateIkeLocalIkeAuthBase->notifyIkeSessionSetup(com.android.internal.net.ipsec.ike.message.IkeMessage)
com.android.internal.net.ipsec.ike.IkeSessionStateMachine$CreateIkeLocalIkeAuthBase->performFirstChildNegotiation(java.util.List,java.util.List)
com.android.internal.net.ipsec.ike.IkeSessionStateMachine$CreateIkeLocalIkeAuthPostEap->validateIkeAuthRespPostEap(com.android.internal.net.ipsec.ike.message.IkeMessage)
com.android.internal.net.ipsec.ike.keepalive.IkeNattKeepalive-><init>(android.content.Context,android.net.ConnectivityManager,int,java.net.Inet4Address,java.net.Inet4Address,android.net.IpSecManager$UdpEncapsulationSocket,android.net.Network,com.android.internal.net.ipsec.ike.utils.IkeAlarm$IkeAlarmConfig)
com.android.internal.net.ipsec.ike.keepalive.IkeNattKeepalive-><init>(android.content.Context,android.net.ConnectivityManager,int,java.net.Inet4Address,java.net.Inet4Address,android.net.IpSecManager$UdpEncapsulationSocket,android.net.Network,com.android.internal.net.ipsec.ike.utils.IkeAlarm$IkeAlarmConfig,com.android.internal.net.ipsec.ike.keepalive.IkeNattKeepalive$Dependencies)
com.android.internal.net.ipsec.ike.net.IkeConnectionController$Dependencies->newIkeNattKeepalive(android.content.Context,java.net.InetAddress,java.net.InetAddress,android.net.IpSecManager$UdpEncapsulationSocket,android.net.Network,com.android.internal.net.ipsec.ike.utils.IkeAlarm$IkeAlarmConfig)
com.android.internal.net.ipsec.ike.net.IkeConnectionController->onUnderlyingNetworkUpdated(android.net.Network)
com.android.internal.net.ipsec.ike.net.IkeConnectionController->setNetwork(android.net.Network)
com.android.internal.net.ipsec.ike.net.IkeConnectionController->setRemoteAddress()
com.android.internal.net.ipsec.ike.net.IkeDefaultNetworkCallback-><init>(com.android.internal.net.ipsec.ike.net.IkeNetworkUpdater,android.net.Network,java.net.InetAddress)
com.android.internal.net.ipsec.ike.net.IkeNetworkCallbackBase-><init>(com.android.internal.net.ipsec.ike.net.IkeNetworkUpdater,android.net.Network,java.net.InetAddress)
com.android.internal.net.ipsec.ike.net.IkeNetworkCallbackBase->onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties)
com.android.internal.net.ipsec.ike.net.IkeNetworkCallbackBase->setNetwork(android.net.Network)
com.android.internal.net.ipsec.ike.net.IkeNetworkUpdater->onUnderlyingNetworkUpdated(android.net.Network)
com.android.internal.net.ipsec.ike.net.IkeSpecificNetworkCallback-><init>(com.android.internal.net.ipsec.ike.net.IkeNetworkUpdater,android.net.Network,java.net.InetAddress)
com.android.internal.os.BatteryStatsImpl->maybeUpdateOverallScreenBrightness(int,long,long)
com.android.internal.os.BatteryStatsImpl->noteScreenBrightnessLocked(int,int,long,long)
com.android.internal.os.BatteryStatsImpl->noteScreenStateLocked(int,int,long,long,long)
com.android.internal.os.BatteryStatsImpl->setBatteryStateLocked(int,int,int,int,int,int,int,int,long)
com.android.internal.os.BatteryStatsImpl->setBatteryStateLocked(int,int,int,int,int,int,int,int,long,long,long,long)
com.android.internal.os.BinderCallsStats$CallStat-><init>(int,java.lang.Class,int,boolean)
com.android.internal.os.BinderCallsStats$UidEntry->get(int,java.lang.Class,int,boolean)
com.android.internal.os.BinderCallsStats$UidEntry->getOrCreate(int,java.lang.Class,int,boolean,boolean)
com.android.internal.os.BinderCallsStats->reset()
com.android.internal.statusbar.IStatusBar$Default->showGlobalActionsMenu()
com.android.internal.statusbar.IStatusBar$Stub$Proxy->showGlobalActionsMenu()
com.android.internal.statusbar.IStatusBar->showGlobalActionsMenu()
com.android.internal.telephony.IccProvider->loadFromEf(int,int)
com.android.internal.telephony.ImsSmsDispatcher->getPhoneId(com.android.internal.telephony.Phone)
com.android.internal.telephony.ImsSmsDispatcher->logw(java.lang.String)
com.android.internal.telephony.MissedIncomingCallSmsFilter->createMissedIncomingCallEvent(long,java.lang.String)
com.android.internal.telephony.MissedIncomingCallSmsFilter->makePstnPhoneAccountHandle(com.android.internal.telephony.Phone)
com.android.internal.telephony.MissedIncomingCallSmsFilter->processSms(android.telephony.SmsMessage)
com.android.internal.telephony.MultiSimSettingController$SimCombinationWarningParams-><init>(com.android.internal.telephony.MultiSimSettingController)
com.android.internal.telephony.MultiSimSettingController$SimCombinationWarningParams-><init>(com.android.internal.telephony.MultiSimSettingController,com.android.internal.telephony.MultiSimSettingController$SimCombinationWarningParams-IA)
com.android.internal.telephony.MultiSimSettingController->getSimCombinationWarningParams(int)
com.android.internal.telephony.MultiSimSettingController->getSimSelectDialogType(int,boolean,boolean,boolean)
com.android.internal.telephony.MultiSimSettingController->getUserPrefDataSubIdFromDB()
com.android.internal.telephony.MultiSimSettingController->isRadioAvailableOnAllSubs()
com.android.internal.telephony.MultiSimSettingController->isUserVisibleChange(int)
com.android.internal.telephony.MultiSimSettingController->sendDefaultSubConfirmedNotification(int)
com.android.internal.telephony.MultiSimSettingController->sendSubChangeNotificationIfNeeded(int,boolean,boolean,boolean)
com.android.internal.telephony.Phone->getCallForwardingIndicatorFromSharedPref()
com.android.internal.telephony.Phone->restoreSavedNetworkSelection(android.os.Message)
com.android.internal.telephony.ProxyController->loge(java.lang.String)
com.android.internal.telephony.SMSDispatcher->isAscii7bitSupportedForLongMessage()
com.android.internal.telephony.SmsBroadcastUndelivered-><init>(android.content.Context)
com.android.internal.telephony.SmsBroadcastUndelivered->broadcastSms(com.android.internal.telephony.InboundSmsTracker)
com.android.internal.telephony.SmsBroadcastUndelivered->scanRawTable(android.content.Context,long)
com.android.internal.telephony.cat.BIPClientParams-><init>(com.android.internal.telephony.cat.CommandDetails,com.android.internal.telephony.cat.TextMessage,boolean)
com.android.internal.telephony.cat.BIPClientParams->setIcon(android.graphics.Bitmap)
com.android.internal.telephony.cat.CallSetupParams-><init>(com.android.internal.telephony.cat.CommandDetails,com.android.internal.telephony.cat.TextMessage,com.android.internal.telephony.cat.TextMessage)
com.android.internal.telephony.cat.CatService->isSupportedSetupEventCommand(com.android.internal.telephony.cat.CatCmdMessage)
com.android.internal.telephony.cat.CommandParamsFactory->processBIPClient(com.android.internal.telephony.cat.CommandDetails,java.util.List)
com.android.internal.telephony.cat.CommandParamsFactory->processEventNotify(com.android.internal.telephony.cat.CommandDetails,java.util.List)
com.android.internal.telephony.cat.IconId-><init>()
com.android.internal.telephony.cat.IconLoader->loadIcons(int[],android.os.Message)
com.android.internal.telephony.cat.ItemsIconId-><init>()
com.android.internal.telephony.cat.ValueParser->retrieveIconId(com.android.internal.telephony.cat.ComprehensionTlv)
com.android.internal.telephony.cat.ValueParser->retrieveItemsIconId(com.android.internal.telephony.cat.ComprehensionTlv)
com.android.internal.telephony.data.DataNetwork->onPcoDataChanged(android.telephony.PcoData)
com.android.internal.telephony.data.PhoneSwitcher$EmergencyOverrideRequest-><init>(com.android.internal.telephony.data.PhoneSwitcher$EmergencyOverrideRequest-IA)
com.android.internal.telephony.dataconnection.DataConnection->checkSetMtu(android.telephony.data.ApnSetting,android.net.LinkProperties)
com.android.internal.telephony.dataconnection.DcTracker->getBetterConnectionState(com.android.internal.telephony.DctConstants$State,com.android.internal.telephony.DctConstants$State)
com.android.internal.telephony.dataconnection.TransportManager$HandoverParams-><init>(int,int,com.android.internal.telephony.dataconnection.TransportManager$HandoverParams$HandoverCallback)
com.android.internal.telephony.gsm.UsimDataDownloadHandler-><init>(com.android.internal.telephony.CommandsInterface,int)
com.android.internal.telephony.gsm.UsimDataDownloadHandler->acknowledgeSmsWithError(int)
com.android.internal.telephony.gsm.UsimDataDownloadHandler->handleDataDownload(com.android.internal.telephony.gsm.SmsMessage,int)
com.android.internal.telephony.gsm.UsimDataDownloadHandler->sendSmsAckForEnvelopeResponse(com.android.internal.telephony.uicc.IccIoResult,int,int)
com.android.internal.telephony.gsm.UsimDataDownloadHandler->startDataDownload(com.android.internal.telephony.gsm.SmsMessage,int)
com.android.internal.telephony.ims.MmTelFeatureCompatAdapter->convertCapability(int,int)
com.android.internal.telephony.ims.MmTelFeatureCompatAdapter->getOldConfigInterface()
com.android.internal.telephony.ims.MmTelInterfaceAdapter->getConfigInterface()
com.android.internal.telephony.imsphone.ImsPhone$Cf-><init>(java.lang.String,boolean,android.os.Message)
com.android.internal.telephony.imsphone.ImsPhone->initiateSilentRedial()
com.android.internal.telephony.imsphone.ImsPhoneCallTracker$CacheEntry-><init>(long,long,long,int)
com.android.internal.telephony.imsphone.ImsPhoneCallTracker->findConnectionTimeUsePhoneNumber(com.android.ims.internal.ConferenceParticipant)
com.android.internal.telephony.imsphone.ImsPhoneCallTracker->maintainConnectTimeCache()
com.android.internal.telephony.uicc.IsimUiccRecords->broadcastRefresh()
com.android.internal.telephony.uicc.SIMRecords->setVoiceMailByCountry(java.lang.String)
com.android.internal.widget.DecorCaptionView->toggleFreeformWindowingMode()
com.android.internal.widget.floatingtoolbar.FloatingToolbarPopup->createInstance(android.content.Context,android.view.View)
com.android.internal.widget.floatingtoolbar.LocalFloatingToolbarPopup-><init>(android.content.Context,android.view.View)
com.android.org.conscrypt.metrics.ConscryptStatsLog->write(int,boolean,int,int,int)
com.android.org.conscrypt.metrics.ReflexiveStatsEvent->buildEvent(int,boolean,int,int,int)
com.android.phone.ecc.nano.Extension->computeSerializedSize(java.lang.Object)
com.android.phone.ecc.nano.Extension->writeTo(java.lang.Object,com.android.phone.ecc.nano.CodedOutputByteBufferNano)
com.google.android.mms.pdu.PduParser->parseParts(java.io.ByteArrayInputStream)
sun.misc.FloatingDecimal->getHexDigit(java.lang.String,int)
sun.misc.FloatingDecimal->stripLeadingZeros(java.lang.String)
