android.app.AppOpsManagerInternal$CheckOpsDelegate->noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String,com.android.internal.util.function.HexFunction)
android.app.Notification->getNotificationArrayFromBundle(android.os.Bundle,java.lang.String)
android.app.TaskInfo->isResizable()
android.app.admin.DevicePolicyCache$EmptyDevicePolicyCache->getScreenCaptureDisabled(int)
android.app.admin.DevicePolicyCache->getScreenCaptureDisabled(int)
android.companion.BluetoothDeviceFilterUtils->matches(android.bluetooth.le.ScanFilter,android.bluetooth.BluetoothDevice)
android.companion.BluetoothLeDeviceFilter->matches(android.bluetooth.BluetoothDevice)
android.content.pm.PackageParser$ApkLite-><init>(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,boolean,int,int,int,int,java.util.List,android.content.pm.PackageParser$SigningDetails,boolean,boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String,boolean,int,int,int)
android.hardware.camera2.impl.CameraDeviceImpl->checkEarlyTriggerSequenceComplete(int,long,int[])
android.hardware.camera2.impl.CaptureResultExtras-><init>(int,int,int,int,long,int,int,java.lang.String)
android.location.AbstractListenerManager->merge(java.lang.Object[])
android.location.LocationManager$GnssMeasurementsListenerManager->merge(android.location.GnssRequest[])
android.location.LocationManager$GnssMeasurementsListenerManager->merge(java.lang.Object[])
android.media.IMediaRouter2$Default->getSessionHintsForCreatingSession(long,android.media.MediaRoute2Info)
android.media.IMediaRouter2$Stub$Proxy->getSessionHintsForCreatingSession(long,android.media.MediaRoute2Info)
android.media.IMediaRouter2->getSessionHintsForCreatingSession(long,android.media.MediaRoute2Info)
android.media.IMediaRouterService$Default->notifySessionHintsForCreatingSession(android.media.IMediaRouter2,long,android.media.MediaRoute2Info,android.os.Bundle)
android.media.IMediaRouterService$Default->requestCreateSessionWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)
android.media.IMediaRouterService$Default->requestCreateSessionWithRouter2(android.media.IMediaRouter2,int,android.media.MediaRoute2Info,android.os.Bundle)
android.media.IMediaRouterService$Stub$Proxy->notifySessionHintsForCreatingSession(android.media.IMediaRouter2,long,android.media.MediaRoute2Info,android.os.Bundle)
android.media.IMediaRouterService$Stub$Proxy->requestCreateSessionWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)
android.media.IMediaRouterService$Stub$Proxy->requestCreateSessionWithRouter2(android.media.IMediaRouter2,int,android.media.MediaRoute2Info,android.os.Bundle)
android.media.IMediaRouterService->notifySessionHintsForCreatingSession(android.media.IMediaRouter2,long,android.media.MediaRoute2Info,android.os.Bundle)
android.media.IMediaRouterService->requestCreateSessionWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)
android.media.IMediaRouterService->requestCreateSessionWithRouter2(android.media.IMediaRouter2,int,android.media.MediaRoute2Info,android.os.Bundle)
android.media.MediaRouter2$ControllerCreationRequest-><init>(int,android.media.MediaRoute2Info)
android.media.MediaRouter2$MediaRouter2Stub->getSessionHintsForCreatingSession(long,android.media.MediaRoute2Info)
android.media.MediaRouter2$RoutingController->releaseInternal(boolean,boolean)
android.media.MediaRouter2$SystemRoutingController->releaseInternal(boolean,boolean)
android.media.MediaRouter2->onGetControllerHintsForCreatingSessionOnHandler(long,android.media.MediaRoute2Info)
android.net.ConnectivityManager->enforceTetherChangePermission(android.content.Context,java.lang.String)
android.net.DnsPacket$DnsHeader-><init>(android.net.DnsPacket,java.nio.ByteBuffer)
android.net.DnsPacket$DnsHeader->getRecordCount(int)
android.net.DnsPacket$DnsRecord-><init>(android.net.DnsPacket,int,java.nio.ByteBuffer)
android.net.DnsPacket$DnsRecord->getRR()
android.net.DnsPacket$DnsRecord->labelToString(byte[])
android.net.DnsPacket$DnsRecord->parseName(java.nio.ByteBuffer,int)
android.net.DnsPacket-><init>(byte[])
android.net.RouteInfo$RouteKey-><init>(android.net.IpPrefix,java.net.InetAddress)
android.net.shared.Inet4AddressUtils-><init>()
android.net.shared.Inet4AddressUtils->getBroadcastAddress(java.net.Inet4Address,int)
android.net.shared.Inet4AddressUtils->getImplicitNetmask(java.net.Inet4Address)
android.net.shared.Inet4AddressUtils->getPrefixMaskAsInet4Address(int)
android.net.shared.Inet4AddressUtils->inet4AddressToIntHTH(java.net.Inet4Address)
android.net.shared.Inet4AddressUtils->inet4AddressToIntHTL(java.net.Inet4Address)
android.net.shared.Inet4AddressUtils->intToInet4AddressHTH(int)
android.net.shared.Inet4AddressUtils->intToInet4AddressHTL(int)
android.net.shared.Inet4AddressUtils->netmaskToPrefixLength(java.net.Inet4Address)
android.net.shared.Inet4AddressUtils->prefixLengthToV4NetmaskIntHTH(int)
android.net.shared.Inet4AddressUtils->prefixLengthToV4NetmaskIntHTL(int)
android.net.shared.InetAddressUtils-><init>()
android.net.shared.InetAddressUtils->parcelInetAddress(android.os.Parcel,java.net.InetAddress,int)
android.net.shared.InetAddressUtils->unparcelInetAddress(android.os.Parcel)
android.permission.IPermissionManager$Default->revokeRuntimePermission(java.lang.String,java.lang.String,int)
android.permission.IPermissionManager$Stub$Proxy->revokeRuntimePermission(java.lang.String,java.lang.String,int)
android.permission.IPermissionManager->revokeRuntimePermission(java.lang.String,java.lang.String,int)
android.service.autofill.IInlineSuggestionRenderService$Default->renderSuggestion(android.service.autofill.IInlineSuggestionUiCallback,android.service.autofill.InlinePresentation,int,int,android.os.IBinder,int)
android.service.autofill.IInlineSuggestionRenderService$Stub$Proxy->renderSuggestion(android.service.autofill.IInlineSuggestionUiCallback,android.service.autofill.InlinePresentation,int,int,android.os.IBinder,int)
android.service.autofill.IInlineSuggestionRenderService->renderSuggestion(android.service.autofill.IInlineSuggestionUiCallback,android.service.autofill.InlinePresentation,int,int,android.os.IBinder,int)
android.service.autofill.InlineSuggestionRenderService$InlineSuggestionUiImpl-><init>(android.service.autofill.InlineSuggestionRenderService,android.view.SurfaceControlViewHost,android.os.Handler)
android.service.autofill.InlineSuggestionRenderService->handleRenderSuggestion(android.service.autofill.IInlineSuggestionUiCallback,android.service.autofill.InlinePresentation,int,int,android.os.IBinder,int)
android.service.autofill.augmented.AugmentedAutofillService$AutofillProxy->reportResult(java.util.List,android.os.Bundle)
android.service.autofill.augmented.IFillCallback$Default->onSuccess(java.util.List,android.os.Bundle)
android.service.autofill.augmented.IFillCallback$Stub$Proxy->onSuccess(java.util.List,android.os.Bundle)
android.service.autofill.augmented.IFillCallback->onSuccess(java.util.List,android.os.Bundle)
android.util.apk.SourceStampVerifier->getApkContentDigests(java.io.RandomAccessFile)
android.util.apk.SourceStampVerifier->verify(java.io.RandomAccessFile,byte[])
android.view.ImeFocusController$InputMethodManagerDelegate->isAcceptingText()
android.view.InsetsController$InternalAnimationControlListener-><init>(boolean,boolean,int)
android.view.InsetsController->calculateInsets(boolean,boolean,android.view.DisplayCutout,int,int)
android.view.InsetsSourceConsumer->updateSource(android.view.InsetsSource)
android.view.InsetsState->calculateInsets(android.graphics.Rect,android.view.InsetsState,boolean,boolean,android.view.DisplayCutout,int,int,android.util.SparseIntArray)
android.view.InsetsState->equals(java.lang.Object,boolean)
android.view.InsetsState->getSourcesCount()
android.view.InsetsState->setSourceVisible(int,android.view.InsetsState)
android.view.InsetsState->sourceAt(int)
android.view.SurfaceControl-><init>(android.view.SurfaceControl)
android.view.SurfaceControl-><init>(android.view.SurfaceSession,java.lang.String,int,int,int,int,android.view.SurfaceControl,android.util.SparseIntArray)
android.view.SurfaceControl-><init>(android.view.SurfaceSession,java.lang.String,int,int,int,int,android.view.SurfaceControl,android.util.SparseIntArray,android.view.SurfaceControl$1)
android.view.SurfaceControl->assignNativeObject(long)
android.view.SurfaceControl->copyFrom(android.view.SurfaceControl)
android.view.SurfaceControl->getReleaseStack()
android.view.SyncRtSurfaceTransactionApplier->applyParams(android.view.SurfaceControl$Transaction,long,boolean,android.view.SyncRtSurfaceTransactionApplier$SurfaceParams[])
android.view.SyncRtSurfaceTransactionApplier->scheduleApply(boolean,android.view.SyncRtSurfaceTransactionApplier$SurfaceParams[])
android.view.ViewRootImpl->updateBoundsLayer()
android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper-><init>(android.os.Looper,android.view.inputmethod.InputConnection,android.view.inputmethod.InputMethodManager)
android.view.inputmethod.InputMethodManager$DelegateImpl->isAcceptingText()
android.view.inputmethod.InputMethodManager->notifyImeHidden()
android.view.inputmethod.InputMethodManager->removeImeSurface()
android.view.inputmethod.InputMethodManager->requestImeShow(android.os.ResultReceiver)
com.android.internal.app.IAppOpsService$Default->noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String)
com.android.internal.app.IAppOpsService$Default->noteProxyOperation(int,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String)
com.android.internal.app.IAppOpsService$Default->startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String)
com.android.internal.app.IAppOpsService$Stub$Proxy->noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String)
com.android.internal.app.IAppOpsService$Stub$Proxy->noteProxyOperation(int,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String)
com.android.internal.app.IAppOpsService$Stub$Proxy->startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String)
com.android.internal.app.IAppOpsService->noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String)
com.android.internal.app.IAppOpsService->noteProxyOperation(int,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String)
com.android.internal.app.IAppOpsService->startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String)
com.android.internal.app.PlatLogoActivity$BackslashDrawable-><init>(int)
com.android.internal.app.PlatLogoActivity$BackslashDrawable->draw(android.graphics.Canvas)
com.android.internal.app.PlatLogoActivity$BackslashDrawable->getOpacity()
com.android.internal.app.PlatLogoActivity$BackslashDrawable->onTimeUpdate(android.animation.TimeAnimator,long,long)
com.android.internal.app.PlatLogoActivity$BackslashDrawable->setAlpha(int)
com.android.internal.app.PlatLogoActivity$BackslashDrawable->setColorFilter(android.graphics.ColorFilter)
com.android.internal.app.PlatLogoActivity$BackslashDrawable->startAnimating()
com.android.internal.app.PlatLogoActivity$BackslashDrawable->stopAnimating()
com.android.internal.app.PlatLogoActivity$OneDrawable-><init>()
com.android.internal.app.PlatLogoActivity$OneDrawable->draw(android.graphics.Canvas)
com.android.internal.app.PlatLogoActivity$OneDrawable->getOpacity()
com.android.internal.app.PlatLogoActivity$OneDrawable->setAlpha(int)
com.android.internal.app.PlatLogoActivity$OneDrawable->setColorFilter(android.graphics.ColorFilter)
com.android.internal.app.PlatLogoActivity$OneDrawable->setTintList(android.content.res.ColorStateList)
com.android.internal.app.PlatLogoActivity$ZeroDrawable-><init>()
com.android.internal.app.PlatLogoActivity$ZeroDrawable->draw(android.graphics.Canvas)
com.android.internal.app.PlatLogoActivity$ZeroDrawable->getOpacity()
com.android.internal.app.PlatLogoActivity$ZeroDrawable->setAlpha(int)
com.android.internal.app.PlatLogoActivity$ZeroDrawable->setColorFilter(android.graphics.ColorFilter)
com.android.internal.app.PlatLogoActivity$ZeroDrawable->setTintList(android.content.res.ColorStateList)
com.android.internal.app.PlatLogoActivity->launchNextStage()
com.android.internal.app.PlatLogoActivity->testOverlap()
com.android.internal.app.ResolverListAdapter$LoadIconTask-><init>(com.android.internal.app.ResolverListAdapter,com.android.internal.app.chooser.DisplayResolveInfo,android.widget.ImageView)
com.android.internal.app.ResolverListAdapter$ViewHolder->bindLabel(java.lang.CharSequence,java.lang.CharSequence)
com.android.internal.app.ResolverListAdapter->createSuspendedColorMatrix()
com.android.internal.app.procstats.ProcessStats->dumpAggregatedProtoForStatsd(android.util.proto.ProtoOutputStream)
com.android.internal.policy.BackdropFrameRenderer-><init>(com.android.internal.policy.DecorView,android.view.ThreadedRenderer,android.graphics.Rect,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,int,int,boolean,android.graphics.Rect,android.graphics.Rect)
com.android.internal.policy.BackdropFrameRenderer->drawColorViews(int,int,int,int,boolean,android.graphics.Rect,android.graphics.Rect)
com.android.internal.policy.BackdropFrameRenderer->redrawLocked(android.graphics.Rect,boolean,android.graphics.Rect,android.graphics.Rect)
com.android.internal.policy.BackdropFrameRenderer->setTargetRect(android.graphics.Rect,boolean,android.graphics.Rect,android.graphics.Rect)
com.android.internal.policy.DecorView->getColorViewBottomInset(int,int)
com.android.internal.policy.DecorView->getColorViewLeftInset(int,int)
com.android.internal.policy.DecorView->getColorViewRightInset(int,int)
com.android.internal.policy.DecorView->getColorViewTopInset(int,int)
com.android.internal.policy.DecorView->getNavigationBarRect(int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,float)
com.android.internal.policy.DividerSnapAlgorithm-><init>(android.content.res.Resources,int,int,int,boolean,android.graphics.Rect,int,boolean)
com.android.internal.telephony.NetworkTypeController->isDataActive()
com.android.internal.telephony.SubscriptionController->getIccIdsOfInsertedSims()
com.android.internal.widget.MessagingLinearLayout->setMessagingLayout(com.android.internal.widget.IMessagingLayout)
com.android.net.module.util.IpRange-><init>(android.net.IpPrefix)
com.android.net.module.util.IpRange-><init>(java.net.InetAddress,java.net.InetAddress)
com.android.net.module.util.IpRange->addrToBigInteger(byte[])
com.android.net.module.util.IpRange->asIpPrefixes()
com.android.net.module.util.IpRange->containsRange(com.android.net.module.util.IpRange)
com.android.net.module.util.IpRange->equals(java.lang.Object)
com.android.net.module.util.IpRange->getAsInetAddress(byte[])
com.android.net.module.util.IpRange->getEndAddr()
com.android.net.module.util.IpRange->getStartAddr()
com.android.net.module.util.IpRange->getSubsetPrefixes(android.net.IpPrefix)
com.android.net.module.util.IpRange->hashCode()
com.android.net.module.util.IpRange->overlapsRange(com.android.net.module.util.IpRange)
com.android.net.module.util.LinkPropertiesUtils$CompareOrUpdateResult-><init>(java.util.Collection,java.util.Collection,java.util.function.Function)
com.android.net.module.util.LinkPropertiesUtils$CompareOrUpdateResult->toString()
com.android.net.module.util.LinkPropertiesUtils$CompareResult-><init>()
com.android.net.module.util.LinkPropertiesUtils$CompareResult-><init>(java.util.Collection,java.util.Collection)
com.android.net.module.util.LinkPropertiesUtils$CompareResult->toString()
com.android.net.module.util.LinkPropertiesUtils-><init>()
com.android.net.module.util.LinkPropertiesUtils->compareAddresses(android.net.LinkProperties,android.net.LinkProperties)
com.android.net.module.util.LinkPropertiesUtils->isIdenticalAddresses(android.net.LinkProperties,android.net.LinkProperties)
com.android.net.module.util.LinkPropertiesUtils->isIdenticalDnses(android.net.LinkProperties,android.net.LinkProperties)
com.android.net.module.util.LinkPropertiesUtils->isIdenticalHttpProxy(android.net.LinkProperties,android.net.LinkProperties)
com.android.net.module.util.LinkPropertiesUtils->isIdenticalInterfaceName(android.net.LinkProperties,android.net.LinkProperties)
com.android.net.module.util.LinkPropertiesUtils->isIdenticalRoutes(android.net.LinkProperties,android.net.LinkProperties)
com.android.net.module.util.MacAddressUtils-><init>()
com.android.net.module.util.MacAddressUtils->byteAddrFromLongAddr(long)
com.android.net.module.util.MacAddressUtils->createRandomUnicastAddress()
com.android.net.module.util.MacAddressUtils->createRandomUnicastAddress(android.net.MacAddress,java.util.Random)
com.android.net.module.util.MacAddressUtils->isMacAddress(byte[])
com.android.net.module.util.MacAddressUtils->isMulticastAddress(android.net.MacAddress)
com.android.net.module.util.MacAddressUtils->longAddrFromByteAddr(byte[])
com.android.net.module.util.NetUtils-><init>()
com.android.net.module.util.NetUtils->addressTypeMatches(java.net.InetAddress,java.net.InetAddress)
com.android.net.module.util.NetUtils->selectBestRoute(java.util.Collection,java.net.InetAddress)
com.android.net.module.util.nsd.DnsSdTxtRecord-><init>()
com.android.net.module.util.nsd.DnsSdTxtRecord-><init>(byte[])
com.android.net.module.util.nsd.DnsSdTxtRecord-><init>(com.android.net.module.util.nsd.DnsSdTxtRecord)
com.android.net.module.util.nsd.DnsSdTxtRecord->contains(java.lang.String)
com.android.net.module.util.nsd.DnsSdTxtRecord->describeContents()
com.android.net.module.util.nsd.DnsSdTxtRecord->equals(java.lang.Object)
com.android.net.module.util.nsd.DnsSdTxtRecord->get(java.lang.String)
com.android.net.module.util.nsd.DnsSdTxtRecord->getKey(int)
com.android.net.module.util.nsd.DnsSdTxtRecord->getRawData()
com.android.net.module.util.nsd.DnsSdTxtRecord->getValue(int)
com.android.net.module.util.nsd.DnsSdTxtRecord->getValue(java.lang.String)
com.android.net.module.util.nsd.DnsSdTxtRecord->getValueAsString(int)
com.android.net.module.util.nsd.DnsSdTxtRecord->hashCode()
com.android.net.module.util.nsd.DnsSdTxtRecord->insert(byte[],byte[],int)
com.android.net.module.util.nsd.DnsSdTxtRecord->keyCount()
com.android.net.module.util.nsd.DnsSdTxtRecord->remove(java.lang.String)
com.android.net.module.util.nsd.DnsSdTxtRecord->set(java.lang.String,java.lang.String)
com.android.net.module.util.nsd.DnsSdTxtRecord->size()
com.android.net.module.util.nsd.DnsSdTxtRecord->toString()
com.android.net.module.util.nsd.DnsSdTxtRecord->writeToParcel(android.os.Parcel,int)
com.android.org.conscrypt.AbstractConscryptSocket->chooseClientAlias(javax.net.ssl.X509KeyManager,javax.security.auth.x500.X500Principal[],java.lang.String[])
com.android.org.conscrypt.AbstractConscryptSocket->chooseServerAlias(javax.net.ssl.X509KeyManager,java.lang.String)
com.android.server.usage.AppStandbyInternal->dumpUser(com.android.internal.util.IndentingPrintWriter,int,java.util.List)
com.android.server.usage.AppStandbyInternal->flushDurationsToDisk()
com.android.server.usage.AppStandbyInternal->flushToDisk(int)
com.android.server.usage.AppStandbyInternal->reportEvent(android.app.usage.UsageEvents$Event,long,int)
com.android.wifi.x.android.net.shared.Inet4AddressUtils-><init>()
com.android.wifi.x.android.net.shared.Inet4AddressUtils->getBroadcastAddress(java.net.Inet4Address,int)
com.android.wifi.x.android.net.shared.Inet4AddressUtils->getImplicitNetmask(java.net.Inet4Address)
com.android.wifi.x.android.net.shared.Inet4AddressUtils->getPrefixMaskAsInet4Address(int)
com.android.wifi.x.android.net.shared.Inet4AddressUtils->inet4AddressToIntHTH(java.net.Inet4Address)
com.android.wifi.x.android.net.shared.Inet4AddressUtils->inet4AddressToIntHTL(java.net.Inet4Address)
com.android.wifi.x.android.net.shared.Inet4AddressUtils->intToInet4AddressHTH(int)
com.android.wifi.x.android.net.shared.Inet4AddressUtils->intToInet4AddressHTL(int)
com.android.wifi.x.android.net.shared.Inet4AddressUtils->netmaskToPrefixLength(java.net.Inet4Address)
com.android.wifi.x.android.net.shared.Inet4AddressUtils->prefixLengthToV4NetmaskIntHTH(int)
com.android.wifi.x.android.net.shared.Inet4AddressUtils->prefixLengthToV4NetmaskIntHTL(int)
