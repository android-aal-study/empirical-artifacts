android.app.ActivityOptions->getDismissKeyguardIfInsecure()
android.app.ActivityOptions->setDismissKeyguardIfInsecure()
android.app.ActivityThread->handlePauseActivity(android.app.ActivityThread$ActivityClientRecord,boolean,boolean,int,android.app.servertransaction.PendingTransactionActions,java.lang.String)
android.app.ActivityThread->isCachedProcessState()
android.app.ActivityThread->shouldReportChange(int,android.content.res.Configuration,android.content.res.Configuration,android.window.SizeConfigurationBuckets,int)
android.app.ActivityThreadInternal->isCachedProcessState()
android.app.ClientTransactionHandler->handlePauseActivity(android.app.ActivityThread$ActivityClientRecord,boolean,boolean,int,android.app.servertransaction.PendingTransactionActions,java.lang.String)
android.app.HomeVisibilityListener->init(android.content.Context,java.util.concurrent.Executor,android.app.ActivityManager)
android.app.IActivityTaskManager$Default->getTaskSnapshot(int,boolean)
android.app.IActivityTaskManager$Default->getTasks(int,boolean,boolean)
android.app.IActivityTaskManager$Default->startBackNavigation(boolean)
android.app.IActivityTaskManager$Stub$Proxy->getTaskSnapshot(int,boolean)
android.app.IActivityTaskManager$Stub$Proxy->getTasks(int,boolean,boolean)
android.app.IActivityTaskManager$Stub$Proxy->startBackNavigation(boolean)
android.app.IActivityTaskManager->getTaskSnapshot(int,boolean)
android.app.IActivityTaskManager->getTasks(int,boolean,boolean)
android.app.IActivityTaskManager->startBackNavigation(boolean)
android.app.appsearch.GenericDocument->getRawPropertyFromRawDocument(java.lang.String,android.os.Bundle)
android.app.appsearch.aidl.AppSearchBatchResultParcel-><init>(android.os.Parcel,android.app.appsearch.aidl.AppSearchBatchResultParcel-IA)
android.app.appsearch.aidl.AppSearchResultParcel-><init>(android.os.Parcel,android.app.appsearch.aidl.AppSearchResultParcel-IA)
android.app.appsearch.aidl.DocumentsParcel-><init>(android.os.Parcel,android.app.appsearch.aidl.DocumentsParcel-IA)
android.app.appsearch.aidl.IAppSearchManager$Default->getNextPage(android.content.AttributionSource,long,android.os.UserHandle,android.app.appsearch.aidl.IAppSearchResultCallback)
android.app.appsearch.aidl.IAppSearchManager$Stub$Proxy->getNextPage(android.content.AttributionSource,long,android.os.UserHandle,android.app.appsearch.aidl.IAppSearchResultCallback)
android.app.appsearch.aidl.IAppSearchManager->getNextPage(android.content.AttributionSource,long,android.os.UserHandle,android.app.appsearch.aidl.IAppSearchResultCallback)
android.app.appsearch.util.SchemaMigrationUtil->checkDeletedAndIncompatible(java.util.Set,java.util.Set)
android.app.appsearch.util.SchemaMigrationUtil->checkDeletedAndIncompatibleAfterMigration(android.app.appsearch.SetSchemaResponse,java.util.Set)
android.app.servertransaction.PauseActivityItem->obtain(boolean,boolean,int,boolean)
android.appwidget.AppWidgetHostView->resetAppWidget(android.appwidget.AppWidgetProviderInfo)
android.appwidget.AppWidgetHostView->viewDataChanged(int)
android.attention.AttentionManagerInternal$ProximityUpdateCallbackInternal-><init>()
android.bluetooth.IBluetoothVolumeControl$Default->setVolumeGroup(int,int,android.content.AttributionSource,com.android.bluetooth.x.com.android.modules.utils.SynchronousResultReceiver)
android.bluetooth.IBluetoothVolumeControl$Stub$Proxy->setVolumeGroup(int,int,android.content.AttributionSource,com.android.bluetooth.x.com.android.modules.utils.SynchronousResultReceiver)
android.bluetooth.IBluetoothVolumeControl->setVolumeGroup(int,int,android.content.AttributionSource,com.android.bluetooth.x.com.android.modules.utils.SynchronousResultReceiver)
android.companion.AssociationInfo-><init>(int,int,java.lang.String,android.net.MacAddress,java.lang.CharSequence,java.lang.String,boolean,boolean,long,long)
android.content.IClipboard$Default->addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)
android.content.IClipboard$Default->clearPrimaryClip(java.lang.String,int)
android.content.IClipboard$Default->getPrimaryClip(java.lang.String,int)
android.content.IClipboard$Default->getPrimaryClipDescription(java.lang.String,int)
android.content.IClipboard$Default->getPrimaryClipSource(java.lang.String,int)
android.content.IClipboard$Default->hasClipboardText(java.lang.String,int)
android.content.IClipboard$Default->hasPrimaryClip(java.lang.String,int)
android.content.IClipboard$Default->removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)
android.content.IClipboard$Default->setPrimaryClip(android.content.ClipData,java.lang.String,int)
android.content.IClipboard$Default->setPrimaryClipAsPackage(android.content.ClipData,java.lang.String,int,java.lang.String)
android.content.IClipboard$Stub$Proxy->addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)
android.content.IClipboard$Stub$Proxy->clearPrimaryClip(java.lang.String,int)
android.content.IClipboard$Stub$Proxy->getPrimaryClip(java.lang.String,int)
android.content.IClipboard$Stub$Proxy->getPrimaryClipDescription(java.lang.String,int)
android.content.IClipboard$Stub$Proxy->getPrimaryClipSource(java.lang.String,int)
android.content.IClipboard$Stub$Proxy->hasClipboardText(java.lang.String,int)
android.content.IClipboard$Stub$Proxy->hasPrimaryClip(java.lang.String,int)
android.content.IClipboard$Stub$Proxy->removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)
android.content.IClipboard$Stub$Proxy->setPrimaryClip(android.content.ClipData,java.lang.String,int)
android.content.IClipboard$Stub$Proxy->setPrimaryClipAsPackage(android.content.ClipData,java.lang.String,int,java.lang.String)
android.content.IClipboard->addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)
android.content.IClipboard->clearPrimaryClip(java.lang.String,int)
android.content.IClipboard->getPrimaryClip(java.lang.String,int)
android.content.IClipboard->getPrimaryClipDescription(java.lang.String,int)
android.content.IClipboard->getPrimaryClipSource(java.lang.String,int)
android.content.IClipboard->hasClipboardText(java.lang.String,int)
android.content.IClipboard->hasPrimaryClip(java.lang.String,int)
android.content.IClipboard->removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)
android.content.IClipboard->setPrimaryClip(android.content.ClipData,java.lang.String,int)
android.content.IClipboard->setPrimaryClipAsPackage(android.content.ClipData,java.lang.String,int,java.lang.String)
android.content.pm.ActivityInfo->getMinAspectRatio(int)
android.content.pm.ActivityInfo->hasFixedAspectRatio(int)
android.graphics.drawable.RippleDrawable->enterPatternedBackgroundAnimation(boolean,boolean)
android.graphics.drawable.RippleDrawable->setBackgroundActive(boolean,boolean,boolean)
android.hardware.ICameraServiceProxy$Default->isCameraDisabled()
android.hardware.ICameraServiceProxy$Stub$Proxy->isCameraDisabled()
android.hardware.ICameraServiceProxy->isCameraDisabled()
android.hardware.biometrics.BiometricFingerprintConstants->shouldTurnOffHbm(int)
android.hardware.biometrics.IBiometricContextListener$Default->onDozeChanged(boolean)
android.hardware.biometrics.IBiometricContextListener$Stub$Proxy->onDozeChanged(boolean)
android.hardware.biometrics.IBiometricContextListener->onDozeChanged(boolean)
android.hardware.camera2.impl.CaptureResultExtras-><init>(int,int,int,int,long,int,int,java.lang.String,long,long,long)
android.hardware.camera2.marshal.impl.MarshalQueryableArray$PrimitiveArrayFiller->fillPosition(java.lang.Object,int,java.nio.ByteBuffer)
android.hardware.camera2.marshal.impl.MarshalQueryableArray->unmarshalPrimitiveArray(java.lang.Object,int,java.nio.ByteBuffer,android.hardware.camera2.marshal.impl.MarshalQueryableArray$PrimitiveArrayFiller)
android.hardware.display.DisplayManagerGlobal->getDisplayIds(boolean)
android.hardware.display.IDisplayManager$Default->getDisplayIds(boolean)
android.hardware.display.IDisplayManager$Stub$Proxy->getDisplayIds(boolean)
android.hardware.display.IDisplayManager->getDisplayIds(boolean)
android.hardware.radio.ProgramList->putLocked(android.hardware.radio.RadioManager$ProgramInfo)
android.hardware.radio.ProgramList->removeLocked(android.hardware.radio.ProgramSelector$Identifier)
android.media.MediaCodec->cacheBuffers(boolean)
android.media.MediaCodec->freeByteBuffer(java.nio.ByteBuffer)
android.media.MediaCodec->freeByteBuffers(java.nio.ByteBuffer[])
android.media.MediaCodec->invalidateByteBuffer(java.nio.ByteBuffer[],int)
android.media.MediaCodec->invalidateByteBuffers(java.nio.ByteBuffer[])
android.media.MediaCodec->revalidateByteBuffer(java.nio.ByteBuffer[],int)
android.media.MediaCodec->validateInputByteBuffer(java.nio.ByteBuffer[],int)
android.media.MediaCodec->validateOutputByteBuffer(java.nio.ByteBuffer[],int,android.media.MediaCodec$BufferInfo)
android.media.RingtoneManager->getRingtone(android.content.Context,android.net.Uri,int)
android.media.RingtoneManager->getRingtone(android.content.Context,android.net.Uri,int,android.media.VolumeShaper$Configuration)
android.media.projection.IMediaProjection$Default->getTaskRecordingWindowContainerToken()
android.media.projection.IMediaProjection$Default->setTaskRecordingWindowContainerToken(android.window.WindowContainerToken)
android.media.projection.IMediaProjection$Stub$Proxy->getTaskRecordingWindowContainerToken()
android.media.projection.IMediaProjection$Stub$Proxy->setTaskRecordingWindowContainerToken(android.window.WindowContainerToken)
android.media.projection.IMediaProjection->getTaskRecordingWindowContainerToken()
android.media.projection.IMediaProjection->setTaskRecordingWindowContainerToken(android.window.WindowContainerToken)
android.nearby.NearbyDeviceParcelable-><init>(int,java.lang.String,int,int,int,int,android.nearby.PublicCredential,java.lang.String,java.lang.String,byte[],byte[])
android.nearby.NearbyDeviceParcelable-><init>(int,java.lang.String,int,int,int,int,android.nearby.PublicCredential,java.lang.String,java.lang.String,byte[],byte[],android.nearby.NearbyDeviceParcelable-IA)
android.net.ConnectionInfo-><init>(int,java.net.InetSocketAddress,java.net.InetSocketAddress)
android.net.ConnectionInfo->describeContents()
android.net.ConnectionInfo->writeToParcel(android.os.Parcel,int)
android.net.ConnectivityManager->offerNetwork(int,android.net.NetworkScore,android.net.NetworkCapabilities,android.net.INetworkOfferCallback)
android.net.ConnectivityManager->unofferNetwork(android.net.INetworkOfferCallback)
android.net.ConnectivityResources-><init>(android.content.Context)
android.net.ConnectivityResources->get()
android.net.ConnectivityResources->getResourcesContext()
android.net.ConnectivityResources->setResourcesContextForTest(android.content.Context)
android.net.DnsResolverServiceManager-><init>(android.os.IBinder)
android.net.DnsResolverServiceManager->getService()
android.net.EthernetManager$TetheredInterfaceRequest-><init>(android.net.IEthernetManager,android.net.ITetheredInterfaceCallback)
android.net.EthernetManager$TetheredInterfaceRequest-><init>(android.net.IEthernetManager,android.net.ITetheredInterfaceCallback,android.net.EthernetManager$TetheredInterfaceRequest-IA)
android.net.IConnectivityManager$Default->getConnectionOwnerUid(android.net.ConnectionInfo)
android.net.IConnectivityManager$Default->offerNetwork(int,android.net.NetworkScore,android.net.NetworkCapabilities,android.net.INetworkOfferCallback)
android.net.IConnectivityManager$Default->registerNetworkActivityListener(android.net.INetworkActivityListener)
android.net.IConnectivityManager$Default->registerQosSocketCallback(android.net.QosSocketInfo,android.net.IQosCallback)
android.net.IConnectivityManager$Default->setOemNetworkPreference(android.net.OemNetworkPreferences,android.net.IOnCompleteListener)
android.net.IConnectivityManager$Default->setProfileNetworkPreferences(android.os.UserHandle,java.util.List,android.net.IOnCompleteListener)
android.net.IConnectivityManager$Default->startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)
android.net.IConnectivityManager$Default->startNattKeepaliveWithFd(android.net.Network,android.os.ParcelFileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)
android.net.IConnectivityManager$Default->startTcpKeepalive(android.net.Network,android.os.ParcelFileDescriptor,int,android.net.ISocketKeepaliveCallback)
android.net.IConnectivityManager$Default->unofferNetwork(android.net.INetworkOfferCallback)
android.net.IConnectivityManager$Default->unregisterNetworkActivityListener(android.net.INetworkActivityListener)
android.net.IConnectivityManager$Default->unregisterQosCallback(android.net.IQosCallback)
android.net.IConnectivityManager$Stub$Proxy->getConnectionOwnerUid(android.net.ConnectionInfo)
android.net.IConnectivityManager$Stub$Proxy->offerNetwork(int,android.net.NetworkScore,android.net.NetworkCapabilities,android.net.INetworkOfferCallback)
android.net.IConnectivityManager$Stub$Proxy->registerNetworkActivityListener(android.net.INetworkActivityListener)
android.net.IConnectivityManager$Stub$Proxy->registerQosSocketCallback(android.net.QosSocketInfo,android.net.IQosCallback)
android.net.IConnectivityManager$Stub$Proxy->setOemNetworkPreference(android.net.OemNetworkPreferences,android.net.IOnCompleteListener)
android.net.IConnectivityManager$Stub$Proxy->setProfileNetworkPreferences(android.os.UserHandle,java.util.List,android.net.IOnCompleteListener)
android.net.IConnectivityManager$Stub$Proxy->startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)
android.net.IConnectivityManager$Stub$Proxy->startNattKeepaliveWithFd(android.net.Network,android.os.ParcelFileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)
android.net.IConnectivityManager$Stub$Proxy->startTcpKeepalive(android.net.Network,android.os.ParcelFileDescriptor,int,android.net.ISocketKeepaliveCallback)
android.net.IConnectivityManager$Stub$Proxy->unofferNetwork(android.net.INetworkOfferCallback)
android.net.IConnectivityManager$Stub$Proxy->unregisterNetworkActivityListener(android.net.INetworkActivityListener)
android.net.IConnectivityManager$Stub$Proxy->unregisterQosCallback(android.net.IQosCallback)
android.net.IConnectivityManager->getConnectionOwnerUid(android.net.ConnectionInfo)
android.net.IConnectivityManager->offerNetwork(int,android.net.NetworkScore,android.net.NetworkCapabilities,android.net.INetworkOfferCallback)
android.net.IConnectivityManager->registerNetworkActivityListener(android.net.INetworkActivityListener)
android.net.IConnectivityManager->registerQosSocketCallback(android.net.QosSocketInfo,android.net.IQosCallback)
android.net.IConnectivityManager->setOemNetworkPreference(android.net.OemNetworkPreferences,android.net.IOnCompleteListener)
android.net.IConnectivityManager->setProfileNetworkPreferences(android.os.UserHandle,java.util.List,android.net.IOnCompleteListener)
android.net.IConnectivityManager->startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)
android.net.IConnectivityManager->startNattKeepaliveWithFd(android.net.Network,android.os.ParcelFileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)
android.net.IConnectivityManager->startTcpKeepalive(android.net.Network,android.os.ParcelFileDescriptor,int,android.net.ISocketKeepaliveCallback)
android.net.IConnectivityManager->unofferNetwork(android.net.INetworkOfferCallback)
android.net.IConnectivityManager->unregisterNetworkActivityListener(android.net.INetworkActivityListener)
android.net.IConnectivityManager->unregisterQosCallback(android.net.IQosCallback)
android.net.IEthernetManager$Default->connectNetwork(java.lang.String,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager$Default->disconnectNetwork(java.lang.String,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager$Default->releaseTetheredInterface(android.net.ITetheredInterfaceCallback)
android.net.IEthernetManager$Default->requestTetheredInterface(android.net.ITetheredInterfaceCallback)
android.net.IEthernetManager$Default->updateConfiguration(java.lang.String,android.net.EthernetNetworkUpdateRequest,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager$Stub$Proxy->connectNetwork(java.lang.String,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager$Stub$Proxy->disconnectNetwork(java.lang.String,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager$Stub$Proxy->releaseTetheredInterface(android.net.ITetheredInterfaceCallback)
android.net.IEthernetManager$Stub$Proxy->requestTetheredInterface(android.net.ITetheredInterfaceCallback)
android.net.IEthernetManager$Stub$Proxy->updateConfiguration(java.lang.String,android.net.EthernetNetworkUpdateRequest,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager->connectNetwork(java.lang.String,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager->disconnectNetwork(java.lang.String,android.net.INetworkInterfaceOutcomeReceiver)
android.net.IEthernetManager->releaseTetheredInterface(android.net.ITetheredInterfaceCallback)
android.net.IEthernetManager->requestTetheredInterface(android.net.ITetheredInterfaceCallback)
android.net.IEthernetManager->updateConfiguration(java.lang.String,android.net.EthernetNetworkUpdateRequest,android.net.INetworkInterfaceOutcomeReceiver)
android.net.INetworkActivityListener$Default-><init>()
android.net.INetworkActivityListener$Default->asBinder()
android.net.INetworkActivityListener$Default->onNetworkActive()
android.net.INetworkActivityListener$Stub$Proxy-><init>(android.os.IBinder)
android.net.INetworkActivityListener$Stub$Proxy->asBinder()
android.net.INetworkActivityListener$Stub$Proxy->getInterfaceDescriptor()
android.net.INetworkActivityListener$Stub$Proxy->onNetworkActive()
android.net.INetworkActivityListener$Stub-><init>()
android.net.INetworkActivityListener$Stub->asBinder()
android.net.INetworkActivityListener$Stub->asInterface(android.os.IBinder)
android.net.INetworkActivityListener$Stub->getDefaultTransactionName(int)
android.net.INetworkActivityListener$Stub->getMaxTransactionId()
android.net.INetworkActivityListener$Stub->getTransactionName(int)
android.net.INetworkActivityListener$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.INetworkActivityListener->onNetworkActive()
android.net.INetworkAgent$Default->onQosFilterCallbackRegistered(int,android.net.QosFilterParcelable)
android.net.INetworkAgent$Stub$Proxy->onQosFilterCallbackRegistered(int,android.net.QosFilterParcelable)
android.net.INetworkAgent->onQosFilterCallbackRegistered(int,android.net.QosFilterParcelable)
android.net.INetworkInterfaceOutcomeReceiver$Default-><init>()
android.net.INetworkInterfaceOutcomeReceiver$Default->asBinder()
android.net.INetworkInterfaceOutcomeReceiver$Default->onError(android.net.EthernetNetworkManagementException)
android.net.INetworkInterfaceOutcomeReceiver$Default->onResult(java.lang.String)
android.net.INetworkInterfaceOutcomeReceiver$Stub$Proxy-><init>(android.os.IBinder)
android.net.INetworkInterfaceOutcomeReceiver$Stub$Proxy->asBinder()
android.net.INetworkInterfaceOutcomeReceiver$Stub$Proxy->getInterfaceDescriptor()
android.net.INetworkInterfaceOutcomeReceiver$Stub$Proxy->onError(android.net.EthernetNetworkManagementException)
android.net.INetworkInterfaceOutcomeReceiver$Stub$Proxy->onResult(java.lang.String)
android.net.INetworkInterfaceOutcomeReceiver$Stub-><init>()
android.net.INetworkInterfaceOutcomeReceiver$Stub->asBinder()
android.net.INetworkInterfaceOutcomeReceiver$Stub->asInterface(android.os.IBinder)
android.net.INetworkInterfaceOutcomeReceiver$Stub->getDefaultTransactionName(int)
android.net.INetworkInterfaceOutcomeReceiver$Stub->getMaxTransactionId()
android.net.INetworkInterfaceOutcomeReceiver$Stub->getTransactionName(int)
android.net.INetworkInterfaceOutcomeReceiver$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.INetworkInterfaceOutcomeReceiver->onError(android.net.EthernetNetworkManagementException)
android.net.INetworkInterfaceOutcomeReceiver->onResult(java.lang.String)
android.net.INetworkOfferCallback$Default-><init>()
android.net.INetworkOfferCallback$Default->asBinder()
android.net.INetworkOfferCallback$Default->onNetworkNeeded(android.net.NetworkRequest)
android.net.INetworkOfferCallback$Default->onNetworkUnneeded(android.net.NetworkRequest)
android.net.INetworkOfferCallback$Stub$Proxy-><init>(android.os.IBinder)
android.net.INetworkOfferCallback$Stub$Proxy->asBinder()
android.net.INetworkOfferCallback$Stub$Proxy->getInterfaceDescriptor()
android.net.INetworkOfferCallback$Stub$Proxy->onNetworkNeeded(android.net.NetworkRequest)
android.net.INetworkOfferCallback$Stub$Proxy->onNetworkUnneeded(android.net.NetworkRequest)
android.net.INetworkOfferCallback$Stub-><init>()
android.net.INetworkOfferCallback$Stub->asBinder()
android.net.INetworkOfferCallback$Stub->asInterface(android.os.IBinder)
android.net.INetworkOfferCallback$Stub->getDefaultTransactionName(int)
android.net.INetworkOfferCallback$Stub->getMaxTransactionId()
android.net.INetworkOfferCallback$Stub->getTransactionName(int)
android.net.INetworkOfferCallback$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.INetworkOfferCallback->onNetworkNeeded(android.net.NetworkRequest)
android.net.INetworkOfferCallback->onNetworkUnneeded(android.net.NetworkRequest)
android.net.INetworkStatsService$Default->registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.net.netstats.IUsageCallback)
android.net.INetworkStatsService$Stub$Proxy->registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.net.netstats.IUsageCallback)
android.net.INetworkStatsService->registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.net.netstats.IUsageCallback)
android.net.IOnCompleteListener$Default-><init>()
android.net.IOnCompleteListener$Default->asBinder()
android.net.IOnCompleteListener$Default->onComplete()
android.net.IOnCompleteListener$Stub$Proxy-><init>(android.os.IBinder)
android.net.IOnCompleteListener$Stub$Proxy->asBinder()
android.net.IOnCompleteListener$Stub$Proxy->getInterfaceDescriptor()
android.net.IOnCompleteListener$Stub$Proxy->onComplete()
android.net.IOnCompleteListener$Stub-><init>()
android.net.IOnCompleteListener$Stub->asBinder()
android.net.IOnCompleteListener$Stub->asInterface(android.os.IBinder)
android.net.IOnCompleteListener$Stub->getDefaultTransactionName(int)
android.net.IOnCompleteListener$Stub->getMaxTransactionId()
android.net.IOnCompleteListener$Stub->getTransactionName(int)
android.net.IOnCompleteListener$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.IOnCompleteListener->onComplete()
android.net.IQosCallback$Default-><init>()
android.net.IQosCallback$Default->asBinder()
android.net.IQosCallback$Default->onError(int)
android.net.IQosCallback$Default->onNrQosSessionAvailable(android.net.QosSession,android.telephony.data.NrQosSessionAttributes)
android.net.IQosCallback$Default->onQosEpsBearerSessionAvailable(android.net.QosSession,android.telephony.data.EpsBearerQosSessionAttributes)
android.net.IQosCallback$Default->onQosSessionLost(android.net.QosSession)
android.net.IQosCallback$Stub$Proxy-><init>(android.os.IBinder)
android.net.IQosCallback$Stub$Proxy->asBinder()
android.net.IQosCallback$Stub$Proxy->getInterfaceDescriptor()
android.net.IQosCallback$Stub$Proxy->onError(int)
android.net.IQosCallback$Stub$Proxy->onNrQosSessionAvailable(android.net.QosSession,android.telephony.data.NrQosSessionAttributes)
android.net.IQosCallback$Stub$Proxy->onQosEpsBearerSessionAvailable(android.net.QosSession,android.telephony.data.EpsBearerQosSessionAttributes)
android.net.IQosCallback$Stub$Proxy->onQosSessionLost(android.net.QosSession)
android.net.IQosCallback$Stub-><init>()
android.net.IQosCallback$Stub->asBinder()
android.net.IQosCallback$Stub->asInterface(android.os.IBinder)
android.net.IQosCallback$Stub->getDefaultTransactionName(int)
android.net.IQosCallback$Stub->getMaxTransactionId()
android.net.IQosCallback$Stub->getTransactionName(int)
android.net.IQosCallback$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.IQosCallback->onError(int)
android.net.IQosCallback->onNrQosSessionAvailable(android.net.QosSession,android.telephony.data.NrQosSessionAttributes)
android.net.IQosCallback->onQosEpsBearerSessionAvailable(android.net.QosSession,android.telephony.data.EpsBearerQosSessionAttributes)
android.net.IQosCallback->onQosSessionLost(android.net.QosSession)
android.net.ISocketKeepaliveCallback$Default-><init>()
android.net.ISocketKeepaliveCallback$Default->asBinder()
android.net.ISocketKeepaliveCallback$Default->onDataReceived()
android.net.ISocketKeepaliveCallback$Default->onError(int)
android.net.ISocketKeepaliveCallback$Default->onStarted(int)
android.net.ISocketKeepaliveCallback$Default->onStopped()
android.net.ISocketKeepaliveCallback$Stub$Proxy-><init>(android.os.IBinder)
android.net.ISocketKeepaliveCallback$Stub$Proxy->asBinder()
android.net.ISocketKeepaliveCallback$Stub$Proxy->getInterfaceDescriptor()
android.net.ISocketKeepaliveCallback$Stub$Proxy->onDataReceived()
android.net.ISocketKeepaliveCallback$Stub$Proxy->onError(int)
android.net.ISocketKeepaliveCallback$Stub$Proxy->onStarted(int)
android.net.ISocketKeepaliveCallback$Stub$Proxy->onStopped()
android.net.ISocketKeepaliveCallback$Stub-><init>()
android.net.ISocketKeepaliveCallback$Stub->asBinder()
android.net.ISocketKeepaliveCallback$Stub->asInterface(android.os.IBinder)
android.net.ISocketKeepaliveCallback$Stub->getDefaultTransactionName(int)
android.net.ISocketKeepaliveCallback$Stub->getMaxTransactionId()
android.net.ISocketKeepaliveCallback$Stub->getTransactionName(int)
android.net.ISocketKeepaliveCallback$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.ISocketKeepaliveCallback->onDataReceived()
android.net.ISocketKeepaliveCallback->onError(int)
android.net.ISocketKeepaliveCallback->onStarted(int)
android.net.ISocketKeepaliveCallback->onStopped()
android.net.ITestNetworkManager$Default-><init>()
android.net.ITestNetworkManager$Default->asBinder()
android.net.ITestNetworkManager$Default->createInterface(boolean,boolean,android.net.LinkAddress[],java.lang.String)
android.net.ITestNetworkManager$Default->setupTestNetwork(java.lang.String,android.net.LinkProperties,boolean,int[],android.os.IBinder)
android.net.ITestNetworkManager$Default->teardownTestNetwork(int)
android.net.ITestNetworkManager$Stub$Proxy-><init>(android.os.IBinder)
android.net.ITestNetworkManager$Stub$Proxy->asBinder()
android.net.ITestNetworkManager$Stub$Proxy->createInterface(boolean,boolean,android.net.LinkAddress[],java.lang.String)
android.net.ITestNetworkManager$Stub$Proxy->getInterfaceDescriptor()
android.net.ITestNetworkManager$Stub$Proxy->setupTestNetwork(java.lang.String,android.net.LinkProperties,boolean,int[],android.os.IBinder)
android.net.ITestNetworkManager$Stub$Proxy->teardownTestNetwork(int)
android.net.ITestNetworkManager$Stub-><init>()
android.net.ITestNetworkManager$Stub->asBinder()
android.net.ITestNetworkManager$Stub->asInterface(android.os.IBinder)
android.net.ITestNetworkManager$Stub->getDefaultTransactionName(int)
android.net.ITestNetworkManager$Stub->getMaxTransactionId()
android.net.ITestNetworkManager$Stub->getTransactionName(int)
android.net.ITestNetworkManager$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.ITestNetworkManager->createInterface(boolean,boolean,android.net.LinkAddress[],java.lang.String)
android.net.ITestNetworkManager->setupTestNetwork(java.lang.String,android.net.LinkProperties,boolean,int[],android.os.IBinder)
android.net.ITestNetworkManager->teardownTestNetwork(int)
android.net.ITetheredInterfaceCallback$Default-><init>()
android.net.ITetheredInterfaceCallback$Default->asBinder()
android.net.ITetheredInterfaceCallback$Default->onAvailable(java.lang.String)
android.net.ITetheredInterfaceCallback$Default->onUnavailable()
android.net.ITetheredInterfaceCallback$Stub$Proxy-><init>(android.os.IBinder)
android.net.ITetheredInterfaceCallback$Stub$Proxy->asBinder()
android.net.ITetheredInterfaceCallback$Stub$Proxy->getInterfaceDescriptor()
android.net.ITetheredInterfaceCallback$Stub$Proxy->onAvailable(java.lang.String)
android.net.ITetheredInterfaceCallback$Stub$Proxy->onUnavailable()
android.net.ITetheredInterfaceCallback$Stub-><init>()
android.net.ITetheredInterfaceCallback$Stub->asBinder()
android.net.ITetheredInterfaceCallback$Stub->asInterface(android.os.IBinder)
android.net.ITetheredInterfaceCallback$Stub->getDefaultTransactionName(int)
android.net.ITetheredInterfaceCallback$Stub->getMaxTransactionId()
android.net.ITetheredInterfaceCallback$Stub->getTransactionName(int)
android.net.ITetheredInterfaceCallback$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.ITetheredInterfaceCallback->onAvailable(java.lang.String)
android.net.ITetheredInterfaceCallback->onUnavailable()
android.net.NattSocketKeepalive-><init>(android.net.IConnectivityManager,android.net.Network,android.os.ParcelFileDescriptor,int,java.net.InetAddress,java.net.InetAddress,java.util.concurrent.Executor,android.net.SocketKeepalive$Callback)
android.net.NattSocketKeepalive->startImpl(int)
android.net.NattSocketKeepalive->stopImpl()
android.net.NetworkAgent$NetworkAgentBinder->onQosFilterCallbackRegistered(int,android.net.QosFilterParcelable)
android.net.NetworkIdentitySet-><init>()
android.net.NetworkIdentitySet-><init>(java.io.DataInput)
android.net.NetworkIdentitySet-><init>(java.util.Set)
android.net.NetworkIdentitySet->areAllMembersOnDefaultNetwork()
android.net.NetworkIdentitySet->compare(android.net.NetworkIdentitySet,android.net.NetworkIdentitySet)
android.net.NetworkIdentitySet->dumpDebug(android.util.proto.ProtoOutputStream,long)
android.net.NetworkIdentitySet->isAnyMemberMetered()
android.net.NetworkIdentitySet->isAnyMemberRoaming()
android.net.NetworkIdentitySet->readOptionalString(java.io.DataInput)
android.net.NetworkIdentitySet->writeOptionalString(java.io.DataOutput,java.lang.String)
android.net.NetworkIdentitySet->writeToStream(java.io.DataOutput)
android.net.NetworkStats$Entry-><init>(java.lang.String,int,int,int,long,long,long,long,long)
android.net.NetworkStats$Entry-><init>(long,long,long,long,long)
android.net.NetworkStatsAccess-><init>()
android.net.NetworkStatsAccess->checkAccessLevel(android.content.Context,int,int,java.lang.String)
android.net.NetworkStatsAccess->hasAppOpsPermission(android.content.Context,int,java.lang.String)
android.net.NetworkStatsAccess->isAccessibleToUser(int,int,int)
android.net.NetworkStatsCollection$Key-><init>(android.net.NetworkIdentitySet,int,int,int)
android.net.NetworkStatsCollection->findOrCreateHistory(android.net.NetworkIdentitySet,int,int,int)
android.net.NetworkStatsCollection->recordData(android.net.NetworkIdentitySet,int,int,int,long,long,android.net.NetworkStats$Entry)
android.net.NetworkStatsCollection->templateMatches(android.net.NetworkTemplate,android.net.NetworkIdentitySet)
android.net.QosCallbackConnection-><init>(android.net.ConnectivityManager,android.net.QosCallback,java.util.concurrent.Executor)
android.net.QosCallbackConnection->getCallback()
android.net.QosCallbackConnection->onError(int)
android.net.QosCallbackConnection->onNrQosSessionAvailable(android.net.QosSession,android.telephony.data.NrQosSessionAttributes)
android.net.QosCallbackConnection->onQosEpsBearerSessionAvailable(android.net.QosSession,android.telephony.data.EpsBearerQosSessionAttributes)
android.net.QosCallbackConnection->onQosSessionLost(android.net.QosSession)
android.net.QosCallbackConnection->stopReceivingMessages()
android.net.QosFilterParcelable-><init>(android.net.QosFilter)
android.net.QosFilterParcelable-><init>(android.os.Parcel)
android.net.QosFilterParcelable-><init>(android.os.Parcel,android.net.QosFilterParcelable-IA)
android.net.QosFilterParcelable->describeContents()
android.net.QosFilterParcelable->getQosFilter()
android.net.QosFilterParcelable->writeToParcel(android.os.Parcel,int)
android.net.QosSocketFilter-><init>(android.net.QosSocketInfo)
android.net.QosSocketFilter->getAddressFromFileDescriptor()
android.net.QosSocketFilter->getNetwork()
android.net.QosSocketFilter->getQosSocketInfo()
android.net.QosSocketFilter->matchesAddress(java.net.InetSocketAddress,java.net.InetAddress,int,int)
android.net.QosSocketFilter->matchesLocalAddress(java.net.InetAddress,int,int)
android.net.QosSocketFilter->matchesRemoteAddress(java.net.InetAddress,int,int)
android.net.QosSocketFilter->validate()
android.net.QosSocketInfo->readSocketAddress(android.os.Parcel,int)
android.net.TcpRepairWindow-><init>(int,int,int,int,int,int)
android.net.TcpSocketKeepalive-><init>(android.net.IConnectivityManager,android.net.Network,android.os.ParcelFileDescriptor,java.util.concurrent.Executor,android.net.SocketKeepalive$Callback)
android.net.TcpSocketKeepalive->startImpl(int)
android.net.TcpSocketKeepalive->stopImpl()
android.net.TestNetworkManager-><init>(android.net.ITestNetworkManager)
android.net.netstats.IUsageCallback$Default-><init>()
android.net.netstats.IUsageCallback$Default->asBinder()
android.net.netstats.IUsageCallback$Default->onCallbackReleased(android.net.DataUsageRequest)
android.net.netstats.IUsageCallback$Default->onThresholdReached(android.net.DataUsageRequest)
android.net.netstats.IUsageCallback$Stub$Proxy-><init>(android.os.IBinder)
android.net.netstats.IUsageCallback$Stub$Proxy->asBinder()
android.net.netstats.IUsageCallback$Stub$Proxy->getInterfaceDescriptor()
android.net.netstats.IUsageCallback$Stub$Proxy->onCallbackReleased(android.net.DataUsageRequest)
android.net.netstats.IUsageCallback$Stub$Proxy->onThresholdReached(android.net.DataUsageRequest)
android.net.netstats.IUsageCallback$Stub-><init>()
android.net.netstats.IUsageCallback$Stub->asBinder()
android.net.netstats.IUsageCallback$Stub->asInterface(android.os.IBinder)
android.net.netstats.IUsageCallback$Stub->getDefaultTransactionName(int)
android.net.netstats.IUsageCallback$Stub->getMaxTransactionId()
android.net.netstats.IUsageCallback$Stub->getTransactionName(int)
android.net.netstats.IUsageCallback$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.netstats.IUsageCallback->onCallbackReleased(android.net.DataUsageRequest)
android.net.netstats.IUsageCallback->onThresholdReached(android.net.DataUsageRequest)
android.net.nsd.INsdManager$Default->connect(android.net.nsd.INsdManagerCallback)
android.net.nsd.INsdManager$Stub$Proxy->connect(android.net.nsd.INsdManagerCallback)
android.net.nsd.INsdManager->connect(android.net.nsd.INsdManagerCallback)
android.net.nsd.INsdManagerCallback$Default-><init>()
android.net.nsd.INsdManagerCallback$Default->asBinder()
android.net.nsd.INsdManagerCallback$Default->onDiscoverServicesFailed(int,int)
android.net.nsd.INsdManagerCallback$Default->onDiscoverServicesStarted(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Default->onRegisterServiceFailed(int,int)
android.net.nsd.INsdManagerCallback$Default->onRegisterServiceSucceeded(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Default->onResolveServiceFailed(int,int)
android.net.nsd.INsdManagerCallback$Default->onResolveServiceSucceeded(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Default->onServiceFound(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Default->onServiceLost(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Default->onStopDiscoveryFailed(int,int)
android.net.nsd.INsdManagerCallback$Default->onStopDiscoverySucceeded(int)
android.net.nsd.INsdManagerCallback$Default->onUnregisterServiceFailed(int,int)
android.net.nsd.INsdManagerCallback$Default->onUnregisterServiceSucceeded(int)
android.net.nsd.INsdManagerCallback$Stub$Proxy-><init>(android.os.IBinder)
android.net.nsd.INsdManagerCallback$Stub$Proxy->asBinder()
android.net.nsd.INsdManagerCallback$Stub$Proxy->getInterfaceDescriptor()
android.net.nsd.INsdManagerCallback$Stub$Proxy->onDiscoverServicesFailed(int,int)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onDiscoverServicesStarted(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onRegisterServiceFailed(int,int)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onRegisterServiceSucceeded(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onResolveServiceFailed(int,int)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onResolveServiceSucceeded(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onServiceFound(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onServiceLost(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onStopDiscoveryFailed(int,int)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onStopDiscoverySucceeded(int)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onUnregisterServiceFailed(int,int)
android.net.nsd.INsdManagerCallback$Stub$Proxy->onUnregisterServiceSucceeded(int)
android.net.nsd.INsdManagerCallback$Stub-><init>()
android.net.nsd.INsdManagerCallback$Stub->asBinder()
android.net.nsd.INsdManagerCallback$Stub->asInterface(android.os.IBinder)
android.net.nsd.INsdManagerCallback$Stub->getDefaultTransactionName(int)
android.net.nsd.INsdManagerCallback$Stub->getMaxTransactionId()
android.net.nsd.INsdManagerCallback$Stub->getTransactionName(int)
android.net.nsd.INsdManagerCallback$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.nsd.INsdManagerCallback->onDiscoverServicesFailed(int,int)
android.net.nsd.INsdManagerCallback->onDiscoverServicesStarted(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback->onRegisterServiceFailed(int,int)
android.net.nsd.INsdManagerCallback->onRegisterServiceSucceeded(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback->onResolveServiceFailed(int,int)
android.net.nsd.INsdManagerCallback->onResolveServiceSucceeded(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback->onServiceFound(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback->onServiceLost(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdManagerCallback->onStopDiscoveryFailed(int,int)
android.net.nsd.INsdManagerCallback->onStopDiscoverySucceeded(int)
android.net.nsd.INsdManagerCallback->onUnregisterServiceFailed(int,int)
android.net.nsd.INsdManagerCallback->onUnregisterServiceSucceeded(int)
android.net.nsd.INsdServiceConnector$Default-><init>()
android.net.nsd.INsdServiceConnector$Default->asBinder()
android.net.nsd.INsdServiceConnector$Default->discoverServices(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector$Default->registerService(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector$Default->resolveService(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector$Default->startDaemon()
android.net.nsd.INsdServiceConnector$Default->stopDiscovery(int)
android.net.nsd.INsdServiceConnector$Default->unregisterService(int)
android.net.nsd.INsdServiceConnector$Stub$Proxy-><init>(android.os.IBinder)
android.net.nsd.INsdServiceConnector$Stub$Proxy->asBinder()
android.net.nsd.INsdServiceConnector$Stub$Proxy->discoverServices(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector$Stub$Proxy->getInterfaceDescriptor()
android.net.nsd.INsdServiceConnector$Stub$Proxy->registerService(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector$Stub$Proxy->resolveService(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector$Stub$Proxy->startDaemon()
android.net.nsd.INsdServiceConnector$Stub$Proxy->stopDiscovery(int)
android.net.nsd.INsdServiceConnector$Stub$Proxy->unregisterService(int)
android.net.nsd.INsdServiceConnector$Stub-><init>()
android.net.nsd.INsdServiceConnector$Stub->asBinder()
android.net.nsd.INsdServiceConnector$Stub->asInterface(android.os.IBinder)
android.net.nsd.INsdServiceConnector$Stub->getDefaultTransactionName(int)
android.net.nsd.INsdServiceConnector$Stub->getMaxTransactionId()
android.net.nsd.INsdServiceConnector$Stub->getTransactionName(int)
android.net.nsd.INsdServiceConnector$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.net.nsd.INsdServiceConnector->discoverServices(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector->registerService(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector->resolveService(int,android.net.nsd.NsdServiceInfo)
android.net.nsd.INsdServiceConnector->startDaemon()
android.net.nsd.INsdServiceConnector->stopDiscovery(int)
android.net.nsd.INsdServiceConnector->unregisterService(int)
android.net.nsd.MDnsManager-><init>(android.net.connectivity.android.net.mdns.aidl.IMDns)
android.net.nsd.MDnsManager->discover(int,java.lang.String,int)
android.net.nsd.MDnsManager->getServiceAddress(int,java.lang.String,int)
android.net.nsd.MDnsManager->registerEventListener(android.net.connectivity.android.net.mdns.aidl.IMDnsEventListener)
android.net.nsd.MDnsManager->registerService(int,java.lang.String,java.lang.String,int,byte[],int)
android.net.nsd.MDnsManager->resolve(int,java.lang.String,java.lang.String,java.lang.String,int)
android.net.nsd.MDnsManager->startDaemon()
android.net.nsd.MDnsManager->stopDaemon()
android.net.nsd.MDnsManager->stopOperation(int)
android.net.nsd.MDnsManager->unregisterEventListener(android.net.connectivity.android.net.mdns.aidl.IMDnsEventListener)
android.net.util.DnsUtils$Rfc6724Comparator-><init>()
android.net.util.DnsUtils$Rfc6724Comparator->compare(android.net.util.DnsUtils$SortableAddress,android.net.util.DnsUtils$SortableAddress)
android.net.util.DnsUtils$Rfc6724Comparator->compare(java.lang.Object,java.lang.Object)
android.net.util.DnsUtils$SortableAddress-><init>(java.net.InetAddress,java.net.InetAddress)
android.net.util.DnsUtils-><init>()
android.net.util.DnsUtils->checkConnectivity(android.net.Network,int,java.net.SocketAddress)
android.net.util.DnsUtils->compareIpv6PrefixMatchLen(java.net.InetAddress,java.net.InetAddress)
android.net.util.DnsUtils->findLabel(java.net.InetAddress)
android.net.util.DnsUtils->findPrecedence(java.net.InetAddress)
android.net.util.DnsUtils->findScope(java.net.InetAddress)
android.net.util.DnsUtils->findSrcAddress(android.net.Network,java.net.InetAddress)
android.net.util.DnsUtils->getIpv6MulticastScope(java.net.InetAddress)
android.net.util.DnsUtils->haveIpv4(android.net.Network)
android.net.util.DnsUtils->haveIpv6(android.net.Network)
android.net.util.DnsUtils->isIpv4Address(java.net.InetAddress)
android.net.util.DnsUtils->isIpv6Address(java.net.InetAddress)
android.net.util.DnsUtils->isIpv6Address6Bone(java.net.InetAddress)
android.net.util.DnsUtils->isIpv6Address6To4(java.net.InetAddress)
android.net.util.DnsUtils->isIpv6AddressTeredo(java.net.InetAddress)
android.net.util.DnsUtils->isIpv6AddressULA(java.net.InetAddress)
android.net.util.DnsUtils->rfc6724Sort(android.net.Network,java.util.List)
android.net.util.MultinetworkPolicyTracker$ActiveDataSubscriptionIdListener-><init>(android.net.util.MultinetworkPolicyTracker)
android.net.util.MultinetworkPolicyTracker$ActiveDataSubscriptionIdListener->onActiveDataSubscriptionIdChanged(int)
android.net.util.MultinetworkPolicyTracker$HandlerExecutor-><init>(android.os.Handler)
android.net.util.MultinetworkPolicyTracker$HandlerExecutor->execute(java.lang.Runnable)
android.net.util.MultinetworkPolicyTracker$SettingObserver-><init>(android.net.util.MultinetworkPolicyTracker)
android.net.util.MultinetworkPolicyTracker$SettingObserver->onChange(boolean)
android.net.util.MultinetworkPolicyTracker$SettingObserver->onChange(boolean,android.net.Uri)
android.net.util.MultinetworkPolicyTracker-><init>(android.content.Context,android.os.Handler)
android.net.util.MultinetworkPolicyTracker-><init>(android.content.Context,android.os.Handler,java.lang.Runnable)
android.net.util.MultinetworkPolicyTracker->configMeteredMultipathPreference()
android.net.util.MultinetworkPolicyTracker->configRestrictsAvoidBadWifi()
android.net.util.MultinetworkPolicyTracker->getAvoidBadWifi()
android.net.util.MultinetworkPolicyTracker->getAvoidBadWifiSetting()
android.net.util.MultinetworkPolicyTracker->getMeteredMultipathPreference()
android.net.util.MultinetworkPolicyTracker->getResourcesForActiveSubId()
android.net.util.MultinetworkPolicyTracker->reevaluate()
android.net.util.MultinetworkPolicyTracker->reevaluateInternal()
android.net.util.MultinetworkPolicyTracker->setTestAllowBadWifiUntil(long)
android.net.util.MultinetworkPolicyTracker->shouldNotifyWifiUnvalidated()
android.net.util.MultinetworkPolicyTracker->shutdown()
android.net.util.MultinetworkPolicyTracker->start()
android.net.util.MultinetworkPolicyTracker->updateAvoidBadWifi()
android.net.util.MultinetworkPolicyTracker->updateMeteredMultipathPreference()
android.net.wifi.BaseWifiService->addOrUpdateNetwork(android.net.wifi.WifiConfiguration,java.lang.String)
android.net.wifi.BaseWifiService->getConfiguredNetworks(java.lang.String,java.lang.String)
android.net.wifi.BaseWifiService->removeNetworkSuggestions(java.util.List,java.lang.String)
android.nfc.INfcTag$Default->setTagUpToDate(long)
android.nfc.INfcTag$Stub$Proxy->setTagUpToDate(long)
android.nfc.INfcTag->setTagUpToDate(long)
android.nfc.Tag-><init>(byte[],int[],android.os.Bundle[],int,android.nfc.INfcTag)
android.nfc.Tag->createMockTag(byte[],int[],android.os.Bundle[])
android.os.IVibratorManagerService$Default->vibrate(int,java.lang.String,android.os.CombinedVibration,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)
android.os.IVibratorManagerService$Stub$Proxy->vibrate(int,java.lang.String,android.os.CombinedVibration,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)
android.os.IVibratorManagerService->vibrate(int,java.lang.String,android.os.CombinedVibration,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)
android.os.IVold$Default->setGCUrgentPace(int,int,float,float,int)
android.os.IVold$Stub$Proxy->setGCUrgentPace(int,int,float,float,int)
android.os.IVold->setGCUrgentPace(int,int,float,float,int)
android.os.UserManager->isGuestUserEphemeral()
android.safetycenter.ISafetyCenterManager$Default->addOnSafetyCenterDataChangedListener(android.safetycenter.IOnSafetyCenterDataChangedListener,int)
android.safetycenter.ISafetyCenterManager$Default->getSafetyCenterData(int)
android.safetycenter.ISafetyCenterManager$Stub$Proxy->addOnSafetyCenterDataChangedListener(android.safetycenter.IOnSafetyCenterDataChangedListener,int)
android.safetycenter.ISafetyCenterManager$Stub$Proxy->getSafetyCenterData(int)
android.safetycenter.ISafetyCenterManager->addOnSafetyCenterDataChangedListener(android.safetycenter.IOnSafetyCenterDataChangedListener,int)
android.safetycenter.ISafetyCenterManager->getSafetyCenterData(int)
android.safetycenter.SafetySourceData$Builder->getIssuesMaxSeverityLevel(java.util.List)
android.security.identity.Util->integerCollectionToArray(java.util.Collection)
android.service.dreams.DreamActivity->finishAndRemoveTask()
android.service.dreams.DreamActivity->onResume()
android.uwb.SessionHandle-><init>(int)
android.view.IDisplayWindowInsetsController$Default->topFocusedWindowChanged(java.lang.String,android.view.InsetsVisibilities)
android.view.IDisplayWindowInsetsController$Stub$Proxy->topFocusedWindowChanged(java.lang.String,android.view.InsetsVisibilities)
android.view.IDisplayWindowInsetsController->topFocusedWindowChanged(java.lang.String,android.view.InsetsVisibilities)
android.view.IDisplayWindowRotationCallback$Default-><init>()
android.view.IDisplayWindowRotationCallback$Default->asBinder()
android.view.IDisplayWindowRotationCallback$Default->continueRotateDisplay(int,android.window.WindowContainerTransaction)
android.view.IDisplayWindowRotationCallback$Stub$Proxy-><init>(android.os.IBinder)
android.view.IDisplayWindowRotationCallback$Stub$Proxy->asBinder()
android.view.IDisplayWindowRotationCallback$Stub$Proxy->continueRotateDisplay(int,android.window.WindowContainerTransaction)
android.view.IDisplayWindowRotationCallback$Stub$Proxy->getInterfaceDescriptor()
android.view.IDisplayWindowRotationCallback$Stub-><init>()
android.view.IDisplayWindowRotationCallback$Stub->asBinder()
android.view.IDisplayWindowRotationCallback$Stub->asInterface(android.os.IBinder)
android.view.IDisplayWindowRotationCallback$Stub->getDefaultTransactionName(int)
android.view.IDisplayWindowRotationCallback$Stub->getMaxTransactionId()
android.view.IDisplayWindowRotationCallback$Stub->getTransactionName(int)
android.view.IDisplayWindowRotationCallback$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.view.IDisplayWindowRotationCallback->continueRotateDisplay(int,android.window.WindowContainerTransaction)
android.view.IDisplayWindowRotationController$Default-><init>()
android.view.IDisplayWindowRotationController$Default->asBinder()
android.view.IDisplayWindowRotationController$Default->onRotateDisplay(int,int,int,android.view.IDisplayWindowRotationCallback)
android.view.IDisplayWindowRotationController$Stub$Proxy-><init>(android.os.IBinder)
android.view.IDisplayWindowRotationController$Stub$Proxy->asBinder()
android.view.IDisplayWindowRotationController$Stub$Proxy->getInterfaceDescriptor()
android.view.IDisplayWindowRotationController$Stub$Proxy->onRotateDisplay(int,int,int,android.view.IDisplayWindowRotationCallback)
android.view.IDisplayWindowRotationController$Stub-><init>()
android.view.IDisplayWindowRotationController$Stub->asBinder()
android.view.IDisplayWindowRotationController$Stub->asInterface(android.os.IBinder)
android.view.IDisplayWindowRotationController$Stub->getDefaultTransactionName(int)
android.view.IDisplayWindowRotationController$Stub->getMaxTransactionId()
android.view.IDisplayWindowRotationController$Stub->getTransactionName(int)
android.view.IDisplayWindowRotationController$Stub->onTransact(int,android.os.Parcel,android.os.Parcel,int)
android.view.IDisplayWindowRotationController->onRotateDisplay(int,int,int,android.view.IDisplayWindowRotationCallback)
android.view.IRecentsAnimationController$Default->hideCurrentInputMethod()
android.view.IRecentsAnimationController$Stub$Proxy->hideCurrentInputMethod()
android.view.IRecentsAnimationController->hideCurrentInputMethod()
android.view.IWindowManager$Default->enableScreenIfNeeded()
android.view.IWindowManager$Default->getNavBarPosition(int)
android.view.IWindowManager$Default->setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)
android.view.IWindowManager$Default->updateRotation(boolean,boolean)
android.view.IWindowManager$Stub$Proxy->enableScreenIfNeeded()
android.view.IWindowManager$Stub$Proxy->getNavBarPosition(int)
android.view.IWindowManager$Stub$Proxy->setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)
android.view.IWindowManager$Stub$Proxy->updateRotation(boolean,boolean)
android.view.IWindowManager->enableScreenIfNeeded()
android.view.IWindowManager->getNavBarPosition(int)
android.view.IWindowManager->setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)
android.view.IWindowManager->updateRotation(boolean,boolean)
android.view.IWindowSession$Default->addToDisplay(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,android.view.InsetsVisibilities,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[])
android.view.IWindowSession$Default->addToDisplayAsUser(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,android.view.InsetsVisibilities,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[])
android.view.IWindowSession$Default->addToDisplayWithoutInputChannel(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,android.view.InsetsState)
android.view.IWindowSession$Default->relayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,int,android.window.ClientWindowFrames,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl[],android.os.Bundle)
android.view.IWindowSession$Default->updateLayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.window.ClientWindowFrames,int,int)
android.view.IWindowSession$Default->updateVisibility(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl[])
android.view.IWindowSession$Stub$Proxy->addToDisplay(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,android.view.InsetsVisibilities,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[])
android.view.IWindowSession$Stub$Proxy->addToDisplayAsUser(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,android.view.InsetsVisibilities,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[])
android.view.IWindowSession$Stub$Proxy->addToDisplayWithoutInputChannel(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,android.view.InsetsState)
android.view.IWindowSession$Stub$Proxy->relayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,int,android.window.ClientWindowFrames,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl[],android.os.Bundle)
android.view.IWindowSession$Stub$Proxy->updateLayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.window.ClientWindowFrames,int,int)
android.view.IWindowSession$Stub$Proxy->updateVisibility(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl[])
android.view.IWindowSession->addToDisplay(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,android.view.InsetsVisibilities,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[])
android.view.IWindowSession->addToDisplayAsUser(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,android.view.InsetsVisibilities,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[])
android.view.IWindowSession->addToDisplayWithoutInputChannel(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,android.view.InsetsState)
android.view.IWindowSession->relayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,int,android.window.ClientWindowFrames,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl[],android.os.Bundle)
android.view.IWindowSession->updateLayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.window.ClientWindowFrames,int,int)
android.view.IWindowSession->updateVisibility(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl[])
android.view.InsetsController$InternalAnimationControlListener-><init>(boolean,boolean,int,int,boolean,int)
android.view.InsetsSourceControl-><init>(int,android.view.SurfaceControl,android.graphics.Point,android.graphics.Insets)
android.view.InsetsState->canControlSide(android.graphics.Rect,int)
android.view.SurfaceControlViewHost-><init>(android.content.Context,android.view.Display,android.view.WindowlessWindowManager,boolean)
android.view.ViewRootImpl-><init>(android.content.Context,android.view.Display,android.view.IWindowSession)
android.view.ViewRootImpl-><init>(android.content.Context,android.view.Display,android.view.IWindowSession,boolean)
android.view.ViewRootImpl->getAttachedWindowFrame()
android.view.ViewRootImpl->reportNextDraw()
android.view.ViewRootImpl->setReportNextDraw(boolean)
android.view.WindowLayout->computeFrames(android.view.WindowManager$LayoutParams,android.view.InsetsState,android.graphics.Rect,android.graphics.Rect,int,int,int,android.view.InsetsVisibilities,android.graphics.Rect,float,android.window.ClientWindowFrames)
android.view.WindowlessWindowManager->addToDisplay(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,android.view.InsetsVisibilities,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[])
android.view.WindowlessWindowManager->addToDisplayAsUser(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,android.view.InsetsVisibilities,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[])
android.view.WindowlessWindowManager->addToDisplayWithoutInputChannel(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,android.view.InsetsState)
android.view.WindowlessWindowManager->relayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,int,android.window.ClientWindowFrames,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl[],android.os.Bundle)
android.view.WindowlessWindowManager->updateLayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.window.ClientWindowFrames,int,int)
android.view.WindowlessWindowManager->updateVisibility(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl[])
android.widget.RemoteViews$Action->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$Action->initActionAsync(android.widget.RemoteViews$ViewTree,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$AsyncApplyTask-><init>(android.widget.RemoteViews,android.widget.RemoteViews,android.view.ViewGroup,android.content.Context,android.widget.RemoteViews$OnViewAppliedListener,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources,android.view.View,boolean)
android.widget.RemoteViews$AsyncApplyTask-><init>(android.widget.RemoteViews,android.widget.RemoteViews,android.view.ViewGroup,android.content.Context,android.widget.RemoteViews$OnViewAppliedListener,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources,android.view.View,boolean,android.widget.RemoteViews$AsyncApplyTask-IA)
android.widget.RemoteViews$BaseReflectionAction->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$BaseReflectionAction->initActionAsync(android.widget.RemoteViews$ViewTree,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$BitmapReflectionAction->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$ColorResources-><init>(android.content.res.loader.ResourcesLoader)
android.widget.RemoteViews$LayoutParamAction->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$OverrideTextColorsAction->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$RemoveFromParentAction->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$RemoveFromParentAction->initActionAsync(android.widget.RemoteViews$ViewTree,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$RunnableAction->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$SetCompoundButtonCheckedAction->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$SetDrawableTint->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$SetEmptyView->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$SetIntTagAction->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$SetOnCheckedChangeResponse->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$SetOnClickResponse->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$SetPendingIntentTemplate->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$SetRadioGroupCheckedAction->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$SetRemoteCollectionItemListAdapterAction->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$SetRemoteInputsAction->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$SetRemoteViewsAdapterIntent->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$SetRemoteViewsAdapterIntent->initActionAsync(android.widget.RemoteViews$ViewTree,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$SetRemoteViewsAdapterList->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$SetRippleDrawableColor->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$SetViewOutlinePreferredRadiusAction->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$TextViewDrawableAction->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$TextViewDrawableAction->initActionAsync(android.widget.RemoteViews$ViewTree,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$TextViewSizeAction->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$ViewContentNavigation->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$ViewGroupActionAdd->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$ViewGroupActionAdd->initActionAsync(android.widget.RemoteViews$ViewTree,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$ViewGroupActionAdd->insertNewView(android.content.Context,android.widget.RemoteViews$ViewTree,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources,java.lang.Runnable)
android.widget.RemoteViews$ViewGroupActionRemove->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$ViewGroupActionRemove->initActionAsync(android.widget.RemoteViews$ViewTree,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews$ViewPaddingAction->apply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews->applyNestedViews(android.content.Context,android.view.ViewGroup,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.util.SizeF,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews->applyWithTheme(android.content.Context,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,int,android.util.SizeF)
android.widget.RemoteViews->getInternalAsyncApplyTask(android.content.Context,android.view.ViewGroup,android.widget.RemoteViews$OnViewAppliedListener,android.widget.RemoteViews$InteractionHandler,android.util.SizeF,android.widget.RemoteViews$ColorResources,android.view.View)
android.widget.RemoteViews->inflateView(android.content.Context,android.widget.RemoteViews,android.view.ViewGroup)
android.widget.RemoteViews->performApply(android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.widget.RemoteViews$ColorResources)
android.widget.RemoteViews->reapply(android.content.Context,android.view.View,android.widget.RemoteViews$InteractionHandler,android.util.SizeF,android.widget.RemoteViews$ColorResources,boolean)
android.widget.RemoteViews->reapplyNestedViews(android.content.Context,android.view.View,android.view.ViewGroup,android.widget.RemoteViews$InteractionHandler,android.util.SizeF,android.widget.RemoteViews$ColorResources)
android.window.BackNavigationInfo-><init>(int,android.view.RemoteAnimationTarget,android.view.SurfaceControl,android.hardware.HardwareBuffer,android.app.WindowConfiguration,android.os.RemoteCallback,android.window.IOnBackInvokedCallback)
android.window.ITaskFragmentOrganizer$Default->onActivityReparentToTask(int,android.content.Intent,android.os.IBinder)
android.window.ITaskFragmentOrganizer$Default->onTaskFragmentAppeared(android.window.TaskFragmentInfo)
android.window.ITaskFragmentOrganizer$Default->onTaskFragmentError(android.os.IBinder,android.os.Bundle)
android.window.ITaskFragmentOrganizer$Default->onTaskFragmentInfoChanged(android.window.TaskFragmentInfo)
android.window.ITaskFragmentOrganizer$Default->onTaskFragmentParentInfoChanged(android.os.IBinder,android.content.res.Configuration)
android.window.ITaskFragmentOrganizer$Default->onTaskFragmentVanished(android.window.TaskFragmentInfo)
android.window.ITaskFragmentOrganizer$Stub$Proxy->onActivityReparentToTask(int,android.content.Intent,android.os.IBinder)
android.window.ITaskFragmentOrganizer$Stub$Proxy->onTaskFragmentAppeared(android.window.TaskFragmentInfo)
android.window.ITaskFragmentOrganizer$Stub$Proxy->onTaskFragmentError(android.os.IBinder,android.os.Bundle)
android.window.ITaskFragmentOrganizer$Stub$Proxy->onTaskFragmentInfoChanged(android.window.TaskFragmentInfo)
android.window.ITaskFragmentOrganizer$Stub$Proxy->onTaskFragmentParentInfoChanged(android.os.IBinder,android.content.res.Configuration)
android.window.ITaskFragmentOrganizer$Stub$Proxy->onTaskFragmentVanished(android.window.TaskFragmentInfo)
android.window.ITaskFragmentOrganizer->onActivityReparentToTask(int,android.content.Intent,android.os.IBinder)
android.window.ITaskFragmentOrganizer->onTaskFragmentAppeared(android.window.TaskFragmentInfo)
android.window.ITaskFragmentOrganizer->onTaskFragmentError(android.os.IBinder,android.os.Bundle)
android.window.ITaskFragmentOrganizer->onTaskFragmentInfoChanged(android.window.TaskFragmentInfo)
android.window.ITaskFragmentOrganizer->onTaskFragmentParentInfoChanged(android.os.IBinder,android.content.res.Configuration)
android.window.ITaskFragmentOrganizer->onTaskFragmentVanished(android.window.TaskFragmentInfo)
android.window.TaskFragmentOrganizer->applySyncTransaction(android.window.WindowContainerTransaction,android.window.WindowContainerTransactionCallback)
android.window.TaskFragmentOrganizer->onActivityReparentToTask(int,android.content.Intent,android.os.IBinder)
android.window.TaskFragmentOrganizer->putExceptionInBundle(java.lang.Throwable)
android.window.WindowContainerTransaction$HierarchyOp$Builder->setMoveAdjacentTogether(boolean)
android.window.WindowContainerTransaction$HierarchyOp->createForAdjacentRoots(android.os.IBinder,android.os.IBinder,boolean)
android.window.WindowContainerTransaction$HierarchyOp->getMoveAdjacentTogether()
com.android.internal.app.ResolverActivity->isLaunchingTargetInOtherProfile()
com.android.internal.app.ResolverActivity->prepareIntentForCrossProfileLaunch(android.content.Intent)
com.android.internal.app.ResolverActivity->safelyStartActivityInternal(com.android.internal.app.chooser.TargetInfo,android.os.UserHandle)
com.android.internal.app.ResolverListController->getResolversForIntent(boolean,boolean,java.util.List)
com.android.internal.app.ResolverListController->getResolversForIntentAsUser(boolean,boolean,java.util.List,android.os.UserHandle)
com.android.internal.inputmethod.IInputMethodPrivilegedOperations$Default->hideMySoftInput(int,com.android.internal.infra.AndroidFuture)
com.android.internal.inputmethod.IInputMethodPrivilegedOperations$Stub$Proxy->hideMySoftInput(int,com.android.internal.infra.AndroidFuture)
com.android.internal.inputmethod.IInputMethodPrivilegedOperations->hideMySoftInput(int,com.android.internal.infra.AndroidFuture)
com.android.internal.inputmethod.InputMethodPrivilegedOperations->hideMySoftInput(int)
com.android.internal.jank.FrameTracker-><init>(com.android.internal.jank.InteractionJankMonitor$Session,android.os.Handler,com.android.internal.jank.FrameTracker$ThreadedRendererWrapper,com.android.internal.jank.FrameTracker$ViewRootWrapper,com.android.internal.jank.FrameTracker$SurfaceControlWrapper,com.android.internal.jank.FrameTracker$ChoreographerWrapper,com.android.internal.jank.FrameTracker$FrameMetricsWrapper,com.android.internal.jank.FrameTracker$StatsLogWrapper,int,int,com.android.internal.jank.FrameTracker$FrameTrackerListener,com.android.internal.jank.InteractionJankMonitor$Configuration)
com.android.internal.jank.FrameTracker->postTraceStartMarker()
com.android.internal.jank.InteractionJankMonitor$Configuration->getContext()
com.android.internal.jank.InteractionJankMonitor->getLock()
com.android.internal.location.GpsNetInitiatedHandler-><init>(android.content.Context,android.location.INetInitiatedListener,boolean)
com.android.internal.net.ipsec.ike.keepalive.IkeNattKeepalive-><init>(android.content.Context,android.net.ConnectivityManager,int,java.net.Inet4Address,java.net.Inet4Address,android.net.IpSecManager$UdpEncapsulationSocket,android.net.Network,com.android.internal.net.ipsec.ike.utils.IkeAlarm$IkeAlarmConfig)
com.android.internal.net.ipsec.ike.keepalive.IkeNattKeepalive-><init>(android.content.Context,android.net.ConnectivityManager,int,java.net.Inet4Address,java.net.Inet4Address,android.net.IpSecManager$UdpEncapsulationSocket,android.net.Network,com.android.internal.net.ipsec.ike.utils.IkeAlarm$IkeAlarmConfig,com.android.internal.net.ipsec.ike.keepalive.IkeNattKeepalive$Dependencies)
com.android.internal.net.ipsec.ike.net.IkeConnectionController$Dependencies->newIkeNattKeepalive(android.content.Context,java.net.InetAddress,java.net.InetAddress,android.net.IpSecManager$UdpEncapsulationSocket,android.net.Network,com.android.internal.net.ipsec.ike.utils.IkeAlarm$IkeAlarmConfig)
com.android.internal.net.ipsec.ike.net.IkeConnectionController->onUnderlyingNetworkUpdated(android.net.Network)
com.android.internal.net.ipsec.ike.net.IkeConnectionController->setNetwork(android.net.Network)
com.android.internal.net.ipsec.ike.net.IkeConnectionController->setRemoteAddress()
com.android.internal.net.ipsec.ike.net.IkeDefaultNetworkCallback-><init>(com.android.internal.net.ipsec.ike.net.IkeNetworkUpdater,android.net.Network,java.net.InetAddress)
com.android.internal.net.ipsec.ike.net.IkeNetworkCallbackBase-><init>(com.android.internal.net.ipsec.ike.net.IkeNetworkUpdater,android.net.Network,java.net.InetAddress)
com.android.internal.net.ipsec.ike.net.IkeNetworkCallbackBase->onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties)
com.android.internal.net.ipsec.ike.net.IkeNetworkCallbackBase->setNetwork(android.net.Network)
com.android.internal.net.ipsec.ike.net.IkeNetworkUpdater->onUnderlyingNetworkUpdated(android.net.Network)
com.android.internal.net.ipsec.ike.net.IkeSpecificNetworkCallback-><init>(com.android.internal.net.ipsec.ike.net.IkeNetworkUpdater,android.net.Network,java.net.InetAddress)
com.android.internal.statusbar.IStatusBar$Default->handleWindowManagerLoggingCommand(java.lang.String[],android.os.ParcelFileDescriptor)
com.android.internal.statusbar.IStatusBar$Default->onSystemBarAttributesChanged(int,int,com.android.internal.view.AppearanceRegion[],boolean,int,android.view.InsetsVisibilities,java.lang.String)
com.android.internal.statusbar.IStatusBar$Stub$Proxy->handleWindowManagerLoggingCommand(java.lang.String[],android.os.ParcelFileDescriptor)
com.android.internal.statusbar.IStatusBar$Stub$Proxy->onSystemBarAttributesChanged(int,int,com.android.internal.view.AppearanceRegion[],boolean,int,android.view.InsetsVisibilities,java.lang.String)
com.android.internal.statusbar.IStatusBar->handleWindowManagerLoggingCommand(java.lang.String[],android.os.ParcelFileDescriptor)
com.android.internal.statusbar.IStatusBar->onSystemBarAttributesChanged(int,int,com.android.internal.view.AppearanceRegion[],boolean,int,android.view.InsetsVisibilities,java.lang.String)
com.android.internal.statusbar.RegisterStatusBarResult-><init>(android.util.ArrayMap,int,int,com.android.internal.view.AppearanceRegion[],int,int,boolean,int,android.os.IBinder,boolean,int,android.view.InsetsVisibilities,java.lang.String,int[])
com.android.internal.telephony.MultiSimSettingController->onUserDataEnabled(int,boolean)
com.android.internal.telephony.RIL->riljLogv(java.lang.String)
com.android.internal.telephony.TelephonyStatsLog->buildStatsEvent(int,int,boolean,boolean,int,int,int,boolean,int,boolean,long,boolean,int,boolean,int,int,int,long,boolean,int,int[])
com.android.internal.telephony.TelephonyStatsLog->buildStatsEvent(int,int,int,int,int,int,boolean,boolean,int,boolean,boolean,int,long,int,long)
com.android.internal.telephony.TelephonyStatsLog->buildStatsEvent(int,int,int,int,int,int,boolean,boolean,int,int,boolean,boolean,long,boolean,boolean,int,int)
com.android.internal.telephony.TelephonyStatsLog->buildStatsEvent(int,int,int,int,int,int,int,boolean,int,boolean,int,boolean,boolean,int,long)
com.android.internal.telephony.data.DataConfigManager->registerForConfigUpdate(android.os.Handler,int)
com.android.internal.telephony.data.DataConfigManager->unregisterForConfigUpdate(android.os.Handler)
com.android.internal.telephony.data.DataConfigManager->updateSingleDataNetworkTypeList()
com.android.internal.telephony.data.DataNetwork$HandoverState->shouldDeferDataStateChangedEvent(android.os.Message)
com.android.internal.telephony.data.DataNetwork->onDataConfigUpdated()
com.android.internal.telephony.data.DataNetworkController->onDataConfigUpdated()
com.android.internal.telephony.data.DataNetworkController->trackSetupDataCallFailure(int)
com.android.internal.telephony.data.DataProfileManager->getDataProfile(java.lang.String,android.telephony.data.TrafficDescriptor)
com.android.internal.telephony.data.DataProfileManager->onDataConfigUpdated()
com.android.internal.telephony.data.DataProfileManager->updateDataProfiles()
com.android.internal.telephony.data.DataProfileManager->updateInitialAttachDataProfileAtModem()
com.android.internal.telephony.data.DataRetryManager->onDataConfigUpdated()
com.android.internal.telephony.data.DataServiceManager->setupCallbackHelper(java.lang.String,android.os.Message)
com.android.internal.telephony.data.DataStallRecoveryManager->onDataConfigUpdated()
com.android.internal.telephony.imsphone.ImsPhone$Cf-><init>(java.lang.String,boolean,android.os.Message)
com.android.internal.telephony.metrics.DataCallSessionStats->onHandoverFailure(int)
com.android.internal.telephony.metrics.PerSimStatus-><init>(int,int,int,int,boolean,boolean,int,int,boolean,boolean,long,boolean,boolean,int,int)
com.android.internal.telephony.metrics.RcsStats->buildLog()
com.android.internal.telephony.metrics.RcsStats->buildProto()
com.android.internal.telephony.metrics.RcsStats->reset()
com.android.internal.telephony.nitz.NitzStateMachineImpl->clearNetworkStateAndRerunDetection(java.lang.String,boolean)
com.android.internal.util.FrameworkStatsLog->write(int,int,int,java.lang.String,int,int)
com.android.internal.util.FrameworkStatsLog->write(int,int,int,java.lang.String,long)
com.android.internal.util.FrameworkStatsLog->write(int,int,java.lang.String,int,java.lang.String,java.lang.String,boolean,long,int,int,int,int,int,java.lang.String,int,int,int,int,boolean,boolean,boolean,int,long)
com.android.internal.util.FrameworkStatsLog->write(int,int,java.lang.String,int,long,long,long,long,long,long,int,int,int,int,int,int)
com.android.internal.util.ScreenshotHelper$ScreenshotRequest-><init>(int,android.os.Bundle,android.graphics.Rect,android.graphics.Insets,int,int,android.content.ComponentName)
com.android.internal.util.ScreenshotHelper$ScreenshotRequest-><init>(int,boolean,boolean)
com.android.internal.util.ScreenshotHelper$ScreenshotRequest->getHasNavBar()
com.android.internal.util.ScreenshotHelper$ScreenshotRequest->getHasStatusBar()
com.android.internal.util.ScreenshotHelper->takeScreenshot(int,boolean,boolean,android.os.Handler,java.util.function.Consumer)
com.android.internal.util.ScreenshotHelper->takeScreenshot(int,boolean,boolean,int,android.os.Handler,java.util.function.Consumer)
com.android.internal.util.ScreenshotHelper->takeScreenshot(int,boolean,boolean,long,android.os.Handler,java.util.function.Consumer)
com.android.internal.util.ScreenshotHelper->takeScreenshot(int,long,android.os.Handler,com.android.internal.util.ScreenshotHelper$ScreenshotRequest,java.util.function.Consumer)
com.android.phone.ecc.nano.Extension->computeSerializedSize(java.lang.Object)
com.android.phone.ecc.nano.Extension->writeTo(java.lang.Object,com.android.phone.ecc.nano.CodedOutputByteBufferNano)
sun.misc.FloatingDecimal->getHexDigit(java.lang.String,int)
sun.misc.FloatingDecimal->stripLeadingZeros(java.lang.String)
