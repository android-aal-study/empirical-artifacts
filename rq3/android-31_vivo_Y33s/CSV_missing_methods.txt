android.app.ActivityManagerInternal->deletePendingTopUid(int)
android.app.ActivityThread$ProviderKey->hashCode(java.lang.String,int)
android.app.ContextImpl->sendBroadcastMultiplePermissions(android.content.Intent,java.lang.String[],java.lang.String[])
android.app.IActivityManager$Default->broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],java.lang.String[],int,android.os.Bundle,boolean,boolean,int)
android.app.IActivityManager$Stub$Proxy->broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],java.lang.String[],int,android.os.Bundle,boolean,boolean,int)
android.app.IActivityManager->broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],java.lang.String[],int,android.os.Bundle,boolean,boolean,int)
android.bluetooth.IBluetoothVolumeControl$Default->setVolume(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource)
android.bluetooth.IBluetoothVolumeControl$Default->setVolumeGroup(int,int,android.content.AttributionSource)
android.bluetooth.IBluetoothVolumeControl$Stub$Proxy->setVolume(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource)
android.bluetooth.IBluetoothVolumeControl$Stub$Proxy->setVolumeGroup(int,int,android.content.AttributionSource)
android.bluetooth.IBluetoothVolumeControl->setVolume(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource)
android.bluetooth.IBluetoothVolumeControl->setVolumeGroup(int,int,android.content.AttributionSource)
android.bluetooth.le.AdvertiseData-><init>(java.util.List,java.util.List,android.util.SparseArray,java.util.Map,boolean,boolean)
android.bluetooth.le.AdvertiseData-><init>(java.util.List,java.util.List,android.util.SparseArray,java.util.Map,boolean,boolean,android.bluetooth.le.AdvertiseData$1)
android.bluetooth.le.ScanFilter-><init>(java.lang.String,java.lang.String,android.os.ParcelUuid,android.os.ParcelUuid,android.os.ParcelUuid,android.os.ParcelUuid,android.os.ParcelUuid,byte[],byte[],int,byte[],byte[],int,byte[])
android.bluetooth.le.ScanFilter-><init>(java.lang.String,java.lang.String,android.os.ParcelUuid,android.os.ParcelUuid,android.os.ParcelUuid,android.os.ParcelUuid,android.os.ParcelUuid,byte[],byte[],int,byte[],byte[],int,byte[],android.bluetooth.le.ScanFilter$1)
android.bluetooth.le.ScanRecord-><init>(java.util.List,java.util.List,android.util.SparseArray,java.util.Map,int,int,java.lang.String,byte[])
android.content.ContextWrapper->sendBroadcastMultiplePermissions(android.content.Intent,java.lang.String[],java.lang.String[])
android.content.pm.ILauncherApps$Default->getActivityLaunchIntent(android.content.ComponentName,android.os.Bundle,android.os.UserHandle)
android.content.pm.ILauncherApps$Stub$Proxy->getActivityLaunchIntent(android.content.ComponentName,android.os.Bundle,android.os.UserHandle)
android.content.pm.ILauncherApps->getActivityLaunchIntent(android.content.ComponentName,android.os.Bundle,android.os.UserHandle)
android.net.wifi.SoftApConfiguration-><init>(java.lang.String,android.net.MacAddress,java.lang.String,boolean,android.util.SparseIntArray,int,int,boolean,long,boolean,java.util.List,java.util.List,int,boolean,boolean,boolean)
android.net.wifi.SoftApConfiguration-><init>(java.lang.String,android.net.MacAddress,java.lang.String,boolean,android.util.SparseIntArray,int,int,boolean,long,boolean,java.util.List,java.util.List,int,boolean,boolean,boolean,android.net.wifi.SoftApConfiguration$1)
android.telephony.PhoneNumberUtils->getCurrentIdp(boolean)
android.telephony.PhoneNumberUtils->processPlusCode(java.lang.String,boolean)
android.telephony.data.ApnSetting-><init>(android.telephony.data.ApnSetting$Builder,android.telephony.data.ApnSetting$1)
android.telephony.ims.ImsCallSession$IImsCallSessionListenerProxy-><init>(android.telephony.ims.ImsCallSession,android.telephony.ims.ImsCallSession$1)
android.window.WindowContextController-><init>(android.os.IBinder)
android.window.WindowContextController-><init>(android.os.IBinder,android.view.IWindowManager)
com.android.internal.accessibility.AccessibilityShortcutController->createShortcutWarningDialog(int)
com.android.internal.app.ChooserFlags-><init>()
com.android.internal.app.ResolverActivity->isLaunchingTargetInOtherProfile()
com.android.internal.app.ResolverActivity->prepareIntentForCrossProfileLaunch(android.content.Intent)
com.android.internal.display.BrightnessSynchronizer->updateBrightnessFloatFromInt(int)
com.android.internal.notification.NotificationAccessConfirmationActivityContract->launcherIntent(int,android.content.ComponentName,java.lang.String)
com.android.internal.policy.IKeyguardStateCallback$Default->onShowingStateChanged(boolean)
com.android.internal.policy.IKeyguardStateCallback$Stub$Proxy->onShowingStateChanged(boolean)
com.android.internal.policy.IKeyguardStateCallback->onShowingStateChanged(boolean)
com.android.internal.policy.KeyInterceptionInfo-><init>(int,int,java.lang.String)
com.android.internal.telephony.CallManager$CallManagerHandler-><init>(com.android.internal.telephony.CallManager,com.android.internal.telephony.CallManager$1)
com.android.internal.telephony.IccPhoneBookInterfaceManager$Request-><init>(com.android.internal.telephony.IccPhoneBookInterfaceManager$1)
com.android.internal.telephony.IccSmsInterfaceManager$Request-><init>(com.android.internal.telephony.IccSmsInterfaceManager$1)
com.android.internal.telephony.InboundSmsHandler$DefaultState-><init>(com.android.internal.telephony.InboundSmsHandler,com.android.internal.telephony.InboundSmsHandler$1)
com.android.internal.telephony.InboundSmsHandler$DeliveringState-><init>(com.android.internal.telephony.InboundSmsHandler,com.android.internal.telephony.InboundSmsHandler$1)
com.android.internal.telephony.InboundSmsHandler$IdleState-><init>(com.android.internal.telephony.InboundSmsHandler,com.android.internal.telephony.InboundSmsHandler$1)
com.android.internal.telephony.InboundSmsHandler$StartupState-><init>(com.android.internal.telephony.InboundSmsHandler,com.android.internal.telephony.InboundSmsHandler$1)
com.android.internal.telephony.InboundSmsHandler$WaitingState-><init>(com.android.internal.telephony.InboundSmsHandler,com.android.internal.telephony.InboundSmsHandler$1)
com.android.internal.telephony.MultiSimSettingController$SimCombinationWarningParams-><init>(com.android.internal.telephony.MultiSimSettingController,com.android.internal.telephony.MultiSimSettingController$1)
com.android.internal.telephony.PhoneSwitcher$EmergencyOverrideRequest-><init>(com.android.internal.telephony.PhoneSwitcher$1)
com.android.internal.telephony.SMSDispatcher$SmsTracker-><init>(java.util.HashMap,android.app.PendingIntent,android.app.PendingIntent,android.content.pm.PackageInfo,java.lang.String,java.lang.String,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicBoolean,android.net.Uri,com.android.internal.telephony.SmsHeader,boolean,java.lang.String,int,boolean,boolean,int,int,int,boolean,long,com.android.internal.telephony.SMSDispatcher$1)
com.android.internal.telephony.ServiceStateTracker->queueNextSignalStrengthPoll()
com.android.internal.telephony.SmsUsageMonitor->checkCallerIsSystemOrPhoneApp()
com.android.internal.telephony.cat.Menu-><init>(android.os.Parcel,com.android.internal.telephony.cat.Menu$1)
com.android.internal.telephony.cat.TextMessage-><init>(android.os.Parcel,com.android.internal.telephony.cat.TextMessage$1)
com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState-><init>(com.android.internal.telephony.dataconnection.DataConnection,com.android.internal.telephony.dataconnection.DataConnection$1)
com.android.internal.telephony.dataconnection.DataConnection$DcActiveState-><init>(com.android.internal.telephony.dataconnection.DataConnection,com.android.internal.telephony.dataconnection.DataConnection$1)
com.android.internal.telephony.dataconnection.DataConnection$DcDefaultState-><init>(com.android.internal.telephony.dataconnection.DataConnection,com.android.internal.telephony.dataconnection.DataConnection$1)
com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState-><init>(com.android.internal.telephony.dataconnection.DataConnection,com.android.internal.telephony.dataconnection.DataConnection$1)
com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection-><init>(com.android.internal.telephony.dataconnection.DataConnection,com.android.internal.telephony.dataconnection.DataConnection$1)
com.android.internal.telephony.dataconnection.DataConnection$DcInactiveState-><init>(com.android.internal.telephony.dataconnection.DataConnection,com.android.internal.telephony.dataconnection.DataConnection$1)
com.android.internal.telephony.metrics.MetricsCollector->setPersistAtomsStorage(com.android.internal.telephony.metrics.PersistAtomsStorage)
com.android.internal.telephony.uicc.IsimUiccRecords$EfIsimDomainLoaded-><init>(com.android.internal.telephony.uicc.IsimUiccRecords,com.android.internal.telephony.uicc.IsimUiccRecords$1)
com.android.internal.telephony.uicc.IsimUiccRecords$EfIsimImpiLoaded-><init>(com.android.internal.telephony.uicc.IsimUiccRecords,com.android.internal.telephony.uicc.IsimUiccRecords$1)
com.android.internal.telephony.uicc.IsimUiccRecords$EfIsimImpuLoaded-><init>(com.android.internal.telephony.uicc.IsimUiccRecords,com.android.internal.telephony.uicc.IsimUiccRecords$1)
com.android.internal.telephony.uicc.IsimUiccRecords$EfIsimIstLoaded-><init>(com.android.internal.telephony.uicc.IsimUiccRecords,com.android.internal.telephony.uicc.IsimUiccRecords$1)
com.android.internal.telephony.uicc.IsimUiccRecords$EfIsimPcscfLoaded-><init>(com.android.internal.telephony.uicc.IsimUiccRecords,com.android.internal.telephony.uicc.IsimUiccRecords$1)
com.android.internal.view.IInputMethodManager$Default->getInputMethodWindowVisibleHeight()
com.android.internal.view.IInputMethodManager$Stub$Proxy->getInputMethodWindowVisibleHeight()
com.android.internal.view.IInputMethodManager->getInputMethodWindowVisibleHeight()
com.android.internal.widget.DecorCaptionView->onConfigurationChanged(boolean)
com.google.android.mms.pdu.PduComposer$BufferStack-><init>(com.google.android.mms.pdu.PduComposer,com.google.android.mms.pdu.PduComposer$1)
com.google.android.mms.pdu.PduComposer$PositionMarker-><init>(com.google.android.mms.pdu.PduComposer,com.google.android.mms.pdu.PduComposer$1)
